// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Collection Request Message
public struct CRM : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static CRM GetRootAsCRM(ByteBuffer _bb) { return GetRootAsCRM(_bb, new CRM()); }
  public static CRM GetRootAsCRM(ByteBuffer _bb, CRM obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool CRMBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$CRM"); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CRM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  public string ID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIDArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  public string CLASSIFICATION { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCLASSIFICATIONBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCLASSIFICATIONBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCLASSIFICATIONArray() { return __p.__vector_as_array<byte>(6); }
  /// The type of this collect or contact request.
  public string TYPE { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTYPEBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTYPEBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTYPEArray() { return __p.__vector_as_array<byte>(8); }
  /// Unique identifier of the parent plan or schedule associated with this request.
  public string ID_PLAN { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetID_PLANBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetID_PLANBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetID_PLANArray() { return __p.__vector_as_array<byte>(10); }
  /// Index number for records within a collection plan or schedule.
  public int PLAN_INDEX { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Task ID associated with this request.
  public string TASK_ID { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTASK_IDBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTASK_IDBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTASK_IDArray() { return __p.__vector_as_array<byte>(14); }
  /// The dwell ID associated with this request.
  public string DWELL_ID { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDWELL_IDBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetDWELL_IDBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetDWELL_IDArray() { return __p.__vector_as_array<byte>(16); }
  /// Optional ID from external systems.
  public string EXTERNAL_ID { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEXTERNAL_IDBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetEXTERNAL_IDBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetEXTERNAL_IDArray() { return __p.__vector_as_array<byte>(18); }
  /// Unique identifier of the requested/scheduled/planned sensor associated with this request.
  public string ID_SENSOR { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetID_SENSORBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetID_SENSORBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetID_SENSORArray() { return __p.__vector_as_array<byte>(20); }
  /// Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request.
  public string ORIG_SENSOR_ID { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIG_SENSOR_IDBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetORIG_SENSOR_IDBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetORIG_SENSOR_IDArray() { return __p.__vector_as_array<byte>(22); }
  /// Optional type of observation requested.
  public string OB_TYPE { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOB_TYPEBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetOB_TYPEBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetOB_TYPEArray() { return __p.__vector_as_array<byte>(24); }
  /// The priority of the collect request.
  public string PRIORITY { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPRIORITYBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetPRIORITYBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetPRIORITYArray() { return __p.__vector_as_array<byte>(26); }
  /// The tasking category associated with this request.
  public int TASK_CATEGORY { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The tasking suffix associated with this request.
  public string SUFFIX { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSUFFIXBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetSUFFIXBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetSUFFIXArray() { return __p.__vector_as_array<byte>(30); }
  /// Boolean indicating that this collect request is UCT follow-up.
  public bool UCT_FOLLOW_UP { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The start time of the collect or contact request window, in ISO 8601 UTC format.
  public string START_TIME { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSTART_TIMEBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetSTART_TIMEBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetSTART_TIMEArray() { return __p.__vector_as_array<byte>(34); }
  /// The end time of the collect or contact request window, in ISO 8601 UTC format.
  public string END_TIME { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEND_TIMEBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetEND_TIMEBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetEND_TIMEArray() { return __p.__vector_as_array<byte>(36); }
  /// Satellite/catalog number of the target on-orbit object for this request.
  public uint NORAD_CAT_ID { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// Optional identifier provided by the data source to indicate the target object of this request.
  public string ORIG_OBJECT_ID { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIG_OBJECT_IDBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetORIG_OBJECT_IDBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetORIG_OBJECT_IDArray() { return __p.__vector_as_array<byte>(40); }
  /// The tasking group to which the target object is assigned.
  public string TASK_GROUP { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTASK_GROUPBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetTASK_GROUPBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetTASK_GROUPArray() { return __p.__vector_as_array<byte>(42); }
  /// Inter-Range Operations Number.
  public int IRON { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The orbit regime of the target.
  public string ORBIT_REGIME { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORBIT_REGIMEBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetORBIT_REGIMEBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetORBIT_REGIMEArray() { return __p.__vector_as_array<byte>(46); }
  /// The minimum object (diameter) size, in meters, to be reported.
  public double TARGET_SIZE { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The minimum Radar Cross-Section of the target, in m^2.
  public double RCS_MIN { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Radar Cross-Section of the target, in m^2.
  public double RCS { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The maximum Radar Cross-Section of the target, in m^2.
  public double RCS_MAX { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The minimum frequency of interest, in MHz.
  public double FREQ_MIN { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The estimated or expected emission frequency of the target, in MHz.
  public double FREQ { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The maximum frequency of interest, in MHz.
  public double FREQ_MAX { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The RF polarization.
  public string POLARIZATION { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPOLARIZATIONBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetPOLARIZATIONBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetPOLARIZATIONArray() { return __p.__vector_as_array<byte>(62); }
  /// The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).
  public double VIS_MAG_MIN { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The estimated or expected visual magnitude of the target, in Magnitudes (M).
  public double VIS_MAG { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).
  public double VIS_MAG_MAX { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The spectral model used for the irradiance calculation.
  public string SPECTRAL_MODEL { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSPECTRAL_MODELBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetSPECTRAL_MODELBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetSPECTRAL_MODELArray() { return __p.__vector_as_array<byte>(70); }
  /// The fraction of solar energy reflected from target.
  public double REFLECTANCE { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The target object irradiance value.
  public double IRRADIANCE { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For optical sensors, the requested number of frames to capture at each sensor step.
  public int NUM_FRAMES { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// For optical sensors, the frame rate of the camera, in Hz.
  public double FRAME_RATE { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For optical sensors, the integration time per camera frame, in milliseconds.
  public double INTEGRATION_TIME { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The number of requested tracks on the target.
  public int NUM_TRACKS { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The number of requested observations on the target.
  public int NUM_OBS { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The duration of the collect request, in seconds.
  public int DURATION { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The search pattern to be executed for this request.
  public string SRCH_PATTERN { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSRCH_PATTERNBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetSRCH_PATTERNBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetSRCH_PATTERNArray() { return __p.__vector_as_array<byte>(88); }
  /// Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.
  public string SCENARIO { get { int o = __p.__offset(90); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSCENARIOBytes() { return __p.__vector_as_span<byte>(90, 1); }
#else
  public ArraySegment<byte>? GetSCENARIOBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public byte[] GetSCENARIOArray() { return __p.__vector_as_array<byte>(90); }
  /// ID of the Elset of the object associated with this request.
  public string ID_ELSET { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetID_ELSETBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetID_ELSETBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetID_ELSETArray() { return __p.__vector_as_array<byte>(92); }
  /// ID of the Manifold Elset of the object associated with this request.
  public string ID_MANIFOLD { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetID_MANIFOLDBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetID_MANIFOLDBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetID_MANIFOLDArray() { return __p.__vector_as_array<byte>(94); }
  /// ID of the State Vector of the object or central vector associated with this request.
  public string ID_STATE_VECTOR { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetID_STATE_VECTORBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetID_STATE_VECTORBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetID_STATE_VECTORArray() { return __p.__vector_as_array<byte>(96); }
  /// ID of the Ephemeris Set of the object associated with this request.
  public string ES_ID { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetES_IDBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetES_IDBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetES_IDArray() { return __p.__vector_as_array<byte>(98); }
  /// Epoch time, in ISO 8601 UTC format, of the orbital elements.
  public string EPOCH { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEPOCHBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetEPOCHBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetEPOCHArray() { return __p.__vector_as_array<byte>(100); }
  /// The average of the periapsis and apoapsis distances, in kilometers.
  public double SEMI_MAJOR_AXIS { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The orbital eccentricity of an astronomical object.
  public double ECCENTRICITY { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The angle, in degrees, between the equator and the orbit plane.
  public double INCLINATION { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Right ascension of the ascending node, in degrees.
  public double RAAN { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The argument of perigee, in degrees.
  public double ARG_OF_PERIGEE { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The mean anomaly defines the angular position, in degrees, of the object on its orbital path.
  public double MEAN_ANOMALY { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The expected or directed right ascension angle, in degrees.
  public double RA { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The expected or directed declination angle, in degrees.
  public double DEC { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The expected or directed azimuth angle, in degrees.
  public double AZ { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The expected or directed elevation angle, in degrees.
  public double EL { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The expected acquisition range or defined center range, in km.
  public double RANGE { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The extent of the azimuth angle, in degrees, from center azimuth.
  public double EXTENT_AZ { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The extent of the elevation angle, in degrees, from center elevation.
  public double EXTENT_EL { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The extent of the range, in km, from center range.
  public double EXTENT_RANGE { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 latitude, in degrees.
  public double LAT { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 longitude, in degrees.
  public double LON { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Height above WGS-84 ellipsoid (HAE), in kilometers.
  public double ALT { get { int o = __p.__offset(134); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The stopping WGS-84 latitude of a volume definition, in degrees.
  public double STOP_LAT { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The stopping WGS-84 longitude of a volume definition, in degrees.
  public double STOP_LON { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The stopping HAE WGS-84 height above ellipsoid (HAE), in kilometers.
  public double STOP_ALT { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The maximum inclination, in degrees, to be used in search operations.
  public double SRCH_INC { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The angular distance, in degrees, in the sensor-x direction from scan center.
  public double X_ANGLE { get { int o = __p.__offset(144); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The angular distance, in degrees, in the sensor-y direction from scan center.
  public double Y_ANGLE { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.
  public double ORIENT_ANGLE { get { int o = __p.__offset(148); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The customer for this request.
  public string CUSTOMER { get { int o = __p.__offset(150); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCUSTOMERBytes() { return __p.__vector_as_span<byte>(150, 1); }
#else
  public ArraySegment<byte>? GetCUSTOMERBytes() { return __p.__vector_as_arraysegment(150); }
#endif
  public byte[] GetCUSTOMERArray() { return __p.__vector_as_array<byte>(150); }
  /// Notes or comments associated with this request.
  public string NOTES { get { int o = __p.__offset(152); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNOTESBytes() { return __p.__vector_as_span<byte>(152, 1); }
#else
  public ArraySegment<byte>? GetNOTESBytes() { return __p.__vector_as_arraysegment(152); }
#endif
  public byte[] GetNOTESArray() { return __p.__vector_as_array<byte>(152); }
  ///  Source of the data.
  public string SOURCE { get { int o = __p.__offset(154); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSOURCEBytes() { return __p.__vector_as_span<byte>(154, 1); }
#else
  public ArraySegment<byte>? GetSOURCEBytes() { return __p.__vector_as_arraysegment(154); }
#endif
  public byte[] GetSOURCEArray() { return __p.__vector_as_array<byte>(154); }
  ///  Originating system or organization which produced the data, if different from the source.
  public string ORIGIN { get { int o = __p.__offset(156); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIGINBytes() { return __p.__vector_as_span<byte>(156, 1); }
#else
  public ArraySegment<byte>? GetORIGINBytes() { return __p.__vector_as_arraysegment(156); }
#endif
  public byte[] GetORIGINArray() { return __p.__vector_as_array<byte>(156); }
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data.
  public string DATA_MODE { get { int o = __p.__offset(158); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDATA_MODEBytes() { return __p.__vector_as_span<byte>(158, 1); }
#else
  public ArraySegment<byte>? GetDATA_MODEBytes() { return __p.__vector_as_arraysegment(158); }
#endif
  public byte[] GetDATA_MODEArray() { return __p.__vector_as_array<byte>(158); }

  public static Offset<CRM> CreateCRM(FlatBufferBuilder builder,
      StringOffset IDOffset = default(StringOffset),
      StringOffset CLASSIFICATIONOffset = default(StringOffset),
      StringOffset TYPEOffset = default(StringOffset),
      StringOffset ID_PLANOffset = default(StringOffset),
      int PLAN_INDEX = 0,
      StringOffset TASK_IDOffset = default(StringOffset),
      StringOffset DWELL_IDOffset = default(StringOffset),
      StringOffset EXTERNAL_IDOffset = default(StringOffset),
      StringOffset ID_SENSOROffset = default(StringOffset),
      StringOffset ORIG_SENSOR_IDOffset = default(StringOffset),
      StringOffset OB_TYPEOffset = default(StringOffset),
      StringOffset PRIORITYOffset = default(StringOffset),
      int TASK_CATEGORY = 0,
      StringOffset SUFFIXOffset = default(StringOffset),
      bool UCT_FOLLOW_UP = false,
      StringOffset START_TIMEOffset = default(StringOffset),
      StringOffset END_TIMEOffset = default(StringOffset),
      uint NORAD_CAT_ID = 0,
      StringOffset ORIG_OBJECT_IDOffset = default(StringOffset),
      StringOffset TASK_GROUPOffset = default(StringOffset),
      int IRON = 0,
      StringOffset ORBIT_REGIMEOffset = default(StringOffset),
      double TARGET_SIZE = 0.0,
      double RCS_MIN = 0.0,
      double RCS = 0.0,
      double RCS_MAX = 0.0,
      double FREQ_MIN = 0.0,
      double FREQ = 0.0,
      double FREQ_MAX = 0.0,
      StringOffset POLARIZATIONOffset = default(StringOffset),
      double VIS_MAG_MIN = 0.0,
      double VIS_MAG = 0.0,
      double VIS_MAG_MAX = 0.0,
      StringOffset SPECTRAL_MODELOffset = default(StringOffset),
      double REFLECTANCE = 0.0,
      double IRRADIANCE = 0.0,
      int NUM_FRAMES = 0,
      double FRAME_RATE = 0.0,
      double INTEGRATION_TIME = 0.0,
      int NUM_TRACKS = 0,
      int NUM_OBS = 0,
      int DURATION = 0,
      StringOffset SRCH_PATTERNOffset = default(StringOffset),
      StringOffset SCENARIOOffset = default(StringOffset),
      StringOffset ID_ELSETOffset = default(StringOffset),
      StringOffset ID_MANIFOLDOffset = default(StringOffset),
      StringOffset ID_STATE_VECTOROffset = default(StringOffset),
      StringOffset ES_IDOffset = default(StringOffset),
      StringOffset EPOCHOffset = default(StringOffset),
      double SEMI_MAJOR_AXIS = 0.0,
      double ECCENTRICITY = 0.0,
      double INCLINATION = 0.0,
      double RAAN = 0.0,
      double ARG_OF_PERIGEE = 0.0,
      double MEAN_ANOMALY = 0.0,
      double RA = 0.0,
      double DEC = 0.0,
      double AZ = 0.0,
      double EL = 0.0,
      double RANGE = 0.0,
      double EXTENT_AZ = 0.0,
      double EXTENT_EL = 0.0,
      double EXTENT_RANGE = 0.0,
      double LAT = 0.0,
      double LON = 0.0,
      double ALT = 0.0,
      double STOP_LAT = 0.0,
      double STOP_LON = 0.0,
      double STOP_ALT = 0.0,
      double SRCH_INC = 0.0,
      double X_ANGLE = 0.0,
      double Y_ANGLE = 0.0,
      double ORIENT_ANGLE = 0.0,
      StringOffset CUSTOMEROffset = default(StringOffset),
      StringOffset NOTESOffset = default(StringOffset),
      StringOffset SOURCEOffset = default(StringOffset),
      StringOffset ORIGINOffset = default(StringOffset),
      StringOffset DATA_MODEOffset = default(StringOffset)) {
    builder.StartTable(78);
    CRM.AddORIENT_ANGLE(builder, ORIENT_ANGLE);
    CRM.AddY_ANGLE(builder, Y_ANGLE);
    CRM.AddX_ANGLE(builder, X_ANGLE);
    CRM.AddSRCH_INC(builder, SRCH_INC);
    CRM.AddSTOP_ALT(builder, STOP_ALT);
    CRM.AddSTOP_LON(builder, STOP_LON);
    CRM.AddSTOP_LAT(builder, STOP_LAT);
    CRM.AddALT(builder, ALT);
    CRM.AddLON(builder, LON);
    CRM.AddLAT(builder, LAT);
    CRM.AddEXTENT_RANGE(builder, EXTENT_RANGE);
    CRM.AddEXTENT_EL(builder, EXTENT_EL);
    CRM.AddEXTENT_AZ(builder, EXTENT_AZ);
    CRM.AddRANGE(builder, RANGE);
    CRM.AddEL(builder, EL);
    CRM.AddAZ(builder, AZ);
    CRM.AddDEC(builder, DEC);
    CRM.AddRA(builder, RA);
    CRM.AddMEAN_ANOMALY(builder, MEAN_ANOMALY);
    CRM.AddARG_OF_PERIGEE(builder, ARG_OF_PERIGEE);
    CRM.AddRAAN(builder, RAAN);
    CRM.AddINCLINATION(builder, INCLINATION);
    CRM.AddECCENTRICITY(builder, ECCENTRICITY);
    CRM.AddSEMI_MAJOR_AXIS(builder, SEMI_MAJOR_AXIS);
    CRM.AddINTEGRATION_TIME(builder, INTEGRATION_TIME);
    CRM.AddFRAME_RATE(builder, FRAME_RATE);
    CRM.AddIRRADIANCE(builder, IRRADIANCE);
    CRM.AddREFLECTANCE(builder, REFLECTANCE);
    CRM.AddVIS_MAG_MAX(builder, VIS_MAG_MAX);
    CRM.AddVIS_MAG(builder, VIS_MAG);
    CRM.AddVIS_MAG_MIN(builder, VIS_MAG_MIN);
    CRM.AddFREQ_MAX(builder, FREQ_MAX);
    CRM.AddFREQ(builder, FREQ);
    CRM.AddFREQ_MIN(builder, FREQ_MIN);
    CRM.AddRCS_MAX(builder, RCS_MAX);
    CRM.AddRCS(builder, RCS);
    CRM.AddRCS_MIN(builder, RCS_MIN);
    CRM.AddTARGET_SIZE(builder, TARGET_SIZE);
    CRM.AddDATA_MODE(builder, DATA_MODEOffset);
    CRM.AddORIGIN(builder, ORIGINOffset);
    CRM.AddSOURCE(builder, SOURCEOffset);
    CRM.AddNOTES(builder, NOTESOffset);
    CRM.AddCUSTOMER(builder, CUSTOMEROffset);
    CRM.AddEPOCH(builder, EPOCHOffset);
    CRM.AddES_ID(builder, ES_IDOffset);
    CRM.AddID_STATE_VECTOR(builder, ID_STATE_VECTOROffset);
    CRM.AddID_MANIFOLD(builder, ID_MANIFOLDOffset);
    CRM.AddID_ELSET(builder, ID_ELSETOffset);
    CRM.AddSCENARIO(builder, SCENARIOOffset);
    CRM.AddSRCH_PATTERN(builder, SRCH_PATTERNOffset);
    CRM.AddDURATION(builder, DURATION);
    CRM.AddNUM_OBS(builder, NUM_OBS);
    CRM.AddNUM_TRACKS(builder, NUM_TRACKS);
    CRM.AddNUM_FRAMES(builder, NUM_FRAMES);
    CRM.AddSPECTRAL_MODEL(builder, SPECTRAL_MODELOffset);
    CRM.AddPOLARIZATION(builder, POLARIZATIONOffset);
    CRM.AddORBIT_REGIME(builder, ORBIT_REGIMEOffset);
    CRM.AddIRON(builder, IRON);
    CRM.AddTASK_GROUP(builder, TASK_GROUPOffset);
    CRM.AddORIG_OBJECT_ID(builder, ORIG_OBJECT_IDOffset);
    CRM.AddNORAD_CAT_ID(builder, NORAD_CAT_ID);
    CRM.AddEND_TIME(builder, END_TIMEOffset);
    CRM.AddSTART_TIME(builder, START_TIMEOffset);
    CRM.AddSUFFIX(builder, SUFFIXOffset);
    CRM.AddTASK_CATEGORY(builder, TASK_CATEGORY);
    CRM.AddPRIORITY(builder, PRIORITYOffset);
    CRM.AddOB_TYPE(builder, OB_TYPEOffset);
    CRM.AddORIG_SENSOR_ID(builder, ORIG_SENSOR_IDOffset);
    CRM.AddID_SENSOR(builder, ID_SENSOROffset);
    CRM.AddEXTERNAL_ID(builder, EXTERNAL_IDOffset);
    CRM.AddDWELL_ID(builder, DWELL_IDOffset);
    CRM.AddTASK_ID(builder, TASK_IDOffset);
    CRM.AddPLAN_INDEX(builder, PLAN_INDEX);
    CRM.AddID_PLAN(builder, ID_PLANOffset);
    CRM.AddTYPE(builder, TYPEOffset);
    CRM.AddCLASSIFICATION(builder, CLASSIFICATIONOffset);
    CRM.AddID(builder, IDOffset);
    CRM.AddUCT_FOLLOW_UP(builder, UCT_FOLLOW_UP);
    return CRM.EndCRM(builder);
  }

  public static void StartCRM(FlatBufferBuilder builder) { builder.StartTable(78); }
  public static void AddID(FlatBufferBuilder builder, StringOffset IDOffset) { builder.AddOffset(0, IDOffset.Value, 0); }
  public static void AddCLASSIFICATION(FlatBufferBuilder builder, StringOffset CLASSIFICATIONOffset) { builder.AddOffset(1, CLASSIFICATIONOffset.Value, 0); }
  public static void AddTYPE(FlatBufferBuilder builder, StringOffset TYPEOffset) { builder.AddOffset(2, TYPEOffset.Value, 0); }
  public static void AddID_PLAN(FlatBufferBuilder builder, StringOffset ID_PLANOffset) { builder.AddOffset(3, ID_PLANOffset.Value, 0); }
  public static void AddPLAN_INDEX(FlatBufferBuilder builder, int PLAN_INDEX) { builder.AddInt(4, PLAN_INDEX, 0); }
  public static void AddTASK_ID(FlatBufferBuilder builder, StringOffset TASK_IDOffset) { builder.AddOffset(5, TASK_IDOffset.Value, 0); }
  public static void AddDWELL_ID(FlatBufferBuilder builder, StringOffset DWELL_IDOffset) { builder.AddOffset(6, DWELL_IDOffset.Value, 0); }
  public static void AddEXTERNAL_ID(FlatBufferBuilder builder, StringOffset EXTERNAL_IDOffset) { builder.AddOffset(7, EXTERNAL_IDOffset.Value, 0); }
  public static void AddID_SENSOR(FlatBufferBuilder builder, StringOffset ID_SENSOROffset) { builder.AddOffset(8, ID_SENSOROffset.Value, 0); }
  public static void AddORIG_SENSOR_ID(FlatBufferBuilder builder, StringOffset ORIG_SENSOR_IDOffset) { builder.AddOffset(9, ORIG_SENSOR_IDOffset.Value, 0); }
  public static void AddOB_TYPE(FlatBufferBuilder builder, StringOffset OB_TYPEOffset) { builder.AddOffset(10, OB_TYPEOffset.Value, 0); }
  public static void AddPRIORITY(FlatBufferBuilder builder, StringOffset PRIORITYOffset) { builder.AddOffset(11, PRIORITYOffset.Value, 0); }
  public static void AddTASK_CATEGORY(FlatBufferBuilder builder, int TASK_CATEGORY) { builder.AddInt(12, TASK_CATEGORY, 0); }
  public static void AddSUFFIX(FlatBufferBuilder builder, StringOffset SUFFIXOffset) { builder.AddOffset(13, SUFFIXOffset.Value, 0); }
  public static void AddUCT_FOLLOW_UP(FlatBufferBuilder builder, bool UCT_FOLLOW_UP) { builder.AddBool(14, UCT_FOLLOW_UP, false); }
  public static void AddSTART_TIME(FlatBufferBuilder builder, StringOffset START_TIMEOffset) { builder.AddOffset(15, START_TIMEOffset.Value, 0); }
  public static void AddEND_TIME(FlatBufferBuilder builder, StringOffset END_TIMEOffset) { builder.AddOffset(16, END_TIMEOffset.Value, 0); }
  public static void AddNORAD_CAT_ID(FlatBufferBuilder builder, uint NORAD_CAT_ID) { builder.AddUint(17, NORAD_CAT_ID, 0); }
  public static void AddORIG_OBJECT_ID(FlatBufferBuilder builder, StringOffset ORIG_OBJECT_IDOffset) { builder.AddOffset(18, ORIG_OBJECT_IDOffset.Value, 0); }
  public static void AddTASK_GROUP(FlatBufferBuilder builder, StringOffset TASK_GROUPOffset) { builder.AddOffset(19, TASK_GROUPOffset.Value, 0); }
  public static void AddIRON(FlatBufferBuilder builder, int IRON) { builder.AddInt(20, IRON, 0); }
  public static void AddORBIT_REGIME(FlatBufferBuilder builder, StringOffset ORBIT_REGIMEOffset) { builder.AddOffset(21, ORBIT_REGIMEOffset.Value, 0); }
  public static void AddTARGET_SIZE(FlatBufferBuilder builder, double TARGET_SIZE) { builder.AddDouble(22, TARGET_SIZE, 0.0); }
  public static void AddRCS_MIN(FlatBufferBuilder builder, double RCS_MIN) { builder.AddDouble(23, RCS_MIN, 0.0); }
  public static void AddRCS(FlatBufferBuilder builder, double RCS) { builder.AddDouble(24, RCS, 0.0); }
  public static void AddRCS_MAX(FlatBufferBuilder builder, double RCS_MAX) { builder.AddDouble(25, RCS_MAX, 0.0); }
  public static void AddFREQ_MIN(FlatBufferBuilder builder, double FREQ_MIN) { builder.AddDouble(26, FREQ_MIN, 0.0); }
  public static void AddFREQ(FlatBufferBuilder builder, double FREQ) { builder.AddDouble(27, FREQ, 0.0); }
  public static void AddFREQ_MAX(FlatBufferBuilder builder, double FREQ_MAX) { builder.AddDouble(28, FREQ_MAX, 0.0); }
  public static void AddPOLARIZATION(FlatBufferBuilder builder, StringOffset POLARIZATIONOffset) { builder.AddOffset(29, POLARIZATIONOffset.Value, 0); }
  public static void AddVIS_MAG_MIN(FlatBufferBuilder builder, double VIS_MAG_MIN) { builder.AddDouble(30, VIS_MAG_MIN, 0.0); }
  public static void AddVIS_MAG(FlatBufferBuilder builder, double VIS_MAG) { builder.AddDouble(31, VIS_MAG, 0.0); }
  public static void AddVIS_MAG_MAX(FlatBufferBuilder builder, double VIS_MAG_MAX) { builder.AddDouble(32, VIS_MAG_MAX, 0.0); }
  public static void AddSPECTRAL_MODEL(FlatBufferBuilder builder, StringOffset SPECTRAL_MODELOffset) { builder.AddOffset(33, SPECTRAL_MODELOffset.Value, 0); }
  public static void AddREFLECTANCE(FlatBufferBuilder builder, double REFLECTANCE) { builder.AddDouble(34, REFLECTANCE, 0.0); }
  public static void AddIRRADIANCE(FlatBufferBuilder builder, double IRRADIANCE) { builder.AddDouble(35, IRRADIANCE, 0.0); }
  public static void AddNUM_FRAMES(FlatBufferBuilder builder, int NUM_FRAMES) { builder.AddInt(36, NUM_FRAMES, 0); }
  public static void AddFRAME_RATE(FlatBufferBuilder builder, double FRAME_RATE) { builder.AddDouble(37, FRAME_RATE, 0.0); }
  public static void AddINTEGRATION_TIME(FlatBufferBuilder builder, double INTEGRATION_TIME) { builder.AddDouble(38, INTEGRATION_TIME, 0.0); }
  public static void AddNUM_TRACKS(FlatBufferBuilder builder, int NUM_TRACKS) { builder.AddInt(39, NUM_TRACKS, 0); }
  public static void AddNUM_OBS(FlatBufferBuilder builder, int NUM_OBS) { builder.AddInt(40, NUM_OBS, 0); }
  public static void AddDURATION(FlatBufferBuilder builder, int DURATION) { builder.AddInt(41, DURATION, 0); }
  public static void AddSRCH_PATTERN(FlatBufferBuilder builder, StringOffset SRCH_PATTERNOffset) { builder.AddOffset(42, SRCH_PATTERNOffset.Value, 0); }
  public static void AddSCENARIO(FlatBufferBuilder builder, StringOffset SCENARIOOffset) { builder.AddOffset(43, SCENARIOOffset.Value, 0); }
  public static void AddID_ELSET(FlatBufferBuilder builder, StringOffset ID_ELSETOffset) { builder.AddOffset(44, ID_ELSETOffset.Value, 0); }
  public static void AddID_MANIFOLD(FlatBufferBuilder builder, StringOffset ID_MANIFOLDOffset) { builder.AddOffset(45, ID_MANIFOLDOffset.Value, 0); }
  public static void AddID_STATE_VECTOR(FlatBufferBuilder builder, StringOffset ID_STATE_VECTOROffset) { builder.AddOffset(46, ID_STATE_VECTOROffset.Value, 0); }
  public static void AddES_ID(FlatBufferBuilder builder, StringOffset ES_IDOffset) { builder.AddOffset(47, ES_IDOffset.Value, 0); }
  public static void AddEPOCH(FlatBufferBuilder builder, StringOffset EPOCHOffset) { builder.AddOffset(48, EPOCHOffset.Value, 0); }
  public static void AddSEMI_MAJOR_AXIS(FlatBufferBuilder builder, double SEMI_MAJOR_AXIS) { builder.AddDouble(49, SEMI_MAJOR_AXIS, 0.0); }
  public static void AddECCENTRICITY(FlatBufferBuilder builder, double ECCENTRICITY) { builder.AddDouble(50, ECCENTRICITY, 0.0); }
  public static void AddINCLINATION(FlatBufferBuilder builder, double INCLINATION) { builder.AddDouble(51, INCLINATION, 0.0); }
  public static void AddRAAN(FlatBufferBuilder builder, double RAAN) { builder.AddDouble(52, RAAN, 0.0); }
  public static void AddARG_OF_PERIGEE(FlatBufferBuilder builder, double ARG_OF_PERIGEE) { builder.AddDouble(53, ARG_OF_PERIGEE, 0.0); }
  public static void AddMEAN_ANOMALY(FlatBufferBuilder builder, double MEAN_ANOMALY) { builder.AddDouble(54, MEAN_ANOMALY, 0.0); }
  public static void AddRA(FlatBufferBuilder builder, double RA) { builder.AddDouble(55, RA, 0.0); }
  public static void AddDEC(FlatBufferBuilder builder, double DEC) { builder.AddDouble(56, DEC, 0.0); }
  public static void AddAZ(FlatBufferBuilder builder, double AZ) { builder.AddDouble(57, AZ, 0.0); }
  public static void AddEL(FlatBufferBuilder builder, double EL) { builder.AddDouble(58, EL, 0.0); }
  public static void AddRANGE(FlatBufferBuilder builder, double RANGE) { builder.AddDouble(59, RANGE, 0.0); }
  public static void AddEXTENT_AZ(FlatBufferBuilder builder, double EXTENT_AZ) { builder.AddDouble(60, EXTENT_AZ, 0.0); }
  public static void AddEXTENT_EL(FlatBufferBuilder builder, double EXTENT_EL) { builder.AddDouble(61, EXTENT_EL, 0.0); }
  public static void AddEXTENT_RANGE(FlatBufferBuilder builder, double EXTENT_RANGE) { builder.AddDouble(62, EXTENT_RANGE, 0.0); }
  public static void AddLAT(FlatBufferBuilder builder, double LAT) { builder.AddDouble(63, LAT, 0.0); }
  public static void AddLON(FlatBufferBuilder builder, double LON) { builder.AddDouble(64, LON, 0.0); }
  public static void AddALT(FlatBufferBuilder builder, double ALT) { builder.AddDouble(65, ALT, 0.0); }
  public static void AddSTOP_LAT(FlatBufferBuilder builder, double STOP_LAT) { builder.AddDouble(66, STOP_LAT, 0.0); }
  public static void AddSTOP_LON(FlatBufferBuilder builder, double STOP_LON) { builder.AddDouble(67, STOP_LON, 0.0); }
  public static void AddSTOP_ALT(FlatBufferBuilder builder, double STOP_ALT) { builder.AddDouble(68, STOP_ALT, 0.0); }
  public static void AddSRCH_INC(FlatBufferBuilder builder, double SRCH_INC) { builder.AddDouble(69, SRCH_INC, 0.0); }
  public static void AddX_ANGLE(FlatBufferBuilder builder, double X_ANGLE) { builder.AddDouble(70, X_ANGLE, 0.0); }
  public static void AddY_ANGLE(FlatBufferBuilder builder, double Y_ANGLE) { builder.AddDouble(71, Y_ANGLE, 0.0); }
  public static void AddORIENT_ANGLE(FlatBufferBuilder builder, double ORIENT_ANGLE) { builder.AddDouble(72, ORIENT_ANGLE, 0.0); }
  public static void AddCUSTOMER(FlatBufferBuilder builder, StringOffset CUSTOMEROffset) { builder.AddOffset(73, CUSTOMEROffset.Value, 0); }
  public static void AddNOTES(FlatBufferBuilder builder, StringOffset NOTESOffset) { builder.AddOffset(74, NOTESOffset.Value, 0); }
  public static void AddSOURCE(FlatBufferBuilder builder, StringOffset SOURCEOffset) { builder.AddOffset(75, SOURCEOffset.Value, 0); }
  public static void AddORIGIN(FlatBufferBuilder builder, StringOffset ORIGINOffset) { builder.AddOffset(76, ORIGINOffset.Value, 0); }
  public static void AddDATA_MODE(FlatBufferBuilder builder, StringOffset DATA_MODEOffset) { builder.AddOffset(77, DATA_MODEOffset.Value, 0); }
  public static Offset<CRM> EndCRM(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CRM>(o);
  }
  public static void FinishCRMBuffer(FlatBufferBuilder builder, Offset<CRM> offset) { builder.Finish(offset.Value, "$CRM"); }
  public static void FinishSizePrefixedCRMBuffer(FlatBufferBuilder builder, Offset<CRM> offset) { builder.FinishSizePrefixed(offset.Value, "$CRM"); }
  public CRMT UnPack() {
    var _o = new CRMT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CRMT _o) {
    _o.ID = this.ID;
    _o.CLASSIFICATION = this.CLASSIFICATION;
    _o.TYPE = this.TYPE;
    _o.ID_PLAN = this.ID_PLAN;
    _o.PLAN_INDEX = this.PLAN_INDEX;
    _o.TASK_ID = this.TASK_ID;
    _o.DWELL_ID = this.DWELL_ID;
    _o.EXTERNAL_ID = this.EXTERNAL_ID;
    _o.ID_SENSOR = this.ID_SENSOR;
    _o.ORIG_SENSOR_ID = this.ORIG_SENSOR_ID;
    _o.OB_TYPE = this.OB_TYPE;
    _o.PRIORITY = this.PRIORITY;
    _o.TASK_CATEGORY = this.TASK_CATEGORY;
    _o.SUFFIX = this.SUFFIX;
    _o.UCT_FOLLOW_UP = this.UCT_FOLLOW_UP;
    _o.START_TIME = this.START_TIME;
    _o.END_TIME = this.END_TIME;
    _o.NORAD_CAT_ID = this.NORAD_CAT_ID;
    _o.ORIG_OBJECT_ID = this.ORIG_OBJECT_ID;
    _o.TASK_GROUP = this.TASK_GROUP;
    _o.IRON = this.IRON;
    _o.ORBIT_REGIME = this.ORBIT_REGIME;
    _o.TARGET_SIZE = this.TARGET_SIZE;
    _o.RCS_MIN = this.RCS_MIN;
    _o.RCS = this.RCS;
    _o.RCS_MAX = this.RCS_MAX;
    _o.FREQ_MIN = this.FREQ_MIN;
    _o.FREQ = this.FREQ;
    _o.FREQ_MAX = this.FREQ_MAX;
    _o.POLARIZATION = this.POLARIZATION;
    _o.VIS_MAG_MIN = this.VIS_MAG_MIN;
    _o.VIS_MAG = this.VIS_MAG;
    _o.VIS_MAG_MAX = this.VIS_MAG_MAX;
    _o.SPECTRAL_MODEL = this.SPECTRAL_MODEL;
    _o.REFLECTANCE = this.REFLECTANCE;
    _o.IRRADIANCE = this.IRRADIANCE;
    _o.NUM_FRAMES = this.NUM_FRAMES;
    _o.FRAME_RATE = this.FRAME_RATE;
    _o.INTEGRATION_TIME = this.INTEGRATION_TIME;
    _o.NUM_TRACKS = this.NUM_TRACKS;
    _o.NUM_OBS = this.NUM_OBS;
    _o.DURATION = this.DURATION;
    _o.SRCH_PATTERN = this.SRCH_PATTERN;
    _o.SCENARIO = this.SCENARIO;
    _o.ID_ELSET = this.ID_ELSET;
    _o.ID_MANIFOLD = this.ID_MANIFOLD;
    _o.ID_STATE_VECTOR = this.ID_STATE_VECTOR;
    _o.ES_ID = this.ES_ID;
    _o.EPOCH = this.EPOCH;
    _o.SEMI_MAJOR_AXIS = this.SEMI_MAJOR_AXIS;
    _o.ECCENTRICITY = this.ECCENTRICITY;
    _o.INCLINATION = this.INCLINATION;
    _o.RAAN = this.RAAN;
    _o.ARG_OF_PERIGEE = this.ARG_OF_PERIGEE;
    _o.MEAN_ANOMALY = this.MEAN_ANOMALY;
    _o.RA = this.RA;
    _o.DEC = this.DEC;
    _o.AZ = this.AZ;
    _o.EL = this.EL;
    _o.RANGE = this.RANGE;
    _o.EXTENT_AZ = this.EXTENT_AZ;
    _o.EXTENT_EL = this.EXTENT_EL;
    _o.EXTENT_RANGE = this.EXTENT_RANGE;
    _o.LAT = this.LAT;
    _o.LON = this.LON;
    _o.ALT = this.ALT;
    _o.STOP_LAT = this.STOP_LAT;
    _o.STOP_LON = this.STOP_LON;
    _o.STOP_ALT = this.STOP_ALT;
    _o.SRCH_INC = this.SRCH_INC;
    _o.X_ANGLE = this.X_ANGLE;
    _o.Y_ANGLE = this.Y_ANGLE;
    _o.ORIENT_ANGLE = this.ORIENT_ANGLE;
    _o.CUSTOMER = this.CUSTOMER;
    _o.NOTES = this.NOTES;
    _o.SOURCE = this.SOURCE;
    _o.ORIGIN = this.ORIGIN;
    _o.DATA_MODE = this.DATA_MODE;
  }
  public static Offset<CRM> Pack(FlatBufferBuilder builder, CRMT _o) {
    if (_o == null) return default(Offset<CRM>);
    var _ID = _o.ID == null ? default(StringOffset) : builder.CreateString(_o.ID);
    var _CLASSIFICATION = _o.CLASSIFICATION == null ? default(StringOffset) : builder.CreateString(_o.CLASSIFICATION);
    var _TYPE = _o.TYPE == null ? default(StringOffset) : builder.CreateString(_o.TYPE);
    var _ID_PLAN = _o.ID_PLAN == null ? default(StringOffset) : builder.CreateString(_o.ID_PLAN);
    var _TASK_ID = _o.TASK_ID == null ? default(StringOffset) : builder.CreateString(_o.TASK_ID);
    var _DWELL_ID = _o.DWELL_ID == null ? default(StringOffset) : builder.CreateString(_o.DWELL_ID);
    var _EXTERNAL_ID = _o.EXTERNAL_ID == null ? default(StringOffset) : builder.CreateString(_o.EXTERNAL_ID);
    var _ID_SENSOR = _o.ID_SENSOR == null ? default(StringOffset) : builder.CreateString(_o.ID_SENSOR);
    var _ORIG_SENSOR_ID = _o.ORIG_SENSOR_ID == null ? default(StringOffset) : builder.CreateString(_o.ORIG_SENSOR_ID);
    var _OB_TYPE = _o.OB_TYPE == null ? default(StringOffset) : builder.CreateString(_o.OB_TYPE);
    var _PRIORITY = _o.PRIORITY == null ? default(StringOffset) : builder.CreateString(_o.PRIORITY);
    var _SUFFIX = _o.SUFFIX == null ? default(StringOffset) : builder.CreateString(_o.SUFFIX);
    var _START_TIME = _o.START_TIME == null ? default(StringOffset) : builder.CreateString(_o.START_TIME);
    var _END_TIME = _o.END_TIME == null ? default(StringOffset) : builder.CreateString(_o.END_TIME);
    var _ORIG_OBJECT_ID = _o.ORIG_OBJECT_ID == null ? default(StringOffset) : builder.CreateString(_o.ORIG_OBJECT_ID);
    var _TASK_GROUP = _o.TASK_GROUP == null ? default(StringOffset) : builder.CreateString(_o.TASK_GROUP);
    var _ORBIT_REGIME = _o.ORBIT_REGIME == null ? default(StringOffset) : builder.CreateString(_o.ORBIT_REGIME);
    var _POLARIZATION = _o.POLARIZATION == null ? default(StringOffset) : builder.CreateString(_o.POLARIZATION);
    var _SPECTRAL_MODEL = _o.SPECTRAL_MODEL == null ? default(StringOffset) : builder.CreateString(_o.SPECTRAL_MODEL);
    var _SRCH_PATTERN = _o.SRCH_PATTERN == null ? default(StringOffset) : builder.CreateString(_o.SRCH_PATTERN);
    var _SCENARIO = _o.SCENARIO == null ? default(StringOffset) : builder.CreateString(_o.SCENARIO);
    var _ID_ELSET = _o.ID_ELSET == null ? default(StringOffset) : builder.CreateString(_o.ID_ELSET);
    var _ID_MANIFOLD = _o.ID_MANIFOLD == null ? default(StringOffset) : builder.CreateString(_o.ID_MANIFOLD);
    var _ID_STATE_VECTOR = _o.ID_STATE_VECTOR == null ? default(StringOffset) : builder.CreateString(_o.ID_STATE_VECTOR);
    var _ES_ID = _o.ES_ID == null ? default(StringOffset) : builder.CreateString(_o.ES_ID);
    var _EPOCH = _o.EPOCH == null ? default(StringOffset) : builder.CreateString(_o.EPOCH);
    var _CUSTOMER = _o.CUSTOMER == null ? default(StringOffset) : builder.CreateString(_o.CUSTOMER);
    var _NOTES = _o.NOTES == null ? default(StringOffset) : builder.CreateString(_o.NOTES);
    var _SOURCE = _o.SOURCE == null ? default(StringOffset) : builder.CreateString(_o.SOURCE);
    var _ORIGIN = _o.ORIGIN == null ? default(StringOffset) : builder.CreateString(_o.ORIGIN);
    var _DATA_MODE = _o.DATA_MODE == null ? default(StringOffset) : builder.CreateString(_o.DATA_MODE);
    return CreateCRM(
      builder,
      _ID,
      _CLASSIFICATION,
      _TYPE,
      _ID_PLAN,
      _o.PLAN_INDEX,
      _TASK_ID,
      _DWELL_ID,
      _EXTERNAL_ID,
      _ID_SENSOR,
      _ORIG_SENSOR_ID,
      _OB_TYPE,
      _PRIORITY,
      _o.TASK_CATEGORY,
      _SUFFIX,
      _o.UCT_FOLLOW_UP,
      _START_TIME,
      _END_TIME,
      _o.NORAD_CAT_ID,
      _ORIG_OBJECT_ID,
      _TASK_GROUP,
      _o.IRON,
      _ORBIT_REGIME,
      _o.TARGET_SIZE,
      _o.RCS_MIN,
      _o.RCS,
      _o.RCS_MAX,
      _o.FREQ_MIN,
      _o.FREQ,
      _o.FREQ_MAX,
      _POLARIZATION,
      _o.VIS_MAG_MIN,
      _o.VIS_MAG,
      _o.VIS_MAG_MAX,
      _SPECTRAL_MODEL,
      _o.REFLECTANCE,
      _o.IRRADIANCE,
      _o.NUM_FRAMES,
      _o.FRAME_RATE,
      _o.INTEGRATION_TIME,
      _o.NUM_TRACKS,
      _o.NUM_OBS,
      _o.DURATION,
      _SRCH_PATTERN,
      _SCENARIO,
      _ID_ELSET,
      _ID_MANIFOLD,
      _ID_STATE_VECTOR,
      _ES_ID,
      _EPOCH,
      _o.SEMI_MAJOR_AXIS,
      _o.ECCENTRICITY,
      _o.INCLINATION,
      _o.RAAN,
      _o.ARG_OF_PERIGEE,
      _o.MEAN_ANOMALY,
      _o.RA,
      _o.DEC,
      _o.AZ,
      _o.EL,
      _o.RANGE,
      _o.EXTENT_AZ,
      _o.EXTENT_EL,
      _o.EXTENT_RANGE,
      _o.LAT,
      _o.LON,
      _o.ALT,
      _o.STOP_LAT,
      _o.STOP_LON,
      _o.STOP_ALT,
      _o.SRCH_INC,
      _o.X_ANGLE,
      _o.Y_ANGLE,
      _o.ORIENT_ANGLE,
      _CUSTOMER,
      _NOTES,
      _SOURCE,
      _ORIGIN,
      _DATA_MODE);
  }
}

public class CRMT
{
  public string ID { get; set; }
  public string CLASSIFICATION { get; set; }
  public string TYPE { get; set; }
  public string ID_PLAN { get; set; }
  public int PLAN_INDEX { get; set; }
  public string TASK_ID { get; set; }
  public string DWELL_ID { get; set; }
  public string EXTERNAL_ID { get; set; }
  public string ID_SENSOR { get; set; }
  public string ORIG_SENSOR_ID { get; set; }
  public string OB_TYPE { get; set; }
  public string PRIORITY { get; set; }
  public int TASK_CATEGORY { get; set; }
  public string SUFFIX { get; set; }
  public bool UCT_FOLLOW_UP { get; set; }
  public string START_TIME { get; set; }
  public string END_TIME { get; set; }
  public uint NORAD_CAT_ID { get; set; }
  public string ORIG_OBJECT_ID { get; set; }
  public string TASK_GROUP { get; set; }
  public int IRON { get; set; }
  public string ORBIT_REGIME { get; set; }
  public double TARGET_SIZE { get; set; }
  public double RCS_MIN { get; set; }
  public double RCS { get; set; }
  public double RCS_MAX { get; set; }
  public double FREQ_MIN { get; set; }
  public double FREQ { get; set; }
  public double FREQ_MAX { get; set; }
  public string POLARIZATION { get; set; }
  public double VIS_MAG_MIN { get; set; }
  public double VIS_MAG { get; set; }
  public double VIS_MAG_MAX { get; set; }
  public string SPECTRAL_MODEL { get; set; }
  public double REFLECTANCE { get; set; }
  public double IRRADIANCE { get; set; }
  public int NUM_FRAMES { get; set; }
  public double FRAME_RATE { get; set; }
  public double INTEGRATION_TIME { get; set; }
  public int NUM_TRACKS { get; set; }
  public int NUM_OBS { get; set; }
  public int DURATION { get; set; }
  public string SRCH_PATTERN { get; set; }
  public string SCENARIO { get; set; }
  public string ID_ELSET { get; set; }
  public string ID_MANIFOLD { get; set; }
  public string ID_STATE_VECTOR { get; set; }
  public string ES_ID { get; set; }
  public string EPOCH { get; set; }
  public double SEMI_MAJOR_AXIS { get; set; }
  public double ECCENTRICITY { get; set; }
  public double INCLINATION { get; set; }
  public double RAAN { get; set; }
  public double ARG_OF_PERIGEE { get; set; }
  public double MEAN_ANOMALY { get; set; }
  public double RA { get; set; }
  public double DEC { get; set; }
  public double AZ { get; set; }
  public double EL { get; set; }
  public double RANGE { get; set; }
  public double EXTENT_AZ { get; set; }
  public double EXTENT_EL { get; set; }
  public double EXTENT_RANGE { get; set; }
  public double LAT { get; set; }
  public double LON { get; set; }
  public double ALT { get; set; }
  public double STOP_LAT { get; set; }
  public double STOP_LON { get; set; }
  public double STOP_ALT { get; set; }
  public double SRCH_INC { get; set; }
  public double X_ANGLE { get; set; }
  public double Y_ANGLE { get; set; }
  public double ORIENT_ANGLE { get; set; }
  public string CUSTOMER { get; set; }
  public string NOTES { get; set; }
  public string SOURCE { get; set; }
  public string ORIGIN { get; set; }
  public string DATA_MODE { get; set; }

  public CRMT() {
    this.ID = null;
    this.CLASSIFICATION = null;
    this.TYPE = null;
    this.ID_PLAN = null;
    this.PLAN_INDEX = 0;
    this.TASK_ID = null;
    this.DWELL_ID = null;
    this.EXTERNAL_ID = null;
    this.ID_SENSOR = null;
    this.ORIG_SENSOR_ID = null;
    this.OB_TYPE = null;
    this.PRIORITY = null;
    this.TASK_CATEGORY = 0;
    this.SUFFIX = null;
    this.UCT_FOLLOW_UP = false;
    this.START_TIME = null;
    this.END_TIME = null;
    this.NORAD_CAT_ID = 0;
    this.ORIG_OBJECT_ID = null;
    this.TASK_GROUP = null;
    this.IRON = 0;
    this.ORBIT_REGIME = null;
    this.TARGET_SIZE = 0.0;
    this.RCS_MIN = 0.0;
    this.RCS = 0.0;
    this.RCS_MAX = 0.0;
    this.FREQ_MIN = 0.0;
    this.FREQ = 0.0;
    this.FREQ_MAX = 0.0;
    this.POLARIZATION = null;
    this.VIS_MAG_MIN = 0.0;
    this.VIS_MAG = 0.0;
    this.VIS_MAG_MAX = 0.0;
    this.SPECTRAL_MODEL = null;
    this.REFLECTANCE = 0.0;
    this.IRRADIANCE = 0.0;
    this.NUM_FRAMES = 0;
    this.FRAME_RATE = 0.0;
    this.INTEGRATION_TIME = 0.0;
    this.NUM_TRACKS = 0;
    this.NUM_OBS = 0;
    this.DURATION = 0;
    this.SRCH_PATTERN = null;
    this.SCENARIO = null;
    this.ID_ELSET = null;
    this.ID_MANIFOLD = null;
    this.ID_STATE_VECTOR = null;
    this.ES_ID = null;
    this.EPOCH = null;
    this.SEMI_MAJOR_AXIS = 0.0;
    this.ECCENTRICITY = 0.0;
    this.INCLINATION = 0.0;
    this.RAAN = 0.0;
    this.ARG_OF_PERIGEE = 0.0;
    this.MEAN_ANOMALY = 0.0;
    this.RA = 0.0;
    this.DEC = 0.0;
    this.AZ = 0.0;
    this.EL = 0.0;
    this.RANGE = 0.0;
    this.EXTENT_AZ = 0.0;
    this.EXTENT_EL = 0.0;
    this.EXTENT_RANGE = 0.0;
    this.LAT = 0.0;
    this.LON = 0.0;
    this.ALT = 0.0;
    this.STOP_LAT = 0.0;
    this.STOP_LON = 0.0;
    this.STOP_ALT = 0.0;
    this.SRCH_INC = 0.0;
    this.X_ANGLE = 0.0;
    this.Y_ANGLE = 0.0;
    this.ORIENT_ANGLE = 0.0;
    this.CUSTOMER = null;
    this.NOTES = null;
    this.SOURCE = null;
    this.ORIGIN = null;
    this.DATA_MODE = null;
  }
  public static CRMT DeserializeFromBinary(byte[] fbBuffer) {
    return CRM.GetRootAsCRM(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CRM.FinishCRMBuffer(fbb, CRM.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}

