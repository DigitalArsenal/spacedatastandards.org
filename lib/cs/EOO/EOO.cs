// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Electro-Optical Observation
public struct EOO : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EOO GetRootAsEOO(ByteBuffer _bb) { return GetRootAsEOO(_bb, new EOO()); }
  public static EOO GetRootAsEOO(ByteBuffer _bb, EOO obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EOOBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$EOO"); }
  public static bool VerifyEOO(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("$EOO", false, EOOVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EOO __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record.
  public string ID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIDArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  public string CLASSIFICATION { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCLASSIFICATIONBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCLASSIFICATIONBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCLASSIFICATIONArray() { return __p.__vector_as_array<byte>(6); }
  /// Ob detection time in ISO 8601 UTC (YYYY-MM-DDTHH:MM:SS.ssssssZ), up to microsecond precision.
  public string OB_TIME { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOB_TIMEBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOB_TIMEBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOB_TIMEArray() { return __p.__vector_as_array<byte>(8); }
  /// Correlation score of the observation when compared to a known orbit state.
  public float CORR_QUALITY { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Server will auto-populate with SAT_NO if available.
  public string ID_ON_ORBIT { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetID_ON_ORBITBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetID_ON_ORBITBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetID_ON_ORBITArray() { return __p.__vector_as_array<byte>(12); }
  /// Unique ID of the sensor. Must have a corresponding sensor record on the server.
  public string SENSOR_ID { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSENSOR_IDBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetSENSOR_IDBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetSENSOR_IDArray() { return __p.__vector_as_array<byte>(14); }
  /// Accepted Collection Method
  public CollectMethod COLLECT_METHOD { get { int o = __p.__offset(16); return o != 0 ? (CollectMethod)__p.bb.GetSbyte(o + __p.bb_pos) : CollectMethod.SIDEREAL; } }
  /// 18SDS satellite number. Only list if correlated against the 18SDS catalog.
  public int NORAD_CAT_ID { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Identifier for the collectRequest message if the collection was in response to tasking.
  public string TASK_ID { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTASK_IDBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetTASK_IDBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetTASK_IDArray() { return __p.__vector_as_array<byte>(20); }
  /// Optional identifier to track a transaction.
  public string TRANSACTION_ID { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTRANSACTION_IDBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetTRANSACTION_IDBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetTRANSACTION_IDArray() { return __p.__vector_as_array<byte>(22); }
  /// Identifier of the track to which this observation belongs, if applicable.
  public string TRACK_ID { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTRACK_IDBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetTRACK_IDBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetTRACK_IDArray() { return __p.__vector_as_array<byte>(24); }
  /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).
  public ObservationPosition OB_POSITION { get { int o = __p.__offset(26); return o != 0 ? (ObservationPosition)__p.bb.GetSbyte(o + __p.bb_pos) : ObservationPosition.FENCE; } }
  /// Provider maintained ID. May not be consistent with 18SDS SAT_NO.
  public string ORIG_OBJECT_ID { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIG_OBJECT_IDBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetORIG_OBJECT_IDBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetORIG_OBJECT_IDArray() { return __p.__vector_as_array<byte>(28); }
  /// Sensor ID.
  public string ORIG_SENSOR_ID { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIG_SENSOR_IDBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetORIG_SENSOR_IDBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetORIG_SENSOR_IDArray() { return __p.__vector_as_array<byte>(30); }
  /// Required if correlation is attempted. Indicates whether correlation succeeded.
  public bool UCT { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Line of sight azimuth angle in degrees and topocentric frame.
  public float AZIMUTH { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// One sigma uncertainty in the line of sight azimuth angle, in degrees.
  public float AZIMUTH_UNC { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Sensor line of sight azimuth angle bias in degrees.
  public float AZIMUTH_BIAS { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Rate of change of the line of sight azimuth in degrees per second.
  public float AZIMUTH_RATE { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Line of sight elevation in degrees and topocentric frame.
  public float ELEVATION { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// One sigma uncertainty in the line of sight elevation angle, in degrees.
  public float ELEVATION_UNC { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Sensor line of sight elevation bias in degrees.
  public float ELEVATION_BIAS { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Rate of change of the line of sight elevation in degrees per second.
  public float ELEVATION_RATE { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Line of sight range in km. Reported value should include all applicable corrections.
  public float RANGE { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// One sigma uncertainty in the line of sight range, in km.
  public float RANGE_UNC { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Sensor line of sight range bias in km.
  public float RANGE_BIAS { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Range rate in km/s. Reported value should include all applicable corrections.
  public float RANGE_RATE { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// One sigma uncertainty in the line of sight range rate, in km/sec.
  public float RANGE_RATE_UNC { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Right ascension in degrees. Required metric reporting field for EO observations.
  public float RA { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Line of sight right ascension rate of change, in degrees/sec.
  public float RA_RATE { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// One sigma uncertainty in the line of sight right ascension angle, in degrees.
  public float RA_UNC { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Sensor line of sight right ascension bias in degrees.
  public float RA_BIAS { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Declination in degrees. Required metric reporting field for EO observations.
  public float DECLINATION { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Line of sight declination rate of change, in degrees/sec.
  public float DECLINATION_RATE { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// One sigma uncertainty in the line of sight declination angle, in degrees.
  public float DECLINATION_UNC { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Sensor line of sight declination angle bias in degrees.
  public float DECLINATION_BIAS { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// X-component of the unit vector representing the line-of-sight direction in the observer's reference frame.
  public float LOSX { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Y-component of the unit vector representing the line-of-sight direction in the observer's reference frame.
  public float LOSY { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Z-component of the unit vector representing the line-of-sight direction in the observer's reference frame.
  public float LOSZ { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// One sigma uncertainty in the line-of-sight direction vector components.
  public float LOS_UNC { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// X-component of the velocity vector along the line of sight, in km/s.
  public float LOSXVEL { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Y-component of the velocity vector along the line of sight, in km/s.
  public float LOSYVEL { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Z-component of the velocity vector along the line of sight, in km/s.
  public float LOSZVEL { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// WGS-84 latitude in decimal degrees at the time of the observation.
  public float SENLAT { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// WGS-84 longitude in decimal degrees at the time of the observation.
  public float SENLON { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Sensor height in km relative to the WGS-84 ellipsoid at the time of the observation.
  public float SENALT { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Cartesian X position in km at the time of the observation.
  public float SENX { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Cartesian Y position in km at the time of the observation.
  public float SENY { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Cartesian Z position in km at the time of the observation.
  public float SENZ { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Total number of satellites in the field of view.
  public int FOV_COUNT { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of uncorrelated satellites in the field of view (JCO).
  public int FOV_COUNT_UCTS { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Image exposure duration in seconds. For observations performed using frame stacking or synthetic tracking methods, 
  /// the exposure duration should be the total integration time. This field is highly recommended / required if the 
  /// observations are going to be used for photometric processing.
  public float EXP_DURATION { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Formula: 2.5 * log_10 (zero_mag_counts / EXP_DURATION).
  public float ZEROPTD { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Net object signature = counts / EXP_DURATION.
  public float NET_OBJ_SIG { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Net object signature uncertainty = counts uncertainty / EXP_DURATION.
  public float NET_OBJ_SIG_UNC { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Measure of observed brightness calibrated against the Gaia G-band.
  public float MAG { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Uncertainty of the observed brightness.
  public float MAG_UNC { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// [Definition needed].
  public float MAG_NORM_RANGE { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Computed estimate of the latitude, positive degrees north. It should be computed based on the assumed slant range 
  /// and corresponding viewing geometry. It must NOT be computed from the orbit state.
  public float GEOLAT { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Computed estimate of the longitude as +/- 180 degrees east. It should be computed based on the assumed slant range 
  /// and viewing geometry. It must NOT be computed from the orbit state.
  public float GEOLON { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Computed estimate of satellite altitude in km at the reported location. It must NOT be computed from the orbit state.
  public float GEOALT { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Computed estimate of the slant range in km. It must NOT be computed from the orbit state.
  public float GEORANGE { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently 
  /// empty part of the night sky.
  public float SKY_BKGRND { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass 
  /// to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, 
  /// describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical 
  /// object and the observer.
  public float PRIMARY_EXTINCTION { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Primary Extinction Coefficient Uncertainty, in Magnitudes.
  public float PRIMARY_EXTINCTION_UNC { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// The angle, in degrees, between the target-to-observer vector and the target-to-sun vector. Recommend using the 
  /// calculation listed in the EOSSA documentation, pg 106 of the EOSSA spec.
  public float SOLAR_PHASE_ANGLE { get { int o = __p.__offset(134); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector 
  /// onto the equatorial plane. The convention used is negative when closing (i.e., before the opposition) 
  /// and positive when opening (after the opposition).
  public float SOLAR_EQ_PHASE_ANGLE { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Angle from the sun to the equatorial plane.
  public float SOLAR_DEC_ANGLE { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Shutter delay in seconds.
  public float SHUTTER_DELAY { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Sensor timing bias in seconds.
  public float TIMING_BIAS { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. 
  public string RAW_FILE_URI { get { int o = __p.__offset(144); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRAW_FILE_URIBytes() { return __p.__vector_as_span<byte>(144, 1); }
#else
  public ArraySegment<byte>? GetRAW_FILE_URIBytes() { return __p.__vector_as_arraysegment(144); }
#endif
  public byte[] GetRAW_FILE_URIArray() { return __p.__vector_as_array<byte>(144); }
  /// Intensity of the target for IR observations, in kw/sr/em.
  public float INTENSITY { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Background intensity for IR observations, in kw/sr/um.
  public float BG_INTENSITY { get { int o = __p.__offset(148); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  public string DESCRIPTOR { get { int o = __p.__offset(150); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDESCRIPTORBytes() { return __p.__vector_as_span<byte>(150, 1); }
#else
  public ArraySegment<byte>? GetDESCRIPTORBytes() { return __p.__vector_as_arraysegment(150); }
#endif
  public byte[] GetDESCRIPTORArray() { return __p.__vector_as_array<byte>(150); }
  /// Source of the data.
  public string SOURCE { get { int o = __p.__offset(152); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSOURCEBytes() { return __p.__vector_as_span<byte>(152, 1); }
#else
  public ArraySegment<byte>? GetSOURCEBytes() { return __p.__vector_as_arraysegment(152); }
#endif
  public byte[] GetSOURCEArray() { return __p.__vector_as_array<byte>(152); }
  /// Originating system or organization which produced the data, if different from the source.
  /// The origin may be different than the source if the source was a mediating system which forwarded 
  /// the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  public string ORIGIN { get { int o = __p.__offset(154); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIGINBytes() { return __p.__vector_as_span<byte>(154, 1); }
#else
  public ArraySegment<byte>? GetORIGINBytes() { return __p.__vector_as_arraysegment(154); }
#endif
  public byte[] GetORIGINArray() { return __p.__vector_as_array<byte>(154); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST.
  public DataMode DATA_MODE { get { int o = __p.__offset(156); return o != 0 ? (DataMode)__p.bb.GetSbyte(o + __p.bb_pos) : DataMode.EXERCISE; } }
  /// Time the row was created in the database, auto-populated by the system.
  public string CREATED_AT { get { int o = __p.__offset(158); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCREATED_ATBytes() { return __p.__vector_as_span<byte>(158, 1); }
#else
  public ArraySegment<byte>? GetCREATED_ATBytes() { return __p.__vector_as_arraysegment(158); }
#endif
  public byte[] GetCREATED_ATArray() { return __p.__vector_as_array<byte>(158); }
  /// Application user who created the row in the database, auto-populated by the system.
  public string CREATED_BY { get { int o = __p.__offset(160); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCREATED_BYBytes() { return __p.__vector_as_span<byte>(160, 1); }
#else
  public ArraySegment<byte>? GetCREATED_BYBytes() { return __p.__vector_as_arraysegment(160); }
#endif
  public byte[] GetCREATED_BYArray() { return __p.__vector_as_array<byte>(160); }
  /// EO observations are assumed to be topocentric J2000 coordinates ('J2000') as defined by the IAU, unless otherwise specified.
  public refFrame REFERENCE_FRAME { get { int o = __p.__offset(162); return o != 0 ? (refFrame)__p.bb.GetSbyte(o + __p.bb_pos) : refFrame.ECEF; } }
  /// The sensor reference frame is assumed to be the International Terrestrial Reference Frame (ITRF), 
  /// unless otherwise specified. (ITRF is equivalent to Earth-Centered Earth-Fixed (ECEF) for this purpose). 
  /// Lat / long / height values should be reported using the WGS-84 ellipsoid, where applicable.
  public refFrame SEN_REFERENCE_FRAME { get { int o = __p.__offset(164); return o != 0 ? (refFrame)__p.bb.GetSbyte(o + __p.bb_pos) : refFrame.ECEF; } }
  /// Boolean indicating that the target object was in umbral eclipse at the time of this observation.
  public bool UMBRA { get { int o = __p.__offset(166); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
  /// This field is highly recommended if the observations will be used for photometric processing.
  public bool PENUMBRA { get { int o = __p.__offset(168); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  public string ORIG_NETWORK { get { int o = __p.__offset(170); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIG_NETWORKBytes() { return __p.__vector_as_span<byte>(170, 1); }
#else
  public ArraySegment<byte>? GetORIG_NETWORKBytes() { return __p.__vector_as_arraysegment(170); }
#endif
  public byte[] GetORIG_NETWORKArray() { return __p.__vector_as_array<byte>(170); }
  /// The source from which this record was received.
  public string SOURCE_DL { get { int o = __p.__offset(172); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSOURCE_DLBytes() { return __p.__vector_as_span<byte>(172, 1); }
#else
  public ArraySegment<byte>? GetSOURCE_DLBytes() { return __p.__vector_as_arraysegment(172); }
#endif
  public byte[] GetSOURCE_DLArray() { return __p.__vector_as_array<byte>(172); }
  /// Device Type
  public DeviceType TYPE { get { int o = __p.__offset(174); return o != 0 ? (DeviceType)__p.bb.GetSbyte(o + __p.bb_pos) : DeviceType.UNKNOWN; } }
  /// True if measured, false if computed. Required if azimuth is reported.
  public bool AZIMUTH_MEASURED { get { int o = __p.__offset(176); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// True if measured, false if computed. Required if elevation is reported.
  public bool ELEVATION_MEASURED { get { int o = __p.__offset(178); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// True if measured, false if computed. Required if range is reported.
  public bool RANGE_MEASURED { get { int o = __p.__offset(180); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// True if measured, false if computed. Required if range-rate is reported.
  public bool RANGERATE_MEASURED { get { int o = __p.__offset(182); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// True if measured, false if computed. Required if right ascension is reported.
  public bool RA_MEASURED { get { int o = __p.__offset(184); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// True if measured, false if computed. Required if declination is reported.
  public bool DECLINATION_MEASURED { get { int o = __p.__offset(186); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<EOO> CreateEOO(FlatBufferBuilder builder,
      StringOffset IDOffset = default(StringOffset),
      StringOffset CLASSIFICATIONOffset = default(StringOffset),
      StringOffset OB_TIMEOffset = default(StringOffset),
      float CORR_QUALITY = 0.0f,
      StringOffset ID_ON_ORBITOffset = default(StringOffset),
      StringOffset SENSOR_IDOffset = default(StringOffset),
      CollectMethod COLLECT_METHOD = CollectMethod.SIDEREAL,
      int NORAD_CAT_ID = 0,
      StringOffset TASK_IDOffset = default(StringOffset),
      StringOffset TRANSACTION_IDOffset = default(StringOffset),
      StringOffset TRACK_IDOffset = default(StringOffset),
      ObservationPosition OB_POSITION = ObservationPosition.FENCE,
      StringOffset ORIG_OBJECT_IDOffset = default(StringOffset),
      StringOffset ORIG_SENSOR_IDOffset = default(StringOffset),
      bool UCT = false,
      float AZIMUTH = 0.0f,
      float AZIMUTH_UNC = 0.0f,
      float AZIMUTH_BIAS = 0.0f,
      float AZIMUTH_RATE = 0.0f,
      float ELEVATION = 0.0f,
      float ELEVATION_UNC = 0.0f,
      float ELEVATION_BIAS = 0.0f,
      float ELEVATION_RATE = 0.0f,
      float RANGE = 0.0f,
      float RANGE_UNC = 0.0f,
      float RANGE_BIAS = 0.0f,
      float RANGE_RATE = 0.0f,
      float RANGE_RATE_UNC = 0.0f,
      float RA = 0.0f,
      float RA_RATE = 0.0f,
      float RA_UNC = 0.0f,
      float RA_BIAS = 0.0f,
      float DECLINATION = 0.0f,
      float DECLINATION_RATE = 0.0f,
      float DECLINATION_UNC = 0.0f,
      float DECLINATION_BIAS = 0.0f,
      float LOSX = 0.0f,
      float LOSY = 0.0f,
      float LOSZ = 0.0f,
      float LOS_UNC = 0.0f,
      float LOSXVEL = 0.0f,
      float LOSYVEL = 0.0f,
      float LOSZVEL = 0.0f,
      float SENLAT = 0.0f,
      float SENLON = 0.0f,
      float SENALT = 0.0f,
      float SENX = 0.0f,
      float SENY = 0.0f,
      float SENZ = 0.0f,
      int FOV_COUNT = 0,
      int FOV_COUNT_UCTS = 0,
      float EXP_DURATION = 0.0f,
      float ZEROPTD = 0.0f,
      float NET_OBJ_SIG = 0.0f,
      float NET_OBJ_SIG_UNC = 0.0f,
      float MAG = 0.0f,
      float MAG_UNC = 0.0f,
      float MAG_NORM_RANGE = 0.0f,
      float GEOLAT = 0.0f,
      float GEOLON = 0.0f,
      float GEOALT = 0.0f,
      float GEORANGE = 0.0f,
      float SKY_BKGRND = 0.0f,
      float PRIMARY_EXTINCTION = 0.0f,
      float PRIMARY_EXTINCTION_UNC = 0.0f,
      float SOLAR_PHASE_ANGLE = 0.0f,
      float SOLAR_EQ_PHASE_ANGLE = 0.0f,
      float SOLAR_DEC_ANGLE = 0.0f,
      float SHUTTER_DELAY = 0.0f,
      float TIMING_BIAS = 0.0f,
      StringOffset RAW_FILE_URIOffset = default(StringOffset),
      float INTENSITY = 0.0f,
      float BG_INTENSITY = 0.0f,
      StringOffset DESCRIPTOROffset = default(StringOffset),
      StringOffset SOURCEOffset = default(StringOffset),
      StringOffset ORIGINOffset = default(StringOffset),
      DataMode DATA_MODE = DataMode.EXERCISE,
      StringOffset CREATED_ATOffset = default(StringOffset),
      StringOffset CREATED_BYOffset = default(StringOffset),
      refFrame REFERENCE_FRAME = refFrame.ECEF,
      refFrame SEN_REFERENCE_FRAME = refFrame.ECEF,
      bool UMBRA = false,
      bool PENUMBRA = false,
      StringOffset ORIG_NETWORKOffset = default(StringOffset),
      StringOffset SOURCE_DLOffset = default(StringOffset),
      DeviceType TYPE = DeviceType.UNKNOWN,
      bool AZIMUTH_MEASURED = false,
      bool ELEVATION_MEASURED = false,
      bool RANGE_MEASURED = false,
      bool RANGERATE_MEASURED = false,
      bool RA_MEASURED = false,
      bool DECLINATION_MEASURED = false) {
    builder.StartTable(92);
    EOO.AddSOURCE_DL(builder, SOURCE_DLOffset);
    EOO.AddORIG_NETWORK(builder, ORIG_NETWORKOffset);
    EOO.AddCREATED_BY(builder, CREATED_BYOffset);
    EOO.AddCREATED_AT(builder, CREATED_ATOffset);
    EOO.AddORIGIN(builder, ORIGINOffset);
    EOO.AddSOURCE(builder, SOURCEOffset);
    EOO.AddDESCRIPTOR(builder, DESCRIPTOROffset);
    EOO.AddBG_INTENSITY(builder, BG_INTENSITY);
    EOO.AddINTENSITY(builder, INTENSITY);
    EOO.AddRAW_FILE_URI(builder, RAW_FILE_URIOffset);
    EOO.AddTIMING_BIAS(builder, TIMING_BIAS);
    EOO.AddSHUTTER_DELAY(builder, SHUTTER_DELAY);
    EOO.AddSOLAR_DEC_ANGLE(builder, SOLAR_DEC_ANGLE);
    EOO.AddSOLAR_EQ_PHASE_ANGLE(builder, SOLAR_EQ_PHASE_ANGLE);
    EOO.AddSOLAR_PHASE_ANGLE(builder, SOLAR_PHASE_ANGLE);
    EOO.AddPRIMARY_EXTINCTION_UNC(builder, PRIMARY_EXTINCTION_UNC);
    EOO.AddPRIMARY_EXTINCTION(builder, PRIMARY_EXTINCTION);
    EOO.AddSKY_BKGRND(builder, SKY_BKGRND);
    EOO.AddGEORANGE(builder, GEORANGE);
    EOO.AddGEOALT(builder, GEOALT);
    EOO.AddGEOLON(builder, GEOLON);
    EOO.AddGEOLAT(builder, GEOLAT);
    EOO.AddMAG_NORM_RANGE(builder, MAG_NORM_RANGE);
    EOO.AddMAG_UNC(builder, MAG_UNC);
    EOO.AddMAG(builder, MAG);
    EOO.AddNET_OBJ_SIG_UNC(builder, NET_OBJ_SIG_UNC);
    EOO.AddNET_OBJ_SIG(builder, NET_OBJ_SIG);
    EOO.AddZEROPTD(builder, ZEROPTD);
    EOO.AddEXP_DURATION(builder, EXP_DURATION);
    EOO.AddFOV_COUNT_UCTS(builder, FOV_COUNT_UCTS);
    EOO.AddFOV_COUNT(builder, FOV_COUNT);
    EOO.AddSENZ(builder, SENZ);
    EOO.AddSENY(builder, SENY);
    EOO.AddSENX(builder, SENX);
    EOO.AddSENALT(builder, SENALT);
    EOO.AddSENLON(builder, SENLON);
    EOO.AddSENLAT(builder, SENLAT);
    EOO.AddLOSZVEL(builder, LOSZVEL);
    EOO.AddLOSYVEL(builder, LOSYVEL);
    EOO.AddLOSXVEL(builder, LOSXVEL);
    EOO.AddLOS_UNC(builder, LOS_UNC);
    EOO.AddLOSZ(builder, LOSZ);
    EOO.AddLOSY(builder, LOSY);
    EOO.AddLOSX(builder, LOSX);
    EOO.AddDECLINATION_BIAS(builder, DECLINATION_BIAS);
    EOO.AddDECLINATION_UNC(builder, DECLINATION_UNC);
    EOO.AddDECLINATION_RATE(builder, DECLINATION_RATE);
    EOO.AddDECLINATION(builder, DECLINATION);
    EOO.AddRA_BIAS(builder, RA_BIAS);
    EOO.AddRA_UNC(builder, RA_UNC);
    EOO.AddRA_RATE(builder, RA_RATE);
    EOO.AddRA(builder, RA);
    EOO.AddRANGE_RATE_UNC(builder, RANGE_RATE_UNC);
    EOO.AddRANGE_RATE(builder, RANGE_RATE);
    EOO.AddRANGE_BIAS(builder, RANGE_BIAS);
    EOO.AddRANGE_UNC(builder, RANGE_UNC);
    EOO.AddRANGE(builder, RANGE);
    EOO.AddELEVATION_RATE(builder, ELEVATION_RATE);
    EOO.AddELEVATION_BIAS(builder, ELEVATION_BIAS);
    EOO.AddELEVATION_UNC(builder, ELEVATION_UNC);
    EOO.AddELEVATION(builder, ELEVATION);
    EOO.AddAZIMUTH_RATE(builder, AZIMUTH_RATE);
    EOO.AddAZIMUTH_BIAS(builder, AZIMUTH_BIAS);
    EOO.AddAZIMUTH_UNC(builder, AZIMUTH_UNC);
    EOO.AddAZIMUTH(builder, AZIMUTH);
    EOO.AddORIG_SENSOR_ID(builder, ORIG_SENSOR_IDOffset);
    EOO.AddORIG_OBJECT_ID(builder, ORIG_OBJECT_IDOffset);
    EOO.AddTRACK_ID(builder, TRACK_IDOffset);
    EOO.AddTRANSACTION_ID(builder, TRANSACTION_IDOffset);
    EOO.AddTASK_ID(builder, TASK_IDOffset);
    EOO.AddNORAD_CAT_ID(builder, NORAD_CAT_ID);
    EOO.AddSENSOR_ID(builder, SENSOR_IDOffset);
    EOO.AddID_ON_ORBIT(builder, ID_ON_ORBITOffset);
    EOO.AddCORR_QUALITY(builder, CORR_QUALITY);
    EOO.AddOB_TIME(builder, OB_TIMEOffset);
    EOO.AddCLASSIFICATION(builder, CLASSIFICATIONOffset);
    EOO.AddID(builder, IDOffset);
    EOO.AddDECLINATION_MEASURED(builder, DECLINATION_MEASURED);
    EOO.AddRA_MEASURED(builder, RA_MEASURED);
    EOO.AddRANGERATE_MEASURED(builder, RANGERATE_MEASURED);
    EOO.AddRANGE_MEASURED(builder, RANGE_MEASURED);
    EOO.AddELEVATION_MEASURED(builder, ELEVATION_MEASURED);
    EOO.AddAZIMUTH_MEASURED(builder, AZIMUTH_MEASURED);
    EOO.AddTYPE(builder, TYPE);
    EOO.AddPENUMBRA(builder, PENUMBRA);
    EOO.AddUMBRA(builder, UMBRA);
    EOO.AddSEN_REFERENCE_FRAME(builder, SEN_REFERENCE_FRAME);
    EOO.AddREFERENCE_FRAME(builder, REFERENCE_FRAME);
    EOO.AddDATA_MODE(builder, DATA_MODE);
    EOO.AddUCT(builder, UCT);
    EOO.AddOB_POSITION(builder, OB_POSITION);
    EOO.AddCOLLECT_METHOD(builder, COLLECT_METHOD);
    return EOO.EndEOO(builder);
  }

  public static void StartEOO(FlatBufferBuilder builder) { builder.StartTable(92); }
  public static void AddID(FlatBufferBuilder builder, StringOffset IDOffset) { builder.AddOffset(0, IDOffset.Value, 0); }
  public static void AddCLASSIFICATION(FlatBufferBuilder builder, StringOffset CLASSIFICATIONOffset) { builder.AddOffset(1, CLASSIFICATIONOffset.Value, 0); }
  public static void AddOB_TIME(FlatBufferBuilder builder, StringOffset OB_TIMEOffset) { builder.AddOffset(2, OB_TIMEOffset.Value, 0); }
  public static void AddCORR_QUALITY(FlatBufferBuilder builder, float CORR_QUALITY) { builder.AddFloat(3, CORR_QUALITY, 0.0f); }
  public static void AddID_ON_ORBIT(FlatBufferBuilder builder, StringOffset ID_ON_ORBITOffset) { builder.AddOffset(4, ID_ON_ORBITOffset.Value, 0); }
  public static void AddSENSOR_ID(FlatBufferBuilder builder, StringOffset SENSOR_IDOffset) { builder.AddOffset(5, SENSOR_IDOffset.Value, 0); }
  public static void AddCOLLECT_METHOD(FlatBufferBuilder builder, CollectMethod COLLECT_METHOD) { builder.AddSbyte(6, (sbyte)COLLECT_METHOD, 0); }
  public static void AddNORAD_CAT_ID(FlatBufferBuilder builder, int NORAD_CAT_ID) { builder.AddInt(7, NORAD_CAT_ID, 0); }
  public static void AddTASK_ID(FlatBufferBuilder builder, StringOffset TASK_IDOffset) { builder.AddOffset(8, TASK_IDOffset.Value, 0); }
  public static void AddTRANSACTION_ID(FlatBufferBuilder builder, StringOffset TRANSACTION_IDOffset) { builder.AddOffset(9, TRANSACTION_IDOffset.Value, 0); }
  public static void AddTRACK_ID(FlatBufferBuilder builder, StringOffset TRACK_IDOffset) { builder.AddOffset(10, TRACK_IDOffset.Value, 0); }
  public static void AddOB_POSITION(FlatBufferBuilder builder, ObservationPosition OB_POSITION) { builder.AddSbyte(11, (sbyte)OB_POSITION, 0); }
  public static void AddORIG_OBJECT_ID(FlatBufferBuilder builder, StringOffset ORIG_OBJECT_IDOffset) { builder.AddOffset(12, ORIG_OBJECT_IDOffset.Value, 0); }
  public static void AddORIG_SENSOR_ID(FlatBufferBuilder builder, StringOffset ORIG_SENSOR_IDOffset) { builder.AddOffset(13, ORIG_SENSOR_IDOffset.Value, 0); }
  public static void AddUCT(FlatBufferBuilder builder, bool UCT) { builder.AddBool(14, UCT, false); }
  public static void AddAZIMUTH(FlatBufferBuilder builder, float AZIMUTH) { builder.AddFloat(15, AZIMUTH, 0.0f); }
  public static void AddAZIMUTH_UNC(FlatBufferBuilder builder, float AZIMUTH_UNC) { builder.AddFloat(16, AZIMUTH_UNC, 0.0f); }
  public static void AddAZIMUTH_BIAS(FlatBufferBuilder builder, float AZIMUTH_BIAS) { builder.AddFloat(17, AZIMUTH_BIAS, 0.0f); }
  public static void AddAZIMUTH_RATE(FlatBufferBuilder builder, float AZIMUTH_RATE) { builder.AddFloat(18, AZIMUTH_RATE, 0.0f); }
  public static void AddELEVATION(FlatBufferBuilder builder, float ELEVATION) { builder.AddFloat(19, ELEVATION, 0.0f); }
  public static void AddELEVATION_UNC(FlatBufferBuilder builder, float ELEVATION_UNC) { builder.AddFloat(20, ELEVATION_UNC, 0.0f); }
  public static void AddELEVATION_BIAS(FlatBufferBuilder builder, float ELEVATION_BIAS) { builder.AddFloat(21, ELEVATION_BIAS, 0.0f); }
  public static void AddELEVATION_RATE(FlatBufferBuilder builder, float ELEVATION_RATE) { builder.AddFloat(22, ELEVATION_RATE, 0.0f); }
  public static void AddRANGE(FlatBufferBuilder builder, float RANGE) { builder.AddFloat(23, RANGE, 0.0f); }
  public static void AddRANGE_UNC(FlatBufferBuilder builder, float RANGE_UNC) { builder.AddFloat(24, RANGE_UNC, 0.0f); }
  public static void AddRANGE_BIAS(FlatBufferBuilder builder, float RANGE_BIAS) { builder.AddFloat(25, RANGE_BIAS, 0.0f); }
  public static void AddRANGE_RATE(FlatBufferBuilder builder, float RANGE_RATE) { builder.AddFloat(26, RANGE_RATE, 0.0f); }
  public static void AddRANGE_RATE_UNC(FlatBufferBuilder builder, float RANGE_RATE_UNC) { builder.AddFloat(27, RANGE_RATE_UNC, 0.0f); }
  public static void AddRA(FlatBufferBuilder builder, float RA) { builder.AddFloat(28, RA, 0.0f); }
  public static void AddRA_RATE(FlatBufferBuilder builder, float RA_RATE) { builder.AddFloat(29, RA_RATE, 0.0f); }
  public static void AddRA_UNC(FlatBufferBuilder builder, float RA_UNC) { builder.AddFloat(30, RA_UNC, 0.0f); }
  public static void AddRA_BIAS(FlatBufferBuilder builder, float RA_BIAS) { builder.AddFloat(31, RA_BIAS, 0.0f); }
  public static void AddDECLINATION(FlatBufferBuilder builder, float DECLINATION) { builder.AddFloat(32, DECLINATION, 0.0f); }
  public static void AddDECLINATION_RATE(FlatBufferBuilder builder, float DECLINATION_RATE) { builder.AddFloat(33, DECLINATION_RATE, 0.0f); }
  public static void AddDECLINATION_UNC(FlatBufferBuilder builder, float DECLINATION_UNC) { builder.AddFloat(34, DECLINATION_UNC, 0.0f); }
  public static void AddDECLINATION_BIAS(FlatBufferBuilder builder, float DECLINATION_BIAS) { builder.AddFloat(35, DECLINATION_BIAS, 0.0f); }
  public static void AddLOSX(FlatBufferBuilder builder, float LOSX) { builder.AddFloat(36, LOSX, 0.0f); }
  public static void AddLOSY(FlatBufferBuilder builder, float LOSY) { builder.AddFloat(37, LOSY, 0.0f); }
  public static void AddLOSZ(FlatBufferBuilder builder, float LOSZ) { builder.AddFloat(38, LOSZ, 0.0f); }
  public static void AddLOS_UNC(FlatBufferBuilder builder, float LOS_UNC) { builder.AddFloat(39, LOS_UNC, 0.0f); }
  public static void AddLOSXVEL(FlatBufferBuilder builder, float LOSXVEL) { builder.AddFloat(40, LOSXVEL, 0.0f); }
  public static void AddLOSYVEL(FlatBufferBuilder builder, float LOSYVEL) { builder.AddFloat(41, LOSYVEL, 0.0f); }
  public static void AddLOSZVEL(FlatBufferBuilder builder, float LOSZVEL) { builder.AddFloat(42, LOSZVEL, 0.0f); }
  public static void AddSENLAT(FlatBufferBuilder builder, float SENLAT) { builder.AddFloat(43, SENLAT, 0.0f); }
  public static void AddSENLON(FlatBufferBuilder builder, float SENLON) { builder.AddFloat(44, SENLON, 0.0f); }
  public static void AddSENALT(FlatBufferBuilder builder, float SENALT) { builder.AddFloat(45, SENALT, 0.0f); }
  public static void AddSENX(FlatBufferBuilder builder, float SENX) { builder.AddFloat(46, SENX, 0.0f); }
  public static void AddSENY(FlatBufferBuilder builder, float SENY) { builder.AddFloat(47, SENY, 0.0f); }
  public static void AddSENZ(FlatBufferBuilder builder, float SENZ) { builder.AddFloat(48, SENZ, 0.0f); }
  public static void AddFOV_COUNT(FlatBufferBuilder builder, int FOV_COUNT) { builder.AddInt(49, FOV_COUNT, 0); }
  public static void AddFOV_COUNT_UCTS(FlatBufferBuilder builder, int FOV_COUNT_UCTS) { builder.AddInt(50, FOV_COUNT_UCTS, 0); }
  public static void AddEXP_DURATION(FlatBufferBuilder builder, float EXP_DURATION) { builder.AddFloat(51, EXP_DURATION, 0.0f); }
  public static void AddZEROPTD(FlatBufferBuilder builder, float ZEROPTD) { builder.AddFloat(52, ZEROPTD, 0.0f); }
  public static void AddNET_OBJ_SIG(FlatBufferBuilder builder, float NET_OBJ_SIG) { builder.AddFloat(53, NET_OBJ_SIG, 0.0f); }
  public static void AddNET_OBJ_SIG_UNC(FlatBufferBuilder builder, float NET_OBJ_SIG_UNC) { builder.AddFloat(54, NET_OBJ_SIG_UNC, 0.0f); }
  public static void AddMAG(FlatBufferBuilder builder, float MAG) { builder.AddFloat(55, MAG, 0.0f); }
  public static void AddMAG_UNC(FlatBufferBuilder builder, float MAG_UNC) { builder.AddFloat(56, MAG_UNC, 0.0f); }
  public static void AddMAG_NORM_RANGE(FlatBufferBuilder builder, float MAG_NORM_RANGE) { builder.AddFloat(57, MAG_NORM_RANGE, 0.0f); }
  public static void AddGEOLAT(FlatBufferBuilder builder, float GEOLAT) { builder.AddFloat(58, GEOLAT, 0.0f); }
  public static void AddGEOLON(FlatBufferBuilder builder, float GEOLON) { builder.AddFloat(59, GEOLON, 0.0f); }
  public static void AddGEOALT(FlatBufferBuilder builder, float GEOALT) { builder.AddFloat(60, GEOALT, 0.0f); }
  public static void AddGEORANGE(FlatBufferBuilder builder, float GEORANGE) { builder.AddFloat(61, GEORANGE, 0.0f); }
  public static void AddSKY_BKGRND(FlatBufferBuilder builder, float SKY_BKGRND) { builder.AddFloat(62, SKY_BKGRND, 0.0f); }
  public static void AddPRIMARY_EXTINCTION(FlatBufferBuilder builder, float PRIMARY_EXTINCTION) { builder.AddFloat(63, PRIMARY_EXTINCTION, 0.0f); }
  public static void AddPRIMARY_EXTINCTION_UNC(FlatBufferBuilder builder, float PRIMARY_EXTINCTION_UNC) { builder.AddFloat(64, PRIMARY_EXTINCTION_UNC, 0.0f); }
  public static void AddSOLAR_PHASE_ANGLE(FlatBufferBuilder builder, float SOLAR_PHASE_ANGLE) { builder.AddFloat(65, SOLAR_PHASE_ANGLE, 0.0f); }
  public static void AddSOLAR_EQ_PHASE_ANGLE(FlatBufferBuilder builder, float SOLAR_EQ_PHASE_ANGLE) { builder.AddFloat(66, SOLAR_EQ_PHASE_ANGLE, 0.0f); }
  public static void AddSOLAR_DEC_ANGLE(FlatBufferBuilder builder, float SOLAR_DEC_ANGLE) { builder.AddFloat(67, SOLAR_DEC_ANGLE, 0.0f); }
  public static void AddSHUTTER_DELAY(FlatBufferBuilder builder, float SHUTTER_DELAY) { builder.AddFloat(68, SHUTTER_DELAY, 0.0f); }
  public static void AddTIMING_BIAS(FlatBufferBuilder builder, float TIMING_BIAS) { builder.AddFloat(69, TIMING_BIAS, 0.0f); }
  public static void AddRAW_FILE_URI(FlatBufferBuilder builder, StringOffset RAW_FILE_URIOffset) { builder.AddOffset(70, RAW_FILE_URIOffset.Value, 0); }
  public static void AddINTENSITY(FlatBufferBuilder builder, float INTENSITY) { builder.AddFloat(71, INTENSITY, 0.0f); }
  public static void AddBG_INTENSITY(FlatBufferBuilder builder, float BG_INTENSITY) { builder.AddFloat(72, BG_INTENSITY, 0.0f); }
  public static void AddDESCRIPTOR(FlatBufferBuilder builder, StringOffset DESCRIPTOROffset) { builder.AddOffset(73, DESCRIPTOROffset.Value, 0); }
  public static void AddSOURCE(FlatBufferBuilder builder, StringOffset SOURCEOffset) { builder.AddOffset(74, SOURCEOffset.Value, 0); }
  public static void AddORIGIN(FlatBufferBuilder builder, StringOffset ORIGINOffset) { builder.AddOffset(75, ORIGINOffset.Value, 0); }
  public static void AddDATA_MODE(FlatBufferBuilder builder, DataMode DATA_MODE) { builder.AddSbyte(76, (sbyte)DATA_MODE, 0); }
  public static void AddCREATED_AT(FlatBufferBuilder builder, StringOffset CREATED_ATOffset) { builder.AddOffset(77, CREATED_ATOffset.Value, 0); }
  public static void AddCREATED_BY(FlatBufferBuilder builder, StringOffset CREATED_BYOffset) { builder.AddOffset(78, CREATED_BYOffset.Value, 0); }
  public static void AddREFERENCE_FRAME(FlatBufferBuilder builder, refFrame REFERENCE_FRAME) { builder.AddSbyte(79, (sbyte)REFERENCE_FRAME, 0); }
  public static void AddSEN_REFERENCE_FRAME(FlatBufferBuilder builder, refFrame SEN_REFERENCE_FRAME) { builder.AddSbyte(80, (sbyte)SEN_REFERENCE_FRAME, 0); }
  public static void AddUMBRA(FlatBufferBuilder builder, bool UMBRA) { builder.AddBool(81, UMBRA, false); }
  public static void AddPENUMBRA(FlatBufferBuilder builder, bool PENUMBRA) { builder.AddBool(82, PENUMBRA, false); }
  public static void AddORIG_NETWORK(FlatBufferBuilder builder, StringOffset ORIG_NETWORKOffset) { builder.AddOffset(83, ORIG_NETWORKOffset.Value, 0); }
  public static void AddSOURCE_DL(FlatBufferBuilder builder, StringOffset SOURCE_DLOffset) { builder.AddOffset(84, SOURCE_DLOffset.Value, 0); }
  public static void AddTYPE(FlatBufferBuilder builder, DeviceType TYPE) { builder.AddSbyte(85, (sbyte)TYPE, 0); }
  public static void AddAZIMUTH_MEASURED(FlatBufferBuilder builder, bool AZIMUTH_MEASURED) { builder.AddBool(86, AZIMUTH_MEASURED, false); }
  public static void AddELEVATION_MEASURED(FlatBufferBuilder builder, bool ELEVATION_MEASURED) { builder.AddBool(87, ELEVATION_MEASURED, false); }
  public static void AddRANGE_MEASURED(FlatBufferBuilder builder, bool RANGE_MEASURED) { builder.AddBool(88, RANGE_MEASURED, false); }
  public static void AddRANGERATE_MEASURED(FlatBufferBuilder builder, bool RANGERATE_MEASURED) { builder.AddBool(89, RANGERATE_MEASURED, false); }
  public static void AddRA_MEASURED(FlatBufferBuilder builder, bool RA_MEASURED) { builder.AddBool(90, RA_MEASURED, false); }
  public static void AddDECLINATION_MEASURED(FlatBufferBuilder builder, bool DECLINATION_MEASURED) { builder.AddBool(91, DECLINATION_MEASURED, false); }
  public static Offset<EOO> EndEOO(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EOO>(o);
  }
  public static void FinishEOOBuffer(FlatBufferBuilder builder, Offset<EOO> offset) { builder.Finish(offset.Value, "$EOO"); }
  public static void FinishSizePrefixedEOOBuffer(FlatBufferBuilder builder, Offset<EOO> offset) { builder.FinishSizePrefixed(offset.Value, "$EOO"); }
  public EOOT UnPack() {
    var _o = new EOOT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EOOT _o) {
    _o.ID = this.ID;
    _o.CLASSIFICATION = this.CLASSIFICATION;
    _o.OB_TIME = this.OB_TIME;
    _o.CORR_QUALITY = this.CORR_QUALITY;
    _o.ID_ON_ORBIT = this.ID_ON_ORBIT;
    _o.SENSOR_ID = this.SENSOR_ID;
    _o.COLLECT_METHOD = this.COLLECT_METHOD;
    _o.NORAD_CAT_ID = this.NORAD_CAT_ID;
    _o.TASK_ID = this.TASK_ID;
    _o.TRANSACTION_ID = this.TRANSACTION_ID;
    _o.TRACK_ID = this.TRACK_ID;
    _o.OB_POSITION = this.OB_POSITION;
    _o.ORIG_OBJECT_ID = this.ORIG_OBJECT_ID;
    _o.ORIG_SENSOR_ID = this.ORIG_SENSOR_ID;
    _o.UCT = this.UCT;
    _o.AZIMUTH = this.AZIMUTH;
    _o.AZIMUTH_UNC = this.AZIMUTH_UNC;
    _o.AZIMUTH_BIAS = this.AZIMUTH_BIAS;
    _o.AZIMUTH_RATE = this.AZIMUTH_RATE;
    _o.ELEVATION = this.ELEVATION;
    _o.ELEVATION_UNC = this.ELEVATION_UNC;
    _o.ELEVATION_BIAS = this.ELEVATION_BIAS;
    _o.ELEVATION_RATE = this.ELEVATION_RATE;
    _o.RANGE = this.RANGE;
    _o.RANGE_UNC = this.RANGE_UNC;
    _o.RANGE_BIAS = this.RANGE_BIAS;
    _o.RANGE_RATE = this.RANGE_RATE;
    _o.RANGE_RATE_UNC = this.RANGE_RATE_UNC;
    _o.RA = this.RA;
    _o.RA_RATE = this.RA_RATE;
    _o.RA_UNC = this.RA_UNC;
    _o.RA_BIAS = this.RA_BIAS;
    _o.DECLINATION = this.DECLINATION;
    _o.DECLINATION_RATE = this.DECLINATION_RATE;
    _o.DECLINATION_UNC = this.DECLINATION_UNC;
    _o.DECLINATION_BIAS = this.DECLINATION_BIAS;
    _o.LOSX = this.LOSX;
    _o.LOSY = this.LOSY;
    _o.LOSZ = this.LOSZ;
    _o.LOS_UNC = this.LOS_UNC;
    _o.LOSXVEL = this.LOSXVEL;
    _o.LOSYVEL = this.LOSYVEL;
    _o.LOSZVEL = this.LOSZVEL;
    _o.SENLAT = this.SENLAT;
    _o.SENLON = this.SENLON;
    _o.SENALT = this.SENALT;
    _o.SENX = this.SENX;
    _o.SENY = this.SENY;
    _o.SENZ = this.SENZ;
    _o.FOV_COUNT = this.FOV_COUNT;
    _o.FOV_COUNT_UCTS = this.FOV_COUNT_UCTS;
    _o.EXP_DURATION = this.EXP_DURATION;
    _o.ZEROPTD = this.ZEROPTD;
    _o.NET_OBJ_SIG = this.NET_OBJ_SIG;
    _o.NET_OBJ_SIG_UNC = this.NET_OBJ_SIG_UNC;
    _o.MAG = this.MAG;
    _o.MAG_UNC = this.MAG_UNC;
    _o.MAG_NORM_RANGE = this.MAG_NORM_RANGE;
    _o.GEOLAT = this.GEOLAT;
    _o.GEOLON = this.GEOLON;
    _o.GEOALT = this.GEOALT;
    _o.GEORANGE = this.GEORANGE;
    _o.SKY_BKGRND = this.SKY_BKGRND;
    _o.PRIMARY_EXTINCTION = this.PRIMARY_EXTINCTION;
    _o.PRIMARY_EXTINCTION_UNC = this.PRIMARY_EXTINCTION_UNC;
    _o.SOLAR_PHASE_ANGLE = this.SOLAR_PHASE_ANGLE;
    _o.SOLAR_EQ_PHASE_ANGLE = this.SOLAR_EQ_PHASE_ANGLE;
    _o.SOLAR_DEC_ANGLE = this.SOLAR_DEC_ANGLE;
    _o.SHUTTER_DELAY = this.SHUTTER_DELAY;
    _o.TIMING_BIAS = this.TIMING_BIAS;
    _o.RAW_FILE_URI = this.RAW_FILE_URI;
    _o.INTENSITY = this.INTENSITY;
    _o.BG_INTENSITY = this.BG_INTENSITY;
    _o.DESCRIPTOR = this.DESCRIPTOR;
    _o.SOURCE = this.SOURCE;
    _o.ORIGIN = this.ORIGIN;
    _o.DATA_MODE = this.DATA_MODE;
    _o.CREATED_AT = this.CREATED_AT;
    _o.CREATED_BY = this.CREATED_BY;
    _o.REFERENCE_FRAME = this.REFERENCE_FRAME;
    _o.SEN_REFERENCE_FRAME = this.SEN_REFERENCE_FRAME;
    _o.UMBRA = this.UMBRA;
    _o.PENUMBRA = this.PENUMBRA;
    _o.ORIG_NETWORK = this.ORIG_NETWORK;
    _o.SOURCE_DL = this.SOURCE_DL;
    _o.TYPE = this.TYPE;
    _o.AZIMUTH_MEASURED = this.AZIMUTH_MEASURED;
    _o.ELEVATION_MEASURED = this.ELEVATION_MEASURED;
    _o.RANGE_MEASURED = this.RANGE_MEASURED;
    _o.RANGERATE_MEASURED = this.RANGERATE_MEASURED;
    _o.RA_MEASURED = this.RA_MEASURED;
    _o.DECLINATION_MEASURED = this.DECLINATION_MEASURED;
  }
  public static Offset<EOO> Pack(FlatBufferBuilder builder, EOOT _o) {
    if (_o == null) return default(Offset<EOO>);
    var _ID = _o.ID == null ? default(StringOffset) : builder.CreateString(_o.ID);
    var _CLASSIFICATION = _o.CLASSIFICATION == null ? default(StringOffset) : builder.CreateString(_o.CLASSIFICATION);
    var _OB_TIME = _o.OB_TIME == null ? default(StringOffset) : builder.CreateString(_o.OB_TIME);
    var _ID_ON_ORBIT = _o.ID_ON_ORBIT == null ? default(StringOffset) : builder.CreateString(_o.ID_ON_ORBIT);
    var _SENSOR_ID = _o.SENSOR_ID == null ? default(StringOffset) : builder.CreateString(_o.SENSOR_ID);
    var _TASK_ID = _o.TASK_ID == null ? default(StringOffset) : builder.CreateString(_o.TASK_ID);
    var _TRANSACTION_ID = _o.TRANSACTION_ID == null ? default(StringOffset) : builder.CreateString(_o.TRANSACTION_ID);
    var _TRACK_ID = _o.TRACK_ID == null ? default(StringOffset) : builder.CreateString(_o.TRACK_ID);
    var _ORIG_OBJECT_ID = _o.ORIG_OBJECT_ID == null ? default(StringOffset) : builder.CreateString(_o.ORIG_OBJECT_ID);
    var _ORIG_SENSOR_ID = _o.ORIG_SENSOR_ID == null ? default(StringOffset) : builder.CreateString(_o.ORIG_SENSOR_ID);
    var _RAW_FILE_URI = _o.RAW_FILE_URI == null ? default(StringOffset) : builder.CreateString(_o.RAW_FILE_URI);
    var _DESCRIPTOR = _o.DESCRIPTOR == null ? default(StringOffset) : builder.CreateString(_o.DESCRIPTOR);
    var _SOURCE = _o.SOURCE == null ? default(StringOffset) : builder.CreateString(_o.SOURCE);
    var _ORIGIN = _o.ORIGIN == null ? default(StringOffset) : builder.CreateString(_o.ORIGIN);
    var _CREATED_AT = _o.CREATED_AT == null ? default(StringOffset) : builder.CreateString(_o.CREATED_AT);
    var _CREATED_BY = _o.CREATED_BY == null ? default(StringOffset) : builder.CreateString(_o.CREATED_BY);
    var _ORIG_NETWORK = _o.ORIG_NETWORK == null ? default(StringOffset) : builder.CreateString(_o.ORIG_NETWORK);
    var _SOURCE_DL = _o.SOURCE_DL == null ? default(StringOffset) : builder.CreateString(_o.SOURCE_DL);
    return CreateEOO(
      builder,
      _ID,
      _CLASSIFICATION,
      _OB_TIME,
      _o.CORR_QUALITY,
      _ID_ON_ORBIT,
      _SENSOR_ID,
      _o.COLLECT_METHOD,
      _o.NORAD_CAT_ID,
      _TASK_ID,
      _TRANSACTION_ID,
      _TRACK_ID,
      _o.OB_POSITION,
      _ORIG_OBJECT_ID,
      _ORIG_SENSOR_ID,
      _o.UCT,
      _o.AZIMUTH,
      _o.AZIMUTH_UNC,
      _o.AZIMUTH_BIAS,
      _o.AZIMUTH_RATE,
      _o.ELEVATION,
      _o.ELEVATION_UNC,
      _o.ELEVATION_BIAS,
      _o.ELEVATION_RATE,
      _o.RANGE,
      _o.RANGE_UNC,
      _o.RANGE_BIAS,
      _o.RANGE_RATE,
      _o.RANGE_RATE_UNC,
      _o.RA,
      _o.RA_RATE,
      _o.RA_UNC,
      _o.RA_BIAS,
      _o.DECLINATION,
      _o.DECLINATION_RATE,
      _o.DECLINATION_UNC,
      _o.DECLINATION_BIAS,
      _o.LOSX,
      _o.LOSY,
      _o.LOSZ,
      _o.LOS_UNC,
      _o.LOSXVEL,
      _o.LOSYVEL,
      _o.LOSZVEL,
      _o.SENLAT,
      _o.SENLON,
      _o.SENALT,
      _o.SENX,
      _o.SENY,
      _o.SENZ,
      _o.FOV_COUNT,
      _o.FOV_COUNT_UCTS,
      _o.EXP_DURATION,
      _o.ZEROPTD,
      _o.NET_OBJ_SIG,
      _o.NET_OBJ_SIG_UNC,
      _o.MAG,
      _o.MAG_UNC,
      _o.MAG_NORM_RANGE,
      _o.GEOLAT,
      _o.GEOLON,
      _o.GEOALT,
      _o.GEORANGE,
      _o.SKY_BKGRND,
      _o.PRIMARY_EXTINCTION,
      _o.PRIMARY_EXTINCTION_UNC,
      _o.SOLAR_PHASE_ANGLE,
      _o.SOLAR_EQ_PHASE_ANGLE,
      _o.SOLAR_DEC_ANGLE,
      _o.SHUTTER_DELAY,
      _o.TIMING_BIAS,
      _RAW_FILE_URI,
      _o.INTENSITY,
      _o.BG_INTENSITY,
      _DESCRIPTOR,
      _SOURCE,
      _ORIGIN,
      _o.DATA_MODE,
      _CREATED_AT,
      _CREATED_BY,
      _o.REFERENCE_FRAME,
      _o.SEN_REFERENCE_FRAME,
      _o.UMBRA,
      _o.PENUMBRA,
      _ORIG_NETWORK,
      _SOURCE_DL,
      _o.TYPE,
      _o.AZIMUTH_MEASURED,
      _o.ELEVATION_MEASURED,
      _o.RANGE_MEASURED,
      _o.RANGERATE_MEASURED,
      _o.RA_MEASURED,
      _o.DECLINATION_MEASURED);
  }
}

public class EOOT
{
  public string ID { get; set; }
  public string CLASSIFICATION { get; set; }
  public string OB_TIME { get; set; }
  public float CORR_QUALITY { get; set; }
  public string ID_ON_ORBIT { get; set; }
  public string SENSOR_ID { get; set; }
  public CollectMethod COLLECT_METHOD { get; set; }
  public int NORAD_CAT_ID { get; set; }
  public string TASK_ID { get; set; }
  public string TRANSACTION_ID { get; set; }
  public string TRACK_ID { get; set; }
  public ObservationPosition OB_POSITION { get; set; }
  public string ORIG_OBJECT_ID { get; set; }
  public string ORIG_SENSOR_ID { get; set; }
  public bool UCT { get; set; }
  public float AZIMUTH { get; set; }
  public float AZIMUTH_UNC { get; set; }
  public float AZIMUTH_BIAS { get; set; }
  public float AZIMUTH_RATE { get; set; }
  public float ELEVATION { get; set; }
  public float ELEVATION_UNC { get; set; }
  public float ELEVATION_BIAS { get; set; }
  public float ELEVATION_RATE { get; set; }
  public float RANGE { get; set; }
  public float RANGE_UNC { get; set; }
  public float RANGE_BIAS { get; set; }
  public float RANGE_RATE { get; set; }
  public float RANGE_RATE_UNC { get; set; }
  public float RA { get; set; }
  public float RA_RATE { get; set; }
  public float RA_UNC { get; set; }
  public float RA_BIAS { get; set; }
  public float DECLINATION { get; set; }
  public float DECLINATION_RATE { get; set; }
  public float DECLINATION_UNC { get; set; }
  public float DECLINATION_BIAS { get; set; }
  public float LOSX { get; set; }
  public float LOSY { get; set; }
  public float LOSZ { get; set; }
  public float LOS_UNC { get; set; }
  public float LOSXVEL { get; set; }
  public float LOSYVEL { get; set; }
  public float LOSZVEL { get; set; }
  public float SENLAT { get; set; }
  public float SENLON { get; set; }
  public float SENALT { get; set; }
  public float SENX { get; set; }
  public float SENY { get; set; }
  public float SENZ { get; set; }
  public int FOV_COUNT { get; set; }
  public int FOV_COUNT_UCTS { get; set; }
  public float EXP_DURATION { get; set; }
  public float ZEROPTD { get; set; }
  public float NET_OBJ_SIG { get; set; }
  public float NET_OBJ_SIG_UNC { get; set; }
  public float MAG { get; set; }
  public float MAG_UNC { get; set; }
  public float MAG_NORM_RANGE { get; set; }
  public float GEOLAT { get; set; }
  public float GEOLON { get; set; }
  public float GEOALT { get; set; }
  public float GEORANGE { get; set; }
  public float SKY_BKGRND { get; set; }
  public float PRIMARY_EXTINCTION { get; set; }
  public float PRIMARY_EXTINCTION_UNC { get; set; }
  public float SOLAR_PHASE_ANGLE { get; set; }
  public float SOLAR_EQ_PHASE_ANGLE { get; set; }
  public float SOLAR_DEC_ANGLE { get; set; }
  public float SHUTTER_DELAY { get; set; }
  public float TIMING_BIAS { get; set; }
  public string RAW_FILE_URI { get; set; }
  public float INTENSITY { get; set; }
  public float BG_INTENSITY { get; set; }
  public string DESCRIPTOR { get; set; }
  public string SOURCE { get; set; }
  public string ORIGIN { get; set; }
  public DataMode DATA_MODE { get; set; }
  public string CREATED_AT { get; set; }
  public string CREATED_BY { get; set; }
  public refFrame REFERENCE_FRAME { get; set; }
  public refFrame SEN_REFERENCE_FRAME { get; set; }
  public bool UMBRA { get; set; }
  public bool PENUMBRA { get; set; }
  public string ORIG_NETWORK { get; set; }
  public string SOURCE_DL { get; set; }
  public DeviceType TYPE { get; set; }
  public bool AZIMUTH_MEASURED { get; set; }
  public bool ELEVATION_MEASURED { get; set; }
  public bool RANGE_MEASURED { get; set; }
  public bool RANGERATE_MEASURED { get; set; }
  public bool RA_MEASURED { get; set; }
  public bool DECLINATION_MEASURED { get; set; }

  public EOOT() {
    this.ID = null;
    this.CLASSIFICATION = null;
    this.OB_TIME = null;
    this.CORR_QUALITY = 0.0f;
    this.ID_ON_ORBIT = null;
    this.SENSOR_ID = null;
    this.COLLECT_METHOD = CollectMethod.SIDEREAL;
    this.NORAD_CAT_ID = 0;
    this.TASK_ID = null;
    this.TRANSACTION_ID = null;
    this.TRACK_ID = null;
    this.OB_POSITION = ObservationPosition.FENCE;
    this.ORIG_OBJECT_ID = null;
    this.ORIG_SENSOR_ID = null;
    this.UCT = false;
    this.AZIMUTH = 0.0f;
    this.AZIMUTH_UNC = 0.0f;
    this.AZIMUTH_BIAS = 0.0f;
    this.AZIMUTH_RATE = 0.0f;
    this.ELEVATION = 0.0f;
    this.ELEVATION_UNC = 0.0f;
    this.ELEVATION_BIAS = 0.0f;
    this.ELEVATION_RATE = 0.0f;
    this.RANGE = 0.0f;
    this.RANGE_UNC = 0.0f;
    this.RANGE_BIAS = 0.0f;
    this.RANGE_RATE = 0.0f;
    this.RANGE_RATE_UNC = 0.0f;
    this.RA = 0.0f;
    this.RA_RATE = 0.0f;
    this.RA_UNC = 0.0f;
    this.RA_BIAS = 0.0f;
    this.DECLINATION = 0.0f;
    this.DECLINATION_RATE = 0.0f;
    this.DECLINATION_UNC = 0.0f;
    this.DECLINATION_BIAS = 0.0f;
    this.LOSX = 0.0f;
    this.LOSY = 0.0f;
    this.LOSZ = 0.0f;
    this.LOS_UNC = 0.0f;
    this.LOSXVEL = 0.0f;
    this.LOSYVEL = 0.0f;
    this.LOSZVEL = 0.0f;
    this.SENLAT = 0.0f;
    this.SENLON = 0.0f;
    this.SENALT = 0.0f;
    this.SENX = 0.0f;
    this.SENY = 0.0f;
    this.SENZ = 0.0f;
    this.FOV_COUNT = 0;
    this.FOV_COUNT_UCTS = 0;
    this.EXP_DURATION = 0.0f;
    this.ZEROPTD = 0.0f;
    this.NET_OBJ_SIG = 0.0f;
    this.NET_OBJ_SIG_UNC = 0.0f;
    this.MAG = 0.0f;
    this.MAG_UNC = 0.0f;
    this.MAG_NORM_RANGE = 0.0f;
    this.GEOLAT = 0.0f;
    this.GEOLON = 0.0f;
    this.GEOALT = 0.0f;
    this.GEORANGE = 0.0f;
    this.SKY_BKGRND = 0.0f;
    this.PRIMARY_EXTINCTION = 0.0f;
    this.PRIMARY_EXTINCTION_UNC = 0.0f;
    this.SOLAR_PHASE_ANGLE = 0.0f;
    this.SOLAR_EQ_PHASE_ANGLE = 0.0f;
    this.SOLAR_DEC_ANGLE = 0.0f;
    this.SHUTTER_DELAY = 0.0f;
    this.TIMING_BIAS = 0.0f;
    this.RAW_FILE_URI = null;
    this.INTENSITY = 0.0f;
    this.BG_INTENSITY = 0.0f;
    this.DESCRIPTOR = null;
    this.SOURCE = null;
    this.ORIGIN = null;
    this.DATA_MODE = DataMode.EXERCISE;
    this.CREATED_AT = null;
    this.CREATED_BY = null;
    this.REFERENCE_FRAME = refFrame.ECEF;
    this.SEN_REFERENCE_FRAME = refFrame.ECEF;
    this.UMBRA = false;
    this.PENUMBRA = false;
    this.ORIG_NETWORK = null;
    this.SOURCE_DL = null;
    this.TYPE = DeviceType.UNKNOWN;
    this.AZIMUTH_MEASURED = false;
    this.ELEVATION_MEASURED = false;
    this.RANGE_MEASURED = false;
    this.RANGERATE_MEASURED = false;
    this.RA_MEASURED = false;
    this.DECLINATION_MEASURED = false;
  }
  public static EOOT DeserializeFromBinary(byte[] fbBuffer) {
    return EOO.GetRootAsEOO(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EOO.FinishEOOBuffer(fbb, EOO.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class EOOVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*ID*/, false)
      && verifier.VerifyString(tablePos, 6 /*CLASSIFICATION*/, false)
      && verifier.VerifyString(tablePos, 8 /*OB_TIME*/, false)
      && verifier.VerifyField(tablePos, 10 /*CORR_QUALITY*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*ID_ON_ORBIT*/, false)
      && verifier.VerifyString(tablePos, 14 /*SENSOR_ID*/, false)
      && verifier.VerifyField(tablePos, 16 /*COLLECT_METHOD*/, 1 /*CollectMethod*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*NORAD_CAT_ID*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*TASK_ID*/, false)
      && verifier.VerifyString(tablePos, 22 /*TRANSACTION_ID*/, false)
      && verifier.VerifyString(tablePos, 24 /*TRACK_ID*/, false)
      && verifier.VerifyField(tablePos, 26 /*OB_POSITION*/, 1 /*ObservationPosition*/, 1, false)
      && verifier.VerifyString(tablePos, 28 /*ORIG_OBJECT_ID*/, false)
      && verifier.VerifyString(tablePos, 30 /*ORIG_SENSOR_ID*/, false)
      && verifier.VerifyField(tablePos, 32 /*UCT*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 34 /*AZIMUTH*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*AZIMUTH_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*AZIMUTH_BIAS*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*AZIMUTH_RATE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*ELEVATION*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*ELEVATION_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*ELEVATION_BIAS*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*ELEVATION_RATE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*RANGE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*RANGE_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*RANGE_BIAS*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*RANGE_RATE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*RANGE_RATE_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*RA*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*RA_RATE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*RA_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 66 /*RA_BIAS*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 68 /*DECLINATION*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 70 /*DECLINATION_RATE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 72 /*DECLINATION_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 74 /*DECLINATION_BIAS*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 76 /*LOSX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 78 /*LOSY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 80 /*LOSZ*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 82 /*LOS_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 84 /*LOSXVEL*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*LOSYVEL*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 88 /*LOSZVEL*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 90 /*SENLAT*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 92 /*SENLON*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 94 /*SENALT*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 96 /*SENX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 98 /*SENY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 100 /*SENZ*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 102 /*FOV_COUNT*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 104 /*FOV_COUNT_UCTS*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 106 /*EXP_DURATION*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 108 /*ZEROPTD*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 110 /*NET_OBJ_SIG*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 112 /*NET_OBJ_SIG_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 114 /*MAG*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 116 /*MAG_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 118 /*MAG_NORM_RANGE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 120 /*GEOLAT*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 122 /*GEOLON*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 124 /*GEOALT*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 126 /*GEORANGE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 128 /*SKY_BKGRND*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 130 /*PRIMARY_EXTINCTION*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 132 /*PRIMARY_EXTINCTION_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 134 /*SOLAR_PHASE_ANGLE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 136 /*SOLAR_EQ_PHASE_ANGLE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 138 /*SOLAR_DEC_ANGLE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 140 /*SHUTTER_DELAY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 142 /*TIMING_BIAS*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 144 /*RAW_FILE_URI*/, false)
      && verifier.VerifyField(tablePos, 146 /*INTENSITY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 148 /*BG_INTENSITY*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 150 /*DESCRIPTOR*/, false)
      && verifier.VerifyString(tablePos, 152 /*SOURCE*/, false)
      && verifier.VerifyString(tablePos, 154 /*ORIGIN*/, false)
      && verifier.VerifyField(tablePos, 156 /*DATA_MODE*/, 1 /*DataMode*/, 1, false)
      && verifier.VerifyString(tablePos, 158 /*CREATED_AT*/, false)
      && verifier.VerifyString(tablePos, 160 /*CREATED_BY*/, false)
      && verifier.VerifyField(tablePos, 162 /*REFERENCE_FRAME*/, 1 /*refFrame*/, 1, false)
      && verifier.VerifyField(tablePos, 164 /*SEN_REFERENCE_FRAME*/, 1 /*refFrame*/, 1, false)
      && verifier.VerifyField(tablePos, 166 /*UMBRA*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 168 /*PENUMBRA*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 170 /*ORIG_NETWORK*/, false)
      && verifier.VerifyString(tablePos, 172 /*SOURCE_DL*/, false)
      && verifier.VerifyField(tablePos, 174 /*TYPE*/, 1 /*DeviceType*/, 1, false)
      && verifier.VerifyField(tablePos, 176 /*AZIMUTH_MEASURED*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 178 /*ELEVATION_MEASURED*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 180 /*RANGE_MEASURED*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 182 /*RANGERATE_MEASURED*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 184 /*RA_MEASURED*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 186 /*DECLINATION_MEASURED*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
