// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Publish Notification Message
public struct PNM : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static PNM GetRootAsPNM(ByteBuffer _bb) { return GetRootAsPNM(_bb, new PNM()); }
  public static PNM GetRootAsPNM(ByteBuffer _bb, PNM obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PNM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unencrypted PNM Details
  /// This field contains the details of the Publish Notification Message without encryption.
  public Detail? FILE { get { int o = __p.__offset(4); return o != 0 ? (Detail?)(new Detail()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Encrypted PNM Details
  /// This field contains the details of the Publish Notification Message with encryption.
  public Detail? FILE_ENCRYPTED { get { int o = __p.__offset(6); return o != 0 ? (Detail?)(new Detail()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<PNM> CreatePNM(FlatBufferBuilder builder,
      Offset<Detail> FILEOffset = default(Offset<Detail>),
      Offset<Detail> FILE_ENCRYPTEDOffset = default(Offset<Detail>)) {
    builder.StartTable(2);
    PNM.AddFILE_ENCRYPTED(builder, FILE_ENCRYPTEDOffset);
    PNM.AddFILE(builder, FILEOffset);
    return PNM.EndPNM(builder);
  }

  public static void StartPNM(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFILE(FlatBufferBuilder builder, Offset<Detail> FILEOffset) { builder.AddOffset(0, FILEOffset.Value, 0); }
  public static void AddFILE_ENCRYPTED(FlatBufferBuilder builder, Offset<Detail> FILE_ENCRYPTEDOffset) { builder.AddOffset(1, FILE_ENCRYPTEDOffset.Value, 0); }
  public static Offset<PNM> EndPNM(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PNM>(o);
  }
  public PNMT UnPack() {
    var _o = new PNMT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PNMT _o) {
    _o.FILE = this.FILE.HasValue ? this.FILE.Value.UnPack() : null;
    _o.FILE_ENCRYPTED = this.FILE_ENCRYPTED.HasValue ? this.FILE_ENCRYPTED.Value.UnPack() : null;
  }
  public static Offset<PNM> Pack(FlatBufferBuilder builder, PNMT _o) {
    if (_o == null) return default(Offset<PNM>);
    var _FILE = _o.FILE == null ? default(Offset<Detail>) : Detail.Pack(builder, _o.FILE);
    var _FILE_ENCRYPTED = _o.FILE_ENCRYPTED == null ? default(Offset<Detail>) : Detail.Pack(builder, _o.FILE_ENCRYPTED);
    return CreatePNM(
      builder,
      _FILE,
      _FILE_ENCRYPTED);
  }
}

public class PNMT
{
  public DetailT FILE { get; set; }
  public DetailT FILE_ENCRYPTED { get; set; }

  public PNMT() {
    this.FILE = null;
    this.FILE_ENCRYPTED = null;
  }
}

