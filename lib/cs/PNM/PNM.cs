// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Publish Notification Message
public struct PNM : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static PNM GetRootAsPNM(ByteBuffer _bb) { return GetRootAsPNM(_bb, new PNM()); }
  public static PNM GetRootAsPNM(ByteBuffer _bb, PNM obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool PNMBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$PNM"); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PNM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// IPFS Content Identifier (CID)
  /// The hash of a file stored on the InterPlanetary File System (IPFS).
  /// Refer to the section on IPFS integration for details.
  public string IPFS_CID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIPFS_CIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIPFS_CIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIPFS_CIDArray() { return __p.__vector_as_array<byte>(4); }
  /// Unique identifier generated from the data provider's public key
  public string KEY_ADDRESS { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKEY_ADDRESSBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetKEY_ADDRESSBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetKEY_ADDRESSArray() { return __p.__vector_as_array<byte>(6); }
  /// SpaceDataStandards 4 Character File Identifier
  public string FILE_IDENTIFIER { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFILE_IDENTIFIERBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetFILE_IDENTIFIERBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetFILE_IDENTIFIERArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<PNM> CreatePNM(FlatBufferBuilder builder,
      StringOffset IPFS_CIDOffset = default(StringOffset),
      StringOffset KEY_ADDRESSOffset = default(StringOffset),
      StringOffset FILE_IDENTIFIEROffset = default(StringOffset)) {
    builder.StartTable(3);
    PNM.AddFILE_IDENTIFIER(builder, FILE_IDENTIFIEROffset);
    PNM.AddKEY_ADDRESS(builder, KEY_ADDRESSOffset);
    PNM.AddIPFS_CID(builder, IPFS_CIDOffset);
    return PNM.EndPNM(builder);
  }

  public static void StartPNM(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddIPFS_CID(FlatBufferBuilder builder, StringOffset IPFS_CIDOffset) { builder.AddOffset(0, IPFS_CIDOffset.Value, 0); }
  public static void AddKEY_ADDRESS(FlatBufferBuilder builder, StringOffset KEY_ADDRESSOffset) { builder.AddOffset(1, KEY_ADDRESSOffset.Value, 0); }
  public static void AddFILE_IDENTIFIER(FlatBufferBuilder builder, StringOffset FILE_IDENTIFIEROffset) { builder.AddOffset(2, FILE_IDENTIFIEROffset.Value, 0); }
  public static Offset<PNM> EndPNM(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PNM>(o);
  }
  public static void FinishPNMBuffer(FlatBufferBuilder builder, Offset<PNM> offset) { builder.Finish(offset.Value, "$PNM"); }
  public static void FinishSizePrefixedPNMBuffer(FlatBufferBuilder builder, Offset<PNM> offset) { builder.FinishSizePrefixed(offset.Value, "$PNM"); }
  public PNMT UnPack() {
    var _o = new PNMT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PNMT _o) {
    _o.IPFS_CID = this.IPFS_CID;
    _o.KEY_ADDRESS = this.KEY_ADDRESS;
    _o.FILE_IDENTIFIER = this.FILE_IDENTIFIER;
  }
  public static Offset<PNM> Pack(FlatBufferBuilder builder, PNMT _o) {
    if (_o == null) return default(Offset<PNM>);
    var _IPFS_CID = _o.IPFS_CID == null ? default(StringOffset) : builder.CreateString(_o.IPFS_CID);
    var _KEY_ADDRESS = _o.KEY_ADDRESS == null ? default(StringOffset) : builder.CreateString(_o.KEY_ADDRESS);
    var _FILE_IDENTIFIER = _o.FILE_IDENTIFIER == null ? default(StringOffset) : builder.CreateString(_o.FILE_IDENTIFIER);
    return CreatePNM(
      builder,
      _IPFS_CID,
      _KEY_ADDRESS,
      _FILE_IDENTIFIER);
  }
}

public class PNMT
{
  public string IPFS_CID { get; set; }
  public string KEY_ADDRESS { get; set; }
  public string FILE_IDENTIFIER { get; set; }

  public PNMT() {
    this.IPFS_CID = null;
    this.KEY_ADDRESS = null;
    this.FILE_IDENTIFIER = null;
  }
  public static PNMT DeserializeFromBinary(byte[] fbBuffer) {
    return PNM.GetRootAsPNM(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    PNM.FinishPNMBuffer(fbb, PNM.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}

