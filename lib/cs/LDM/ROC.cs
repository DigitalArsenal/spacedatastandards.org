// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Rocket Configuration
public struct ROC : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ROC GetRootAsROC(ByteBuffer _bb) { return GetRootAsROC(_bb, new ROC()); }
  public static ROC GetRootAsROC(ByteBuffer _bb, ROC obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool ROCBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$ROC"); }
  public static bool VerifyROC(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("$ROC", false, ROCVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ROC __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Rocket Name
  public string NAME { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNAMEBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNAMEBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNAMEArray() { return __p.__vector_as_array<byte>(4); }
  /// Rocket Family
  public string FAMILY { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFAMILYBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFAMILYBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFAMILYArray() { return __p.__vector_as_array<byte>(6); }
  /// Rocket Variant
  public string VARIANT { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVARIANTBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetVARIANTBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetVARIANTArray() { return __p.__vector_as_array<byte>(8); }
  /// Stages in the Rocket
  public STAGE? STAGES(int j) { int o = __p.__offset(10); return o != 0 ? (STAGE?)(new STAGE()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int STAGESLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Sustainers in the Rocket
  public SUSTAINER? SUSTAINERS(int j) { int o = __p.__offset(12); return o != 0 ? (SUSTAINER?)(new SUSTAINER()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SUSTAINERSLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<ROC> CreateROC(FlatBufferBuilder builder,
      StringOffset NAMEOffset = default(StringOffset),
      StringOffset FAMILYOffset = default(StringOffset),
      StringOffset VARIANTOffset = default(StringOffset),
      VectorOffset STAGESOffset = default(VectorOffset),
      VectorOffset SUSTAINERSOffset = default(VectorOffset)) {
    builder.StartTable(5);
    ROC.AddSUSTAINERS(builder, SUSTAINERSOffset);
    ROC.AddSTAGES(builder, STAGESOffset);
    ROC.AddVARIANT(builder, VARIANTOffset);
    ROC.AddFAMILY(builder, FAMILYOffset);
    ROC.AddNAME(builder, NAMEOffset);
    return ROC.EndROC(builder);
  }

  public static void StartROC(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddNAME(FlatBufferBuilder builder, StringOffset NAMEOffset) { builder.AddOffset(0, NAMEOffset.Value, 0); }
  public static void AddFAMILY(FlatBufferBuilder builder, StringOffset FAMILYOffset) { builder.AddOffset(1, FAMILYOffset.Value, 0); }
  public static void AddVARIANT(FlatBufferBuilder builder, StringOffset VARIANTOffset) { builder.AddOffset(2, VARIANTOffset.Value, 0); }
  public static void AddSTAGES(FlatBufferBuilder builder, VectorOffset STAGESOffset) { builder.AddOffset(3, STAGESOffset.Value, 0); }
  public static VectorOffset CreateSTAGESVector(FlatBufferBuilder builder, Offset<STAGE>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSTAGESVectorBlock(FlatBufferBuilder builder, Offset<STAGE>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSTAGESVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<STAGE>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSTAGESVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<STAGE>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSTAGESVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSUSTAINERS(FlatBufferBuilder builder, VectorOffset SUSTAINERSOffset) { builder.AddOffset(4, SUSTAINERSOffset.Value, 0); }
  public static VectorOffset CreateSUSTAINERSVector(FlatBufferBuilder builder, Offset<SUSTAINER>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSUSTAINERSVectorBlock(FlatBufferBuilder builder, Offset<SUSTAINER>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSUSTAINERSVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<SUSTAINER>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSUSTAINERSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<SUSTAINER>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSUSTAINERSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ROC> EndROC(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ROC>(o);
  }
  public static void FinishROCBuffer(FlatBufferBuilder builder, Offset<ROC> offset) { builder.Finish(offset.Value, "$ROC"); }
  public static void FinishSizePrefixedROCBuffer(FlatBufferBuilder builder, Offset<ROC> offset) { builder.FinishSizePrefixed(offset.Value, "$ROC"); }
  public ROCT UnPack() {
    var _o = new ROCT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ROCT _o) {
    _o.NAME = this.NAME;
    _o.FAMILY = this.FAMILY;
    _o.VARIANT = this.VARIANT;
    _o.STAGES = new List<STAGET>();
    for (var _j = 0; _j < this.STAGESLength; ++_j) {_o.STAGES.Add(this.STAGES(_j).HasValue ? this.STAGES(_j).Value.UnPack() : null);}
    _o.SUSTAINERS = new List<SUSTAINERT>();
    for (var _j = 0; _j < this.SUSTAINERSLength; ++_j) {_o.SUSTAINERS.Add(this.SUSTAINERS(_j).HasValue ? this.SUSTAINERS(_j).Value.UnPack() : null);}
  }
  public static Offset<ROC> Pack(FlatBufferBuilder builder, ROCT _o) {
    if (_o == null) return default(Offset<ROC>);
    var _NAME = _o.NAME == null ? default(StringOffset) : builder.CreateString(_o.NAME);
    var _FAMILY = _o.FAMILY == null ? default(StringOffset) : builder.CreateString(_o.FAMILY);
    var _VARIANT = _o.VARIANT == null ? default(StringOffset) : builder.CreateString(_o.VARIANT);
    var _STAGES = default(VectorOffset);
    if (_o.STAGES != null) {
      var __STAGES = new Offset<STAGE>[_o.STAGES.Count];
      for (var _j = 0; _j < __STAGES.Length; ++_j) { __STAGES[_j] = STAGE.Pack(builder, _o.STAGES[_j]); }
      _STAGES = CreateSTAGESVector(builder, __STAGES);
    }
    var _SUSTAINERS = default(VectorOffset);
    if (_o.SUSTAINERS != null) {
      var __SUSTAINERS = new Offset<SUSTAINER>[_o.SUSTAINERS.Count];
      for (var _j = 0; _j < __SUSTAINERS.Length; ++_j) { __SUSTAINERS[_j] = SUSTAINER.Pack(builder, _o.SUSTAINERS[_j]); }
      _SUSTAINERS = CreateSUSTAINERSVector(builder, __SUSTAINERS);
    }
    return CreateROC(
      builder,
      _NAME,
      _FAMILY,
      _VARIANT,
      _STAGES,
      _SUSTAINERS);
  }
}

public class ROCT
{
  public string NAME { get; set; }
  public string FAMILY { get; set; }
  public string VARIANT { get; set; }
  public List<STAGET> STAGES { get; set; }
  public List<SUSTAINERT> SUSTAINERS { get; set; }

  public ROCT() {
    this.NAME = null;
    this.FAMILY = null;
    this.VARIANT = null;
    this.STAGES = null;
    this.SUSTAINERS = null;
  }
  public static ROCT DeserializeFromBinary(byte[] fbBuffer) {
    return ROC.GetRootAsROC(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ROC.FinishROCBuffer(fbb, ROC.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class ROCVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*NAME*/, false)
      && verifier.VerifyString(tablePos, 6 /*FAMILY*/, false)
      && verifier.VerifyString(tablePos, 8 /*VARIANT*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*STAGES*/, STAGEVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 12 /*SUSTAINERS*/, SUSTAINERVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
