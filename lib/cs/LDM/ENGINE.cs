// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Engine Details
public struct ENGINE : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static ENGINE GetRootAsENGINE(ByteBuffer _bb) { return GetRootAsENGINE(_bb, new ENGINE()); }
  public static ENGINE GetRootAsENGINE(ByteBuffer _bb, ENGINE obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ENGINE __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Engine Name
  public string ENGINE_NAME { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetENGINE_NAMEBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetENGINE_NAMEBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetENGINE_NAMEArray() { return __p.__vector_as_array<byte>(4); }
  /// Type of Engine
  public ENGINE_TYPE TYPE { get { int o = __p.__offset(6); return o != 0 ? (ENGINE_TYPE)__p.bb.GetSbyte(o + __p.bb_pos) : ENGINE_TYPE.LIQUID; } }
  /// Thrust Produced by the Engine (in Newtons)
  public double THRUST { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<ENGINE> CreateENGINE(FlatBufferBuilder builder,
      StringOffset ENGINE_NAMEOffset = default(StringOffset),
      ENGINE_TYPE TYPE = ENGINE_TYPE.LIQUID,
      double THRUST = 0.0) {
    builder.StartTable(3);
    ENGINE.AddTHRUST(builder, THRUST);
    ENGINE.AddENGINE_NAME(builder, ENGINE_NAMEOffset);
    ENGINE.AddTYPE(builder, TYPE);
    return ENGINE.EndENGINE(builder);
  }

  public static void StartENGINE(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddENGINE_NAME(FlatBufferBuilder builder, StringOffset ENGINE_NAMEOffset) { builder.AddOffset(0, ENGINE_NAMEOffset.Value, 0); }
  public static void AddTYPE(FlatBufferBuilder builder, ENGINE_TYPE TYPE) { builder.AddSbyte(1, (sbyte)TYPE, 0); }
  public static void AddTHRUST(FlatBufferBuilder builder, double THRUST) { builder.AddDouble(2, THRUST, 0.0); }
  public static Offset<ENGINE> EndENGINE(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ENGINE>(o);
  }
  public ENGINET UnPack() {
    var _o = new ENGINET();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ENGINET _o) {
    _o.ENGINE_NAME = this.ENGINE_NAME;
    _o.TYPE = this.TYPE;
    _o.THRUST = this.THRUST;
  }
  public static Offset<ENGINE> Pack(FlatBufferBuilder builder, ENGINET _o) {
    if (_o == null) return default(Offset<ENGINE>);
    var _ENGINE_NAME = _o.ENGINE_NAME == null ? default(StringOffset) : builder.CreateString(_o.ENGINE_NAME);
    return CreateENGINE(
      builder,
      _ENGINE_NAME,
      _o.TYPE,
      _o.THRUST);
  }
}

public class ENGINET
{
  public string ENGINE_NAME { get; set; }
  public ENGINE_TYPE TYPE { get; set; }
  public double THRUST { get; set; }

  public ENGINET() {
    this.ENGINE_NAME = null;
    this.TYPE = ENGINE_TYPE.LIQUID;
    this.THRUST = 0.0;
  }
}

