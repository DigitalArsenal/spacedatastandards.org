// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Launch Data Message
public struct LDM : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static LDM GetRootAsLDM(ByteBuffer _bb) { return GetRootAsLDM(_bb, new LDM()); }
  public static LDM GetRootAsLDM(ByteBuffer _bb, LDM obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool LDMBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$LDM"); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LDM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Launch Site Information
  public SIT? SITE { get { int o = __p.__offset(4); return o != 0 ? (SIT?)(new SIT()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Azimuth at Launch (in Degrees)
  public float AZIMUTH { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// References for Launch Data
  public string REFERENCES { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetREFERENCESBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetREFERENCESBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetREFERENCESArray() { return __p.__vector_as_array<byte>(8); }
  /// Launching Agency Name
  public string AGENCY_NAME { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAGENCY_NAMEBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetAGENCY_NAMEBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetAGENCY_NAMEArray() { return __p.__vector_as_array<byte>(10); }
  /// Points of Contact for Launch
  public UPM? POINTS_OF_CONTACT(int j) { int o = __p.__offset(12); return o != 0 ? (UPM?)(new UPM()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int POINTS_OF_CONTACTLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Operations Points of Contact for Launch
  public UPM? OPERATIONS_POINTS_OF_CONTACT(int j) { int o = __p.__offset(14); return o != 0 ? (UPM?)(new UPM()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OPERATIONS_POINTS_OF_CONTACTLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Net Launch Time (UTC Format)
  public string NET { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNETBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetNETBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetNETArray() { return __p.__vector_as_array<byte>(16); }
  /// Rocket Configuration Details
  public ROC? ROCKET_CONFIGURATION { get { int o = __p.__offset(18); return o != 0 ? (ROC?)(new ROC()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Mission Name
  public string MISSION_NAME { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMISSION_NAMEBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetMISSION_NAMEBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetMISSION_NAMEArray() { return __p.__vector_as_array<byte>(20); }
  /// Description of the Mission
  public string MISSION_DESCRIPTION { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMISSION_DESCRIPTIONBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetMISSION_DESCRIPTIONBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetMISSION_DESCRIPTIONArray() { return __p.__vector_as_array<byte>(22); }
  /// Type of the Mission (e.g., Test Flight, Satellite Deployment)
  public string MISSION_TYPE { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMISSION_TYPEBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetMISSION_TYPEBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetMISSION_TYPEArray() { return __p.__vector_as_array<byte>(24); }
  /// Target Orbit Type (e.g., LEO, GEO)
  public string ORBIT_TYPE { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORBIT_TYPEBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetORBIT_TYPEBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetORBIT_TYPEArray() { return __p.__vector_as_array<byte>(26); }
  /// Weather and Environmental Conditions at Launch
  public string WEATHER_CONDITIONS { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWEATHER_CONDITIONSBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetWEATHER_CONDITIONSBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetWEATHER_CONDITIONSArray() { return __p.__vector_as_array<byte>(28); }
  /// Launch Outcome and Status (e.g., Successful, Failed)
  public string LAUNCH_STATUS { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLAUNCH_STATUSBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetLAUNCH_STATUSBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetLAUNCH_STATUSArray() { return __p.__vector_as_array<byte>(30); }
  /// Webcast URL for the Launch
  public string WEBCAST_URL { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWEBCAST_URLBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetWEBCAST_URLBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetWEBCAST_URLArray() { return __p.__vector_as_array<byte>(32); }
  /// Media Links Related to the Launch
  public string MEDIA_LINKS(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MEDIA_LINKSLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Earliest Possible Launch Times
  public string EARLIEST_LAUNCH_TIMES(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EARLIEST_LAUNCH_TIMESLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Latest Possible Launch Times
  public string LATEST_LAUNCH_TIMES(int j) { int o = __p.__offset(38); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LATEST_LAUNCH_TIMESLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Launch Collision Avoidance Information
  public string LCOLA_WINDOW_CLOSURES(int j) { int o = __p.__offset(40); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LCOLA_WINDOW_CLOSURESLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Payload Information (Catalog Entities)
  public CAT? OBJECTS(int j) { int o = __p.__offset(42); return o != 0 ? (CAT?)(new CAT()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OBJECTSLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Tracking and Collision Avoidance Requirements
  public string TRACKING_REQUIREMENTS(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TRACKING_REQUIREMENTSLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Duration of Collision Avoidance Screen (in Seconds)
  public string COLA_SCREEN_DURATION { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCOLA_SCREEN_DURATIONBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetCOLA_SCREEN_DURATIONBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetCOLA_SCREEN_DURATIONArray() { return __p.__vector_as_array<byte>(46); }
  /// Probability of Collision Threshold (Percentage)
  public string PROBABILITY_OF_COLLISION_THRESHOLD { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPROBABILITY_OF_COLLISION_THRESHOLDBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetPROBABILITY_OF_COLLISION_THRESHOLDBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetPROBABILITY_OF_COLLISION_THRESHOLDArray() { return __p.__vector_as_array<byte>(48); }
  /// Number of Required Collision Avoidance Runs
  public string COLA_RUNS_REQUIRED { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCOLA_RUNS_REQUIREDBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetCOLA_RUNS_REQUIREDBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetCOLA_RUNS_REQUIREDArray() { return __p.__vector_as_array<byte>(50); }
  /// Points of Contact for Collision Avoidance
  public UPM? COLA_POINTS_OF_CONTACT(int j) { int o = __p.__offset(52); return o != 0 ? (UPM?)(new UPM()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int COLA_POINTS_OF_CONTACTLength { get { int o = __p.__offset(52); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Orbital Parameters of the Launch
  public string ORBITAL_PARAMETERS(int j) { int o = __p.__offset(54); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ORBITAL_PARAMETERSLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Burn Out Vectors for the Launch
  public BOV? BURN_OUT_VECTORS(int j) { int o = __p.__offset(56); return o != 0 ? (BOV?)(new BOV()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BURN_OUT_VECTORSLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LDM> CreateLDM(FlatBufferBuilder builder,
      Offset<SIT> SITEOffset = default(Offset<SIT>),
      float AZIMUTH = 0.0f,
      StringOffset REFERENCESOffset = default(StringOffset),
      StringOffset AGENCY_NAMEOffset = default(StringOffset),
      VectorOffset POINTS_OF_CONTACTOffset = default(VectorOffset),
      VectorOffset OPERATIONS_POINTS_OF_CONTACTOffset = default(VectorOffset),
      StringOffset NETOffset = default(StringOffset),
      Offset<ROC> ROCKET_CONFIGURATIONOffset = default(Offset<ROC>),
      StringOffset MISSION_NAMEOffset = default(StringOffset),
      StringOffset MISSION_DESCRIPTIONOffset = default(StringOffset),
      StringOffset MISSION_TYPEOffset = default(StringOffset),
      StringOffset ORBIT_TYPEOffset = default(StringOffset),
      StringOffset WEATHER_CONDITIONSOffset = default(StringOffset),
      StringOffset LAUNCH_STATUSOffset = default(StringOffset),
      StringOffset WEBCAST_URLOffset = default(StringOffset),
      VectorOffset MEDIA_LINKSOffset = default(VectorOffset),
      VectorOffset EARLIEST_LAUNCH_TIMESOffset = default(VectorOffset),
      VectorOffset LATEST_LAUNCH_TIMESOffset = default(VectorOffset),
      VectorOffset LCOLA_WINDOW_CLOSURESOffset = default(VectorOffset),
      VectorOffset OBJECTSOffset = default(VectorOffset),
      VectorOffset TRACKING_REQUIREMENTSOffset = default(VectorOffset),
      StringOffset COLA_SCREEN_DURATIONOffset = default(StringOffset),
      StringOffset PROBABILITY_OF_COLLISION_THRESHOLDOffset = default(StringOffset),
      StringOffset COLA_RUNS_REQUIREDOffset = default(StringOffset),
      VectorOffset COLA_POINTS_OF_CONTACTOffset = default(VectorOffset),
      VectorOffset ORBITAL_PARAMETERSOffset = default(VectorOffset),
      VectorOffset BURN_OUT_VECTORSOffset = default(VectorOffset)) {
    builder.StartTable(27);
    LDM.AddBURN_OUT_VECTORS(builder, BURN_OUT_VECTORSOffset);
    LDM.AddORBITAL_PARAMETERS(builder, ORBITAL_PARAMETERSOffset);
    LDM.AddCOLA_POINTS_OF_CONTACT(builder, COLA_POINTS_OF_CONTACTOffset);
    LDM.AddCOLA_RUNS_REQUIRED(builder, COLA_RUNS_REQUIREDOffset);
    LDM.AddPROBABILITY_OF_COLLISION_THRESHOLD(builder, PROBABILITY_OF_COLLISION_THRESHOLDOffset);
    LDM.AddCOLA_SCREEN_DURATION(builder, COLA_SCREEN_DURATIONOffset);
    LDM.AddTRACKING_REQUIREMENTS(builder, TRACKING_REQUIREMENTSOffset);
    LDM.AddOBJECTS(builder, OBJECTSOffset);
    LDM.AddLCOLA_WINDOW_CLOSURES(builder, LCOLA_WINDOW_CLOSURESOffset);
    LDM.AddLATEST_LAUNCH_TIMES(builder, LATEST_LAUNCH_TIMESOffset);
    LDM.AddEARLIEST_LAUNCH_TIMES(builder, EARLIEST_LAUNCH_TIMESOffset);
    LDM.AddMEDIA_LINKS(builder, MEDIA_LINKSOffset);
    LDM.AddWEBCAST_URL(builder, WEBCAST_URLOffset);
    LDM.AddLAUNCH_STATUS(builder, LAUNCH_STATUSOffset);
    LDM.AddWEATHER_CONDITIONS(builder, WEATHER_CONDITIONSOffset);
    LDM.AddORBIT_TYPE(builder, ORBIT_TYPEOffset);
    LDM.AddMISSION_TYPE(builder, MISSION_TYPEOffset);
    LDM.AddMISSION_DESCRIPTION(builder, MISSION_DESCRIPTIONOffset);
    LDM.AddMISSION_NAME(builder, MISSION_NAMEOffset);
    LDM.AddROCKET_CONFIGURATION(builder, ROCKET_CONFIGURATIONOffset);
    LDM.AddNET(builder, NETOffset);
    LDM.AddOPERATIONS_POINTS_OF_CONTACT(builder, OPERATIONS_POINTS_OF_CONTACTOffset);
    LDM.AddPOINTS_OF_CONTACT(builder, POINTS_OF_CONTACTOffset);
    LDM.AddAGENCY_NAME(builder, AGENCY_NAMEOffset);
    LDM.AddREFERENCES(builder, REFERENCESOffset);
    LDM.AddAZIMUTH(builder, AZIMUTH);
    LDM.AddSITE(builder, SITEOffset);
    return LDM.EndLDM(builder);
  }

  public static void StartLDM(FlatBufferBuilder builder) { builder.StartTable(27); }
  public static void AddSITE(FlatBufferBuilder builder, Offset<SIT> SITEOffset) { builder.AddOffset(0, SITEOffset.Value, 0); }
  public static void AddAZIMUTH(FlatBufferBuilder builder, float AZIMUTH) { builder.AddFloat(1, AZIMUTH, 0.0f); }
  public static void AddREFERENCES(FlatBufferBuilder builder, StringOffset REFERENCESOffset) { builder.AddOffset(2, REFERENCESOffset.Value, 0); }
  public static void AddAGENCY_NAME(FlatBufferBuilder builder, StringOffset AGENCY_NAMEOffset) { builder.AddOffset(3, AGENCY_NAMEOffset.Value, 0); }
  public static void AddPOINTS_OF_CONTACT(FlatBufferBuilder builder, VectorOffset POINTS_OF_CONTACTOffset) { builder.AddOffset(4, POINTS_OF_CONTACTOffset.Value, 0); }
  public static VectorOffset CreatePOINTS_OF_CONTACTVector(FlatBufferBuilder builder, Offset<UPM>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePOINTS_OF_CONTACTVectorBlock(FlatBufferBuilder builder, Offset<UPM>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePOINTS_OF_CONTACTVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<UPM>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePOINTS_OF_CONTACTVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<UPM>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPOINTS_OF_CONTACTVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOPERATIONS_POINTS_OF_CONTACT(FlatBufferBuilder builder, VectorOffset OPERATIONS_POINTS_OF_CONTACTOffset) { builder.AddOffset(5, OPERATIONS_POINTS_OF_CONTACTOffset.Value, 0); }
  public static VectorOffset CreateOPERATIONS_POINTS_OF_CONTACTVector(FlatBufferBuilder builder, Offset<UPM>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOPERATIONS_POINTS_OF_CONTACTVectorBlock(FlatBufferBuilder builder, Offset<UPM>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOPERATIONS_POINTS_OF_CONTACTVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<UPM>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOPERATIONS_POINTS_OF_CONTACTVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<UPM>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOPERATIONS_POINTS_OF_CONTACTVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNET(FlatBufferBuilder builder, StringOffset NETOffset) { builder.AddOffset(6, NETOffset.Value, 0); }
  public static void AddROCKET_CONFIGURATION(FlatBufferBuilder builder, Offset<ROC> ROCKET_CONFIGURATIONOffset) { builder.AddOffset(7, ROCKET_CONFIGURATIONOffset.Value, 0); }
  public static void AddMISSION_NAME(FlatBufferBuilder builder, StringOffset MISSION_NAMEOffset) { builder.AddOffset(8, MISSION_NAMEOffset.Value, 0); }
  public static void AddMISSION_DESCRIPTION(FlatBufferBuilder builder, StringOffset MISSION_DESCRIPTIONOffset) { builder.AddOffset(9, MISSION_DESCRIPTIONOffset.Value, 0); }
  public static void AddMISSION_TYPE(FlatBufferBuilder builder, StringOffset MISSION_TYPEOffset) { builder.AddOffset(10, MISSION_TYPEOffset.Value, 0); }
  public static void AddORBIT_TYPE(FlatBufferBuilder builder, StringOffset ORBIT_TYPEOffset) { builder.AddOffset(11, ORBIT_TYPEOffset.Value, 0); }
  public static void AddWEATHER_CONDITIONS(FlatBufferBuilder builder, StringOffset WEATHER_CONDITIONSOffset) { builder.AddOffset(12, WEATHER_CONDITIONSOffset.Value, 0); }
  public static void AddLAUNCH_STATUS(FlatBufferBuilder builder, StringOffset LAUNCH_STATUSOffset) { builder.AddOffset(13, LAUNCH_STATUSOffset.Value, 0); }
  public static void AddWEBCAST_URL(FlatBufferBuilder builder, StringOffset WEBCAST_URLOffset) { builder.AddOffset(14, WEBCAST_URLOffset.Value, 0); }
  public static void AddMEDIA_LINKS(FlatBufferBuilder builder, VectorOffset MEDIA_LINKSOffset) { builder.AddOffset(15, MEDIA_LINKSOffset.Value, 0); }
  public static VectorOffset CreateMEDIA_LINKSVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMEDIA_LINKSVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMEDIA_LINKSVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMEDIA_LINKSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMEDIA_LINKSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEARLIEST_LAUNCH_TIMES(FlatBufferBuilder builder, VectorOffset EARLIEST_LAUNCH_TIMESOffset) { builder.AddOffset(16, EARLIEST_LAUNCH_TIMESOffset.Value, 0); }
  public static VectorOffset CreateEARLIEST_LAUNCH_TIMESVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEARLIEST_LAUNCH_TIMESVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEARLIEST_LAUNCH_TIMESVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEARLIEST_LAUNCH_TIMESVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEARLIEST_LAUNCH_TIMESVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLATEST_LAUNCH_TIMES(FlatBufferBuilder builder, VectorOffset LATEST_LAUNCH_TIMESOffset) { builder.AddOffset(17, LATEST_LAUNCH_TIMESOffset.Value, 0); }
  public static VectorOffset CreateLATEST_LAUNCH_TIMESVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLATEST_LAUNCH_TIMESVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLATEST_LAUNCH_TIMESVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLATEST_LAUNCH_TIMESVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLATEST_LAUNCH_TIMESVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLCOLA_WINDOW_CLOSURES(FlatBufferBuilder builder, VectorOffset LCOLA_WINDOW_CLOSURESOffset) { builder.AddOffset(18, LCOLA_WINDOW_CLOSURESOffset.Value, 0); }
  public static VectorOffset CreateLCOLA_WINDOW_CLOSURESVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLCOLA_WINDOW_CLOSURESVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLCOLA_WINDOW_CLOSURESVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLCOLA_WINDOW_CLOSURESVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLCOLA_WINDOW_CLOSURESVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOBJECTS(FlatBufferBuilder builder, VectorOffset OBJECTSOffset) { builder.AddOffset(19, OBJECTSOffset.Value, 0); }
  public static VectorOffset CreateOBJECTSVector(FlatBufferBuilder builder, Offset<CAT>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOBJECTSVectorBlock(FlatBufferBuilder builder, Offset<CAT>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOBJECTSVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<CAT>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOBJECTSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<CAT>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOBJECTSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTRACKING_REQUIREMENTS(FlatBufferBuilder builder, VectorOffset TRACKING_REQUIREMENTSOffset) { builder.AddOffset(20, TRACKING_REQUIREMENTSOffset.Value, 0); }
  public static VectorOffset CreateTRACKING_REQUIREMENTSVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTRACKING_REQUIREMENTSVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTRACKING_REQUIREMENTSVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTRACKING_REQUIREMENTSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTRACKING_REQUIREMENTSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCOLA_SCREEN_DURATION(FlatBufferBuilder builder, StringOffset COLA_SCREEN_DURATIONOffset) { builder.AddOffset(21, COLA_SCREEN_DURATIONOffset.Value, 0); }
  public static void AddPROBABILITY_OF_COLLISION_THRESHOLD(FlatBufferBuilder builder, StringOffset PROBABILITY_OF_COLLISION_THRESHOLDOffset) { builder.AddOffset(22, PROBABILITY_OF_COLLISION_THRESHOLDOffset.Value, 0); }
  public static void AddCOLA_RUNS_REQUIRED(FlatBufferBuilder builder, StringOffset COLA_RUNS_REQUIREDOffset) { builder.AddOffset(23, COLA_RUNS_REQUIREDOffset.Value, 0); }
  public static void AddCOLA_POINTS_OF_CONTACT(FlatBufferBuilder builder, VectorOffset COLA_POINTS_OF_CONTACTOffset) { builder.AddOffset(24, COLA_POINTS_OF_CONTACTOffset.Value, 0); }
  public static VectorOffset CreateCOLA_POINTS_OF_CONTACTVector(FlatBufferBuilder builder, Offset<UPM>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCOLA_POINTS_OF_CONTACTVectorBlock(FlatBufferBuilder builder, Offset<UPM>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCOLA_POINTS_OF_CONTACTVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<UPM>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCOLA_POINTS_OF_CONTACTVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<UPM>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCOLA_POINTS_OF_CONTACTVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddORBITAL_PARAMETERS(FlatBufferBuilder builder, VectorOffset ORBITAL_PARAMETERSOffset) { builder.AddOffset(25, ORBITAL_PARAMETERSOffset.Value, 0); }
  public static VectorOffset CreateORBITAL_PARAMETERSVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateORBITAL_PARAMETERSVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateORBITAL_PARAMETERSVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateORBITAL_PARAMETERSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartORBITAL_PARAMETERSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBURN_OUT_VECTORS(FlatBufferBuilder builder, VectorOffset BURN_OUT_VECTORSOffset) { builder.AddOffset(26, BURN_OUT_VECTORSOffset.Value, 0); }
  public static VectorOffset CreateBURN_OUT_VECTORSVector(FlatBufferBuilder builder, Offset<BOV>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBURN_OUT_VECTORSVectorBlock(FlatBufferBuilder builder, Offset<BOV>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBURN_OUT_VECTORSVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<BOV>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBURN_OUT_VECTORSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<BOV>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBURN_OUT_VECTORSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LDM> EndLDM(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LDM>(o);
  }
  public static void FinishLDMBuffer(FlatBufferBuilder builder, Offset<LDM> offset) { builder.Finish(offset.Value, "$LDM"); }
  public static void FinishSizePrefixedLDMBuffer(FlatBufferBuilder builder, Offset<LDM> offset) { builder.FinishSizePrefixed(offset.Value, "$LDM"); }
  public LDMT UnPack() {
    var _o = new LDMT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LDMT _o) {
    _o.SITE = this.SITE.HasValue ? this.SITE.Value.UnPack() : null;
    _o.AZIMUTH = this.AZIMUTH;
    _o.REFERENCES = this.REFERENCES;
    _o.AGENCY_NAME = this.AGENCY_NAME;
    _o.POINTS_OF_CONTACT = new List<UPMT>();
    for (var _j = 0; _j < this.POINTS_OF_CONTACTLength; ++_j) {_o.POINTS_OF_CONTACT.Add(this.POINTS_OF_CONTACT(_j).HasValue ? this.POINTS_OF_CONTACT(_j).Value.UnPack() : null);}
    _o.OPERATIONS_POINTS_OF_CONTACT = new List<UPMT>();
    for (var _j = 0; _j < this.OPERATIONS_POINTS_OF_CONTACTLength; ++_j) {_o.OPERATIONS_POINTS_OF_CONTACT.Add(this.OPERATIONS_POINTS_OF_CONTACT(_j).HasValue ? this.OPERATIONS_POINTS_OF_CONTACT(_j).Value.UnPack() : null);}
    _o.NET = this.NET;
    _o.ROCKET_CONFIGURATION = this.ROCKET_CONFIGURATION.HasValue ? this.ROCKET_CONFIGURATION.Value.UnPack() : null;
    _o.MISSION_NAME = this.MISSION_NAME;
    _o.MISSION_DESCRIPTION = this.MISSION_DESCRIPTION;
    _o.MISSION_TYPE = this.MISSION_TYPE;
    _o.ORBIT_TYPE = this.ORBIT_TYPE;
    _o.WEATHER_CONDITIONS = this.WEATHER_CONDITIONS;
    _o.LAUNCH_STATUS = this.LAUNCH_STATUS;
    _o.WEBCAST_URL = this.WEBCAST_URL;
    _o.MEDIA_LINKS = new List<string>();
    for (var _j = 0; _j < this.MEDIA_LINKSLength; ++_j) {_o.MEDIA_LINKS.Add(this.MEDIA_LINKS(_j));}
    _o.EARLIEST_LAUNCH_TIMES = new List<string>();
    for (var _j = 0; _j < this.EARLIEST_LAUNCH_TIMESLength; ++_j) {_o.EARLIEST_LAUNCH_TIMES.Add(this.EARLIEST_LAUNCH_TIMES(_j));}
    _o.LATEST_LAUNCH_TIMES = new List<string>();
    for (var _j = 0; _j < this.LATEST_LAUNCH_TIMESLength; ++_j) {_o.LATEST_LAUNCH_TIMES.Add(this.LATEST_LAUNCH_TIMES(_j));}
    _o.LCOLA_WINDOW_CLOSURES = new List<string>();
    for (var _j = 0; _j < this.LCOLA_WINDOW_CLOSURESLength; ++_j) {_o.LCOLA_WINDOW_CLOSURES.Add(this.LCOLA_WINDOW_CLOSURES(_j));}
    _o.OBJECTS = new List<CATT>();
    for (var _j = 0; _j < this.OBJECTSLength; ++_j) {_o.OBJECTS.Add(this.OBJECTS(_j).HasValue ? this.OBJECTS(_j).Value.UnPack() : null);}
    _o.TRACKING_REQUIREMENTS = new List<string>();
    for (var _j = 0; _j < this.TRACKING_REQUIREMENTSLength; ++_j) {_o.TRACKING_REQUIREMENTS.Add(this.TRACKING_REQUIREMENTS(_j));}
    _o.COLA_SCREEN_DURATION = this.COLA_SCREEN_DURATION;
    _o.PROBABILITY_OF_COLLISION_THRESHOLD = this.PROBABILITY_OF_COLLISION_THRESHOLD;
    _o.COLA_RUNS_REQUIRED = this.COLA_RUNS_REQUIRED;
    _o.COLA_POINTS_OF_CONTACT = new List<UPMT>();
    for (var _j = 0; _j < this.COLA_POINTS_OF_CONTACTLength; ++_j) {_o.COLA_POINTS_OF_CONTACT.Add(this.COLA_POINTS_OF_CONTACT(_j).HasValue ? this.COLA_POINTS_OF_CONTACT(_j).Value.UnPack() : null);}
    _o.ORBITAL_PARAMETERS = new List<string>();
    for (var _j = 0; _j < this.ORBITAL_PARAMETERSLength; ++_j) {_o.ORBITAL_PARAMETERS.Add(this.ORBITAL_PARAMETERS(_j));}
    _o.BURN_OUT_VECTORS = new List<BOVT>();
    for (var _j = 0; _j < this.BURN_OUT_VECTORSLength; ++_j) {_o.BURN_OUT_VECTORS.Add(this.BURN_OUT_VECTORS(_j).HasValue ? this.BURN_OUT_VECTORS(_j).Value.UnPack() : null);}
  }
  public static Offset<LDM> Pack(FlatBufferBuilder builder, LDMT _o) {
    if (_o == null) return default(Offset<LDM>);
    var _SITE = _o.SITE == null ? default(Offset<SIT>) : SIT.Pack(builder, _o.SITE);
    var _REFERENCES = _o.REFERENCES == null ? default(StringOffset) : builder.CreateString(_o.REFERENCES);
    var _AGENCY_NAME = _o.AGENCY_NAME == null ? default(StringOffset) : builder.CreateString(_o.AGENCY_NAME);
    var _POINTS_OF_CONTACT = default(VectorOffset);
    if (_o.POINTS_OF_CONTACT != null) {
      var __POINTS_OF_CONTACT = new Offset<UPM>[_o.POINTS_OF_CONTACT.Count];
      for (var _j = 0; _j < __POINTS_OF_CONTACT.Length; ++_j) { __POINTS_OF_CONTACT[_j] = UPM.Pack(builder, _o.POINTS_OF_CONTACT[_j]); }
      _POINTS_OF_CONTACT = CreatePOINTS_OF_CONTACTVector(builder, __POINTS_OF_CONTACT);
    }
    var _OPERATIONS_POINTS_OF_CONTACT = default(VectorOffset);
    if (_o.OPERATIONS_POINTS_OF_CONTACT != null) {
      var __OPERATIONS_POINTS_OF_CONTACT = new Offset<UPM>[_o.OPERATIONS_POINTS_OF_CONTACT.Count];
      for (var _j = 0; _j < __OPERATIONS_POINTS_OF_CONTACT.Length; ++_j) { __OPERATIONS_POINTS_OF_CONTACT[_j] = UPM.Pack(builder, _o.OPERATIONS_POINTS_OF_CONTACT[_j]); }
      _OPERATIONS_POINTS_OF_CONTACT = CreateOPERATIONS_POINTS_OF_CONTACTVector(builder, __OPERATIONS_POINTS_OF_CONTACT);
    }
    var _NET = _o.NET == null ? default(StringOffset) : builder.CreateString(_o.NET);
    var _ROCKET_CONFIGURATION = _o.ROCKET_CONFIGURATION == null ? default(Offset<ROC>) : ROC.Pack(builder, _o.ROCKET_CONFIGURATION);
    var _MISSION_NAME = _o.MISSION_NAME == null ? default(StringOffset) : builder.CreateString(_o.MISSION_NAME);
    var _MISSION_DESCRIPTION = _o.MISSION_DESCRIPTION == null ? default(StringOffset) : builder.CreateString(_o.MISSION_DESCRIPTION);
    var _MISSION_TYPE = _o.MISSION_TYPE == null ? default(StringOffset) : builder.CreateString(_o.MISSION_TYPE);
    var _ORBIT_TYPE = _o.ORBIT_TYPE == null ? default(StringOffset) : builder.CreateString(_o.ORBIT_TYPE);
    var _WEATHER_CONDITIONS = _o.WEATHER_CONDITIONS == null ? default(StringOffset) : builder.CreateString(_o.WEATHER_CONDITIONS);
    var _LAUNCH_STATUS = _o.LAUNCH_STATUS == null ? default(StringOffset) : builder.CreateString(_o.LAUNCH_STATUS);
    var _WEBCAST_URL = _o.WEBCAST_URL == null ? default(StringOffset) : builder.CreateString(_o.WEBCAST_URL);
    var _MEDIA_LINKS = default(VectorOffset);
    if (_o.MEDIA_LINKS != null) {
      var __MEDIA_LINKS = new StringOffset[_o.MEDIA_LINKS.Count];
      for (var _j = 0; _j < __MEDIA_LINKS.Length; ++_j) { __MEDIA_LINKS[_j] = builder.CreateString(_o.MEDIA_LINKS[_j]); }
      _MEDIA_LINKS = CreateMEDIA_LINKSVector(builder, __MEDIA_LINKS);
    }
    var _EARLIEST_LAUNCH_TIMES = default(VectorOffset);
    if (_o.EARLIEST_LAUNCH_TIMES != null) {
      var __EARLIEST_LAUNCH_TIMES = new StringOffset[_o.EARLIEST_LAUNCH_TIMES.Count];
      for (var _j = 0; _j < __EARLIEST_LAUNCH_TIMES.Length; ++_j) { __EARLIEST_LAUNCH_TIMES[_j] = builder.CreateString(_o.EARLIEST_LAUNCH_TIMES[_j]); }
      _EARLIEST_LAUNCH_TIMES = CreateEARLIEST_LAUNCH_TIMESVector(builder, __EARLIEST_LAUNCH_TIMES);
    }
    var _LATEST_LAUNCH_TIMES = default(VectorOffset);
    if (_o.LATEST_LAUNCH_TIMES != null) {
      var __LATEST_LAUNCH_TIMES = new StringOffset[_o.LATEST_LAUNCH_TIMES.Count];
      for (var _j = 0; _j < __LATEST_LAUNCH_TIMES.Length; ++_j) { __LATEST_LAUNCH_TIMES[_j] = builder.CreateString(_o.LATEST_LAUNCH_TIMES[_j]); }
      _LATEST_LAUNCH_TIMES = CreateLATEST_LAUNCH_TIMESVector(builder, __LATEST_LAUNCH_TIMES);
    }
    var _LCOLA_WINDOW_CLOSURES = default(VectorOffset);
    if (_o.LCOLA_WINDOW_CLOSURES != null) {
      var __LCOLA_WINDOW_CLOSURES = new StringOffset[_o.LCOLA_WINDOW_CLOSURES.Count];
      for (var _j = 0; _j < __LCOLA_WINDOW_CLOSURES.Length; ++_j) { __LCOLA_WINDOW_CLOSURES[_j] = builder.CreateString(_o.LCOLA_WINDOW_CLOSURES[_j]); }
      _LCOLA_WINDOW_CLOSURES = CreateLCOLA_WINDOW_CLOSURESVector(builder, __LCOLA_WINDOW_CLOSURES);
    }
    var _OBJECTS = default(VectorOffset);
    if (_o.OBJECTS != null) {
      var __OBJECTS = new Offset<CAT>[_o.OBJECTS.Count];
      for (var _j = 0; _j < __OBJECTS.Length; ++_j) { __OBJECTS[_j] = CAT.Pack(builder, _o.OBJECTS[_j]); }
      _OBJECTS = CreateOBJECTSVector(builder, __OBJECTS);
    }
    var _TRACKING_REQUIREMENTS = default(VectorOffset);
    if (_o.TRACKING_REQUIREMENTS != null) {
      var __TRACKING_REQUIREMENTS = new StringOffset[_o.TRACKING_REQUIREMENTS.Count];
      for (var _j = 0; _j < __TRACKING_REQUIREMENTS.Length; ++_j) { __TRACKING_REQUIREMENTS[_j] = builder.CreateString(_o.TRACKING_REQUIREMENTS[_j]); }
      _TRACKING_REQUIREMENTS = CreateTRACKING_REQUIREMENTSVector(builder, __TRACKING_REQUIREMENTS);
    }
    var _COLA_SCREEN_DURATION = _o.COLA_SCREEN_DURATION == null ? default(StringOffset) : builder.CreateString(_o.COLA_SCREEN_DURATION);
    var _PROBABILITY_OF_COLLISION_THRESHOLD = _o.PROBABILITY_OF_COLLISION_THRESHOLD == null ? default(StringOffset) : builder.CreateString(_o.PROBABILITY_OF_COLLISION_THRESHOLD);
    var _COLA_RUNS_REQUIRED = _o.COLA_RUNS_REQUIRED == null ? default(StringOffset) : builder.CreateString(_o.COLA_RUNS_REQUIRED);
    var _COLA_POINTS_OF_CONTACT = default(VectorOffset);
    if (_o.COLA_POINTS_OF_CONTACT != null) {
      var __COLA_POINTS_OF_CONTACT = new Offset<UPM>[_o.COLA_POINTS_OF_CONTACT.Count];
      for (var _j = 0; _j < __COLA_POINTS_OF_CONTACT.Length; ++_j) { __COLA_POINTS_OF_CONTACT[_j] = UPM.Pack(builder, _o.COLA_POINTS_OF_CONTACT[_j]); }
      _COLA_POINTS_OF_CONTACT = CreateCOLA_POINTS_OF_CONTACTVector(builder, __COLA_POINTS_OF_CONTACT);
    }
    var _ORBITAL_PARAMETERS = default(VectorOffset);
    if (_o.ORBITAL_PARAMETERS != null) {
      var __ORBITAL_PARAMETERS = new StringOffset[_o.ORBITAL_PARAMETERS.Count];
      for (var _j = 0; _j < __ORBITAL_PARAMETERS.Length; ++_j) { __ORBITAL_PARAMETERS[_j] = builder.CreateString(_o.ORBITAL_PARAMETERS[_j]); }
      _ORBITAL_PARAMETERS = CreateORBITAL_PARAMETERSVector(builder, __ORBITAL_PARAMETERS);
    }
    var _BURN_OUT_VECTORS = default(VectorOffset);
    if (_o.BURN_OUT_VECTORS != null) {
      var __BURN_OUT_VECTORS = new Offset<BOV>[_o.BURN_OUT_VECTORS.Count];
      for (var _j = 0; _j < __BURN_OUT_VECTORS.Length; ++_j) { __BURN_OUT_VECTORS[_j] = BOV.Pack(builder, _o.BURN_OUT_VECTORS[_j]); }
      _BURN_OUT_VECTORS = CreateBURN_OUT_VECTORSVector(builder, __BURN_OUT_VECTORS);
    }
    return CreateLDM(
      builder,
      _SITE,
      _o.AZIMUTH,
      _REFERENCES,
      _AGENCY_NAME,
      _POINTS_OF_CONTACT,
      _OPERATIONS_POINTS_OF_CONTACT,
      _NET,
      _ROCKET_CONFIGURATION,
      _MISSION_NAME,
      _MISSION_DESCRIPTION,
      _MISSION_TYPE,
      _ORBIT_TYPE,
      _WEATHER_CONDITIONS,
      _LAUNCH_STATUS,
      _WEBCAST_URL,
      _MEDIA_LINKS,
      _EARLIEST_LAUNCH_TIMES,
      _LATEST_LAUNCH_TIMES,
      _LCOLA_WINDOW_CLOSURES,
      _OBJECTS,
      _TRACKING_REQUIREMENTS,
      _COLA_SCREEN_DURATION,
      _PROBABILITY_OF_COLLISION_THRESHOLD,
      _COLA_RUNS_REQUIRED,
      _COLA_POINTS_OF_CONTACT,
      _ORBITAL_PARAMETERS,
      _BURN_OUT_VECTORS);
  }
}

public class LDMT
{
  public SITT SITE { get; set; }
  public float AZIMUTH { get; set; }
  public string REFERENCES { get; set; }
  public string AGENCY_NAME { get; set; }
  public List<UPMT> POINTS_OF_CONTACT { get; set; }
  public List<UPMT> OPERATIONS_POINTS_OF_CONTACT { get; set; }
  public string NET { get; set; }
  public ROCT ROCKET_CONFIGURATION { get; set; }
  public string MISSION_NAME { get; set; }
  public string MISSION_DESCRIPTION { get; set; }
  public string MISSION_TYPE { get; set; }
  public string ORBIT_TYPE { get; set; }
  public string WEATHER_CONDITIONS { get; set; }
  public string LAUNCH_STATUS { get; set; }
  public string WEBCAST_URL { get; set; }
  public List<string> MEDIA_LINKS { get; set; }
  public List<string> EARLIEST_LAUNCH_TIMES { get; set; }
  public List<string> LATEST_LAUNCH_TIMES { get; set; }
  public List<string> LCOLA_WINDOW_CLOSURES { get; set; }
  public List<CATT> OBJECTS { get; set; }
  public List<string> TRACKING_REQUIREMENTS { get; set; }
  public string COLA_SCREEN_DURATION { get; set; }
  public string PROBABILITY_OF_COLLISION_THRESHOLD { get; set; }
  public string COLA_RUNS_REQUIRED { get; set; }
  public List<UPMT> COLA_POINTS_OF_CONTACT { get; set; }
  public List<string> ORBITAL_PARAMETERS { get; set; }
  public List<BOVT> BURN_OUT_VECTORS { get; set; }

  public LDMT() {
    this.SITE = null;
    this.AZIMUTH = 0.0f;
    this.REFERENCES = null;
    this.AGENCY_NAME = null;
    this.POINTS_OF_CONTACT = null;
    this.OPERATIONS_POINTS_OF_CONTACT = null;
    this.NET = null;
    this.ROCKET_CONFIGURATION = null;
    this.MISSION_NAME = null;
    this.MISSION_DESCRIPTION = null;
    this.MISSION_TYPE = null;
    this.ORBIT_TYPE = null;
    this.WEATHER_CONDITIONS = null;
    this.LAUNCH_STATUS = null;
    this.WEBCAST_URL = null;
    this.MEDIA_LINKS = null;
    this.EARLIEST_LAUNCH_TIMES = null;
    this.LATEST_LAUNCH_TIMES = null;
    this.LCOLA_WINDOW_CLOSURES = null;
    this.OBJECTS = null;
    this.TRACKING_REQUIREMENTS = null;
    this.COLA_SCREEN_DURATION = null;
    this.PROBABILITY_OF_COLLISION_THRESHOLD = null;
    this.COLA_RUNS_REQUIRED = null;
    this.COLA_POINTS_OF_CONTACT = null;
    this.ORBITAL_PARAMETERS = null;
    this.BURN_OUT_VECTORS = null;
  }
  public static LDMT DeserializeFromBinary(byte[] fbBuffer) {
    return LDM.GetRootAsLDM(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    LDM.FinishLDMBuffer(fbb, LDM.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}

