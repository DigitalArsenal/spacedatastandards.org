// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Collection of MPE Records
public struct MPECOLLECTION : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MPECOLLECTION GetRootAsMPECOLLECTION(ByteBuffer _bb) { return GetRootAsMPECOLLECTION(_bb, new MPECOLLECTION()); }
  public static MPECOLLECTION GetRootAsMPECOLLECTION(ByteBuffer _bb, MPECOLLECTION obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MPECOLLECTION __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Default value = U
  public string CLASSIFICATION_TYPE { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCLASSIFICATION_TYPEBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCLASSIFICATION_TYPEBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCLASSIFICATION_TYPEArray() { return __p.__vector_as_array<byte>(4); }
  /// Name of the reference frame (TEME, EME2000, etc.)
  public referenceFrame REF_FRAME { get { int o = __p.__offset(6); return o != 0 ? (referenceFrame)__p.bb.GetSbyte(o + __p.bb_pos) : referenceFrame.TEME; } }
  /// Epoch of the Reference Frame. (UNIX TimeStamp)
  public double REF_FRAME_EPOCH { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Time system used for the orbit state and covariance matrix. (UTC)
  public timeSystem TIME_SYSTEM { get { int o = __p.__offset(10); return o != 0 ? (timeSystem)__p.bb.GetSbyte(o + __p.bb_pos) : timeSystem.UTC; } }
  /// Description of the Mean Element Theory. (SGP4,DSST,USM)
  public meanElementTheory MEAN_ELEMENT_THEORY { get { int o = __p.__offset(12); return o != 0 ? (meanElementTheory)__p.bb.GetSbyte(o + __p.bb_pos) : meanElementTheory.SGP4; } }
  /// Array of MPE records
  public MPE? RECORDS(int j) { int o = __p.__offset(14); return o != 0 ? (MPE?)(new MPE()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RECORDSLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<MPECOLLECTION> CreateMPECOLLECTION(FlatBufferBuilder builder,
      StringOffset CLASSIFICATION_TYPEOffset = default(StringOffset),
      referenceFrame REF_FRAME = referenceFrame.TEME,
      double REF_FRAME_EPOCH = 0.0,
      timeSystem TIME_SYSTEM = timeSystem.UTC,
      meanElementTheory MEAN_ELEMENT_THEORY = meanElementTheory.SGP4,
      VectorOffset RECORDSOffset = default(VectorOffset)) {
    builder.StartTable(6);
    MPECOLLECTION.AddREF_FRAME_EPOCH(builder, REF_FRAME_EPOCH);
    MPECOLLECTION.AddRECORDS(builder, RECORDSOffset);
    MPECOLLECTION.AddCLASSIFICATION_TYPE(builder, CLASSIFICATION_TYPEOffset);
    MPECOLLECTION.AddMEAN_ELEMENT_THEORY(builder, MEAN_ELEMENT_THEORY);
    MPECOLLECTION.AddTIME_SYSTEM(builder, TIME_SYSTEM);
    MPECOLLECTION.AddREF_FRAME(builder, REF_FRAME);
    return MPECOLLECTION.EndMPECOLLECTION(builder);
  }

  public static void StartMPECOLLECTION(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddCLASSIFICATION_TYPE(FlatBufferBuilder builder, StringOffset CLASSIFICATION_TYPEOffset) { builder.AddOffset(0, CLASSIFICATION_TYPEOffset.Value, 0); }
  public static void AddREF_FRAME(FlatBufferBuilder builder, referenceFrame REF_FRAME) { builder.AddSbyte(1, (sbyte)REF_FRAME, 9); }
  public static void AddREF_FRAME_EPOCH(FlatBufferBuilder builder, double REF_FRAME_EPOCH) { builder.AddDouble(2, REF_FRAME_EPOCH, 0.0); }
  public static void AddTIME_SYSTEM(FlatBufferBuilder builder, timeSystem TIME_SYSTEM) { builder.AddSbyte(3, (sbyte)TIME_SYSTEM, 11); }
  public static void AddMEAN_ELEMENT_THEORY(FlatBufferBuilder builder, meanElementTheory MEAN_ELEMENT_THEORY) { builder.AddSbyte(4, (sbyte)MEAN_ELEMENT_THEORY, 0); }
  public static void AddRECORDS(FlatBufferBuilder builder, VectorOffset RECORDSOffset) { builder.AddOffset(5, RECORDSOffset.Value, 0); }
  public static VectorOffset CreateRECORDSVector(FlatBufferBuilder builder, Offset<MPE>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRECORDSVectorBlock(FlatBufferBuilder builder, Offset<MPE>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRECORDSVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<MPE>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRECORDSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<MPE>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRECORDSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MPECOLLECTION> EndMPECOLLECTION(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MPECOLLECTION>(o);
  }
  public MPECOLLECTIONT UnPack() {
    var _o = new MPECOLLECTIONT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MPECOLLECTIONT _o) {
    _o.CLASSIFICATION_TYPE = this.CLASSIFICATION_TYPE;
    _o.REF_FRAME = this.REF_FRAME;
    _o.REF_FRAME_EPOCH = this.REF_FRAME_EPOCH;
    _o.TIME_SYSTEM = this.TIME_SYSTEM;
    _o.MEAN_ELEMENT_THEORY = this.MEAN_ELEMENT_THEORY;
    _o.RECORDS = new List<MPET>();
    for (var _j = 0; _j < this.RECORDSLength; ++_j) {_o.RECORDS.Add(this.RECORDS(_j).HasValue ? this.RECORDS(_j).Value.UnPack() : null);}
  }
  public static Offset<MPECOLLECTION> Pack(FlatBufferBuilder builder, MPECOLLECTIONT _o) {
    if (_o == null) return default(Offset<MPECOLLECTION>);
    var _CLASSIFICATION_TYPE = _o.CLASSIFICATION_TYPE == null ? default(StringOffset) : builder.CreateString(_o.CLASSIFICATION_TYPE);
    var _RECORDS = default(VectorOffset);
    if (_o.RECORDS != null) {
      var __RECORDS = new Offset<MPE>[_o.RECORDS.Count];
      for (var _j = 0; _j < __RECORDS.Length; ++_j) { __RECORDS[_j] = MPE.Pack(builder, _o.RECORDS[_j]); }
      _RECORDS = CreateRECORDSVector(builder, __RECORDS);
    }
    return CreateMPECOLLECTION(
      builder,
      _CLASSIFICATION_TYPE,
      _o.REF_FRAME,
      _o.REF_FRAME_EPOCH,
      _o.TIME_SYSTEM,
      _o.MEAN_ELEMENT_THEORY,
      _RECORDS);
  }
}

public class MPECOLLECTIONT
{
  public string CLASSIFICATION_TYPE { get; set; }
  public referenceFrame REF_FRAME { get; set; }
  public double REF_FRAME_EPOCH { get; set; }
  public timeSystem TIME_SYSTEM { get; set; }
  public meanElementTheory MEAN_ELEMENT_THEORY { get; set; }
  public List<MPET> RECORDS { get; set; }

  public MPECOLLECTIONT() {
    this.CLASSIFICATION_TYPE = null;
    this.REF_FRAME = referenceFrame.TEME;
    this.REF_FRAME_EPOCH = 0.0;
    this.TIME_SYSTEM = timeSystem.UTC;
    this.MEAN_ELEMENT_THEORY = meanElementTheory.SGP4;
    this.RECORDS = null;
  }
}

