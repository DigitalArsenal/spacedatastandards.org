// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Stage Details
public struct STAGE : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static STAGE GetRootAsSTAGE(ByteBuffer _bb) { return GetRootAsSTAGE(_bb, new STAGE()); }
  public static STAGE GetRootAsSTAGE(ByteBuffer _bb, STAGE obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public STAGE __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Stage Number
  public int STAGE_NUMBER { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Engines Used in This Stage
  public ENGINE? ENGINES(int j) { int o = __p.__offset(6); return o != 0 ? (ENGINE?)(new ENGINE()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ENGINESLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Fuel Type Used in This Stage
  public string FUEL_TYPE { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFUEL_TYPEBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetFUEL_TYPEBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetFUEL_TYPEArray() { return __p.__vector_as_array<byte>(8); }
  /// Thrust Produced by This Stage (in Newtons)
  public double THRUST { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Duration of the Burn (in Seconds)
  public double BURN_DURATION { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<STAGE> CreateSTAGE(FlatBufferBuilder builder,
      int STAGE_NUMBER = 0,
      VectorOffset ENGINESOffset = default(VectorOffset),
      StringOffset FUEL_TYPEOffset = default(StringOffset),
      double THRUST = 0.0,
      double BURN_DURATION = 0.0) {
    builder.StartTable(5);
    STAGE.AddBURN_DURATION(builder, BURN_DURATION);
    STAGE.AddTHRUST(builder, THRUST);
    STAGE.AddFUEL_TYPE(builder, FUEL_TYPEOffset);
    STAGE.AddENGINES(builder, ENGINESOffset);
    STAGE.AddSTAGE_NUMBER(builder, STAGE_NUMBER);
    return STAGE.EndSTAGE(builder);
  }

  public static void StartSTAGE(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddSTAGE_NUMBER(FlatBufferBuilder builder, int STAGE_NUMBER) { builder.AddInt(0, STAGE_NUMBER, 0); }
  public static void AddENGINES(FlatBufferBuilder builder, VectorOffset ENGINESOffset) { builder.AddOffset(1, ENGINESOffset.Value, 0); }
  public static VectorOffset CreateENGINESVector(FlatBufferBuilder builder, Offset<ENGINE>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateENGINESVectorBlock(FlatBufferBuilder builder, Offset<ENGINE>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateENGINESVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<ENGINE>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateENGINESVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<ENGINE>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartENGINESVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFUEL_TYPE(FlatBufferBuilder builder, StringOffset FUEL_TYPEOffset) { builder.AddOffset(2, FUEL_TYPEOffset.Value, 0); }
  public static void AddTHRUST(FlatBufferBuilder builder, double THRUST) { builder.AddDouble(3, THRUST, 0.0); }
  public static void AddBURN_DURATION(FlatBufferBuilder builder, double BURN_DURATION) { builder.AddDouble(4, BURN_DURATION, 0.0); }
  public static Offset<STAGE> EndSTAGE(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<STAGE>(o);
  }
  public STAGET UnPack() {
    var _o = new STAGET();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(STAGET _o) {
    _o.STAGE_NUMBER = this.STAGE_NUMBER;
    _o.ENGINES = new List<ENGINET>();
    for (var _j = 0; _j < this.ENGINESLength; ++_j) {_o.ENGINES.Add(this.ENGINES(_j).HasValue ? this.ENGINES(_j).Value.UnPack() : null);}
    _o.FUEL_TYPE = this.FUEL_TYPE;
    _o.THRUST = this.THRUST;
    _o.BURN_DURATION = this.BURN_DURATION;
  }
  public static Offset<STAGE> Pack(FlatBufferBuilder builder, STAGET _o) {
    if (_o == null) return default(Offset<STAGE>);
    var _ENGINES = default(VectorOffset);
    if (_o.ENGINES != null) {
      var __ENGINES = new Offset<ENGINE>[_o.ENGINES.Count];
      for (var _j = 0; _j < __ENGINES.Length; ++_j) { __ENGINES[_j] = ENGINE.Pack(builder, _o.ENGINES[_j]); }
      _ENGINES = CreateENGINESVector(builder, __ENGINES);
    }
    var _FUEL_TYPE = _o.FUEL_TYPE == null ? default(StringOffset) : builder.CreateString(_o.FUEL_TYPE);
    return CreateSTAGE(
      builder,
      _o.STAGE_NUMBER,
      _ENGINES,
      _FUEL_TYPE,
      _o.THRUST,
      _o.BURN_DURATION);
  }
}

public class STAGET
{
  public int STAGE_NUMBER { get; set; }
  public List<ENGINET> ENGINES { get; set; }
  public string FUEL_TYPE { get; set; }
  public double THRUST { get; set; }
  public double BURN_DURATION { get; set; }

  public STAGET() {
    this.STAGE_NUMBER = 0;
    this.ENGINES = null;
    this.FUEL_TYPE = null;
    this.THRUST = 0.0;
    this.BURN_DURATION = 0.0;
  }
}

