// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Program Description Message
public struct PRG : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static PRG GetRootAsPRG(ByteBuffer _bb) { return GetRootAsPRG(_bb, new PRG()); }
  public static PRG GetRootAsPRG(ByteBuffer _bb, PRG obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool PRGBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$PRG"); }
  public static bool VerifyPRG(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("$PRG", false, PRGVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PRG __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The name of the program
  public string NAME { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNAMEBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNAMEBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNAMEArray() { return __p.__vector_as_array<byte>(4); }
  /// Hierarchical Deterministic (HD) derivation path for the program's key, used in cryptocurrency wallets
  public string HD_KEY_PATH { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHD_KEY_PATHBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetHD_KEY_PATHBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetHD_KEY_PATHArray() { return __p.__vector_as_array<byte>(6); }
  /// Vector of standard message types used by the program
  public string MESSAGE_TYPES(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MESSAGE_TYPESLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Vector of users associated with the program, each user can have assigned message types
  public USR? USERS(int j) { int o = __p.__offset(10); return o != 0 ? (USR?)(new USR()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int USERSLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PRG> CreatePRG(FlatBufferBuilder builder,
      StringOffset NAMEOffset = default(StringOffset),
      StringOffset HD_KEY_PATHOffset = default(StringOffset),
      VectorOffset MESSAGE_TYPESOffset = default(VectorOffset),
      VectorOffset USERSOffset = default(VectorOffset)) {
    builder.StartTable(4);
    PRG.AddUSERS(builder, USERSOffset);
    PRG.AddMESSAGE_TYPES(builder, MESSAGE_TYPESOffset);
    PRG.AddHD_KEY_PATH(builder, HD_KEY_PATHOffset);
    PRG.AddNAME(builder, NAMEOffset);
    return PRG.EndPRG(builder);
  }

  public static void StartPRG(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddNAME(FlatBufferBuilder builder, StringOffset NAMEOffset) { builder.AddOffset(0, NAMEOffset.Value, 0); }
  public static void AddHD_KEY_PATH(FlatBufferBuilder builder, StringOffset HD_KEY_PATHOffset) { builder.AddOffset(1, HD_KEY_PATHOffset.Value, 0); }
  public static void AddMESSAGE_TYPES(FlatBufferBuilder builder, VectorOffset MESSAGE_TYPESOffset) { builder.AddOffset(2, MESSAGE_TYPESOffset.Value, 0); }
  public static VectorOffset CreateMESSAGE_TYPESVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMESSAGE_TYPESVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMESSAGE_TYPESVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMESSAGE_TYPESVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMESSAGE_TYPESVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUSERS(FlatBufferBuilder builder, VectorOffset USERSOffset) { builder.AddOffset(3, USERSOffset.Value, 0); }
  public static VectorOffset CreateUSERSVector(FlatBufferBuilder builder, Offset<USR>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUSERSVectorBlock(FlatBufferBuilder builder, Offset<USR>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUSERSVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<USR>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUSERSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<USR>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUSERSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PRG> EndPRG(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRG>(o);
  }
  public static void FinishPRGBuffer(FlatBufferBuilder builder, Offset<PRG> offset) { builder.Finish(offset.Value, "$PRG"); }
  public static void FinishSizePrefixedPRGBuffer(FlatBufferBuilder builder, Offset<PRG> offset) { builder.FinishSizePrefixed(offset.Value, "$PRG"); }
  public PRGT UnPack() {
    var _o = new PRGT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PRGT _o) {
    _o.NAME = this.NAME;
    _o.HD_KEY_PATH = this.HD_KEY_PATH;
    _o.MESSAGE_TYPES = new List<string>();
    for (var _j = 0; _j < this.MESSAGE_TYPESLength; ++_j) {_o.MESSAGE_TYPES.Add(this.MESSAGE_TYPES(_j));}
    _o.USERS = new List<USRT>();
    for (var _j = 0; _j < this.USERSLength; ++_j) {_o.USERS.Add(this.USERS(_j).HasValue ? this.USERS(_j).Value.UnPack() : null);}
  }
  public static Offset<PRG> Pack(FlatBufferBuilder builder, PRGT _o) {
    if (_o == null) return default(Offset<PRG>);
    var _NAME = _o.NAME == null ? default(StringOffset) : builder.CreateString(_o.NAME);
    var _HD_KEY_PATH = _o.HD_KEY_PATH == null ? default(StringOffset) : builder.CreateString(_o.HD_KEY_PATH);
    var _MESSAGE_TYPES = default(VectorOffset);
    if (_o.MESSAGE_TYPES != null) {
      var __MESSAGE_TYPES = new StringOffset[_o.MESSAGE_TYPES.Count];
      for (var _j = 0; _j < __MESSAGE_TYPES.Length; ++_j) { __MESSAGE_TYPES[_j] = builder.CreateString(_o.MESSAGE_TYPES[_j]); }
      _MESSAGE_TYPES = CreateMESSAGE_TYPESVector(builder, __MESSAGE_TYPES);
    }
    var _USERS = default(VectorOffset);
    if (_o.USERS != null) {
      var __USERS = new Offset<USR>[_o.USERS.Count];
      for (var _j = 0; _j < __USERS.Length; ++_j) { __USERS[_j] = USR.Pack(builder, _o.USERS[_j]); }
      _USERS = CreateUSERSVector(builder, __USERS);
    }
    return CreatePRG(
      builder,
      _NAME,
      _HD_KEY_PATH,
      _MESSAGE_TYPES,
      _USERS);
  }
}

public class PRGT
{
  public string NAME { get; set; }
  public string HD_KEY_PATH { get; set; }
  public List<string> MESSAGE_TYPES { get; set; }
  public List<USRT> USERS { get; set; }

  public PRGT() {
    this.NAME = null;
    this.HD_KEY_PATH = null;
    this.MESSAGE_TYPES = null;
    this.USERS = null;
  }
  public static PRGT DeserializeFromBinary(byte[] fbBuffer) {
    return PRG.GetRootAsPRG(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    PRG.FinishPRGBuffer(fbb, PRG.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class PRGVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*NAME*/, false)
      && verifier.VerifyString(tablePos, 6 /*HD_KEY_PATH*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*MESSAGE_TYPES*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*USERS*/, USRVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
