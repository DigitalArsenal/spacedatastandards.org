// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Orbit Parameter Message
public struct OPM : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static OPM GetRootAsOPM(ByteBuffer _bb) { return GetRootAsOPM(_bb, new OPM()); }
  public static OPM GetRootAsOPM(ByteBuffer _bb, OPM obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyOPM(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, OPMVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OPM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double CCSDS_OMM_VERS { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public string CREATION_DATE { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCREATION_DATEBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCREATION_DATEBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCREATION_DATEArray() { return __p.__vector_as_array<byte>(6); }
  public string ORIGINATOR { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIGINATORBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetORIGINATORBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetORIGINATORArray() { return __p.__vector_as_array<byte>(8); }
  public string OBJECT_NAME { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOBJECT_NAMEBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOBJECT_NAMEBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOBJECT_NAMEArray() { return __p.__vector_as_array<byte>(10); }
  public string OBJECT_ID { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOBJECT_IDBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOBJECT_IDBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOBJECT_IDArray() { return __p.__vector_as_array<byte>(12); }
  public string CENTER_NAME { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCENTER_NAMEBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCENTER_NAMEBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCENTER_NAMEArray() { return __p.__vector_as_array<byte>(14); }
  public string REF_FRAME { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetREF_FRAMEBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetREF_FRAMEBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetREF_FRAMEArray() { return __p.__vector_as_array<byte>(16); }
  public string TIME_SYSTEM { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTIME_SYSTEMBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTIME_SYSTEMBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTIME_SYSTEMArray() { return __p.__vector_as_array<byte>(18); }
  public opmStateVector? STATE_VECTOR { get { int o = __p.__offset(20); return o != 0 ? (opmStateVector?)(new opmStateVector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public keplerianElements? KEPLERIAN_ELEMENTS { get { int o = __p.__offset(22); return o != 0 ? (keplerianElements?)(new keplerianElements()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public equinoctialElements? EQUINOCTIAL_ELEMENTS { get { int o = __p.__offset(24); return o != 0 ? (equinoctialElements?)(new equinoctialElements()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public double GM { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public opmAtmosphericModelData? ATMOSPHERIC_MODEL_DATA { get { int o = __p.__offset(28); return o != 0 ? (opmAtmosphericModelData?)(new opmAtmosphericModelData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public propagatorConfig? PROPAGATOR_SETTINGS { get { int o = __p.__offset(30); return o != 0 ? (propagatorConfig?)(new propagatorConfig()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public opmCovarianceMatrixLine? COVARIANCE_MATRIX(int j) { int o = __p.__offset(32); return o != 0 ? (opmCovarianceMatrixLine?)(new opmCovarianceMatrixLine()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int COVARIANCE_MATRIXLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  public uvwSigmas? UVW_SIGMAS { get { int o = __p.__offset(34); return o != 0 ? (uvwSigmas?)(new uvwSigmas()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public double MASS { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double SOLAR_RAD_AREA { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double SOLAR_RAD_COEFF { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double DRAG_AREA { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double DRAG_COEFF { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public perturbationStatus SRP { get { int o = __p.__offset(46); return o != 0 ? (perturbationStatus)__p.bb.GetSbyte(o + __p.bb_pos) : perturbationStatus.OFF; } }
  public string CLASSIFICATION_TYPE { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCLASSIFICATION_TYPEBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetCLASSIFICATION_TYPEBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetCLASSIFICATION_TYPEArray() { return __p.__vector_as_array<byte>(48); }
  public uint NORAD_CAT_ID { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint ELEMENT_SET_NO { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public double REV_AT_EPOCH { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double BSTAR { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double MEAN_MOTION_DOT { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double MEAN_MOTION_DDOT { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public string COV_REFERENCE_FRAME { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCOV_REFERENCE_FRAMEBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetCOV_REFERENCE_FRAMEBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetCOV_REFERENCE_FRAMEArray() { return __p.__vector_as_array<byte>(62); }
  public double CX_X { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double CY_X { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double CZ_X { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double CX_DOT_X { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public uint USER_DEFINED_BIP_0044_TYPE { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string USER_DEFINED_OBJECT_DESIGNATOR { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUSER_DEFINED_OBJECT_DESIGNATORBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetUSER_DEFINED_OBJECT_DESIGNATORBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetUSER_DEFINED_OBJECT_DESIGNATORArray() { return __p.__vector_as_array<byte>(74); }
  public string USER_DEFINED_EARTH_MODEL { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUSER_DEFINED_EARTH_MODELBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetUSER_DEFINED_EARTH_MODELBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetUSER_DEFINED_EARTH_MODELArray() { return __p.__vector_as_array<byte>(76); }
  public double USER_DEFINED_EPOCH_TIMESTAMP { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double USER_DEFINED_MICROSECONDS { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<OPM> CreateOPM(FlatBufferBuilder builder,
      double CCSDS_OMM_VERS = 0.0,
      StringOffset CREATION_DATEOffset = default(StringOffset),
      StringOffset ORIGINATOROffset = default(StringOffset),
      StringOffset OBJECT_NAMEOffset = default(StringOffset),
      StringOffset OBJECT_IDOffset = default(StringOffset),
      StringOffset CENTER_NAMEOffset = default(StringOffset),
      StringOffset REF_FRAMEOffset = default(StringOffset),
      StringOffset TIME_SYSTEMOffset = default(StringOffset),
      Offset<opmStateVector> STATE_VECTOROffset = default(Offset<opmStateVector>),
      Offset<keplerianElements> KEPLERIAN_ELEMENTSOffset = default(Offset<keplerianElements>),
      Offset<equinoctialElements> EQUINOCTIAL_ELEMENTSOffset = default(Offset<equinoctialElements>),
      double GM = 0.0,
      Offset<opmAtmosphericModelData> ATMOSPHERIC_MODEL_DATAOffset = default(Offset<opmAtmosphericModelData>),
      Offset<propagatorConfig> PROPAGATOR_SETTINGSOffset = default(Offset<propagatorConfig>),
      VectorOffset COVARIANCE_MATRIXOffset = default(VectorOffset),
      Offset<uvwSigmas> UVW_SIGMASOffset = default(Offset<uvwSigmas>),
      double MASS = 0.0,
      double SOLAR_RAD_AREA = 0.0,
      double SOLAR_RAD_COEFF = 0.0,
      double DRAG_AREA = 0.0,
      double DRAG_COEFF = 0.0,
      perturbationStatus SRP = perturbationStatus.OFF,
      StringOffset CLASSIFICATION_TYPEOffset = default(StringOffset),
      uint NORAD_CAT_ID = 0,
      uint ELEMENT_SET_NO = 0,
      double REV_AT_EPOCH = 0.0,
      double BSTAR = 0.0,
      double MEAN_MOTION_DOT = 0.0,
      double MEAN_MOTION_DDOT = 0.0,
      StringOffset COV_REFERENCE_FRAMEOffset = default(StringOffset),
      double CX_X = 0.0,
      double CY_X = 0.0,
      double CZ_X = 0.0,
      double CX_DOT_X = 0.0,
      uint USER_DEFINED_BIP_0044_TYPE = 0,
      StringOffset USER_DEFINED_OBJECT_DESIGNATOROffset = default(StringOffset),
      StringOffset USER_DEFINED_EARTH_MODELOffset = default(StringOffset),
      double USER_DEFINED_EPOCH_TIMESTAMP = 0.0,
      double USER_DEFINED_MICROSECONDS = 0.0) {
    builder.StartTable(39);
    OPM.AddUSER_DEFINED_MICROSECONDS(builder, USER_DEFINED_MICROSECONDS);
    OPM.AddUSER_DEFINED_EPOCH_TIMESTAMP(builder, USER_DEFINED_EPOCH_TIMESTAMP);
    OPM.AddCX_DOT_X(builder, CX_DOT_X);
    OPM.AddCZ_X(builder, CZ_X);
    OPM.AddCY_X(builder, CY_X);
    OPM.AddCX_X(builder, CX_X);
    OPM.AddMEAN_MOTION_DDOT(builder, MEAN_MOTION_DDOT);
    OPM.AddMEAN_MOTION_DOT(builder, MEAN_MOTION_DOT);
    OPM.AddBSTAR(builder, BSTAR);
    OPM.AddREV_AT_EPOCH(builder, REV_AT_EPOCH);
    OPM.AddDRAG_COEFF(builder, DRAG_COEFF);
    OPM.AddDRAG_AREA(builder, DRAG_AREA);
    OPM.AddSOLAR_RAD_COEFF(builder, SOLAR_RAD_COEFF);
    OPM.AddSOLAR_RAD_AREA(builder, SOLAR_RAD_AREA);
    OPM.AddMASS(builder, MASS);
    OPM.AddGM(builder, GM);
    OPM.AddCCSDS_OMM_VERS(builder, CCSDS_OMM_VERS);
    OPM.AddUSER_DEFINED_EARTH_MODEL(builder, USER_DEFINED_EARTH_MODELOffset);
    OPM.AddUSER_DEFINED_OBJECT_DESIGNATOR(builder, USER_DEFINED_OBJECT_DESIGNATOROffset);
    OPM.AddUSER_DEFINED_BIP_0044_TYPE(builder, USER_DEFINED_BIP_0044_TYPE);
    OPM.AddCOV_REFERENCE_FRAME(builder, COV_REFERENCE_FRAMEOffset);
    OPM.AddELEMENT_SET_NO(builder, ELEMENT_SET_NO);
    OPM.AddNORAD_CAT_ID(builder, NORAD_CAT_ID);
    OPM.AddCLASSIFICATION_TYPE(builder, CLASSIFICATION_TYPEOffset);
    OPM.AddUVW_SIGMAS(builder, UVW_SIGMASOffset);
    OPM.AddCOVARIANCE_MATRIX(builder, COVARIANCE_MATRIXOffset);
    OPM.AddPROPAGATOR_SETTINGS(builder, PROPAGATOR_SETTINGSOffset);
    OPM.AddATMOSPHERIC_MODEL_DATA(builder, ATMOSPHERIC_MODEL_DATAOffset);
    OPM.AddEQUINOCTIAL_ELEMENTS(builder, EQUINOCTIAL_ELEMENTSOffset);
    OPM.AddKEPLERIAN_ELEMENTS(builder, KEPLERIAN_ELEMENTSOffset);
    OPM.AddSTATE_VECTOR(builder, STATE_VECTOROffset);
    OPM.AddTIME_SYSTEM(builder, TIME_SYSTEMOffset);
    OPM.AddREF_FRAME(builder, REF_FRAMEOffset);
    OPM.AddCENTER_NAME(builder, CENTER_NAMEOffset);
    OPM.AddOBJECT_ID(builder, OBJECT_IDOffset);
    OPM.AddOBJECT_NAME(builder, OBJECT_NAMEOffset);
    OPM.AddORIGINATOR(builder, ORIGINATOROffset);
    OPM.AddCREATION_DATE(builder, CREATION_DATEOffset);
    OPM.AddSRP(builder, SRP);
    return OPM.EndOPM(builder);
  }

  public static void StartOPM(FlatBufferBuilder builder) { builder.StartTable(39); }
  public static void AddCCSDS_OMM_VERS(FlatBufferBuilder builder, double CCSDS_OMM_VERS) { builder.AddDouble(0, CCSDS_OMM_VERS, 0.0); }
  public static void AddCREATION_DATE(FlatBufferBuilder builder, StringOffset CREATION_DATEOffset) { builder.AddOffset(1, CREATION_DATEOffset.Value, 0); }
  public static void AddORIGINATOR(FlatBufferBuilder builder, StringOffset ORIGINATOROffset) { builder.AddOffset(2, ORIGINATOROffset.Value, 0); }
  public static void AddOBJECT_NAME(FlatBufferBuilder builder, StringOffset OBJECT_NAMEOffset) { builder.AddOffset(3, OBJECT_NAMEOffset.Value, 0); }
  public static void AddOBJECT_ID(FlatBufferBuilder builder, StringOffset OBJECT_IDOffset) { builder.AddOffset(4, OBJECT_IDOffset.Value, 0); }
  public static void AddCENTER_NAME(FlatBufferBuilder builder, StringOffset CENTER_NAMEOffset) { builder.AddOffset(5, CENTER_NAMEOffset.Value, 0); }
  public static void AddREF_FRAME(FlatBufferBuilder builder, StringOffset REF_FRAMEOffset) { builder.AddOffset(6, REF_FRAMEOffset.Value, 0); }
  public static void AddTIME_SYSTEM(FlatBufferBuilder builder, StringOffset TIME_SYSTEMOffset) { builder.AddOffset(7, TIME_SYSTEMOffset.Value, 0); }
  public static void AddSTATE_VECTOR(FlatBufferBuilder builder, Offset<opmStateVector> STATE_VECTOROffset) { builder.AddOffset(8, STATE_VECTOROffset.Value, 0); }
  public static void AddKEPLERIAN_ELEMENTS(FlatBufferBuilder builder, Offset<keplerianElements> KEPLERIAN_ELEMENTSOffset) { builder.AddOffset(9, KEPLERIAN_ELEMENTSOffset.Value, 0); }
  public static void AddEQUINOCTIAL_ELEMENTS(FlatBufferBuilder builder, Offset<equinoctialElements> EQUINOCTIAL_ELEMENTSOffset) { builder.AddOffset(10, EQUINOCTIAL_ELEMENTSOffset.Value, 0); }
  public static void AddGM(FlatBufferBuilder builder, double GM) { builder.AddDouble(11, GM, 0.0); }
  public static void AddATMOSPHERIC_MODEL_DATA(FlatBufferBuilder builder, Offset<opmAtmosphericModelData> ATMOSPHERIC_MODEL_DATAOffset) { builder.AddOffset(12, ATMOSPHERIC_MODEL_DATAOffset.Value, 0); }
  public static void AddPROPAGATOR_SETTINGS(FlatBufferBuilder builder, Offset<propagatorConfig> PROPAGATOR_SETTINGSOffset) { builder.AddOffset(13, PROPAGATOR_SETTINGSOffset.Value, 0); }
  public static void AddCOVARIANCE_MATRIX(FlatBufferBuilder builder, VectorOffset COVARIANCE_MATRIXOffset) { builder.AddOffset(14, COVARIANCE_MATRIXOffset.Value, 0); }
  public static VectorOffset CreateCOVARIANCE_MATRIXVector(FlatBufferBuilder builder, Offset<opmCovarianceMatrixLine>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCOVARIANCE_MATRIXVectorBlock(FlatBufferBuilder builder, Offset<opmCovarianceMatrixLine>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCOVARIANCE_MATRIXVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<opmCovarianceMatrixLine>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCOVARIANCE_MATRIXVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<opmCovarianceMatrixLine>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCOVARIANCE_MATRIXVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUVW_SIGMAS(FlatBufferBuilder builder, Offset<uvwSigmas> UVW_SIGMASOffset) { builder.AddOffset(15, UVW_SIGMASOffset.Value, 0); }
  public static void AddMASS(FlatBufferBuilder builder, double MASS) { builder.AddDouble(16, MASS, 0.0); }
  public static void AddSOLAR_RAD_AREA(FlatBufferBuilder builder, double SOLAR_RAD_AREA) { builder.AddDouble(17, SOLAR_RAD_AREA, 0.0); }
  public static void AddSOLAR_RAD_COEFF(FlatBufferBuilder builder, double SOLAR_RAD_COEFF) { builder.AddDouble(18, SOLAR_RAD_COEFF, 0.0); }
  public static void AddDRAG_AREA(FlatBufferBuilder builder, double DRAG_AREA) { builder.AddDouble(19, DRAG_AREA, 0.0); }
  public static void AddDRAG_COEFF(FlatBufferBuilder builder, double DRAG_COEFF) { builder.AddDouble(20, DRAG_COEFF, 0.0); }
  public static void AddSRP(FlatBufferBuilder builder, perturbationStatus SRP) { builder.AddSbyte(21, (sbyte)SRP, 0); }
  public static void AddCLASSIFICATION_TYPE(FlatBufferBuilder builder, StringOffset CLASSIFICATION_TYPEOffset) { builder.AddOffset(22, CLASSIFICATION_TYPEOffset.Value, 0); }
  public static void AddNORAD_CAT_ID(FlatBufferBuilder builder, uint NORAD_CAT_ID) { builder.AddUint(23, NORAD_CAT_ID, 0); }
  public static void AddELEMENT_SET_NO(FlatBufferBuilder builder, uint ELEMENT_SET_NO) { builder.AddUint(24, ELEMENT_SET_NO, 0); }
  public static void AddREV_AT_EPOCH(FlatBufferBuilder builder, double REV_AT_EPOCH) { builder.AddDouble(25, REV_AT_EPOCH, 0.0); }
  public static void AddBSTAR(FlatBufferBuilder builder, double BSTAR) { builder.AddDouble(26, BSTAR, 0.0); }
  public static void AddMEAN_MOTION_DOT(FlatBufferBuilder builder, double MEAN_MOTION_DOT) { builder.AddDouble(27, MEAN_MOTION_DOT, 0.0); }
  public static void AddMEAN_MOTION_DDOT(FlatBufferBuilder builder, double MEAN_MOTION_DDOT) { builder.AddDouble(28, MEAN_MOTION_DDOT, 0.0); }
  public static void AddCOV_REFERENCE_FRAME(FlatBufferBuilder builder, StringOffset COV_REFERENCE_FRAMEOffset) { builder.AddOffset(29, COV_REFERENCE_FRAMEOffset.Value, 0); }
  public static void AddCX_X(FlatBufferBuilder builder, double CX_X) { builder.AddDouble(30, CX_X, 0.0); }
  public static void AddCY_X(FlatBufferBuilder builder, double CY_X) { builder.AddDouble(31, CY_X, 0.0); }
  public static void AddCZ_X(FlatBufferBuilder builder, double CZ_X) { builder.AddDouble(32, CZ_X, 0.0); }
  public static void AddCX_DOT_X(FlatBufferBuilder builder, double CX_DOT_X) { builder.AddDouble(33, CX_DOT_X, 0.0); }
  public static void AddUSER_DEFINED_BIP_0044_TYPE(FlatBufferBuilder builder, uint USER_DEFINED_BIP_0044_TYPE) { builder.AddUint(34, USER_DEFINED_BIP_0044_TYPE, 0); }
  public static void AddUSER_DEFINED_OBJECT_DESIGNATOR(FlatBufferBuilder builder, StringOffset USER_DEFINED_OBJECT_DESIGNATOROffset) { builder.AddOffset(35, USER_DEFINED_OBJECT_DESIGNATOROffset.Value, 0); }
  public static void AddUSER_DEFINED_EARTH_MODEL(FlatBufferBuilder builder, StringOffset USER_DEFINED_EARTH_MODELOffset) { builder.AddOffset(36, USER_DEFINED_EARTH_MODELOffset.Value, 0); }
  public static void AddUSER_DEFINED_EPOCH_TIMESTAMP(FlatBufferBuilder builder, double USER_DEFINED_EPOCH_TIMESTAMP) { builder.AddDouble(37, USER_DEFINED_EPOCH_TIMESTAMP, 0.0); }
  public static void AddUSER_DEFINED_MICROSECONDS(FlatBufferBuilder builder, double USER_DEFINED_MICROSECONDS) { builder.AddDouble(38, USER_DEFINED_MICROSECONDS, 0.0); }
  public static Offset<OPM> EndOPM(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<OPM>(o);
  }
  public static void FinishOPMBuffer(FlatBufferBuilder builder, Offset<OPM> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedOPMBuffer(FlatBufferBuilder builder, Offset<OPM> offset) { builder.FinishSizePrefixed(offset.Value); }
  public OPMT UnPack() {
    var _o = new OPMT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OPMT _o) {
    _o.CCSDS_OMM_VERS = this.CCSDS_OMM_VERS;
    _o.CREATION_DATE = this.CREATION_DATE;
    _o.ORIGINATOR = this.ORIGINATOR;
    _o.OBJECT_NAME = this.OBJECT_NAME;
    _o.OBJECT_ID = this.OBJECT_ID;
    _o.CENTER_NAME = this.CENTER_NAME;
    _o.REF_FRAME = this.REF_FRAME;
    _o.TIME_SYSTEM = this.TIME_SYSTEM;
    _o.STATE_VECTOR = this.STATE_VECTOR.HasValue ? this.STATE_VECTOR.Value.UnPack() : null;
    _o.KEPLERIAN_ELEMENTS = this.KEPLERIAN_ELEMENTS.HasValue ? this.KEPLERIAN_ELEMENTS.Value.UnPack() : null;
    _o.EQUINOCTIAL_ELEMENTS = this.EQUINOCTIAL_ELEMENTS.HasValue ? this.EQUINOCTIAL_ELEMENTS.Value.UnPack() : null;
    _o.GM = this.GM;
    _o.ATMOSPHERIC_MODEL_DATA = this.ATMOSPHERIC_MODEL_DATA.HasValue ? this.ATMOSPHERIC_MODEL_DATA.Value.UnPack() : null;
    _o.PROPAGATOR_SETTINGS = this.PROPAGATOR_SETTINGS.HasValue ? this.PROPAGATOR_SETTINGS.Value.UnPack() : null;
    _o.COVARIANCE_MATRIX = new List<opmCovarianceMatrixLineT>();
    for (var _j = 0; _j < this.COVARIANCE_MATRIXLength; ++_j) {_o.COVARIANCE_MATRIX.Add(this.COVARIANCE_MATRIX(_j).HasValue ? this.COVARIANCE_MATRIX(_j).Value.UnPack() : null);}
    _o.UVW_SIGMAS = this.UVW_SIGMAS.HasValue ? this.UVW_SIGMAS.Value.UnPack() : null;
    _o.MASS = this.MASS;
    _o.SOLAR_RAD_AREA = this.SOLAR_RAD_AREA;
    _o.SOLAR_RAD_COEFF = this.SOLAR_RAD_COEFF;
    _o.DRAG_AREA = this.DRAG_AREA;
    _o.DRAG_COEFF = this.DRAG_COEFF;
    _o.SRP = this.SRP;
    _o.CLASSIFICATION_TYPE = this.CLASSIFICATION_TYPE;
    _o.NORAD_CAT_ID = this.NORAD_CAT_ID;
    _o.ELEMENT_SET_NO = this.ELEMENT_SET_NO;
    _o.REV_AT_EPOCH = this.REV_AT_EPOCH;
    _o.BSTAR = this.BSTAR;
    _o.MEAN_MOTION_DOT = this.MEAN_MOTION_DOT;
    _o.MEAN_MOTION_DDOT = this.MEAN_MOTION_DDOT;
    _o.COV_REFERENCE_FRAME = this.COV_REFERENCE_FRAME;
    _o.CX_X = this.CX_X;
    _o.CY_X = this.CY_X;
    _o.CZ_X = this.CZ_X;
    _o.CX_DOT_X = this.CX_DOT_X;
    _o.USER_DEFINED_BIP_0044_TYPE = this.USER_DEFINED_BIP_0044_TYPE;
    _o.USER_DEFINED_OBJECT_DESIGNATOR = this.USER_DEFINED_OBJECT_DESIGNATOR;
    _o.USER_DEFINED_EARTH_MODEL = this.USER_DEFINED_EARTH_MODEL;
    _o.USER_DEFINED_EPOCH_TIMESTAMP = this.USER_DEFINED_EPOCH_TIMESTAMP;
    _o.USER_DEFINED_MICROSECONDS = this.USER_DEFINED_MICROSECONDS;
  }
  public static Offset<OPM> Pack(FlatBufferBuilder builder, OPMT _o) {
    if (_o == null) return default(Offset<OPM>);
    var _CREATION_DATE = _o.CREATION_DATE == null ? default(StringOffset) : builder.CreateString(_o.CREATION_DATE);
    var _ORIGINATOR = _o.ORIGINATOR == null ? default(StringOffset) : builder.CreateString(_o.ORIGINATOR);
    var _OBJECT_NAME = _o.OBJECT_NAME == null ? default(StringOffset) : builder.CreateString(_o.OBJECT_NAME);
    var _OBJECT_ID = _o.OBJECT_ID == null ? default(StringOffset) : builder.CreateString(_o.OBJECT_ID);
    var _CENTER_NAME = _o.CENTER_NAME == null ? default(StringOffset) : builder.CreateString(_o.CENTER_NAME);
    var _REF_FRAME = _o.REF_FRAME == null ? default(StringOffset) : builder.CreateString(_o.REF_FRAME);
    var _TIME_SYSTEM = _o.TIME_SYSTEM == null ? default(StringOffset) : builder.CreateString(_o.TIME_SYSTEM);
    var _STATE_VECTOR = _o.STATE_VECTOR == null ? default(Offset<opmStateVector>) : opmStateVector.Pack(builder, _o.STATE_VECTOR);
    var _KEPLERIAN_ELEMENTS = _o.KEPLERIAN_ELEMENTS == null ? default(Offset<keplerianElements>) : keplerianElements.Pack(builder, _o.KEPLERIAN_ELEMENTS);
    var _EQUINOCTIAL_ELEMENTS = _o.EQUINOCTIAL_ELEMENTS == null ? default(Offset<equinoctialElements>) : equinoctialElements.Pack(builder, _o.EQUINOCTIAL_ELEMENTS);
    var _ATMOSPHERIC_MODEL_DATA = _o.ATMOSPHERIC_MODEL_DATA == null ? default(Offset<opmAtmosphericModelData>) : opmAtmosphericModelData.Pack(builder, _o.ATMOSPHERIC_MODEL_DATA);
    var _PROPAGATOR_SETTINGS = _o.PROPAGATOR_SETTINGS == null ? default(Offset<propagatorConfig>) : propagatorConfig.Pack(builder, _o.PROPAGATOR_SETTINGS);
    var _COVARIANCE_MATRIX = default(VectorOffset);
    if (_o.COVARIANCE_MATRIX != null) {
      var __COVARIANCE_MATRIX = new Offset<opmCovarianceMatrixLine>[_o.COVARIANCE_MATRIX.Count];
      for (var _j = 0; _j < __COVARIANCE_MATRIX.Length; ++_j) { __COVARIANCE_MATRIX[_j] = opmCovarianceMatrixLine.Pack(builder, _o.COVARIANCE_MATRIX[_j]); }
      _COVARIANCE_MATRIX = CreateCOVARIANCE_MATRIXVector(builder, __COVARIANCE_MATRIX);
    }
    var _UVW_SIGMAS = _o.UVW_SIGMAS == null ? default(Offset<uvwSigmas>) : uvwSigmas.Pack(builder, _o.UVW_SIGMAS);
    var _CLASSIFICATION_TYPE = _o.CLASSIFICATION_TYPE == null ? default(StringOffset) : builder.CreateString(_o.CLASSIFICATION_TYPE);
    var _COV_REFERENCE_FRAME = _o.COV_REFERENCE_FRAME == null ? default(StringOffset) : builder.CreateString(_o.COV_REFERENCE_FRAME);
    var _USER_DEFINED_OBJECT_DESIGNATOR = _o.USER_DEFINED_OBJECT_DESIGNATOR == null ? default(StringOffset) : builder.CreateString(_o.USER_DEFINED_OBJECT_DESIGNATOR);
    var _USER_DEFINED_EARTH_MODEL = _o.USER_DEFINED_EARTH_MODEL == null ? default(StringOffset) : builder.CreateString(_o.USER_DEFINED_EARTH_MODEL);
    return CreateOPM(
      builder,
      _o.CCSDS_OMM_VERS,
      _CREATION_DATE,
      _ORIGINATOR,
      _OBJECT_NAME,
      _OBJECT_ID,
      _CENTER_NAME,
      _REF_FRAME,
      _TIME_SYSTEM,
      _STATE_VECTOR,
      _KEPLERIAN_ELEMENTS,
      _EQUINOCTIAL_ELEMENTS,
      _o.GM,
      _ATMOSPHERIC_MODEL_DATA,
      _PROPAGATOR_SETTINGS,
      _COVARIANCE_MATRIX,
      _UVW_SIGMAS,
      _o.MASS,
      _o.SOLAR_RAD_AREA,
      _o.SOLAR_RAD_COEFF,
      _o.DRAG_AREA,
      _o.DRAG_COEFF,
      _o.SRP,
      _CLASSIFICATION_TYPE,
      _o.NORAD_CAT_ID,
      _o.ELEMENT_SET_NO,
      _o.REV_AT_EPOCH,
      _o.BSTAR,
      _o.MEAN_MOTION_DOT,
      _o.MEAN_MOTION_DDOT,
      _COV_REFERENCE_FRAME,
      _o.CX_X,
      _o.CY_X,
      _o.CZ_X,
      _o.CX_DOT_X,
      _o.USER_DEFINED_BIP_0044_TYPE,
      _USER_DEFINED_OBJECT_DESIGNATOR,
      _USER_DEFINED_EARTH_MODEL,
      _o.USER_DEFINED_EPOCH_TIMESTAMP,
      _o.USER_DEFINED_MICROSECONDS);
  }
}

public class OPMT
{
  public double CCSDS_OMM_VERS { get; set; }
  public string CREATION_DATE { get; set; }
  public string ORIGINATOR { get; set; }
  public string OBJECT_NAME { get; set; }
  public string OBJECT_ID { get; set; }
  public string CENTER_NAME { get; set; }
  public string REF_FRAME { get; set; }
  public string TIME_SYSTEM { get; set; }
  public opmStateVectorT STATE_VECTOR { get; set; }
  public keplerianElementsT KEPLERIAN_ELEMENTS { get; set; }
  public equinoctialElementsT EQUINOCTIAL_ELEMENTS { get; set; }
  public double GM { get; set; }
  public opmAtmosphericModelDataT ATMOSPHERIC_MODEL_DATA { get; set; }
  public propagatorConfigT PROPAGATOR_SETTINGS { get; set; }
  public List<opmCovarianceMatrixLineT> COVARIANCE_MATRIX { get; set; }
  public uvwSigmasT UVW_SIGMAS { get; set; }
  public double MASS { get; set; }
  public double SOLAR_RAD_AREA { get; set; }
  public double SOLAR_RAD_COEFF { get; set; }
  public double DRAG_AREA { get; set; }
  public double DRAG_COEFF { get; set; }
  public perturbationStatus SRP { get; set; }
  public string CLASSIFICATION_TYPE { get; set; }
  public uint NORAD_CAT_ID { get; set; }
  public uint ELEMENT_SET_NO { get; set; }
  public double REV_AT_EPOCH { get; set; }
  public double BSTAR { get; set; }
  public double MEAN_MOTION_DOT { get; set; }
  public double MEAN_MOTION_DDOT { get; set; }
  public string COV_REFERENCE_FRAME { get; set; }
  public double CX_X { get; set; }
  public double CY_X { get; set; }
  public double CZ_X { get; set; }
  public double CX_DOT_X { get; set; }
  public uint USER_DEFINED_BIP_0044_TYPE { get; set; }
  public string USER_DEFINED_OBJECT_DESIGNATOR { get; set; }
  public string USER_DEFINED_EARTH_MODEL { get; set; }
  public double USER_DEFINED_EPOCH_TIMESTAMP { get; set; }
  public double USER_DEFINED_MICROSECONDS { get; set; }

  public OPMT() {
    this.CCSDS_OMM_VERS = 0.0;
    this.CREATION_DATE = null;
    this.ORIGINATOR = null;
    this.OBJECT_NAME = null;
    this.OBJECT_ID = null;
    this.CENTER_NAME = null;
    this.REF_FRAME = null;
    this.TIME_SYSTEM = null;
    this.STATE_VECTOR = null;
    this.KEPLERIAN_ELEMENTS = null;
    this.EQUINOCTIAL_ELEMENTS = null;
    this.GM = 0.0;
    this.ATMOSPHERIC_MODEL_DATA = null;
    this.PROPAGATOR_SETTINGS = null;
    this.COVARIANCE_MATRIX = null;
    this.UVW_SIGMAS = null;
    this.MASS = 0.0;
    this.SOLAR_RAD_AREA = 0.0;
    this.SOLAR_RAD_COEFF = 0.0;
    this.DRAG_AREA = 0.0;
    this.DRAG_COEFF = 0.0;
    this.SRP = perturbationStatus.OFF;
    this.CLASSIFICATION_TYPE = null;
    this.NORAD_CAT_ID = 0;
    this.ELEMENT_SET_NO = 0;
    this.REV_AT_EPOCH = 0.0;
    this.BSTAR = 0.0;
    this.MEAN_MOTION_DOT = 0.0;
    this.MEAN_MOTION_DDOT = 0.0;
    this.COV_REFERENCE_FRAME = null;
    this.CX_X = 0.0;
    this.CY_X = 0.0;
    this.CZ_X = 0.0;
    this.CX_DOT_X = 0.0;
    this.USER_DEFINED_BIP_0044_TYPE = 0;
    this.USER_DEFINED_OBJECT_DESIGNATOR = null;
    this.USER_DEFINED_EARTH_MODEL = null;
    this.USER_DEFINED_EPOCH_TIMESTAMP = 0.0;
    this.USER_DEFINED_MICROSECONDS = 0.0;
  }
  public static OPMT DeserializeFromBinary(byte[] fbBuffer) {
    return OPM.GetRootAsOPM(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    OPM.FinishOPMBuffer(fbb, OPM.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class OPMVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CCSDS_OMM_VERS*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*CREATION_DATE*/, false)
      && verifier.VerifyString(tablePos, 8 /*ORIGINATOR*/, false)
      && verifier.VerifyString(tablePos, 10 /*OBJECT_NAME*/, false)
      && verifier.VerifyString(tablePos, 12 /*OBJECT_ID*/, false)
      && verifier.VerifyString(tablePos, 14 /*CENTER_NAME*/, false)
      && verifier.VerifyString(tablePos, 16 /*REF_FRAME*/, false)
      && verifier.VerifyString(tablePos, 18 /*TIME_SYSTEM*/, false)
      && verifier.VerifyTable(tablePos, 20 /*STATE_VECTOR*/, opmStateVectorVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 22 /*KEPLERIAN_ELEMENTS*/, keplerianElementsVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 24 /*EQUINOCTIAL_ELEMENTS*/, equinoctialElementsVerify.Verify, false)
      && verifier.VerifyField(tablePos, 26 /*GM*/, 8 /*double*/, 8, false)
      && verifier.VerifyTable(tablePos, 28 /*ATMOSPHERIC_MODEL_DATA*/, opmAtmosphericModelDataVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 30 /*PROPAGATOR_SETTINGS*/, propagatorConfigVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 32 /*COVARIANCE_MATRIX*/, opmCovarianceMatrixLineVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 34 /*UVW_SIGMAS*/, uvwSigmasVerify.Verify, false)
      && verifier.VerifyField(tablePos, 36 /*MASS*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*SOLAR_RAD_AREA*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*SOLAR_RAD_COEFF*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*DRAG_AREA*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*DRAG_COEFF*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*SRP*/, 1 /*perturbationStatus*/, 1, false)
      && verifier.VerifyString(tablePos, 48 /*CLASSIFICATION_TYPE*/, false)
      && verifier.VerifyField(tablePos, 50 /*NORAD_CAT_ID*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*ELEMENT_SET_NO*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*REV_AT_EPOCH*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*BSTAR*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*MEAN_MOTION_DOT*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*MEAN_MOTION_DDOT*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 62 /*COV_REFERENCE_FRAME*/, false)
      && verifier.VerifyField(tablePos, 64 /*CX_X*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*CY_X*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*CZ_X*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*CX_DOT_X*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*USER_DEFINED_BIP_0044_TYPE*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 74 /*USER_DEFINED_OBJECT_DESIGNATOR*/, false)
      && verifier.VerifyString(tablePos, 76 /*USER_DEFINED_EARTH_MODEL*/, false)
      && verifier.VerifyField(tablePos, 78 /*USER_DEFINED_EPOCH_TIMESTAMP*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*USER_DEFINED_MICROSECONDS*/, 8 /*double*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
