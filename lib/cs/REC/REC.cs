// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Collection of Standard Records
public struct REC : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static REC GetRootAsREC(ByteBuffer _bb) { return GetRootAsREC(_bb, new REC()); }
  public static REC GetRootAsREC(ByteBuffer _bb, REC obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool RECBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$REC"); }
  public static bool VerifyREC(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("$REC", false, RECVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public REC __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Version { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVersionBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetVersionBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetVersionArray() { return __p.__vector_as_array<byte>(4); }
  public Record? RECORDS(int j) { int o = __p.__offset(6); return o != 0 ? (Record?)(new Record()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RECORDSLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<REC> CreateREC(FlatBufferBuilder builder,
      StringOffset versionOffset = default(StringOffset),
      VectorOffset RECORDSOffset = default(VectorOffset)) {
    builder.StartTable(2);
    REC.AddRECORDS(builder, RECORDSOffset);
    REC.AddVersion(builder, versionOffset);
    return REC.EndREC(builder);
  }

  public static void StartREC(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddVersion(FlatBufferBuilder builder, StringOffset versionOffset) { builder.AddOffset(0, versionOffset.Value, 0); }
  public static void AddRECORDS(FlatBufferBuilder builder, VectorOffset RECORDSOffset) { builder.AddOffset(1, RECORDSOffset.Value, 0); }
  public static VectorOffset CreateRECORDSVector(FlatBufferBuilder builder, Offset<Record>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRECORDSVectorBlock(FlatBufferBuilder builder, Offset<Record>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRECORDSVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Record>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRECORDSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Record>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRECORDSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<REC> EndREC(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<REC>(o);
  }
  public static void FinishRECBuffer(FlatBufferBuilder builder, Offset<REC> offset) { builder.Finish(offset.Value, "$REC"); }
  public static void FinishSizePrefixedRECBuffer(FlatBufferBuilder builder, Offset<REC> offset) { builder.FinishSizePrefixed(offset.Value, "$REC"); }
  public RECT UnPack() {
    var _o = new RECT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RECT _o) {
    _o.Version = this.Version;
    _o.RECORDS = new List<RecordT>();
    for (var _j = 0; _j < this.RECORDSLength; ++_j) {_o.RECORDS.Add(this.RECORDS(_j).HasValue ? this.RECORDS(_j).Value.UnPack() : null);}
  }
  public static Offset<REC> Pack(FlatBufferBuilder builder, RECT _o) {
    if (_o == null) return default(Offset<REC>);
    var _version = _o.Version == null ? default(StringOffset) : builder.CreateString(_o.Version);
    var _RECORDS = default(VectorOffset);
    if (_o.RECORDS != null) {
      var __RECORDS = new Offset<Record>[_o.RECORDS.Count];
      for (var _j = 0; _j < __RECORDS.Length; ++_j) { __RECORDS[_j] = Record.Pack(builder, _o.RECORDS[_j]); }
      _RECORDS = CreateRECORDSVector(builder, __RECORDS);
    }
    return CreateREC(
      builder,
      _version,
      _RECORDS);
  }
}

public class RECT
{
  public string Version { get; set; }
  public List<RecordT> RECORDS { get; set; }

  public RECT() {
    this.Version = null;
    this.RECORDS = null;
  }
  public static RECT DeserializeFromBinary(byte[] fbBuffer) {
    return REC.GetRootAsREC(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    REC.FinishRECBuffer(fbb, REC.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class RECVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Version*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*RECORDS*/, RecordVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
