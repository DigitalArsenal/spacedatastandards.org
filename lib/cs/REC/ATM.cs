// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Atmospheric Model Message
public struct ATM : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ATM GetRootAsATM(ByteBuffer _bb) { return GetRootAsATM(_bb, new ATM()); }
  public static ATM GetRootAsATM(ByteBuffer _bb, ATM obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool ATMBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$ATM"); }
  public static bool VerifyATM(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("$ATM", false, ATMVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ATM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Canonical model family
  public AtmosphericModelFamily MODEL { get { int o = __p.__offset(4); return o != 0 ? (AtmosphericModelFamily)__p.bb.GetSbyte(o + __p.bb_pos) : AtmosphericModelFamily.CIRA_XX; } }
  /// Four-digit year identifying the model version (e.g., 1970, 2008, 2020)
  public int YEAR { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<ATM> CreateATM(FlatBufferBuilder builder,
      AtmosphericModelFamily MODEL = AtmosphericModelFamily.CIRA_XX,
      int YEAR = 0) {
    builder.StartTable(2);
    ATM.AddYEAR(builder, YEAR);
    ATM.AddMODEL(builder, MODEL);
    return ATM.EndATM(builder);
  }

  public static void StartATM(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMODEL(FlatBufferBuilder builder, AtmosphericModelFamily MODEL) { builder.AddSbyte(0, (sbyte)MODEL, 0); }
  public static void AddYEAR(FlatBufferBuilder builder, int YEAR) { builder.AddInt(1, YEAR, 0); }
  public static Offset<ATM> EndATM(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ATM>(o);
  }
  public static void FinishATMBuffer(FlatBufferBuilder builder, Offset<ATM> offset) { builder.Finish(offset.Value, "$ATM"); }
  public static void FinishSizePrefixedATMBuffer(FlatBufferBuilder builder, Offset<ATM> offset) { builder.FinishSizePrefixed(offset.Value, "$ATM"); }
  public ATMT UnPack() {
    var _o = new ATMT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ATMT _o) {
    _o.MODEL = this.MODEL;
    _o.YEAR = this.YEAR;
  }
  public static Offset<ATM> Pack(FlatBufferBuilder builder, ATMT _o) {
    if (_o == null) return default(Offset<ATM>);
    return CreateATM(
      builder,
      _o.MODEL,
      _o.YEAR);
  }
}

public class ATMT
{
  public AtmosphericModelFamily MODEL { get; set; }
  public int YEAR { get; set; }

  public ATMT() {
    this.MODEL = AtmosphericModelFamily.CIRA_XX;
    this.YEAR = 0;
  }
  public static ATMT DeserializeFromBinary(byte[] fbBuffer) {
    return ATM.GetRootAsATM(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ATM.FinishATMBuffer(fbb, ATM.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class ATMVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MODEL*/, 1 /*AtmosphericModelFamily*/, 1, false)
      && verifier.VerifyField(tablePos, 6 /*YEAR*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
