// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Mean Element Theory
public struct MET : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static MET GetRootAsMET(ByteBuffer _bb) { return GetRootAsMET(_bb, new MET()); }
  public static MET GetRootAsMET(ByteBuffer _bb, MET obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool METBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$MET"); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MET __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public meanElementTheory MEAN_ELEMENT_THEORY { get { int o = __p.__offset(4); return o != 0 ? (meanElementTheory)__p.bb.GetSbyte(o + __p.bb_pos) : meanElementTheory.SGP4; } }

  public static Offset<MET> CreateMET(FlatBufferBuilder builder,
      meanElementTheory MEAN_ELEMENT_THEORY = meanElementTheory.SGP4) {
    builder.StartTable(1);
    MET.AddMEAN_ELEMENT_THEORY(builder, MEAN_ELEMENT_THEORY);
    return MET.EndMET(builder);
  }

  public static void StartMET(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddMEAN_ELEMENT_THEORY(FlatBufferBuilder builder, meanElementTheory MEAN_ELEMENT_THEORY) { builder.AddSbyte(0, (sbyte)MEAN_ELEMENT_THEORY, 0); }
  public static Offset<MET> EndMET(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MET>(o);
  }
  public static void FinishMETBuffer(FlatBufferBuilder builder, Offset<MET> offset) { builder.Finish(offset.Value, "$MET"); }
  public static void FinishSizePrefixedMETBuffer(FlatBufferBuilder builder, Offset<MET> offset) { builder.FinishSizePrefixed(offset.Value, "$MET"); }
  public METT UnPack() {
    var _o = new METT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(METT _o) {
    _o.MEAN_ELEMENT_THEORY = this.MEAN_ELEMENT_THEORY;
  }
  public static Offset<MET> Pack(FlatBufferBuilder builder, METT _o) {
    if (_o == null) return default(Offset<MET>);
    return CreateMET(
      builder,
      _o.MEAN_ELEMENT_THEORY);
  }
}

public class METT
{
  public meanElementTheory MEAN_ELEMENT_THEORY { get; set; }

  public METT() {
    this.MEAN_ELEMENT_THEORY = meanElementTheory.SGP4;
  }
  public static METT DeserializeFromBinary(byte[] fbBuffer) {
    return MET.GetRootAsMET(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    MET.FinishMETBuffer(fbb, MET.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}

