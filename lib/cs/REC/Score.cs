// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Score : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static Score GetRootAsScore(ByteBuffer _bb) { return GetRootAsScore(_bb, new Score()); }
  public static Score GetRootAsScore(ByteBuffer _bb, Score obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Score __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string NORAD_CAT_ID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNORAD_CAT_IDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNORAD_CAT_IDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNORAD_CAT_IDArray() { return __p.__vector_as_array<byte>(4); }
  public ScoreType TYPE { get { int o = __p.__offset(6); return o != 0 ? (ScoreType)__p.bb.GetSbyte(o + __p.bb_pos) : ScoreType.OUTLIER; } }
  public string TAG { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTAGBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTAGBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTAGArray() { return __p.__vector_as_array<byte>(8); }
  public float SCORE { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Score> CreateScore(FlatBufferBuilder builder,
      StringOffset NORAD_CAT_IDOffset = default(StringOffset),
      ScoreType TYPE = ScoreType.OUTLIER,
      StringOffset TAGOffset = default(StringOffset),
      float SCORE = 0.0f) {
    builder.StartTable(4);
    Score.AddSCORE(builder, SCORE);
    Score.AddTAG(builder, TAGOffset);
    Score.AddNORAD_CAT_ID(builder, NORAD_CAT_IDOffset);
    Score.AddTYPE(builder, TYPE);
    return Score.EndScore(builder);
  }

  public static void StartScore(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddNORAD_CAT_ID(FlatBufferBuilder builder, StringOffset NORAD_CAT_IDOffset) { builder.AddOffset(0, NORAD_CAT_IDOffset.Value, 0); }
  public static void AddTYPE(FlatBufferBuilder builder, ScoreType TYPE) { builder.AddSbyte(1, (sbyte)TYPE, 0); }
  public static void AddTAG(FlatBufferBuilder builder, StringOffset TAGOffset) { builder.AddOffset(2, TAGOffset.Value, 0); }
  public static void AddSCORE(FlatBufferBuilder builder, float SCORE) { builder.AddFloat(3, SCORE, 0.0f); }
  public static Offset<Score> EndScore(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Score>(o);
  }
  public ScoreT UnPack() {
    var _o = new ScoreT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScoreT _o) {
    _o.NORAD_CAT_ID = this.NORAD_CAT_ID;
    _o.TYPE = this.TYPE;
    _o.TAG = this.TAG;
    _o.SCORE = this.SCORE;
  }
  public static Offset<Score> Pack(FlatBufferBuilder builder, ScoreT _o) {
    if (_o == null) return default(Offset<Score>);
    var _NORAD_CAT_ID = _o.NORAD_CAT_ID == null ? default(StringOffset) : builder.CreateString(_o.NORAD_CAT_ID);
    var _TAG = _o.TAG == null ? default(StringOffset) : builder.CreateString(_o.TAG);
    return CreateScore(
      builder,
      _NORAD_CAT_ID,
      _o.TYPE,
      _TAG,
      _o.SCORE);
  }
}

public class ScoreT
{
  public string NORAD_CAT_ID { get; set; }
  public ScoreType TYPE { get; set; }
  public string TAG { get; set; }
  public float SCORE { get; set; }

  public ScoreT() {
    this.NORAD_CAT_ID = null;
    this.TYPE = ScoreType.OUTLIER;
    this.TAG = null;
    this.SCORE = 0.0f;
  }
}

