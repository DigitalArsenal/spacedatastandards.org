// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Orbit Ephemeris Message
public struct OEM : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static OEM GetRootAsOEM(ByteBuffer _bb) { return GetRootAsOEM(_bb, new OEM()); }
  public static OEM GetRootAsOEM(ByteBuffer _bb, OEM obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool OEMBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$OEM"); }
  public static bool VerifyOEM(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("$OEM", false, OEMVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OEM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// OEM Header
  /// OEM Version
  public double CCSDS_OEM_VERS { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Creation Date
  public string CREATION_DATE { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCREATION_DATEBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCREATION_DATEBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCREATION_DATEArray() { return __p.__vector_as_array<byte>(6); }
  /// Originator
  public string ORIGINATOR { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIGINATORBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetORIGINATORBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetORIGINATORArray() { return __p.__vector_as_array<byte>(8); }
  /// Array of ephemeris data blocks
  public ephemerisDataBlock? EPHEMERIS_DATA_BLOCK(int j) { int o = __p.__offset(10); return o != 0 ? (ephemerisDataBlock?)(new ephemerisDataBlock()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EPHEMERIS_DATA_BLOCKLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<OEM> CreateOEM(FlatBufferBuilder builder,
      double CCSDS_OEM_VERS = 0.0,
      StringOffset CREATION_DATEOffset = default(StringOffset),
      StringOffset ORIGINATOROffset = default(StringOffset),
      VectorOffset EPHEMERIS_DATA_BLOCKOffset = default(VectorOffset)) {
    builder.StartTable(4);
    OEM.AddCCSDS_OEM_VERS(builder, CCSDS_OEM_VERS);
    OEM.AddEPHEMERIS_DATA_BLOCK(builder, EPHEMERIS_DATA_BLOCKOffset);
    OEM.AddORIGINATOR(builder, ORIGINATOROffset);
    OEM.AddCREATION_DATE(builder, CREATION_DATEOffset);
    return OEM.EndOEM(builder);
  }

  public static void StartOEM(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCCSDS_OEM_VERS(FlatBufferBuilder builder, double CCSDS_OEM_VERS) { builder.AddDouble(0, CCSDS_OEM_VERS, 0.0); }
  public static void AddCREATION_DATE(FlatBufferBuilder builder, StringOffset CREATION_DATEOffset) { builder.AddOffset(1, CREATION_DATEOffset.Value, 0); }
  public static void AddORIGINATOR(FlatBufferBuilder builder, StringOffset ORIGINATOROffset) { builder.AddOffset(2, ORIGINATOROffset.Value, 0); }
  public static void AddEPHEMERIS_DATA_BLOCK(FlatBufferBuilder builder, VectorOffset EPHEMERIS_DATA_BLOCKOffset) { builder.AddOffset(3, EPHEMERIS_DATA_BLOCKOffset.Value, 0); }
  public static VectorOffset CreateEPHEMERIS_DATA_BLOCKVector(FlatBufferBuilder builder, Offset<ephemerisDataBlock>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEPHEMERIS_DATA_BLOCKVectorBlock(FlatBufferBuilder builder, Offset<ephemerisDataBlock>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEPHEMERIS_DATA_BLOCKVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<ephemerisDataBlock>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEPHEMERIS_DATA_BLOCKVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<ephemerisDataBlock>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEPHEMERIS_DATA_BLOCKVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<OEM> EndOEM(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<OEM>(o);
  }
  public static void FinishOEMBuffer(FlatBufferBuilder builder, Offset<OEM> offset) { builder.Finish(offset.Value, "$OEM"); }
  public static void FinishSizePrefixedOEMBuffer(FlatBufferBuilder builder, Offset<OEM> offset) { builder.FinishSizePrefixed(offset.Value, "$OEM"); }
  public OEMT UnPack() {
    var _o = new OEMT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OEMT _o) {
    _o.CCSDS_OEM_VERS = this.CCSDS_OEM_VERS;
    _o.CREATION_DATE = this.CREATION_DATE;
    _o.ORIGINATOR = this.ORIGINATOR;
    _o.EPHEMERIS_DATA_BLOCK = new List<ephemerisDataBlockT>();
    for (var _j = 0; _j < this.EPHEMERIS_DATA_BLOCKLength; ++_j) {_o.EPHEMERIS_DATA_BLOCK.Add(this.EPHEMERIS_DATA_BLOCK(_j).HasValue ? this.EPHEMERIS_DATA_BLOCK(_j).Value.UnPack() : null);}
  }
  public static Offset<OEM> Pack(FlatBufferBuilder builder, OEMT _o) {
    if (_o == null) return default(Offset<OEM>);
    var _CREATION_DATE = _o.CREATION_DATE == null ? default(StringOffset) : builder.CreateString(_o.CREATION_DATE);
    var _ORIGINATOR = _o.ORIGINATOR == null ? default(StringOffset) : builder.CreateString(_o.ORIGINATOR);
    var _EPHEMERIS_DATA_BLOCK = default(VectorOffset);
    if (_o.EPHEMERIS_DATA_BLOCK != null) {
      var __EPHEMERIS_DATA_BLOCK = new Offset<ephemerisDataBlock>[_o.EPHEMERIS_DATA_BLOCK.Count];
      for (var _j = 0; _j < __EPHEMERIS_DATA_BLOCK.Length; ++_j) { __EPHEMERIS_DATA_BLOCK[_j] = ephemerisDataBlock.Pack(builder, _o.EPHEMERIS_DATA_BLOCK[_j]); }
      _EPHEMERIS_DATA_BLOCK = CreateEPHEMERIS_DATA_BLOCKVector(builder, __EPHEMERIS_DATA_BLOCK);
    }
    return CreateOEM(
      builder,
      _o.CCSDS_OEM_VERS,
      _CREATION_DATE,
      _ORIGINATOR,
      _EPHEMERIS_DATA_BLOCK);
  }
}

public class OEMT
{
  public double CCSDS_OEM_VERS { get; set; }
  public string CREATION_DATE { get; set; }
  public string ORIGINATOR { get; set; }
  public List<ephemerisDataBlockT> EPHEMERIS_DATA_BLOCK { get; set; }

  public OEMT() {
    this.CCSDS_OEM_VERS = 0.0;
    this.CREATION_DATE = null;
    this.ORIGINATOR = null;
    this.EPHEMERIS_DATA_BLOCK = null;
  }
  public static OEMT DeserializeFromBinary(byte[] fbBuffer) {
    return OEM.GetRootAsOEM(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    OEM.FinishOEMBuffer(fbb, OEM.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class OEMVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CCSDS_OEM_VERS*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*CREATION_DATE*/, false)
      && verifier.VerifyString(tablePos, 8 /*ORIGINATOR*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*EPHEMERIS_DATA_BLOCK*/, ephemerisDataBlockVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
