// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Electro-Optical Observation
public struct EOO : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EOO GetRootAsEOO(ByteBuffer _bb) { return GetRootAsEOO(_bb, new EOO()); }
  public static EOO GetRootAsEOO(ByteBuffer _bb, EOO obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EOOBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$EOO"); }
  public static bool VerifyEOO(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("$EOO", false, EOOVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EOO __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record.
  public string ID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIDArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  public string CLASSIFICATION { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCLASSIFICATIONBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCLASSIFICATIONBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCLASSIFICATIONArray() { return __p.__vector_as_array<byte>(6); }
  /// Ob detection time in ISO 8601 UTC (YYYY-MM-DDTHH:MM:SS.ssssssZ), up to microsecond precision.
  public string OB_TIME { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOB_TIMEBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOB_TIMEBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOB_TIMEArray() { return __p.__vector_as_array<byte>(8); }
  /// Correlation score of the observation when compared to a known orbit state.
  public float CORR_QUALITY { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Server will auto-populate with SAT_NO if available.
  public string ID_ON_ORBIT { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetID_ON_ORBITBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetID_ON_ORBITBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetID_ON_ORBITArray() { return __p.__vector_as_array<byte>(12); }
  /// Unique ID of the sensor. Must have a corresponding sensor record on the server.
  public string SENSOR_ID { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSENSOR_IDBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetSENSOR_IDBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetSENSOR_IDArray() { return __p.__vector_as_array<byte>(14); }
  /// Accepted Collection Method
  public CollectMethod COLLECT_METHOD { get { int o = __p.__offset(16); return o != 0 ? (CollectMethod)__p.bb.GetSbyte(o + __p.bb_pos) : CollectMethod.SIDEREAL; } }
  /// 18SDS satellite number. Only list if correlated against the 18SDS catalog.
  public int NORAD_CAT_ID { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Identifier for the collectRequest message if the collection was in response to tasking.
  public string TASK_ID { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTASK_IDBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetTASK_IDBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetTASK_IDArray() { return __p.__vector_as_array<byte>(20); }
  /// Optional identifier to track a transaction.
  public string TRANSACTION_ID { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTRANSACTION_IDBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetTRANSACTION_IDBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetTRANSACTION_IDArray() { return __p.__vector_as_array<byte>(22); }
  /// The user-defined set ID of a sequence of images.
  public string IMAGE_SET_ID { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIMAGE_SET_IDBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetIMAGE_SET_IDBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetIMAGE_SET_IDArray() { return __p.__vector_as_array<byte>(24); }
  /// The number of images in an image set.
  public int IMAGE_SET_LENGTH { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The sequence ID of an image within an image set.
  public int SEQUENCE_ID { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).
  public ObservationPosition OB_POSITION { get { int o = __p.__offset(30); return o != 0 ? (ObservationPosition)__p.bb.GetSbyte(o + __p.bb_pos) : ObservationPosition.FENCE; } }
  /// Provider maintained ID. May not be consistent with 18SDS SAT_NO.
  public string ORIG_OBJECT_ID { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIG_OBJECT_IDBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetORIG_OBJECT_IDBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetORIG_OBJECT_IDArray() { return __p.__vector_as_array<byte>(32); }
  /// Sensor ID.
  public string ORIG_SENSOR_ID { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIG_SENSOR_IDBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetORIG_SENSOR_IDBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetORIG_SENSOR_IDArray() { return __p.__vector_as_array<byte>(34); }
  /// Required if correlation is attempted. Indicates whether correlation succeeded.
  public bool UCT { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Line of sight azimuth angle in degrees and topocentric frame.
  public float AZIMUTH { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// One sigma uncertainty in the line of sight azimuth angle, in degrees.
  public float AZIMUTH_UNC { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Sensor line of sight azimuth angle bias in degrees.
  public float AZIMUTH_BIAS { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Rate of change of the line of sight azimuth in degrees per second.
  public float AZIMUTH_RATE { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Line of sight elevation in degrees and topocentric frame.
  public float ELEVATION { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// One sigma uncertainty in the line of sight elevation angle, in degrees.
  public float ELEVATION_UNC { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Sensor line of sight elevation bias in degrees.
  public float ELEVATION_BIAS { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Rate of change of the line of sight elevation in degrees per second.
  public float ELEVATION_RATE { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Line of sight range in km. Reported value should include all applicable corrections.
  public float RANGE { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// One sigma uncertainty in the line of sight range, in km.
  public float RANGE_UNC { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Sensor line of sight range bias in km.
  public float RANGE_BIAS { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Range rate in km/s. Reported value should include all applicable corrections.
  public float RANGE_RATE { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// One sigma uncertainty in the line of sight range rate, in km/sec.
  public float RANGE_RATE_UNC { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Right ascension in degrees. Required metric reporting field for EO observations.
  public float RA { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Line of sight right ascension rate of change, in degrees/sec.
  public float RA_RATE { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// One sigma uncertainty in the line of sight right ascension angle, in degrees.
  public float RA_UNC { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Sensor line of sight right ascension bias in degrees.
  public float RA_BIAS { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Declination in degrees. Required metric reporting field for EO observations.
  public float DECLINATION { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Line of sight declination rate of change, in degrees/sec.
  public float DECLINATION_RATE { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// One sigma uncertainty in the line of sight declination angle, in degrees.
  public float DECLINATION_UNC { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Sensor line of sight declination angle bias in degrees.
  public float DECLINATION_BIAS { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// X-component of the unit vector representing the line-of-sight direction in the observer's reference frame.
  public float LOSX { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Y-component of the unit vector representing the line-of-sight direction in the observer's reference frame.
  public float LOSY { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Z-component of the unit vector representing the line-of-sight direction in the observer's reference frame.
  public float LOSZ { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// One sigma uncertainty in the line-of-sight direction vector components.
  public float LOS_UNC { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// X-component of the velocity vector along the line of sight, in km/s.
  public float LOSXVEL { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Y-component of the velocity vector along the line of sight, in km/s.
  public float LOSYVEL { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Z-component of the velocity vector along the line of sight, in km/s.
  public float LOSZVEL { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// WGS-84 latitude in decimal degrees at the time of the observation.
  public float SENLAT { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// WGS-84 longitude in decimal degrees at the time of the observation.
  public float SENLON { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Sensor height in km relative to the WGS-84 ellipsoid at the time of the observation.
  public float SENALT { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Cartesian X position in km at the time of the observation.
  public float SENX { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Cartesian Y position in km at the time of the observation.
  public float SENY { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Cartesian Z position in km at the time of the observation.
  public float SENZ { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Total number of satellites in the field of view.
  public int FOV_COUNT { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of uncorrelated satellites in the field of view (JCO).
  public int FOV_COUNT_UCTS { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Image exposure duration in seconds. For observations performed using frame stacking or synthetic tracking methods, 
  /// the exposure duration should be the total integration time. This field is highly recommended / required if the 
  /// observations are going to be used for photometric processing.
  public float EXP_DURATION { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Formula: 2.5 * log_10 (zero_mag_counts / EXP_DURATION).
  public float ZEROPTD { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Net object signature = counts / EXP_DURATION.
  public float NET_OBJ_SIG { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Net object signature uncertainty = counts uncertainty / EXP_DURATION.
  public float NET_OBJ_SIG_UNC { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Measure of observed brightness calibrated against the Gaia G-band.
  public float MAG { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Uncertainty of the observed brightness.
  public float MAG_UNC { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// [Definition needed].
  public float MAG_NORM_RANGE { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Computed estimate of the latitude, positive degrees north. It should be computed based on the assumed slant range 
  /// and corresponding viewing geometry. It must NOT be computed from the orbit state.
  public float GEOLAT { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Computed estimate of the longitude as +/- 180 degrees east. It should be computed based on the assumed slant range 
  /// and viewing geometry. It must NOT be computed from the orbit state.
  public float GEOLON { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Computed estimate of satellite altitude in km at the reported location. It must NOT be computed from the orbit state.
  public float GEOALT { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Computed estimate of the slant range in km. It must NOT be computed from the orbit state.
  public float GEORANGE { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently 
  /// empty part of the night sky.
  public float SKY_BKGRND { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass 
  /// to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, 
  /// describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical 
  /// object and the observer.
  public float PRIMARY_EXTINCTION { get { int o = __p.__offset(134); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Primary Extinction Coefficient Uncertainty, in Magnitudes.
  public float PRIMARY_EXTINCTION_UNC { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// The angle, in degrees, between the target-to-observer vector and the target-to-sun vector. Recommend using the 
  /// calculation listed in the EOSSA documentation, pg 106 of the EOSSA spec.
  public float SOLAR_PHASE_ANGLE { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector 
  /// onto the equatorial plane. The convention used is negative when closing (i.e., before the opposition) 
  /// and positive when opening (after the opposition).
  public float SOLAR_EQ_PHASE_ANGLE { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Angle from the sun to the equatorial plane.
  public float SOLAR_DEC_ANGLE { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Shutter delay in seconds.
  public float SHUTTER_DELAY { get { int o = __p.__offset(144); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Sensor timing bias in seconds.
  public float TIMING_BIAS { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. 
  public string RAW_FILE_URI { get { int o = __p.__offset(148); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRAW_FILE_URIBytes() { return __p.__vector_as_span<byte>(148, 1); }
#else
  public ArraySegment<byte>? GetRAW_FILE_URIBytes() { return __p.__vector_as_arraysegment(148); }
#endif
  public byte[] GetRAW_FILE_URIArray() { return __p.__vector_as_array<byte>(148); }
  /// Intensity of the target for IR observations, in kw/sr/em.
  public float INTENSITY { get { int o = __p.__offset(150); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Background intensity for IR observations, in kw/sr/um.
  public float BG_INTENSITY { get { int o = __p.__offset(152); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  public string DESCRIPTOR { get { int o = __p.__offset(154); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDESCRIPTORBytes() { return __p.__vector_as_span<byte>(154, 1); }
#else
  public ArraySegment<byte>? GetDESCRIPTORBytes() { return __p.__vector_as_arraysegment(154); }
#endif
  public byte[] GetDESCRIPTORArray() { return __p.__vector_as_array<byte>(154); }
  /// Source of the data.
  public string SOURCE { get { int o = __p.__offset(156); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSOURCEBytes() { return __p.__vector_as_span<byte>(156, 1); }
#else
  public ArraySegment<byte>? GetSOURCEBytes() { return __p.__vector_as_arraysegment(156); }
#endif
  public byte[] GetSOURCEArray() { return __p.__vector_as_array<byte>(156); }
  /// Originating system or organization which produced the data, if different from the source.
  /// The origin may be different than the source if the source was a mediating system which forwarded 
  /// the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  public string ORIGIN { get { int o = __p.__offset(158); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIGINBytes() { return __p.__vector_as_span<byte>(158, 1); }
#else
  public ArraySegment<byte>? GetORIGINBytes() { return __p.__vector_as_arraysegment(158); }
#endif
  public byte[] GetORIGINArray() { return __p.__vector_as_array<byte>(158); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST.
  public DataMode DATA_MODE { get { int o = __p.__offset(160); return o != 0 ? (DataMode)__p.bb.GetSbyte(o + __p.bb_pos) : DataMode.EXERCISE; } }
  /// Time the row was created in the database, auto-populated by the system.
  public string CREATED_AT { get { int o = __p.__offset(162); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCREATED_ATBytes() { return __p.__vector_as_span<byte>(162, 1); }
#else
  public ArraySegment<byte>? GetCREATED_ATBytes() { return __p.__vector_as_arraysegment(162); }
#endif
  public byte[] GetCREATED_ATArray() { return __p.__vector_as_array<byte>(162); }
  /// Application user who created the row in the database, auto-populated by the system.
  public string CREATED_BY { get { int o = __p.__offset(164); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCREATED_BYBytes() { return __p.__vector_as_span<byte>(164, 1); }
#else
  public ArraySegment<byte>? GetCREATED_BYBytes() { return __p.__vector_as_arraysegment(164); }
#endif
  public byte[] GetCREATED_BYArray() { return __p.__vector_as_array<byte>(164); }
  /// EO observations are assumed to be topocentric J2000 coordinates ('J2000') as defined by the IAU, unless otherwise specified.
  public refFrame REFERENCE_FRAME { get { int o = __p.__offset(166); return o != 0 ? (refFrame)__p.bb.GetSbyte(o + __p.bb_pos) : refFrame.ECEF; } }
  /// The sensor reference frame is assumed to be the International Terrestrial Reference Frame (ITRF), 
  /// unless otherwise specified. (ITRF is equivalent to Earth-Centered Earth-Fixed (ECEF) for this purpose). 
  /// Lat / long / height values should be reported using the WGS-84 ellipsoid, where applicable.
  public refFrame SEN_REFERENCE_FRAME { get { int o = __p.__offset(168); return o != 0 ? (refFrame)__p.bb.GetSbyte(o + __p.bb_pos) : refFrame.ECEF; } }
  /// Boolean indicating that the target object was in umbral eclipse at the time of this observation.
  public bool UMBRA { get { int o = __p.__offset(170); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
  /// This field is highly recommended if the observations will be used for photometric processing.
  public bool PENUMBRA { get { int o = __p.__offset(172); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  public string ORIG_NETWORK { get { int o = __p.__offset(174); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIG_NETWORKBytes() { return __p.__vector_as_span<byte>(174, 1); }
#else
  public ArraySegment<byte>? GetORIG_NETWORKBytes() { return __p.__vector_as_arraysegment(174); }
#endif
  public byte[] GetORIG_NETWORKArray() { return __p.__vector_as_array<byte>(174); }
  /// The source from which this record was received.
  public string SOURCE_DL { get { int o = __p.__offset(176); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSOURCE_DLBytes() { return __p.__vector_as_span<byte>(176, 1); }
#else
  public ArraySegment<byte>? GetSOURCE_DLBytes() { return __p.__vector_as_arraysegment(176); }
#endif
  public byte[] GetSOURCE_DLArray() { return __p.__vector_as_array<byte>(176); }
  /// Device Type
  public DeviceType TYPE { get { int o = __p.__offset(178); return o != 0 ? (DeviceType)__p.bb.GetSbyte(o + __p.bb_pos) : DeviceType.UNKNOWN; } }
  /// True if measured, false if computed. Required if azimuth is reported.
  public bool AZIMUTH_MEASURED { get { int o = __p.__offset(180); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// True if measured, false if computed. Required if elevation is reported.
  public bool ELEVATION_MEASURED { get { int o = __p.__offset(182); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// True if measured, false if computed. Required if range is reported.
  public bool RANGE_MEASURED { get { int o = __p.__offset(184); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// True if measured, false if computed. Required if range-rate is reported.
  public bool RANGERATE_MEASURED { get { int o = __p.__offset(186); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// True if measured, false if computed. Required if right ascension is reported.
  public bool RA_MEASURED { get { int o = __p.__offset(188); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// True if measured, false if computed. Required if declination is reported.
  public bool DECLINATION_MEASURED { get { int o = __p.__offset(190); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// National Imagery Interpretability Rating Scale (NIIRS). Ranging from 0 (lowest) to 9 (highest).
  public float NIIRS { get { int o = __p.__offset(192); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Ground sample distance in meters per pixel.
  public float METERS_PER_PIXEL { get { int o = __p.__offset(194); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Signal-to-noise ratio of the image. Higher values indicate cleaner imagery.
  public float IMAGE_SNR { get { int o = __p.__offset(196); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Bit depth of the image (e.g., 8, 12, 16).
  public int IMAGE_BIT_DEPTH { get { int o = __p.__offset(198); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Width of the image in pixels.
  public int IMAGE_WIDTH { get { int o = __p.__offset(200); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Height of the image in pixels.
  public int IMAGE_HEIGHT { get { int o = __p.__offset(202); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Compression type used for the image, e.g., "JPEG", "PNG", "RAW", etc.
  public string IMAGE_COMPRESSION { get { int o = __p.__offset(204); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIMAGE_COMPRESSIONBytes() { return __p.__vector_as_span<byte>(204, 1); }
#else
  public ArraySegment<byte>? GetIMAGE_COMPRESSIONBytes() { return __p.__vector_as_arraysegment(204); }
#endif
  public byte[] GetIMAGE_COMPRESSIONArray() { return __p.__vector_as_array<byte>(204); }
  /// Compression ratio used (original size / compressed size), if applicable.
  public float IMAGE_COMPRESSION_RATIO { get { int o = __p.__offset(206); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// URI to the processed image used for this observation.
  public string PROCESSED_IMAGE_URI { get { int o = __p.__offset(208); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPROCESSED_IMAGE_URIBytes() { return __p.__vector_as_span<byte>(208, 1); }
#else
  public ArraySegment<byte>? GetPROCESSED_IMAGE_URIBytes() { return __p.__vector_as_arraysegment(208); }
#endif
  public byte[] GetPROCESSED_IMAGE_URIArray() { return __p.__vector_as_array<byte>(208); }
  /// Flag indicating whether the image was auto-enhanced (e.g., contrast stretch, denoise).
  public bool IMAGE_AUTO_ENHANCED { get { int o = __p.__offset(210); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// True if the observation was taken with multiple frames stacked into one image.
  public bool MULTI_FRAME_STACKED { get { int o = __p.__offset(212); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// True if synthetic tracking was used to create the image.
  public bool SYNTHETIC_TRACKING_USED { get { int o = __p.__offset(214); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Sharpness metric of the image based on the Tenengrad method or variance of Laplacian. Higher values indicate sharper images.
  public float IMAGE_SHARPNESS { get { int o = __p.__offset(216); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Noise level of the image, estimated via pixel intensity variance in background regions.
  public float IMAGE_NOISE_STDDEV { get { int o = __p.__offset(218); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Contrast metric of the image, such as Michelson contrast or RMS contrast.
  public float IMAGE_CONTRAST { get { int o = __p.__offset(220); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Dynamic range of the image (max pixel value / min pixel value), indicating tonal spread.
  public float IMAGE_DYNAMIC_RANGE { get { int o = __p.__offset(222); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Entropy of the image, representing the richness of information content. Higher entropy suggests higher texture detail.
  public float IMAGE_ENTROPY { get { int o = __p.__offset(224); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Background uniformity metric (e.g., mean gradient in background areas). Lower values indicate more uniform background.
  public float BACKGROUND_UNIFORMITY { get { int o = __p.__offset(226); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Mean background level, computed from non-object regions in pixel units.
  public float BACKGROUND_MEAN_LEVEL { get { int o = __p.__offset(228); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Percentage of saturated pixels in the image. Indicates overexposure when high.
  public float SATURATED_PIXEL_PERCENT { get { int o = __p.__offset(230); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Percentage of dead or zero-value pixels in the image. Indicates sensor defects or underexposure.
  public float DEAD_PIXEL_PERCENT { get { int o = __p.__offset(232); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Estimated Point Spread Function (PSF) Full Width at Half Maximum (FWHM) in pixels. Indicates image blur or focus.
  public float PSF_FWHM { get { int o = __p.__offset(234); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Estimated percentage of cloud cover in the image. Derived using cloud detection algorithms such as Fmask or machine learning classifiers.
  public float CLOUD_COVER_PERCENT { get { int o = __p.__offset(236); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Confidence score of the cloud detection result, from 0 (low confidence) to 1 (high confidence).
  public float CLOUD_DETECTION_CONFIDENCE { get { int o = __p.__offset(238); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Estimated percentage of the image obscured by haze or atmospheric scattering effects.
  public float HAZE_PERCENT { get { int o = __p.__offset(240); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Estimated aerosol optical thickness (AOT) at 550 nm, indicating particulate matter in the atmosphere affecting image clarity.
  public float AEROSOL_OPTICAL_THICKNESS { get { int o = __p.__offset(242); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Estimated water vapor content (e.g., total column precipitable water) at the time of imaging, in mm.
  public float WATER_VAPOR_CONTENT { get { int o = __p.__offset(244); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Sun elevation angle at the time of image capture, in degrees above the horizon.
  public float SUN_ELEVATION { get { int o = __p.__offset(246); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Sun azimuth angle at the time of image capture, in degrees from true north.
  public float SUN_AZIMUTH { get { int o = __p.__offset(248); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// View zenith angle (sensor line-of-sight angle from nadir), in degrees.
  public float VIEW_ZENITH_ANGLE { get { int o = __p.__offset(250); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// View azimuth angle (direction of sensor relative to north), in degrees.
  public float VIEW_AZIMUTH_ANGLE { get { int o = __p.__offset(252); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Off-nadir angle of the sensor at the time of image capture, in degrees.
  public float OFF_NADIR_ANGLE { get { int o = __p.__offset(254); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Ground coverage width of the image swath in kilometers.
  public float SWATH_WIDTH_KM { get { int o = __p.__offset(256); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Mean terrain elevation in the image footprint, in meters above sea level.
  public float MEAN_TERRAIN_ELEVATION { get { int o = __p.__offset(258); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Standard deviation of terrain elevation in the image footprint, in meters.
  public float TERRAIN_ELEVATION_STDDEV { get { int o = __p.__offset(260); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Percentage of the image affected by shadows, derived via topographic or object shadow detection.
  public float SHADOW_COVER_PERCENT { get { int o = __p.__offset(262); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Flag indicating whether sunglint is present in the image (true if high reflectance from water surface due to sun geometry).
  public bool SUNGLINT_PRESENT { get { int o = __p.__offset(264); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Percentage of image affected by sunglint.
  public float SUNGLINT_PERCENT { get { int o = __p.__offset(266); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Estimated percentage of snow or ice coverage in the image footprint.
  public float SNOW_ICE_COVER_PERCENT { get { int o = __p.__offset(268); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Total area covered by valid data (non-masked, usable imagery) in square kilometers.
  public float VALID_DATA_AREA_KM2 { get { int o = __p.__offset(270); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static void StartEOO(FlatBufferBuilder builder) { builder.StartTable(134); }
  public static void AddID(FlatBufferBuilder builder, StringOffset IDOffset) { builder.AddOffset(0, IDOffset.Value, 0); }
  public static void AddCLASSIFICATION(FlatBufferBuilder builder, StringOffset CLASSIFICATIONOffset) { builder.AddOffset(1, CLASSIFICATIONOffset.Value, 0); }
  public static void AddOB_TIME(FlatBufferBuilder builder, StringOffset OB_TIMEOffset) { builder.AddOffset(2, OB_TIMEOffset.Value, 0); }
  public static void AddCORR_QUALITY(FlatBufferBuilder builder, float CORR_QUALITY) { builder.AddFloat(3, CORR_QUALITY, 0.0f); }
  public static void AddID_ON_ORBIT(FlatBufferBuilder builder, StringOffset ID_ON_ORBITOffset) { builder.AddOffset(4, ID_ON_ORBITOffset.Value, 0); }
  public static void AddSENSOR_ID(FlatBufferBuilder builder, StringOffset SENSOR_IDOffset) { builder.AddOffset(5, SENSOR_IDOffset.Value, 0); }
  public static void AddCOLLECT_METHOD(FlatBufferBuilder builder, CollectMethod COLLECT_METHOD) { builder.AddSbyte(6, (sbyte)COLLECT_METHOD, 0); }
  public static void AddNORAD_CAT_ID(FlatBufferBuilder builder, int NORAD_CAT_ID) { builder.AddInt(7, NORAD_CAT_ID, 0); }
  public static void AddTASK_ID(FlatBufferBuilder builder, StringOffset TASK_IDOffset) { builder.AddOffset(8, TASK_IDOffset.Value, 0); }
  public static void AddTRANSACTION_ID(FlatBufferBuilder builder, StringOffset TRANSACTION_IDOffset) { builder.AddOffset(9, TRANSACTION_IDOffset.Value, 0); }
  public static void AddIMAGE_SET_ID(FlatBufferBuilder builder, StringOffset IMAGE_SET_IDOffset) { builder.AddOffset(10, IMAGE_SET_IDOffset.Value, 0); }
  public static void AddIMAGE_SET_LENGTH(FlatBufferBuilder builder, int IMAGE_SET_LENGTH) { builder.AddInt(11, IMAGE_SET_LENGTH, 0); }
  public static void AddSEQUENCE_ID(FlatBufferBuilder builder, int SEQUENCE_ID) { builder.AddInt(12, SEQUENCE_ID, 0); }
  public static void AddOB_POSITION(FlatBufferBuilder builder, ObservationPosition OB_POSITION) { builder.AddSbyte(13, (sbyte)OB_POSITION, 0); }
  public static void AddORIG_OBJECT_ID(FlatBufferBuilder builder, StringOffset ORIG_OBJECT_IDOffset) { builder.AddOffset(14, ORIG_OBJECT_IDOffset.Value, 0); }
  public static void AddORIG_SENSOR_ID(FlatBufferBuilder builder, StringOffset ORIG_SENSOR_IDOffset) { builder.AddOffset(15, ORIG_SENSOR_IDOffset.Value, 0); }
  public static void AddUCT(FlatBufferBuilder builder, bool UCT) { builder.AddBool(16, UCT, false); }
  public static void AddAZIMUTH(FlatBufferBuilder builder, float AZIMUTH) { builder.AddFloat(17, AZIMUTH, 0.0f); }
  public static void AddAZIMUTH_UNC(FlatBufferBuilder builder, float AZIMUTH_UNC) { builder.AddFloat(18, AZIMUTH_UNC, 0.0f); }
  public static void AddAZIMUTH_BIAS(FlatBufferBuilder builder, float AZIMUTH_BIAS) { builder.AddFloat(19, AZIMUTH_BIAS, 0.0f); }
  public static void AddAZIMUTH_RATE(FlatBufferBuilder builder, float AZIMUTH_RATE) { builder.AddFloat(20, AZIMUTH_RATE, 0.0f); }
  public static void AddELEVATION(FlatBufferBuilder builder, float ELEVATION) { builder.AddFloat(21, ELEVATION, 0.0f); }
  public static void AddELEVATION_UNC(FlatBufferBuilder builder, float ELEVATION_UNC) { builder.AddFloat(22, ELEVATION_UNC, 0.0f); }
  public static void AddELEVATION_BIAS(FlatBufferBuilder builder, float ELEVATION_BIAS) { builder.AddFloat(23, ELEVATION_BIAS, 0.0f); }
  public static void AddELEVATION_RATE(FlatBufferBuilder builder, float ELEVATION_RATE) { builder.AddFloat(24, ELEVATION_RATE, 0.0f); }
  public static void AddRANGE(FlatBufferBuilder builder, float RANGE) { builder.AddFloat(25, RANGE, 0.0f); }
  public static void AddRANGE_UNC(FlatBufferBuilder builder, float RANGE_UNC) { builder.AddFloat(26, RANGE_UNC, 0.0f); }
  public static void AddRANGE_BIAS(FlatBufferBuilder builder, float RANGE_BIAS) { builder.AddFloat(27, RANGE_BIAS, 0.0f); }
  public static void AddRANGE_RATE(FlatBufferBuilder builder, float RANGE_RATE) { builder.AddFloat(28, RANGE_RATE, 0.0f); }
  public static void AddRANGE_RATE_UNC(FlatBufferBuilder builder, float RANGE_RATE_UNC) { builder.AddFloat(29, RANGE_RATE_UNC, 0.0f); }
  public static void AddRA(FlatBufferBuilder builder, float RA) { builder.AddFloat(30, RA, 0.0f); }
  public static void AddRA_RATE(FlatBufferBuilder builder, float RA_RATE) { builder.AddFloat(31, RA_RATE, 0.0f); }
  public static void AddRA_UNC(FlatBufferBuilder builder, float RA_UNC) { builder.AddFloat(32, RA_UNC, 0.0f); }
  public static void AddRA_BIAS(FlatBufferBuilder builder, float RA_BIAS) { builder.AddFloat(33, RA_BIAS, 0.0f); }
  public static void AddDECLINATION(FlatBufferBuilder builder, float DECLINATION) { builder.AddFloat(34, DECLINATION, 0.0f); }
  public static void AddDECLINATION_RATE(FlatBufferBuilder builder, float DECLINATION_RATE) { builder.AddFloat(35, DECLINATION_RATE, 0.0f); }
  public static void AddDECLINATION_UNC(FlatBufferBuilder builder, float DECLINATION_UNC) { builder.AddFloat(36, DECLINATION_UNC, 0.0f); }
  public static void AddDECLINATION_BIAS(FlatBufferBuilder builder, float DECLINATION_BIAS) { builder.AddFloat(37, DECLINATION_BIAS, 0.0f); }
  public static void AddLOSX(FlatBufferBuilder builder, float LOSX) { builder.AddFloat(38, LOSX, 0.0f); }
  public static void AddLOSY(FlatBufferBuilder builder, float LOSY) { builder.AddFloat(39, LOSY, 0.0f); }
  public static void AddLOSZ(FlatBufferBuilder builder, float LOSZ) { builder.AddFloat(40, LOSZ, 0.0f); }
  public static void AddLOS_UNC(FlatBufferBuilder builder, float LOS_UNC) { builder.AddFloat(41, LOS_UNC, 0.0f); }
  public static void AddLOSXVEL(FlatBufferBuilder builder, float LOSXVEL) { builder.AddFloat(42, LOSXVEL, 0.0f); }
  public static void AddLOSYVEL(FlatBufferBuilder builder, float LOSYVEL) { builder.AddFloat(43, LOSYVEL, 0.0f); }
  public static void AddLOSZVEL(FlatBufferBuilder builder, float LOSZVEL) { builder.AddFloat(44, LOSZVEL, 0.0f); }
  public static void AddSENLAT(FlatBufferBuilder builder, float SENLAT) { builder.AddFloat(45, SENLAT, 0.0f); }
  public static void AddSENLON(FlatBufferBuilder builder, float SENLON) { builder.AddFloat(46, SENLON, 0.0f); }
  public static void AddSENALT(FlatBufferBuilder builder, float SENALT) { builder.AddFloat(47, SENALT, 0.0f); }
  public static void AddSENX(FlatBufferBuilder builder, float SENX) { builder.AddFloat(48, SENX, 0.0f); }
  public static void AddSENY(FlatBufferBuilder builder, float SENY) { builder.AddFloat(49, SENY, 0.0f); }
  public static void AddSENZ(FlatBufferBuilder builder, float SENZ) { builder.AddFloat(50, SENZ, 0.0f); }
  public static void AddFOV_COUNT(FlatBufferBuilder builder, int FOV_COUNT) { builder.AddInt(51, FOV_COUNT, 0); }
  public static void AddFOV_COUNT_UCTS(FlatBufferBuilder builder, int FOV_COUNT_UCTS) { builder.AddInt(52, FOV_COUNT_UCTS, 0); }
  public static void AddEXP_DURATION(FlatBufferBuilder builder, float EXP_DURATION) { builder.AddFloat(53, EXP_DURATION, 0.0f); }
  public static void AddZEROPTD(FlatBufferBuilder builder, float ZEROPTD) { builder.AddFloat(54, ZEROPTD, 0.0f); }
  public static void AddNET_OBJ_SIG(FlatBufferBuilder builder, float NET_OBJ_SIG) { builder.AddFloat(55, NET_OBJ_SIG, 0.0f); }
  public static void AddNET_OBJ_SIG_UNC(FlatBufferBuilder builder, float NET_OBJ_SIG_UNC) { builder.AddFloat(56, NET_OBJ_SIG_UNC, 0.0f); }
  public static void AddMAG(FlatBufferBuilder builder, float MAG) { builder.AddFloat(57, MAG, 0.0f); }
  public static void AddMAG_UNC(FlatBufferBuilder builder, float MAG_UNC) { builder.AddFloat(58, MAG_UNC, 0.0f); }
  public static void AddMAG_NORM_RANGE(FlatBufferBuilder builder, float MAG_NORM_RANGE) { builder.AddFloat(59, MAG_NORM_RANGE, 0.0f); }
  public static void AddGEOLAT(FlatBufferBuilder builder, float GEOLAT) { builder.AddFloat(60, GEOLAT, 0.0f); }
  public static void AddGEOLON(FlatBufferBuilder builder, float GEOLON) { builder.AddFloat(61, GEOLON, 0.0f); }
  public static void AddGEOALT(FlatBufferBuilder builder, float GEOALT) { builder.AddFloat(62, GEOALT, 0.0f); }
  public static void AddGEORANGE(FlatBufferBuilder builder, float GEORANGE) { builder.AddFloat(63, GEORANGE, 0.0f); }
  public static void AddSKY_BKGRND(FlatBufferBuilder builder, float SKY_BKGRND) { builder.AddFloat(64, SKY_BKGRND, 0.0f); }
  public static void AddPRIMARY_EXTINCTION(FlatBufferBuilder builder, float PRIMARY_EXTINCTION) { builder.AddFloat(65, PRIMARY_EXTINCTION, 0.0f); }
  public static void AddPRIMARY_EXTINCTION_UNC(FlatBufferBuilder builder, float PRIMARY_EXTINCTION_UNC) { builder.AddFloat(66, PRIMARY_EXTINCTION_UNC, 0.0f); }
  public static void AddSOLAR_PHASE_ANGLE(FlatBufferBuilder builder, float SOLAR_PHASE_ANGLE) { builder.AddFloat(67, SOLAR_PHASE_ANGLE, 0.0f); }
  public static void AddSOLAR_EQ_PHASE_ANGLE(FlatBufferBuilder builder, float SOLAR_EQ_PHASE_ANGLE) { builder.AddFloat(68, SOLAR_EQ_PHASE_ANGLE, 0.0f); }
  public static void AddSOLAR_DEC_ANGLE(FlatBufferBuilder builder, float SOLAR_DEC_ANGLE) { builder.AddFloat(69, SOLAR_DEC_ANGLE, 0.0f); }
  public static void AddSHUTTER_DELAY(FlatBufferBuilder builder, float SHUTTER_DELAY) { builder.AddFloat(70, SHUTTER_DELAY, 0.0f); }
  public static void AddTIMING_BIAS(FlatBufferBuilder builder, float TIMING_BIAS) { builder.AddFloat(71, TIMING_BIAS, 0.0f); }
  public static void AddRAW_FILE_URI(FlatBufferBuilder builder, StringOffset RAW_FILE_URIOffset) { builder.AddOffset(72, RAW_FILE_URIOffset.Value, 0); }
  public static void AddINTENSITY(FlatBufferBuilder builder, float INTENSITY) { builder.AddFloat(73, INTENSITY, 0.0f); }
  public static void AddBG_INTENSITY(FlatBufferBuilder builder, float BG_INTENSITY) { builder.AddFloat(74, BG_INTENSITY, 0.0f); }
  public static void AddDESCRIPTOR(FlatBufferBuilder builder, StringOffset DESCRIPTOROffset) { builder.AddOffset(75, DESCRIPTOROffset.Value, 0); }
  public static void AddSOURCE(FlatBufferBuilder builder, StringOffset SOURCEOffset) { builder.AddOffset(76, SOURCEOffset.Value, 0); }
  public static void AddORIGIN(FlatBufferBuilder builder, StringOffset ORIGINOffset) { builder.AddOffset(77, ORIGINOffset.Value, 0); }
  public static void AddDATA_MODE(FlatBufferBuilder builder, DataMode DATA_MODE) { builder.AddSbyte(78, (sbyte)DATA_MODE, 0); }
  public static void AddCREATED_AT(FlatBufferBuilder builder, StringOffset CREATED_ATOffset) { builder.AddOffset(79, CREATED_ATOffset.Value, 0); }
  public static void AddCREATED_BY(FlatBufferBuilder builder, StringOffset CREATED_BYOffset) { builder.AddOffset(80, CREATED_BYOffset.Value, 0); }
  public static void AddREFERENCE_FRAME(FlatBufferBuilder builder, refFrame REFERENCE_FRAME) { builder.AddSbyte(81, (sbyte)REFERENCE_FRAME, 0); }
  public static void AddSEN_REFERENCE_FRAME(FlatBufferBuilder builder, refFrame SEN_REFERENCE_FRAME) { builder.AddSbyte(82, (sbyte)SEN_REFERENCE_FRAME, 0); }
  public static void AddUMBRA(FlatBufferBuilder builder, bool UMBRA) { builder.AddBool(83, UMBRA, false); }
  public static void AddPENUMBRA(FlatBufferBuilder builder, bool PENUMBRA) { builder.AddBool(84, PENUMBRA, false); }
  public static void AddORIG_NETWORK(FlatBufferBuilder builder, StringOffset ORIG_NETWORKOffset) { builder.AddOffset(85, ORIG_NETWORKOffset.Value, 0); }
  public static void AddSOURCE_DL(FlatBufferBuilder builder, StringOffset SOURCE_DLOffset) { builder.AddOffset(86, SOURCE_DLOffset.Value, 0); }
  public static void AddTYPE(FlatBufferBuilder builder, DeviceType TYPE) { builder.AddSbyte(87, (sbyte)TYPE, 0); }
  public static void AddAZIMUTH_MEASURED(FlatBufferBuilder builder, bool AZIMUTH_MEASURED) { builder.AddBool(88, AZIMUTH_MEASURED, false); }
  public static void AddELEVATION_MEASURED(FlatBufferBuilder builder, bool ELEVATION_MEASURED) { builder.AddBool(89, ELEVATION_MEASURED, false); }
  public static void AddRANGE_MEASURED(FlatBufferBuilder builder, bool RANGE_MEASURED) { builder.AddBool(90, RANGE_MEASURED, false); }
  public static void AddRANGERATE_MEASURED(FlatBufferBuilder builder, bool RANGERATE_MEASURED) { builder.AddBool(91, RANGERATE_MEASURED, false); }
  public static void AddRA_MEASURED(FlatBufferBuilder builder, bool RA_MEASURED) { builder.AddBool(92, RA_MEASURED, false); }
  public static void AddDECLINATION_MEASURED(FlatBufferBuilder builder, bool DECLINATION_MEASURED) { builder.AddBool(93, DECLINATION_MEASURED, false); }
  public static void AddNIIRS(FlatBufferBuilder builder, float NIIRS) { builder.AddFloat(94, NIIRS, 0.0f); }
  public static void AddMETERS_PER_PIXEL(FlatBufferBuilder builder, float METERS_PER_PIXEL) { builder.AddFloat(95, METERS_PER_PIXEL, 0.0f); }
  public static void AddIMAGE_SNR(FlatBufferBuilder builder, float IMAGE_SNR) { builder.AddFloat(96, IMAGE_SNR, 0.0f); }
  public static void AddIMAGE_BIT_DEPTH(FlatBufferBuilder builder, int IMAGE_BIT_DEPTH) { builder.AddInt(97, IMAGE_BIT_DEPTH, 0); }
  public static void AddIMAGE_WIDTH(FlatBufferBuilder builder, int IMAGE_WIDTH) { builder.AddInt(98, IMAGE_WIDTH, 0); }
  public static void AddIMAGE_HEIGHT(FlatBufferBuilder builder, int IMAGE_HEIGHT) { builder.AddInt(99, IMAGE_HEIGHT, 0); }
  public static void AddIMAGE_COMPRESSION(FlatBufferBuilder builder, StringOffset IMAGE_COMPRESSIONOffset) { builder.AddOffset(100, IMAGE_COMPRESSIONOffset.Value, 0); }
  public static void AddIMAGE_COMPRESSION_RATIO(FlatBufferBuilder builder, float IMAGE_COMPRESSION_RATIO) { builder.AddFloat(101, IMAGE_COMPRESSION_RATIO, 0.0f); }
  public static void AddPROCESSED_IMAGE_URI(FlatBufferBuilder builder, StringOffset PROCESSED_IMAGE_URIOffset) { builder.AddOffset(102, PROCESSED_IMAGE_URIOffset.Value, 0); }
  public static void AddIMAGE_AUTO_ENHANCED(FlatBufferBuilder builder, bool IMAGE_AUTO_ENHANCED) { builder.AddBool(103, IMAGE_AUTO_ENHANCED, false); }
  public static void AddMULTI_FRAME_STACKED(FlatBufferBuilder builder, bool MULTI_FRAME_STACKED) { builder.AddBool(104, MULTI_FRAME_STACKED, false); }
  public static void AddSYNTHETIC_TRACKING_USED(FlatBufferBuilder builder, bool SYNTHETIC_TRACKING_USED) { builder.AddBool(105, SYNTHETIC_TRACKING_USED, false); }
  public static void AddIMAGE_SHARPNESS(FlatBufferBuilder builder, float IMAGE_SHARPNESS) { builder.AddFloat(106, IMAGE_SHARPNESS, 0.0f); }
  public static void AddIMAGE_NOISE_STDDEV(FlatBufferBuilder builder, float IMAGE_NOISE_STDDEV) { builder.AddFloat(107, IMAGE_NOISE_STDDEV, 0.0f); }
  public static void AddIMAGE_CONTRAST(FlatBufferBuilder builder, float IMAGE_CONTRAST) { builder.AddFloat(108, IMAGE_CONTRAST, 0.0f); }
  public static void AddIMAGE_DYNAMIC_RANGE(FlatBufferBuilder builder, float IMAGE_DYNAMIC_RANGE) { builder.AddFloat(109, IMAGE_DYNAMIC_RANGE, 0.0f); }
  public static void AddIMAGE_ENTROPY(FlatBufferBuilder builder, float IMAGE_ENTROPY) { builder.AddFloat(110, IMAGE_ENTROPY, 0.0f); }
  public static void AddBACKGROUND_UNIFORMITY(FlatBufferBuilder builder, float BACKGROUND_UNIFORMITY) { builder.AddFloat(111, BACKGROUND_UNIFORMITY, 0.0f); }
  public static void AddBACKGROUND_MEAN_LEVEL(FlatBufferBuilder builder, float BACKGROUND_MEAN_LEVEL) { builder.AddFloat(112, BACKGROUND_MEAN_LEVEL, 0.0f); }
  public static void AddSATURATED_PIXEL_PERCENT(FlatBufferBuilder builder, float SATURATED_PIXEL_PERCENT) { builder.AddFloat(113, SATURATED_PIXEL_PERCENT, 0.0f); }
  public static void AddDEAD_PIXEL_PERCENT(FlatBufferBuilder builder, float DEAD_PIXEL_PERCENT) { builder.AddFloat(114, DEAD_PIXEL_PERCENT, 0.0f); }
  public static void AddPSF_FWHM(FlatBufferBuilder builder, float PSF_FWHM) { builder.AddFloat(115, PSF_FWHM, 0.0f); }
  public static void AddCLOUD_COVER_PERCENT(FlatBufferBuilder builder, float CLOUD_COVER_PERCENT) { builder.AddFloat(116, CLOUD_COVER_PERCENT, 0.0f); }
  public static void AddCLOUD_DETECTION_CONFIDENCE(FlatBufferBuilder builder, float CLOUD_DETECTION_CONFIDENCE) { builder.AddFloat(117, CLOUD_DETECTION_CONFIDENCE, 0.0f); }
  public static void AddHAZE_PERCENT(FlatBufferBuilder builder, float HAZE_PERCENT) { builder.AddFloat(118, HAZE_PERCENT, 0.0f); }
  public static void AddAEROSOL_OPTICAL_THICKNESS(FlatBufferBuilder builder, float AEROSOL_OPTICAL_THICKNESS) { builder.AddFloat(119, AEROSOL_OPTICAL_THICKNESS, 0.0f); }
  public static void AddWATER_VAPOR_CONTENT(FlatBufferBuilder builder, float WATER_VAPOR_CONTENT) { builder.AddFloat(120, WATER_VAPOR_CONTENT, 0.0f); }
  public static void AddSUN_ELEVATION(FlatBufferBuilder builder, float SUN_ELEVATION) { builder.AddFloat(121, SUN_ELEVATION, 0.0f); }
  public static void AddSUN_AZIMUTH(FlatBufferBuilder builder, float SUN_AZIMUTH) { builder.AddFloat(122, SUN_AZIMUTH, 0.0f); }
  public static void AddVIEW_ZENITH_ANGLE(FlatBufferBuilder builder, float VIEW_ZENITH_ANGLE) { builder.AddFloat(123, VIEW_ZENITH_ANGLE, 0.0f); }
  public static void AddVIEW_AZIMUTH_ANGLE(FlatBufferBuilder builder, float VIEW_AZIMUTH_ANGLE) { builder.AddFloat(124, VIEW_AZIMUTH_ANGLE, 0.0f); }
  public static void AddOFF_NADIR_ANGLE(FlatBufferBuilder builder, float OFF_NADIR_ANGLE) { builder.AddFloat(125, OFF_NADIR_ANGLE, 0.0f); }
  public static void AddSWATH_WIDTH_KM(FlatBufferBuilder builder, float SWATH_WIDTH_KM) { builder.AddFloat(126, SWATH_WIDTH_KM, 0.0f); }
  public static void AddMEAN_TERRAIN_ELEVATION(FlatBufferBuilder builder, float MEAN_TERRAIN_ELEVATION) { builder.AddFloat(127, MEAN_TERRAIN_ELEVATION, 0.0f); }
  public static void AddTERRAIN_ELEVATION_STDDEV(FlatBufferBuilder builder, float TERRAIN_ELEVATION_STDDEV) { builder.AddFloat(128, TERRAIN_ELEVATION_STDDEV, 0.0f); }
  public static void AddSHADOW_COVER_PERCENT(FlatBufferBuilder builder, float SHADOW_COVER_PERCENT) { builder.AddFloat(129, SHADOW_COVER_PERCENT, 0.0f); }
  public static void AddSUNGLINT_PRESENT(FlatBufferBuilder builder, bool SUNGLINT_PRESENT) { builder.AddBool(130, SUNGLINT_PRESENT, false); }
  public static void AddSUNGLINT_PERCENT(FlatBufferBuilder builder, float SUNGLINT_PERCENT) { builder.AddFloat(131, SUNGLINT_PERCENT, 0.0f); }
  public static void AddSNOW_ICE_COVER_PERCENT(FlatBufferBuilder builder, float SNOW_ICE_COVER_PERCENT) { builder.AddFloat(132, SNOW_ICE_COVER_PERCENT, 0.0f); }
  public static void AddVALID_DATA_AREA_KM2(FlatBufferBuilder builder, float VALID_DATA_AREA_KM2) { builder.AddFloat(133, VALID_DATA_AREA_KM2, 0.0f); }
  public static Offset<EOO> EndEOO(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EOO>(o);
  }
  public static void FinishEOOBuffer(FlatBufferBuilder builder, Offset<EOO> offset) { builder.Finish(offset.Value, "$EOO"); }
  public static void FinishSizePrefixedEOOBuffer(FlatBufferBuilder builder, Offset<EOO> offset) { builder.FinishSizePrefixed(offset.Value, "$EOO"); }
  public EOOT UnPack() {
    var _o = new EOOT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EOOT _o) {
    _o.ID = this.ID;
    _o.CLASSIFICATION = this.CLASSIFICATION;
    _o.OB_TIME = this.OB_TIME;
    _o.CORR_QUALITY = this.CORR_QUALITY;
    _o.ID_ON_ORBIT = this.ID_ON_ORBIT;
    _o.SENSOR_ID = this.SENSOR_ID;
    _o.COLLECT_METHOD = this.COLLECT_METHOD;
    _o.NORAD_CAT_ID = this.NORAD_CAT_ID;
    _o.TASK_ID = this.TASK_ID;
    _o.TRANSACTION_ID = this.TRANSACTION_ID;
    _o.IMAGE_SET_ID = this.IMAGE_SET_ID;
    _o.IMAGE_SET_LENGTH = this.IMAGE_SET_LENGTH;
    _o.SEQUENCE_ID = this.SEQUENCE_ID;
    _o.OB_POSITION = this.OB_POSITION;
    _o.ORIG_OBJECT_ID = this.ORIG_OBJECT_ID;
    _o.ORIG_SENSOR_ID = this.ORIG_SENSOR_ID;
    _o.UCT = this.UCT;
    _o.AZIMUTH = this.AZIMUTH;
    _o.AZIMUTH_UNC = this.AZIMUTH_UNC;
    _o.AZIMUTH_BIAS = this.AZIMUTH_BIAS;
    _o.AZIMUTH_RATE = this.AZIMUTH_RATE;
    _o.ELEVATION = this.ELEVATION;
    _o.ELEVATION_UNC = this.ELEVATION_UNC;
    _o.ELEVATION_BIAS = this.ELEVATION_BIAS;
    _o.ELEVATION_RATE = this.ELEVATION_RATE;
    _o.RANGE = this.RANGE;
    _o.RANGE_UNC = this.RANGE_UNC;
    _o.RANGE_BIAS = this.RANGE_BIAS;
    _o.RANGE_RATE = this.RANGE_RATE;
    _o.RANGE_RATE_UNC = this.RANGE_RATE_UNC;
    _o.RA = this.RA;
    _o.RA_RATE = this.RA_RATE;
    _o.RA_UNC = this.RA_UNC;
    _o.RA_BIAS = this.RA_BIAS;
    _o.DECLINATION = this.DECLINATION;
    _o.DECLINATION_RATE = this.DECLINATION_RATE;
    _o.DECLINATION_UNC = this.DECLINATION_UNC;
    _o.DECLINATION_BIAS = this.DECLINATION_BIAS;
    _o.LOSX = this.LOSX;
    _o.LOSY = this.LOSY;
    _o.LOSZ = this.LOSZ;
    _o.LOS_UNC = this.LOS_UNC;
    _o.LOSXVEL = this.LOSXVEL;
    _o.LOSYVEL = this.LOSYVEL;
    _o.LOSZVEL = this.LOSZVEL;
    _o.SENLAT = this.SENLAT;
    _o.SENLON = this.SENLON;
    _o.SENALT = this.SENALT;
    _o.SENX = this.SENX;
    _o.SENY = this.SENY;
    _o.SENZ = this.SENZ;
    _o.FOV_COUNT = this.FOV_COUNT;
    _o.FOV_COUNT_UCTS = this.FOV_COUNT_UCTS;
    _o.EXP_DURATION = this.EXP_DURATION;
    _o.ZEROPTD = this.ZEROPTD;
    _o.NET_OBJ_SIG = this.NET_OBJ_SIG;
    _o.NET_OBJ_SIG_UNC = this.NET_OBJ_SIG_UNC;
    _o.MAG = this.MAG;
    _o.MAG_UNC = this.MAG_UNC;
    _o.MAG_NORM_RANGE = this.MAG_NORM_RANGE;
    _o.GEOLAT = this.GEOLAT;
    _o.GEOLON = this.GEOLON;
    _o.GEOALT = this.GEOALT;
    _o.GEORANGE = this.GEORANGE;
    _o.SKY_BKGRND = this.SKY_BKGRND;
    _o.PRIMARY_EXTINCTION = this.PRIMARY_EXTINCTION;
    _o.PRIMARY_EXTINCTION_UNC = this.PRIMARY_EXTINCTION_UNC;
    _o.SOLAR_PHASE_ANGLE = this.SOLAR_PHASE_ANGLE;
    _o.SOLAR_EQ_PHASE_ANGLE = this.SOLAR_EQ_PHASE_ANGLE;
    _o.SOLAR_DEC_ANGLE = this.SOLAR_DEC_ANGLE;
    _o.SHUTTER_DELAY = this.SHUTTER_DELAY;
    _o.TIMING_BIAS = this.TIMING_BIAS;
    _o.RAW_FILE_URI = this.RAW_FILE_URI;
    _o.INTENSITY = this.INTENSITY;
    _o.BG_INTENSITY = this.BG_INTENSITY;
    _o.DESCRIPTOR = this.DESCRIPTOR;
    _o.SOURCE = this.SOURCE;
    _o.ORIGIN = this.ORIGIN;
    _o.DATA_MODE = this.DATA_MODE;
    _o.CREATED_AT = this.CREATED_AT;
    _o.CREATED_BY = this.CREATED_BY;
    _o.REFERENCE_FRAME = this.REFERENCE_FRAME;
    _o.SEN_REFERENCE_FRAME = this.SEN_REFERENCE_FRAME;
    _o.UMBRA = this.UMBRA;
    _o.PENUMBRA = this.PENUMBRA;
    _o.ORIG_NETWORK = this.ORIG_NETWORK;
    _o.SOURCE_DL = this.SOURCE_DL;
    _o.TYPE = this.TYPE;
    _o.AZIMUTH_MEASURED = this.AZIMUTH_MEASURED;
    _o.ELEVATION_MEASURED = this.ELEVATION_MEASURED;
    _o.RANGE_MEASURED = this.RANGE_MEASURED;
    _o.RANGERATE_MEASURED = this.RANGERATE_MEASURED;
    _o.RA_MEASURED = this.RA_MEASURED;
    _o.DECLINATION_MEASURED = this.DECLINATION_MEASURED;
    _o.NIIRS = this.NIIRS;
    _o.METERS_PER_PIXEL = this.METERS_PER_PIXEL;
    _o.IMAGE_SNR = this.IMAGE_SNR;
    _o.IMAGE_BIT_DEPTH = this.IMAGE_BIT_DEPTH;
    _o.IMAGE_WIDTH = this.IMAGE_WIDTH;
    _o.IMAGE_HEIGHT = this.IMAGE_HEIGHT;
    _o.IMAGE_COMPRESSION = this.IMAGE_COMPRESSION;
    _o.IMAGE_COMPRESSION_RATIO = this.IMAGE_COMPRESSION_RATIO;
    _o.PROCESSED_IMAGE_URI = this.PROCESSED_IMAGE_URI;
    _o.IMAGE_AUTO_ENHANCED = this.IMAGE_AUTO_ENHANCED;
    _o.MULTI_FRAME_STACKED = this.MULTI_FRAME_STACKED;
    _o.SYNTHETIC_TRACKING_USED = this.SYNTHETIC_TRACKING_USED;
    _o.IMAGE_SHARPNESS = this.IMAGE_SHARPNESS;
    _o.IMAGE_NOISE_STDDEV = this.IMAGE_NOISE_STDDEV;
    _o.IMAGE_CONTRAST = this.IMAGE_CONTRAST;
    _o.IMAGE_DYNAMIC_RANGE = this.IMAGE_DYNAMIC_RANGE;
    _o.IMAGE_ENTROPY = this.IMAGE_ENTROPY;
    _o.BACKGROUND_UNIFORMITY = this.BACKGROUND_UNIFORMITY;
    _o.BACKGROUND_MEAN_LEVEL = this.BACKGROUND_MEAN_LEVEL;
    _o.SATURATED_PIXEL_PERCENT = this.SATURATED_PIXEL_PERCENT;
    _o.DEAD_PIXEL_PERCENT = this.DEAD_PIXEL_PERCENT;
    _o.PSF_FWHM = this.PSF_FWHM;
    _o.CLOUD_COVER_PERCENT = this.CLOUD_COVER_PERCENT;
    _o.CLOUD_DETECTION_CONFIDENCE = this.CLOUD_DETECTION_CONFIDENCE;
    _o.HAZE_PERCENT = this.HAZE_PERCENT;
    _o.AEROSOL_OPTICAL_THICKNESS = this.AEROSOL_OPTICAL_THICKNESS;
    _o.WATER_VAPOR_CONTENT = this.WATER_VAPOR_CONTENT;
    _o.SUN_ELEVATION = this.SUN_ELEVATION;
    _o.SUN_AZIMUTH = this.SUN_AZIMUTH;
    _o.VIEW_ZENITH_ANGLE = this.VIEW_ZENITH_ANGLE;
    _o.VIEW_AZIMUTH_ANGLE = this.VIEW_AZIMUTH_ANGLE;
    _o.OFF_NADIR_ANGLE = this.OFF_NADIR_ANGLE;
    _o.SWATH_WIDTH_KM = this.SWATH_WIDTH_KM;
    _o.MEAN_TERRAIN_ELEVATION = this.MEAN_TERRAIN_ELEVATION;
    _o.TERRAIN_ELEVATION_STDDEV = this.TERRAIN_ELEVATION_STDDEV;
    _o.SHADOW_COVER_PERCENT = this.SHADOW_COVER_PERCENT;
    _o.SUNGLINT_PRESENT = this.SUNGLINT_PRESENT;
    _o.SUNGLINT_PERCENT = this.SUNGLINT_PERCENT;
    _o.SNOW_ICE_COVER_PERCENT = this.SNOW_ICE_COVER_PERCENT;
    _o.VALID_DATA_AREA_KM2 = this.VALID_DATA_AREA_KM2;
  }
  public static Offset<EOO> Pack(FlatBufferBuilder builder, EOOT _o) {
    if (_o == null) return default(Offset<EOO>);
    var _ID = _o.ID == null ? default(StringOffset) : builder.CreateString(_o.ID);
    var _CLASSIFICATION = _o.CLASSIFICATION == null ? default(StringOffset) : builder.CreateString(_o.CLASSIFICATION);
    var _OB_TIME = _o.OB_TIME == null ? default(StringOffset) : builder.CreateString(_o.OB_TIME);
    var _ID_ON_ORBIT = _o.ID_ON_ORBIT == null ? default(StringOffset) : builder.CreateString(_o.ID_ON_ORBIT);
    var _SENSOR_ID = _o.SENSOR_ID == null ? default(StringOffset) : builder.CreateString(_o.SENSOR_ID);
    var _TASK_ID = _o.TASK_ID == null ? default(StringOffset) : builder.CreateString(_o.TASK_ID);
    var _TRANSACTION_ID = _o.TRANSACTION_ID == null ? default(StringOffset) : builder.CreateString(_o.TRANSACTION_ID);
    var _IMAGE_SET_ID = _o.IMAGE_SET_ID == null ? default(StringOffset) : builder.CreateString(_o.IMAGE_SET_ID);
    var _ORIG_OBJECT_ID = _o.ORIG_OBJECT_ID == null ? default(StringOffset) : builder.CreateString(_o.ORIG_OBJECT_ID);
    var _ORIG_SENSOR_ID = _o.ORIG_SENSOR_ID == null ? default(StringOffset) : builder.CreateString(_o.ORIG_SENSOR_ID);
    var _RAW_FILE_URI = _o.RAW_FILE_URI == null ? default(StringOffset) : builder.CreateString(_o.RAW_FILE_URI);
    var _DESCRIPTOR = _o.DESCRIPTOR == null ? default(StringOffset) : builder.CreateString(_o.DESCRIPTOR);
    var _SOURCE = _o.SOURCE == null ? default(StringOffset) : builder.CreateString(_o.SOURCE);
    var _ORIGIN = _o.ORIGIN == null ? default(StringOffset) : builder.CreateString(_o.ORIGIN);
    var _CREATED_AT = _o.CREATED_AT == null ? default(StringOffset) : builder.CreateString(_o.CREATED_AT);
    var _CREATED_BY = _o.CREATED_BY == null ? default(StringOffset) : builder.CreateString(_o.CREATED_BY);
    var _ORIG_NETWORK = _o.ORIG_NETWORK == null ? default(StringOffset) : builder.CreateString(_o.ORIG_NETWORK);
    var _SOURCE_DL = _o.SOURCE_DL == null ? default(StringOffset) : builder.CreateString(_o.SOURCE_DL);
    var _IMAGE_COMPRESSION = _o.IMAGE_COMPRESSION == null ? default(StringOffset) : builder.CreateString(_o.IMAGE_COMPRESSION);
    var _PROCESSED_IMAGE_URI = _o.PROCESSED_IMAGE_URI == null ? default(StringOffset) : builder.CreateString(_o.PROCESSED_IMAGE_URI);
    StartEOO(builder);
    AddID(builder, _ID);
    AddCLASSIFICATION(builder, _CLASSIFICATION);
    AddOB_TIME(builder, _OB_TIME);
    AddCORR_QUALITY(builder, _o.CORR_QUALITY);
    AddID_ON_ORBIT(builder, _ID_ON_ORBIT);
    AddSENSOR_ID(builder, _SENSOR_ID);
    AddCOLLECT_METHOD(builder, _o.COLLECT_METHOD);
    AddNORAD_CAT_ID(builder, _o.NORAD_CAT_ID);
    AddTASK_ID(builder, _TASK_ID);
    AddTRANSACTION_ID(builder, _TRANSACTION_ID);
    AddIMAGE_SET_ID(builder, _IMAGE_SET_ID);
    AddIMAGE_SET_LENGTH(builder, _o.IMAGE_SET_LENGTH);
    AddSEQUENCE_ID(builder, _o.SEQUENCE_ID);
    AddOB_POSITION(builder, _o.OB_POSITION);
    AddORIG_OBJECT_ID(builder, _ORIG_OBJECT_ID);
    AddORIG_SENSOR_ID(builder, _ORIG_SENSOR_ID);
    AddUCT(builder, _o.UCT);
    AddAZIMUTH(builder, _o.AZIMUTH);
    AddAZIMUTH_UNC(builder, _o.AZIMUTH_UNC);
    AddAZIMUTH_BIAS(builder, _o.AZIMUTH_BIAS);
    AddAZIMUTH_RATE(builder, _o.AZIMUTH_RATE);
    AddELEVATION(builder, _o.ELEVATION);
    AddELEVATION_UNC(builder, _o.ELEVATION_UNC);
    AddELEVATION_BIAS(builder, _o.ELEVATION_BIAS);
    AddELEVATION_RATE(builder, _o.ELEVATION_RATE);
    AddRANGE(builder, _o.RANGE);
    AddRANGE_UNC(builder, _o.RANGE_UNC);
    AddRANGE_BIAS(builder, _o.RANGE_BIAS);
    AddRANGE_RATE(builder, _o.RANGE_RATE);
    AddRANGE_RATE_UNC(builder, _o.RANGE_RATE_UNC);
    AddRA(builder, _o.RA);
    AddRA_RATE(builder, _o.RA_RATE);
    AddRA_UNC(builder, _o.RA_UNC);
    AddRA_BIAS(builder, _o.RA_BIAS);
    AddDECLINATION(builder, _o.DECLINATION);
    AddDECLINATION_RATE(builder, _o.DECLINATION_RATE);
    AddDECLINATION_UNC(builder, _o.DECLINATION_UNC);
    AddDECLINATION_BIAS(builder, _o.DECLINATION_BIAS);
    AddLOSX(builder, _o.LOSX);
    AddLOSY(builder, _o.LOSY);
    AddLOSZ(builder, _o.LOSZ);
    AddLOS_UNC(builder, _o.LOS_UNC);
    AddLOSXVEL(builder, _o.LOSXVEL);
    AddLOSYVEL(builder, _o.LOSYVEL);
    AddLOSZVEL(builder, _o.LOSZVEL);
    AddSENLAT(builder, _o.SENLAT);
    AddSENLON(builder, _o.SENLON);
    AddSENALT(builder, _o.SENALT);
    AddSENX(builder, _o.SENX);
    AddSENY(builder, _o.SENY);
    AddSENZ(builder, _o.SENZ);
    AddFOV_COUNT(builder, _o.FOV_COUNT);
    AddFOV_COUNT_UCTS(builder, _o.FOV_COUNT_UCTS);
    AddEXP_DURATION(builder, _o.EXP_DURATION);
    AddZEROPTD(builder, _o.ZEROPTD);
    AddNET_OBJ_SIG(builder, _o.NET_OBJ_SIG);
    AddNET_OBJ_SIG_UNC(builder, _o.NET_OBJ_SIG_UNC);
    AddMAG(builder, _o.MAG);
    AddMAG_UNC(builder, _o.MAG_UNC);
    AddMAG_NORM_RANGE(builder, _o.MAG_NORM_RANGE);
    AddGEOLAT(builder, _o.GEOLAT);
    AddGEOLON(builder, _o.GEOLON);
    AddGEOALT(builder, _o.GEOALT);
    AddGEORANGE(builder, _o.GEORANGE);
    AddSKY_BKGRND(builder, _o.SKY_BKGRND);
    AddPRIMARY_EXTINCTION(builder, _o.PRIMARY_EXTINCTION);
    AddPRIMARY_EXTINCTION_UNC(builder, _o.PRIMARY_EXTINCTION_UNC);
    AddSOLAR_PHASE_ANGLE(builder, _o.SOLAR_PHASE_ANGLE);
    AddSOLAR_EQ_PHASE_ANGLE(builder, _o.SOLAR_EQ_PHASE_ANGLE);
    AddSOLAR_DEC_ANGLE(builder, _o.SOLAR_DEC_ANGLE);
    AddSHUTTER_DELAY(builder, _o.SHUTTER_DELAY);
    AddTIMING_BIAS(builder, _o.TIMING_BIAS);
    AddRAW_FILE_URI(builder, _RAW_FILE_URI);
    AddINTENSITY(builder, _o.INTENSITY);
    AddBG_INTENSITY(builder, _o.BG_INTENSITY);
    AddDESCRIPTOR(builder, _DESCRIPTOR);
    AddSOURCE(builder, _SOURCE);
    AddORIGIN(builder, _ORIGIN);
    AddDATA_MODE(builder, _o.DATA_MODE);
    AddCREATED_AT(builder, _CREATED_AT);
    AddCREATED_BY(builder, _CREATED_BY);
    AddREFERENCE_FRAME(builder, _o.REFERENCE_FRAME);
    AddSEN_REFERENCE_FRAME(builder, _o.SEN_REFERENCE_FRAME);
    AddUMBRA(builder, _o.UMBRA);
    AddPENUMBRA(builder, _o.PENUMBRA);
    AddORIG_NETWORK(builder, _ORIG_NETWORK);
    AddSOURCE_DL(builder, _SOURCE_DL);
    AddTYPE(builder, _o.TYPE);
    AddAZIMUTH_MEASURED(builder, _o.AZIMUTH_MEASURED);
    AddELEVATION_MEASURED(builder, _o.ELEVATION_MEASURED);
    AddRANGE_MEASURED(builder, _o.RANGE_MEASURED);
    AddRANGERATE_MEASURED(builder, _o.RANGERATE_MEASURED);
    AddRA_MEASURED(builder, _o.RA_MEASURED);
    AddDECLINATION_MEASURED(builder, _o.DECLINATION_MEASURED);
    AddNIIRS(builder, _o.NIIRS);
    AddMETERS_PER_PIXEL(builder, _o.METERS_PER_PIXEL);
    AddIMAGE_SNR(builder, _o.IMAGE_SNR);
    AddIMAGE_BIT_DEPTH(builder, _o.IMAGE_BIT_DEPTH);
    AddIMAGE_WIDTH(builder, _o.IMAGE_WIDTH);
    AddIMAGE_HEIGHT(builder, _o.IMAGE_HEIGHT);
    AddIMAGE_COMPRESSION(builder, _IMAGE_COMPRESSION);
    AddIMAGE_COMPRESSION_RATIO(builder, _o.IMAGE_COMPRESSION_RATIO);
    AddPROCESSED_IMAGE_URI(builder, _PROCESSED_IMAGE_URI);
    AddIMAGE_AUTO_ENHANCED(builder, _o.IMAGE_AUTO_ENHANCED);
    AddMULTI_FRAME_STACKED(builder, _o.MULTI_FRAME_STACKED);
    AddSYNTHETIC_TRACKING_USED(builder, _o.SYNTHETIC_TRACKING_USED);
    AddIMAGE_SHARPNESS(builder, _o.IMAGE_SHARPNESS);
    AddIMAGE_NOISE_STDDEV(builder, _o.IMAGE_NOISE_STDDEV);
    AddIMAGE_CONTRAST(builder, _o.IMAGE_CONTRAST);
    AddIMAGE_DYNAMIC_RANGE(builder, _o.IMAGE_DYNAMIC_RANGE);
    AddIMAGE_ENTROPY(builder, _o.IMAGE_ENTROPY);
    AddBACKGROUND_UNIFORMITY(builder, _o.BACKGROUND_UNIFORMITY);
    AddBACKGROUND_MEAN_LEVEL(builder, _o.BACKGROUND_MEAN_LEVEL);
    AddSATURATED_PIXEL_PERCENT(builder, _o.SATURATED_PIXEL_PERCENT);
    AddDEAD_PIXEL_PERCENT(builder, _o.DEAD_PIXEL_PERCENT);
    AddPSF_FWHM(builder, _o.PSF_FWHM);
    AddCLOUD_COVER_PERCENT(builder, _o.CLOUD_COVER_PERCENT);
    AddCLOUD_DETECTION_CONFIDENCE(builder, _o.CLOUD_DETECTION_CONFIDENCE);
    AddHAZE_PERCENT(builder, _o.HAZE_PERCENT);
    AddAEROSOL_OPTICAL_THICKNESS(builder, _o.AEROSOL_OPTICAL_THICKNESS);
    AddWATER_VAPOR_CONTENT(builder, _o.WATER_VAPOR_CONTENT);
    AddSUN_ELEVATION(builder, _o.SUN_ELEVATION);
    AddSUN_AZIMUTH(builder, _o.SUN_AZIMUTH);
    AddVIEW_ZENITH_ANGLE(builder, _o.VIEW_ZENITH_ANGLE);
    AddVIEW_AZIMUTH_ANGLE(builder, _o.VIEW_AZIMUTH_ANGLE);
    AddOFF_NADIR_ANGLE(builder, _o.OFF_NADIR_ANGLE);
    AddSWATH_WIDTH_KM(builder, _o.SWATH_WIDTH_KM);
    AddMEAN_TERRAIN_ELEVATION(builder, _o.MEAN_TERRAIN_ELEVATION);
    AddTERRAIN_ELEVATION_STDDEV(builder, _o.TERRAIN_ELEVATION_STDDEV);
    AddSHADOW_COVER_PERCENT(builder, _o.SHADOW_COVER_PERCENT);
    AddSUNGLINT_PRESENT(builder, _o.SUNGLINT_PRESENT);
    AddSUNGLINT_PERCENT(builder, _o.SUNGLINT_PERCENT);
    AddSNOW_ICE_COVER_PERCENT(builder, _o.SNOW_ICE_COVER_PERCENT);
    AddVALID_DATA_AREA_KM2(builder, _o.VALID_DATA_AREA_KM2);
    return EndEOO(builder);
  }
}

public class EOOT
{
  public string ID { get; set; }
  public string CLASSIFICATION { get; set; }
  public string OB_TIME { get; set; }
  public float CORR_QUALITY { get; set; }
  public string ID_ON_ORBIT { get; set; }
  public string SENSOR_ID { get; set; }
  public CollectMethod COLLECT_METHOD { get; set; }
  public int NORAD_CAT_ID { get; set; }
  public string TASK_ID { get; set; }
  public string TRANSACTION_ID { get; set; }
  public string IMAGE_SET_ID { get; set; }
  public int IMAGE_SET_LENGTH { get; set; }
  public int SEQUENCE_ID { get; set; }
  public ObservationPosition OB_POSITION { get; set; }
  public string ORIG_OBJECT_ID { get; set; }
  public string ORIG_SENSOR_ID { get; set; }
  public bool UCT { get; set; }
  public float AZIMUTH { get; set; }
  public float AZIMUTH_UNC { get; set; }
  public float AZIMUTH_BIAS { get; set; }
  public float AZIMUTH_RATE { get; set; }
  public float ELEVATION { get; set; }
  public float ELEVATION_UNC { get; set; }
  public float ELEVATION_BIAS { get; set; }
  public float ELEVATION_RATE { get; set; }
  public float RANGE { get; set; }
  public float RANGE_UNC { get; set; }
  public float RANGE_BIAS { get; set; }
  public float RANGE_RATE { get; set; }
  public float RANGE_RATE_UNC { get; set; }
  public float RA { get; set; }
  public float RA_RATE { get; set; }
  public float RA_UNC { get; set; }
  public float RA_BIAS { get; set; }
  public float DECLINATION { get; set; }
  public float DECLINATION_RATE { get; set; }
  public float DECLINATION_UNC { get; set; }
  public float DECLINATION_BIAS { get; set; }
  public float LOSX { get; set; }
  public float LOSY { get; set; }
  public float LOSZ { get; set; }
  public float LOS_UNC { get; set; }
  public float LOSXVEL { get; set; }
  public float LOSYVEL { get; set; }
  public float LOSZVEL { get; set; }
  public float SENLAT { get; set; }
  public float SENLON { get; set; }
  public float SENALT { get; set; }
  public float SENX { get; set; }
  public float SENY { get; set; }
  public float SENZ { get; set; }
  public int FOV_COUNT { get; set; }
  public int FOV_COUNT_UCTS { get; set; }
  public float EXP_DURATION { get; set; }
  public float ZEROPTD { get; set; }
  public float NET_OBJ_SIG { get; set; }
  public float NET_OBJ_SIG_UNC { get; set; }
  public float MAG { get; set; }
  public float MAG_UNC { get; set; }
  public float MAG_NORM_RANGE { get; set; }
  public float GEOLAT { get; set; }
  public float GEOLON { get; set; }
  public float GEOALT { get; set; }
  public float GEORANGE { get; set; }
  public float SKY_BKGRND { get; set; }
  public float PRIMARY_EXTINCTION { get; set; }
  public float PRIMARY_EXTINCTION_UNC { get; set; }
  public float SOLAR_PHASE_ANGLE { get; set; }
  public float SOLAR_EQ_PHASE_ANGLE { get; set; }
  public float SOLAR_DEC_ANGLE { get; set; }
  public float SHUTTER_DELAY { get; set; }
  public float TIMING_BIAS { get; set; }
  public string RAW_FILE_URI { get; set; }
  public float INTENSITY { get; set; }
  public float BG_INTENSITY { get; set; }
  public string DESCRIPTOR { get; set; }
  public string SOURCE { get; set; }
  public string ORIGIN { get; set; }
  public DataMode DATA_MODE { get; set; }
  public string CREATED_AT { get; set; }
  public string CREATED_BY { get; set; }
  public refFrame REFERENCE_FRAME { get; set; }
  public refFrame SEN_REFERENCE_FRAME { get; set; }
  public bool UMBRA { get; set; }
  public bool PENUMBRA { get; set; }
  public string ORIG_NETWORK { get; set; }
  public string SOURCE_DL { get; set; }
  public DeviceType TYPE { get; set; }
  public bool AZIMUTH_MEASURED { get; set; }
  public bool ELEVATION_MEASURED { get; set; }
  public bool RANGE_MEASURED { get; set; }
  public bool RANGERATE_MEASURED { get; set; }
  public bool RA_MEASURED { get; set; }
  public bool DECLINATION_MEASURED { get; set; }
  public float NIIRS { get; set; }
  public float METERS_PER_PIXEL { get; set; }
  public float IMAGE_SNR { get; set; }
  public int IMAGE_BIT_DEPTH { get; set; }
  public int IMAGE_WIDTH { get; set; }
  public int IMAGE_HEIGHT { get; set; }
  public string IMAGE_COMPRESSION { get; set; }
  public float IMAGE_COMPRESSION_RATIO { get; set; }
  public string PROCESSED_IMAGE_URI { get; set; }
  public bool IMAGE_AUTO_ENHANCED { get; set; }
  public bool MULTI_FRAME_STACKED { get; set; }
  public bool SYNTHETIC_TRACKING_USED { get; set; }
  public float IMAGE_SHARPNESS { get; set; }
  public float IMAGE_NOISE_STDDEV { get; set; }
  public float IMAGE_CONTRAST { get; set; }
  public float IMAGE_DYNAMIC_RANGE { get; set; }
  public float IMAGE_ENTROPY { get; set; }
  public float BACKGROUND_UNIFORMITY { get; set; }
  public float BACKGROUND_MEAN_LEVEL { get; set; }
  public float SATURATED_PIXEL_PERCENT { get; set; }
  public float DEAD_PIXEL_PERCENT { get; set; }
  public float PSF_FWHM { get; set; }
  public float CLOUD_COVER_PERCENT { get; set; }
  public float CLOUD_DETECTION_CONFIDENCE { get; set; }
  public float HAZE_PERCENT { get; set; }
  public float AEROSOL_OPTICAL_THICKNESS { get; set; }
  public float WATER_VAPOR_CONTENT { get; set; }
  public float SUN_ELEVATION { get; set; }
  public float SUN_AZIMUTH { get; set; }
  public float VIEW_ZENITH_ANGLE { get; set; }
  public float VIEW_AZIMUTH_ANGLE { get; set; }
  public float OFF_NADIR_ANGLE { get; set; }
  public float SWATH_WIDTH_KM { get; set; }
  public float MEAN_TERRAIN_ELEVATION { get; set; }
  public float TERRAIN_ELEVATION_STDDEV { get; set; }
  public float SHADOW_COVER_PERCENT { get; set; }
  public bool SUNGLINT_PRESENT { get; set; }
  public float SUNGLINT_PERCENT { get; set; }
  public float SNOW_ICE_COVER_PERCENT { get; set; }
  public float VALID_DATA_AREA_KM2 { get; set; }

  public EOOT() {
    this.ID = null;
    this.CLASSIFICATION = null;
    this.OB_TIME = null;
    this.CORR_QUALITY = 0.0f;
    this.ID_ON_ORBIT = null;
    this.SENSOR_ID = null;
    this.COLLECT_METHOD = CollectMethod.SIDEREAL;
    this.NORAD_CAT_ID = 0;
    this.TASK_ID = null;
    this.TRANSACTION_ID = null;
    this.IMAGE_SET_ID = null;
    this.IMAGE_SET_LENGTH = 0;
    this.SEQUENCE_ID = 0;
    this.OB_POSITION = ObservationPosition.FENCE;
    this.ORIG_OBJECT_ID = null;
    this.ORIG_SENSOR_ID = null;
    this.UCT = false;
    this.AZIMUTH = 0.0f;
    this.AZIMUTH_UNC = 0.0f;
    this.AZIMUTH_BIAS = 0.0f;
    this.AZIMUTH_RATE = 0.0f;
    this.ELEVATION = 0.0f;
    this.ELEVATION_UNC = 0.0f;
    this.ELEVATION_BIAS = 0.0f;
    this.ELEVATION_RATE = 0.0f;
    this.RANGE = 0.0f;
    this.RANGE_UNC = 0.0f;
    this.RANGE_BIAS = 0.0f;
    this.RANGE_RATE = 0.0f;
    this.RANGE_RATE_UNC = 0.0f;
    this.RA = 0.0f;
    this.RA_RATE = 0.0f;
    this.RA_UNC = 0.0f;
    this.RA_BIAS = 0.0f;
    this.DECLINATION = 0.0f;
    this.DECLINATION_RATE = 0.0f;
    this.DECLINATION_UNC = 0.0f;
    this.DECLINATION_BIAS = 0.0f;
    this.LOSX = 0.0f;
    this.LOSY = 0.0f;
    this.LOSZ = 0.0f;
    this.LOS_UNC = 0.0f;
    this.LOSXVEL = 0.0f;
    this.LOSYVEL = 0.0f;
    this.LOSZVEL = 0.0f;
    this.SENLAT = 0.0f;
    this.SENLON = 0.0f;
    this.SENALT = 0.0f;
    this.SENX = 0.0f;
    this.SENY = 0.0f;
    this.SENZ = 0.0f;
    this.FOV_COUNT = 0;
    this.FOV_COUNT_UCTS = 0;
    this.EXP_DURATION = 0.0f;
    this.ZEROPTD = 0.0f;
    this.NET_OBJ_SIG = 0.0f;
    this.NET_OBJ_SIG_UNC = 0.0f;
    this.MAG = 0.0f;
    this.MAG_UNC = 0.0f;
    this.MAG_NORM_RANGE = 0.0f;
    this.GEOLAT = 0.0f;
    this.GEOLON = 0.0f;
    this.GEOALT = 0.0f;
    this.GEORANGE = 0.0f;
    this.SKY_BKGRND = 0.0f;
    this.PRIMARY_EXTINCTION = 0.0f;
    this.PRIMARY_EXTINCTION_UNC = 0.0f;
    this.SOLAR_PHASE_ANGLE = 0.0f;
    this.SOLAR_EQ_PHASE_ANGLE = 0.0f;
    this.SOLAR_DEC_ANGLE = 0.0f;
    this.SHUTTER_DELAY = 0.0f;
    this.TIMING_BIAS = 0.0f;
    this.RAW_FILE_URI = null;
    this.INTENSITY = 0.0f;
    this.BG_INTENSITY = 0.0f;
    this.DESCRIPTOR = null;
    this.SOURCE = null;
    this.ORIGIN = null;
    this.DATA_MODE = DataMode.EXERCISE;
    this.CREATED_AT = null;
    this.CREATED_BY = null;
    this.REFERENCE_FRAME = refFrame.ECEF;
    this.SEN_REFERENCE_FRAME = refFrame.ECEF;
    this.UMBRA = false;
    this.PENUMBRA = false;
    this.ORIG_NETWORK = null;
    this.SOURCE_DL = null;
    this.TYPE = DeviceType.UNKNOWN;
    this.AZIMUTH_MEASURED = false;
    this.ELEVATION_MEASURED = false;
    this.RANGE_MEASURED = false;
    this.RANGERATE_MEASURED = false;
    this.RA_MEASURED = false;
    this.DECLINATION_MEASURED = false;
    this.NIIRS = 0.0f;
    this.METERS_PER_PIXEL = 0.0f;
    this.IMAGE_SNR = 0.0f;
    this.IMAGE_BIT_DEPTH = 0;
    this.IMAGE_WIDTH = 0;
    this.IMAGE_HEIGHT = 0;
    this.IMAGE_COMPRESSION = null;
    this.IMAGE_COMPRESSION_RATIO = 0.0f;
    this.PROCESSED_IMAGE_URI = null;
    this.IMAGE_AUTO_ENHANCED = false;
    this.MULTI_FRAME_STACKED = false;
    this.SYNTHETIC_TRACKING_USED = false;
    this.IMAGE_SHARPNESS = 0.0f;
    this.IMAGE_NOISE_STDDEV = 0.0f;
    this.IMAGE_CONTRAST = 0.0f;
    this.IMAGE_DYNAMIC_RANGE = 0.0f;
    this.IMAGE_ENTROPY = 0.0f;
    this.BACKGROUND_UNIFORMITY = 0.0f;
    this.BACKGROUND_MEAN_LEVEL = 0.0f;
    this.SATURATED_PIXEL_PERCENT = 0.0f;
    this.DEAD_PIXEL_PERCENT = 0.0f;
    this.PSF_FWHM = 0.0f;
    this.CLOUD_COVER_PERCENT = 0.0f;
    this.CLOUD_DETECTION_CONFIDENCE = 0.0f;
    this.HAZE_PERCENT = 0.0f;
    this.AEROSOL_OPTICAL_THICKNESS = 0.0f;
    this.WATER_VAPOR_CONTENT = 0.0f;
    this.SUN_ELEVATION = 0.0f;
    this.SUN_AZIMUTH = 0.0f;
    this.VIEW_ZENITH_ANGLE = 0.0f;
    this.VIEW_AZIMUTH_ANGLE = 0.0f;
    this.OFF_NADIR_ANGLE = 0.0f;
    this.SWATH_WIDTH_KM = 0.0f;
    this.MEAN_TERRAIN_ELEVATION = 0.0f;
    this.TERRAIN_ELEVATION_STDDEV = 0.0f;
    this.SHADOW_COVER_PERCENT = 0.0f;
    this.SUNGLINT_PRESENT = false;
    this.SUNGLINT_PERCENT = 0.0f;
    this.SNOW_ICE_COVER_PERCENT = 0.0f;
    this.VALID_DATA_AREA_KM2 = 0.0f;
  }
  public static EOOT DeserializeFromBinary(byte[] fbBuffer) {
    return EOO.GetRootAsEOO(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EOO.FinishEOOBuffer(fbb, EOO.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class EOOVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*ID*/, false)
      && verifier.VerifyString(tablePos, 6 /*CLASSIFICATION*/, false)
      && verifier.VerifyString(tablePos, 8 /*OB_TIME*/, false)
      && verifier.VerifyField(tablePos, 10 /*CORR_QUALITY*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*ID_ON_ORBIT*/, false)
      && verifier.VerifyString(tablePos, 14 /*SENSOR_ID*/, false)
      && verifier.VerifyField(tablePos, 16 /*COLLECT_METHOD*/, 1 /*CollectMethod*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*NORAD_CAT_ID*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*TASK_ID*/, false)
      && verifier.VerifyString(tablePos, 22 /*TRANSACTION_ID*/, false)
      && verifier.VerifyString(tablePos, 24 /*IMAGE_SET_ID*/, false)
      && verifier.VerifyField(tablePos, 26 /*IMAGE_SET_LENGTH*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*SEQUENCE_ID*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*OB_POSITION*/, 1 /*ObservationPosition*/, 1, false)
      && verifier.VerifyString(tablePos, 32 /*ORIG_OBJECT_ID*/, false)
      && verifier.VerifyString(tablePos, 34 /*ORIG_SENSOR_ID*/, false)
      && verifier.VerifyField(tablePos, 36 /*UCT*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 38 /*AZIMUTH*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*AZIMUTH_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*AZIMUTH_BIAS*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*AZIMUTH_RATE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*ELEVATION*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*ELEVATION_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*ELEVATION_BIAS*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*ELEVATION_RATE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*RANGE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*RANGE_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*RANGE_BIAS*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*RANGE_RATE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*RANGE_RATE_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*RA*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 66 /*RA_RATE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 68 /*RA_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 70 /*RA_BIAS*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 72 /*DECLINATION*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 74 /*DECLINATION_RATE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 76 /*DECLINATION_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 78 /*DECLINATION_BIAS*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 80 /*LOSX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 82 /*LOSY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 84 /*LOSZ*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*LOS_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 88 /*LOSXVEL*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 90 /*LOSYVEL*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 92 /*LOSZVEL*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 94 /*SENLAT*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 96 /*SENLON*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 98 /*SENALT*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 100 /*SENX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 102 /*SENY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 104 /*SENZ*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 106 /*FOV_COUNT*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 108 /*FOV_COUNT_UCTS*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 110 /*EXP_DURATION*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 112 /*ZEROPTD*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 114 /*NET_OBJ_SIG*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 116 /*NET_OBJ_SIG_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 118 /*MAG*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 120 /*MAG_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 122 /*MAG_NORM_RANGE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 124 /*GEOLAT*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 126 /*GEOLON*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 128 /*GEOALT*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 130 /*GEORANGE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 132 /*SKY_BKGRND*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 134 /*PRIMARY_EXTINCTION*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 136 /*PRIMARY_EXTINCTION_UNC*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 138 /*SOLAR_PHASE_ANGLE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 140 /*SOLAR_EQ_PHASE_ANGLE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 142 /*SOLAR_DEC_ANGLE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 144 /*SHUTTER_DELAY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 146 /*TIMING_BIAS*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 148 /*RAW_FILE_URI*/, false)
      && verifier.VerifyField(tablePos, 150 /*INTENSITY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 152 /*BG_INTENSITY*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 154 /*DESCRIPTOR*/, false)
      && verifier.VerifyString(tablePos, 156 /*SOURCE*/, false)
      && verifier.VerifyString(tablePos, 158 /*ORIGIN*/, false)
      && verifier.VerifyField(tablePos, 160 /*DATA_MODE*/, 1 /*DataMode*/, 1, false)
      && verifier.VerifyString(tablePos, 162 /*CREATED_AT*/, false)
      && verifier.VerifyString(tablePos, 164 /*CREATED_BY*/, false)
      && verifier.VerifyField(tablePos, 166 /*REFERENCE_FRAME*/, 1 /*refFrame*/, 1, false)
      && verifier.VerifyField(tablePos, 168 /*SEN_REFERENCE_FRAME*/, 1 /*refFrame*/, 1, false)
      && verifier.VerifyField(tablePos, 170 /*UMBRA*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 172 /*PENUMBRA*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 174 /*ORIG_NETWORK*/, false)
      && verifier.VerifyString(tablePos, 176 /*SOURCE_DL*/, false)
      && verifier.VerifyField(tablePos, 178 /*TYPE*/, 1 /*DeviceType*/, 1, false)
      && verifier.VerifyField(tablePos, 180 /*AZIMUTH_MEASURED*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 182 /*ELEVATION_MEASURED*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 184 /*RANGE_MEASURED*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 186 /*RANGERATE_MEASURED*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 188 /*RA_MEASURED*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 190 /*DECLINATION_MEASURED*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 192 /*NIIRS*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 194 /*METERS_PER_PIXEL*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 196 /*IMAGE_SNR*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 198 /*IMAGE_BIT_DEPTH*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 200 /*IMAGE_WIDTH*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 202 /*IMAGE_HEIGHT*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 204 /*IMAGE_COMPRESSION*/, false)
      && verifier.VerifyField(tablePos, 206 /*IMAGE_COMPRESSION_RATIO*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 208 /*PROCESSED_IMAGE_URI*/, false)
      && verifier.VerifyField(tablePos, 210 /*IMAGE_AUTO_ENHANCED*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 212 /*MULTI_FRAME_STACKED*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 214 /*SYNTHETIC_TRACKING_USED*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 216 /*IMAGE_SHARPNESS*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 218 /*IMAGE_NOISE_STDDEV*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 220 /*IMAGE_CONTRAST*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 222 /*IMAGE_DYNAMIC_RANGE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 224 /*IMAGE_ENTROPY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 226 /*BACKGROUND_UNIFORMITY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 228 /*BACKGROUND_MEAN_LEVEL*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 230 /*SATURATED_PIXEL_PERCENT*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 232 /*DEAD_PIXEL_PERCENT*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 234 /*PSF_FWHM*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 236 /*CLOUD_COVER_PERCENT*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 238 /*CLOUD_DETECTION_CONFIDENCE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 240 /*HAZE_PERCENT*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 242 /*AEROSOL_OPTICAL_THICKNESS*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 244 /*WATER_VAPOR_CONTENT*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 246 /*SUN_ELEVATION*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 248 /*SUN_AZIMUTH*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 250 /*VIEW_ZENITH_ANGLE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 252 /*VIEW_AZIMUTH_ANGLE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 254 /*OFF_NADIR_ANGLE*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 256 /*SWATH_WIDTH_KM*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 258 /*MEAN_TERRAIN_ELEVATION*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 260 /*TERRAIN_ELEVATION_STDDEV*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 262 /*SHADOW_COVER_PERCENT*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 264 /*SUNGLINT_PRESENT*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 266 /*SUNGLINT_PERCENT*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 268 /*SNOW_ICE_COVER_PERCENT*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 270 /*VALID_DATA_AREA_KM2*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
