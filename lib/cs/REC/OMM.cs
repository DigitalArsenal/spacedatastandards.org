// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Orbit Mean Elements Message
public struct OMM : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static OMM GetRootAsOMM(ByteBuffer _bb) { return GetRootAsOMM(_bb, new OMM()); }
  public static OMM GetRootAsOMM(ByteBuffer _bb, OMM obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool OMMBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$OMM"); }
  public static bool VerifyOMM(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("$OMM", false, OMMVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OMM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// CCSDS OMM Version 
  public double CCSDS_OMM_VERS { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Creation Date (ISO 8601 UTC format) 
  public string CREATION_DATE { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCREATION_DATEBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCREATION_DATEBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCREATION_DATEArray() { return __p.__vector_as_array<byte>(6); }
  /// Originator 
  public string ORIGINATOR { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIGINATORBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetORIGINATORBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetORIGINATORArray() { return __p.__vector_as_array<byte>(8); }
  /// Satellite Name(s)
  public string OBJECT_NAME { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOBJECT_NAMEBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOBJECT_NAMEBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOBJECT_NAMEArray() { return __p.__vector_as_array<byte>(10); }
  /// International Designator (YYYY-NNNAAA)
  public string OBJECT_ID { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOBJECT_IDBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOBJECT_IDBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOBJECT_IDArray() { return __p.__vector_as_array<byte>(12); }
  /// Center Name (e.g. EARTH, MARS)
  public string CENTER_NAME { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCENTER_NAMEBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCENTER_NAMEBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCENTER_NAMEArray() { return __p.__vector_as_array<byte>(14); }
  /// Reference Frame
  /// Typically TEMEOFDATE
  public RFM? REFERENCE_FRAME { get { int o = __p.__offset(16); return o != 0 ? (RFM?)(new RFM()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Reference Frame Epoch (ISO 8601 UTC format)
  public string REFERENCE_FRAME_EPOCH { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetREFERENCE_FRAME_EPOCHBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetREFERENCE_FRAME_EPOCHBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetREFERENCE_FRAME_EPOCHArray() { return __p.__vector_as_array<byte>(18); }
  /// Time System [M, UTC]
  public timeSystem TIME_SYSTEM { get { int o = __p.__offset(20); return o != 0 ? (timeSystem)__p.bb.GetSbyte(o + __p.bb_pos) : timeSystem.UTC; } }
  /// Mean Element Theory
  public meanElementTheory MEAN_ELEMENT_THEORY { get { int o = __p.__offset(22); return o != 0 ? (meanElementTheory)__p.bb.GetSbyte(o + __p.bb_pos) : meanElementTheory.SGP4; } }
  /// COMMENT (O)
  public string COMMENT { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCOMMENTBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetCOMMENTBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetCOMMENTArray() { return __p.__vector_as_array<byte>(24); }
  /// EPOCH of Mean Keplerian elements (ISO 8601 UTC format)
  public string EPOCH { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEPOCHBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetEPOCHBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetEPOCHArray() { return __p.__vector_as_array<byte>(26); }
  /// Semi-major axis in km or Mean Motion in rev/day
  public double SEMI_MAJOR_AXIS { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Mean motion in rev/day if MEAN_ELEMENT_THEORY=SGP/SGP4 else unused
  public double MEAN_MOTION { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Eccentricity (unitless)
  public double ECCENTRICITY { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Inclination in degrees
  public double INCLINATION { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// RA_OF_ASC_NODE in degrees
  public double RA_OF_ASC_NODE { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// ARG_OF_PERICENTER in degrees
  public double ARG_OF_PERICENTER { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// MEAN_ANOMALY in degrees
  public double MEAN_ANOMALY { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// GM in km**3/s**2
  public double GM { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// MASS in kg
  public double MASS { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// SOLAR_RAD_AREA in m**2
  public double SOLAR_RAD_AREA { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// SOLAR_RAD_COEFF (unitless)
  public double SOLAR_RAD_COEFF { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// DRAG_AREA in m**2
  public double DRAG_AREA { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// DRAG_COEFF (unitless)
  public double DRAG_COEFF { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// TLE Related Parameters (Only if MEAN_ELEMENT_THEORY=SGP/SGP4)
  /// EPHEMERIS_TYPE Default=0
  public ephemerisType EPHEMERIS_TYPE { get { int o = __p.__offset(54); return o != 0 ? (ephemerisType)__p.bb.GetSbyte(o + __p.bb_pos) : ephemerisType.SGP4; } }
  /// CLASSIFICATION_TYPE Default=U
  public string CLASSIFICATION_TYPE { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCLASSIFICATION_TYPEBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetCLASSIFICATION_TYPEBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetCLASSIFICATION_TYPEArray() { return __p.__vector_as_array<byte>(56); }
  /// NORAD_CAT_ID (integer) [O if SGP/SGP4]
  public uint NORAD_CAT_ID { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// ELEMENT_SET_NO [O if SGP/SGP4]
  public uint ELEMENT_SET_NO { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// REV_AT_EPOCH [O if SGP/SGP4]
  public double REV_AT_EPOCH { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// BSTAR in 1/Earth radii or BTERM in m²/kg depending on MEAN_ELEMENT_THEORY [C]
  public double BSTAR { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// MEAN_MOTION_DOT in rev/day² [C if SGP or PPT3]
  public double MEAN_MOTION_DOT { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// MEAN_MOTION_DDOT in rev/day³ if SGP/PPT3 or AGOM in m²/kg if SGP4-XP [C]
  public double MEAN_MOTION_DDOT { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Position/Velocity Covariance Matrix (6x6 Lower Triangular) [C if any covariance provided]
  /// COV_REF_FRAME reference frame for covariance [C if covariance given]
  /// Typically RSW
  public RFM? COV_REFERENCE_FRAME { get { int o = __p.__offset(70); return o != 0 ? (RFM?)(new RFM()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// CX_X [km**2]
  public double CX_X { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CY_X [km**2]
  public double CY_X { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CY_Y [km**2]
  public double CY_Y { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CZ_X [km**2]
  public double CZ_X { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CZ_Y [km**2]
  public double CZ_Y { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CZ_Z [km**2]
  public double CZ_Z { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CX_DOT_X [km**2/s]
  public double CX_DOT_X { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CX_DOT_Y [km**2/s]
  public double CX_DOT_Y { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CX_DOT_Z [km**2/s]
  public double CX_DOT_Z { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CX_DOT_X_DOT [km**2/s**2]
  public double CX_DOT_X_DOT { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CY_DOT_X [km**2/s]
  public double CY_DOT_X { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CY_DOT_Y [km**2/s]
  public double CY_DOT_Y { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CY_DOT_Z [km**2/s]
  public double CY_DOT_Z { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CY_DOT_X_DOT [km**2/s**2]
  public double CY_DOT_X_DOT { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CY_DOT_Y_DOT [km**2/s**2]
  public double CY_DOT_Y_DOT { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CZ_DOT_X [km**2/s]
  public double CZ_DOT_X { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CZ_DOT_Y [km**2/s]
  public double CZ_DOT_Y { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CZ_DOT_Z [km**2/s]
  public double CZ_DOT_Z { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CZ_DOT_X_DOT [km**2/s**2]
  public double CZ_DOT_X_DOT { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CZ_DOT_Y_DOT [km**2/s**2]
  public double CZ_DOT_Y_DOT { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// CZ_DOT_Z_DOT [km**2/s**2]
  public double CZ_DOT_Z_DOT { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// USER_DEFINED_BIP_0044_TYPE [O, units per ICD]
  public uint USER_DEFINED_BIP_0044_TYPE { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// USER_DEFINED_OBJECT_DESIGNATOR [O, units per ICD]
  public string USER_DEFINED_OBJECT_DESIGNATOR { get { int o = __p.__offset(116); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUSER_DEFINED_OBJECT_DESIGNATORBytes() { return __p.__vector_as_span<byte>(116, 1); }
#else
  public ArraySegment<byte>? GetUSER_DEFINED_OBJECT_DESIGNATORBytes() { return __p.__vector_as_arraysegment(116); }
#endif
  public byte[] GetUSER_DEFINED_OBJECT_DESIGNATORArray() { return __p.__vector_as_array<byte>(116); }
  /// USER_DEFINED_EARTH_MODEL [O, units per ICD]
  public string USER_DEFINED_EARTH_MODEL { get { int o = __p.__offset(118); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUSER_DEFINED_EARTH_MODELBytes() { return __p.__vector_as_span<byte>(118, 1); }
#else
  public ArraySegment<byte>? GetUSER_DEFINED_EARTH_MODELBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public byte[] GetUSER_DEFINED_EARTH_MODELArray() { return __p.__vector_as_array<byte>(118); }
  /// USER_DEFINED_EPOCH_TIMESTAMP [O, units per ICD]
  public double USER_DEFINED_EPOCH_TIMESTAMP { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// USER_DEFINED_MICROSECONDS [O, units per ICD]
  public double USER_DEFINED_MICROSECONDS { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<OMM> CreateOMM(FlatBufferBuilder builder,
      double CCSDS_OMM_VERS = 0.0,
      StringOffset CREATION_DATEOffset = default(StringOffset),
      StringOffset ORIGINATOROffset = default(StringOffset),
      StringOffset OBJECT_NAMEOffset = default(StringOffset),
      StringOffset OBJECT_IDOffset = default(StringOffset),
      StringOffset CENTER_NAMEOffset = default(StringOffset),
      Offset<RFM> REFERENCE_FRAMEOffset = default(Offset<RFM>),
      StringOffset REFERENCE_FRAME_EPOCHOffset = default(StringOffset),
      timeSystem TIME_SYSTEM = timeSystem.UTC,
      meanElementTheory MEAN_ELEMENT_THEORY = meanElementTheory.SGP4,
      StringOffset COMMENTOffset = default(StringOffset),
      StringOffset EPOCHOffset = default(StringOffset),
      double SEMI_MAJOR_AXIS = 0.0,
      double MEAN_MOTION = 0.0,
      double ECCENTRICITY = 0.0,
      double INCLINATION = 0.0,
      double RA_OF_ASC_NODE = 0.0,
      double ARG_OF_PERICENTER = 0.0,
      double MEAN_ANOMALY = 0.0,
      double GM = 0.0,
      double MASS = 0.0,
      double SOLAR_RAD_AREA = 0.0,
      double SOLAR_RAD_COEFF = 0.0,
      double DRAG_AREA = 0.0,
      double DRAG_COEFF = 0.0,
      ephemerisType EPHEMERIS_TYPE = ephemerisType.SGP4,
      StringOffset CLASSIFICATION_TYPEOffset = default(StringOffset),
      uint NORAD_CAT_ID = 0,
      uint ELEMENT_SET_NO = 0,
      double REV_AT_EPOCH = 0.0,
      double BSTAR = 0.0,
      double MEAN_MOTION_DOT = 0.0,
      double MEAN_MOTION_DDOT = 0.0,
      Offset<RFM> COV_REFERENCE_FRAMEOffset = default(Offset<RFM>),
      double CX_X = 0.0,
      double CY_X = 0.0,
      double CY_Y = 0.0,
      double CZ_X = 0.0,
      double CZ_Y = 0.0,
      double CZ_Z = 0.0,
      double CX_DOT_X = 0.0,
      double CX_DOT_Y = 0.0,
      double CX_DOT_Z = 0.0,
      double CX_DOT_X_DOT = 0.0,
      double CY_DOT_X = 0.0,
      double CY_DOT_Y = 0.0,
      double CY_DOT_Z = 0.0,
      double CY_DOT_X_DOT = 0.0,
      double CY_DOT_Y_DOT = 0.0,
      double CZ_DOT_X = 0.0,
      double CZ_DOT_Y = 0.0,
      double CZ_DOT_Z = 0.0,
      double CZ_DOT_X_DOT = 0.0,
      double CZ_DOT_Y_DOT = 0.0,
      double CZ_DOT_Z_DOT = 0.0,
      uint USER_DEFINED_BIP_0044_TYPE = 0,
      StringOffset USER_DEFINED_OBJECT_DESIGNATOROffset = default(StringOffset),
      StringOffset USER_DEFINED_EARTH_MODELOffset = default(StringOffset),
      double USER_DEFINED_EPOCH_TIMESTAMP = 0.0,
      double USER_DEFINED_MICROSECONDS = 0.0) {
    builder.StartTable(60);
    OMM.AddUSER_DEFINED_MICROSECONDS(builder, USER_DEFINED_MICROSECONDS);
    OMM.AddUSER_DEFINED_EPOCH_TIMESTAMP(builder, USER_DEFINED_EPOCH_TIMESTAMP);
    OMM.AddCZ_DOT_Z_DOT(builder, CZ_DOT_Z_DOT);
    OMM.AddCZ_DOT_Y_DOT(builder, CZ_DOT_Y_DOT);
    OMM.AddCZ_DOT_X_DOT(builder, CZ_DOT_X_DOT);
    OMM.AddCZ_DOT_Z(builder, CZ_DOT_Z);
    OMM.AddCZ_DOT_Y(builder, CZ_DOT_Y);
    OMM.AddCZ_DOT_X(builder, CZ_DOT_X);
    OMM.AddCY_DOT_Y_DOT(builder, CY_DOT_Y_DOT);
    OMM.AddCY_DOT_X_DOT(builder, CY_DOT_X_DOT);
    OMM.AddCY_DOT_Z(builder, CY_DOT_Z);
    OMM.AddCY_DOT_Y(builder, CY_DOT_Y);
    OMM.AddCY_DOT_X(builder, CY_DOT_X);
    OMM.AddCX_DOT_X_DOT(builder, CX_DOT_X_DOT);
    OMM.AddCX_DOT_Z(builder, CX_DOT_Z);
    OMM.AddCX_DOT_Y(builder, CX_DOT_Y);
    OMM.AddCX_DOT_X(builder, CX_DOT_X);
    OMM.AddCZ_Z(builder, CZ_Z);
    OMM.AddCZ_Y(builder, CZ_Y);
    OMM.AddCZ_X(builder, CZ_X);
    OMM.AddCY_Y(builder, CY_Y);
    OMM.AddCY_X(builder, CY_X);
    OMM.AddCX_X(builder, CX_X);
    OMM.AddMEAN_MOTION_DDOT(builder, MEAN_MOTION_DDOT);
    OMM.AddMEAN_MOTION_DOT(builder, MEAN_MOTION_DOT);
    OMM.AddBSTAR(builder, BSTAR);
    OMM.AddREV_AT_EPOCH(builder, REV_AT_EPOCH);
    OMM.AddDRAG_COEFF(builder, DRAG_COEFF);
    OMM.AddDRAG_AREA(builder, DRAG_AREA);
    OMM.AddSOLAR_RAD_COEFF(builder, SOLAR_RAD_COEFF);
    OMM.AddSOLAR_RAD_AREA(builder, SOLAR_RAD_AREA);
    OMM.AddMASS(builder, MASS);
    OMM.AddGM(builder, GM);
    OMM.AddMEAN_ANOMALY(builder, MEAN_ANOMALY);
    OMM.AddARG_OF_PERICENTER(builder, ARG_OF_PERICENTER);
    OMM.AddRA_OF_ASC_NODE(builder, RA_OF_ASC_NODE);
    OMM.AddINCLINATION(builder, INCLINATION);
    OMM.AddECCENTRICITY(builder, ECCENTRICITY);
    OMM.AddMEAN_MOTION(builder, MEAN_MOTION);
    OMM.AddSEMI_MAJOR_AXIS(builder, SEMI_MAJOR_AXIS);
    OMM.AddCCSDS_OMM_VERS(builder, CCSDS_OMM_VERS);
    OMM.AddUSER_DEFINED_EARTH_MODEL(builder, USER_DEFINED_EARTH_MODELOffset);
    OMM.AddUSER_DEFINED_OBJECT_DESIGNATOR(builder, USER_DEFINED_OBJECT_DESIGNATOROffset);
    OMM.AddUSER_DEFINED_BIP_0044_TYPE(builder, USER_DEFINED_BIP_0044_TYPE);
    OMM.AddCOV_REFERENCE_FRAME(builder, COV_REFERENCE_FRAMEOffset);
    OMM.AddELEMENT_SET_NO(builder, ELEMENT_SET_NO);
    OMM.AddNORAD_CAT_ID(builder, NORAD_CAT_ID);
    OMM.AddCLASSIFICATION_TYPE(builder, CLASSIFICATION_TYPEOffset);
    OMM.AddEPOCH(builder, EPOCHOffset);
    OMM.AddCOMMENT(builder, COMMENTOffset);
    OMM.AddREFERENCE_FRAME_EPOCH(builder, REFERENCE_FRAME_EPOCHOffset);
    OMM.AddREFERENCE_FRAME(builder, REFERENCE_FRAMEOffset);
    OMM.AddCENTER_NAME(builder, CENTER_NAMEOffset);
    OMM.AddOBJECT_ID(builder, OBJECT_IDOffset);
    OMM.AddOBJECT_NAME(builder, OBJECT_NAMEOffset);
    OMM.AddORIGINATOR(builder, ORIGINATOROffset);
    OMM.AddCREATION_DATE(builder, CREATION_DATEOffset);
    OMM.AddEPHEMERIS_TYPE(builder, EPHEMERIS_TYPE);
    OMM.AddMEAN_ELEMENT_THEORY(builder, MEAN_ELEMENT_THEORY);
    OMM.AddTIME_SYSTEM(builder, TIME_SYSTEM);
    return OMM.EndOMM(builder);
  }

  public static void StartOMM(FlatBufferBuilder builder) { builder.StartTable(60); }
  public static void AddCCSDS_OMM_VERS(FlatBufferBuilder builder, double CCSDS_OMM_VERS) { builder.AddDouble(0, CCSDS_OMM_VERS, 0.0); }
  public static void AddCREATION_DATE(FlatBufferBuilder builder, StringOffset CREATION_DATEOffset) { builder.AddOffset(1, CREATION_DATEOffset.Value, 0); }
  public static void AddORIGINATOR(FlatBufferBuilder builder, StringOffset ORIGINATOROffset) { builder.AddOffset(2, ORIGINATOROffset.Value, 0); }
  public static void AddOBJECT_NAME(FlatBufferBuilder builder, StringOffset OBJECT_NAMEOffset) { builder.AddOffset(3, OBJECT_NAMEOffset.Value, 0); }
  public static void AddOBJECT_ID(FlatBufferBuilder builder, StringOffset OBJECT_IDOffset) { builder.AddOffset(4, OBJECT_IDOffset.Value, 0); }
  public static void AddCENTER_NAME(FlatBufferBuilder builder, StringOffset CENTER_NAMEOffset) { builder.AddOffset(5, CENTER_NAMEOffset.Value, 0); }
  public static void AddREFERENCE_FRAME(FlatBufferBuilder builder, Offset<RFM> REFERENCE_FRAMEOffset) { builder.AddOffset(6, REFERENCE_FRAMEOffset.Value, 0); }
  public static void AddREFERENCE_FRAME_EPOCH(FlatBufferBuilder builder, StringOffset REFERENCE_FRAME_EPOCHOffset) { builder.AddOffset(7, REFERENCE_FRAME_EPOCHOffset.Value, 0); }
  public static void AddTIME_SYSTEM(FlatBufferBuilder builder, timeSystem TIME_SYSTEM) { builder.AddSbyte(8, (sbyte)TIME_SYSTEM, 11); }
  public static void AddMEAN_ELEMENT_THEORY(FlatBufferBuilder builder, meanElementTheory MEAN_ELEMENT_THEORY) { builder.AddSbyte(9, (sbyte)MEAN_ELEMENT_THEORY, 0); }
  public static void AddCOMMENT(FlatBufferBuilder builder, StringOffset COMMENTOffset) { builder.AddOffset(10, COMMENTOffset.Value, 0); }
  public static void AddEPOCH(FlatBufferBuilder builder, StringOffset EPOCHOffset) { builder.AddOffset(11, EPOCHOffset.Value, 0); }
  public static void AddSEMI_MAJOR_AXIS(FlatBufferBuilder builder, double SEMI_MAJOR_AXIS) { builder.AddDouble(12, SEMI_MAJOR_AXIS, 0.0); }
  public static void AddMEAN_MOTION(FlatBufferBuilder builder, double MEAN_MOTION) { builder.AddDouble(13, MEAN_MOTION, 0.0); }
  public static void AddECCENTRICITY(FlatBufferBuilder builder, double ECCENTRICITY) { builder.AddDouble(14, ECCENTRICITY, 0.0); }
  public static void AddINCLINATION(FlatBufferBuilder builder, double INCLINATION) { builder.AddDouble(15, INCLINATION, 0.0); }
  public static void AddRA_OF_ASC_NODE(FlatBufferBuilder builder, double RA_OF_ASC_NODE) { builder.AddDouble(16, RA_OF_ASC_NODE, 0.0); }
  public static void AddARG_OF_PERICENTER(FlatBufferBuilder builder, double ARG_OF_PERICENTER) { builder.AddDouble(17, ARG_OF_PERICENTER, 0.0); }
  public static void AddMEAN_ANOMALY(FlatBufferBuilder builder, double MEAN_ANOMALY) { builder.AddDouble(18, MEAN_ANOMALY, 0.0); }
  public static void AddGM(FlatBufferBuilder builder, double GM) { builder.AddDouble(19, GM, 0.0); }
  public static void AddMASS(FlatBufferBuilder builder, double MASS) { builder.AddDouble(20, MASS, 0.0); }
  public static void AddSOLAR_RAD_AREA(FlatBufferBuilder builder, double SOLAR_RAD_AREA) { builder.AddDouble(21, SOLAR_RAD_AREA, 0.0); }
  public static void AddSOLAR_RAD_COEFF(FlatBufferBuilder builder, double SOLAR_RAD_COEFF) { builder.AddDouble(22, SOLAR_RAD_COEFF, 0.0); }
  public static void AddDRAG_AREA(FlatBufferBuilder builder, double DRAG_AREA) { builder.AddDouble(23, DRAG_AREA, 0.0); }
  public static void AddDRAG_COEFF(FlatBufferBuilder builder, double DRAG_COEFF) { builder.AddDouble(24, DRAG_COEFF, 0.0); }
  public static void AddEPHEMERIS_TYPE(FlatBufferBuilder builder, ephemerisType EPHEMERIS_TYPE) { builder.AddSbyte(25, (sbyte)EPHEMERIS_TYPE, 1); }
  public static void AddCLASSIFICATION_TYPE(FlatBufferBuilder builder, StringOffset CLASSIFICATION_TYPEOffset) { builder.AddOffset(26, CLASSIFICATION_TYPEOffset.Value, 0); }
  public static void AddNORAD_CAT_ID(FlatBufferBuilder builder, uint NORAD_CAT_ID) { builder.AddUint(27, NORAD_CAT_ID, 0); }
  public static void AddELEMENT_SET_NO(FlatBufferBuilder builder, uint ELEMENT_SET_NO) { builder.AddUint(28, ELEMENT_SET_NO, 0); }
  public static void AddREV_AT_EPOCH(FlatBufferBuilder builder, double REV_AT_EPOCH) { builder.AddDouble(29, REV_AT_EPOCH, 0.0); }
  public static void AddBSTAR(FlatBufferBuilder builder, double BSTAR) { builder.AddDouble(30, BSTAR, 0.0); }
  public static void AddMEAN_MOTION_DOT(FlatBufferBuilder builder, double MEAN_MOTION_DOT) { builder.AddDouble(31, MEAN_MOTION_DOT, 0.0); }
  public static void AddMEAN_MOTION_DDOT(FlatBufferBuilder builder, double MEAN_MOTION_DDOT) { builder.AddDouble(32, MEAN_MOTION_DDOT, 0.0); }
  public static void AddCOV_REFERENCE_FRAME(FlatBufferBuilder builder, Offset<RFM> COV_REFERENCE_FRAMEOffset) { builder.AddOffset(33, COV_REFERENCE_FRAMEOffset.Value, 0); }
  public static void AddCX_X(FlatBufferBuilder builder, double CX_X) { builder.AddDouble(34, CX_X, 0.0); }
  public static void AddCY_X(FlatBufferBuilder builder, double CY_X) { builder.AddDouble(35, CY_X, 0.0); }
  public static void AddCY_Y(FlatBufferBuilder builder, double CY_Y) { builder.AddDouble(36, CY_Y, 0.0); }
  public static void AddCZ_X(FlatBufferBuilder builder, double CZ_X) { builder.AddDouble(37, CZ_X, 0.0); }
  public static void AddCZ_Y(FlatBufferBuilder builder, double CZ_Y) { builder.AddDouble(38, CZ_Y, 0.0); }
  public static void AddCZ_Z(FlatBufferBuilder builder, double CZ_Z) { builder.AddDouble(39, CZ_Z, 0.0); }
  public static void AddCX_DOT_X(FlatBufferBuilder builder, double CX_DOT_X) { builder.AddDouble(40, CX_DOT_X, 0.0); }
  public static void AddCX_DOT_Y(FlatBufferBuilder builder, double CX_DOT_Y) { builder.AddDouble(41, CX_DOT_Y, 0.0); }
  public static void AddCX_DOT_Z(FlatBufferBuilder builder, double CX_DOT_Z) { builder.AddDouble(42, CX_DOT_Z, 0.0); }
  public static void AddCX_DOT_X_DOT(FlatBufferBuilder builder, double CX_DOT_X_DOT) { builder.AddDouble(43, CX_DOT_X_DOT, 0.0); }
  public static void AddCY_DOT_X(FlatBufferBuilder builder, double CY_DOT_X) { builder.AddDouble(44, CY_DOT_X, 0.0); }
  public static void AddCY_DOT_Y(FlatBufferBuilder builder, double CY_DOT_Y) { builder.AddDouble(45, CY_DOT_Y, 0.0); }
  public static void AddCY_DOT_Z(FlatBufferBuilder builder, double CY_DOT_Z) { builder.AddDouble(46, CY_DOT_Z, 0.0); }
  public static void AddCY_DOT_X_DOT(FlatBufferBuilder builder, double CY_DOT_X_DOT) { builder.AddDouble(47, CY_DOT_X_DOT, 0.0); }
  public static void AddCY_DOT_Y_DOT(FlatBufferBuilder builder, double CY_DOT_Y_DOT) { builder.AddDouble(48, CY_DOT_Y_DOT, 0.0); }
  public static void AddCZ_DOT_X(FlatBufferBuilder builder, double CZ_DOT_X) { builder.AddDouble(49, CZ_DOT_X, 0.0); }
  public static void AddCZ_DOT_Y(FlatBufferBuilder builder, double CZ_DOT_Y) { builder.AddDouble(50, CZ_DOT_Y, 0.0); }
  public static void AddCZ_DOT_Z(FlatBufferBuilder builder, double CZ_DOT_Z) { builder.AddDouble(51, CZ_DOT_Z, 0.0); }
  public static void AddCZ_DOT_X_DOT(FlatBufferBuilder builder, double CZ_DOT_X_DOT) { builder.AddDouble(52, CZ_DOT_X_DOT, 0.0); }
  public static void AddCZ_DOT_Y_DOT(FlatBufferBuilder builder, double CZ_DOT_Y_DOT) { builder.AddDouble(53, CZ_DOT_Y_DOT, 0.0); }
  public static void AddCZ_DOT_Z_DOT(FlatBufferBuilder builder, double CZ_DOT_Z_DOT) { builder.AddDouble(54, CZ_DOT_Z_DOT, 0.0); }
  public static void AddUSER_DEFINED_BIP_0044_TYPE(FlatBufferBuilder builder, uint USER_DEFINED_BIP_0044_TYPE) { builder.AddUint(55, USER_DEFINED_BIP_0044_TYPE, 0); }
  public static void AddUSER_DEFINED_OBJECT_DESIGNATOR(FlatBufferBuilder builder, StringOffset USER_DEFINED_OBJECT_DESIGNATOROffset) { builder.AddOffset(56, USER_DEFINED_OBJECT_DESIGNATOROffset.Value, 0); }
  public static void AddUSER_DEFINED_EARTH_MODEL(FlatBufferBuilder builder, StringOffset USER_DEFINED_EARTH_MODELOffset) { builder.AddOffset(57, USER_DEFINED_EARTH_MODELOffset.Value, 0); }
  public static void AddUSER_DEFINED_EPOCH_TIMESTAMP(FlatBufferBuilder builder, double USER_DEFINED_EPOCH_TIMESTAMP) { builder.AddDouble(58, USER_DEFINED_EPOCH_TIMESTAMP, 0.0); }
  public static void AddUSER_DEFINED_MICROSECONDS(FlatBufferBuilder builder, double USER_DEFINED_MICROSECONDS) { builder.AddDouble(59, USER_DEFINED_MICROSECONDS, 0.0); }
  public static Offset<OMM> EndOMM(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<OMM>(o);
  }
  public static void FinishOMMBuffer(FlatBufferBuilder builder, Offset<OMM> offset) { builder.Finish(offset.Value, "$OMM"); }
  public static void FinishSizePrefixedOMMBuffer(FlatBufferBuilder builder, Offset<OMM> offset) { builder.FinishSizePrefixed(offset.Value, "$OMM"); }
  public OMMT UnPack() {
    var _o = new OMMT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OMMT _o) {
    _o.CCSDS_OMM_VERS = this.CCSDS_OMM_VERS;
    _o.CREATION_DATE = this.CREATION_DATE;
    _o.ORIGINATOR = this.ORIGINATOR;
    _o.OBJECT_NAME = this.OBJECT_NAME;
    _o.OBJECT_ID = this.OBJECT_ID;
    _o.CENTER_NAME = this.CENTER_NAME;
    _o.REFERENCE_FRAME = this.REFERENCE_FRAME.HasValue ? this.REFERENCE_FRAME.Value.UnPack() : null;
    _o.REFERENCE_FRAME_EPOCH = this.REFERENCE_FRAME_EPOCH;
    _o.TIME_SYSTEM = this.TIME_SYSTEM;
    _o.MEAN_ELEMENT_THEORY = this.MEAN_ELEMENT_THEORY;
    _o.COMMENT = this.COMMENT;
    _o.EPOCH = this.EPOCH;
    _o.SEMI_MAJOR_AXIS = this.SEMI_MAJOR_AXIS;
    _o.MEAN_MOTION = this.MEAN_MOTION;
    _o.ECCENTRICITY = this.ECCENTRICITY;
    _o.INCLINATION = this.INCLINATION;
    _o.RA_OF_ASC_NODE = this.RA_OF_ASC_NODE;
    _o.ARG_OF_PERICENTER = this.ARG_OF_PERICENTER;
    _o.MEAN_ANOMALY = this.MEAN_ANOMALY;
    _o.GM = this.GM;
    _o.MASS = this.MASS;
    _o.SOLAR_RAD_AREA = this.SOLAR_RAD_AREA;
    _o.SOLAR_RAD_COEFF = this.SOLAR_RAD_COEFF;
    _o.DRAG_AREA = this.DRAG_AREA;
    _o.DRAG_COEFF = this.DRAG_COEFF;
    _o.EPHEMERIS_TYPE = this.EPHEMERIS_TYPE;
    _o.CLASSIFICATION_TYPE = this.CLASSIFICATION_TYPE;
    _o.NORAD_CAT_ID = this.NORAD_CAT_ID;
    _o.ELEMENT_SET_NO = this.ELEMENT_SET_NO;
    _o.REV_AT_EPOCH = this.REV_AT_EPOCH;
    _o.BSTAR = this.BSTAR;
    _o.MEAN_MOTION_DOT = this.MEAN_MOTION_DOT;
    _o.MEAN_MOTION_DDOT = this.MEAN_MOTION_DDOT;
    _o.COV_REFERENCE_FRAME = this.COV_REFERENCE_FRAME.HasValue ? this.COV_REFERENCE_FRAME.Value.UnPack() : null;
    _o.CX_X = this.CX_X;
    _o.CY_X = this.CY_X;
    _o.CY_Y = this.CY_Y;
    _o.CZ_X = this.CZ_X;
    _o.CZ_Y = this.CZ_Y;
    _o.CZ_Z = this.CZ_Z;
    _o.CX_DOT_X = this.CX_DOT_X;
    _o.CX_DOT_Y = this.CX_DOT_Y;
    _o.CX_DOT_Z = this.CX_DOT_Z;
    _o.CX_DOT_X_DOT = this.CX_DOT_X_DOT;
    _o.CY_DOT_X = this.CY_DOT_X;
    _o.CY_DOT_Y = this.CY_DOT_Y;
    _o.CY_DOT_Z = this.CY_DOT_Z;
    _o.CY_DOT_X_DOT = this.CY_DOT_X_DOT;
    _o.CY_DOT_Y_DOT = this.CY_DOT_Y_DOT;
    _o.CZ_DOT_X = this.CZ_DOT_X;
    _o.CZ_DOT_Y = this.CZ_DOT_Y;
    _o.CZ_DOT_Z = this.CZ_DOT_Z;
    _o.CZ_DOT_X_DOT = this.CZ_DOT_X_DOT;
    _o.CZ_DOT_Y_DOT = this.CZ_DOT_Y_DOT;
    _o.CZ_DOT_Z_DOT = this.CZ_DOT_Z_DOT;
    _o.USER_DEFINED_BIP_0044_TYPE = this.USER_DEFINED_BIP_0044_TYPE;
    _o.USER_DEFINED_OBJECT_DESIGNATOR = this.USER_DEFINED_OBJECT_DESIGNATOR;
    _o.USER_DEFINED_EARTH_MODEL = this.USER_DEFINED_EARTH_MODEL;
    _o.USER_DEFINED_EPOCH_TIMESTAMP = this.USER_DEFINED_EPOCH_TIMESTAMP;
    _o.USER_DEFINED_MICROSECONDS = this.USER_DEFINED_MICROSECONDS;
  }
  public static Offset<OMM> Pack(FlatBufferBuilder builder, OMMT _o) {
    if (_o == null) return default(Offset<OMM>);
    var _CREATION_DATE = _o.CREATION_DATE == null ? default(StringOffset) : builder.CreateString(_o.CREATION_DATE);
    var _ORIGINATOR = _o.ORIGINATOR == null ? default(StringOffset) : builder.CreateString(_o.ORIGINATOR);
    var _OBJECT_NAME = _o.OBJECT_NAME == null ? default(StringOffset) : builder.CreateString(_o.OBJECT_NAME);
    var _OBJECT_ID = _o.OBJECT_ID == null ? default(StringOffset) : builder.CreateString(_o.OBJECT_ID);
    var _CENTER_NAME = _o.CENTER_NAME == null ? default(StringOffset) : builder.CreateString(_o.CENTER_NAME);
    var _REFERENCE_FRAME = _o.REFERENCE_FRAME == null ? default(Offset<RFM>) : RFM.Pack(builder, _o.REFERENCE_FRAME);
    var _REFERENCE_FRAME_EPOCH = _o.REFERENCE_FRAME_EPOCH == null ? default(StringOffset) : builder.CreateString(_o.REFERENCE_FRAME_EPOCH);
    var _COMMENT = _o.COMMENT == null ? default(StringOffset) : builder.CreateString(_o.COMMENT);
    var _EPOCH = _o.EPOCH == null ? default(StringOffset) : builder.CreateString(_o.EPOCH);
    var _CLASSIFICATION_TYPE = _o.CLASSIFICATION_TYPE == null ? default(StringOffset) : builder.CreateString(_o.CLASSIFICATION_TYPE);
    var _COV_REFERENCE_FRAME = _o.COV_REFERENCE_FRAME == null ? default(Offset<RFM>) : RFM.Pack(builder, _o.COV_REFERENCE_FRAME);
    var _USER_DEFINED_OBJECT_DESIGNATOR = _o.USER_DEFINED_OBJECT_DESIGNATOR == null ? default(StringOffset) : builder.CreateString(_o.USER_DEFINED_OBJECT_DESIGNATOR);
    var _USER_DEFINED_EARTH_MODEL = _o.USER_DEFINED_EARTH_MODEL == null ? default(StringOffset) : builder.CreateString(_o.USER_DEFINED_EARTH_MODEL);
    return CreateOMM(
      builder,
      _o.CCSDS_OMM_VERS,
      _CREATION_DATE,
      _ORIGINATOR,
      _OBJECT_NAME,
      _OBJECT_ID,
      _CENTER_NAME,
      _REFERENCE_FRAME,
      _REFERENCE_FRAME_EPOCH,
      _o.TIME_SYSTEM,
      _o.MEAN_ELEMENT_THEORY,
      _COMMENT,
      _EPOCH,
      _o.SEMI_MAJOR_AXIS,
      _o.MEAN_MOTION,
      _o.ECCENTRICITY,
      _o.INCLINATION,
      _o.RA_OF_ASC_NODE,
      _o.ARG_OF_PERICENTER,
      _o.MEAN_ANOMALY,
      _o.GM,
      _o.MASS,
      _o.SOLAR_RAD_AREA,
      _o.SOLAR_RAD_COEFF,
      _o.DRAG_AREA,
      _o.DRAG_COEFF,
      _o.EPHEMERIS_TYPE,
      _CLASSIFICATION_TYPE,
      _o.NORAD_CAT_ID,
      _o.ELEMENT_SET_NO,
      _o.REV_AT_EPOCH,
      _o.BSTAR,
      _o.MEAN_MOTION_DOT,
      _o.MEAN_MOTION_DDOT,
      _COV_REFERENCE_FRAME,
      _o.CX_X,
      _o.CY_X,
      _o.CY_Y,
      _o.CZ_X,
      _o.CZ_Y,
      _o.CZ_Z,
      _o.CX_DOT_X,
      _o.CX_DOT_Y,
      _o.CX_DOT_Z,
      _o.CX_DOT_X_DOT,
      _o.CY_DOT_X,
      _o.CY_DOT_Y,
      _o.CY_DOT_Z,
      _o.CY_DOT_X_DOT,
      _o.CY_DOT_Y_DOT,
      _o.CZ_DOT_X,
      _o.CZ_DOT_Y,
      _o.CZ_DOT_Z,
      _o.CZ_DOT_X_DOT,
      _o.CZ_DOT_Y_DOT,
      _o.CZ_DOT_Z_DOT,
      _o.USER_DEFINED_BIP_0044_TYPE,
      _USER_DEFINED_OBJECT_DESIGNATOR,
      _USER_DEFINED_EARTH_MODEL,
      _o.USER_DEFINED_EPOCH_TIMESTAMP,
      _o.USER_DEFINED_MICROSECONDS);
  }
}

public class OMMT
{
  public double CCSDS_OMM_VERS { get; set; }
  public string CREATION_DATE { get; set; }
  public string ORIGINATOR { get; set; }
  public string OBJECT_NAME { get; set; }
  public string OBJECT_ID { get; set; }
  public string CENTER_NAME { get; set; }
  public RFMT REFERENCE_FRAME { get; set; }
  public string REFERENCE_FRAME_EPOCH { get; set; }
  public timeSystem TIME_SYSTEM { get; set; }
  public meanElementTheory MEAN_ELEMENT_THEORY { get; set; }
  public string COMMENT { get; set; }
  public string EPOCH { get; set; }
  public double SEMI_MAJOR_AXIS { get; set; }
  public double MEAN_MOTION { get; set; }
  public double ECCENTRICITY { get; set; }
  public double INCLINATION { get; set; }
  public double RA_OF_ASC_NODE { get; set; }
  public double ARG_OF_PERICENTER { get; set; }
  public double MEAN_ANOMALY { get; set; }
  public double GM { get; set; }
  public double MASS { get; set; }
  public double SOLAR_RAD_AREA { get; set; }
  public double SOLAR_RAD_COEFF { get; set; }
  public double DRAG_AREA { get; set; }
  public double DRAG_COEFF { get; set; }
  public ephemerisType EPHEMERIS_TYPE { get; set; }
  public string CLASSIFICATION_TYPE { get; set; }
  public uint NORAD_CAT_ID { get; set; }
  public uint ELEMENT_SET_NO { get; set; }
  public double REV_AT_EPOCH { get; set; }
  public double BSTAR { get; set; }
  public double MEAN_MOTION_DOT { get; set; }
  public double MEAN_MOTION_DDOT { get; set; }
  public RFMT COV_REFERENCE_FRAME { get; set; }
  public double CX_X { get; set; }
  public double CY_X { get; set; }
  public double CY_Y { get; set; }
  public double CZ_X { get; set; }
  public double CZ_Y { get; set; }
  public double CZ_Z { get; set; }
  public double CX_DOT_X { get; set; }
  public double CX_DOT_Y { get; set; }
  public double CX_DOT_Z { get; set; }
  public double CX_DOT_X_DOT { get; set; }
  public double CY_DOT_X { get; set; }
  public double CY_DOT_Y { get; set; }
  public double CY_DOT_Z { get; set; }
  public double CY_DOT_X_DOT { get; set; }
  public double CY_DOT_Y_DOT { get; set; }
  public double CZ_DOT_X { get; set; }
  public double CZ_DOT_Y { get; set; }
  public double CZ_DOT_Z { get; set; }
  public double CZ_DOT_X_DOT { get; set; }
  public double CZ_DOT_Y_DOT { get; set; }
  public double CZ_DOT_Z_DOT { get; set; }
  public uint USER_DEFINED_BIP_0044_TYPE { get; set; }
  public string USER_DEFINED_OBJECT_DESIGNATOR { get; set; }
  public string USER_DEFINED_EARTH_MODEL { get; set; }
  public double USER_DEFINED_EPOCH_TIMESTAMP { get; set; }
  public double USER_DEFINED_MICROSECONDS { get; set; }

  public OMMT() {
    this.CCSDS_OMM_VERS = 0.0;
    this.CREATION_DATE = null;
    this.ORIGINATOR = null;
    this.OBJECT_NAME = null;
    this.OBJECT_ID = null;
    this.CENTER_NAME = null;
    this.REFERENCE_FRAME = null;
    this.REFERENCE_FRAME_EPOCH = null;
    this.TIME_SYSTEM = timeSystem.UTC;
    this.MEAN_ELEMENT_THEORY = meanElementTheory.SGP4;
    this.COMMENT = null;
    this.EPOCH = null;
    this.SEMI_MAJOR_AXIS = 0.0;
    this.MEAN_MOTION = 0.0;
    this.ECCENTRICITY = 0.0;
    this.INCLINATION = 0.0;
    this.RA_OF_ASC_NODE = 0.0;
    this.ARG_OF_PERICENTER = 0.0;
    this.MEAN_ANOMALY = 0.0;
    this.GM = 0.0;
    this.MASS = 0.0;
    this.SOLAR_RAD_AREA = 0.0;
    this.SOLAR_RAD_COEFF = 0.0;
    this.DRAG_AREA = 0.0;
    this.DRAG_COEFF = 0.0;
    this.EPHEMERIS_TYPE = ephemerisType.SGP4;
    this.CLASSIFICATION_TYPE = null;
    this.NORAD_CAT_ID = 0;
    this.ELEMENT_SET_NO = 0;
    this.REV_AT_EPOCH = 0.0;
    this.BSTAR = 0.0;
    this.MEAN_MOTION_DOT = 0.0;
    this.MEAN_MOTION_DDOT = 0.0;
    this.COV_REFERENCE_FRAME = null;
    this.CX_X = 0.0;
    this.CY_X = 0.0;
    this.CY_Y = 0.0;
    this.CZ_X = 0.0;
    this.CZ_Y = 0.0;
    this.CZ_Z = 0.0;
    this.CX_DOT_X = 0.0;
    this.CX_DOT_Y = 0.0;
    this.CX_DOT_Z = 0.0;
    this.CX_DOT_X_DOT = 0.0;
    this.CY_DOT_X = 0.0;
    this.CY_DOT_Y = 0.0;
    this.CY_DOT_Z = 0.0;
    this.CY_DOT_X_DOT = 0.0;
    this.CY_DOT_Y_DOT = 0.0;
    this.CZ_DOT_X = 0.0;
    this.CZ_DOT_Y = 0.0;
    this.CZ_DOT_Z = 0.0;
    this.CZ_DOT_X_DOT = 0.0;
    this.CZ_DOT_Y_DOT = 0.0;
    this.CZ_DOT_Z_DOT = 0.0;
    this.USER_DEFINED_BIP_0044_TYPE = 0;
    this.USER_DEFINED_OBJECT_DESIGNATOR = null;
    this.USER_DEFINED_EARTH_MODEL = null;
    this.USER_DEFINED_EPOCH_TIMESTAMP = 0.0;
    this.USER_DEFINED_MICROSECONDS = 0.0;
  }
  public static OMMT DeserializeFromBinary(byte[] fbBuffer) {
    return OMM.GetRootAsOMM(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    OMM.FinishOMMBuffer(fbb, OMM.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class OMMVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CCSDS_OMM_VERS*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*CREATION_DATE*/, false)
      && verifier.VerifyString(tablePos, 8 /*ORIGINATOR*/, false)
      && verifier.VerifyString(tablePos, 10 /*OBJECT_NAME*/, false)
      && verifier.VerifyString(tablePos, 12 /*OBJECT_ID*/, false)
      && verifier.VerifyString(tablePos, 14 /*CENTER_NAME*/, false)
      && verifier.VerifyTable(tablePos, 16 /*REFERENCE_FRAME*/, RFMVerify.Verify, false)
      && verifier.VerifyString(tablePos, 18 /*REFERENCE_FRAME_EPOCH*/, false)
      && verifier.VerifyField(tablePos, 20 /*TIME_SYSTEM*/, 1 /*timeSystem*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*MEAN_ELEMENT_THEORY*/, 1 /*meanElementTheory*/, 1, false)
      && verifier.VerifyString(tablePos, 24 /*COMMENT*/, false)
      && verifier.VerifyString(tablePos, 26 /*EPOCH*/, false)
      && verifier.VerifyField(tablePos, 28 /*SEMI_MAJOR_AXIS*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*MEAN_MOTION*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*ECCENTRICITY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*INCLINATION*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*RA_OF_ASC_NODE*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*ARG_OF_PERICENTER*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*MEAN_ANOMALY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*GM*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*MASS*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*SOLAR_RAD_AREA*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*SOLAR_RAD_COEFF*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*DRAG_AREA*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*DRAG_COEFF*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*EPHEMERIS_TYPE*/, 1 /*ephemerisType*/, 1, false)
      && verifier.VerifyString(tablePos, 56 /*CLASSIFICATION_TYPE*/, false)
      && verifier.VerifyField(tablePos, 58 /*NORAD_CAT_ID*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*ELEMENT_SET_NO*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*REV_AT_EPOCH*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*BSTAR*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*MEAN_MOTION_DOT*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*MEAN_MOTION_DDOT*/, 8 /*double*/, 8, false)
      && verifier.VerifyTable(tablePos, 70 /*COV_REFERENCE_FRAME*/, RFMVerify.Verify, false)
      && verifier.VerifyField(tablePos, 72 /*CX_X*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*CY_X*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*CY_Y*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*CZ_X*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*CZ_Y*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*CZ_Z*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*CX_DOT_X*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 86 /*CX_DOT_Y*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 88 /*CX_DOT_Z*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*CX_DOT_X_DOT*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 92 /*CY_DOT_X*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 94 /*CY_DOT_Y*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 96 /*CY_DOT_Z*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 98 /*CY_DOT_X_DOT*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 100 /*CY_DOT_Y_DOT*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 102 /*CZ_DOT_X*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 104 /*CZ_DOT_Y*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 106 /*CZ_DOT_Z*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 108 /*CZ_DOT_X_DOT*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 110 /*CZ_DOT_Y_DOT*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 112 /*CZ_DOT_Z_DOT*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 114 /*USER_DEFINED_BIP_0044_TYPE*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 116 /*USER_DEFINED_OBJECT_DESIGNATOR*/, false)
      && verifier.VerifyString(tablePos, 118 /*USER_DEFINED_EARTH_MODEL*/, false)
      && verifier.VerifyField(tablePos, 120 /*USER_DEFINED_EPOCH_TIMESTAMP*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 122 /*USER_DEFINED_MICROSECONDS*/, 8 /*double*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
