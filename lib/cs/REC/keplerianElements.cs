// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Keplerian Elements
public struct keplerianElements : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static keplerianElements GetRootAskeplerianElements(ByteBuffer _bb) { return GetRootAskeplerianElements(_bb, new keplerianElements()); }
  public static keplerianElements GetRootAskeplerianElements(ByteBuffer _bb, keplerianElements obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public keplerianElements __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double SEMI_MAJOR_AXIS { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double ECCENTRICITY { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double INCLINATION { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double RA_OF_ASC_NODE { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double ARG_OF_PERICENTER { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public anomalyType ANOMALY_TYPE { get { int o = __p.__offset(14); return o != 0 ? (anomalyType)__p.bb.GetSbyte(o + __p.bb_pos) : anomalyType.TRUE_ANOMALY; } }
  public double ANOMALY { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<keplerianElements> CreatekeplerianElements(FlatBufferBuilder builder,
      double SEMI_MAJOR_AXIS = 0.0,
      double ECCENTRICITY = 0.0,
      double INCLINATION = 0.0,
      double RA_OF_ASC_NODE = 0.0,
      double ARG_OF_PERICENTER = 0.0,
      anomalyType ANOMALY_TYPE = anomalyType.TRUE_ANOMALY,
      double ANOMALY = 0.0) {
    builder.StartTable(7);
    keplerianElements.AddANOMALY(builder, ANOMALY);
    keplerianElements.AddARG_OF_PERICENTER(builder, ARG_OF_PERICENTER);
    keplerianElements.AddRA_OF_ASC_NODE(builder, RA_OF_ASC_NODE);
    keplerianElements.AddINCLINATION(builder, INCLINATION);
    keplerianElements.AddECCENTRICITY(builder, ECCENTRICITY);
    keplerianElements.AddSEMI_MAJOR_AXIS(builder, SEMI_MAJOR_AXIS);
    keplerianElements.AddANOMALY_TYPE(builder, ANOMALY_TYPE);
    return keplerianElements.EndkeplerianElements(builder);
  }

  public static void StartkeplerianElements(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddSEMI_MAJOR_AXIS(FlatBufferBuilder builder, double SEMI_MAJOR_AXIS) { builder.AddDouble(0, SEMI_MAJOR_AXIS, 0.0); }
  public static void AddECCENTRICITY(FlatBufferBuilder builder, double ECCENTRICITY) { builder.AddDouble(1, ECCENTRICITY, 0.0); }
  public static void AddINCLINATION(FlatBufferBuilder builder, double INCLINATION) { builder.AddDouble(2, INCLINATION, 0.0); }
  public static void AddRA_OF_ASC_NODE(FlatBufferBuilder builder, double RA_OF_ASC_NODE) { builder.AddDouble(3, RA_OF_ASC_NODE, 0.0); }
  public static void AddARG_OF_PERICENTER(FlatBufferBuilder builder, double ARG_OF_PERICENTER) { builder.AddDouble(4, ARG_OF_PERICENTER, 0.0); }
  public static void AddANOMALY_TYPE(FlatBufferBuilder builder, anomalyType ANOMALY_TYPE) { builder.AddSbyte(5, (sbyte)ANOMALY_TYPE, 0); }
  public static void AddANOMALY(FlatBufferBuilder builder, double ANOMALY) { builder.AddDouble(6, ANOMALY, 0.0); }
  public static Offset<keplerianElements> EndkeplerianElements(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<keplerianElements>(o);
  }
  public keplerianElementsT UnPack() {
    var _o = new keplerianElementsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(keplerianElementsT _o) {
    _o.SEMI_MAJOR_AXIS = this.SEMI_MAJOR_AXIS;
    _o.ECCENTRICITY = this.ECCENTRICITY;
    _o.INCLINATION = this.INCLINATION;
    _o.RA_OF_ASC_NODE = this.RA_OF_ASC_NODE;
    _o.ARG_OF_PERICENTER = this.ARG_OF_PERICENTER;
    _o.ANOMALY_TYPE = this.ANOMALY_TYPE;
    _o.ANOMALY = this.ANOMALY;
  }
  public static Offset<keplerianElements> Pack(FlatBufferBuilder builder, keplerianElementsT _o) {
    if (_o == null) return default(Offset<keplerianElements>);
    return CreatekeplerianElements(
      builder,
      _o.SEMI_MAJOR_AXIS,
      _o.ECCENTRICITY,
      _o.INCLINATION,
      _o.RA_OF_ASC_NODE,
      _o.ARG_OF_PERICENTER,
      _o.ANOMALY_TYPE,
      _o.ANOMALY);
  }
}

public class keplerianElementsT
{
  public double SEMI_MAJOR_AXIS { get; set; }
  public double ECCENTRICITY { get; set; }
  public double INCLINATION { get; set; }
  public double RA_OF_ASC_NODE { get; set; }
  public double ARG_OF_PERICENTER { get; set; }
  public anomalyType ANOMALY_TYPE { get; set; }
  public double ANOMALY { get; set; }

  public keplerianElementsT() {
    this.SEMI_MAJOR_AXIS = 0.0;
    this.ECCENTRICITY = 0.0;
    this.INCLINATION = 0.0;
    this.RA_OF_ASC_NODE = 0.0;
    this.ARG_OF_PERICENTER = 0.0;
    this.ANOMALY_TYPE = anomalyType.TRUE_ANOMALY;
    this.ANOMALY = 0.0;
  }
}


static public class keplerianElementsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*SEMI_MAJOR_AXIS*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*ECCENTRICITY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*INCLINATION*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*RA_OF_ASC_NODE*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*ARG_OF_PERICENTER*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*ANOMALY_TYPE*/, 1 /*anomalyType*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*ANOMALY*/, 8 /*double*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
