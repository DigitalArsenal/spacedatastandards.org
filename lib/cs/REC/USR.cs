// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct USR : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static USR GetRootAsUSR(ByteBuffer _bb) { return GetRootAsUSR(_bb, new USR()); }
  public static USR GetRootAsUSR(ByteBuffer _bb, USR obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public USR __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIDArray() { return __p.__vector_as_array<byte>(4); }
  public string MESSAGE_TYPES(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MESSAGE_TYPESLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<USR> CreateUSR(FlatBufferBuilder builder,
      StringOffset IDOffset = default(StringOffset),
      VectorOffset MESSAGE_TYPESOffset = default(VectorOffset)) {
    builder.StartTable(2);
    USR.AddMESSAGE_TYPES(builder, MESSAGE_TYPESOffset);
    USR.AddID(builder, IDOffset);
    return USR.EndUSR(builder);
  }

  public static void StartUSR(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddID(FlatBufferBuilder builder, StringOffset IDOffset) { builder.AddOffset(0, IDOffset.Value, 0); }
  public static void AddMESSAGE_TYPES(FlatBufferBuilder builder, VectorOffset MESSAGE_TYPESOffset) { builder.AddOffset(1, MESSAGE_TYPESOffset.Value, 0); }
  public static VectorOffset CreateMESSAGE_TYPESVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMESSAGE_TYPESVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMESSAGE_TYPESVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMESSAGE_TYPESVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMESSAGE_TYPESVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<USR> EndUSR(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<USR>(o);
  }
  public USRT UnPack() {
    var _o = new USRT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(USRT _o) {
    _o.ID = this.ID;
    _o.MESSAGE_TYPES = new List<string>();
    for (var _j = 0; _j < this.MESSAGE_TYPESLength; ++_j) {_o.MESSAGE_TYPES.Add(this.MESSAGE_TYPES(_j));}
  }
  public static Offset<USR> Pack(FlatBufferBuilder builder, USRT _o) {
    if (_o == null) return default(Offset<USR>);
    var _ID = _o.ID == null ? default(StringOffset) : builder.CreateString(_o.ID);
    var _MESSAGE_TYPES = default(VectorOffset);
    if (_o.MESSAGE_TYPES != null) {
      var __MESSAGE_TYPES = new StringOffset[_o.MESSAGE_TYPES.Count];
      for (var _j = 0; _j < __MESSAGE_TYPES.Length; ++_j) { __MESSAGE_TYPES[_j] = builder.CreateString(_o.MESSAGE_TYPES[_j]); }
      _MESSAGE_TYPES = CreateMESSAGE_TYPESVector(builder, __MESSAGE_TYPES);
    }
    return CreateUSR(
      builder,
      _ID,
      _MESSAGE_TYPES);
  }
}

public class USRT
{
  public string ID { get; set; }
  public List<string> MESSAGE_TYPES { get; set; }

  public USRT() {
    this.ID = null;
    this.MESSAGE_TYPES = null;
  }
}

