// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Reference Frame Message
public struct RFM : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static RFM GetRootAsRFM(ByteBuffer _bb) { return GetRootAsRFM(_bb, new RFM()); }
  public static RFM GetRootAsRFM(ByteBuffer _bb, RFM obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool RFMBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$RFM"); }
  public static bool VerifyRFM(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("$RFM", false, RFMVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RFM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public refFrame REFERENCE_FRAME { get { int o = __p.__offset(4); return o != 0 ? (refFrame)__p.bb.GetSbyte(o + __p.bb_pos) : refFrame.ECEF; } }

  public static Offset<RFM> CreateRFM(FlatBufferBuilder builder,
      refFrame REFERENCE_FRAME = refFrame.ECEF) {
    builder.StartTable(1);
    RFM.AddREFERENCE_FRAME(builder, REFERENCE_FRAME);
    return RFM.EndRFM(builder);
  }

  public static void StartRFM(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddREFERENCE_FRAME(FlatBufferBuilder builder, refFrame REFERENCE_FRAME) { builder.AddSbyte(0, (sbyte)REFERENCE_FRAME, 0); }
  public static Offset<RFM> EndRFM(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<RFM>(o);
  }
  public static void FinishRFMBuffer(FlatBufferBuilder builder, Offset<RFM> offset) { builder.Finish(offset.Value, "$RFM"); }
  public static void FinishSizePrefixedRFMBuffer(FlatBufferBuilder builder, Offset<RFM> offset) { builder.FinishSizePrefixed(offset.Value, "$RFM"); }
  public RFMT UnPack() {
    var _o = new RFMT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RFMT _o) {
    _o.REFERENCE_FRAME = this.REFERENCE_FRAME;
  }
  public static Offset<RFM> Pack(FlatBufferBuilder builder, RFMT _o) {
    if (_o == null) return default(Offset<RFM>);
    return CreateRFM(
      builder,
      _o.REFERENCE_FRAME);
  }
}

public class RFMT
{
  public refFrame REFERENCE_FRAME { get; set; }

  public RFMT() {
    this.REFERENCE_FRAME = refFrame.ECEF;
  }
  public static RFMT DeserializeFromBinary(byte[] fbBuffer) {
    return RFM.GetRootAsRFM(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    RFM.FinishRFMBuffer(fbb, RFM.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class RFMVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*REFERENCE_FRAME*/, 1 /*refFrame*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
