// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Hypothesis Message
public struct HYP : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static HYP GetRootAsHYP(ByteBuffer _bb) { return GetRootAsHYP(_bb, new HYP()); }
  public static HYP GetRootAsHYP(ByteBuffer _bb, HYP obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool HYPBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$HYP"); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HYP __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Space Objects Involved
  public string CAT_IDS(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CAT_IDSLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Space Objects Involved
  public string SIT_IDS(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SIT_IDSLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Name of the hypothesis
  public string NAME { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNAMEBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNAMEBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNAMEArray() { return __p.__vector_as_array<byte>(8); }
  /// Category of the hypothesis
  public string CATEGORY { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCATEGORYBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCATEGORYBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCATEGORYArray() { return __p.__vector_as_array<byte>(10); }
  /// Row indicators for the hypothesis matrix
  public string ROW_INDICATORS(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ROW_INDICATORSLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Column indicators for the hypothesis matrix
  public string COL_INDICATORS(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int COL_INDICATORSLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Matrix data as a boolean array in row major format; if overflow, adds additional rows
  public bool MATRIX(int j) { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(__p.__vector(o) + j * 1) : false; }
  public int MATRIXLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<bool> GetMATRIXBytes() { return __p.__vector_as_span<bool>(16, 1); }
#else
  public ArraySegment<byte>? GetMATRIXBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public bool[] GetMATRIXArray() { return __p.__vector_as_array<bool>(16); }
  /// Scores for objects
  public Score? SCORE(int j) { int o = __p.__offset(18); return o != 0 ? (Score?)(new Score()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SCORELength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Analysis methodology used to form the hypothesis
  public string ANALYSIS_METHOD { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetANALYSIS_METHODBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetANALYSIS_METHODBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetANALYSIS_METHODArray() { return __p.__vector_as_array<byte>(20); }
  public string EVENT_START_TIME { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEVENT_START_TIMEBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetEVENT_START_TIMEBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetEVENT_START_TIMEArray() { return __p.__vector_as_array<byte>(22); }
  public string EVENT_END_TIME { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEVENT_END_TIMEBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetEVENT_END_TIMEBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetEVENT_END_TIMEArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<HYP> CreateHYP(FlatBufferBuilder builder,
      VectorOffset CAT_IDSOffset = default(VectorOffset),
      VectorOffset SIT_IDSOffset = default(VectorOffset),
      StringOffset NAMEOffset = default(StringOffset),
      StringOffset CATEGORYOffset = default(StringOffset),
      VectorOffset ROW_INDICATORSOffset = default(VectorOffset),
      VectorOffset COL_INDICATORSOffset = default(VectorOffset),
      VectorOffset MATRIXOffset = default(VectorOffset),
      VectorOffset SCOREOffset = default(VectorOffset),
      StringOffset ANALYSIS_METHODOffset = default(StringOffset),
      StringOffset EVENT_START_TIMEOffset = default(StringOffset),
      StringOffset EVENT_END_TIMEOffset = default(StringOffset)) {
    builder.StartTable(11);
    HYP.AddEVENT_END_TIME(builder, EVENT_END_TIMEOffset);
    HYP.AddEVENT_START_TIME(builder, EVENT_START_TIMEOffset);
    HYP.AddANALYSIS_METHOD(builder, ANALYSIS_METHODOffset);
    HYP.AddSCORE(builder, SCOREOffset);
    HYP.AddMATRIX(builder, MATRIXOffset);
    HYP.AddCOL_INDICATORS(builder, COL_INDICATORSOffset);
    HYP.AddROW_INDICATORS(builder, ROW_INDICATORSOffset);
    HYP.AddCATEGORY(builder, CATEGORYOffset);
    HYP.AddNAME(builder, NAMEOffset);
    HYP.AddSIT_IDS(builder, SIT_IDSOffset);
    HYP.AddCAT_IDS(builder, CAT_IDSOffset);
    return HYP.EndHYP(builder);
  }

  public static void StartHYP(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddCAT_IDS(FlatBufferBuilder builder, VectorOffset CAT_IDSOffset) { builder.AddOffset(0, CAT_IDSOffset.Value, 0); }
  public static VectorOffset CreateCAT_IDSVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCAT_IDSVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCAT_IDSVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCAT_IDSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCAT_IDSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSIT_IDS(FlatBufferBuilder builder, VectorOffset SIT_IDSOffset) { builder.AddOffset(1, SIT_IDSOffset.Value, 0); }
  public static VectorOffset CreateSIT_IDSVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSIT_IDSVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSIT_IDSVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSIT_IDSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSIT_IDSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNAME(FlatBufferBuilder builder, StringOffset NAMEOffset) { builder.AddOffset(2, NAMEOffset.Value, 0); }
  public static void AddCATEGORY(FlatBufferBuilder builder, StringOffset CATEGORYOffset) { builder.AddOffset(3, CATEGORYOffset.Value, 0); }
  public static void AddROW_INDICATORS(FlatBufferBuilder builder, VectorOffset ROW_INDICATORSOffset) { builder.AddOffset(4, ROW_INDICATORSOffset.Value, 0); }
  public static VectorOffset CreateROW_INDICATORSVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateROW_INDICATORSVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateROW_INDICATORSVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateROW_INDICATORSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartROW_INDICATORSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCOL_INDICATORS(FlatBufferBuilder builder, VectorOffset COL_INDICATORSOffset) { builder.AddOffset(5, COL_INDICATORSOffset.Value, 0); }
  public static VectorOffset CreateCOL_INDICATORSVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCOL_INDICATORSVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCOL_INDICATORSVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCOL_INDICATORSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCOL_INDICATORSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMATRIX(FlatBufferBuilder builder, VectorOffset MATRIXOffset) { builder.AddOffset(6, MATRIXOffset.Value, 0); }
  public static VectorOffset CreateMATRIXVector(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddBool(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMATRIXVectorBlock(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMATRIXVectorBlock(FlatBufferBuilder builder, ArraySegment<bool> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMATRIXVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<bool>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMATRIXVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddSCORE(FlatBufferBuilder builder, VectorOffset SCOREOffset) { builder.AddOffset(7, SCOREOffset.Value, 0); }
  public static VectorOffset CreateSCOREVector(FlatBufferBuilder builder, Offset<Score>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSCOREVectorBlock(FlatBufferBuilder builder, Offset<Score>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSCOREVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Score>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSCOREVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Score>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSCOREVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddANALYSIS_METHOD(FlatBufferBuilder builder, StringOffset ANALYSIS_METHODOffset) { builder.AddOffset(8, ANALYSIS_METHODOffset.Value, 0); }
  public static void AddEVENT_START_TIME(FlatBufferBuilder builder, StringOffset EVENT_START_TIMEOffset) { builder.AddOffset(9, EVENT_START_TIMEOffset.Value, 0); }
  public static void AddEVENT_END_TIME(FlatBufferBuilder builder, StringOffset EVENT_END_TIMEOffset) { builder.AddOffset(10, EVENT_END_TIMEOffset.Value, 0); }
  public static Offset<HYP> EndHYP(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<HYP>(o);
  }
  public static void FinishHYPBuffer(FlatBufferBuilder builder, Offset<HYP> offset) { builder.Finish(offset.Value, "$HYP"); }
  public static void FinishSizePrefixedHYPBuffer(FlatBufferBuilder builder, Offset<HYP> offset) { builder.FinishSizePrefixed(offset.Value, "$HYP"); }
  public HYPT UnPack() {
    var _o = new HYPT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HYPT _o) {
    _o.CAT_IDS = new List<string>();
    for (var _j = 0; _j < this.CAT_IDSLength; ++_j) {_o.CAT_IDS.Add(this.CAT_IDS(_j));}
    _o.SIT_IDS = new List<string>();
    for (var _j = 0; _j < this.SIT_IDSLength; ++_j) {_o.SIT_IDS.Add(this.SIT_IDS(_j));}
    _o.NAME = this.NAME;
    _o.CATEGORY = this.CATEGORY;
    _o.ROW_INDICATORS = new List<string>();
    for (var _j = 0; _j < this.ROW_INDICATORSLength; ++_j) {_o.ROW_INDICATORS.Add(this.ROW_INDICATORS(_j));}
    _o.COL_INDICATORS = new List<string>();
    for (var _j = 0; _j < this.COL_INDICATORSLength; ++_j) {_o.COL_INDICATORS.Add(this.COL_INDICATORS(_j));}
    _o.MATRIX = new List<bool>();
    for (var _j = 0; _j < this.MATRIXLength; ++_j) {_o.MATRIX.Add(this.MATRIX(_j));}
    _o.SCORE = new List<ScoreT>();
    for (var _j = 0; _j < this.SCORELength; ++_j) {_o.SCORE.Add(this.SCORE(_j).HasValue ? this.SCORE(_j).Value.UnPack() : null);}
    _o.ANALYSIS_METHOD = this.ANALYSIS_METHOD;
    _o.EVENT_START_TIME = this.EVENT_START_TIME;
    _o.EVENT_END_TIME = this.EVENT_END_TIME;
  }
  public static Offset<HYP> Pack(FlatBufferBuilder builder, HYPT _o) {
    if (_o == null) return default(Offset<HYP>);
    var _CAT_IDS = default(VectorOffset);
    if (_o.CAT_IDS != null) {
      var __CAT_IDS = new StringOffset[_o.CAT_IDS.Count];
      for (var _j = 0; _j < __CAT_IDS.Length; ++_j) { __CAT_IDS[_j] = builder.CreateString(_o.CAT_IDS[_j]); }
      _CAT_IDS = CreateCAT_IDSVector(builder, __CAT_IDS);
    }
    var _SIT_IDS = default(VectorOffset);
    if (_o.SIT_IDS != null) {
      var __SIT_IDS = new StringOffset[_o.SIT_IDS.Count];
      for (var _j = 0; _j < __SIT_IDS.Length; ++_j) { __SIT_IDS[_j] = builder.CreateString(_o.SIT_IDS[_j]); }
      _SIT_IDS = CreateSIT_IDSVector(builder, __SIT_IDS);
    }
    var _NAME = _o.NAME == null ? default(StringOffset) : builder.CreateString(_o.NAME);
    var _CATEGORY = _o.CATEGORY == null ? default(StringOffset) : builder.CreateString(_o.CATEGORY);
    var _ROW_INDICATORS = default(VectorOffset);
    if (_o.ROW_INDICATORS != null) {
      var __ROW_INDICATORS = new StringOffset[_o.ROW_INDICATORS.Count];
      for (var _j = 0; _j < __ROW_INDICATORS.Length; ++_j) { __ROW_INDICATORS[_j] = builder.CreateString(_o.ROW_INDICATORS[_j]); }
      _ROW_INDICATORS = CreateROW_INDICATORSVector(builder, __ROW_INDICATORS);
    }
    var _COL_INDICATORS = default(VectorOffset);
    if (_o.COL_INDICATORS != null) {
      var __COL_INDICATORS = new StringOffset[_o.COL_INDICATORS.Count];
      for (var _j = 0; _j < __COL_INDICATORS.Length; ++_j) { __COL_INDICATORS[_j] = builder.CreateString(_o.COL_INDICATORS[_j]); }
      _COL_INDICATORS = CreateCOL_INDICATORSVector(builder, __COL_INDICATORS);
    }
    var _MATRIX = default(VectorOffset);
    if (_o.MATRIX != null) {
      var __MATRIX = _o.MATRIX.ToArray();
      _MATRIX = CreateMATRIXVector(builder, __MATRIX);
    }
    var _SCORE = default(VectorOffset);
    if (_o.SCORE != null) {
      var __SCORE = new Offset<Score>[_o.SCORE.Count];
      for (var _j = 0; _j < __SCORE.Length; ++_j) { __SCORE[_j] = Score.Pack(builder, _o.SCORE[_j]); }
      _SCORE = CreateSCOREVector(builder, __SCORE);
    }
    var _ANALYSIS_METHOD = _o.ANALYSIS_METHOD == null ? default(StringOffset) : builder.CreateString(_o.ANALYSIS_METHOD);
    var _EVENT_START_TIME = _o.EVENT_START_TIME == null ? default(StringOffset) : builder.CreateString(_o.EVENT_START_TIME);
    var _EVENT_END_TIME = _o.EVENT_END_TIME == null ? default(StringOffset) : builder.CreateString(_o.EVENT_END_TIME);
    return CreateHYP(
      builder,
      _CAT_IDS,
      _SIT_IDS,
      _NAME,
      _CATEGORY,
      _ROW_INDICATORS,
      _COL_INDICATORS,
      _MATRIX,
      _SCORE,
      _ANALYSIS_METHOD,
      _EVENT_START_TIME,
      _EVENT_END_TIME);
  }
}

public class HYPT
{
  public List<string> CAT_IDS { get; set; }
  public List<string> SIT_IDS { get; set; }
  public string NAME { get; set; }
  public string CATEGORY { get; set; }
  public List<string> ROW_INDICATORS { get; set; }
  public List<string> COL_INDICATORS { get; set; }
  public List<bool> MATRIX { get; set; }
  public List<ScoreT> SCORE { get; set; }
  public string ANALYSIS_METHOD { get; set; }
  public string EVENT_START_TIME { get; set; }
  public string EVENT_END_TIME { get; set; }

  public HYPT() {
    this.CAT_IDS = null;
    this.SIT_IDS = null;
    this.NAME = null;
    this.CATEGORY = null;
    this.ROW_INDICATORS = null;
    this.COL_INDICATORS = null;
    this.MATRIX = null;
    this.SCORE = null;
    this.ANALYSIS_METHOD = null;
    this.EVENT_START_TIME = null;
    this.EVENT_END_TIME = null;
  }
  public static HYPT DeserializeFromBinary(byte[] fbBuffer) {
    return HYP.GetRootAsHYP(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    HYP.FinishHYPBuffer(fbb, HYP.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}

