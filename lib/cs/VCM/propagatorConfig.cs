// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Propagator configuration structure to describe propagation settings
public struct propagatorConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static propagatorConfig GetRootAspropagatorConfig(ByteBuffer _bb) { return GetRootAspropagatorConfig(_bb, new propagatorConfig()); }
  public static propagatorConfig GetRootAspropagatorConfig(ByteBuffer _bb, propagatorConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public propagatorConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PROPAGATOR_NAME { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPROPAGATOR_NAMEBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPROPAGATOR_NAMEBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPROPAGATOR_NAMEArray() { return __p.__vector_as_array<byte>(4); }
  public propagatorType PROPAGATOR_TYPE { get { int o = __p.__offset(6); return o != 0 ? (propagatorType)__p.bb.GetSbyte(o + __p.bb_pos) : propagatorType.NONE; } }
  public string FORCE_MODELS(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FORCE_MODELSLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string EPOCH { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEPOCHBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetEPOCHBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetEPOCHArray() { return __p.__vector_as_array<byte>(10); }
  public double TIME_STEP { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public zonalHarmonic ZONAL_HARMONIC_TERMS(int j) { int o = __p.__offset(14); return o != 0 ? (zonalHarmonic)__p.bb.GetSbyte(__p.__vector(o) + j * 1) : (zonalHarmonic)0; }
  public int ZONAL_HARMONIC_TERMSLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<zonalHarmonic> GetZONAL_HARMONIC_TERMSBytes() { return __p.__vector_as_span<zonalHarmonic>(14, 1); }
#else
  public ArraySegment<byte>? GetZONAL_HARMONIC_TERMSBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public zonalHarmonic[] GetZONAL_HARMONIC_TERMSArray() { int o = __p.__offset(14); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); zonalHarmonic[] a = new zonalHarmonic[l]; for (int i = 0; i < l; i++) { a[i] = (zonalHarmonic)__p.bb.GetSbyte(p + i * 1); } return a; }

  public static Offset<propagatorConfig> CreatepropagatorConfig(FlatBufferBuilder builder,
      StringOffset PROPAGATOR_NAMEOffset = default(StringOffset),
      propagatorType PROPAGATOR_TYPE = propagatorType.NONE,
      VectorOffset FORCE_MODELSOffset = default(VectorOffset),
      StringOffset EPOCHOffset = default(StringOffset),
      double TIME_STEP = 0.0,
      VectorOffset ZONAL_HARMONIC_TERMSOffset = default(VectorOffset)) {
    builder.StartTable(6);
    propagatorConfig.AddTIME_STEP(builder, TIME_STEP);
    propagatorConfig.AddZONAL_HARMONIC_TERMS(builder, ZONAL_HARMONIC_TERMSOffset);
    propagatorConfig.AddEPOCH(builder, EPOCHOffset);
    propagatorConfig.AddFORCE_MODELS(builder, FORCE_MODELSOffset);
    propagatorConfig.AddPROPAGATOR_NAME(builder, PROPAGATOR_NAMEOffset);
    propagatorConfig.AddPROPAGATOR_TYPE(builder, PROPAGATOR_TYPE);
    return propagatorConfig.EndpropagatorConfig(builder);
  }

  public static void StartpropagatorConfig(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddPROPAGATOR_NAME(FlatBufferBuilder builder, StringOffset PROPAGATOR_NAMEOffset) { builder.AddOffset(0, PROPAGATOR_NAMEOffset.Value, 0); }
  public static void AddPROPAGATOR_TYPE(FlatBufferBuilder builder, propagatorType PROPAGATOR_TYPE) { builder.AddSbyte(1, (sbyte)PROPAGATOR_TYPE, 0); }
  public static void AddFORCE_MODELS(FlatBufferBuilder builder, VectorOffset FORCE_MODELSOffset) { builder.AddOffset(2, FORCE_MODELSOffset.Value, 0); }
  public static VectorOffset CreateFORCE_MODELSVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFORCE_MODELSVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFORCE_MODELSVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFORCE_MODELSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFORCE_MODELSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEPOCH(FlatBufferBuilder builder, StringOffset EPOCHOffset) { builder.AddOffset(3, EPOCHOffset.Value, 0); }
  public static void AddTIME_STEP(FlatBufferBuilder builder, double TIME_STEP) { builder.AddDouble(4, TIME_STEP, 0.0); }
  public static void AddZONAL_HARMONIC_TERMS(FlatBufferBuilder builder, VectorOffset ZONAL_HARMONIC_TERMSOffset) { builder.AddOffset(5, ZONAL_HARMONIC_TERMSOffset.Value, 0); }
  public static VectorOffset CreateZONAL_HARMONIC_TERMSVector(FlatBufferBuilder builder, zonalHarmonic[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte((sbyte)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateZONAL_HARMONIC_TERMSVectorBlock(FlatBufferBuilder builder, zonalHarmonic[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZONAL_HARMONIC_TERMSVectorBlock(FlatBufferBuilder builder, ArraySegment<zonalHarmonic> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZONAL_HARMONIC_TERMSVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<zonalHarmonic>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartZONAL_HARMONIC_TERMSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<propagatorConfig> EndpropagatorConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<propagatorConfig>(o);
  }
  public propagatorConfigT UnPack() {
    var _o = new propagatorConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(propagatorConfigT _o) {
    _o.PROPAGATOR_NAME = this.PROPAGATOR_NAME;
    _o.PROPAGATOR_TYPE = this.PROPAGATOR_TYPE;
    _o.FORCE_MODELS = new List<string>();
    for (var _j = 0; _j < this.FORCE_MODELSLength; ++_j) {_o.FORCE_MODELS.Add(this.FORCE_MODELS(_j));}
    _o.EPOCH = this.EPOCH;
    _o.TIME_STEP = this.TIME_STEP;
    _o.ZONAL_HARMONIC_TERMS = new List<zonalHarmonic>();
    for (var _j = 0; _j < this.ZONAL_HARMONIC_TERMSLength; ++_j) {_o.ZONAL_HARMONIC_TERMS.Add(this.ZONAL_HARMONIC_TERMS(_j));}
  }
  public static Offset<propagatorConfig> Pack(FlatBufferBuilder builder, propagatorConfigT _o) {
    if (_o == null) return default(Offset<propagatorConfig>);
    var _PROPAGATOR_NAME = _o.PROPAGATOR_NAME == null ? default(StringOffset) : builder.CreateString(_o.PROPAGATOR_NAME);
    var _FORCE_MODELS = default(VectorOffset);
    if (_o.FORCE_MODELS != null) {
      var __FORCE_MODELS = new StringOffset[_o.FORCE_MODELS.Count];
      for (var _j = 0; _j < __FORCE_MODELS.Length; ++_j) { __FORCE_MODELS[_j] = builder.CreateString(_o.FORCE_MODELS[_j]); }
      _FORCE_MODELS = CreateFORCE_MODELSVector(builder, __FORCE_MODELS);
    }
    var _EPOCH = _o.EPOCH == null ? default(StringOffset) : builder.CreateString(_o.EPOCH);
    var _ZONAL_HARMONIC_TERMS = default(VectorOffset);
    if (_o.ZONAL_HARMONIC_TERMS != null) {
      var __ZONAL_HARMONIC_TERMS = _o.ZONAL_HARMONIC_TERMS.ToArray();
      _ZONAL_HARMONIC_TERMS = CreateZONAL_HARMONIC_TERMSVector(builder, __ZONAL_HARMONIC_TERMS);
    }
    return CreatepropagatorConfig(
      builder,
      _PROPAGATOR_NAME,
      _o.PROPAGATOR_TYPE,
      _FORCE_MODELS,
      _EPOCH,
      _o.TIME_STEP,
      _ZONAL_HARMONIC_TERMS);
  }
}

public class propagatorConfigT
{
  public string PROPAGATOR_NAME { get; set; }
  public propagatorType PROPAGATOR_TYPE { get; set; }
  public List<string> FORCE_MODELS { get; set; }
  public string EPOCH { get; set; }
  public double TIME_STEP { get; set; }
  public List<zonalHarmonic> ZONAL_HARMONIC_TERMS { get; set; }

  public propagatorConfigT() {
    this.PROPAGATOR_NAME = null;
    this.PROPAGATOR_TYPE = propagatorType.NONE;
    this.FORCE_MODELS = null;
    this.EPOCH = null;
    this.TIME_STEP = 0.0;
    this.ZONAL_HARMONIC_TERMS = null;
  }
}


static public class propagatorConfigVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*PROPAGATOR_NAME*/, false)
      && verifier.VerifyField(tablePos, 6 /*PROPAGATOR_TYPE*/, 1 /*propagatorType*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*FORCE_MODELS*/, false)
      && verifier.VerifyString(tablePos, 10 /*EPOCH*/, false)
      && verifier.VerifyField(tablePos, 12 /*TIME_STEP*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*ZONAL_HARMONIC_TERMS*/, 1 /*zonalHarmonic*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
