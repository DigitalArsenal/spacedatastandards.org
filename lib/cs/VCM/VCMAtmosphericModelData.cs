// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// VCM Atmospheric and Perturbation Model Data
public struct VCMAtmosphericModelData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static VCMAtmosphericModelData GetRootAsVCMAtmosphericModelData(ByteBuffer _bb) { return GetRootAsVCMAtmosphericModelData(_bb, new VCMAtmosphericModelData()); }
  public static VCMAtmosphericModelData GetRootAsVCMAtmosphericModelData(ByteBuffer _bb, VCMAtmosphericModelData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VCMAtmosphericModelData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public atmosphericModel ATMOSPHERIC_MODEL { get { int o = __p.__offset(4); return o != 0 ? (atmosphericModel)__p.bb.GetSbyte(o + __p.bb_pos) : atmosphericModel.NONE; } }
  public geopotentialModel GEOPOTENTIAL_MODEL { get { int o = __p.__offset(6); return o != 0 ? (geopotentialModel)__p.bb.GetSbyte(o + __p.bb_pos) : geopotentialModel.NONE; } }
  public perturbationStatus LUNAR_SOLAR_PERTURBATION { get { int o = __p.__offset(8); return o != 0 ? (perturbationStatus)__p.bb.GetSbyte(o + __p.bb_pos) : perturbationStatus.OFF; } }
  public lunarPerturbationModel LUNAR_PERTURBATION_MODEL { get { int o = __p.__offset(10); return o != 0 ? (lunarPerturbationModel)__p.bb.GetSbyte(o + __p.bb_pos) : lunarPerturbationModel.NONE; } }
  public solarPerturbationModel SOLAR_PERTURBATION_MODEL { get { int o = __p.__offset(12); return o != 0 ? (solarPerturbationModel)__p.bb.GetSbyte(o + __p.bb_pos) : solarPerturbationModel.NONE; } }
  public perturbationStatus SOLAR_RADIATION_PRESSURE { get { int o = __p.__offset(14); return o != 0 ? (perturbationStatus)__p.bb.GetSbyte(o + __p.bb_pos) : perturbationStatus.OFF; } }
  public solarRadiationPressureModel SRP_MODEL { get { int o = __p.__offset(16); return o != 0 ? (solarRadiationPressureModel)__p.bb.GetSbyte(o + __p.bb_pos) : solarRadiationPressureModel.NONE; } }
  public resonanceModel RESONANCE_MODEL { get { int o = __p.__offset(18); return o != 0 ? (resonanceModel)__p.bb.GetSbyte(o + __p.bb_pos) : resonanceModel.NONE; } }

  public static Offset<VCMAtmosphericModelData> CreateVCMAtmosphericModelData(FlatBufferBuilder builder,
      atmosphericModel ATMOSPHERIC_MODEL = atmosphericModel.NONE,
      geopotentialModel GEOPOTENTIAL_MODEL = geopotentialModel.NONE,
      perturbationStatus LUNAR_SOLAR_PERTURBATION = perturbationStatus.OFF,
      lunarPerturbationModel LUNAR_PERTURBATION_MODEL = lunarPerturbationModel.NONE,
      solarPerturbationModel SOLAR_PERTURBATION_MODEL = solarPerturbationModel.NONE,
      perturbationStatus SOLAR_RADIATION_PRESSURE = perturbationStatus.OFF,
      solarRadiationPressureModel SRP_MODEL = solarRadiationPressureModel.NONE,
      resonanceModel RESONANCE_MODEL = resonanceModel.NONE) {
    builder.StartTable(8);
    VCMAtmosphericModelData.AddRESONANCE_MODEL(builder, RESONANCE_MODEL);
    VCMAtmosphericModelData.AddSRP_MODEL(builder, SRP_MODEL);
    VCMAtmosphericModelData.AddSOLAR_RADIATION_PRESSURE(builder, SOLAR_RADIATION_PRESSURE);
    VCMAtmosphericModelData.AddSOLAR_PERTURBATION_MODEL(builder, SOLAR_PERTURBATION_MODEL);
    VCMAtmosphericModelData.AddLUNAR_PERTURBATION_MODEL(builder, LUNAR_PERTURBATION_MODEL);
    VCMAtmosphericModelData.AddLUNAR_SOLAR_PERTURBATION(builder, LUNAR_SOLAR_PERTURBATION);
    VCMAtmosphericModelData.AddGEOPOTENTIAL_MODEL(builder, GEOPOTENTIAL_MODEL);
    VCMAtmosphericModelData.AddATMOSPHERIC_MODEL(builder, ATMOSPHERIC_MODEL);
    return VCMAtmosphericModelData.EndVCMAtmosphericModelData(builder);
  }

  public static void StartVCMAtmosphericModelData(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddATMOSPHERIC_MODEL(FlatBufferBuilder builder, atmosphericModel ATMOSPHERIC_MODEL) { builder.AddSbyte(0, (sbyte)ATMOSPHERIC_MODEL, 0); }
  public static void AddGEOPOTENTIAL_MODEL(FlatBufferBuilder builder, geopotentialModel GEOPOTENTIAL_MODEL) { builder.AddSbyte(1, (sbyte)GEOPOTENTIAL_MODEL, 0); }
  public static void AddLUNAR_SOLAR_PERTURBATION(FlatBufferBuilder builder, perturbationStatus LUNAR_SOLAR_PERTURBATION) { builder.AddSbyte(2, (sbyte)LUNAR_SOLAR_PERTURBATION, 0); }
  public static void AddLUNAR_PERTURBATION_MODEL(FlatBufferBuilder builder, lunarPerturbationModel LUNAR_PERTURBATION_MODEL) { builder.AddSbyte(3, (sbyte)LUNAR_PERTURBATION_MODEL, 0); }
  public static void AddSOLAR_PERTURBATION_MODEL(FlatBufferBuilder builder, solarPerturbationModel SOLAR_PERTURBATION_MODEL) { builder.AddSbyte(4, (sbyte)SOLAR_PERTURBATION_MODEL, 0); }
  public static void AddSOLAR_RADIATION_PRESSURE(FlatBufferBuilder builder, perturbationStatus SOLAR_RADIATION_PRESSURE) { builder.AddSbyte(5, (sbyte)SOLAR_RADIATION_PRESSURE, 0); }
  public static void AddSRP_MODEL(FlatBufferBuilder builder, solarRadiationPressureModel SRP_MODEL) { builder.AddSbyte(6, (sbyte)SRP_MODEL, 0); }
  public static void AddRESONANCE_MODEL(FlatBufferBuilder builder, resonanceModel RESONANCE_MODEL) { builder.AddSbyte(7, (sbyte)RESONANCE_MODEL, 0); }
  public static Offset<VCMAtmosphericModelData> EndVCMAtmosphericModelData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<VCMAtmosphericModelData>(o);
  }
  public VCMAtmosphericModelDataT UnPack() {
    var _o = new VCMAtmosphericModelDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(VCMAtmosphericModelDataT _o) {
    _o.ATMOSPHERIC_MODEL = this.ATMOSPHERIC_MODEL;
    _o.GEOPOTENTIAL_MODEL = this.GEOPOTENTIAL_MODEL;
    _o.LUNAR_SOLAR_PERTURBATION = this.LUNAR_SOLAR_PERTURBATION;
    _o.LUNAR_PERTURBATION_MODEL = this.LUNAR_PERTURBATION_MODEL;
    _o.SOLAR_PERTURBATION_MODEL = this.SOLAR_PERTURBATION_MODEL;
    _o.SOLAR_RADIATION_PRESSURE = this.SOLAR_RADIATION_PRESSURE;
    _o.SRP_MODEL = this.SRP_MODEL;
    _o.RESONANCE_MODEL = this.RESONANCE_MODEL;
  }
  public static Offset<VCMAtmosphericModelData> Pack(FlatBufferBuilder builder, VCMAtmosphericModelDataT _o) {
    if (_o == null) return default(Offset<VCMAtmosphericModelData>);
    return CreateVCMAtmosphericModelData(
      builder,
      _o.ATMOSPHERIC_MODEL,
      _o.GEOPOTENTIAL_MODEL,
      _o.LUNAR_SOLAR_PERTURBATION,
      _o.LUNAR_PERTURBATION_MODEL,
      _o.SOLAR_PERTURBATION_MODEL,
      _o.SOLAR_RADIATION_PRESSURE,
      _o.SRP_MODEL,
      _o.RESONANCE_MODEL);
  }
}

public class VCMAtmosphericModelDataT
{
  public atmosphericModel ATMOSPHERIC_MODEL { get; set; }
  public geopotentialModel GEOPOTENTIAL_MODEL { get; set; }
  public perturbationStatus LUNAR_SOLAR_PERTURBATION { get; set; }
  public lunarPerturbationModel LUNAR_PERTURBATION_MODEL { get; set; }
  public solarPerturbationModel SOLAR_PERTURBATION_MODEL { get; set; }
  public perturbationStatus SOLAR_RADIATION_PRESSURE { get; set; }
  public solarRadiationPressureModel SRP_MODEL { get; set; }
  public resonanceModel RESONANCE_MODEL { get; set; }

  public VCMAtmosphericModelDataT() {
    this.ATMOSPHERIC_MODEL = atmosphericModel.NONE;
    this.GEOPOTENTIAL_MODEL = geopotentialModel.NONE;
    this.LUNAR_SOLAR_PERTURBATION = perturbationStatus.OFF;
    this.LUNAR_PERTURBATION_MODEL = lunarPerturbationModel.NONE;
    this.SOLAR_PERTURBATION_MODEL = solarPerturbationModel.NONE;
    this.SOLAR_RADIATION_PRESSURE = perturbationStatus.OFF;
    this.SRP_MODEL = solarRadiationPressureModel.NONE;
    this.RESONANCE_MODEL = resonanceModel.NONE;
  }
}


static public class VCMAtmosphericModelDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ATMOSPHERIC_MODEL*/, 1 /*atmosphericModel*/, 1, false)
      && verifier.VerifyField(tablePos, 6 /*GEOPOTENTIAL_MODEL*/, 1 /*geopotentialModel*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*LUNAR_SOLAR_PERTURBATION*/, 1 /*perturbationStatus*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*LUNAR_PERTURBATION_MODEL*/, 1 /*lunarPerturbationModel*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*SOLAR_PERTURBATION_MODEL*/, 1 /*solarPerturbationModel*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*SOLAR_RADIATION_PRESSURE*/, 1 /*perturbationStatus*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*SRP_MODEL*/, 1 /*solarRadiationPressureModel*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*RESONANCE_MODEL*/, 1 /*resonanceModel*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
