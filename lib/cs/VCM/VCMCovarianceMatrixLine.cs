// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// VCM Covariance Matrix Line
public struct VCMCovarianceMatrixLine : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static VCMCovarianceMatrixLine GetRootAsVCMCovarianceMatrixLine(ByteBuffer _bb) { return GetRootAsVCMCovarianceMatrixLine(_bb, new VCMCovarianceMatrixLine()); }
  public static VCMCovarianceMatrixLine GetRootAsVCMCovarianceMatrixLine(ByteBuffer _bb, VCMCovarianceMatrixLine obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VCMCovarianceMatrixLine __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double CX_X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double CY_X { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double CZ_X { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double CX_DOT_X { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<VCMCovarianceMatrixLine> CreateVCMCovarianceMatrixLine(FlatBufferBuilder builder,
      double CX_X = 0.0,
      double CY_X = 0.0,
      double CZ_X = 0.0,
      double CX_DOT_X = 0.0) {
    builder.StartTable(4);
    VCMCovarianceMatrixLine.AddCX_DOT_X(builder, CX_DOT_X);
    VCMCovarianceMatrixLine.AddCZ_X(builder, CZ_X);
    VCMCovarianceMatrixLine.AddCY_X(builder, CY_X);
    VCMCovarianceMatrixLine.AddCX_X(builder, CX_X);
    return VCMCovarianceMatrixLine.EndVCMCovarianceMatrixLine(builder);
  }

  public static void StartVCMCovarianceMatrixLine(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCX_X(FlatBufferBuilder builder, double CX_X) { builder.AddDouble(0, CX_X, 0.0); }
  public static void AddCY_X(FlatBufferBuilder builder, double CY_X) { builder.AddDouble(1, CY_X, 0.0); }
  public static void AddCZ_X(FlatBufferBuilder builder, double CZ_X) { builder.AddDouble(2, CZ_X, 0.0); }
  public static void AddCX_DOT_X(FlatBufferBuilder builder, double CX_DOT_X) { builder.AddDouble(3, CX_DOT_X, 0.0); }
  public static Offset<VCMCovarianceMatrixLine> EndVCMCovarianceMatrixLine(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<VCMCovarianceMatrixLine>(o);
  }
  public VCMCovarianceMatrixLineT UnPack() {
    var _o = new VCMCovarianceMatrixLineT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(VCMCovarianceMatrixLineT _o) {
    _o.CX_X = this.CX_X;
    _o.CY_X = this.CY_X;
    _o.CZ_X = this.CZ_X;
    _o.CX_DOT_X = this.CX_DOT_X;
  }
  public static Offset<VCMCovarianceMatrixLine> Pack(FlatBufferBuilder builder, VCMCovarianceMatrixLineT _o) {
    if (_o == null) return default(Offset<VCMCovarianceMatrixLine>);
    return CreateVCMCovarianceMatrixLine(
      builder,
      _o.CX_X,
      _o.CY_X,
      _o.CZ_X,
      _o.CX_DOT_X);
  }
}

public class VCMCovarianceMatrixLineT
{
  public double CX_X { get; set; }
  public double CY_X { get; set; }
  public double CZ_X { get; set; }
  public double CX_DOT_X { get; set; }

  public VCMCovarianceMatrixLineT() {
    this.CX_X = 0.0;
    this.CY_X = 0.0;
    this.CZ_X = 0.0;
    this.CX_DOT_X = 0.0;
  }
}


static public class VCMCovarianceMatrixLineVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CX_X*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CY_X*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*CZ_X*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*CX_DOT_X*/, 8 /*double*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
