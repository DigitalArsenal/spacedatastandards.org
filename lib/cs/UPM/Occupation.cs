// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Occupation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static Occupation GetRootAsOccupation(ByteBuffer _bb) { return GetRootAsOccupation(_bb, new Occupation()); }
  public static Occupation GetRootAsOccupation(ByteBuffer _bb, Occupation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Occupation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string NAME { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNAMEBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNAMEBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNAMEArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<Occupation> CreateOccupation(FlatBufferBuilder builder,
      StringOffset NAMEOffset = default(StringOffset)) {
    builder.StartTable(1);
    Occupation.AddNAME(builder, NAMEOffset);
    return Occupation.EndOccupation(builder);
  }

  public static void StartOccupation(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddNAME(FlatBufferBuilder builder, StringOffset NAMEOffset) { builder.AddOffset(0, NAMEOffset.Value, 0); }
  public static Offset<Occupation> EndOccupation(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Occupation>(o);
  }
  public OccupationT UnPack() {
    var _o = new OccupationT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OccupationT _o) {
    _o.NAME = this.NAME;
  }
  public static Offset<Occupation> Pack(FlatBufferBuilder builder, OccupationT _o) {
    if (_o == null) return default(Offset<Occupation>);
    var _NAME = _o.NAME == null ? default(StringOffset) : builder.CreateString(_o.NAME);
    return CreateOccupation(
      builder,
      _NAME);
  }
}

public class OccupationT
{
  public string NAME { get; set; }

  public OccupationT() {
    this.NAME = null;
  }
}

