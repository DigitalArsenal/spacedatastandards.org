// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Space Weather Data Record
public struct SPW : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SPW GetRootAsSPW(ByteBuffer _bb) { return GetRootAsSPW(_bb, new SPW()); }
  public static SPW GetRootAsSPW(ByteBuffer _bb, SPW obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SPWBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$SPW"); }
  public static bool VerifySPW(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("$SPW", false, SPWVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SPW __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Date in ISO 8601 format
  public string DATE { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDATEBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetDATEBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetDATEArray() { return __p.__vector_as_array<byte>(4); }
  /// Bartels Solar Rotation Number
  public int BSRN { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Day within Bartels cycle (1-27)
  public int ND { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary 3-hour Range Index (Kp) for 0000-0300 UT, multiplied by 10
  public int KP1 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary 3-hour Range Index (Kp) for 0300-0600 UT, multiplied by 10
  public int KP2 { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary 3-hour Range Index (Kp) for 0600-0900 UT, multiplied by 10
  public int KP3 { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary 3-hour Range Index (Kp) for 0900-1200 UT, multiplied by 10
  public int KP4 { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary 3-hour Range Index (Kp) for 1200-1500 UT, multiplied by 10
  public int KP5 { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary 3-hour Range Index (Kp) for 1500-1800 UT, multiplied by 10
  public int KP6 { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary 3-hour Range Index (Kp) for 1800-2100 UT, multiplied by 10
  public int KP7 { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary 3-hour Range Index (Kp) for 2100-0000 UT, multiplied by 10
  public int KP8 { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Sum of the 8 Kp indices for the day
  public int KP_SUM { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary Equivalent Amplitude (Ap) for 0000-0300 UT
  public int AP1 { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary Equivalent Amplitude (Ap) for 0300-0600 UT
  public int AP2 { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary Equivalent Amplitude (Ap) for 0600-0900 UT
  public int AP3 { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary Equivalent Amplitude (Ap) for 0900-1200 UT
  public int AP4 { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary Equivalent Amplitude (Ap) for 1200-1500 UT
  public int AP5 { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary Equivalent Amplitude (Ap) for 1500-1800 UT
  public int AP6 { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary Equivalent Amplitude (Ap) for 1800-2100 UT
  public int AP7 { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary Equivalent Amplitude (Ap) for 2100-0000 UT
  public int AP8 { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Arithmetic average of the 8 Ap indices for the day
  public int AP_AVG { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Planetary Daily Character Figure (0.0 to 2.5)
  public float CP { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// C9 index (0-9)
  public int C9 { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// International Sunspot Number
  public int ISN { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Observed 10.7cm Solar Radio Flux
  public float F107_OBS { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// Adjusted 10.7cm Solar Radio Flux (to 1 AU)
  public float F107_ADJ { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// F10.7 Data Type
  public F107DataType F107_DATA_TYPE { get { int o = __p.__offset(56); return o != 0 ? (F107DataType)__p.bb.GetSbyte(o + __p.bb_pos) : F107DataType.OBS; } }
  /// 81-day centered average of observed F10.7
  public float F107_OBS_CENTER81 { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 81-day trailing average of observed F10.7
  public float F107_OBS_LAST81 { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 81-day centered average of adjusted F10.7
  public float F107_ADJ_CENTER81 { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 81-day trailing average of adjusted F10.7
  public float F107_ADJ_LAST81 { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<SPW> CreateSPW(FlatBufferBuilder builder,
      StringOffset DATEOffset = default(StringOffset),
      int BSRN = 0,
      int ND = 0,
      int KP1 = 0,
      int KP2 = 0,
      int KP3 = 0,
      int KP4 = 0,
      int KP5 = 0,
      int KP6 = 0,
      int KP7 = 0,
      int KP8 = 0,
      int KP_SUM = 0,
      int AP1 = 0,
      int AP2 = 0,
      int AP3 = 0,
      int AP4 = 0,
      int AP5 = 0,
      int AP6 = 0,
      int AP7 = 0,
      int AP8 = 0,
      int AP_AVG = 0,
      float CP = 0.0f,
      int C9 = 0,
      int ISN = 0,
      float F107_OBS = 0.0f,
      float F107_ADJ = 0.0f,
      F107DataType F107_DATA_TYPE = F107DataType.OBS,
      float F107_OBS_CENTER81 = 0.0f,
      float F107_OBS_LAST81 = 0.0f,
      float F107_ADJ_CENTER81 = 0.0f,
      float F107_ADJ_LAST81 = 0.0f) {
    builder.StartTable(31);
    SPW.AddF107_ADJ_LAST81(builder, F107_ADJ_LAST81);
    SPW.AddF107_ADJ_CENTER81(builder, F107_ADJ_CENTER81);
    SPW.AddF107_OBS_LAST81(builder, F107_OBS_LAST81);
    SPW.AddF107_OBS_CENTER81(builder, F107_OBS_CENTER81);
    SPW.AddF107_ADJ(builder, F107_ADJ);
    SPW.AddF107_OBS(builder, F107_OBS);
    SPW.AddISN(builder, ISN);
    SPW.AddC9(builder, C9);
    SPW.AddCP(builder, CP);
    SPW.AddAP_AVG(builder, AP_AVG);
    SPW.AddAP8(builder, AP8);
    SPW.AddAP7(builder, AP7);
    SPW.AddAP6(builder, AP6);
    SPW.AddAP5(builder, AP5);
    SPW.AddAP4(builder, AP4);
    SPW.AddAP3(builder, AP3);
    SPW.AddAP2(builder, AP2);
    SPW.AddAP1(builder, AP1);
    SPW.AddKP_SUM(builder, KP_SUM);
    SPW.AddKP8(builder, KP8);
    SPW.AddKP7(builder, KP7);
    SPW.AddKP6(builder, KP6);
    SPW.AddKP5(builder, KP5);
    SPW.AddKP4(builder, KP4);
    SPW.AddKP3(builder, KP3);
    SPW.AddKP2(builder, KP2);
    SPW.AddKP1(builder, KP1);
    SPW.AddND(builder, ND);
    SPW.AddBSRN(builder, BSRN);
    SPW.AddDATE(builder, DATEOffset);
    SPW.AddF107_DATA_TYPE(builder, F107_DATA_TYPE);
    return SPW.EndSPW(builder);
  }

  public static void StartSPW(FlatBufferBuilder builder) { builder.StartTable(31); }
  public static void AddDATE(FlatBufferBuilder builder, StringOffset DATEOffset) { builder.AddOffset(0, DATEOffset.Value, 0); }
  public static void AddBSRN(FlatBufferBuilder builder, int BSRN) { builder.AddInt(1, BSRN, 0); }
  public static void AddND(FlatBufferBuilder builder, int ND) { builder.AddInt(2, ND, 0); }
  public static void AddKP1(FlatBufferBuilder builder, int KP1) { builder.AddInt(3, KP1, 0); }
  public static void AddKP2(FlatBufferBuilder builder, int KP2) { builder.AddInt(4, KP2, 0); }
  public static void AddKP3(FlatBufferBuilder builder, int KP3) { builder.AddInt(5, KP3, 0); }
  public static void AddKP4(FlatBufferBuilder builder, int KP4) { builder.AddInt(6, KP4, 0); }
  public static void AddKP5(FlatBufferBuilder builder, int KP5) { builder.AddInt(7, KP5, 0); }
  public static void AddKP6(FlatBufferBuilder builder, int KP6) { builder.AddInt(8, KP6, 0); }
  public static void AddKP7(FlatBufferBuilder builder, int KP7) { builder.AddInt(9, KP7, 0); }
  public static void AddKP8(FlatBufferBuilder builder, int KP8) { builder.AddInt(10, KP8, 0); }
  public static void AddKP_SUM(FlatBufferBuilder builder, int KP_SUM) { builder.AddInt(11, KP_SUM, 0); }
  public static void AddAP1(FlatBufferBuilder builder, int AP1) { builder.AddInt(12, AP1, 0); }
  public static void AddAP2(FlatBufferBuilder builder, int AP2) { builder.AddInt(13, AP2, 0); }
  public static void AddAP3(FlatBufferBuilder builder, int AP3) { builder.AddInt(14, AP3, 0); }
  public static void AddAP4(FlatBufferBuilder builder, int AP4) { builder.AddInt(15, AP4, 0); }
  public static void AddAP5(FlatBufferBuilder builder, int AP5) { builder.AddInt(16, AP5, 0); }
  public static void AddAP6(FlatBufferBuilder builder, int AP6) { builder.AddInt(17, AP6, 0); }
  public static void AddAP7(FlatBufferBuilder builder, int AP7) { builder.AddInt(18, AP7, 0); }
  public static void AddAP8(FlatBufferBuilder builder, int AP8) { builder.AddInt(19, AP8, 0); }
  public static void AddAP_AVG(FlatBufferBuilder builder, int AP_AVG) { builder.AddInt(20, AP_AVG, 0); }
  public static void AddCP(FlatBufferBuilder builder, float CP) { builder.AddFloat(21, CP, 0.0f); }
  public static void AddC9(FlatBufferBuilder builder, int C9) { builder.AddInt(22, C9, 0); }
  public static void AddISN(FlatBufferBuilder builder, int ISN) { builder.AddInt(23, ISN, 0); }
  public static void AddF107_OBS(FlatBufferBuilder builder, float F107_OBS) { builder.AddFloat(24, F107_OBS, 0.0f); }
  public static void AddF107_ADJ(FlatBufferBuilder builder, float F107_ADJ) { builder.AddFloat(25, F107_ADJ, 0.0f); }
  public static void AddF107_DATA_TYPE(FlatBufferBuilder builder, F107DataType F107_DATA_TYPE) { builder.AddSbyte(26, (sbyte)F107_DATA_TYPE, 0); }
  public static void AddF107_OBS_CENTER81(FlatBufferBuilder builder, float F107_OBS_CENTER81) { builder.AddFloat(27, F107_OBS_CENTER81, 0.0f); }
  public static void AddF107_OBS_LAST81(FlatBufferBuilder builder, float F107_OBS_LAST81) { builder.AddFloat(28, F107_OBS_LAST81, 0.0f); }
  public static void AddF107_ADJ_CENTER81(FlatBufferBuilder builder, float F107_ADJ_CENTER81) { builder.AddFloat(29, F107_ADJ_CENTER81, 0.0f); }
  public static void AddF107_ADJ_LAST81(FlatBufferBuilder builder, float F107_ADJ_LAST81) { builder.AddFloat(30, F107_ADJ_LAST81, 0.0f); }
  public static Offset<SPW> EndSPW(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SPW>(o);
  }
  public static void FinishSPWBuffer(FlatBufferBuilder builder, Offset<SPW> offset) { builder.Finish(offset.Value, "$SPW"); }
  public static void FinishSizePrefixedSPWBuffer(FlatBufferBuilder builder, Offset<SPW> offset) { builder.FinishSizePrefixed(offset.Value, "$SPW"); }
  public SPWT UnPack() {
    var _o = new SPWT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SPWT _o) {
    _o.DATE = this.DATE;
    _o.BSRN = this.BSRN;
    _o.ND = this.ND;
    _o.KP1 = this.KP1;
    _o.KP2 = this.KP2;
    _o.KP3 = this.KP3;
    _o.KP4 = this.KP4;
    _o.KP5 = this.KP5;
    _o.KP6 = this.KP6;
    _o.KP7 = this.KP7;
    _o.KP8 = this.KP8;
    _o.KP_SUM = this.KP_SUM;
    _o.AP1 = this.AP1;
    _o.AP2 = this.AP2;
    _o.AP3 = this.AP3;
    _o.AP4 = this.AP4;
    _o.AP5 = this.AP5;
    _o.AP6 = this.AP6;
    _o.AP7 = this.AP7;
    _o.AP8 = this.AP8;
    _o.AP_AVG = this.AP_AVG;
    _o.CP = this.CP;
    _o.C9 = this.C9;
    _o.ISN = this.ISN;
    _o.F107_OBS = this.F107_OBS;
    _o.F107_ADJ = this.F107_ADJ;
    _o.F107_DATA_TYPE = this.F107_DATA_TYPE;
    _o.F107_OBS_CENTER81 = this.F107_OBS_CENTER81;
    _o.F107_OBS_LAST81 = this.F107_OBS_LAST81;
    _o.F107_ADJ_CENTER81 = this.F107_ADJ_CENTER81;
    _o.F107_ADJ_LAST81 = this.F107_ADJ_LAST81;
  }
  public static Offset<SPW> Pack(FlatBufferBuilder builder, SPWT _o) {
    if (_o == null) return default(Offset<SPW>);
    var _DATE = _o.DATE == null ? default(StringOffset) : builder.CreateString(_o.DATE);
    return CreateSPW(
      builder,
      _DATE,
      _o.BSRN,
      _o.ND,
      _o.KP1,
      _o.KP2,
      _o.KP3,
      _o.KP4,
      _o.KP5,
      _o.KP6,
      _o.KP7,
      _o.KP8,
      _o.KP_SUM,
      _o.AP1,
      _o.AP2,
      _o.AP3,
      _o.AP4,
      _o.AP5,
      _o.AP6,
      _o.AP7,
      _o.AP8,
      _o.AP_AVG,
      _o.CP,
      _o.C9,
      _o.ISN,
      _o.F107_OBS,
      _o.F107_ADJ,
      _o.F107_DATA_TYPE,
      _o.F107_OBS_CENTER81,
      _o.F107_OBS_LAST81,
      _o.F107_ADJ_CENTER81,
      _o.F107_ADJ_LAST81);
  }
}

public class SPWT
{
  public string DATE { get; set; }
  public int BSRN { get; set; }
  public int ND { get; set; }
  public int KP1 { get; set; }
  public int KP2 { get; set; }
  public int KP3 { get; set; }
  public int KP4 { get; set; }
  public int KP5 { get; set; }
  public int KP6 { get; set; }
  public int KP7 { get; set; }
  public int KP8 { get; set; }
  public int KP_SUM { get; set; }
  public int AP1 { get; set; }
  public int AP2 { get; set; }
  public int AP3 { get; set; }
  public int AP4 { get; set; }
  public int AP5 { get; set; }
  public int AP6 { get; set; }
  public int AP7 { get; set; }
  public int AP8 { get; set; }
  public int AP_AVG { get; set; }
  public float CP { get; set; }
  public int C9 { get; set; }
  public int ISN { get; set; }
  public float F107_OBS { get; set; }
  public float F107_ADJ { get; set; }
  public F107DataType F107_DATA_TYPE { get; set; }
  public float F107_OBS_CENTER81 { get; set; }
  public float F107_OBS_LAST81 { get; set; }
  public float F107_ADJ_CENTER81 { get; set; }
  public float F107_ADJ_LAST81 { get; set; }

  public SPWT() {
    this.DATE = null;
    this.BSRN = 0;
    this.ND = 0;
    this.KP1 = 0;
    this.KP2 = 0;
    this.KP3 = 0;
    this.KP4 = 0;
    this.KP5 = 0;
    this.KP6 = 0;
    this.KP7 = 0;
    this.KP8 = 0;
    this.KP_SUM = 0;
    this.AP1 = 0;
    this.AP2 = 0;
    this.AP3 = 0;
    this.AP4 = 0;
    this.AP5 = 0;
    this.AP6 = 0;
    this.AP7 = 0;
    this.AP8 = 0;
    this.AP_AVG = 0;
    this.CP = 0.0f;
    this.C9 = 0;
    this.ISN = 0;
    this.F107_OBS = 0.0f;
    this.F107_ADJ = 0.0f;
    this.F107_DATA_TYPE = F107DataType.OBS;
    this.F107_OBS_CENTER81 = 0.0f;
    this.F107_OBS_LAST81 = 0.0f;
    this.F107_ADJ_CENTER81 = 0.0f;
    this.F107_ADJ_LAST81 = 0.0f;
  }
  public static SPWT DeserializeFromBinary(byte[] fbBuffer) {
    return SPW.GetRootAsSPW(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SPW.FinishSPWBuffer(fbb, SPW.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SPWVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*DATE*/, false)
      && verifier.VerifyField(tablePos, 6 /*BSRN*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ND*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*KP1*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*KP2*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*KP3*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*KP4*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*KP5*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*KP6*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*KP7*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*KP8*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*KP_SUM*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*AP1*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*AP2*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*AP3*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*AP4*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*AP5*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*AP6*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*AP7*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*AP8*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*AP_AVG*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*CP*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*C9*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*ISN*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*F107_OBS*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*F107_ADJ*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*F107_DATA_TYPE*/, 1 /*F107DataType*/, 1, false)
      && verifier.VerifyField(tablePos, 58 /*F107_OBS_CENTER81*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*F107_OBS_LAST81*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*F107_ADJ_CENTER81*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*F107_ADJ_LAST81*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
