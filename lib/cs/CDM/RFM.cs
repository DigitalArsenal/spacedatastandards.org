// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Reference Frame Message
public struct RFM : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static RFM GetRootAsRFM(ByteBuffer _bb) { return GetRootAsRFM(_bb, new RFM()); }
  public static RFM GetRootAsRFM(ByteBuffer _bb, RFM obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool RFMBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "$RFM"); }
  public static bool VerifyRFM(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("$RFM", false, RFMVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RFM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public RFMUnion REFERENCEFRAMEType { get { int o = __p.__offset(4); return o != 0 ? (RFMUnion)__p.bb.Get(o + __p.bb_pos) : RFMUnion.NONE; } }
  public TTable? REFERENCE_FRAME<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public CelestialFrameWrapper REFERENCE_FRAMEAsCelestialFrameWrapper() { return REFERENCE_FRAME<CelestialFrameWrapper>().Value; }
  public SpacecraftFrameWrapper REFERENCE_FRAMEAsSpacecraftFrameWrapper() { return REFERENCE_FRAME<SpacecraftFrameWrapper>().Value; }
  public OrbitFrameWrapper REFERENCE_FRAMEAsOrbitFrameWrapper() { return REFERENCE_FRAME<OrbitFrameWrapper>().Value; }
  public CustomFrameWrapper REFERENCE_FRAMEAsCustomFrameWrapper() { return REFERENCE_FRAME<CustomFrameWrapper>().Value; }
  public string INDEX { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetINDEXBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetINDEXBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetINDEXArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<RFM> CreateRFM(FlatBufferBuilder builder,
      RFMUnion REFERENCE_FRAME_type = RFMUnion.NONE,
      int REFERENCE_FRAMEOffset = 0,
      StringOffset INDEXOffset = default(StringOffset)) {
    builder.StartTable(3);
    RFM.AddINDEX(builder, INDEXOffset);
    RFM.AddREFERENCE_FRAME(builder, REFERENCE_FRAMEOffset);
    RFM.AddREFERENCEFRAMEType(builder, REFERENCE_FRAME_type);
    return RFM.EndRFM(builder);
  }

  public static void StartRFM(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddREFERENCEFRAMEType(FlatBufferBuilder builder, RFMUnion rEFERENCEFRAMEType) { builder.AddByte(0, (byte)rEFERENCEFRAMEType, 0); }
  public static void AddREFERENCE_FRAME(FlatBufferBuilder builder, int REFERENCE_FRAMEOffset) { builder.AddOffset(1, REFERENCE_FRAMEOffset, 0); }
  public static void AddINDEX(FlatBufferBuilder builder, StringOffset INDEXOffset) { builder.AddOffset(2, INDEXOffset.Value, 0); }
  public static Offset<RFM> EndRFM(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<RFM>(o);
  }
  public static void FinishRFMBuffer(FlatBufferBuilder builder, Offset<RFM> offset) { builder.Finish(offset.Value, "$RFM"); }
  public static void FinishSizePrefixedRFMBuffer(FlatBufferBuilder builder, Offset<RFM> offset) { builder.FinishSizePrefixed(offset.Value, "$RFM"); }
  public RFMT UnPack() {
    var _o = new RFMT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RFMT _o) {
    _o.REFERENCE_FRAME = new RFMUnionUnion();
    _o.REFERENCE_FRAME.Type = this.REFERENCE_FRAMEType;
    switch (this.REFERENCE_FRAMEType) {
      default: break;
      case RFMUnion.CelestialFrameWrapper:
        _o.REFERENCE_FRAME.Value = this.REFERENCE_FRAME<CelestialFrameWrapper>().HasValue ? this.REFERENCE_FRAME<CelestialFrameWrapper>().Value.UnPack() : null;
        break;
      case RFMUnion.SpacecraftFrameWrapper:
        _o.REFERENCE_FRAME.Value = this.REFERENCE_FRAME<SpacecraftFrameWrapper>().HasValue ? this.REFERENCE_FRAME<SpacecraftFrameWrapper>().Value.UnPack() : null;
        break;
      case RFMUnion.OrbitFrameWrapper:
        _o.REFERENCE_FRAME.Value = this.REFERENCE_FRAME<OrbitFrameWrapper>().HasValue ? this.REFERENCE_FRAME<OrbitFrameWrapper>().Value.UnPack() : null;
        break;
      case RFMUnion.CustomFrameWrapper:
        _o.REFERENCE_FRAME.Value = this.REFERENCE_FRAME<CustomFrameWrapper>().HasValue ? this.REFERENCE_FRAME<CustomFrameWrapper>().Value.UnPack() : null;
        break;
    }
    _o.INDEX = this.INDEX;
  }
  public static Offset<RFM> Pack(FlatBufferBuilder builder, RFMT _o) {
    if (_o == null) return default(Offset<RFM>);
    var _REFERENCE_FRAME_type = _o.REFERENCE_FRAME == null ? RFMUnion.NONE : _o.REFERENCE_FRAME.Type;
    var _REFERENCE_FRAME = _o.REFERENCE_FRAME == null ? 0 : RFMUnionUnion.Pack(builder, _o.REFERENCE_FRAME);
    var _INDEX = _o.INDEX == null ? default(StringOffset) : builder.CreateString(_o.INDEX);
    return CreateRFM(
      builder,
      _REFERENCE_FRAME_type,
      _REFERENCE_FRAME,
      _INDEX);
  }
}

public class RFMT
{
  public RFMUnionUnion REFERENCE_FRAME { get; set; }
  public string INDEX { get; set; }

  public RFMT() {
    this.REFERENCE_FRAME = null;
    this.INDEX = null;
  }
  public static RFMT DeserializeFromBinary(byte[] fbBuffer) {
    return RFM.GetRootAsRFM(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    RFM.FinishRFMBuffer(fbb, RFM.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class RFMVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*REFERENCEFRAMEType*/, 1 /*RFMUnion*/, 1, false)
      && verifier.VerifyUnion(tablePos, 4, 6 /*REFERENCE_FRAME*/, RFMUnionVerify.Verify, false)
      && verifier.VerifyString(tablePos, 8 /*INDEX*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
