// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Conjunction Data Message
public struct CDM : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static CDM GetRootAsCDM(ByteBuffer _bb) { return GetRootAsCDM(_bb, new CDM()); }
  public static CDM GetRootAsCDM(ByteBuffer _bb, CDM obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CDM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The version of the CCSDS CDM standard used
  public double CCSDS_CDM_VERS { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The date the CDM message was created
  public string CREATION_DATE { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCREATION_DATEBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCREATION_DATEBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCREATION_DATEArray() { return __p.__vector_as_array<byte>(6); }
  /// The originator of the CDM message
  public string ORIGINATOR { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetORIGINATORBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetORIGINATORBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetORIGINATORArray() { return __p.__vector_as_array<byte>(8); }
  /// The intended recipient of the CDM message
  public string MESSAGE_FOR { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMESSAGE_FORBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMESSAGE_FORBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMESSAGE_FORArray() { return __p.__vector_as_array<byte>(10); }
  /// A unique identifier for the CDM message
  public string MESSAGE_ID { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMESSAGE_IDBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMESSAGE_IDBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMESSAGE_IDArray() { return __p.__vector_as_array<byte>(12); }
  /// Time of closest approach
  public string TCA { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTCABytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTCABytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTCAArray() { return __p.__vector_as_array<byte>(14); }
  /// The miss distance between the two objects
  public double MISS_DISTANCE { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The relative speed between the two objects
  public double RELATIVE_SPEED { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The relative position R component
  public double RELATIVE_POSITION_R { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The relative position T component
  public double RELATIVE_POSITION_T { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The relative position N component
  public double RELATIVE_POSITION_N { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The relative velocity R component
  public double RELATIVE_VELOCITY_R { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The relative velocity T component
  public double RELATIVE_VELOCITY_T { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The relative velocity N component
  public double RELATIVE_VELOCITY_N { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The start time of the screening period
  public string START_SCREEN_PERIOD { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSTART_SCREEN_PERIODBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetSTART_SCREEN_PERIODBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetSTART_SCREEN_PERIODArray() { return __p.__vector_as_array<byte>(32); }
  /// The end time of the screening period
  public string STOP_SCREEN_PERIOD { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSTOP_SCREEN_PERIODBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetSTOP_SCREEN_PERIODBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetSTOP_SCREEN_PERIODArray() { return __p.__vector_as_array<byte>(34); }
  /// The reference frame for the screening volume
  public objectCenteredReferenceFrame SCREEN_VOLUME_FRAME { get { int o = __p.__offset(36); return o != 0 ? (objectCenteredReferenceFrame)__p.bb.GetSbyte(o + __p.bb_pos) : objectCenteredReferenceFrame.RTN; } }
  /// The shape of the screening volume
  public screeningVolumeShape SCREEN_VOLUME_SHAPE { get { int o = __p.__offset(38); return o != 0 ? (screeningVolumeShape)__p.bb.GetSbyte(o + __p.bb_pos) : screeningVolumeShape.ELLIPSOID; } }
  /// The X dimension of the screening volume
  public double SCREEN_VOLUME_X { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Y dimension of the screening volume
  public double SCREEN_VOLUME_Y { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Z dimension of the screening volume
  public double SCREEN_VOLUME_Z { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The time the objects entered the screening volume
  public string SCREEN_ENTRY_TIME { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSCREEN_ENTRY_TIMEBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetSCREEN_ENTRY_TIMEBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetSCREEN_ENTRY_TIMEArray() { return __p.__vector_as_array<byte>(46); }
  /// The time the objects exited the screening volume
  public string SCREEN_EXIT_TIME { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSCREEN_EXIT_TIMEBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetSCREEN_EXIT_TIMEBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetSCREEN_EXIT_TIMEArray() { return __p.__vector_as_array<byte>(48); }
  /// The probability of collision between the two objects
  public double COLLISION_PROBABILITY { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The method used to calculate the collision probability
  public string COLLISION_PROBABILITY_METHOD { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCOLLISION_PROBABILITY_METHODBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetCOLLISION_PROBABILITY_METHODBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetCOLLISION_PROBABILITY_METHODArray() { return __p.__vector_as_array<byte>(52); }
  /// The first object in the CDM message
  public CDMObject? OBJECT1 { get { int o = __p.__offset(54); return o != 0 ? (CDMObject?)(new CDMObject()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// The second object in the CDM message
  public CDMObject? OBJECT2 { get { int o = __p.__offset(56); return o != 0 ? (CDMObject?)(new CDMObject()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Data Source for the positional information for Object 1
  public PNM? OBJECT1_DATASOURCE { get { int o = __p.__offset(58); return o != 0 ? (PNM?)(new PNM()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// Data Source for the positional information for Object 2
  public PNM? OBJECT2_DATASOURCE { get { int o = __p.__offset(60); return o != 0 ? (PNM?)(new PNM()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<CDM> CreateCDM(FlatBufferBuilder builder,
      double CCSDS_CDM_VERS = 0.0,
      StringOffset CREATION_DATEOffset = default(StringOffset),
      StringOffset ORIGINATOROffset = default(StringOffset),
      StringOffset MESSAGE_FOROffset = default(StringOffset),
      StringOffset MESSAGE_IDOffset = default(StringOffset),
      StringOffset TCAOffset = default(StringOffset),
      double MISS_DISTANCE = 0.0,
      double RELATIVE_SPEED = 0.0,
      double RELATIVE_POSITION_R = 0.0,
      double RELATIVE_POSITION_T = 0.0,
      double RELATIVE_POSITION_N = 0.0,
      double RELATIVE_VELOCITY_R = 0.0,
      double RELATIVE_VELOCITY_T = 0.0,
      double RELATIVE_VELOCITY_N = 0.0,
      StringOffset START_SCREEN_PERIODOffset = default(StringOffset),
      StringOffset STOP_SCREEN_PERIODOffset = default(StringOffset),
      objectCenteredReferenceFrame SCREEN_VOLUME_FRAME = objectCenteredReferenceFrame.RTN,
      screeningVolumeShape SCREEN_VOLUME_SHAPE = screeningVolumeShape.ELLIPSOID,
      double SCREEN_VOLUME_X = 0.0,
      double SCREEN_VOLUME_Y = 0.0,
      double SCREEN_VOLUME_Z = 0.0,
      StringOffset SCREEN_ENTRY_TIMEOffset = default(StringOffset),
      StringOffset SCREEN_EXIT_TIMEOffset = default(StringOffset),
      double COLLISION_PROBABILITY = 0.0,
      StringOffset COLLISION_PROBABILITY_METHODOffset = default(StringOffset),
      Offset<CDMObject> OBJECT1Offset = default(Offset<CDMObject>),
      Offset<CDMObject> OBJECT2Offset = default(Offset<CDMObject>),
      Offset<PNM> OBJECT1_DATASOURCEOffset = default(Offset<PNM>),
      Offset<PNM> OBJECT2_DATASOURCEOffset = default(Offset<PNM>)) {
    builder.StartTable(29);
    CDM.AddCOLLISION_PROBABILITY(builder, COLLISION_PROBABILITY);
    CDM.AddSCREEN_VOLUME_Z(builder, SCREEN_VOLUME_Z);
    CDM.AddSCREEN_VOLUME_Y(builder, SCREEN_VOLUME_Y);
    CDM.AddSCREEN_VOLUME_X(builder, SCREEN_VOLUME_X);
    CDM.AddRELATIVE_VELOCITY_N(builder, RELATIVE_VELOCITY_N);
    CDM.AddRELATIVE_VELOCITY_T(builder, RELATIVE_VELOCITY_T);
    CDM.AddRELATIVE_VELOCITY_R(builder, RELATIVE_VELOCITY_R);
    CDM.AddRELATIVE_POSITION_N(builder, RELATIVE_POSITION_N);
    CDM.AddRELATIVE_POSITION_T(builder, RELATIVE_POSITION_T);
    CDM.AddRELATIVE_POSITION_R(builder, RELATIVE_POSITION_R);
    CDM.AddRELATIVE_SPEED(builder, RELATIVE_SPEED);
    CDM.AddMISS_DISTANCE(builder, MISS_DISTANCE);
    CDM.AddCCSDS_CDM_VERS(builder, CCSDS_CDM_VERS);
    CDM.AddOBJECT2_DATASOURCE(builder, OBJECT2_DATASOURCEOffset);
    CDM.AddOBJECT1_DATASOURCE(builder, OBJECT1_DATASOURCEOffset);
    CDM.AddOBJECT2(builder, OBJECT2Offset);
    CDM.AddOBJECT1(builder, OBJECT1Offset);
    CDM.AddCOLLISION_PROBABILITY_METHOD(builder, COLLISION_PROBABILITY_METHODOffset);
    CDM.AddSCREEN_EXIT_TIME(builder, SCREEN_EXIT_TIMEOffset);
    CDM.AddSCREEN_ENTRY_TIME(builder, SCREEN_ENTRY_TIMEOffset);
    CDM.AddSTOP_SCREEN_PERIOD(builder, STOP_SCREEN_PERIODOffset);
    CDM.AddSTART_SCREEN_PERIOD(builder, START_SCREEN_PERIODOffset);
    CDM.AddTCA(builder, TCAOffset);
    CDM.AddMESSAGE_ID(builder, MESSAGE_IDOffset);
    CDM.AddMESSAGE_FOR(builder, MESSAGE_FOROffset);
    CDM.AddORIGINATOR(builder, ORIGINATOROffset);
    CDM.AddCREATION_DATE(builder, CREATION_DATEOffset);
    CDM.AddSCREEN_VOLUME_SHAPE(builder, SCREEN_VOLUME_SHAPE);
    CDM.AddSCREEN_VOLUME_FRAME(builder, SCREEN_VOLUME_FRAME);
    return CDM.EndCDM(builder);
  }

  public static void StartCDM(FlatBufferBuilder builder) { builder.StartTable(29); }
  public static void AddCCSDS_CDM_VERS(FlatBufferBuilder builder, double CCSDS_CDM_VERS) { builder.AddDouble(0, CCSDS_CDM_VERS, 0.0); }
  public static void AddCREATION_DATE(FlatBufferBuilder builder, StringOffset CREATION_DATEOffset) { builder.AddOffset(1, CREATION_DATEOffset.Value, 0); }
  public static void AddORIGINATOR(FlatBufferBuilder builder, StringOffset ORIGINATOROffset) { builder.AddOffset(2, ORIGINATOROffset.Value, 0); }
  public static void AddMESSAGE_FOR(FlatBufferBuilder builder, StringOffset MESSAGE_FOROffset) { builder.AddOffset(3, MESSAGE_FOROffset.Value, 0); }
  public static void AddMESSAGE_ID(FlatBufferBuilder builder, StringOffset MESSAGE_IDOffset) { builder.AddOffset(4, MESSAGE_IDOffset.Value, 0); }
  public static void AddTCA(FlatBufferBuilder builder, StringOffset TCAOffset) { builder.AddOffset(5, TCAOffset.Value, 0); }
  public static void AddMISS_DISTANCE(FlatBufferBuilder builder, double MISS_DISTANCE) { builder.AddDouble(6, MISS_DISTANCE, 0.0); }
  public static void AddRELATIVE_SPEED(FlatBufferBuilder builder, double RELATIVE_SPEED) { builder.AddDouble(7, RELATIVE_SPEED, 0.0); }
  public static void AddRELATIVE_POSITION_R(FlatBufferBuilder builder, double RELATIVE_POSITION_R) { builder.AddDouble(8, RELATIVE_POSITION_R, 0.0); }
  public static void AddRELATIVE_POSITION_T(FlatBufferBuilder builder, double RELATIVE_POSITION_T) { builder.AddDouble(9, RELATIVE_POSITION_T, 0.0); }
  public static void AddRELATIVE_POSITION_N(FlatBufferBuilder builder, double RELATIVE_POSITION_N) { builder.AddDouble(10, RELATIVE_POSITION_N, 0.0); }
  public static void AddRELATIVE_VELOCITY_R(FlatBufferBuilder builder, double RELATIVE_VELOCITY_R) { builder.AddDouble(11, RELATIVE_VELOCITY_R, 0.0); }
  public static void AddRELATIVE_VELOCITY_T(FlatBufferBuilder builder, double RELATIVE_VELOCITY_T) { builder.AddDouble(12, RELATIVE_VELOCITY_T, 0.0); }
  public static void AddRELATIVE_VELOCITY_N(FlatBufferBuilder builder, double RELATIVE_VELOCITY_N) { builder.AddDouble(13, RELATIVE_VELOCITY_N, 0.0); }
  public static void AddSTART_SCREEN_PERIOD(FlatBufferBuilder builder, StringOffset START_SCREEN_PERIODOffset) { builder.AddOffset(14, START_SCREEN_PERIODOffset.Value, 0); }
  public static void AddSTOP_SCREEN_PERIOD(FlatBufferBuilder builder, StringOffset STOP_SCREEN_PERIODOffset) { builder.AddOffset(15, STOP_SCREEN_PERIODOffset.Value, 0); }
  public static void AddSCREEN_VOLUME_FRAME(FlatBufferBuilder builder, objectCenteredReferenceFrame SCREEN_VOLUME_FRAME) { builder.AddSbyte(16, (sbyte)SCREEN_VOLUME_FRAME, 0); }
  public static void AddSCREEN_VOLUME_SHAPE(FlatBufferBuilder builder, screeningVolumeShape SCREEN_VOLUME_SHAPE) { builder.AddSbyte(17, (sbyte)SCREEN_VOLUME_SHAPE, 0); }
  public static void AddSCREEN_VOLUME_X(FlatBufferBuilder builder, double SCREEN_VOLUME_X) { builder.AddDouble(18, SCREEN_VOLUME_X, 0.0); }
  public static void AddSCREEN_VOLUME_Y(FlatBufferBuilder builder, double SCREEN_VOLUME_Y) { builder.AddDouble(19, SCREEN_VOLUME_Y, 0.0); }
  public static void AddSCREEN_VOLUME_Z(FlatBufferBuilder builder, double SCREEN_VOLUME_Z) { builder.AddDouble(20, SCREEN_VOLUME_Z, 0.0); }
  public static void AddSCREEN_ENTRY_TIME(FlatBufferBuilder builder, StringOffset SCREEN_ENTRY_TIMEOffset) { builder.AddOffset(21, SCREEN_ENTRY_TIMEOffset.Value, 0); }
  public static void AddSCREEN_EXIT_TIME(FlatBufferBuilder builder, StringOffset SCREEN_EXIT_TIMEOffset) { builder.AddOffset(22, SCREEN_EXIT_TIMEOffset.Value, 0); }
  public static void AddCOLLISION_PROBABILITY(FlatBufferBuilder builder, double COLLISION_PROBABILITY) { builder.AddDouble(23, COLLISION_PROBABILITY, 0.0); }
  public static void AddCOLLISION_PROBABILITY_METHOD(FlatBufferBuilder builder, StringOffset COLLISION_PROBABILITY_METHODOffset) { builder.AddOffset(24, COLLISION_PROBABILITY_METHODOffset.Value, 0); }
  public static void AddOBJECT1(FlatBufferBuilder builder, Offset<CDMObject> OBJECT1Offset) { builder.AddOffset(25, OBJECT1Offset.Value, 0); }
  public static void AddOBJECT2(FlatBufferBuilder builder, Offset<CDMObject> OBJECT2Offset) { builder.AddOffset(26, OBJECT2Offset.Value, 0); }
  public static void AddOBJECT1_DATASOURCE(FlatBufferBuilder builder, Offset<PNM> OBJECT1_DATASOURCEOffset) { builder.AddOffset(27, OBJECT1_DATASOURCEOffset.Value, 0); }
  public static void AddOBJECT2_DATASOURCE(FlatBufferBuilder builder, Offset<PNM> OBJECT2_DATASOURCEOffset) { builder.AddOffset(28, OBJECT2_DATASOURCEOffset.Value, 0); }
  public static Offset<CDM> EndCDM(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CDM>(o);
  }
  public CDMT UnPack() {
    var _o = new CDMT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CDMT _o) {
    _o.CCSDS_CDM_VERS = this.CCSDS_CDM_VERS;
    _o.CREATION_DATE = this.CREATION_DATE;
    _o.ORIGINATOR = this.ORIGINATOR;
    _o.MESSAGE_FOR = this.MESSAGE_FOR;
    _o.MESSAGE_ID = this.MESSAGE_ID;
    _o.TCA = this.TCA;
    _o.MISS_DISTANCE = this.MISS_DISTANCE;
    _o.RELATIVE_SPEED = this.RELATIVE_SPEED;
    _o.RELATIVE_POSITION_R = this.RELATIVE_POSITION_R;
    _o.RELATIVE_POSITION_T = this.RELATIVE_POSITION_T;
    _o.RELATIVE_POSITION_N = this.RELATIVE_POSITION_N;
    _o.RELATIVE_VELOCITY_R = this.RELATIVE_VELOCITY_R;
    _o.RELATIVE_VELOCITY_T = this.RELATIVE_VELOCITY_T;
    _o.RELATIVE_VELOCITY_N = this.RELATIVE_VELOCITY_N;
    _o.START_SCREEN_PERIOD = this.START_SCREEN_PERIOD;
    _o.STOP_SCREEN_PERIOD = this.STOP_SCREEN_PERIOD;
    _o.SCREEN_VOLUME_FRAME = this.SCREEN_VOLUME_FRAME;
    _o.SCREEN_VOLUME_SHAPE = this.SCREEN_VOLUME_SHAPE;
    _o.SCREEN_VOLUME_X = this.SCREEN_VOLUME_X;
    _o.SCREEN_VOLUME_Y = this.SCREEN_VOLUME_Y;
    _o.SCREEN_VOLUME_Z = this.SCREEN_VOLUME_Z;
    _o.SCREEN_ENTRY_TIME = this.SCREEN_ENTRY_TIME;
    _o.SCREEN_EXIT_TIME = this.SCREEN_EXIT_TIME;
    _o.COLLISION_PROBABILITY = this.COLLISION_PROBABILITY;
    _o.COLLISION_PROBABILITY_METHOD = this.COLLISION_PROBABILITY_METHOD;
    _o.OBJECT1 = this.OBJECT1.HasValue ? this.OBJECT1.Value.UnPack() : null;
    _o.OBJECT2 = this.OBJECT2.HasValue ? this.OBJECT2.Value.UnPack() : null;
    _o.OBJECT1_DATASOURCE = this.OBJECT1_DATASOURCE.HasValue ? this.OBJECT1_DATASOURCE.Value.UnPack() : null;
    _o.OBJECT2_DATASOURCE = this.OBJECT2_DATASOURCE.HasValue ? this.OBJECT2_DATASOURCE.Value.UnPack() : null;
  }
  public static Offset<CDM> Pack(FlatBufferBuilder builder, CDMT _o) {
    if (_o == null) return default(Offset<CDM>);
    var _CREATION_DATE = _o.CREATION_DATE == null ? default(StringOffset) : builder.CreateString(_o.CREATION_DATE);
    var _ORIGINATOR = _o.ORIGINATOR == null ? default(StringOffset) : builder.CreateString(_o.ORIGINATOR);
    var _MESSAGE_FOR = _o.MESSAGE_FOR == null ? default(StringOffset) : builder.CreateString(_o.MESSAGE_FOR);
    var _MESSAGE_ID = _o.MESSAGE_ID == null ? default(StringOffset) : builder.CreateString(_o.MESSAGE_ID);
    var _TCA = _o.TCA == null ? default(StringOffset) : builder.CreateString(_o.TCA);
    var _START_SCREEN_PERIOD = _o.START_SCREEN_PERIOD == null ? default(StringOffset) : builder.CreateString(_o.START_SCREEN_PERIOD);
    var _STOP_SCREEN_PERIOD = _o.STOP_SCREEN_PERIOD == null ? default(StringOffset) : builder.CreateString(_o.STOP_SCREEN_PERIOD);
    var _SCREEN_ENTRY_TIME = _o.SCREEN_ENTRY_TIME == null ? default(StringOffset) : builder.CreateString(_o.SCREEN_ENTRY_TIME);
    var _SCREEN_EXIT_TIME = _o.SCREEN_EXIT_TIME == null ? default(StringOffset) : builder.CreateString(_o.SCREEN_EXIT_TIME);
    var _COLLISION_PROBABILITY_METHOD = _o.COLLISION_PROBABILITY_METHOD == null ? default(StringOffset) : builder.CreateString(_o.COLLISION_PROBABILITY_METHOD);
    var _OBJECT1 = _o.OBJECT1 == null ? default(Offset<CDMObject>) : CDMObject.Pack(builder, _o.OBJECT1);
    var _OBJECT2 = _o.OBJECT2 == null ? default(Offset<CDMObject>) : CDMObject.Pack(builder, _o.OBJECT2);
    var _OBJECT1_DATASOURCE = _o.OBJECT1_DATASOURCE == null ? default(Offset<PNM>) : PNM.Pack(builder, _o.OBJECT1_DATASOURCE);
    var _OBJECT2_DATASOURCE = _o.OBJECT2_DATASOURCE == null ? default(Offset<PNM>) : PNM.Pack(builder, _o.OBJECT2_DATASOURCE);
    return CreateCDM(
      builder,
      _o.CCSDS_CDM_VERS,
      _CREATION_DATE,
      _ORIGINATOR,
      _MESSAGE_FOR,
      _MESSAGE_ID,
      _TCA,
      _o.MISS_DISTANCE,
      _o.RELATIVE_SPEED,
      _o.RELATIVE_POSITION_R,
      _o.RELATIVE_POSITION_T,
      _o.RELATIVE_POSITION_N,
      _o.RELATIVE_VELOCITY_R,
      _o.RELATIVE_VELOCITY_T,
      _o.RELATIVE_VELOCITY_N,
      _START_SCREEN_PERIOD,
      _STOP_SCREEN_PERIOD,
      _o.SCREEN_VOLUME_FRAME,
      _o.SCREEN_VOLUME_SHAPE,
      _o.SCREEN_VOLUME_X,
      _o.SCREEN_VOLUME_Y,
      _o.SCREEN_VOLUME_Z,
      _SCREEN_ENTRY_TIME,
      _SCREEN_EXIT_TIME,
      _o.COLLISION_PROBABILITY,
      _COLLISION_PROBABILITY_METHOD,
      _OBJECT1,
      _OBJECT2,
      _OBJECT1_DATASOURCE,
      _OBJECT2_DATASOURCE);
  }
}

public class CDMT
{
  public double CCSDS_CDM_VERS { get; set; }
  public string CREATION_DATE { get; set; }
  public string ORIGINATOR { get; set; }
  public string MESSAGE_FOR { get; set; }
  public string MESSAGE_ID { get; set; }
  public string TCA { get; set; }
  public double MISS_DISTANCE { get; set; }
  public double RELATIVE_SPEED { get; set; }
  public double RELATIVE_POSITION_R { get; set; }
  public double RELATIVE_POSITION_T { get; set; }
  public double RELATIVE_POSITION_N { get; set; }
  public double RELATIVE_VELOCITY_R { get; set; }
  public double RELATIVE_VELOCITY_T { get; set; }
  public double RELATIVE_VELOCITY_N { get; set; }
  public string START_SCREEN_PERIOD { get; set; }
  public string STOP_SCREEN_PERIOD { get; set; }
  public objectCenteredReferenceFrame SCREEN_VOLUME_FRAME { get; set; }
  public screeningVolumeShape SCREEN_VOLUME_SHAPE { get; set; }
  public double SCREEN_VOLUME_X { get; set; }
  public double SCREEN_VOLUME_Y { get; set; }
  public double SCREEN_VOLUME_Z { get; set; }
  public string SCREEN_ENTRY_TIME { get; set; }
  public string SCREEN_EXIT_TIME { get; set; }
  public double COLLISION_PROBABILITY { get; set; }
  public string COLLISION_PROBABILITY_METHOD { get; set; }
  public CDMObjectT OBJECT1 { get; set; }
  public CDMObjectT OBJECT2 { get; set; }
  public PNMT OBJECT1_DATASOURCE { get; set; }
  public PNMT OBJECT2_DATASOURCE { get; set; }

  public CDMT() {
    this.CCSDS_CDM_VERS = 0.0;
    this.CREATION_DATE = null;
    this.ORIGINATOR = null;
    this.MESSAGE_FOR = null;
    this.MESSAGE_ID = null;
    this.TCA = null;
    this.MISS_DISTANCE = 0.0;
    this.RELATIVE_SPEED = 0.0;
    this.RELATIVE_POSITION_R = 0.0;
    this.RELATIVE_POSITION_T = 0.0;
    this.RELATIVE_POSITION_N = 0.0;
    this.RELATIVE_VELOCITY_R = 0.0;
    this.RELATIVE_VELOCITY_T = 0.0;
    this.RELATIVE_VELOCITY_N = 0.0;
    this.START_SCREEN_PERIOD = null;
    this.STOP_SCREEN_PERIOD = null;
    this.SCREEN_VOLUME_FRAME = objectCenteredReferenceFrame.RTN;
    this.SCREEN_VOLUME_SHAPE = screeningVolumeShape.ELLIPSOID;
    this.SCREEN_VOLUME_X = 0.0;
    this.SCREEN_VOLUME_Y = 0.0;
    this.SCREEN_VOLUME_Z = 0.0;
    this.SCREEN_ENTRY_TIME = null;
    this.SCREEN_EXIT_TIME = null;
    this.COLLISION_PROBABILITY = 0.0;
    this.COLLISION_PROBABILITY_METHOD = null;
    this.OBJECT1 = null;
    this.OBJECT2 = null;
    this.OBJECT1_DATASOURCE = null;
    this.OBJECT2_DATASOURCE = null;
  }
}

