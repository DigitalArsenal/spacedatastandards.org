// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { atmosphericModel } from './atmosphericModel.js';
import { geopotentialModel } from './geopotentialModel.js';
import { lunarPerturbationModel } from './lunarPerturbationModel.js';
import { perturbationStatus } from './perturbationStatus.js';
import { resonanceModel } from './resonanceModel.js';
import { solarPerturbationModel } from './solarPerturbationModel.js';
import { solarRadiationPressureModel } from './solarRadiationPressureModel.js';
/**
 * OPM Atmospheric and Perturbation Model Data
 */
export class opmAtmosphericModelData {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsopmAtmosphericModelData(bb, obj) {
        return (obj || new opmAtmosphericModelData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsopmAtmosphericModelData(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new opmAtmosphericModelData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    ATMOSPHERIC_MODEL() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : atmosphericModel.NONE;
    }
    GEOPOTENTIAL_MODEL() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : geopotentialModel.NONE;
    }
    LUNAR_SOLAR_PERTURBATION() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : perturbationStatus.OFF;
    }
    LUNAR_PERTURBATION_MODEL() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : lunarPerturbationModel.NONE;
    }
    SOLAR_PERTURBATION_MODEL() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : solarPerturbationModel.NONE;
    }
    SOLAR_RADIATION_PRESSURE() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : perturbationStatus.OFF;
    }
    SRP_MODEL() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : solarRadiationPressureModel.NONE;
    }
    RESONANCE_MODEL() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : resonanceModel.NONE;
    }
    static startopmAtmosphericModelData(builder) {
        builder.startObject(8);
    }
    static addAtmosphericModel(builder, ATMOSPHERIC_MODEL) {
        builder.addFieldInt8(0, ATMOSPHERIC_MODEL, atmosphericModel.NONE);
    }
    static addGeopotentialModel(builder, GEOPOTENTIAL_MODEL) {
        builder.addFieldInt8(1, GEOPOTENTIAL_MODEL, geopotentialModel.NONE);
    }
    static addLunarSolarPerturbation(builder, LUNAR_SOLAR_PERTURBATION) {
        builder.addFieldInt8(2, LUNAR_SOLAR_PERTURBATION, perturbationStatus.OFF);
    }
    static addLunarPerturbationModel(builder, LUNAR_PERTURBATION_MODEL) {
        builder.addFieldInt8(3, LUNAR_PERTURBATION_MODEL, lunarPerturbationModel.NONE);
    }
    static addSolarPerturbationModel(builder, SOLAR_PERTURBATION_MODEL) {
        builder.addFieldInt8(4, SOLAR_PERTURBATION_MODEL, solarPerturbationModel.NONE);
    }
    static addSolarRadiationPressure(builder, SOLAR_RADIATION_PRESSURE) {
        builder.addFieldInt8(5, SOLAR_RADIATION_PRESSURE, perturbationStatus.OFF);
    }
    static addSrpModel(builder, SRP_MODEL) {
        builder.addFieldInt8(6, SRP_MODEL, solarRadiationPressureModel.NONE);
    }
    static addResonanceModel(builder, RESONANCE_MODEL) {
        builder.addFieldInt8(7, RESONANCE_MODEL, resonanceModel.NONE);
    }
    static endopmAtmosphericModelData(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createopmAtmosphericModelData(builder, ATMOSPHERIC_MODEL, GEOPOTENTIAL_MODEL, LUNAR_SOLAR_PERTURBATION, LUNAR_PERTURBATION_MODEL, SOLAR_PERTURBATION_MODEL, SOLAR_RADIATION_PRESSURE, SRP_MODEL, RESONANCE_MODEL) {
        opmAtmosphericModelData.startopmAtmosphericModelData(builder);
        opmAtmosphericModelData.addAtmosphericModel(builder, ATMOSPHERIC_MODEL);
        opmAtmosphericModelData.addGeopotentialModel(builder, GEOPOTENTIAL_MODEL);
        opmAtmosphericModelData.addLunarSolarPerturbation(builder, LUNAR_SOLAR_PERTURBATION);
        opmAtmosphericModelData.addLunarPerturbationModel(builder, LUNAR_PERTURBATION_MODEL);
        opmAtmosphericModelData.addSolarPerturbationModel(builder, SOLAR_PERTURBATION_MODEL);
        opmAtmosphericModelData.addSolarRadiationPressure(builder, SOLAR_RADIATION_PRESSURE);
        opmAtmosphericModelData.addSrpModel(builder, SRP_MODEL);
        opmAtmosphericModelData.addResonanceModel(builder, RESONANCE_MODEL);
        return opmAtmosphericModelData.endopmAtmosphericModelData(builder);
    }
    unpack() {
        return new opmAtmosphericModelDataT(this.ATMOSPHERIC_MODEL(), this.GEOPOTENTIAL_MODEL(), this.LUNAR_SOLAR_PERTURBATION(), this.LUNAR_PERTURBATION_MODEL(), this.SOLAR_PERTURBATION_MODEL(), this.SOLAR_RADIATION_PRESSURE(), this.SRP_MODEL(), this.RESONANCE_MODEL());
    }
    unpackTo(_o) {
        _o.ATMOSPHERIC_MODEL = this.ATMOSPHERIC_MODEL();
        _o.GEOPOTENTIAL_MODEL = this.GEOPOTENTIAL_MODEL();
        _o.LUNAR_SOLAR_PERTURBATION = this.LUNAR_SOLAR_PERTURBATION();
        _o.LUNAR_PERTURBATION_MODEL = this.LUNAR_PERTURBATION_MODEL();
        _o.SOLAR_PERTURBATION_MODEL = this.SOLAR_PERTURBATION_MODEL();
        _o.SOLAR_RADIATION_PRESSURE = this.SOLAR_RADIATION_PRESSURE();
        _o.SRP_MODEL = this.SRP_MODEL();
        _o.RESONANCE_MODEL = this.RESONANCE_MODEL();
    }
}
export class opmAtmosphericModelDataT {
    constructor(ATMOSPHERIC_MODEL = atmosphericModel.NONE, GEOPOTENTIAL_MODEL = geopotentialModel.NONE, LUNAR_SOLAR_PERTURBATION = perturbationStatus.OFF, LUNAR_PERTURBATION_MODEL = lunarPerturbationModel.NONE, SOLAR_PERTURBATION_MODEL = solarPerturbationModel.NONE, SOLAR_RADIATION_PRESSURE = perturbationStatus.OFF, SRP_MODEL = solarRadiationPressureModel.NONE, RESONANCE_MODEL = resonanceModel.NONE) {
        this.ATMOSPHERIC_MODEL = ATMOSPHERIC_MODEL;
        this.GEOPOTENTIAL_MODEL = GEOPOTENTIAL_MODEL;
        this.LUNAR_SOLAR_PERTURBATION = LUNAR_SOLAR_PERTURBATION;
        this.LUNAR_PERTURBATION_MODEL = LUNAR_PERTURBATION_MODEL;
        this.SOLAR_PERTURBATION_MODEL = SOLAR_PERTURBATION_MODEL;
        this.SOLAR_RADIATION_PRESSURE = SOLAR_RADIATION_PRESSURE;
        this.SRP_MODEL = SRP_MODEL;
        this.RESONANCE_MODEL = RESONANCE_MODEL;
    }
    pack(builder) {
        return opmAtmosphericModelData.createopmAtmosphericModelData(builder, this.ATMOSPHERIC_MODEL, this.GEOPOTENTIAL_MODEL, this.LUNAR_SOLAR_PERTURBATION, this.LUNAR_PERTURBATION_MODEL, this.SOLAR_PERTURBATION_MODEL, this.SOLAR_RADIATION_PRESSURE, this.SRP_MODEL, this.RESONANCE_MODEL);
    }
}
