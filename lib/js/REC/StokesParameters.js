// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
/**
 * Stokes parameters, representing different aspects of polarization
 */
export class StokesParameters {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsStokesParameters(bb, obj) {
        return (obj || new StokesParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsStokesParameters(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StokesParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    /**
     * Intensity
     */
    I() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Linear polarization
     */
    Q() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Another linear polarization, orthogonal to Q
     */
    U() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Circular polarization
     */
    V() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startStokesParameters(builder) {
        builder.startObject(4);
    }
    static addI(builder, I) {
        builder.addFieldFloat64(0, I, 0.0);
    }
    static addQ(builder, Q) {
        builder.addFieldFloat64(1, Q, 0.0);
    }
    static addU(builder, U) {
        builder.addFieldFloat64(2, U, 0.0);
    }
    static addV(builder, V) {
        builder.addFieldFloat64(3, V, 0.0);
    }
    static endStokesParameters(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createStokesParameters(builder, I, Q, U, V) {
        StokesParameters.startStokesParameters(builder);
        StokesParameters.addI(builder, I);
        StokesParameters.addQ(builder, Q);
        StokesParameters.addU(builder, U);
        StokesParameters.addV(builder, V);
        return StokesParameters.endStokesParameters(builder);
    }
    unpack() {
        return new StokesParametersT(this.I(), this.Q(), this.U(), this.V());
    }
    unpackTo(_o) {
        _o.I = this.I();
        _o.Q = this.Q();
        _o.U = this.U();
        _o.V = this.V();
    }
}
export class StokesParametersT {
    constructor(I = 0.0, Q = 0.0, U = 0.0, V = 0.0) {
        this.I = I;
        this.Q = Q;
        this.U = U;
        this.V = V;
    }
    pack(builder) {
        return StokesParameters.createStokesParameters(builder, this.I, this.Q, this.U, this.V);
    }
}
