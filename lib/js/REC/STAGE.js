// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { ENGINE } from './ENGINE.js';
/**
 * Stage Details
 */
export class STAGE {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSTAGE(bb, obj) {
        return (obj || new STAGE()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSTAGE(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new STAGE()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    /**
     * Stage Number
     */
    STAGE_NUMBER() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Engines Used in This Stage
     */
    ENGINES(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new ENGINE()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    enginesLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    FUEL_TYPE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Thrust Produced by This Stage (in Newtons)
     */
    THRUST() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Duration of the Burn (in Seconds)
     */
    BURN_DURATION() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startSTAGE(builder) {
        builder.startObject(5);
    }
    static addStageNumber(builder, STAGE_NUMBER) {
        builder.addFieldInt32(0, STAGE_NUMBER, 0);
    }
    static addEngines(builder, ENGINESOffset) {
        builder.addFieldOffset(1, ENGINESOffset, 0);
    }
    static createEnginesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startEnginesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addFuelType(builder, FUEL_TYPEOffset) {
        builder.addFieldOffset(2, FUEL_TYPEOffset, 0);
    }
    static addThrust(builder, THRUST) {
        builder.addFieldFloat64(3, THRUST, 0.0);
    }
    static addBurnDuration(builder, BURN_DURATION) {
        builder.addFieldFloat64(4, BURN_DURATION, 0.0);
    }
    static endSTAGE(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createSTAGE(builder, STAGE_NUMBER, ENGINESOffset, FUEL_TYPEOffset, THRUST, BURN_DURATION) {
        STAGE.startSTAGE(builder);
        STAGE.addStageNumber(builder, STAGE_NUMBER);
        STAGE.addEngines(builder, ENGINESOffset);
        STAGE.addFuelType(builder, FUEL_TYPEOffset);
        STAGE.addThrust(builder, THRUST);
        STAGE.addBurnDuration(builder, BURN_DURATION);
        return STAGE.endSTAGE(builder);
    }
    unpack() {
        return new STAGET(this.STAGE_NUMBER(), this.bb.createObjList(this.ENGINES.bind(this), this.enginesLength()), this.FUEL_TYPE(), this.THRUST(), this.BURN_DURATION());
    }
    unpackTo(_o) {
        _o.STAGE_NUMBER = this.STAGE_NUMBER();
        _o.ENGINES = this.bb.createObjList(this.ENGINES.bind(this), this.enginesLength());
        _o.FUEL_TYPE = this.FUEL_TYPE();
        _o.THRUST = this.THRUST();
        _o.BURN_DURATION = this.BURN_DURATION();
    }
}
export class STAGET {
    constructor(STAGE_NUMBER = 0, ENGINES = [], FUEL_TYPE = null, THRUST = 0.0, BURN_DURATION = 0.0) {
        this.STAGE_NUMBER = STAGE_NUMBER;
        this.ENGINES = ENGINES;
        this.FUEL_TYPE = FUEL_TYPE;
        this.THRUST = THRUST;
        this.BURN_DURATION = BURN_DURATION;
    }
    pack(builder) {
        const ENGINES = STAGE.createEnginesVector(builder, builder.createObjectOffsetList(this.ENGINES));
        const FUEL_TYPE = (this.FUEL_TYPE !== null ? builder.createString(this.FUEL_TYPE) : 0);
        return STAGE.createSTAGE(builder, this.STAGE_NUMBER, ENGINES, FUEL_TYPE, this.THRUST, this.BURN_DURATION);
    }
}
