// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { CAT } from './CAT.js';
import { covarianceMatrixLine } from './covarianceMatrixLine.js';
import { ephemerisDataLine } from './ephemerisDataLine.js';
import { refFrame } from './refFrame.js';
import { timeSystem } from './timeSystem.js';
/**
 * OEM Ephemeris Data Block
 */
export class ephemerisDataBlock {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsephemerisDataBlock(bb, obj) {
        return (obj || new ephemerisDataBlock()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsephemerisDataBlock(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ephemerisDataBlock()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    COMMENT(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Satellite name for the first object
     */
    OBJECT(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new CAT()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    CENTER_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Name of the reference frame (TEME, EME2000, etc.)
     */
    REFERENCE_FRAME() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : refFrame.ECEF;
    }
    REFERENCE_FRAME_EPOCH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Time system used for the orbit state and covariance matrix. (UTC)
     */
    TIME_SYSTEM() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : timeSystem.GMST;
    }
    START_TIME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    USEABLE_START_TIME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    USEABLE_STOP_TIME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    STOP_TIME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Step size in seconds separating the epochs of each ephemeris data row
     */
    STEP_SIZE() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    INTERPOLATION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Recommended interpolation degree for ephemeris data
     */
    INTERPOLATION_DEGREE() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    /**
     * Array of ephemeris data lines
     */
    EPHEMERIS_DATA_LINES(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? (obj || new ephemerisDataLine()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    ephemerisDataLinesLength() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Array of covariance matrix lines
     */
    COVARIANCE_MATRIX_LINES(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? (obj || new covarianceMatrixLine()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    covarianceMatrixLinesLength() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startephemerisDataBlock(builder) {
        builder.startObject(15);
    }
    static addComment(builder, COMMENTOffset) {
        builder.addFieldOffset(0, COMMENTOffset, 0);
    }
    static addObject(builder, OBJECTOffset) {
        builder.addFieldOffset(1, OBJECTOffset, 0);
    }
    static addCenterName(builder, CENTER_NAMEOffset) {
        builder.addFieldOffset(2, CENTER_NAMEOffset, 0);
    }
    static addReferenceFrame(builder, REFERENCE_FRAME) {
        builder.addFieldInt8(3, REFERENCE_FRAME, refFrame.ECEF);
    }
    static addReferenceFrameEpoch(builder, REFERENCE_FRAME_EPOCHOffset) {
        builder.addFieldOffset(4, REFERENCE_FRAME_EPOCHOffset, 0);
    }
    static addTimeSystem(builder, TIME_SYSTEM) {
        builder.addFieldInt8(5, TIME_SYSTEM, timeSystem.GMST);
    }
    static addStartTime(builder, START_TIMEOffset) {
        builder.addFieldOffset(6, START_TIMEOffset, 0);
    }
    static addUseableStartTime(builder, USEABLE_START_TIMEOffset) {
        builder.addFieldOffset(7, USEABLE_START_TIMEOffset, 0);
    }
    static addUseableStopTime(builder, USEABLE_STOP_TIMEOffset) {
        builder.addFieldOffset(8, USEABLE_STOP_TIMEOffset, 0);
    }
    static addStopTime(builder, STOP_TIMEOffset) {
        builder.addFieldOffset(9, STOP_TIMEOffset, 0);
    }
    static addStepSize(builder, STEP_SIZE) {
        builder.addFieldFloat64(10, STEP_SIZE, 0.0);
    }
    static addInterpolation(builder, INTERPOLATIONOffset) {
        builder.addFieldOffset(11, INTERPOLATIONOffset, 0);
    }
    static addInterpolationDegree(builder, INTERPOLATION_DEGREE) {
        builder.addFieldInt32(12, INTERPOLATION_DEGREE, 0);
    }
    static addEphemerisDataLines(builder, EPHEMERIS_DATA_LINESOffset) {
        builder.addFieldOffset(13, EPHEMERIS_DATA_LINESOffset, 0);
    }
    static createEphemerisDataLinesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startEphemerisDataLinesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addCovarianceMatrixLines(builder, COVARIANCE_MATRIX_LINESOffset) {
        builder.addFieldOffset(14, COVARIANCE_MATRIX_LINESOffset, 0);
    }
    static createCovarianceMatrixLinesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startCovarianceMatrixLinesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endephemerisDataBlock(builder) {
        const offset = builder.endObject();
        return offset;
    }
    unpack() {
        return new ephemerisDataBlockT(this.COMMENT(), (this.OBJECT() !== null ? this.OBJECT().unpack() : null), this.CENTER_NAME(), this.REFERENCE_FRAME(), this.REFERENCE_FRAME_EPOCH(), this.TIME_SYSTEM(), this.START_TIME(), this.USEABLE_START_TIME(), this.USEABLE_STOP_TIME(), this.STOP_TIME(), this.STEP_SIZE(), this.INTERPOLATION(), this.INTERPOLATION_DEGREE(), this.bb.createObjList(this.EPHEMERIS_DATA_LINES.bind(this), this.ephemerisDataLinesLength()), this.bb.createObjList(this.COVARIANCE_MATRIX_LINES.bind(this), this.covarianceMatrixLinesLength()));
    }
    unpackTo(_o) {
        _o.COMMENT = this.COMMENT();
        _o.OBJECT = (this.OBJECT() !== null ? this.OBJECT().unpack() : null);
        _o.CENTER_NAME = this.CENTER_NAME();
        _o.REFERENCE_FRAME = this.REFERENCE_FRAME();
        _o.REFERENCE_FRAME_EPOCH = this.REFERENCE_FRAME_EPOCH();
        _o.TIME_SYSTEM = this.TIME_SYSTEM();
        _o.START_TIME = this.START_TIME();
        _o.USEABLE_START_TIME = this.USEABLE_START_TIME();
        _o.USEABLE_STOP_TIME = this.USEABLE_STOP_TIME();
        _o.STOP_TIME = this.STOP_TIME();
        _o.STEP_SIZE = this.STEP_SIZE();
        _o.INTERPOLATION = this.INTERPOLATION();
        _o.INTERPOLATION_DEGREE = this.INTERPOLATION_DEGREE();
        _o.EPHEMERIS_DATA_LINES = this.bb.createObjList(this.EPHEMERIS_DATA_LINES.bind(this), this.ephemerisDataLinesLength());
        _o.COVARIANCE_MATRIX_LINES = this.bb.createObjList(this.COVARIANCE_MATRIX_LINES.bind(this), this.covarianceMatrixLinesLength());
    }
}
export class ephemerisDataBlockT {
    constructor(COMMENT = null, OBJECT = null, CENTER_NAME = null, REFERENCE_FRAME = refFrame.ECEF, REFERENCE_FRAME_EPOCH = null, TIME_SYSTEM = timeSystem.GMST, START_TIME = null, USEABLE_START_TIME = null, USEABLE_STOP_TIME = null, STOP_TIME = null, STEP_SIZE = 0.0, INTERPOLATION = null, INTERPOLATION_DEGREE = 0, EPHEMERIS_DATA_LINES = [], COVARIANCE_MATRIX_LINES = []) {
        this.COMMENT = COMMENT;
        this.OBJECT = OBJECT;
        this.CENTER_NAME = CENTER_NAME;
        this.REFERENCE_FRAME = REFERENCE_FRAME;
        this.REFERENCE_FRAME_EPOCH = REFERENCE_FRAME_EPOCH;
        this.TIME_SYSTEM = TIME_SYSTEM;
        this.START_TIME = START_TIME;
        this.USEABLE_START_TIME = USEABLE_START_TIME;
        this.USEABLE_STOP_TIME = USEABLE_STOP_TIME;
        this.STOP_TIME = STOP_TIME;
        this.STEP_SIZE = STEP_SIZE;
        this.INTERPOLATION = INTERPOLATION;
        this.INTERPOLATION_DEGREE = INTERPOLATION_DEGREE;
        this.EPHEMERIS_DATA_LINES = EPHEMERIS_DATA_LINES;
        this.COVARIANCE_MATRIX_LINES = COVARIANCE_MATRIX_LINES;
    }
    pack(builder) {
        const COMMENT = (this.COMMENT !== null ? builder.createString(this.COMMENT) : 0);
        const OBJECT = (this.OBJECT !== null ? this.OBJECT.pack(builder) : 0);
        const CENTER_NAME = (this.CENTER_NAME !== null ? builder.createString(this.CENTER_NAME) : 0);
        const REFERENCE_FRAME_EPOCH = (this.REFERENCE_FRAME_EPOCH !== null ? builder.createString(this.REFERENCE_FRAME_EPOCH) : 0);
        const START_TIME = (this.START_TIME !== null ? builder.createString(this.START_TIME) : 0);
        const USEABLE_START_TIME = (this.USEABLE_START_TIME !== null ? builder.createString(this.USEABLE_START_TIME) : 0);
        const USEABLE_STOP_TIME = (this.USEABLE_STOP_TIME !== null ? builder.createString(this.USEABLE_STOP_TIME) : 0);
        const STOP_TIME = (this.STOP_TIME !== null ? builder.createString(this.STOP_TIME) : 0);
        const INTERPOLATION = (this.INTERPOLATION !== null ? builder.createString(this.INTERPOLATION) : 0);
        const EPHEMERIS_DATA_LINES = ephemerisDataBlock.createEphemerisDataLinesVector(builder, builder.createObjectOffsetList(this.EPHEMERIS_DATA_LINES));
        const COVARIANCE_MATRIX_LINES = ephemerisDataBlock.createCovarianceMatrixLinesVector(builder, builder.createObjectOffsetList(this.COVARIANCE_MATRIX_LINES));
        ephemerisDataBlock.startephemerisDataBlock(builder);
        ephemerisDataBlock.addComment(builder, COMMENT);
        ephemerisDataBlock.addObject(builder, OBJECT);
        ephemerisDataBlock.addCenterName(builder, CENTER_NAME);
        ephemerisDataBlock.addReferenceFrame(builder, this.REFERENCE_FRAME);
        ephemerisDataBlock.addReferenceFrameEpoch(builder, REFERENCE_FRAME_EPOCH);
        ephemerisDataBlock.addTimeSystem(builder, this.TIME_SYSTEM);
        ephemerisDataBlock.addStartTime(builder, START_TIME);
        ephemerisDataBlock.addUseableStartTime(builder, USEABLE_START_TIME);
        ephemerisDataBlock.addUseableStopTime(builder, USEABLE_STOP_TIME);
        ephemerisDataBlock.addStopTime(builder, STOP_TIME);
        ephemerisDataBlock.addStepSize(builder, this.STEP_SIZE);
        ephemerisDataBlock.addInterpolation(builder, INTERPOLATION);
        ephemerisDataBlock.addInterpolationDegree(builder, this.INTERPOLATION_DEGREE);
        ephemerisDataBlock.addEphemerisDataLines(builder, EPHEMERIS_DATA_LINES);
        ephemerisDataBlock.addCovarianceMatrixLines(builder, COVARIANCE_MATRIX_LINES);
        return ephemerisDataBlock.endephemerisDataBlock(builder);
    }
}
