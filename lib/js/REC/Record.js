// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { RecordType, unionToRecordType } from './RecordType.js';
export class Record {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsRecord(bb, obj) {
        return (obj || new Record()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsRecord(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Record()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    valueType() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : RecordType.NONE;
    }
    value(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    standard(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startRecord(builder) {
        builder.startObject(3);
    }
    static addValueType(builder, valueType) {
        builder.addFieldInt8(0, valueType, RecordType.NONE);
    }
    static addValue(builder, valueOffset) {
        builder.addFieldOffset(1, valueOffset, 0);
    }
    static addStandard(builder, standardOffset) {
        builder.addFieldOffset(2, standardOffset, 0);
    }
    static endRecord(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createRecord(builder, valueType, valueOffset, standardOffset) {
        Record.startRecord(builder);
        Record.addValueType(builder, valueType);
        Record.addValue(builder, valueOffset);
        Record.addStandard(builder, standardOffset);
        return Record.endRecord(builder);
    }
    unpack() {
        return new RecordT(this.valueType(), (() => {
            const temp = unionToRecordType(this.valueType(), this.value.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })(), this.standard());
    }
    unpackTo(_o) {
        _o.valueType = this.valueType();
        _o.value = (() => {
            const temp = unionToRecordType(this.valueType(), this.value.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
        _o.standard = this.standard();
    }
}
export class RecordT {
    constructor(valueType = RecordType.NONE, value = null, standard = null) {
        this.valueType = valueType;
        this.value = value;
        this.standard = standard;
    }
    pack(builder) {
        const value = builder.createObjectOffset(this.value);
        const standard = (this.standard !== null ? builder.createString(this.standard) : 0);
        return Record.createRecord(builder, this.valueType, value, standard);
    }
}
