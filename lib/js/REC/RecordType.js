// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import { BOV } from './BOV.js';
import { CAT } from './CAT.js';
import { CDM } from './CDM.js';
import { CRM } from './CRM.js';
import { CSM } from './CSM.js';
import { CTR } from './CTR.js';
import { EME } from './EME.js';
import { EOO } from './EOO.js';
import { EOP } from './EOP.js';
import { EPM } from './EPM.js';
import { HYP } from './HYP.js';
import { IDM } from './IDM.js';
import { LCC } from './LCC.js';
import { LDM } from './LDM.js';
import { MET } from './MET.js';
import { MPE } from './MPE.js';
import { OCM } from './OCM.js';
import { OEM } from './OEM.js';
import { OMM } from './OMM.js';
import { OSM } from './OSM.js';
import { PLD } from './PLD.js';
import { PNM } from './PNM.js';
import { PRG } from './PRG.js';
import { RFM } from './RFM.js';
import { ROC } from './ROC.js';
import { SCM } from './SCM.js';
import { SIT } from './SIT.js';
import { TDM } from './TDM.js';
import { TIM } from './TIM.js';
import { VCM } from './VCM.js';
export var RecordType;
(function (RecordType) {
    RecordType[RecordType["NONE"] = 0] = "NONE";
    RecordType[RecordType["BOV"] = 1] = "BOV";
    RecordType[RecordType["CAT"] = 2] = "CAT";
    RecordType[RecordType["CDM"] = 3] = "CDM";
    RecordType[RecordType["CRM"] = 4] = "CRM";
    RecordType[RecordType["CSM"] = 5] = "CSM";
    RecordType[RecordType["CTR"] = 6] = "CTR";
    RecordType[RecordType["EME"] = 7] = "EME";
    RecordType[RecordType["EOO"] = 8] = "EOO";
    RecordType[RecordType["EOP"] = 9] = "EOP";
    RecordType[RecordType["EPM"] = 10] = "EPM";
    RecordType[RecordType["HYP"] = 11] = "HYP";
    RecordType[RecordType["IDM"] = 12] = "IDM";
    RecordType[RecordType["LCC"] = 13] = "LCC";
    RecordType[RecordType["LDM"] = 14] = "LDM";
    RecordType[RecordType["MET"] = 15] = "MET";
    RecordType[RecordType["MPE"] = 16] = "MPE";
    RecordType[RecordType["OCM"] = 17] = "OCM";
    RecordType[RecordType["OEM"] = 18] = "OEM";
    RecordType[RecordType["OMM"] = 19] = "OMM";
    RecordType[RecordType["OSM"] = 20] = "OSM";
    RecordType[RecordType["PLD"] = 21] = "PLD";
    RecordType[RecordType["PNM"] = 22] = "PNM";
    RecordType[RecordType["PRG"] = 23] = "PRG";
    RecordType[RecordType["RFM"] = 24] = "RFM";
    RecordType[RecordType["ROC"] = 25] = "ROC";
    RecordType[RecordType["SCM"] = 26] = "SCM";
    RecordType[RecordType["SIT"] = 27] = "SIT";
    RecordType[RecordType["TDM"] = 28] = "TDM";
    RecordType[RecordType["TIM"] = 29] = "TIM";
    RecordType[RecordType["VCM"] = 30] = "VCM";
})(RecordType || (RecordType = {}));
export function unionToRecordType(type, accessor) {
    switch (RecordType[type]) {
        case 'NONE': return null;
        case 'BOV': return accessor(new BOV());
        case 'CAT': return accessor(new CAT());
        case 'CDM': return accessor(new CDM());
        case 'CRM': return accessor(new CRM());
        case 'CSM': return accessor(new CSM());
        case 'CTR': return accessor(new CTR());
        case 'EME': return accessor(new EME());
        case 'EOO': return accessor(new EOO());
        case 'EOP': return accessor(new EOP());
        case 'EPM': return accessor(new EPM());
        case 'HYP': return accessor(new HYP());
        case 'IDM': return accessor(new IDM());
        case 'LCC': return accessor(new LCC());
        case 'LDM': return accessor(new LDM());
        case 'MET': return accessor(new MET());
        case 'MPE': return accessor(new MPE());
        case 'OCM': return accessor(new OCM());
        case 'OEM': return accessor(new OEM());
        case 'OMM': return accessor(new OMM());
        case 'OSM': return accessor(new OSM());
        case 'PLD': return accessor(new PLD());
        case 'PNM': return accessor(new PNM());
        case 'PRG': return accessor(new PRG());
        case 'RFM': return accessor(new RFM());
        case 'ROC': return accessor(new ROC());
        case 'SCM': return accessor(new SCM());
        case 'SIT': return accessor(new SIT());
        case 'TDM': return accessor(new TDM());
        case 'TIM': return accessor(new TIM());
        case 'VCM': return accessor(new VCM());
        default: return null;
    }
}
export function unionListToRecordType(type, accessor, index) {
    switch (RecordType[type]) {
        case 'NONE': return null;
        case 'BOV': return accessor(index, new BOV());
        case 'CAT': return accessor(index, new CAT());
        case 'CDM': return accessor(index, new CDM());
        case 'CRM': return accessor(index, new CRM());
        case 'CSM': return accessor(index, new CSM());
        case 'CTR': return accessor(index, new CTR());
        case 'EME': return accessor(index, new EME());
        case 'EOO': return accessor(index, new EOO());
        case 'EOP': return accessor(index, new EOP());
        case 'EPM': return accessor(index, new EPM());
        case 'HYP': return accessor(index, new HYP());
        case 'IDM': return accessor(index, new IDM());
        case 'LCC': return accessor(index, new LCC());
        case 'LDM': return accessor(index, new LDM());
        case 'MET': return accessor(index, new MET());
        case 'MPE': return accessor(index, new MPE());
        case 'OCM': return accessor(index, new OCM());
        case 'OEM': return accessor(index, new OEM());
        case 'OMM': return accessor(index, new OMM());
        case 'OSM': return accessor(index, new OSM());
        case 'PLD': return accessor(index, new PLD());
        case 'PNM': return accessor(index, new PNM());
        case 'PRG': return accessor(index, new PRG());
        case 'RFM': return accessor(index, new RFM());
        case 'ROC': return accessor(index, new ROC());
        case 'SCM': return accessor(index, new SCM());
        case 'SIT': return accessor(index, new SIT());
        case 'TDM': return accessor(index, new TDM());
        case 'TIM': return accessor(index, new TIM());
        case 'VCM': return accessor(index, new VCM());
        default: return null;
    }
}
