// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { VCMAtmosphericModelData } from './VCMAtmosphericModelData.js';
import { VCMCovarianceMatrixLine } from './VCMCovarianceMatrixLine.js';
import { VCMStateVector } from './VCMStateVector.js';
import { equinoctialElements } from './equinoctialElements.js';
import { keplerianElements } from './keplerianElements.js';
import { perturbationStatus } from './perturbationStatus.js';
import { propagatorConfig } from './propagatorConfig.js';
import { uvwSigmas } from './uvwSigmas.js';
/**
 * Vector Covariance Message
 */
export class VCM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsVCM(bb, obj) {
        return (obj || new VCM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsVCM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VCM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    CCSDS_OMM_VERS() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    CREATION_DATE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ORIGINATOR(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OBJECT_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OBJECT_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CENTER_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    REF_FRAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TIME_SYSTEM(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    STATE_VECTOR(obj) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? (obj || new VCMStateVector()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    KEPLERIAN_ELEMENTS(obj) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? (obj || new keplerianElements()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    EQUINOCTIAL_ELEMENTS(obj) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? (obj || new equinoctialElements()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    GM() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    ATMOSPHERIC_MODEL_DATA(obj) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? (obj || new VCMAtmosphericModelData()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    PROPAGATOR_SETTINGS(obj) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? (obj || new propagatorConfig()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    COVARIANCE_MATRIX(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? (obj || new VCMCovarianceMatrixLine()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    covarianceMatrixLength() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    UVW_SIGMAS(obj) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? (obj || new uvwSigmas()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    MASS() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    SOLAR_RAD_AREA() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    SOLAR_RAD_COEFF() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    DRAG_AREA() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    DRAG_COEFF() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    SRP() {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : perturbationStatus.OFF;
    }
    CLASSIFICATION_TYPE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    NORAD_CAT_ID() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    ELEMENT_SET_NO() {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    REV_AT_EPOCH() {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    BSTAR() {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    MEAN_MOTION_DOT() {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    MEAN_MOTION_DDOT() {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    COV_REFERENCE_FRAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 62);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CX_X() {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    CY_X() {
        const offset = this.bb.__offset(this.bb_pos, 66);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    CZ_X() {
        const offset = this.bb.__offset(this.bb_pos, 68);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    CX_DOT_X() {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    USER_DEFINED_BIP_0044_TYPE() {
        const offset = this.bb.__offset(this.bb_pos, 72);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    USER_DEFINED_OBJECT_DESIGNATOR(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 74);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    USER_DEFINED_EARTH_MODEL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 76);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    USER_DEFINED_EPOCH_TIMESTAMP() {
        const offset = this.bb.__offset(this.bb_pos, 78);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    USER_DEFINED_MICROSECONDS() {
        const offset = this.bb.__offset(this.bb_pos, 80);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startVCM(builder) {
        builder.startObject(39);
    }
    static addCcsdsOmmVers(builder, CCSDS_OMM_VERS) {
        builder.addFieldFloat64(0, CCSDS_OMM_VERS, 0.0);
    }
    static addCreationDate(builder, CREATION_DATEOffset) {
        builder.addFieldOffset(1, CREATION_DATEOffset, 0);
    }
    static addOriginator(builder, ORIGINATOROffset) {
        builder.addFieldOffset(2, ORIGINATOROffset, 0);
    }
    static addObjectName(builder, OBJECT_NAMEOffset) {
        builder.addFieldOffset(3, OBJECT_NAMEOffset, 0);
    }
    static addObjectId(builder, OBJECT_IDOffset) {
        builder.addFieldOffset(4, OBJECT_IDOffset, 0);
    }
    static addCenterName(builder, CENTER_NAMEOffset) {
        builder.addFieldOffset(5, CENTER_NAMEOffset, 0);
    }
    static addRefFrame(builder, REF_FRAMEOffset) {
        builder.addFieldOffset(6, REF_FRAMEOffset, 0);
    }
    static addTimeSystem(builder, TIME_SYSTEMOffset) {
        builder.addFieldOffset(7, TIME_SYSTEMOffset, 0);
    }
    static addStateVector(builder, STATE_VECTOROffset) {
        builder.addFieldOffset(8, STATE_VECTOROffset, 0);
    }
    static addKeplerianElements(builder, KEPLERIAN_ELEMENTSOffset) {
        builder.addFieldOffset(9, KEPLERIAN_ELEMENTSOffset, 0);
    }
    static addEquinoctialElements(builder, EQUINOCTIAL_ELEMENTSOffset) {
        builder.addFieldOffset(10, EQUINOCTIAL_ELEMENTSOffset, 0);
    }
    static addGm(builder, GM) {
        builder.addFieldFloat64(11, GM, 0.0);
    }
    static addAtmosphericModelData(builder, ATMOSPHERIC_MODEL_DATAOffset) {
        builder.addFieldOffset(12, ATMOSPHERIC_MODEL_DATAOffset, 0);
    }
    static addPropagatorSettings(builder, PROPAGATOR_SETTINGSOffset) {
        builder.addFieldOffset(13, PROPAGATOR_SETTINGSOffset, 0);
    }
    static addCovarianceMatrix(builder, COVARIANCE_MATRIXOffset) {
        builder.addFieldOffset(14, COVARIANCE_MATRIXOffset, 0);
    }
    static createCovarianceMatrixVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startCovarianceMatrixVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addUvwSigmas(builder, UVW_SIGMASOffset) {
        builder.addFieldOffset(15, UVW_SIGMASOffset, 0);
    }
    static addMass(builder, MASS) {
        builder.addFieldFloat64(16, MASS, 0.0);
    }
    static addSolarRadArea(builder, SOLAR_RAD_AREA) {
        builder.addFieldFloat64(17, SOLAR_RAD_AREA, 0.0);
    }
    static addSolarRadCoeff(builder, SOLAR_RAD_COEFF) {
        builder.addFieldFloat64(18, SOLAR_RAD_COEFF, 0.0);
    }
    static addDragArea(builder, DRAG_AREA) {
        builder.addFieldFloat64(19, DRAG_AREA, 0.0);
    }
    static addDragCoeff(builder, DRAG_COEFF) {
        builder.addFieldFloat64(20, DRAG_COEFF, 0.0);
    }
    static addSrp(builder, SRP) {
        builder.addFieldInt8(21, SRP, perturbationStatus.OFF);
    }
    static addClassificationType(builder, CLASSIFICATION_TYPEOffset) {
        builder.addFieldOffset(22, CLASSIFICATION_TYPEOffset, 0);
    }
    static addNoradCatId(builder, NORAD_CAT_ID) {
        builder.addFieldInt32(23, NORAD_CAT_ID, 0);
    }
    static addElementSetNo(builder, ELEMENT_SET_NO) {
        builder.addFieldInt32(24, ELEMENT_SET_NO, 0);
    }
    static addRevAtEpoch(builder, REV_AT_EPOCH) {
        builder.addFieldFloat64(25, REV_AT_EPOCH, 0.0);
    }
    static addBstar(builder, BSTAR) {
        builder.addFieldFloat64(26, BSTAR, 0.0);
    }
    static addMeanMotionDot(builder, MEAN_MOTION_DOT) {
        builder.addFieldFloat64(27, MEAN_MOTION_DOT, 0.0);
    }
    static addMeanMotionDdot(builder, MEAN_MOTION_DDOT) {
        builder.addFieldFloat64(28, MEAN_MOTION_DDOT, 0.0);
    }
    static addCovReferenceFrame(builder, COV_REFERENCE_FRAMEOffset) {
        builder.addFieldOffset(29, COV_REFERENCE_FRAMEOffset, 0);
    }
    static addCxX(builder, CX_X) {
        builder.addFieldFloat64(30, CX_X, 0.0);
    }
    static addCyX(builder, CY_X) {
        builder.addFieldFloat64(31, CY_X, 0.0);
    }
    static addCzX(builder, CZ_X) {
        builder.addFieldFloat64(32, CZ_X, 0.0);
    }
    static addCxDotX(builder, CX_DOT_X) {
        builder.addFieldFloat64(33, CX_DOT_X, 0.0);
    }
    static addUserDefinedBip0044Type(builder, USER_DEFINED_BIP_0044_TYPE) {
        builder.addFieldInt32(34, USER_DEFINED_BIP_0044_TYPE, 0);
    }
    static addUserDefinedObjectDesignator(builder, USER_DEFINED_OBJECT_DESIGNATOROffset) {
        builder.addFieldOffset(35, USER_DEFINED_OBJECT_DESIGNATOROffset, 0);
    }
    static addUserDefinedEarthModel(builder, USER_DEFINED_EARTH_MODELOffset) {
        builder.addFieldOffset(36, USER_DEFINED_EARTH_MODELOffset, 0);
    }
    static addUserDefinedEpochTimestamp(builder, USER_DEFINED_EPOCH_TIMESTAMP) {
        builder.addFieldFloat64(37, USER_DEFINED_EPOCH_TIMESTAMP, 0.0);
    }
    static addUserDefinedMicroseconds(builder, USER_DEFINED_MICROSECONDS) {
        builder.addFieldFloat64(38, USER_DEFINED_MICROSECONDS, 0.0);
    }
    static endVCM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishVCMBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedVCMBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    unpack() {
        return new VCMT(this.CCSDS_OMM_VERS(), this.CREATION_DATE(), this.ORIGINATOR(), this.OBJECT_NAME(), this.OBJECT_ID(), this.CENTER_NAME(), this.REF_FRAME(), this.TIME_SYSTEM(), (this.STATE_VECTOR() !== null ? this.STATE_VECTOR().unpack() : null), (this.KEPLERIAN_ELEMENTS() !== null ? this.KEPLERIAN_ELEMENTS().unpack() : null), (this.EQUINOCTIAL_ELEMENTS() !== null ? this.EQUINOCTIAL_ELEMENTS().unpack() : null), this.GM(), (this.ATMOSPHERIC_MODEL_DATA() !== null ? this.ATMOSPHERIC_MODEL_DATA().unpack() : null), (this.PROPAGATOR_SETTINGS() !== null ? this.PROPAGATOR_SETTINGS().unpack() : null), this.bb.createObjList(this.COVARIANCE_MATRIX.bind(this), this.covarianceMatrixLength()), (this.UVW_SIGMAS() !== null ? this.UVW_SIGMAS().unpack() : null), this.MASS(), this.SOLAR_RAD_AREA(), this.SOLAR_RAD_COEFF(), this.DRAG_AREA(), this.DRAG_COEFF(), this.SRP(), this.CLASSIFICATION_TYPE(), this.NORAD_CAT_ID(), this.ELEMENT_SET_NO(), this.REV_AT_EPOCH(), this.BSTAR(), this.MEAN_MOTION_DOT(), this.MEAN_MOTION_DDOT(), this.COV_REFERENCE_FRAME(), this.CX_X(), this.CY_X(), this.CZ_X(), this.CX_DOT_X(), this.USER_DEFINED_BIP_0044_TYPE(), this.USER_DEFINED_OBJECT_DESIGNATOR(), this.USER_DEFINED_EARTH_MODEL(), this.USER_DEFINED_EPOCH_TIMESTAMP(), this.USER_DEFINED_MICROSECONDS());
    }
    unpackTo(_o) {
        _o.CCSDS_OMM_VERS = this.CCSDS_OMM_VERS();
        _o.CREATION_DATE = this.CREATION_DATE();
        _o.ORIGINATOR = this.ORIGINATOR();
        _o.OBJECT_NAME = this.OBJECT_NAME();
        _o.OBJECT_ID = this.OBJECT_ID();
        _o.CENTER_NAME = this.CENTER_NAME();
        _o.REF_FRAME = this.REF_FRAME();
        _o.TIME_SYSTEM = this.TIME_SYSTEM();
        _o.STATE_VECTOR = (this.STATE_VECTOR() !== null ? this.STATE_VECTOR().unpack() : null);
        _o.KEPLERIAN_ELEMENTS = (this.KEPLERIAN_ELEMENTS() !== null ? this.KEPLERIAN_ELEMENTS().unpack() : null);
        _o.EQUINOCTIAL_ELEMENTS = (this.EQUINOCTIAL_ELEMENTS() !== null ? this.EQUINOCTIAL_ELEMENTS().unpack() : null);
        _o.GM = this.GM();
        _o.ATMOSPHERIC_MODEL_DATA = (this.ATMOSPHERIC_MODEL_DATA() !== null ? this.ATMOSPHERIC_MODEL_DATA().unpack() : null);
        _o.PROPAGATOR_SETTINGS = (this.PROPAGATOR_SETTINGS() !== null ? this.PROPAGATOR_SETTINGS().unpack() : null);
        _o.COVARIANCE_MATRIX = this.bb.createObjList(this.COVARIANCE_MATRIX.bind(this), this.covarianceMatrixLength());
        _o.UVW_SIGMAS = (this.UVW_SIGMAS() !== null ? this.UVW_SIGMAS().unpack() : null);
        _o.MASS = this.MASS();
        _o.SOLAR_RAD_AREA = this.SOLAR_RAD_AREA();
        _o.SOLAR_RAD_COEFF = this.SOLAR_RAD_COEFF();
        _o.DRAG_AREA = this.DRAG_AREA();
        _o.DRAG_COEFF = this.DRAG_COEFF();
        _o.SRP = this.SRP();
        _o.CLASSIFICATION_TYPE = this.CLASSIFICATION_TYPE();
        _o.NORAD_CAT_ID = this.NORAD_CAT_ID();
        _o.ELEMENT_SET_NO = this.ELEMENT_SET_NO();
        _o.REV_AT_EPOCH = this.REV_AT_EPOCH();
        _o.BSTAR = this.BSTAR();
        _o.MEAN_MOTION_DOT = this.MEAN_MOTION_DOT();
        _o.MEAN_MOTION_DDOT = this.MEAN_MOTION_DDOT();
        _o.COV_REFERENCE_FRAME = this.COV_REFERENCE_FRAME();
        _o.CX_X = this.CX_X();
        _o.CY_X = this.CY_X();
        _o.CZ_X = this.CZ_X();
        _o.CX_DOT_X = this.CX_DOT_X();
        _o.USER_DEFINED_BIP_0044_TYPE = this.USER_DEFINED_BIP_0044_TYPE();
        _o.USER_DEFINED_OBJECT_DESIGNATOR = this.USER_DEFINED_OBJECT_DESIGNATOR();
        _o.USER_DEFINED_EARTH_MODEL = this.USER_DEFINED_EARTH_MODEL();
        _o.USER_DEFINED_EPOCH_TIMESTAMP = this.USER_DEFINED_EPOCH_TIMESTAMP();
        _o.USER_DEFINED_MICROSECONDS = this.USER_DEFINED_MICROSECONDS();
    }
}
export class VCMT {
    constructor(CCSDS_OMM_VERS = 0.0, CREATION_DATE = null, ORIGINATOR = null, OBJECT_NAME = null, OBJECT_ID = null, CENTER_NAME = null, REF_FRAME = null, TIME_SYSTEM = null, STATE_VECTOR = null, KEPLERIAN_ELEMENTS = null, EQUINOCTIAL_ELEMENTS = null, GM = 0.0, ATMOSPHERIC_MODEL_DATA = null, PROPAGATOR_SETTINGS = null, COVARIANCE_MATRIX = [], UVW_SIGMAS = null, MASS = 0.0, SOLAR_RAD_AREA = 0.0, SOLAR_RAD_COEFF = 0.0, DRAG_AREA = 0.0, DRAG_COEFF = 0.0, SRP = perturbationStatus.OFF, CLASSIFICATION_TYPE = null, NORAD_CAT_ID = 0, ELEMENT_SET_NO = 0, REV_AT_EPOCH = 0.0, BSTAR = 0.0, MEAN_MOTION_DOT = 0.0, MEAN_MOTION_DDOT = 0.0, COV_REFERENCE_FRAME = null, CX_X = 0.0, CY_X = 0.0, CZ_X = 0.0, CX_DOT_X = 0.0, USER_DEFINED_BIP_0044_TYPE = 0, USER_DEFINED_OBJECT_DESIGNATOR = null, USER_DEFINED_EARTH_MODEL = null, USER_DEFINED_EPOCH_TIMESTAMP = 0.0, USER_DEFINED_MICROSECONDS = 0.0) {
        this.CCSDS_OMM_VERS = CCSDS_OMM_VERS;
        this.CREATION_DATE = CREATION_DATE;
        this.ORIGINATOR = ORIGINATOR;
        this.OBJECT_NAME = OBJECT_NAME;
        this.OBJECT_ID = OBJECT_ID;
        this.CENTER_NAME = CENTER_NAME;
        this.REF_FRAME = REF_FRAME;
        this.TIME_SYSTEM = TIME_SYSTEM;
        this.STATE_VECTOR = STATE_VECTOR;
        this.KEPLERIAN_ELEMENTS = KEPLERIAN_ELEMENTS;
        this.EQUINOCTIAL_ELEMENTS = EQUINOCTIAL_ELEMENTS;
        this.GM = GM;
        this.ATMOSPHERIC_MODEL_DATA = ATMOSPHERIC_MODEL_DATA;
        this.PROPAGATOR_SETTINGS = PROPAGATOR_SETTINGS;
        this.COVARIANCE_MATRIX = COVARIANCE_MATRIX;
        this.UVW_SIGMAS = UVW_SIGMAS;
        this.MASS = MASS;
        this.SOLAR_RAD_AREA = SOLAR_RAD_AREA;
        this.SOLAR_RAD_COEFF = SOLAR_RAD_COEFF;
        this.DRAG_AREA = DRAG_AREA;
        this.DRAG_COEFF = DRAG_COEFF;
        this.SRP = SRP;
        this.CLASSIFICATION_TYPE = CLASSIFICATION_TYPE;
        this.NORAD_CAT_ID = NORAD_CAT_ID;
        this.ELEMENT_SET_NO = ELEMENT_SET_NO;
        this.REV_AT_EPOCH = REV_AT_EPOCH;
        this.BSTAR = BSTAR;
        this.MEAN_MOTION_DOT = MEAN_MOTION_DOT;
        this.MEAN_MOTION_DDOT = MEAN_MOTION_DDOT;
        this.COV_REFERENCE_FRAME = COV_REFERENCE_FRAME;
        this.CX_X = CX_X;
        this.CY_X = CY_X;
        this.CZ_X = CZ_X;
        this.CX_DOT_X = CX_DOT_X;
        this.USER_DEFINED_BIP_0044_TYPE = USER_DEFINED_BIP_0044_TYPE;
        this.USER_DEFINED_OBJECT_DESIGNATOR = USER_DEFINED_OBJECT_DESIGNATOR;
        this.USER_DEFINED_EARTH_MODEL = USER_DEFINED_EARTH_MODEL;
        this.USER_DEFINED_EPOCH_TIMESTAMP = USER_DEFINED_EPOCH_TIMESTAMP;
        this.USER_DEFINED_MICROSECONDS = USER_DEFINED_MICROSECONDS;
    }
    pack(builder) {
        const CREATION_DATE = (this.CREATION_DATE !== null ? builder.createString(this.CREATION_DATE) : 0);
        const ORIGINATOR = (this.ORIGINATOR !== null ? builder.createString(this.ORIGINATOR) : 0);
        const OBJECT_NAME = (this.OBJECT_NAME !== null ? builder.createString(this.OBJECT_NAME) : 0);
        const OBJECT_ID = (this.OBJECT_ID !== null ? builder.createString(this.OBJECT_ID) : 0);
        const CENTER_NAME = (this.CENTER_NAME !== null ? builder.createString(this.CENTER_NAME) : 0);
        const REF_FRAME = (this.REF_FRAME !== null ? builder.createString(this.REF_FRAME) : 0);
        const TIME_SYSTEM = (this.TIME_SYSTEM !== null ? builder.createString(this.TIME_SYSTEM) : 0);
        const STATE_VECTOR = (this.STATE_VECTOR !== null ? this.STATE_VECTOR.pack(builder) : 0);
        const KEPLERIAN_ELEMENTS = (this.KEPLERIAN_ELEMENTS !== null ? this.KEPLERIAN_ELEMENTS.pack(builder) : 0);
        const EQUINOCTIAL_ELEMENTS = (this.EQUINOCTIAL_ELEMENTS !== null ? this.EQUINOCTIAL_ELEMENTS.pack(builder) : 0);
        const ATMOSPHERIC_MODEL_DATA = (this.ATMOSPHERIC_MODEL_DATA !== null ? this.ATMOSPHERIC_MODEL_DATA.pack(builder) : 0);
        const PROPAGATOR_SETTINGS = (this.PROPAGATOR_SETTINGS !== null ? this.PROPAGATOR_SETTINGS.pack(builder) : 0);
        const COVARIANCE_MATRIX = VCM.createCovarianceMatrixVector(builder, builder.createObjectOffsetList(this.COVARIANCE_MATRIX));
        const UVW_SIGMAS = (this.UVW_SIGMAS !== null ? this.UVW_SIGMAS.pack(builder) : 0);
        const CLASSIFICATION_TYPE = (this.CLASSIFICATION_TYPE !== null ? builder.createString(this.CLASSIFICATION_TYPE) : 0);
        const COV_REFERENCE_FRAME = (this.COV_REFERENCE_FRAME !== null ? builder.createString(this.COV_REFERENCE_FRAME) : 0);
        const USER_DEFINED_OBJECT_DESIGNATOR = (this.USER_DEFINED_OBJECT_DESIGNATOR !== null ? builder.createString(this.USER_DEFINED_OBJECT_DESIGNATOR) : 0);
        const USER_DEFINED_EARTH_MODEL = (this.USER_DEFINED_EARTH_MODEL !== null ? builder.createString(this.USER_DEFINED_EARTH_MODEL) : 0);
        VCM.startVCM(builder);
        VCM.addCcsdsOmmVers(builder, this.CCSDS_OMM_VERS);
        VCM.addCreationDate(builder, CREATION_DATE);
        VCM.addOriginator(builder, ORIGINATOR);
        VCM.addObjectName(builder, OBJECT_NAME);
        VCM.addObjectId(builder, OBJECT_ID);
        VCM.addCenterName(builder, CENTER_NAME);
        VCM.addRefFrame(builder, REF_FRAME);
        VCM.addTimeSystem(builder, TIME_SYSTEM);
        VCM.addStateVector(builder, STATE_VECTOR);
        VCM.addKeplerianElements(builder, KEPLERIAN_ELEMENTS);
        VCM.addEquinoctialElements(builder, EQUINOCTIAL_ELEMENTS);
        VCM.addGm(builder, this.GM);
        VCM.addAtmosphericModelData(builder, ATMOSPHERIC_MODEL_DATA);
        VCM.addPropagatorSettings(builder, PROPAGATOR_SETTINGS);
        VCM.addCovarianceMatrix(builder, COVARIANCE_MATRIX);
        VCM.addUvwSigmas(builder, UVW_SIGMAS);
        VCM.addMass(builder, this.MASS);
        VCM.addSolarRadArea(builder, this.SOLAR_RAD_AREA);
        VCM.addSolarRadCoeff(builder, this.SOLAR_RAD_COEFF);
        VCM.addDragArea(builder, this.DRAG_AREA);
        VCM.addDragCoeff(builder, this.DRAG_COEFF);
        VCM.addSrp(builder, this.SRP);
        VCM.addClassificationType(builder, CLASSIFICATION_TYPE);
        VCM.addNoradCatId(builder, this.NORAD_CAT_ID);
        VCM.addElementSetNo(builder, this.ELEMENT_SET_NO);
        VCM.addRevAtEpoch(builder, this.REV_AT_EPOCH);
        VCM.addBstar(builder, this.BSTAR);
        VCM.addMeanMotionDot(builder, this.MEAN_MOTION_DOT);
        VCM.addMeanMotionDdot(builder, this.MEAN_MOTION_DDOT);
        VCM.addCovReferenceFrame(builder, COV_REFERENCE_FRAME);
        VCM.addCxX(builder, this.CX_X);
        VCM.addCyX(builder, this.CY_X);
        VCM.addCzX(builder, this.CZ_X);
        VCM.addCxDotX(builder, this.CX_DOT_X);
        VCM.addUserDefinedBip0044Type(builder, this.USER_DEFINED_BIP_0044_TYPE);
        VCM.addUserDefinedObjectDesignator(builder, USER_DEFINED_OBJECT_DESIGNATOR);
        VCM.addUserDefinedEarthModel(builder, USER_DEFINED_EARTH_MODEL);
        VCM.addUserDefinedEpochTimestamp(builder, this.USER_DEFINED_EPOCH_TIMESTAMP);
        VCM.addUserDefinedMicroseconds(builder, this.USER_DEFINED_MICROSECONDS);
        return VCM.endVCM(builder);
    }
}
