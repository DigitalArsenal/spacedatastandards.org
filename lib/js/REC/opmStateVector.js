// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * OPM State Vector (position and velocity)
 */
export class opmStateVector {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsopmStateVector(bb, obj) {
        return (obj || new opmStateVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsopmStateVector(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new opmStateVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    EPOCH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    X() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    Y() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    Z() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    X_DOT() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    Y_DOT() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    Z_DOT() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startopmStateVector(builder) {
        builder.startObject(7);
    }
    static addEpoch(builder, EPOCHOffset) {
        builder.addFieldOffset(0, EPOCHOffset, 0);
    }
    static addX(builder, X) {
        builder.addFieldFloat64(1, X, 0.0);
    }
    static addY(builder, Y) {
        builder.addFieldFloat64(2, Y, 0.0);
    }
    static addZ(builder, Z) {
        builder.addFieldFloat64(3, Z, 0.0);
    }
    static addXDot(builder, X_DOT) {
        builder.addFieldFloat64(4, X_DOT, 0.0);
    }
    static addYDot(builder, Y_DOT) {
        builder.addFieldFloat64(5, Y_DOT, 0.0);
    }
    static addZDot(builder, Z_DOT) {
        builder.addFieldFloat64(6, Z_DOT, 0.0);
    }
    static endopmStateVector(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createopmStateVector(builder, EPOCHOffset, X, Y, Z, X_DOT, Y_DOT, Z_DOT) {
        opmStateVector.startopmStateVector(builder);
        opmStateVector.addEpoch(builder, EPOCHOffset);
        opmStateVector.addX(builder, X);
        opmStateVector.addY(builder, Y);
        opmStateVector.addZ(builder, Z);
        opmStateVector.addXDot(builder, X_DOT);
        opmStateVector.addYDot(builder, Y_DOT);
        opmStateVector.addZDot(builder, Z_DOT);
        return opmStateVector.endopmStateVector(builder);
    }
    unpack() {
        return new opmStateVectorT(this.EPOCH(), this.X(), this.Y(), this.Z(), this.X_DOT(), this.Y_DOT(), this.Z_DOT());
    }
    unpackTo(_o) {
        _o.EPOCH = this.EPOCH();
        _o.X = this.X();
        _o.Y = this.Y();
        _o.Z = this.Z();
        _o.X_DOT = this.X_DOT();
        _o.Y_DOT = this.Y_DOT();
        _o.Z_DOT = this.Z_DOT();
    }
}
export class opmStateVectorT {
    constructor(EPOCH = null, X = 0.0, Y = 0.0, Z = 0.0, X_DOT = 0.0, Y_DOT = 0.0, Z_DOT = 0.0) {
        this.EPOCH = EPOCH;
        this.X = X;
        this.Y = Y;
        this.Z = Z;
        this.X_DOT = X_DOT;
        this.Y_DOT = Y_DOT;
        this.Z_DOT = Z_DOT;
    }
    pack(builder) {
        const EPOCH = (this.EPOCH !== null ? builder.createString(this.EPOCH) : 0);
        return opmStateVector.createopmStateVector(builder, EPOCH, this.X, this.Y, this.Z, this.X_DOT, this.Y_DOT, this.Z_DOT);
    }
}
