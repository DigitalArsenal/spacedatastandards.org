// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class Metadata {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMetadata(bb, obj) {
        return (obj || new Metadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMetadata(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Metadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    COMMENT(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    commentLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    OBJECT_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    INTERNATIONAL_DESIGNATOR(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CATALOG_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OBJECT_DESIGNATOR(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ALTERNATE_NAMES(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    alternateNamesLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    ORIGINATOR_POC(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ORIGINATOR_POSITION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ORIGINATOR_PHONE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ORIGINATOR_EMAIL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ORIGINATOR_ADDRESS(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TECH_ORG(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TECH_POC(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TECH_POSITION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TECH_PHONE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TECH_EMAIL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TECH_ADDRESS(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    PREVIOUS_MESSAGE_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    NEXT_MESSAGE_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ADM_MSG_LINK(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CDM_MSG_LINK(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    PRM_MSG_LINK(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    RDM_MSG_LINK(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TDM_MSG_LINK(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    tdmMsgLinkLength() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    OPERATOR(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OWNER(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    COUNTRY(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CONSTELLATION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OBJECT_TYPE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TIME_SYSTEM(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 62);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    EPOCH_TZERO(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OPS_STATUS(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 66);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ORBIT_CATEGORY(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 68);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OCM_DATA_ELEMENTS(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    ocmDataElementsLength() {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Number of spacecraft clock counts at EPOCH_TZERO (used if TIME_SYSTEM is SCLK).
     */
    SCLK_OFFSET_AT_EPOCH() {
        const offset = this.bb.__offset(this.bb_pos, 72);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Number of clock seconds occurring during one SI second (used if TIME_SYSTEM is SCLK).
     */
    SCLK_SEC_PER_SI_SEC() {
        const offset = this.bb.__offset(this.bb_pos, 74);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    PREVIOUS_MESSAGE_EPOCH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 76);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    NEXT_MESSAGE_EPOCH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 78);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    START_TIME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 80);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    STOP_TIME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 82);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Span of time that the OCM covers, measured in days.
     */
    TIME_SPAN() {
        const offset = this.bb.__offset(this.bb_pos, 84);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Difference (TAI - UTC) in seconds at EPOCH_TZERO.
     */
    TAIMUTC_AT_TZERO() {
        const offset = this.bb.__offset(this.bb_pos, 86);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    NEXT_LEAP_EPOCH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 88);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Difference (TAI - UTC) in seconds at NEXT_LEAP_EPOCH.
     */
    NEXT_LEAP_TAIMUTC() {
        const offset = this.bb.__offset(this.bb_pos, 90);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Difference (UT1 - UTC) in seconds at EPOCH_TZERO.
     */
    UT1MUTC_AT_TZERO() {
        const offset = this.bb.__offset(this.bb_pos, 92);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    EOP_SOURCE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 94);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    INTERP_METHOD_EOP(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 96);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CELESTIAL_SOURCE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 98);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startMetadata(builder) {
        builder.startObject(48);
    }
    static addComment(builder, COMMENTOffset) {
        builder.addFieldOffset(0, COMMENTOffset, 0);
    }
    static createCommentVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startCommentVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addObjectName(builder, OBJECT_NAMEOffset) {
        builder.addFieldOffset(1, OBJECT_NAMEOffset, 0);
    }
    static addInternationalDesignator(builder, INTERNATIONAL_DESIGNATOROffset) {
        builder.addFieldOffset(2, INTERNATIONAL_DESIGNATOROffset, 0);
    }
    static addCatalogName(builder, CATALOG_NAMEOffset) {
        builder.addFieldOffset(3, CATALOG_NAMEOffset, 0);
    }
    static addObjectDesignator(builder, OBJECT_DESIGNATOROffset) {
        builder.addFieldOffset(4, OBJECT_DESIGNATOROffset, 0);
    }
    static addAlternateNames(builder, ALTERNATE_NAMESOffset) {
        builder.addFieldOffset(5, ALTERNATE_NAMESOffset, 0);
    }
    static createAlternateNamesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startAlternateNamesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addOriginatorPoc(builder, ORIGINATOR_POCOffset) {
        builder.addFieldOffset(6, ORIGINATOR_POCOffset, 0);
    }
    static addOriginatorPosition(builder, ORIGINATOR_POSITIONOffset) {
        builder.addFieldOffset(7, ORIGINATOR_POSITIONOffset, 0);
    }
    static addOriginatorPhone(builder, ORIGINATOR_PHONEOffset) {
        builder.addFieldOffset(8, ORIGINATOR_PHONEOffset, 0);
    }
    static addOriginatorEmail(builder, ORIGINATOR_EMAILOffset) {
        builder.addFieldOffset(9, ORIGINATOR_EMAILOffset, 0);
    }
    static addOriginatorAddress(builder, ORIGINATOR_ADDRESSOffset) {
        builder.addFieldOffset(10, ORIGINATOR_ADDRESSOffset, 0);
    }
    static addTechOrg(builder, TECH_ORGOffset) {
        builder.addFieldOffset(11, TECH_ORGOffset, 0);
    }
    static addTechPoc(builder, TECH_POCOffset) {
        builder.addFieldOffset(12, TECH_POCOffset, 0);
    }
    static addTechPosition(builder, TECH_POSITIONOffset) {
        builder.addFieldOffset(13, TECH_POSITIONOffset, 0);
    }
    static addTechPhone(builder, TECH_PHONEOffset) {
        builder.addFieldOffset(14, TECH_PHONEOffset, 0);
    }
    static addTechEmail(builder, TECH_EMAILOffset) {
        builder.addFieldOffset(15, TECH_EMAILOffset, 0);
    }
    static addTechAddress(builder, TECH_ADDRESSOffset) {
        builder.addFieldOffset(16, TECH_ADDRESSOffset, 0);
    }
    static addPreviousMessageId(builder, PREVIOUS_MESSAGE_IDOffset) {
        builder.addFieldOffset(17, PREVIOUS_MESSAGE_IDOffset, 0);
    }
    static addNextMessageId(builder, NEXT_MESSAGE_IDOffset) {
        builder.addFieldOffset(18, NEXT_MESSAGE_IDOffset, 0);
    }
    static addAdmMsgLink(builder, ADM_MSG_LINKOffset) {
        builder.addFieldOffset(19, ADM_MSG_LINKOffset, 0);
    }
    static addCdmMsgLink(builder, CDM_MSG_LINKOffset) {
        builder.addFieldOffset(20, CDM_MSG_LINKOffset, 0);
    }
    static addPrmMsgLink(builder, PRM_MSG_LINKOffset) {
        builder.addFieldOffset(21, PRM_MSG_LINKOffset, 0);
    }
    static addRdmMsgLink(builder, RDM_MSG_LINKOffset) {
        builder.addFieldOffset(22, RDM_MSG_LINKOffset, 0);
    }
    static addTdmMsgLink(builder, TDM_MSG_LINKOffset) {
        builder.addFieldOffset(23, TDM_MSG_LINKOffset, 0);
    }
    static createTdmMsgLinkVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startTdmMsgLinkVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addOperator(builder, OPERATOROffset) {
        builder.addFieldOffset(24, OPERATOROffset, 0);
    }
    static addOwner(builder, OWNEROffset) {
        builder.addFieldOffset(25, OWNEROffset, 0);
    }
    static addCountry(builder, COUNTRYOffset) {
        builder.addFieldOffset(26, COUNTRYOffset, 0);
    }
    static addConstellation(builder, CONSTELLATIONOffset) {
        builder.addFieldOffset(27, CONSTELLATIONOffset, 0);
    }
    static addObjectType(builder, OBJECT_TYPEOffset) {
        builder.addFieldOffset(28, OBJECT_TYPEOffset, 0);
    }
    static addTimeSystem(builder, TIME_SYSTEMOffset) {
        builder.addFieldOffset(29, TIME_SYSTEMOffset, 0);
    }
    static addEpochTzero(builder, EPOCH_TZEROOffset) {
        builder.addFieldOffset(30, EPOCH_TZEROOffset, 0);
    }
    static addOpsStatus(builder, OPS_STATUSOffset) {
        builder.addFieldOffset(31, OPS_STATUSOffset, 0);
    }
    static addOrbitCategory(builder, ORBIT_CATEGORYOffset) {
        builder.addFieldOffset(32, ORBIT_CATEGORYOffset, 0);
    }
    static addOcmDataElements(builder, OCM_DATA_ELEMENTSOffset) {
        builder.addFieldOffset(33, OCM_DATA_ELEMENTSOffset, 0);
    }
    static createOcmDataElementsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startOcmDataElementsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addSclkOffsetAtEpoch(builder, SCLK_OFFSET_AT_EPOCH) {
        builder.addFieldFloat64(34, SCLK_OFFSET_AT_EPOCH, 0.0);
    }
    static addSclkSecPerSiSec(builder, SCLK_SEC_PER_SI_SEC) {
        builder.addFieldFloat64(35, SCLK_SEC_PER_SI_SEC, 0.0);
    }
    static addPreviousMessageEpoch(builder, PREVIOUS_MESSAGE_EPOCHOffset) {
        builder.addFieldOffset(36, PREVIOUS_MESSAGE_EPOCHOffset, 0);
    }
    static addNextMessageEpoch(builder, NEXT_MESSAGE_EPOCHOffset) {
        builder.addFieldOffset(37, NEXT_MESSAGE_EPOCHOffset, 0);
    }
    static addStartTime(builder, START_TIMEOffset) {
        builder.addFieldOffset(38, START_TIMEOffset, 0);
    }
    static addStopTime(builder, STOP_TIMEOffset) {
        builder.addFieldOffset(39, STOP_TIMEOffset, 0);
    }
    static addTimeSpan(builder, TIME_SPAN) {
        builder.addFieldFloat64(40, TIME_SPAN, 0.0);
    }
    static addTaimutcAtTzero(builder, TAIMUTC_AT_TZERO) {
        builder.addFieldFloat64(41, TAIMUTC_AT_TZERO, 0.0);
    }
    static addNextLeapEpoch(builder, NEXT_LEAP_EPOCHOffset) {
        builder.addFieldOffset(42, NEXT_LEAP_EPOCHOffset, 0);
    }
    static addNextLeapTaimutc(builder, NEXT_LEAP_TAIMUTC) {
        builder.addFieldFloat64(43, NEXT_LEAP_TAIMUTC, 0.0);
    }
    static addUt1MutcAtTzero(builder, UT1MUTC_AT_TZERO) {
        builder.addFieldFloat64(44, UT1MUTC_AT_TZERO, 0.0);
    }
    static addEopSource(builder, EOP_SOURCEOffset) {
        builder.addFieldOffset(45, EOP_SOURCEOffset, 0);
    }
    static addInterpMethodEop(builder, INTERP_METHOD_EOPOffset) {
        builder.addFieldOffset(46, INTERP_METHOD_EOPOffset, 0);
    }
    static addCelestialSource(builder, CELESTIAL_SOURCEOffset) {
        builder.addFieldOffset(47, CELESTIAL_SOURCEOffset, 0);
    }
    static endMetadata(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createMetadata(builder, COMMENTOffset, OBJECT_NAMEOffset, INTERNATIONAL_DESIGNATOROffset, CATALOG_NAMEOffset, OBJECT_DESIGNATOROffset, ALTERNATE_NAMESOffset, ORIGINATOR_POCOffset, ORIGINATOR_POSITIONOffset, ORIGINATOR_PHONEOffset, ORIGINATOR_EMAILOffset, ORIGINATOR_ADDRESSOffset, TECH_ORGOffset, TECH_POCOffset, TECH_POSITIONOffset, TECH_PHONEOffset, TECH_EMAILOffset, TECH_ADDRESSOffset, PREVIOUS_MESSAGE_IDOffset, NEXT_MESSAGE_IDOffset, ADM_MSG_LINKOffset, CDM_MSG_LINKOffset, PRM_MSG_LINKOffset, RDM_MSG_LINKOffset, TDM_MSG_LINKOffset, OPERATOROffset, OWNEROffset, COUNTRYOffset, CONSTELLATIONOffset, OBJECT_TYPEOffset, TIME_SYSTEMOffset, EPOCH_TZEROOffset, OPS_STATUSOffset, ORBIT_CATEGORYOffset, OCM_DATA_ELEMENTSOffset, SCLK_OFFSET_AT_EPOCH, SCLK_SEC_PER_SI_SEC, PREVIOUS_MESSAGE_EPOCHOffset, NEXT_MESSAGE_EPOCHOffset, START_TIMEOffset, STOP_TIMEOffset, TIME_SPAN, TAIMUTC_AT_TZERO, NEXT_LEAP_EPOCHOffset, NEXT_LEAP_TAIMUTC, UT1MUTC_AT_TZERO, EOP_SOURCEOffset, INTERP_METHOD_EOPOffset, CELESTIAL_SOURCEOffset) {
        Metadata.startMetadata(builder);
        Metadata.addComment(builder, COMMENTOffset);
        Metadata.addObjectName(builder, OBJECT_NAMEOffset);
        Metadata.addInternationalDesignator(builder, INTERNATIONAL_DESIGNATOROffset);
        Metadata.addCatalogName(builder, CATALOG_NAMEOffset);
        Metadata.addObjectDesignator(builder, OBJECT_DESIGNATOROffset);
        Metadata.addAlternateNames(builder, ALTERNATE_NAMESOffset);
        Metadata.addOriginatorPoc(builder, ORIGINATOR_POCOffset);
        Metadata.addOriginatorPosition(builder, ORIGINATOR_POSITIONOffset);
        Metadata.addOriginatorPhone(builder, ORIGINATOR_PHONEOffset);
        Metadata.addOriginatorEmail(builder, ORIGINATOR_EMAILOffset);
        Metadata.addOriginatorAddress(builder, ORIGINATOR_ADDRESSOffset);
        Metadata.addTechOrg(builder, TECH_ORGOffset);
        Metadata.addTechPoc(builder, TECH_POCOffset);
        Metadata.addTechPosition(builder, TECH_POSITIONOffset);
        Metadata.addTechPhone(builder, TECH_PHONEOffset);
        Metadata.addTechEmail(builder, TECH_EMAILOffset);
        Metadata.addTechAddress(builder, TECH_ADDRESSOffset);
        Metadata.addPreviousMessageId(builder, PREVIOUS_MESSAGE_IDOffset);
        Metadata.addNextMessageId(builder, NEXT_MESSAGE_IDOffset);
        Metadata.addAdmMsgLink(builder, ADM_MSG_LINKOffset);
        Metadata.addCdmMsgLink(builder, CDM_MSG_LINKOffset);
        Metadata.addPrmMsgLink(builder, PRM_MSG_LINKOffset);
        Metadata.addRdmMsgLink(builder, RDM_MSG_LINKOffset);
        Metadata.addTdmMsgLink(builder, TDM_MSG_LINKOffset);
        Metadata.addOperator(builder, OPERATOROffset);
        Metadata.addOwner(builder, OWNEROffset);
        Metadata.addCountry(builder, COUNTRYOffset);
        Metadata.addConstellation(builder, CONSTELLATIONOffset);
        Metadata.addObjectType(builder, OBJECT_TYPEOffset);
        Metadata.addTimeSystem(builder, TIME_SYSTEMOffset);
        Metadata.addEpochTzero(builder, EPOCH_TZEROOffset);
        Metadata.addOpsStatus(builder, OPS_STATUSOffset);
        Metadata.addOrbitCategory(builder, ORBIT_CATEGORYOffset);
        Metadata.addOcmDataElements(builder, OCM_DATA_ELEMENTSOffset);
        Metadata.addSclkOffsetAtEpoch(builder, SCLK_OFFSET_AT_EPOCH);
        Metadata.addSclkSecPerSiSec(builder, SCLK_SEC_PER_SI_SEC);
        Metadata.addPreviousMessageEpoch(builder, PREVIOUS_MESSAGE_EPOCHOffset);
        Metadata.addNextMessageEpoch(builder, NEXT_MESSAGE_EPOCHOffset);
        Metadata.addStartTime(builder, START_TIMEOffset);
        Metadata.addStopTime(builder, STOP_TIMEOffset);
        Metadata.addTimeSpan(builder, TIME_SPAN);
        Metadata.addTaimutcAtTzero(builder, TAIMUTC_AT_TZERO);
        Metadata.addNextLeapEpoch(builder, NEXT_LEAP_EPOCHOffset);
        Metadata.addNextLeapTaimutc(builder, NEXT_LEAP_TAIMUTC);
        Metadata.addUt1MutcAtTzero(builder, UT1MUTC_AT_TZERO);
        Metadata.addEopSource(builder, EOP_SOURCEOffset);
        Metadata.addInterpMethodEop(builder, INTERP_METHOD_EOPOffset);
        Metadata.addCelestialSource(builder, CELESTIAL_SOURCEOffset);
        return Metadata.endMetadata(builder);
    }
    unpack() {
        return new MetadataT(this.bb.createScalarList(this.COMMENT.bind(this), this.commentLength()), this.OBJECT_NAME(), this.INTERNATIONAL_DESIGNATOR(), this.CATALOG_NAME(), this.OBJECT_DESIGNATOR(), this.bb.createScalarList(this.ALTERNATE_NAMES.bind(this), this.alternateNamesLength()), this.ORIGINATOR_POC(), this.ORIGINATOR_POSITION(), this.ORIGINATOR_PHONE(), this.ORIGINATOR_EMAIL(), this.ORIGINATOR_ADDRESS(), this.TECH_ORG(), this.TECH_POC(), this.TECH_POSITION(), this.TECH_PHONE(), this.TECH_EMAIL(), this.TECH_ADDRESS(), this.PREVIOUS_MESSAGE_ID(), this.NEXT_MESSAGE_ID(), this.ADM_MSG_LINK(), this.CDM_MSG_LINK(), this.PRM_MSG_LINK(), this.RDM_MSG_LINK(), this.bb.createScalarList(this.TDM_MSG_LINK.bind(this), this.tdmMsgLinkLength()), this.OPERATOR(), this.OWNER(), this.COUNTRY(), this.CONSTELLATION(), this.OBJECT_TYPE(), this.TIME_SYSTEM(), this.EPOCH_TZERO(), this.OPS_STATUS(), this.ORBIT_CATEGORY(), this.bb.createScalarList(this.OCM_DATA_ELEMENTS.bind(this), this.ocmDataElementsLength()), this.SCLK_OFFSET_AT_EPOCH(), this.SCLK_SEC_PER_SI_SEC(), this.PREVIOUS_MESSAGE_EPOCH(), this.NEXT_MESSAGE_EPOCH(), this.START_TIME(), this.STOP_TIME(), this.TIME_SPAN(), this.TAIMUTC_AT_TZERO(), this.NEXT_LEAP_EPOCH(), this.NEXT_LEAP_TAIMUTC(), this.UT1MUTC_AT_TZERO(), this.EOP_SOURCE(), this.INTERP_METHOD_EOP(), this.CELESTIAL_SOURCE());
    }
    unpackTo(_o) {
        _o.COMMENT = this.bb.createScalarList(this.COMMENT.bind(this), this.commentLength());
        _o.OBJECT_NAME = this.OBJECT_NAME();
        _o.INTERNATIONAL_DESIGNATOR = this.INTERNATIONAL_DESIGNATOR();
        _o.CATALOG_NAME = this.CATALOG_NAME();
        _o.OBJECT_DESIGNATOR = this.OBJECT_DESIGNATOR();
        _o.ALTERNATE_NAMES = this.bb.createScalarList(this.ALTERNATE_NAMES.bind(this), this.alternateNamesLength());
        _o.ORIGINATOR_POC = this.ORIGINATOR_POC();
        _o.ORIGINATOR_POSITION = this.ORIGINATOR_POSITION();
        _o.ORIGINATOR_PHONE = this.ORIGINATOR_PHONE();
        _o.ORIGINATOR_EMAIL = this.ORIGINATOR_EMAIL();
        _o.ORIGINATOR_ADDRESS = this.ORIGINATOR_ADDRESS();
        _o.TECH_ORG = this.TECH_ORG();
        _o.TECH_POC = this.TECH_POC();
        _o.TECH_POSITION = this.TECH_POSITION();
        _o.TECH_PHONE = this.TECH_PHONE();
        _o.TECH_EMAIL = this.TECH_EMAIL();
        _o.TECH_ADDRESS = this.TECH_ADDRESS();
        _o.PREVIOUS_MESSAGE_ID = this.PREVIOUS_MESSAGE_ID();
        _o.NEXT_MESSAGE_ID = this.NEXT_MESSAGE_ID();
        _o.ADM_MSG_LINK = this.ADM_MSG_LINK();
        _o.CDM_MSG_LINK = this.CDM_MSG_LINK();
        _o.PRM_MSG_LINK = this.PRM_MSG_LINK();
        _o.RDM_MSG_LINK = this.RDM_MSG_LINK();
        _o.TDM_MSG_LINK = this.bb.createScalarList(this.TDM_MSG_LINK.bind(this), this.tdmMsgLinkLength());
        _o.OPERATOR = this.OPERATOR();
        _o.OWNER = this.OWNER();
        _o.COUNTRY = this.COUNTRY();
        _o.CONSTELLATION = this.CONSTELLATION();
        _o.OBJECT_TYPE = this.OBJECT_TYPE();
        _o.TIME_SYSTEM = this.TIME_SYSTEM();
        _o.EPOCH_TZERO = this.EPOCH_TZERO();
        _o.OPS_STATUS = this.OPS_STATUS();
        _o.ORBIT_CATEGORY = this.ORBIT_CATEGORY();
        _o.OCM_DATA_ELEMENTS = this.bb.createScalarList(this.OCM_DATA_ELEMENTS.bind(this), this.ocmDataElementsLength());
        _o.SCLK_OFFSET_AT_EPOCH = this.SCLK_OFFSET_AT_EPOCH();
        _o.SCLK_SEC_PER_SI_SEC = this.SCLK_SEC_PER_SI_SEC();
        _o.PREVIOUS_MESSAGE_EPOCH = this.PREVIOUS_MESSAGE_EPOCH();
        _o.NEXT_MESSAGE_EPOCH = this.NEXT_MESSAGE_EPOCH();
        _o.START_TIME = this.START_TIME();
        _o.STOP_TIME = this.STOP_TIME();
        _o.TIME_SPAN = this.TIME_SPAN();
        _o.TAIMUTC_AT_TZERO = this.TAIMUTC_AT_TZERO();
        _o.NEXT_LEAP_EPOCH = this.NEXT_LEAP_EPOCH();
        _o.NEXT_LEAP_TAIMUTC = this.NEXT_LEAP_TAIMUTC();
        _o.UT1MUTC_AT_TZERO = this.UT1MUTC_AT_TZERO();
        _o.EOP_SOURCE = this.EOP_SOURCE();
        _o.INTERP_METHOD_EOP = this.INTERP_METHOD_EOP();
        _o.CELESTIAL_SOURCE = this.CELESTIAL_SOURCE();
    }
}
export class MetadataT {
    constructor(COMMENT = [], OBJECT_NAME = null, INTERNATIONAL_DESIGNATOR = null, CATALOG_NAME = null, OBJECT_DESIGNATOR = null, ALTERNATE_NAMES = [], ORIGINATOR_POC = null, ORIGINATOR_POSITION = null, ORIGINATOR_PHONE = null, ORIGINATOR_EMAIL = null, ORIGINATOR_ADDRESS = null, TECH_ORG = null, TECH_POC = null, TECH_POSITION = null, TECH_PHONE = null, TECH_EMAIL = null, TECH_ADDRESS = null, PREVIOUS_MESSAGE_ID = null, NEXT_MESSAGE_ID = null, ADM_MSG_LINK = null, CDM_MSG_LINK = null, PRM_MSG_LINK = null, RDM_MSG_LINK = null, TDM_MSG_LINK = [], OPERATOR = null, OWNER = null, COUNTRY = null, CONSTELLATION = null, OBJECT_TYPE = null, TIME_SYSTEM = null, EPOCH_TZERO = null, OPS_STATUS = null, ORBIT_CATEGORY = null, OCM_DATA_ELEMENTS = [], SCLK_OFFSET_AT_EPOCH = 0.0, SCLK_SEC_PER_SI_SEC = 0.0, PREVIOUS_MESSAGE_EPOCH = null, NEXT_MESSAGE_EPOCH = null, START_TIME = null, STOP_TIME = null, TIME_SPAN = 0.0, TAIMUTC_AT_TZERO = 0.0, NEXT_LEAP_EPOCH = null, NEXT_LEAP_TAIMUTC = 0.0, UT1MUTC_AT_TZERO = 0.0, EOP_SOURCE = null, INTERP_METHOD_EOP = null, CELESTIAL_SOURCE = null) {
        this.COMMENT = COMMENT;
        this.OBJECT_NAME = OBJECT_NAME;
        this.INTERNATIONAL_DESIGNATOR = INTERNATIONAL_DESIGNATOR;
        this.CATALOG_NAME = CATALOG_NAME;
        this.OBJECT_DESIGNATOR = OBJECT_DESIGNATOR;
        this.ALTERNATE_NAMES = ALTERNATE_NAMES;
        this.ORIGINATOR_POC = ORIGINATOR_POC;
        this.ORIGINATOR_POSITION = ORIGINATOR_POSITION;
        this.ORIGINATOR_PHONE = ORIGINATOR_PHONE;
        this.ORIGINATOR_EMAIL = ORIGINATOR_EMAIL;
        this.ORIGINATOR_ADDRESS = ORIGINATOR_ADDRESS;
        this.TECH_ORG = TECH_ORG;
        this.TECH_POC = TECH_POC;
        this.TECH_POSITION = TECH_POSITION;
        this.TECH_PHONE = TECH_PHONE;
        this.TECH_EMAIL = TECH_EMAIL;
        this.TECH_ADDRESS = TECH_ADDRESS;
        this.PREVIOUS_MESSAGE_ID = PREVIOUS_MESSAGE_ID;
        this.NEXT_MESSAGE_ID = NEXT_MESSAGE_ID;
        this.ADM_MSG_LINK = ADM_MSG_LINK;
        this.CDM_MSG_LINK = CDM_MSG_LINK;
        this.PRM_MSG_LINK = PRM_MSG_LINK;
        this.RDM_MSG_LINK = RDM_MSG_LINK;
        this.TDM_MSG_LINK = TDM_MSG_LINK;
        this.OPERATOR = OPERATOR;
        this.OWNER = OWNER;
        this.COUNTRY = COUNTRY;
        this.CONSTELLATION = CONSTELLATION;
        this.OBJECT_TYPE = OBJECT_TYPE;
        this.TIME_SYSTEM = TIME_SYSTEM;
        this.EPOCH_TZERO = EPOCH_TZERO;
        this.OPS_STATUS = OPS_STATUS;
        this.ORBIT_CATEGORY = ORBIT_CATEGORY;
        this.OCM_DATA_ELEMENTS = OCM_DATA_ELEMENTS;
        this.SCLK_OFFSET_AT_EPOCH = SCLK_OFFSET_AT_EPOCH;
        this.SCLK_SEC_PER_SI_SEC = SCLK_SEC_PER_SI_SEC;
        this.PREVIOUS_MESSAGE_EPOCH = PREVIOUS_MESSAGE_EPOCH;
        this.NEXT_MESSAGE_EPOCH = NEXT_MESSAGE_EPOCH;
        this.START_TIME = START_TIME;
        this.STOP_TIME = STOP_TIME;
        this.TIME_SPAN = TIME_SPAN;
        this.TAIMUTC_AT_TZERO = TAIMUTC_AT_TZERO;
        this.NEXT_LEAP_EPOCH = NEXT_LEAP_EPOCH;
        this.NEXT_LEAP_TAIMUTC = NEXT_LEAP_TAIMUTC;
        this.UT1MUTC_AT_TZERO = UT1MUTC_AT_TZERO;
        this.EOP_SOURCE = EOP_SOURCE;
        this.INTERP_METHOD_EOP = INTERP_METHOD_EOP;
        this.CELESTIAL_SOURCE = CELESTIAL_SOURCE;
    }
    pack(builder) {
        const COMMENT = Metadata.createCommentVector(builder, builder.createObjectOffsetList(this.COMMENT));
        const OBJECT_NAME = (this.OBJECT_NAME !== null ? builder.createString(this.OBJECT_NAME) : 0);
        const INTERNATIONAL_DESIGNATOR = (this.INTERNATIONAL_DESIGNATOR !== null ? builder.createString(this.INTERNATIONAL_DESIGNATOR) : 0);
        const CATALOG_NAME = (this.CATALOG_NAME !== null ? builder.createString(this.CATALOG_NAME) : 0);
        const OBJECT_DESIGNATOR = (this.OBJECT_DESIGNATOR !== null ? builder.createString(this.OBJECT_DESIGNATOR) : 0);
        const ALTERNATE_NAMES = Metadata.createAlternateNamesVector(builder, builder.createObjectOffsetList(this.ALTERNATE_NAMES));
        const ORIGINATOR_POC = (this.ORIGINATOR_POC !== null ? builder.createString(this.ORIGINATOR_POC) : 0);
        const ORIGINATOR_POSITION = (this.ORIGINATOR_POSITION !== null ? builder.createString(this.ORIGINATOR_POSITION) : 0);
        const ORIGINATOR_PHONE = (this.ORIGINATOR_PHONE !== null ? builder.createString(this.ORIGINATOR_PHONE) : 0);
        const ORIGINATOR_EMAIL = (this.ORIGINATOR_EMAIL !== null ? builder.createString(this.ORIGINATOR_EMAIL) : 0);
        const ORIGINATOR_ADDRESS = (this.ORIGINATOR_ADDRESS !== null ? builder.createString(this.ORIGINATOR_ADDRESS) : 0);
        const TECH_ORG = (this.TECH_ORG !== null ? builder.createString(this.TECH_ORG) : 0);
        const TECH_POC = (this.TECH_POC !== null ? builder.createString(this.TECH_POC) : 0);
        const TECH_POSITION = (this.TECH_POSITION !== null ? builder.createString(this.TECH_POSITION) : 0);
        const TECH_PHONE = (this.TECH_PHONE !== null ? builder.createString(this.TECH_PHONE) : 0);
        const TECH_EMAIL = (this.TECH_EMAIL !== null ? builder.createString(this.TECH_EMAIL) : 0);
        const TECH_ADDRESS = (this.TECH_ADDRESS !== null ? builder.createString(this.TECH_ADDRESS) : 0);
        const PREVIOUS_MESSAGE_ID = (this.PREVIOUS_MESSAGE_ID !== null ? builder.createString(this.PREVIOUS_MESSAGE_ID) : 0);
        const NEXT_MESSAGE_ID = (this.NEXT_MESSAGE_ID !== null ? builder.createString(this.NEXT_MESSAGE_ID) : 0);
        const ADM_MSG_LINK = (this.ADM_MSG_LINK !== null ? builder.createString(this.ADM_MSG_LINK) : 0);
        const CDM_MSG_LINK = (this.CDM_MSG_LINK !== null ? builder.createString(this.CDM_MSG_LINK) : 0);
        const PRM_MSG_LINK = (this.PRM_MSG_LINK !== null ? builder.createString(this.PRM_MSG_LINK) : 0);
        const RDM_MSG_LINK = (this.RDM_MSG_LINK !== null ? builder.createString(this.RDM_MSG_LINK) : 0);
        const TDM_MSG_LINK = Metadata.createTdmMsgLinkVector(builder, builder.createObjectOffsetList(this.TDM_MSG_LINK));
        const OPERATOR = (this.OPERATOR !== null ? builder.createString(this.OPERATOR) : 0);
        const OWNER = (this.OWNER !== null ? builder.createString(this.OWNER) : 0);
        const COUNTRY = (this.COUNTRY !== null ? builder.createString(this.COUNTRY) : 0);
        const CONSTELLATION = (this.CONSTELLATION !== null ? builder.createString(this.CONSTELLATION) : 0);
        const OBJECT_TYPE = (this.OBJECT_TYPE !== null ? builder.createString(this.OBJECT_TYPE) : 0);
        const TIME_SYSTEM = (this.TIME_SYSTEM !== null ? builder.createString(this.TIME_SYSTEM) : 0);
        const EPOCH_TZERO = (this.EPOCH_TZERO !== null ? builder.createString(this.EPOCH_TZERO) : 0);
        const OPS_STATUS = (this.OPS_STATUS !== null ? builder.createString(this.OPS_STATUS) : 0);
        const ORBIT_CATEGORY = (this.ORBIT_CATEGORY !== null ? builder.createString(this.ORBIT_CATEGORY) : 0);
        const OCM_DATA_ELEMENTS = Metadata.createOcmDataElementsVector(builder, builder.createObjectOffsetList(this.OCM_DATA_ELEMENTS));
        const PREVIOUS_MESSAGE_EPOCH = (this.PREVIOUS_MESSAGE_EPOCH !== null ? builder.createString(this.PREVIOUS_MESSAGE_EPOCH) : 0);
        const NEXT_MESSAGE_EPOCH = (this.NEXT_MESSAGE_EPOCH !== null ? builder.createString(this.NEXT_MESSAGE_EPOCH) : 0);
        const START_TIME = (this.START_TIME !== null ? builder.createString(this.START_TIME) : 0);
        const STOP_TIME = (this.STOP_TIME !== null ? builder.createString(this.STOP_TIME) : 0);
        const NEXT_LEAP_EPOCH = (this.NEXT_LEAP_EPOCH !== null ? builder.createString(this.NEXT_LEAP_EPOCH) : 0);
        const EOP_SOURCE = (this.EOP_SOURCE !== null ? builder.createString(this.EOP_SOURCE) : 0);
        const INTERP_METHOD_EOP = (this.INTERP_METHOD_EOP !== null ? builder.createString(this.INTERP_METHOD_EOP) : 0);
        const CELESTIAL_SOURCE = (this.CELESTIAL_SOURCE !== null ? builder.createString(this.CELESTIAL_SOURCE) : 0);
        return Metadata.createMetadata(builder, COMMENT, OBJECT_NAME, INTERNATIONAL_DESIGNATOR, CATALOG_NAME, OBJECT_DESIGNATOR, ALTERNATE_NAMES, ORIGINATOR_POC, ORIGINATOR_POSITION, ORIGINATOR_PHONE, ORIGINATOR_EMAIL, ORIGINATOR_ADDRESS, TECH_ORG, TECH_POC, TECH_POSITION, TECH_PHONE, TECH_EMAIL, TECH_ADDRESS, PREVIOUS_MESSAGE_ID, NEXT_MESSAGE_ID, ADM_MSG_LINK, CDM_MSG_LINK, PRM_MSG_LINK, RDM_MSG_LINK, TDM_MSG_LINK, OPERATOR, OWNER, COUNTRY, CONSTELLATION, OBJECT_TYPE, TIME_SYSTEM, EPOCH_TZERO, OPS_STATUS, ORBIT_CATEGORY, OCM_DATA_ELEMENTS, this.SCLK_OFFSET_AT_EPOCH, this.SCLK_SEC_PER_SI_SEC, PREVIOUS_MESSAGE_EPOCH, NEXT_MESSAGE_EPOCH, START_TIME, STOP_TIME, this.TIME_SPAN, this.TAIMUTC_AT_TZERO, NEXT_LEAP_EPOCH, this.NEXT_LEAP_TAIMUTC, this.UT1MUTC_AT_TZERO, EOP_SOURCE, INTERP_METHOD_EOP, CELESTIAL_SOURCE);
    }
}
