// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class OrbitDetermination {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsOrbitDetermination(bb, obj) {
        return (obj || new OrbitDetermination()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsOrbitDetermination(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new OrbitDetermination()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    OD_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OD_PREV_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OD_ALGORITHM(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OD_METHOD(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OD_EPOCH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OD_TIME_TAG(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OD_PROCESS_NOISE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OD_COV_REDUCTION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OD_NOISE_MODELS(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OD_OBSERVATIONS_TYPE(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    odObservationsTypeLength() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Number of observations used.
     */
    OD_OBSERVATIONS_USED() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Number of tracks used.
     */
    OD_TRACKS_USED() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    OD_DATA_WEIGHTING(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OD_CONVERGENCE_CRITERIA(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OD_EST_PARAMETERS(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    odEstParametersLength() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    OD_APRIORI_DATA(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OD_RESIDUALS(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startOrbitDetermination(builder) {
        builder.startObject(17);
    }
    static addOdId(builder, OD_IDOffset) {
        builder.addFieldOffset(0, OD_IDOffset, 0);
    }
    static addOdPrevId(builder, OD_PREV_IDOffset) {
        builder.addFieldOffset(1, OD_PREV_IDOffset, 0);
    }
    static addOdAlgorithm(builder, OD_ALGORITHMOffset) {
        builder.addFieldOffset(2, OD_ALGORITHMOffset, 0);
    }
    static addOdMethod(builder, OD_METHODOffset) {
        builder.addFieldOffset(3, OD_METHODOffset, 0);
    }
    static addOdEpoch(builder, OD_EPOCHOffset) {
        builder.addFieldOffset(4, OD_EPOCHOffset, 0);
    }
    static addOdTimeTag(builder, OD_TIME_TAGOffset) {
        builder.addFieldOffset(5, OD_TIME_TAGOffset, 0);
    }
    static addOdProcessNoise(builder, OD_PROCESS_NOISEOffset) {
        builder.addFieldOffset(6, OD_PROCESS_NOISEOffset, 0);
    }
    static addOdCovReduction(builder, OD_COV_REDUCTIONOffset) {
        builder.addFieldOffset(7, OD_COV_REDUCTIONOffset, 0);
    }
    static addOdNoiseModels(builder, OD_NOISE_MODELSOffset) {
        builder.addFieldOffset(8, OD_NOISE_MODELSOffset, 0);
    }
    static addOdObservationsType(builder, OD_OBSERVATIONS_TYPEOffset) {
        builder.addFieldOffset(9, OD_OBSERVATIONS_TYPEOffset, 0);
    }
    static createOdObservationsTypeVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startOdObservationsTypeVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addOdObservationsUsed(builder, OD_OBSERVATIONS_USED) {
        builder.addFieldInt32(10, OD_OBSERVATIONS_USED, 0);
    }
    static addOdTracksUsed(builder, OD_TRACKS_USED) {
        builder.addFieldInt32(11, OD_TRACKS_USED, 0);
    }
    static addOdDataWeighting(builder, OD_DATA_WEIGHTINGOffset) {
        builder.addFieldOffset(12, OD_DATA_WEIGHTINGOffset, 0);
    }
    static addOdConvergenceCriteria(builder, OD_CONVERGENCE_CRITERIAOffset) {
        builder.addFieldOffset(13, OD_CONVERGENCE_CRITERIAOffset, 0);
    }
    static addOdEstParameters(builder, OD_EST_PARAMETERSOffset) {
        builder.addFieldOffset(14, OD_EST_PARAMETERSOffset, 0);
    }
    static createOdEstParametersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startOdEstParametersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addOdAprioriData(builder, OD_APRIORI_DATAOffset) {
        builder.addFieldOffset(15, OD_APRIORI_DATAOffset, 0);
    }
    static addOdResiduals(builder, OD_RESIDUALSOffset) {
        builder.addFieldOffset(16, OD_RESIDUALSOffset, 0);
    }
    static endOrbitDetermination(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createOrbitDetermination(builder, OD_IDOffset, OD_PREV_IDOffset, OD_ALGORITHMOffset, OD_METHODOffset, OD_EPOCHOffset, OD_TIME_TAGOffset, OD_PROCESS_NOISEOffset, OD_COV_REDUCTIONOffset, OD_NOISE_MODELSOffset, OD_OBSERVATIONS_TYPEOffset, OD_OBSERVATIONS_USED, OD_TRACKS_USED, OD_DATA_WEIGHTINGOffset, OD_CONVERGENCE_CRITERIAOffset, OD_EST_PARAMETERSOffset, OD_APRIORI_DATAOffset, OD_RESIDUALSOffset) {
        OrbitDetermination.startOrbitDetermination(builder);
        OrbitDetermination.addOdId(builder, OD_IDOffset);
        OrbitDetermination.addOdPrevId(builder, OD_PREV_IDOffset);
        OrbitDetermination.addOdAlgorithm(builder, OD_ALGORITHMOffset);
        OrbitDetermination.addOdMethod(builder, OD_METHODOffset);
        OrbitDetermination.addOdEpoch(builder, OD_EPOCHOffset);
        OrbitDetermination.addOdTimeTag(builder, OD_TIME_TAGOffset);
        OrbitDetermination.addOdProcessNoise(builder, OD_PROCESS_NOISEOffset);
        OrbitDetermination.addOdCovReduction(builder, OD_COV_REDUCTIONOffset);
        OrbitDetermination.addOdNoiseModels(builder, OD_NOISE_MODELSOffset);
        OrbitDetermination.addOdObservationsType(builder, OD_OBSERVATIONS_TYPEOffset);
        OrbitDetermination.addOdObservationsUsed(builder, OD_OBSERVATIONS_USED);
        OrbitDetermination.addOdTracksUsed(builder, OD_TRACKS_USED);
        OrbitDetermination.addOdDataWeighting(builder, OD_DATA_WEIGHTINGOffset);
        OrbitDetermination.addOdConvergenceCriteria(builder, OD_CONVERGENCE_CRITERIAOffset);
        OrbitDetermination.addOdEstParameters(builder, OD_EST_PARAMETERSOffset);
        OrbitDetermination.addOdAprioriData(builder, OD_APRIORI_DATAOffset);
        OrbitDetermination.addOdResiduals(builder, OD_RESIDUALSOffset);
        return OrbitDetermination.endOrbitDetermination(builder);
    }
    unpack() {
        return new OrbitDeterminationT(this.OD_ID(), this.OD_PREV_ID(), this.OD_ALGORITHM(), this.OD_METHOD(), this.OD_EPOCH(), this.OD_TIME_TAG(), this.OD_PROCESS_NOISE(), this.OD_COV_REDUCTION(), this.OD_NOISE_MODELS(), this.bb.createScalarList(this.OD_OBSERVATIONS_TYPE.bind(this), this.odObservationsTypeLength()), this.OD_OBSERVATIONS_USED(), this.OD_TRACKS_USED(), this.OD_DATA_WEIGHTING(), this.OD_CONVERGENCE_CRITERIA(), this.bb.createScalarList(this.OD_EST_PARAMETERS.bind(this), this.odEstParametersLength()), this.OD_APRIORI_DATA(), this.OD_RESIDUALS());
    }
    unpackTo(_o) {
        _o.OD_ID = this.OD_ID();
        _o.OD_PREV_ID = this.OD_PREV_ID();
        _o.OD_ALGORITHM = this.OD_ALGORITHM();
        _o.OD_METHOD = this.OD_METHOD();
        _o.OD_EPOCH = this.OD_EPOCH();
        _o.OD_TIME_TAG = this.OD_TIME_TAG();
        _o.OD_PROCESS_NOISE = this.OD_PROCESS_NOISE();
        _o.OD_COV_REDUCTION = this.OD_COV_REDUCTION();
        _o.OD_NOISE_MODELS = this.OD_NOISE_MODELS();
        _o.OD_OBSERVATIONS_TYPE = this.bb.createScalarList(this.OD_OBSERVATIONS_TYPE.bind(this), this.odObservationsTypeLength());
        _o.OD_OBSERVATIONS_USED = this.OD_OBSERVATIONS_USED();
        _o.OD_TRACKS_USED = this.OD_TRACKS_USED();
        _o.OD_DATA_WEIGHTING = this.OD_DATA_WEIGHTING();
        _o.OD_CONVERGENCE_CRITERIA = this.OD_CONVERGENCE_CRITERIA();
        _o.OD_EST_PARAMETERS = this.bb.createScalarList(this.OD_EST_PARAMETERS.bind(this), this.odEstParametersLength());
        _o.OD_APRIORI_DATA = this.OD_APRIORI_DATA();
        _o.OD_RESIDUALS = this.OD_RESIDUALS();
    }
}
export class OrbitDeterminationT {
    constructor(OD_ID = null, OD_PREV_ID = null, OD_ALGORITHM = null, OD_METHOD = null, OD_EPOCH = null, OD_TIME_TAG = null, OD_PROCESS_NOISE = null, OD_COV_REDUCTION = null, OD_NOISE_MODELS = null, OD_OBSERVATIONS_TYPE = [], OD_OBSERVATIONS_USED = 0, OD_TRACKS_USED = 0, OD_DATA_WEIGHTING = null, OD_CONVERGENCE_CRITERIA = null, OD_EST_PARAMETERS = [], OD_APRIORI_DATA = null, OD_RESIDUALS = null) {
        this.OD_ID = OD_ID;
        this.OD_PREV_ID = OD_PREV_ID;
        this.OD_ALGORITHM = OD_ALGORITHM;
        this.OD_METHOD = OD_METHOD;
        this.OD_EPOCH = OD_EPOCH;
        this.OD_TIME_TAG = OD_TIME_TAG;
        this.OD_PROCESS_NOISE = OD_PROCESS_NOISE;
        this.OD_COV_REDUCTION = OD_COV_REDUCTION;
        this.OD_NOISE_MODELS = OD_NOISE_MODELS;
        this.OD_OBSERVATIONS_TYPE = OD_OBSERVATIONS_TYPE;
        this.OD_OBSERVATIONS_USED = OD_OBSERVATIONS_USED;
        this.OD_TRACKS_USED = OD_TRACKS_USED;
        this.OD_DATA_WEIGHTING = OD_DATA_WEIGHTING;
        this.OD_CONVERGENCE_CRITERIA = OD_CONVERGENCE_CRITERIA;
        this.OD_EST_PARAMETERS = OD_EST_PARAMETERS;
        this.OD_APRIORI_DATA = OD_APRIORI_DATA;
        this.OD_RESIDUALS = OD_RESIDUALS;
    }
    pack(builder) {
        const OD_ID = (this.OD_ID !== null ? builder.createString(this.OD_ID) : 0);
        const OD_PREV_ID = (this.OD_PREV_ID !== null ? builder.createString(this.OD_PREV_ID) : 0);
        const OD_ALGORITHM = (this.OD_ALGORITHM !== null ? builder.createString(this.OD_ALGORITHM) : 0);
        const OD_METHOD = (this.OD_METHOD !== null ? builder.createString(this.OD_METHOD) : 0);
        const OD_EPOCH = (this.OD_EPOCH !== null ? builder.createString(this.OD_EPOCH) : 0);
        const OD_TIME_TAG = (this.OD_TIME_TAG !== null ? builder.createString(this.OD_TIME_TAG) : 0);
        const OD_PROCESS_NOISE = (this.OD_PROCESS_NOISE !== null ? builder.createString(this.OD_PROCESS_NOISE) : 0);
        const OD_COV_REDUCTION = (this.OD_COV_REDUCTION !== null ? builder.createString(this.OD_COV_REDUCTION) : 0);
        const OD_NOISE_MODELS = (this.OD_NOISE_MODELS !== null ? builder.createString(this.OD_NOISE_MODELS) : 0);
        const OD_OBSERVATIONS_TYPE = OrbitDetermination.createOdObservationsTypeVector(builder, builder.createObjectOffsetList(this.OD_OBSERVATIONS_TYPE));
        const OD_DATA_WEIGHTING = (this.OD_DATA_WEIGHTING !== null ? builder.createString(this.OD_DATA_WEIGHTING) : 0);
        const OD_CONVERGENCE_CRITERIA = (this.OD_CONVERGENCE_CRITERIA !== null ? builder.createString(this.OD_CONVERGENCE_CRITERIA) : 0);
        const OD_EST_PARAMETERS = OrbitDetermination.createOdEstParametersVector(builder, builder.createObjectOffsetList(this.OD_EST_PARAMETERS));
        const OD_APRIORI_DATA = (this.OD_APRIORI_DATA !== null ? builder.createString(this.OD_APRIORI_DATA) : 0);
        const OD_RESIDUALS = (this.OD_RESIDUALS !== null ? builder.createString(this.OD_RESIDUALS) : 0);
        return OrbitDetermination.createOrbitDetermination(builder, OD_ID, OD_PREV_ID, OD_ALGORITHM, OD_METHOD, OD_EPOCH, OD_TIME_TAG, OD_PROCESS_NOISE, OD_COV_REDUCTION, OD_NOISE_MODELS, OD_OBSERVATIONS_TYPE, this.OD_OBSERVATIONS_USED, this.OD_TRACKS_USED, OD_DATA_WEIGHTING, OD_CONVERGENCE_CRITERIA, OD_EST_PARAMETERS, OD_APRIORI_DATA, OD_RESIDUALS);
    }
}
