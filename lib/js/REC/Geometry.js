// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
/**
 * Geometry table with information about geometric properties
 */
export class Geometry {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGeometry(bb, obj) {
        return (obj || new Geometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGeometry(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Geometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    GEOMETRY_TYPE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Coordinates of the geometry
     */
    COORDINATES(index) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    coordinatesLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    coordinatesArray() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startGeometry(builder) {
        builder.startObject(2);
    }
    static addGeometryType(builder, GEOMETRY_TYPEOffset) {
        builder.addFieldOffset(0, GEOMETRY_TYPEOffset, 0);
    }
    static addCoordinates(builder, COORDINATESOffset) {
        builder.addFieldOffset(1, COORDINATESOffset, 0);
    }
    static createCoordinatesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    }
    static startCoordinatesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endGeometry(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createGeometry(builder, GEOMETRY_TYPEOffset, COORDINATESOffset) {
        Geometry.startGeometry(builder);
        Geometry.addGeometryType(builder, GEOMETRY_TYPEOffset);
        Geometry.addCoordinates(builder, COORDINATESOffset);
        return Geometry.endGeometry(builder);
    }
    unpack() {
        return new GeometryT(this.GEOMETRY_TYPE(), this.bb.createScalarList(this.COORDINATES.bind(this), this.coordinatesLength()));
    }
    unpackTo(_o) {
        _o.GEOMETRY_TYPE = this.GEOMETRY_TYPE();
        _o.COORDINATES = this.bb.createScalarList(this.COORDINATES.bind(this), this.coordinatesLength());
    }
}
export class GeometryT {
    constructor(GEOMETRY_TYPE = null, COORDINATES = []) {
        this.GEOMETRY_TYPE = GEOMETRY_TYPE;
        this.COORDINATES = COORDINATES;
    }
    pack(builder) {
        const GEOMETRY_TYPE = (this.GEOMETRY_TYPE !== null ? builder.createString(this.GEOMETRY_TYPE) : 0);
        const COORDINATES = Geometry.createCoordinatesVector(builder, this.COORDINATES);
        return Geometry.createGeometry(builder, GEOMETRY_TYPE, COORDINATES);
    }
}
