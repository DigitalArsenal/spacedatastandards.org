// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { F107DataType } from './F107DataType.js';
/**
 * Space Weather Data Record
 */
export class SPW {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSPW(bb, obj) {
        return (obj || new SPW()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSPW(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SPW()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$SPW');
    }
    DATE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Bartels Solar Rotation Number
     */
    BSRN() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Day within Bartels cycle (1-27)
     */
    ND() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary 3-hour Range Index (Kp) for 0000-0300 UT, multiplied by 10
     */
    KP1() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary 3-hour Range Index (Kp) for 0300-0600 UT, multiplied by 10
     */
    KP2() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary 3-hour Range Index (Kp) for 0600-0900 UT, multiplied by 10
     */
    KP3() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary 3-hour Range Index (Kp) for 0900-1200 UT, multiplied by 10
     */
    KP4() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary 3-hour Range Index (Kp) for 1200-1500 UT, multiplied by 10
     */
    KP5() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary 3-hour Range Index (Kp) for 1500-1800 UT, multiplied by 10
     */
    KP6() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary 3-hour Range Index (Kp) for 1800-2100 UT, multiplied by 10
     */
    KP7() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary 3-hour Range Index (Kp) for 2100-0000 UT, multiplied by 10
     */
    KP8() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Sum of the 8 Kp indices for the day
     */
    KP_SUM() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary Equivalent Amplitude (Ap) for 0000-0300 UT
     */
    AP1() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary Equivalent Amplitude (Ap) for 0300-0600 UT
     */
    AP2() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary Equivalent Amplitude (Ap) for 0600-0900 UT
     */
    AP3() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary Equivalent Amplitude (Ap) for 0900-1200 UT
     */
    AP4() {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary Equivalent Amplitude (Ap) for 1200-1500 UT
     */
    AP5() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary Equivalent Amplitude (Ap) for 1500-1800 UT
     */
    AP6() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary Equivalent Amplitude (Ap) for 1800-2100 UT
     */
    AP7() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary Equivalent Amplitude (Ap) for 2100-0000 UT
     */
    AP8() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Arithmetic average of the 8 Ap indices for the day
     */
    AP_AVG() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Planetary Daily Character Figure (0.0 to 2.5)
     */
    CP() {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * C9 index (0-9)
     */
    C9() {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * International Sunspot Number
     */
    ISN() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Observed 10.7cm Solar Radio Flux
     */
    F107_OBS() {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Adjusted 10.7cm Solar Radio Flux (to 1 AU)
     */
    F107_ADJ() {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * F10.7 Data Type
     */
    F107_DATA_TYPE() {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : F107DataType.OBS;
    }
    /**
     * 81-day centered average of observed F10.7
     */
    F107_OBS_CENTER81() {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * 81-day trailing average of observed F10.7
     */
    F107_OBS_LAST81() {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * 81-day centered average of adjusted F10.7
     */
    F107_ADJ_CENTER81() {
        const offset = this.bb.__offset(this.bb_pos, 62);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * 81-day trailing average of adjusted F10.7
     */
    F107_ADJ_LAST81() {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    static startSPW(builder) {
        builder.startObject(31);
    }
    static addDate(builder, DATEOffset) {
        builder.addFieldOffset(0, DATEOffset, 0);
    }
    static addBsrn(builder, BSRN) {
        builder.addFieldInt32(1, BSRN, 0);
    }
    static addNd(builder, ND) {
        builder.addFieldInt32(2, ND, 0);
    }
    static addKp1(builder, KP1) {
        builder.addFieldInt32(3, KP1, 0);
    }
    static addKp2(builder, KP2) {
        builder.addFieldInt32(4, KP2, 0);
    }
    static addKp3(builder, KP3) {
        builder.addFieldInt32(5, KP3, 0);
    }
    static addKp4(builder, KP4) {
        builder.addFieldInt32(6, KP4, 0);
    }
    static addKp5(builder, KP5) {
        builder.addFieldInt32(7, KP5, 0);
    }
    static addKp6(builder, KP6) {
        builder.addFieldInt32(8, KP6, 0);
    }
    static addKp7(builder, KP7) {
        builder.addFieldInt32(9, KP7, 0);
    }
    static addKp8(builder, KP8) {
        builder.addFieldInt32(10, KP8, 0);
    }
    static addKpSum(builder, KP_SUM) {
        builder.addFieldInt32(11, KP_SUM, 0);
    }
    static addAp1(builder, AP1) {
        builder.addFieldInt32(12, AP1, 0);
    }
    static addAp2(builder, AP2) {
        builder.addFieldInt32(13, AP2, 0);
    }
    static addAp3(builder, AP3) {
        builder.addFieldInt32(14, AP3, 0);
    }
    static addAp4(builder, AP4) {
        builder.addFieldInt32(15, AP4, 0);
    }
    static addAp5(builder, AP5) {
        builder.addFieldInt32(16, AP5, 0);
    }
    static addAp6(builder, AP6) {
        builder.addFieldInt32(17, AP6, 0);
    }
    static addAp7(builder, AP7) {
        builder.addFieldInt32(18, AP7, 0);
    }
    static addAp8(builder, AP8) {
        builder.addFieldInt32(19, AP8, 0);
    }
    static addApAvg(builder, AP_AVG) {
        builder.addFieldInt32(20, AP_AVG, 0);
    }
    static addCp(builder, CP) {
        builder.addFieldFloat32(21, CP, 0.0);
    }
    static addC9(builder, C9) {
        builder.addFieldInt32(22, C9, 0);
    }
    static addIsn(builder, ISN) {
        builder.addFieldInt32(23, ISN, 0);
    }
    static addF107Obs(builder, F107_OBS) {
        builder.addFieldFloat32(24, F107_OBS, 0.0);
    }
    static addF107Adj(builder, F107_ADJ) {
        builder.addFieldFloat32(25, F107_ADJ, 0.0);
    }
    static addF107DataType(builder, F107_DATA_TYPE) {
        builder.addFieldInt8(26, F107_DATA_TYPE, F107DataType.OBS);
    }
    static addF107ObsCenter81(builder, F107_OBS_CENTER81) {
        builder.addFieldFloat32(27, F107_OBS_CENTER81, 0.0);
    }
    static addF107ObsLast81(builder, F107_OBS_LAST81) {
        builder.addFieldFloat32(28, F107_OBS_LAST81, 0.0);
    }
    static addF107AdjCenter81(builder, F107_ADJ_CENTER81) {
        builder.addFieldFloat32(29, F107_ADJ_CENTER81, 0.0);
    }
    static addF107AdjLast81(builder, F107_ADJ_LAST81) {
        builder.addFieldFloat32(30, F107_ADJ_LAST81, 0.0);
    }
    static endSPW(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishSPWBuffer(builder, offset) {
        builder.finish(offset, '$SPW');
    }
    static finishSizePrefixedSPWBuffer(builder, offset) {
        builder.finish(offset, '$SPW', true);
    }
    static createSPW(builder, DATEOffset, BSRN, ND, KP1, KP2, KP3, KP4, KP5, KP6, KP7, KP8, KP_SUM, AP1, AP2, AP3, AP4, AP5, AP6, AP7, AP8, AP_AVG, CP, C9, ISN, F107_OBS, F107_ADJ, F107_DATA_TYPE, F107_OBS_CENTER81, F107_OBS_LAST81, F107_ADJ_CENTER81, F107_ADJ_LAST81) {
        SPW.startSPW(builder);
        SPW.addDate(builder, DATEOffset);
        SPW.addBsrn(builder, BSRN);
        SPW.addNd(builder, ND);
        SPW.addKp1(builder, KP1);
        SPW.addKp2(builder, KP2);
        SPW.addKp3(builder, KP3);
        SPW.addKp4(builder, KP4);
        SPW.addKp5(builder, KP5);
        SPW.addKp6(builder, KP6);
        SPW.addKp7(builder, KP7);
        SPW.addKp8(builder, KP8);
        SPW.addKpSum(builder, KP_SUM);
        SPW.addAp1(builder, AP1);
        SPW.addAp2(builder, AP2);
        SPW.addAp3(builder, AP3);
        SPW.addAp4(builder, AP4);
        SPW.addAp5(builder, AP5);
        SPW.addAp6(builder, AP6);
        SPW.addAp7(builder, AP7);
        SPW.addAp8(builder, AP8);
        SPW.addApAvg(builder, AP_AVG);
        SPW.addCp(builder, CP);
        SPW.addC9(builder, C9);
        SPW.addIsn(builder, ISN);
        SPW.addF107Obs(builder, F107_OBS);
        SPW.addF107Adj(builder, F107_ADJ);
        SPW.addF107DataType(builder, F107_DATA_TYPE);
        SPW.addF107ObsCenter81(builder, F107_OBS_CENTER81);
        SPW.addF107ObsLast81(builder, F107_OBS_LAST81);
        SPW.addF107AdjCenter81(builder, F107_ADJ_CENTER81);
        SPW.addF107AdjLast81(builder, F107_ADJ_LAST81);
        return SPW.endSPW(builder);
    }
    unpack() {
        return new SPWT(this.DATE(), this.BSRN(), this.ND(), this.KP1(), this.KP2(), this.KP3(), this.KP4(), this.KP5(), this.KP6(), this.KP7(), this.KP8(), this.KP_SUM(), this.AP1(), this.AP2(), this.AP3(), this.AP4(), this.AP5(), this.AP6(), this.AP7(), this.AP8(), this.AP_AVG(), this.CP(), this.C9(), this.ISN(), this.F107_OBS(), this.F107_ADJ(), this.F107_DATA_TYPE(), this.F107_OBS_CENTER81(), this.F107_OBS_LAST81(), this.F107_ADJ_CENTER81(), this.F107_ADJ_LAST81());
    }
    unpackTo(_o) {
        _o.DATE = this.DATE();
        _o.BSRN = this.BSRN();
        _o.ND = this.ND();
        _o.KP1 = this.KP1();
        _o.KP2 = this.KP2();
        _o.KP3 = this.KP3();
        _o.KP4 = this.KP4();
        _o.KP5 = this.KP5();
        _o.KP6 = this.KP6();
        _o.KP7 = this.KP7();
        _o.KP8 = this.KP8();
        _o.KP_SUM = this.KP_SUM();
        _o.AP1 = this.AP1();
        _o.AP2 = this.AP2();
        _o.AP3 = this.AP3();
        _o.AP4 = this.AP4();
        _o.AP5 = this.AP5();
        _o.AP6 = this.AP6();
        _o.AP7 = this.AP7();
        _o.AP8 = this.AP8();
        _o.AP_AVG = this.AP_AVG();
        _o.CP = this.CP();
        _o.C9 = this.C9();
        _o.ISN = this.ISN();
        _o.F107_OBS = this.F107_OBS();
        _o.F107_ADJ = this.F107_ADJ();
        _o.F107_DATA_TYPE = this.F107_DATA_TYPE();
        _o.F107_OBS_CENTER81 = this.F107_OBS_CENTER81();
        _o.F107_OBS_LAST81 = this.F107_OBS_LAST81();
        _o.F107_ADJ_CENTER81 = this.F107_ADJ_CENTER81();
        _o.F107_ADJ_LAST81 = this.F107_ADJ_LAST81();
    }
}
export class SPWT {
    constructor(DATE = null, BSRN = 0, ND = 0, KP1 = 0, KP2 = 0, KP3 = 0, KP4 = 0, KP5 = 0, KP6 = 0, KP7 = 0, KP8 = 0, KP_SUM = 0, AP1 = 0, AP2 = 0, AP3 = 0, AP4 = 0, AP5 = 0, AP6 = 0, AP7 = 0, AP8 = 0, AP_AVG = 0, CP = 0.0, C9 = 0, ISN = 0, F107_OBS = 0.0, F107_ADJ = 0.0, F107_DATA_TYPE = F107DataType.OBS, F107_OBS_CENTER81 = 0.0, F107_OBS_LAST81 = 0.0, F107_ADJ_CENTER81 = 0.0, F107_ADJ_LAST81 = 0.0) {
        this.DATE = DATE;
        this.BSRN = BSRN;
        this.ND = ND;
        this.KP1 = KP1;
        this.KP2 = KP2;
        this.KP3 = KP3;
        this.KP4 = KP4;
        this.KP5 = KP5;
        this.KP6 = KP6;
        this.KP7 = KP7;
        this.KP8 = KP8;
        this.KP_SUM = KP_SUM;
        this.AP1 = AP1;
        this.AP2 = AP2;
        this.AP3 = AP3;
        this.AP4 = AP4;
        this.AP5 = AP5;
        this.AP6 = AP6;
        this.AP7 = AP7;
        this.AP8 = AP8;
        this.AP_AVG = AP_AVG;
        this.CP = CP;
        this.C9 = C9;
        this.ISN = ISN;
        this.F107_OBS = F107_OBS;
        this.F107_ADJ = F107_ADJ;
        this.F107_DATA_TYPE = F107_DATA_TYPE;
        this.F107_OBS_CENTER81 = F107_OBS_CENTER81;
        this.F107_OBS_LAST81 = F107_OBS_LAST81;
        this.F107_ADJ_CENTER81 = F107_ADJ_CENTER81;
        this.F107_ADJ_LAST81 = F107_ADJ_LAST81;
    }
    pack(builder) {
        const DATE = (this.DATE !== null ? builder.createString(this.DATE) : 0);
        return SPW.createSPW(builder, DATE, this.BSRN, this.ND, this.KP1, this.KP2, this.KP3, this.KP4, this.KP5, this.KP6, this.KP7, this.KP8, this.KP_SUM, this.AP1, this.AP2, this.AP3, this.AP4, this.AP5, this.AP6, this.AP7, this.AP8, this.AP_AVG, this.CP, this.C9, this.ISN, this.F107_OBS, this.F107_ADJ, this.F107_DATA_TYPE, this.F107_OBS_CENTER81, this.F107_OBS_LAST81, this.F107_ADJ_CENTER81, this.F107_ADJ_LAST81);
    }
}
