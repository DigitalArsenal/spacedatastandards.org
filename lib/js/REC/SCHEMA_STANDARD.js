// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
/**
 * Schema Standard Definition
 */
export class SCHEMA_STANDARD {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSCHEMA_STANDARD(bb, obj) {
        return (obj || new SCHEMA_STANDARD()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSCHEMA_STANDARD(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SCHEMA_STANDARD()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    key(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    idl(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    files(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    filesLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startSCHEMA_STANDARD(builder) {
        builder.startObject(3);
    }
    static addKey(builder, keyOffset) {
        builder.addFieldOffset(0, keyOffset, 0);
    }
    static addIdl(builder, idlOffset) {
        builder.addFieldOffset(1, idlOffset, 0);
    }
    static addFiles(builder, filesOffset) {
        builder.addFieldOffset(2, filesOffset, 0);
    }
    static createFilesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startFilesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endSCHEMA_STANDARD(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createSCHEMA_STANDARD(builder, keyOffset, idlOffset, filesOffset) {
        SCHEMA_STANDARD.startSCHEMA_STANDARD(builder);
        SCHEMA_STANDARD.addKey(builder, keyOffset);
        SCHEMA_STANDARD.addIdl(builder, idlOffset);
        SCHEMA_STANDARD.addFiles(builder, filesOffset);
        return SCHEMA_STANDARD.endSCHEMA_STANDARD(builder);
    }
    unpack() {
        return new SCHEMA_STANDARDT(this.key(), this.idl(), this.bb.createScalarList(this.files.bind(this), this.filesLength()));
    }
    unpackTo(_o) {
        _o.key = this.key();
        _o.idl = this.idl();
        _o.files = this.bb.createScalarList(this.files.bind(this), this.filesLength());
    }
}
export class SCHEMA_STANDARDT {
    constructor(key = null, idl = null, files = []) {
        this.key = key;
        this.idl = idl;
        this.files = files;
    }
    pack(builder) {
        const key = (this.key !== null ? builder.createString(this.key) : 0);
        const idl = (this.idl !== null ? builder.createString(this.idl) : 0);
        const files = SCHEMA_STANDARD.createFilesVector(builder, builder.createObjectOffsetList(this.files));
        return SCHEMA_STANDARD.createSCHEMA_STANDARD(builder, key, idl, files);
    }
}
