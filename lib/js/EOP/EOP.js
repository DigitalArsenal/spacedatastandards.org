// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { DataType } from './DataType.js';
/**
 * Earth Orientation Parameters
 */
export class EOP {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsEOP(bb, obj) {
        return (obj || new EOP()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsEOP(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new EOP()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$EOP');
    }
    DATE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     *  Modified Julian Date in UTC, e.g., 58119
     */
    MJD() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    /**
     *  x component of Pole Wander in radians, e.g., 2.872908911518888E-7
     */
    X_POLE_WANDER_RADIANS() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     *  y component of Pole Wander in radians, e.g., 1.2003259523750447E-6
     */
    Y_POLE_WANDER_RADIANS() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     *  x component of Celestial Pole Offset in radians, e.g., 5.720801437092525E-10
     */
    X_CELESTIAL_POLE_OFFSET_RADIANS() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     *  y component of Celestial Pole Offset in radians, e.g., -8.484239419416879E-10
     */
    Y_CELESTIAL_POLE_OFFSET_RADIANS() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     *  UT1 minus UTC in seconds, e.g., 0.2163567
     */
    UT1_MINUS_UTC_SECONDS() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     *  TAI minus UTC in seconds, e.g., 37
     */
    TAI_MINUS_UTC_SECONDS() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    }
    /**
     *  Correction to Length of Day in seconds, e.g., 8.094E-4
     */
    LENGTH_OF_DAY_CORRECTION_SECONDS() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     *  Data type (O = Observed, P = Predicted)
     */
    DATA_TYPE() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : DataType.OBSERVED;
    }
    static startEOP(builder) {
        builder.startObject(10);
    }
    static addDate(builder, DATEOffset) {
        builder.addFieldOffset(0, DATEOffset, 0);
    }
    static addMjd(builder, MJD) {
        builder.addFieldInt32(1, MJD, 0);
    }
    static addXPoleWanderRadians(builder, X_POLE_WANDER_RADIANS) {
        builder.addFieldFloat32(2, X_POLE_WANDER_RADIANS, 0.0);
    }
    static addYPoleWanderRadians(builder, Y_POLE_WANDER_RADIANS) {
        builder.addFieldFloat32(3, Y_POLE_WANDER_RADIANS, 0.0);
    }
    static addXCelestialPoleOffsetRadians(builder, X_CELESTIAL_POLE_OFFSET_RADIANS) {
        builder.addFieldFloat32(4, X_CELESTIAL_POLE_OFFSET_RADIANS, 0.0);
    }
    static addYCelestialPoleOffsetRadians(builder, Y_CELESTIAL_POLE_OFFSET_RADIANS) {
        builder.addFieldFloat32(5, Y_CELESTIAL_POLE_OFFSET_RADIANS, 0.0);
    }
    static addUt1MinusUtcSeconds(builder, UT1_MINUS_UTC_SECONDS) {
        builder.addFieldFloat32(6, UT1_MINUS_UTC_SECONDS, 0.0);
    }
    static addTaiMinusUtcSeconds(builder, TAI_MINUS_UTC_SECONDS) {
        builder.addFieldInt16(7, TAI_MINUS_UTC_SECONDS, 0);
    }
    static addLengthOfDayCorrectionSeconds(builder, LENGTH_OF_DAY_CORRECTION_SECONDS) {
        builder.addFieldFloat32(8, LENGTH_OF_DAY_CORRECTION_SECONDS, 0.0);
    }
    static addDataType(builder, DATA_TYPE) {
        builder.addFieldInt8(9, DATA_TYPE, DataType.OBSERVED);
    }
    static endEOP(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishEOPBuffer(builder, offset) {
        builder.finish(offset, '$EOP');
    }
    static finishSizePrefixedEOPBuffer(builder, offset) {
        builder.finish(offset, '$EOP', true);
    }
    static createEOP(builder, DATEOffset, MJD, X_POLE_WANDER_RADIANS, Y_POLE_WANDER_RADIANS, X_CELESTIAL_POLE_OFFSET_RADIANS, Y_CELESTIAL_POLE_OFFSET_RADIANS, UT1_MINUS_UTC_SECONDS, TAI_MINUS_UTC_SECONDS, LENGTH_OF_DAY_CORRECTION_SECONDS, DATA_TYPE) {
        EOP.startEOP(builder);
        EOP.addDate(builder, DATEOffset);
        EOP.addMjd(builder, MJD);
        EOP.addXPoleWanderRadians(builder, X_POLE_WANDER_RADIANS);
        EOP.addYPoleWanderRadians(builder, Y_POLE_WANDER_RADIANS);
        EOP.addXCelestialPoleOffsetRadians(builder, X_CELESTIAL_POLE_OFFSET_RADIANS);
        EOP.addYCelestialPoleOffsetRadians(builder, Y_CELESTIAL_POLE_OFFSET_RADIANS);
        EOP.addUt1MinusUtcSeconds(builder, UT1_MINUS_UTC_SECONDS);
        EOP.addTaiMinusUtcSeconds(builder, TAI_MINUS_UTC_SECONDS);
        EOP.addLengthOfDayCorrectionSeconds(builder, LENGTH_OF_DAY_CORRECTION_SECONDS);
        EOP.addDataType(builder, DATA_TYPE);
        return EOP.endEOP(builder);
    }
    unpack() {
        return new EOPT(this.DATE(), this.MJD(), this.X_POLE_WANDER_RADIANS(), this.Y_POLE_WANDER_RADIANS(), this.X_CELESTIAL_POLE_OFFSET_RADIANS(), this.Y_CELESTIAL_POLE_OFFSET_RADIANS(), this.UT1_MINUS_UTC_SECONDS(), this.TAI_MINUS_UTC_SECONDS(), this.LENGTH_OF_DAY_CORRECTION_SECONDS(), this.DATA_TYPE());
    }
    unpackTo(_o) {
        _o.DATE = this.DATE();
        _o.MJD = this.MJD();
        _o.X_POLE_WANDER_RADIANS = this.X_POLE_WANDER_RADIANS();
        _o.Y_POLE_WANDER_RADIANS = this.Y_POLE_WANDER_RADIANS();
        _o.X_CELESTIAL_POLE_OFFSET_RADIANS = this.X_CELESTIAL_POLE_OFFSET_RADIANS();
        _o.Y_CELESTIAL_POLE_OFFSET_RADIANS = this.Y_CELESTIAL_POLE_OFFSET_RADIANS();
        _o.UT1_MINUS_UTC_SECONDS = this.UT1_MINUS_UTC_SECONDS();
        _o.TAI_MINUS_UTC_SECONDS = this.TAI_MINUS_UTC_SECONDS();
        _o.LENGTH_OF_DAY_CORRECTION_SECONDS = this.LENGTH_OF_DAY_CORRECTION_SECONDS();
        _o.DATA_TYPE = this.DATA_TYPE();
    }
}
export class EOPT {
    constructor(DATE = null, MJD = 0, X_POLE_WANDER_RADIANS = 0.0, Y_POLE_WANDER_RADIANS = 0.0, X_CELESTIAL_POLE_OFFSET_RADIANS = 0.0, Y_CELESTIAL_POLE_OFFSET_RADIANS = 0.0, UT1_MINUS_UTC_SECONDS = 0.0, TAI_MINUS_UTC_SECONDS = 0, LENGTH_OF_DAY_CORRECTION_SECONDS = 0.0, DATA_TYPE = DataType.OBSERVED) {
        this.DATE = DATE;
        this.MJD = MJD;
        this.X_POLE_WANDER_RADIANS = X_POLE_WANDER_RADIANS;
        this.Y_POLE_WANDER_RADIANS = Y_POLE_WANDER_RADIANS;
        this.X_CELESTIAL_POLE_OFFSET_RADIANS = X_CELESTIAL_POLE_OFFSET_RADIANS;
        this.Y_CELESTIAL_POLE_OFFSET_RADIANS = Y_CELESTIAL_POLE_OFFSET_RADIANS;
        this.UT1_MINUS_UTC_SECONDS = UT1_MINUS_UTC_SECONDS;
        this.TAI_MINUS_UTC_SECONDS = TAI_MINUS_UTC_SECONDS;
        this.LENGTH_OF_DAY_CORRECTION_SECONDS = LENGTH_OF_DAY_CORRECTION_SECONDS;
        this.DATA_TYPE = DATA_TYPE;
    }
    pack(builder) {
        const DATE = (this.DATE !== null ? builder.createString(this.DATE) : 0);
        return EOP.createEOP(builder, DATE, this.MJD, this.X_POLE_WANDER_RADIANS, this.Y_POLE_WANDER_RADIANS, this.X_CELESTIAL_POLE_OFFSET_RADIANS, this.Y_CELESTIAL_POLE_OFFSET_RADIANS, this.UT1_MINUS_UTC_SECONDS, this.TAI_MINUS_UTC_SECONDS, this.LENGTH_OF_DAY_CORRECTION_SECONDS, this.DATA_TYPE);
    }
}
