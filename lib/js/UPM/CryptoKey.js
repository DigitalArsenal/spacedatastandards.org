// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
export class CryptoKey {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCryptoKey(bb, obj) {
        return (obj || new CryptoKey()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCryptoKey(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CryptoKey()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    PUBLIC_KEY(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    XPUB(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    PRIVATE_KEY(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    XPRIV(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    KEY_ADDRESS(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ADDRESS_TYPE() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    static startCryptoKey(builder) {
        builder.startObject(6);
    }
    static addPublicKey(builder, PUBLIC_KEYOffset) {
        builder.addFieldOffset(0, PUBLIC_KEYOffset, 0);
    }
    static addXpub(builder, XPUBOffset) {
        builder.addFieldOffset(1, XPUBOffset, 0);
    }
    static addPrivateKey(builder, PRIVATE_KEYOffset) {
        builder.addFieldOffset(2, PRIVATE_KEYOffset, 0);
    }
    static addXpriv(builder, XPRIVOffset) {
        builder.addFieldOffset(3, XPRIVOffset, 0);
    }
    static addKeyAddress(builder, KEY_ADDRESSOffset) {
        builder.addFieldOffset(4, KEY_ADDRESSOffset, 0);
    }
    static addAddressType(builder, ADDRESS_TYPE) {
        builder.addFieldInt32(5, ADDRESS_TYPE, 0);
    }
    static endCryptoKey(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createCryptoKey(builder, PUBLIC_KEYOffset, XPUBOffset, PRIVATE_KEYOffset, XPRIVOffset, KEY_ADDRESSOffset, ADDRESS_TYPE) {
        CryptoKey.startCryptoKey(builder);
        CryptoKey.addPublicKey(builder, PUBLIC_KEYOffset);
        CryptoKey.addXpub(builder, XPUBOffset);
        CryptoKey.addPrivateKey(builder, PRIVATE_KEYOffset);
        CryptoKey.addXpriv(builder, XPRIVOffset);
        CryptoKey.addKeyAddress(builder, KEY_ADDRESSOffset);
        CryptoKey.addAddressType(builder, ADDRESS_TYPE);
        return CryptoKey.endCryptoKey(builder);
    }
    unpack() {
        return new CryptoKeyT(this.PUBLIC_KEY(), this.XPUB(), this.PRIVATE_KEY(), this.XPRIV(), this.KEY_ADDRESS(), this.ADDRESS_TYPE());
    }
    unpackTo(_o) {
        _o.PUBLIC_KEY = this.PUBLIC_KEY();
        _o.XPUB = this.XPUB();
        _o.PRIVATE_KEY = this.PRIVATE_KEY();
        _o.XPRIV = this.XPRIV();
        _o.KEY_ADDRESS = this.KEY_ADDRESS();
        _o.ADDRESS_TYPE = this.ADDRESS_TYPE();
    }
}
export class CryptoKeyT {
    constructor(PUBLIC_KEY = null, XPUB = null, PRIVATE_KEY = null, XPRIV = null, KEY_ADDRESS = null, ADDRESS_TYPE = 0) {
        this.PUBLIC_KEY = PUBLIC_KEY;
        this.XPUB = XPUB;
        this.PRIVATE_KEY = PRIVATE_KEY;
        this.XPRIV = XPRIV;
        this.KEY_ADDRESS = KEY_ADDRESS;
        this.ADDRESS_TYPE = ADDRESS_TYPE;
    }
    pack(builder) {
        const PUBLIC_KEY = (this.PUBLIC_KEY !== null ? builder.createString(this.PUBLIC_KEY) : 0);
        const XPUB = (this.XPUB !== null ? builder.createString(this.XPUB) : 0);
        const PRIVATE_KEY = (this.PRIVATE_KEY !== null ? builder.createString(this.PRIVATE_KEY) : 0);
        const XPRIV = (this.XPRIV !== null ? builder.createString(this.XPRIV) : 0);
        const KEY_ADDRESS = (this.KEY_ADDRESS !== null ? builder.createString(this.KEY_ADDRESS) : 0);
        return CryptoKey.createCryptoKey(builder, PUBLIC_KEY, XPUB, PRIVATE_KEY, XPRIV, KEY_ADDRESS, this.ADDRESS_TYPE);
    }
}
