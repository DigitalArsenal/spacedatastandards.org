// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
export class Organization {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsOrganization(bb, obj) {
        return (obj || new Organization()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsOrganization(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Organization()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    LEGAL_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startOrganization(builder) {
        builder.startObject(2);
    }
    static addName(builder, NAMEOffset) {
        builder.addFieldOffset(0, NAMEOffset, 0);
    }
    static addLegalName(builder, LEGAL_NAMEOffset) {
        builder.addFieldOffset(1, LEGAL_NAMEOffset, 0);
    }
    static endOrganization(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createOrganization(builder, NAMEOffset, LEGAL_NAMEOffset) {
        Organization.startOrganization(builder);
        Organization.addName(builder, NAMEOffset);
        Organization.addLegalName(builder, LEGAL_NAMEOffset);
        return Organization.endOrganization(builder);
    }
    unpack() {
        return new OrganizationT(this.NAME(), this.LEGAL_NAME());
    }
    unpackTo(_o) {
        _o.NAME = this.NAME();
        _o.LEGAL_NAME = this.LEGAL_NAME();
    }
}
export class OrganizationT {
    constructor(NAME = null, LEGAL_NAME = null) {
        this.NAME = NAME;
        this.LEGAL_NAME = LEGAL_NAME;
    }
    pack(builder) {
        const NAME = (this.NAME !== null ? builder.createString(this.NAME) : 0);
        const LEGAL_NAME = (this.LEGAL_NAME !== null ? builder.createString(this.LEGAL_NAME) : 0);
        return Organization.createOrganization(builder, NAME, LEGAL_NAME);
    }
}
