// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
/**
 * Publish Notification Message
 * This table includes a comprehensive set of cryptographic hashes and a digital signature for file publication.
 */
export class PNM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPNM(bb, obj) {
        return (obj || new PNM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPNM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PNM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$PNM');
    }
    IPFS_CID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ETH_DIGITAL_SIGNATURE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SHA_512_FILE_HASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SHA_256_FILE_HASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MD5_FILE_DIGEST(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SHA_1_FILE_HASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ARGON2_FILE_HASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    BLAKE2B_FILE_HASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SHA_3_FILE_HASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    RIPEMD_160_FILE_HASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    WHIRLPOOL_FILE_HASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TIGER_FILE_HASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CRC32(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ADLER32_CHECKSUM(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    RABIN_FINGERPRINT(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    PEARSON_HASHING(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    BLAKE2_KEYED_HASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    BLAKE_256(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CRC8(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CRC16(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CRC64(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    BSD_CHECKSUM(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SYSV_CHECKSUM(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SUM8(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    INTERNET_CHECKSUM(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SUM24(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SUM32(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    FLETCHER_4(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    FLETCHER_8(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    FLETCHER_16(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 62);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    FLETCHER_32(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    LUNH_ALGORITHM(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 66);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    VERHOEFF_ALGORITHM(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 68);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    DAMM_ALGORITHM(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TABULATION_HASHING(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 72);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    UNIVERSAL_ONE_WAY_HASH_FUNCTION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 74);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ZOBRIST_HASHING(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 76);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    PAUL_HSIEHS_SUPERFASTHASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 78);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    BUZHASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 80);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    FNV_HASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 82);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    JENKINS_HASH_FUNCTION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 84);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    BERNSTEINS_HASH_DJB2(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 86);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    PJW_HASH_ELF_HASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 88);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MURMURHASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 90);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    FAST_HASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 92);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SPOOKYHASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 94);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CITYHASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 96);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    FARMHASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 98);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    METROHASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 100);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    NUMERIC_HASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 102);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    XXHASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 104);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    T1HA(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 106);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    GXHASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 108);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    PHASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 110);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    DHASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 112);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SDBM(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 114);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OSDB_HASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 116);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    KOMIHASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 118);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    BLAKE3(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 120);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ECOH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 122);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    FSB(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 124);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    GOST(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 126);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    GROSTL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 128);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    HAS_160(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 130);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    HAVAL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 132);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    JH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 134);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    LSH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 136);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MD2(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 138);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MD4(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 140);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MD5(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 142);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MD6(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 144);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    RADIOGATUN(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 146);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    RIPEMD(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 148);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    RIPEMD_128(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 150);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    RIPEMD_256(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 152);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    RIPEMD_320(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 154);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SHA_1(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 156);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SHA_224(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 158);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SHA_256(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 160);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SHA_384(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 162);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SHA_512(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 164);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SHA_3(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 166);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SKEIN(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 168);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SNEFRU(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 170);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SPECTRAL_HASH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 172);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    STREEBOG(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 174);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SWIFFT(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 176);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TIGER(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 178);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    WHIRLPOOL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 180);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startPNM(builder) {
        builder.startObject(89);
    }
    static addIpfsCid(builder, IPFS_CIDOffset) {
        builder.addFieldOffset(0, IPFS_CIDOffset, 0);
    }
    static addEthDigitalSignature(builder, ETH_DIGITAL_SIGNATUREOffset) {
        builder.addFieldOffset(1, ETH_DIGITAL_SIGNATUREOffset, 0);
    }
    static addSha512FileHash(builder, SHA_512_FILE_HASHOffset) {
        builder.addFieldOffset(2, SHA_512_FILE_HASHOffset, 0);
    }
    static addSha256FileHash(builder, SHA_256_FILE_HASHOffset) {
        builder.addFieldOffset(3, SHA_256_FILE_HASHOffset, 0);
    }
    static addMd5FileDigest(builder, MD5_FILE_DIGESTOffset) {
        builder.addFieldOffset(4, MD5_FILE_DIGESTOffset, 0);
    }
    static addSha1FileHash(builder, SHA_1_FILE_HASHOffset) {
        builder.addFieldOffset(5, SHA_1_FILE_HASHOffset, 0);
    }
    static addArgon2FileHash(builder, ARGON2_FILE_HASHOffset) {
        builder.addFieldOffset(6, ARGON2_FILE_HASHOffset, 0);
    }
    static addBlake2BFileHash(builder, BLAKE2B_FILE_HASHOffset) {
        builder.addFieldOffset(7, BLAKE2B_FILE_HASHOffset, 0);
    }
    static addSha3FileHash(builder, SHA_3_FILE_HASHOffset) {
        builder.addFieldOffset(8, SHA_3_FILE_HASHOffset, 0);
    }
    static addRipemd160FileHash(builder, RIPEMD_160_FILE_HASHOffset) {
        builder.addFieldOffset(9, RIPEMD_160_FILE_HASHOffset, 0);
    }
    static addWhirlpoolFileHash(builder, WHIRLPOOL_FILE_HASHOffset) {
        builder.addFieldOffset(10, WHIRLPOOL_FILE_HASHOffset, 0);
    }
    static addTigerFileHash(builder, TIGER_FILE_HASHOffset) {
        builder.addFieldOffset(11, TIGER_FILE_HASHOffset, 0);
    }
    static addCrc32(builder, CRC32Offset) {
        builder.addFieldOffset(12, CRC32Offset, 0);
    }
    static addAdler32Checksum(builder, ADLER32_CHECKSUMOffset) {
        builder.addFieldOffset(13, ADLER32_CHECKSUMOffset, 0);
    }
    static addRabinFingerprint(builder, RABIN_FINGERPRINTOffset) {
        builder.addFieldOffset(14, RABIN_FINGERPRINTOffset, 0);
    }
    static addPearsonHashing(builder, PEARSON_HASHINGOffset) {
        builder.addFieldOffset(15, PEARSON_HASHINGOffset, 0);
    }
    static addBlake2KeyedHash(builder, BLAKE2_KEYED_HASHOffset) {
        builder.addFieldOffset(16, BLAKE2_KEYED_HASHOffset, 0);
    }
    static addBlake256(builder, BLAKE_256Offset) {
        builder.addFieldOffset(17, BLAKE_256Offset, 0);
    }
    static addCrc8(builder, CRC8Offset) {
        builder.addFieldOffset(18, CRC8Offset, 0);
    }
    static addCrc16(builder, CRC16Offset) {
        builder.addFieldOffset(19, CRC16Offset, 0);
    }
    static addCrc64(builder, CRC64Offset) {
        builder.addFieldOffset(20, CRC64Offset, 0);
    }
    static addBsdChecksum(builder, BSD_CHECKSUMOffset) {
        builder.addFieldOffset(21, BSD_CHECKSUMOffset, 0);
    }
    static addSysvChecksum(builder, SYSV_CHECKSUMOffset) {
        builder.addFieldOffset(22, SYSV_CHECKSUMOffset, 0);
    }
    static addSum8(builder, SUM8Offset) {
        builder.addFieldOffset(23, SUM8Offset, 0);
    }
    static addInternetChecksum(builder, INTERNET_CHECKSUMOffset) {
        builder.addFieldOffset(24, INTERNET_CHECKSUMOffset, 0);
    }
    static addSum24(builder, SUM24Offset) {
        builder.addFieldOffset(25, SUM24Offset, 0);
    }
    static addSum32(builder, SUM32Offset) {
        builder.addFieldOffset(26, SUM32Offset, 0);
    }
    static addFletcher4(builder, FLETCHER_4Offset) {
        builder.addFieldOffset(27, FLETCHER_4Offset, 0);
    }
    static addFletcher8(builder, FLETCHER_8Offset) {
        builder.addFieldOffset(28, FLETCHER_8Offset, 0);
    }
    static addFletcher16(builder, FLETCHER_16Offset) {
        builder.addFieldOffset(29, FLETCHER_16Offset, 0);
    }
    static addFletcher32(builder, FLETCHER_32Offset) {
        builder.addFieldOffset(30, FLETCHER_32Offset, 0);
    }
    static addLunhAlgorithm(builder, LUNH_ALGORITHMOffset) {
        builder.addFieldOffset(31, LUNH_ALGORITHMOffset, 0);
    }
    static addVerhoeffAlgorithm(builder, VERHOEFF_ALGORITHMOffset) {
        builder.addFieldOffset(32, VERHOEFF_ALGORITHMOffset, 0);
    }
    static addDammAlgorithm(builder, DAMM_ALGORITHMOffset) {
        builder.addFieldOffset(33, DAMM_ALGORITHMOffset, 0);
    }
    static addTabulationHashing(builder, TABULATION_HASHINGOffset) {
        builder.addFieldOffset(34, TABULATION_HASHINGOffset, 0);
    }
    static addUniversalOneWayHashFunction(builder, UNIVERSAL_ONE_WAY_HASH_FUNCTIONOffset) {
        builder.addFieldOffset(35, UNIVERSAL_ONE_WAY_HASH_FUNCTIONOffset, 0);
    }
    static addZobristHashing(builder, ZOBRIST_HASHINGOffset) {
        builder.addFieldOffset(36, ZOBRIST_HASHINGOffset, 0);
    }
    static addPaulHsiehsSuperfasthash(builder, PAUL_HSIEHS_SUPERFASTHASHOffset) {
        builder.addFieldOffset(37, PAUL_HSIEHS_SUPERFASTHASHOffset, 0);
    }
    static addBuzhash(builder, BUZHASHOffset) {
        builder.addFieldOffset(38, BUZHASHOffset, 0);
    }
    static addFnvHash(builder, FNV_HASHOffset) {
        builder.addFieldOffset(39, FNV_HASHOffset, 0);
    }
    static addJenkinsHashFunction(builder, JENKINS_HASH_FUNCTIONOffset) {
        builder.addFieldOffset(40, JENKINS_HASH_FUNCTIONOffset, 0);
    }
    static addBernsteinsHashDjb2(builder, BERNSTEINS_HASH_DJB2Offset) {
        builder.addFieldOffset(41, BERNSTEINS_HASH_DJB2Offset, 0);
    }
    static addPjwHashElfHash(builder, PJW_HASH_ELF_HASHOffset) {
        builder.addFieldOffset(42, PJW_HASH_ELF_HASHOffset, 0);
    }
    static addMurmurhash(builder, MURMURHASHOffset) {
        builder.addFieldOffset(43, MURMURHASHOffset, 0);
    }
    static addFastHash(builder, FAST_HASHOffset) {
        builder.addFieldOffset(44, FAST_HASHOffset, 0);
    }
    static addSpookyhash(builder, SPOOKYHASHOffset) {
        builder.addFieldOffset(45, SPOOKYHASHOffset, 0);
    }
    static addCityhash(builder, CITYHASHOffset) {
        builder.addFieldOffset(46, CITYHASHOffset, 0);
    }
    static addFarmhash(builder, FARMHASHOffset) {
        builder.addFieldOffset(47, FARMHASHOffset, 0);
    }
    static addMetrohash(builder, METROHASHOffset) {
        builder.addFieldOffset(48, METROHASHOffset, 0);
    }
    static addNumericHash(builder, NUMERIC_HASHOffset) {
        builder.addFieldOffset(49, NUMERIC_HASHOffset, 0);
    }
    static addXxhash(builder, XXHASHOffset) {
        builder.addFieldOffset(50, XXHASHOffset, 0);
    }
    static addT1Ha(builder, T1HAOffset) {
        builder.addFieldOffset(51, T1HAOffset, 0);
    }
    static addGxhash(builder, GXHASHOffset) {
        builder.addFieldOffset(52, GXHASHOffset, 0);
    }
    static addPhash(builder, PHASHOffset) {
        builder.addFieldOffset(53, PHASHOffset, 0);
    }
    static addDhash(builder, DHASHOffset) {
        builder.addFieldOffset(54, DHASHOffset, 0);
    }
    static addSdbm(builder, SDBMOffset) {
        builder.addFieldOffset(55, SDBMOffset, 0);
    }
    static addOsdbHash(builder, OSDB_HASHOffset) {
        builder.addFieldOffset(56, OSDB_HASHOffset, 0);
    }
    static addKomihash(builder, KOMIHASHOffset) {
        builder.addFieldOffset(57, KOMIHASHOffset, 0);
    }
    static addBlake3(builder, BLAKE3Offset) {
        builder.addFieldOffset(58, BLAKE3Offset, 0);
    }
    static addEcoh(builder, ECOHOffset) {
        builder.addFieldOffset(59, ECOHOffset, 0);
    }
    static addFsb(builder, FSBOffset) {
        builder.addFieldOffset(60, FSBOffset, 0);
    }
    static addGost(builder, GOSTOffset) {
        builder.addFieldOffset(61, GOSTOffset, 0);
    }
    static addGrostl(builder, GROSTLOffset) {
        builder.addFieldOffset(62, GROSTLOffset, 0);
    }
    static addHas160(builder, HAS_160Offset) {
        builder.addFieldOffset(63, HAS_160Offset, 0);
    }
    static addHaval(builder, HAVALOffset) {
        builder.addFieldOffset(64, HAVALOffset, 0);
    }
    static addJh(builder, JHOffset) {
        builder.addFieldOffset(65, JHOffset, 0);
    }
    static addLsh(builder, LSHOffset) {
        builder.addFieldOffset(66, LSHOffset, 0);
    }
    static addMd2(builder, MD2Offset) {
        builder.addFieldOffset(67, MD2Offset, 0);
    }
    static addMd4(builder, MD4Offset) {
        builder.addFieldOffset(68, MD4Offset, 0);
    }
    static addMd5(builder, MD5Offset) {
        builder.addFieldOffset(69, MD5Offset, 0);
    }
    static addMd6(builder, MD6Offset) {
        builder.addFieldOffset(70, MD6Offset, 0);
    }
    static addRadiogatun(builder, RADIOGATUNOffset) {
        builder.addFieldOffset(71, RADIOGATUNOffset, 0);
    }
    static addRipemd(builder, RIPEMDOffset) {
        builder.addFieldOffset(72, RIPEMDOffset, 0);
    }
    static addRipemd128(builder, RIPEMD_128Offset) {
        builder.addFieldOffset(73, RIPEMD_128Offset, 0);
    }
    static addRipemd256(builder, RIPEMD_256Offset) {
        builder.addFieldOffset(74, RIPEMD_256Offset, 0);
    }
    static addRipemd320(builder, RIPEMD_320Offset) {
        builder.addFieldOffset(75, RIPEMD_320Offset, 0);
    }
    static addSha1(builder, SHA_1Offset) {
        builder.addFieldOffset(76, SHA_1Offset, 0);
    }
    static addSha224(builder, SHA_224Offset) {
        builder.addFieldOffset(77, SHA_224Offset, 0);
    }
    static addSha256(builder, SHA_256Offset) {
        builder.addFieldOffset(78, SHA_256Offset, 0);
    }
    static addSha384(builder, SHA_384Offset) {
        builder.addFieldOffset(79, SHA_384Offset, 0);
    }
    static addSha512(builder, SHA_512Offset) {
        builder.addFieldOffset(80, SHA_512Offset, 0);
    }
    static addSha3(builder, SHA_3Offset) {
        builder.addFieldOffset(81, SHA_3Offset, 0);
    }
    static addSkein(builder, SKEINOffset) {
        builder.addFieldOffset(82, SKEINOffset, 0);
    }
    static addSnefru(builder, SNEFRUOffset) {
        builder.addFieldOffset(83, SNEFRUOffset, 0);
    }
    static addSpectralHash(builder, SPECTRAL_HASHOffset) {
        builder.addFieldOffset(84, SPECTRAL_HASHOffset, 0);
    }
    static addStreebog(builder, STREEBOGOffset) {
        builder.addFieldOffset(85, STREEBOGOffset, 0);
    }
    static addSwifft(builder, SWIFFTOffset) {
        builder.addFieldOffset(86, SWIFFTOffset, 0);
    }
    static addTiger(builder, TIGEROffset) {
        builder.addFieldOffset(87, TIGEROffset, 0);
    }
    static addWhirlpool(builder, WHIRLPOOLOffset) {
        builder.addFieldOffset(88, WHIRLPOOLOffset, 0);
    }
    static endPNM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishPNMBuffer(builder, offset) {
        builder.finish(offset, '$PNM');
    }
    static finishSizePrefixedPNMBuffer(builder, offset) {
        builder.finish(offset, '$PNM', true);
    }
    static createPNM(builder, IPFS_CIDOffset, ETH_DIGITAL_SIGNATUREOffset, SHA_512_FILE_HASHOffset, SHA_256_FILE_HASHOffset, MD5_FILE_DIGESTOffset, SHA_1_FILE_HASHOffset, ARGON2_FILE_HASHOffset, BLAKE2B_FILE_HASHOffset, SHA_3_FILE_HASHOffset, RIPEMD_160_FILE_HASHOffset, WHIRLPOOL_FILE_HASHOffset, TIGER_FILE_HASHOffset, CRC32Offset, ADLER32_CHECKSUMOffset, RABIN_FINGERPRINTOffset, PEARSON_HASHINGOffset, BLAKE2_KEYED_HASHOffset, BLAKE_256Offset, CRC8Offset, CRC16Offset, CRC64Offset, BSD_CHECKSUMOffset, SYSV_CHECKSUMOffset, SUM8Offset, INTERNET_CHECKSUMOffset, SUM24Offset, SUM32Offset, FLETCHER_4Offset, FLETCHER_8Offset, FLETCHER_16Offset, FLETCHER_32Offset, LUNH_ALGORITHMOffset, VERHOEFF_ALGORITHMOffset, DAMM_ALGORITHMOffset, TABULATION_HASHINGOffset, UNIVERSAL_ONE_WAY_HASH_FUNCTIONOffset, ZOBRIST_HASHINGOffset, PAUL_HSIEHS_SUPERFASTHASHOffset, BUZHASHOffset, FNV_HASHOffset, JENKINS_HASH_FUNCTIONOffset, BERNSTEINS_HASH_DJB2Offset, PJW_HASH_ELF_HASHOffset, MURMURHASHOffset, FAST_HASHOffset, SPOOKYHASHOffset, CITYHASHOffset, FARMHASHOffset, METROHASHOffset, NUMERIC_HASHOffset, XXHASHOffset, T1HAOffset, GXHASHOffset, PHASHOffset, DHASHOffset, SDBMOffset, OSDB_HASHOffset, KOMIHASHOffset, BLAKE3Offset, ECOHOffset, FSBOffset, GOSTOffset, GROSTLOffset, HAS_160Offset, HAVALOffset, JHOffset, LSHOffset, MD2Offset, MD4Offset, MD5Offset, MD6Offset, RADIOGATUNOffset, RIPEMDOffset, RIPEMD_128Offset, RIPEMD_256Offset, RIPEMD_320Offset, SHA_1Offset, SHA_224Offset, SHA_256Offset, SHA_384Offset, SHA_512Offset, SHA_3Offset, SKEINOffset, SNEFRUOffset, SPECTRAL_HASHOffset, STREEBOGOffset, SWIFFTOffset, TIGEROffset, WHIRLPOOLOffset) {
        PNM.startPNM(builder);
        PNM.addIpfsCid(builder, IPFS_CIDOffset);
        PNM.addEthDigitalSignature(builder, ETH_DIGITAL_SIGNATUREOffset);
        PNM.addSha512FileHash(builder, SHA_512_FILE_HASHOffset);
        PNM.addSha256FileHash(builder, SHA_256_FILE_HASHOffset);
        PNM.addMd5FileDigest(builder, MD5_FILE_DIGESTOffset);
        PNM.addSha1FileHash(builder, SHA_1_FILE_HASHOffset);
        PNM.addArgon2FileHash(builder, ARGON2_FILE_HASHOffset);
        PNM.addBlake2BFileHash(builder, BLAKE2B_FILE_HASHOffset);
        PNM.addSha3FileHash(builder, SHA_3_FILE_HASHOffset);
        PNM.addRipemd160FileHash(builder, RIPEMD_160_FILE_HASHOffset);
        PNM.addWhirlpoolFileHash(builder, WHIRLPOOL_FILE_HASHOffset);
        PNM.addTigerFileHash(builder, TIGER_FILE_HASHOffset);
        PNM.addCrc32(builder, CRC32Offset);
        PNM.addAdler32Checksum(builder, ADLER32_CHECKSUMOffset);
        PNM.addRabinFingerprint(builder, RABIN_FINGERPRINTOffset);
        PNM.addPearsonHashing(builder, PEARSON_HASHINGOffset);
        PNM.addBlake2KeyedHash(builder, BLAKE2_KEYED_HASHOffset);
        PNM.addBlake256(builder, BLAKE_256Offset);
        PNM.addCrc8(builder, CRC8Offset);
        PNM.addCrc16(builder, CRC16Offset);
        PNM.addCrc64(builder, CRC64Offset);
        PNM.addBsdChecksum(builder, BSD_CHECKSUMOffset);
        PNM.addSysvChecksum(builder, SYSV_CHECKSUMOffset);
        PNM.addSum8(builder, SUM8Offset);
        PNM.addInternetChecksum(builder, INTERNET_CHECKSUMOffset);
        PNM.addSum24(builder, SUM24Offset);
        PNM.addSum32(builder, SUM32Offset);
        PNM.addFletcher4(builder, FLETCHER_4Offset);
        PNM.addFletcher8(builder, FLETCHER_8Offset);
        PNM.addFletcher16(builder, FLETCHER_16Offset);
        PNM.addFletcher32(builder, FLETCHER_32Offset);
        PNM.addLunhAlgorithm(builder, LUNH_ALGORITHMOffset);
        PNM.addVerhoeffAlgorithm(builder, VERHOEFF_ALGORITHMOffset);
        PNM.addDammAlgorithm(builder, DAMM_ALGORITHMOffset);
        PNM.addTabulationHashing(builder, TABULATION_HASHINGOffset);
        PNM.addUniversalOneWayHashFunction(builder, UNIVERSAL_ONE_WAY_HASH_FUNCTIONOffset);
        PNM.addZobristHashing(builder, ZOBRIST_HASHINGOffset);
        PNM.addPaulHsiehsSuperfasthash(builder, PAUL_HSIEHS_SUPERFASTHASHOffset);
        PNM.addBuzhash(builder, BUZHASHOffset);
        PNM.addFnvHash(builder, FNV_HASHOffset);
        PNM.addJenkinsHashFunction(builder, JENKINS_HASH_FUNCTIONOffset);
        PNM.addBernsteinsHashDjb2(builder, BERNSTEINS_HASH_DJB2Offset);
        PNM.addPjwHashElfHash(builder, PJW_HASH_ELF_HASHOffset);
        PNM.addMurmurhash(builder, MURMURHASHOffset);
        PNM.addFastHash(builder, FAST_HASHOffset);
        PNM.addSpookyhash(builder, SPOOKYHASHOffset);
        PNM.addCityhash(builder, CITYHASHOffset);
        PNM.addFarmhash(builder, FARMHASHOffset);
        PNM.addMetrohash(builder, METROHASHOffset);
        PNM.addNumericHash(builder, NUMERIC_HASHOffset);
        PNM.addXxhash(builder, XXHASHOffset);
        PNM.addT1Ha(builder, T1HAOffset);
        PNM.addGxhash(builder, GXHASHOffset);
        PNM.addPhash(builder, PHASHOffset);
        PNM.addDhash(builder, DHASHOffset);
        PNM.addSdbm(builder, SDBMOffset);
        PNM.addOsdbHash(builder, OSDB_HASHOffset);
        PNM.addKomihash(builder, KOMIHASHOffset);
        PNM.addBlake3(builder, BLAKE3Offset);
        PNM.addEcoh(builder, ECOHOffset);
        PNM.addFsb(builder, FSBOffset);
        PNM.addGost(builder, GOSTOffset);
        PNM.addGrostl(builder, GROSTLOffset);
        PNM.addHas160(builder, HAS_160Offset);
        PNM.addHaval(builder, HAVALOffset);
        PNM.addJh(builder, JHOffset);
        PNM.addLsh(builder, LSHOffset);
        PNM.addMd2(builder, MD2Offset);
        PNM.addMd4(builder, MD4Offset);
        PNM.addMd5(builder, MD5Offset);
        PNM.addMd6(builder, MD6Offset);
        PNM.addRadiogatun(builder, RADIOGATUNOffset);
        PNM.addRipemd(builder, RIPEMDOffset);
        PNM.addRipemd128(builder, RIPEMD_128Offset);
        PNM.addRipemd256(builder, RIPEMD_256Offset);
        PNM.addRipemd320(builder, RIPEMD_320Offset);
        PNM.addSha1(builder, SHA_1Offset);
        PNM.addSha224(builder, SHA_224Offset);
        PNM.addSha256(builder, SHA_256Offset);
        PNM.addSha384(builder, SHA_384Offset);
        PNM.addSha512(builder, SHA_512Offset);
        PNM.addSha3(builder, SHA_3Offset);
        PNM.addSkein(builder, SKEINOffset);
        PNM.addSnefru(builder, SNEFRUOffset);
        PNM.addSpectralHash(builder, SPECTRAL_HASHOffset);
        PNM.addStreebog(builder, STREEBOGOffset);
        PNM.addSwifft(builder, SWIFFTOffset);
        PNM.addTiger(builder, TIGEROffset);
        PNM.addWhirlpool(builder, WHIRLPOOLOffset);
        return PNM.endPNM(builder);
    }
    unpack() {
        return new PNMT(this.IPFS_CID(), this.ETH_DIGITAL_SIGNATURE(), this.SHA_512_FILE_HASH(), this.SHA_256_FILE_HASH(), this.MD5_FILE_DIGEST(), this.SHA_1_FILE_HASH(), this.ARGON2_FILE_HASH(), this.BLAKE2B_FILE_HASH(), this.SHA_3_FILE_HASH(), this.RIPEMD_160_FILE_HASH(), this.WHIRLPOOL_FILE_HASH(), this.TIGER_FILE_HASH(), this.CRC32(), this.ADLER32_CHECKSUM(), this.RABIN_FINGERPRINT(), this.PEARSON_HASHING(), this.BLAKE2_KEYED_HASH(), this.BLAKE_256(), this.CRC8(), this.CRC16(), this.CRC64(), this.BSD_CHECKSUM(), this.SYSV_CHECKSUM(), this.SUM8(), this.INTERNET_CHECKSUM(), this.SUM24(), this.SUM32(), this.FLETCHER_4(), this.FLETCHER_8(), this.FLETCHER_16(), this.FLETCHER_32(), this.LUNH_ALGORITHM(), this.VERHOEFF_ALGORITHM(), this.DAMM_ALGORITHM(), this.TABULATION_HASHING(), this.UNIVERSAL_ONE_WAY_HASH_FUNCTION(), this.ZOBRIST_HASHING(), this.PAUL_HSIEHS_SUPERFASTHASH(), this.BUZHASH(), this.FNV_HASH(), this.JENKINS_HASH_FUNCTION(), this.BERNSTEINS_HASH_DJB2(), this.PJW_HASH_ELF_HASH(), this.MURMURHASH(), this.FAST_HASH(), this.SPOOKYHASH(), this.CITYHASH(), this.FARMHASH(), this.METROHASH(), this.NUMERIC_HASH(), this.XXHASH(), this.T1HA(), this.GXHASH(), this.PHASH(), this.DHASH(), this.SDBM(), this.OSDB_HASH(), this.KOMIHASH(), this.BLAKE3(), this.ECOH(), this.FSB(), this.GOST(), this.GROSTL(), this.HAS_160(), this.HAVAL(), this.JH(), this.LSH(), this.MD2(), this.MD4(), this.MD5(), this.MD6(), this.RADIOGATUN(), this.RIPEMD(), this.RIPEMD_128(), this.RIPEMD_256(), this.RIPEMD_320(), this.SHA_1(), this.SHA_224(), this.SHA_256(), this.SHA_384(), this.SHA_512(), this.SHA_3(), this.SKEIN(), this.SNEFRU(), this.SPECTRAL_HASH(), this.STREEBOG(), this.SWIFFT(), this.TIGER(), this.WHIRLPOOL());
    }
    unpackTo(_o) {
        _o.IPFS_CID = this.IPFS_CID();
        _o.ETH_DIGITAL_SIGNATURE = this.ETH_DIGITAL_SIGNATURE();
        _o.SHA_512_FILE_HASH = this.SHA_512_FILE_HASH();
        _o.SHA_256_FILE_HASH = this.SHA_256_FILE_HASH();
        _o.MD5_FILE_DIGEST = this.MD5_FILE_DIGEST();
        _o.SHA_1_FILE_HASH = this.SHA_1_FILE_HASH();
        _o.ARGON2_FILE_HASH = this.ARGON2_FILE_HASH();
        _o.BLAKE2B_FILE_HASH = this.BLAKE2B_FILE_HASH();
        _o.SHA_3_FILE_HASH = this.SHA_3_FILE_HASH();
        _o.RIPEMD_160_FILE_HASH = this.RIPEMD_160_FILE_HASH();
        _o.WHIRLPOOL_FILE_HASH = this.WHIRLPOOL_FILE_HASH();
        _o.TIGER_FILE_HASH = this.TIGER_FILE_HASH();
        _o.CRC32 = this.CRC32();
        _o.ADLER32_CHECKSUM = this.ADLER32_CHECKSUM();
        _o.RABIN_FINGERPRINT = this.RABIN_FINGERPRINT();
        _o.PEARSON_HASHING = this.PEARSON_HASHING();
        _o.BLAKE2_KEYED_HASH = this.BLAKE2_KEYED_HASH();
        _o.BLAKE_256 = this.BLAKE_256();
        _o.CRC8 = this.CRC8();
        _o.CRC16 = this.CRC16();
        _o.CRC64 = this.CRC64();
        _o.BSD_CHECKSUM = this.BSD_CHECKSUM();
        _o.SYSV_CHECKSUM = this.SYSV_CHECKSUM();
        _o.SUM8 = this.SUM8();
        _o.INTERNET_CHECKSUM = this.INTERNET_CHECKSUM();
        _o.SUM24 = this.SUM24();
        _o.SUM32 = this.SUM32();
        _o.FLETCHER_4 = this.FLETCHER_4();
        _o.FLETCHER_8 = this.FLETCHER_8();
        _o.FLETCHER_16 = this.FLETCHER_16();
        _o.FLETCHER_32 = this.FLETCHER_32();
        _o.LUNH_ALGORITHM = this.LUNH_ALGORITHM();
        _o.VERHOEFF_ALGORITHM = this.VERHOEFF_ALGORITHM();
        _o.DAMM_ALGORITHM = this.DAMM_ALGORITHM();
        _o.TABULATION_HASHING = this.TABULATION_HASHING();
        _o.UNIVERSAL_ONE_WAY_HASH_FUNCTION = this.UNIVERSAL_ONE_WAY_HASH_FUNCTION();
        _o.ZOBRIST_HASHING = this.ZOBRIST_HASHING();
        _o.PAUL_HSIEHS_SUPERFASTHASH = this.PAUL_HSIEHS_SUPERFASTHASH();
        _o.BUZHASH = this.BUZHASH();
        _o.FNV_HASH = this.FNV_HASH();
        _o.JENKINS_HASH_FUNCTION = this.JENKINS_HASH_FUNCTION();
        _o.BERNSTEINS_HASH_DJB2 = this.BERNSTEINS_HASH_DJB2();
        _o.PJW_HASH_ELF_HASH = this.PJW_HASH_ELF_HASH();
        _o.MURMURHASH = this.MURMURHASH();
        _o.FAST_HASH = this.FAST_HASH();
        _o.SPOOKYHASH = this.SPOOKYHASH();
        _o.CITYHASH = this.CITYHASH();
        _o.FARMHASH = this.FARMHASH();
        _o.METROHASH = this.METROHASH();
        _o.NUMERIC_HASH = this.NUMERIC_HASH();
        _o.XXHASH = this.XXHASH();
        _o.T1HA = this.T1HA();
        _o.GXHASH = this.GXHASH();
        _o.PHASH = this.PHASH();
        _o.DHASH = this.DHASH();
        _o.SDBM = this.SDBM();
        _o.OSDB_HASH = this.OSDB_HASH();
        _o.KOMIHASH = this.KOMIHASH();
        _o.BLAKE3 = this.BLAKE3();
        _o.ECOH = this.ECOH();
        _o.FSB = this.FSB();
        _o.GOST = this.GOST();
        _o.GROSTL = this.GROSTL();
        _o.HAS_160 = this.HAS_160();
        _o.HAVAL = this.HAVAL();
        _o.JH = this.JH();
        _o.LSH = this.LSH();
        _o.MD2 = this.MD2();
        _o.MD4 = this.MD4();
        _o.MD5 = this.MD5();
        _o.MD6 = this.MD6();
        _o.RADIOGATUN = this.RADIOGATUN();
        _o.RIPEMD = this.RIPEMD();
        _o.RIPEMD_128 = this.RIPEMD_128();
        _o.RIPEMD_256 = this.RIPEMD_256();
        _o.RIPEMD_320 = this.RIPEMD_320();
        _o.SHA_1 = this.SHA_1();
        _o.SHA_224 = this.SHA_224();
        _o.SHA_256 = this.SHA_256();
        _o.SHA_384 = this.SHA_384();
        _o.SHA_512 = this.SHA_512();
        _o.SHA_3 = this.SHA_3();
        _o.SKEIN = this.SKEIN();
        _o.SNEFRU = this.SNEFRU();
        _o.SPECTRAL_HASH = this.SPECTRAL_HASH();
        _o.STREEBOG = this.STREEBOG();
        _o.SWIFFT = this.SWIFFT();
        _o.TIGER = this.TIGER();
        _o.WHIRLPOOL = this.WHIRLPOOL();
    }
}
export class PNMT {
    constructor(IPFS_CID = null, ETH_DIGITAL_SIGNATURE = null, SHA_512_FILE_HASH = null, SHA_256_FILE_HASH = null, MD5_FILE_DIGEST = null, SHA_1_FILE_HASH = null, ARGON2_FILE_HASH = null, BLAKE2B_FILE_HASH = null, SHA_3_FILE_HASH = null, RIPEMD_160_FILE_HASH = null, WHIRLPOOL_FILE_HASH = null, TIGER_FILE_HASH = null, CRC32 = null, ADLER32_CHECKSUM = null, RABIN_FINGERPRINT = null, PEARSON_HASHING = null, BLAKE2_KEYED_HASH = null, BLAKE_256 = null, CRC8 = null, CRC16 = null, CRC64 = null, BSD_CHECKSUM = null, SYSV_CHECKSUM = null, SUM8 = null, INTERNET_CHECKSUM = null, SUM24 = null, SUM32 = null, FLETCHER_4 = null, FLETCHER_8 = null, FLETCHER_16 = null, FLETCHER_32 = null, LUNH_ALGORITHM = null, VERHOEFF_ALGORITHM = null, DAMM_ALGORITHM = null, TABULATION_HASHING = null, UNIVERSAL_ONE_WAY_HASH_FUNCTION = null, ZOBRIST_HASHING = null, PAUL_HSIEHS_SUPERFASTHASH = null, BUZHASH = null, FNV_HASH = null, JENKINS_HASH_FUNCTION = null, BERNSTEINS_HASH_DJB2 = null, PJW_HASH_ELF_HASH = null, MURMURHASH = null, FAST_HASH = null, SPOOKYHASH = null, CITYHASH = null, FARMHASH = null, METROHASH = null, NUMERIC_HASH = null, XXHASH = null, T1HA = null, GXHASH = null, PHASH = null, DHASH = null, SDBM = null, OSDB_HASH = null, KOMIHASH = null, BLAKE3 = null, ECOH = null, FSB = null, GOST = null, GROSTL = null, HAS_160 = null, HAVAL = null, JH = null, LSH = null, MD2 = null, MD4 = null, MD5 = null, MD6 = null, RADIOGATUN = null, RIPEMD = null, RIPEMD_128 = null, RIPEMD_256 = null, RIPEMD_320 = null, SHA_1 = null, SHA_224 = null, SHA_256 = null, SHA_384 = null, SHA_512 = null, SHA_3 = null, SKEIN = null, SNEFRU = null, SPECTRAL_HASH = null, STREEBOG = null, SWIFFT = null, TIGER = null, WHIRLPOOL = null) {
        this.IPFS_CID = IPFS_CID;
        this.ETH_DIGITAL_SIGNATURE = ETH_DIGITAL_SIGNATURE;
        this.SHA_512_FILE_HASH = SHA_512_FILE_HASH;
        this.SHA_256_FILE_HASH = SHA_256_FILE_HASH;
        this.MD5_FILE_DIGEST = MD5_FILE_DIGEST;
        this.SHA_1_FILE_HASH = SHA_1_FILE_HASH;
        this.ARGON2_FILE_HASH = ARGON2_FILE_HASH;
        this.BLAKE2B_FILE_HASH = BLAKE2B_FILE_HASH;
        this.SHA_3_FILE_HASH = SHA_3_FILE_HASH;
        this.RIPEMD_160_FILE_HASH = RIPEMD_160_FILE_HASH;
        this.WHIRLPOOL_FILE_HASH = WHIRLPOOL_FILE_HASH;
        this.TIGER_FILE_HASH = TIGER_FILE_HASH;
        this.CRC32 = CRC32;
        this.ADLER32_CHECKSUM = ADLER32_CHECKSUM;
        this.RABIN_FINGERPRINT = RABIN_FINGERPRINT;
        this.PEARSON_HASHING = PEARSON_HASHING;
        this.BLAKE2_KEYED_HASH = BLAKE2_KEYED_HASH;
        this.BLAKE_256 = BLAKE_256;
        this.CRC8 = CRC8;
        this.CRC16 = CRC16;
        this.CRC64 = CRC64;
        this.BSD_CHECKSUM = BSD_CHECKSUM;
        this.SYSV_CHECKSUM = SYSV_CHECKSUM;
        this.SUM8 = SUM8;
        this.INTERNET_CHECKSUM = INTERNET_CHECKSUM;
        this.SUM24 = SUM24;
        this.SUM32 = SUM32;
        this.FLETCHER_4 = FLETCHER_4;
        this.FLETCHER_8 = FLETCHER_8;
        this.FLETCHER_16 = FLETCHER_16;
        this.FLETCHER_32 = FLETCHER_32;
        this.LUNH_ALGORITHM = LUNH_ALGORITHM;
        this.VERHOEFF_ALGORITHM = VERHOEFF_ALGORITHM;
        this.DAMM_ALGORITHM = DAMM_ALGORITHM;
        this.TABULATION_HASHING = TABULATION_HASHING;
        this.UNIVERSAL_ONE_WAY_HASH_FUNCTION = UNIVERSAL_ONE_WAY_HASH_FUNCTION;
        this.ZOBRIST_HASHING = ZOBRIST_HASHING;
        this.PAUL_HSIEHS_SUPERFASTHASH = PAUL_HSIEHS_SUPERFASTHASH;
        this.BUZHASH = BUZHASH;
        this.FNV_HASH = FNV_HASH;
        this.JENKINS_HASH_FUNCTION = JENKINS_HASH_FUNCTION;
        this.BERNSTEINS_HASH_DJB2 = BERNSTEINS_HASH_DJB2;
        this.PJW_HASH_ELF_HASH = PJW_HASH_ELF_HASH;
        this.MURMURHASH = MURMURHASH;
        this.FAST_HASH = FAST_HASH;
        this.SPOOKYHASH = SPOOKYHASH;
        this.CITYHASH = CITYHASH;
        this.FARMHASH = FARMHASH;
        this.METROHASH = METROHASH;
        this.NUMERIC_HASH = NUMERIC_HASH;
        this.XXHASH = XXHASH;
        this.T1HA = T1HA;
        this.GXHASH = GXHASH;
        this.PHASH = PHASH;
        this.DHASH = DHASH;
        this.SDBM = SDBM;
        this.OSDB_HASH = OSDB_HASH;
        this.KOMIHASH = KOMIHASH;
        this.BLAKE3 = BLAKE3;
        this.ECOH = ECOH;
        this.FSB = FSB;
        this.GOST = GOST;
        this.GROSTL = GROSTL;
        this.HAS_160 = HAS_160;
        this.HAVAL = HAVAL;
        this.JH = JH;
        this.LSH = LSH;
        this.MD2 = MD2;
        this.MD4 = MD4;
        this.MD5 = MD5;
        this.MD6 = MD6;
        this.RADIOGATUN = RADIOGATUN;
        this.RIPEMD = RIPEMD;
        this.RIPEMD_128 = RIPEMD_128;
        this.RIPEMD_256 = RIPEMD_256;
        this.RIPEMD_320 = RIPEMD_320;
        this.SHA_1 = SHA_1;
        this.SHA_224 = SHA_224;
        this.SHA_256 = SHA_256;
        this.SHA_384 = SHA_384;
        this.SHA_512 = SHA_512;
        this.SHA_3 = SHA_3;
        this.SKEIN = SKEIN;
        this.SNEFRU = SNEFRU;
        this.SPECTRAL_HASH = SPECTRAL_HASH;
        this.STREEBOG = STREEBOG;
        this.SWIFFT = SWIFFT;
        this.TIGER = TIGER;
        this.WHIRLPOOL = WHIRLPOOL;
    }
    pack(builder) {
        const IPFS_CID = (this.IPFS_CID !== null ? builder.createString(this.IPFS_CID) : 0);
        const ETH_DIGITAL_SIGNATURE = (this.ETH_DIGITAL_SIGNATURE !== null ? builder.createString(this.ETH_DIGITAL_SIGNATURE) : 0);
        const SHA_512_FILE_HASH = (this.SHA_512_FILE_HASH !== null ? builder.createString(this.SHA_512_FILE_HASH) : 0);
        const SHA_256_FILE_HASH = (this.SHA_256_FILE_HASH !== null ? builder.createString(this.SHA_256_FILE_HASH) : 0);
        const MD5_FILE_DIGEST = (this.MD5_FILE_DIGEST !== null ? builder.createString(this.MD5_FILE_DIGEST) : 0);
        const SHA_1_FILE_HASH = (this.SHA_1_FILE_HASH !== null ? builder.createString(this.SHA_1_FILE_HASH) : 0);
        const ARGON2_FILE_HASH = (this.ARGON2_FILE_HASH !== null ? builder.createString(this.ARGON2_FILE_HASH) : 0);
        const BLAKE2B_FILE_HASH = (this.BLAKE2B_FILE_HASH !== null ? builder.createString(this.BLAKE2B_FILE_HASH) : 0);
        const SHA_3_FILE_HASH = (this.SHA_3_FILE_HASH !== null ? builder.createString(this.SHA_3_FILE_HASH) : 0);
        const RIPEMD_160_FILE_HASH = (this.RIPEMD_160_FILE_HASH !== null ? builder.createString(this.RIPEMD_160_FILE_HASH) : 0);
        const WHIRLPOOL_FILE_HASH = (this.WHIRLPOOL_FILE_HASH !== null ? builder.createString(this.WHIRLPOOL_FILE_HASH) : 0);
        const TIGER_FILE_HASH = (this.TIGER_FILE_HASH !== null ? builder.createString(this.TIGER_FILE_HASH) : 0);
        const CRC32 = (this.CRC32 !== null ? builder.createString(this.CRC32) : 0);
        const ADLER32_CHECKSUM = (this.ADLER32_CHECKSUM !== null ? builder.createString(this.ADLER32_CHECKSUM) : 0);
        const RABIN_FINGERPRINT = (this.RABIN_FINGERPRINT !== null ? builder.createString(this.RABIN_FINGERPRINT) : 0);
        const PEARSON_HASHING = (this.PEARSON_HASHING !== null ? builder.createString(this.PEARSON_HASHING) : 0);
        const BLAKE2_KEYED_HASH = (this.BLAKE2_KEYED_HASH !== null ? builder.createString(this.BLAKE2_KEYED_HASH) : 0);
        const BLAKE_256 = (this.BLAKE_256 !== null ? builder.createString(this.BLAKE_256) : 0);
        const CRC8 = (this.CRC8 !== null ? builder.createString(this.CRC8) : 0);
        const CRC16 = (this.CRC16 !== null ? builder.createString(this.CRC16) : 0);
        const CRC64 = (this.CRC64 !== null ? builder.createString(this.CRC64) : 0);
        const BSD_CHECKSUM = (this.BSD_CHECKSUM !== null ? builder.createString(this.BSD_CHECKSUM) : 0);
        const SYSV_CHECKSUM = (this.SYSV_CHECKSUM !== null ? builder.createString(this.SYSV_CHECKSUM) : 0);
        const SUM8 = (this.SUM8 !== null ? builder.createString(this.SUM8) : 0);
        const INTERNET_CHECKSUM = (this.INTERNET_CHECKSUM !== null ? builder.createString(this.INTERNET_CHECKSUM) : 0);
        const SUM24 = (this.SUM24 !== null ? builder.createString(this.SUM24) : 0);
        const SUM32 = (this.SUM32 !== null ? builder.createString(this.SUM32) : 0);
        const FLETCHER_4 = (this.FLETCHER_4 !== null ? builder.createString(this.FLETCHER_4) : 0);
        const FLETCHER_8 = (this.FLETCHER_8 !== null ? builder.createString(this.FLETCHER_8) : 0);
        const FLETCHER_16 = (this.FLETCHER_16 !== null ? builder.createString(this.FLETCHER_16) : 0);
        const FLETCHER_32 = (this.FLETCHER_32 !== null ? builder.createString(this.FLETCHER_32) : 0);
        const LUNH_ALGORITHM = (this.LUNH_ALGORITHM !== null ? builder.createString(this.LUNH_ALGORITHM) : 0);
        const VERHOEFF_ALGORITHM = (this.VERHOEFF_ALGORITHM !== null ? builder.createString(this.VERHOEFF_ALGORITHM) : 0);
        const DAMM_ALGORITHM = (this.DAMM_ALGORITHM !== null ? builder.createString(this.DAMM_ALGORITHM) : 0);
        const TABULATION_HASHING = (this.TABULATION_HASHING !== null ? builder.createString(this.TABULATION_HASHING) : 0);
        const UNIVERSAL_ONE_WAY_HASH_FUNCTION = (this.UNIVERSAL_ONE_WAY_HASH_FUNCTION !== null ? builder.createString(this.UNIVERSAL_ONE_WAY_HASH_FUNCTION) : 0);
        const ZOBRIST_HASHING = (this.ZOBRIST_HASHING !== null ? builder.createString(this.ZOBRIST_HASHING) : 0);
        const PAUL_HSIEHS_SUPERFASTHASH = (this.PAUL_HSIEHS_SUPERFASTHASH !== null ? builder.createString(this.PAUL_HSIEHS_SUPERFASTHASH) : 0);
        const BUZHASH = (this.BUZHASH !== null ? builder.createString(this.BUZHASH) : 0);
        const FNV_HASH = (this.FNV_HASH !== null ? builder.createString(this.FNV_HASH) : 0);
        const JENKINS_HASH_FUNCTION = (this.JENKINS_HASH_FUNCTION !== null ? builder.createString(this.JENKINS_HASH_FUNCTION) : 0);
        const BERNSTEINS_HASH_DJB2 = (this.BERNSTEINS_HASH_DJB2 !== null ? builder.createString(this.BERNSTEINS_HASH_DJB2) : 0);
        const PJW_HASH_ELF_HASH = (this.PJW_HASH_ELF_HASH !== null ? builder.createString(this.PJW_HASH_ELF_HASH) : 0);
        const MURMURHASH = (this.MURMURHASH !== null ? builder.createString(this.MURMURHASH) : 0);
        const FAST_HASH = (this.FAST_HASH !== null ? builder.createString(this.FAST_HASH) : 0);
        const SPOOKYHASH = (this.SPOOKYHASH !== null ? builder.createString(this.SPOOKYHASH) : 0);
        const CITYHASH = (this.CITYHASH !== null ? builder.createString(this.CITYHASH) : 0);
        const FARMHASH = (this.FARMHASH !== null ? builder.createString(this.FARMHASH) : 0);
        const METROHASH = (this.METROHASH !== null ? builder.createString(this.METROHASH) : 0);
        const NUMERIC_HASH = (this.NUMERIC_HASH !== null ? builder.createString(this.NUMERIC_HASH) : 0);
        const XXHASH = (this.XXHASH !== null ? builder.createString(this.XXHASH) : 0);
        const T1HA = (this.T1HA !== null ? builder.createString(this.T1HA) : 0);
        const GXHASH = (this.GXHASH !== null ? builder.createString(this.GXHASH) : 0);
        const PHASH = (this.PHASH !== null ? builder.createString(this.PHASH) : 0);
        const DHASH = (this.DHASH !== null ? builder.createString(this.DHASH) : 0);
        const SDBM = (this.SDBM !== null ? builder.createString(this.SDBM) : 0);
        const OSDB_HASH = (this.OSDB_HASH !== null ? builder.createString(this.OSDB_HASH) : 0);
        const KOMIHASH = (this.KOMIHASH !== null ? builder.createString(this.KOMIHASH) : 0);
        const BLAKE3 = (this.BLAKE3 !== null ? builder.createString(this.BLAKE3) : 0);
        const ECOH = (this.ECOH !== null ? builder.createString(this.ECOH) : 0);
        const FSB = (this.FSB !== null ? builder.createString(this.FSB) : 0);
        const GOST = (this.GOST !== null ? builder.createString(this.GOST) : 0);
        const GROSTL = (this.GROSTL !== null ? builder.createString(this.GROSTL) : 0);
        const HAS_160 = (this.HAS_160 !== null ? builder.createString(this.HAS_160) : 0);
        const HAVAL = (this.HAVAL !== null ? builder.createString(this.HAVAL) : 0);
        const JH = (this.JH !== null ? builder.createString(this.JH) : 0);
        const LSH = (this.LSH !== null ? builder.createString(this.LSH) : 0);
        const MD2 = (this.MD2 !== null ? builder.createString(this.MD2) : 0);
        const MD4 = (this.MD4 !== null ? builder.createString(this.MD4) : 0);
        const MD5 = (this.MD5 !== null ? builder.createString(this.MD5) : 0);
        const MD6 = (this.MD6 !== null ? builder.createString(this.MD6) : 0);
        const RADIOGATUN = (this.RADIOGATUN !== null ? builder.createString(this.RADIOGATUN) : 0);
        const RIPEMD = (this.RIPEMD !== null ? builder.createString(this.RIPEMD) : 0);
        const RIPEMD_128 = (this.RIPEMD_128 !== null ? builder.createString(this.RIPEMD_128) : 0);
        const RIPEMD_256 = (this.RIPEMD_256 !== null ? builder.createString(this.RIPEMD_256) : 0);
        const RIPEMD_320 = (this.RIPEMD_320 !== null ? builder.createString(this.RIPEMD_320) : 0);
        const SHA_1 = (this.SHA_1 !== null ? builder.createString(this.SHA_1) : 0);
        const SHA_224 = (this.SHA_224 !== null ? builder.createString(this.SHA_224) : 0);
        const SHA_256 = (this.SHA_256 !== null ? builder.createString(this.SHA_256) : 0);
        const SHA_384 = (this.SHA_384 !== null ? builder.createString(this.SHA_384) : 0);
        const SHA_512 = (this.SHA_512 !== null ? builder.createString(this.SHA_512) : 0);
        const SHA_3 = (this.SHA_3 !== null ? builder.createString(this.SHA_3) : 0);
        const SKEIN = (this.SKEIN !== null ? builder.createString(this.SKEIN) : 0);
        const SNEFRU = (this.SNEFRU !== null ? builder.createString(this.SNEFRU) : 0);
        const SPECTRAL_HASH = (this.SPECTRAL_HASH !== null ? builder.createString(this.SPECTRAL_HASH) : 0);
        const STREEBOG = (this.STREEBOG !== null ? builder.createString(this.STREEBOG) : 0);
        const SWIFFT = (this.SWIFFT !== null ? builder.createString(this.SWIFFT) : 0);
        const TIGER = (this.TIGER !== null ? builder.createString(this.TIGER) : 0);
        const WHIRLPOOL = (this.WHIRLPOOL !== null ? builder.createString(this.WHIRLPOOL) : 0);
        return PNM.createPNM(builder, IPFS_CID, ETH_DIGITAL_SIGNATURE, SHA_512_FILE_HASH, SHA_256_FILE_HASH, MD5_FILE_DIGEST, SHA_1_FILE_HASH, ARGON2_FILE_HASH, BLAKE2B_FILE_HASH, SHA_3_FILE_HASH, RIPEMD_160_FILE_HASH, WHIRLPOOL_FILE_HASH, TIGER_FILE_HASH, CRC32, ADLER32_CHECKSUM, RABIN_FINGERPRINT, PEARSON_HASHING, BLAKE2_KEYED_HASH, BLAKE_256, CRC8, CRC16, CRC64, BSD_CHECKSUM, SYSV_CHECKSUM, SUM8, INTERNET_CHECKSUM, SUM24, SUM32, FLETCHER_4, FLETCHER_8, FLETCHER_16, FLETCHER_32, LUNH_ALGORITHM, VERHOEFF_ALGORITHM, DAMM_ALGORITHM, TABULATION_HASHING, UNIVERSAL_ONE_WAY_HASH_FUNCTION, ZOBRIST_HASHING, PAUL_HSIEHS_SUPERFASTHASH, BUZHASH, FNV_HASH, JENKINS_HASH_FUNCTION, BERNSTEINS_HASH_DJB2, PJW_HASH_ELF_HASH, MURMURHASH, FAST_HASH, SPOOKYHASH, CITYHASH, FARMHASH, METROHASH, NUMERIC_HASH, XXHASH, T1HA, GXHASH, PHASH, DHASH, SDBM, OSDB_HASH, KOMIHASH, BLAKE3, ECOH, FSB, GOST, GROSTL, HAS_160, HAVAL, JH, LSH, MD2, MD4, MD5, MD6, RADIOGATUN, RIPEMD, RIPEMD_128, RIPEMD_256, RIPEMD_320, SHA_1, SHA_224, SHA_256, SHA_384, SHA_512, SHA_3, SKEIN, SNEFRU, SPECTRAL_HASH, STREEBOG, SWIFFT, TIGER, WHIRLPOOL);
    }
}
