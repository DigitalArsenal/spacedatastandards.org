// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { ScoreType } from './ScoreType.js';
export class Score {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsScore(bb, obj) {
        return (obj || new Score()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsScore(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Score()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    NORAD_CAT_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TYPE() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ScoreType.OUTLIER;
    }
    TAG(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SCORE() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    static startScore(builder) {
        builder.startObject(4);
    }
    static addNoradCatId(builder, NORAD_CAT_IDOffset) {
        builder.addFieldOffset(0, NORAD_CAT_IDOffset, 0);
    }
    static addType(builder, TYPE) {
        builder.addFieldInt8(1, TYPE, ScoreType.OUTLIER);
    }
    static addTag(builder, TAGOffset) {
        builder.addFieldOffset(2, TAGOffset, 0);
    }
    static addScore(builder, SCORE) {
        builder.addFieldFloat32(3, SCORE, 0.0);
    }
    static endScore(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createScore(builder, NORAD_CAT_IDOffset, TYPE, TAGOffset, SCORE) {
        Score.startScore(builder);
        Score.addNoradCatId(builder, NORAD_CAT_IDOffset);
        Score.addType(builder, TYPE);
        Score.addTag(builder, TAGOffset);
        Score.addScore(builder, SCORE);
        return Score.endScore(builder);
    }
    unpack() {
        return new ScoreT(this.NORAD_CAT_ID(), this.TYPE(), this.TAG(), this.SCORE());
    }
    unpackTo(_o) {
        _o.NORAD_CAT_ID = this.NORAD_CAT_ID();
        _o.TYPE = this.TYPE();
        _o.TAG = this.TAG();
        _o.SCORE = this.SCORE();
    }
}
export class ScoreT {
    constructor(NORAD_CAT_ID = null, TYPE = ScoreType.OUTLIER, TAG = null, SCORE = 0.0) {
        this.NORAD_CAT_ID = NORAD_CAT_ID;
        this.TYPE = TYPE;
        this.TAG = TAG;
        this.SCORE = SCORE;
    }
    pack(builder) {
        const NORAD_CAT_ID = (this.NORAD_CAT_ID !== null ? builder.createString(this.NORAD_CAT_ID) : 0);
        const TAG = (this.TAG !== null ? builder.createString(this.TAG) : 0);
        return Score.createScore(builder, NORAD_CAT_ID, this.TYPE, TAG, this.SCORE);
    }
}
