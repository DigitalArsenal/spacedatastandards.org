// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { CustomFrame } from './CustomFrame.js';
export class CustomFrameWrapper {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCustomFrameWrapper(bb, obj) {
        return (obj || new CustomFrameWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCustomFrameWrapper(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CustomFrameWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    frame() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : CustomFrame.ECEF;
    }
    static startCustomFrameWrapper(builder) {
        builder.startObject(1);
    }
    static addFrame(builder, frame) {
        builder.addFieldInt8(0, frame, CustomFrame.ECEF);
    }
    static endCustomFrameWrapper(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createCustomFrameWrapper(builder, frame) {
        CustomFrameWrapper.startCustomFrameWrapper(builder);
        CustomFrameWrapper.addFrame(builder, frame);
        return CustomFrameWrapper.endCustomFrameWrapper(builder);
    }
    unpack() {
        return new CustomFrameWrapperT(this.frame());
    }
    unpackTo(_o) {
        _o.frame = this.frame();
    }
}
export class CustomFrameWrapperT {
    constructor(frame = CustomFrame.ECEF) {
        this.frame = frame;
    }
    pack(builder) {
        return CustomFrameWrapper.createCustomFrameWrapper(builder, this.frame);
    }
}
