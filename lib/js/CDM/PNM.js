// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
/**
 * Publish Notification Message
 */
export class PNM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPNM(bb, obj) {
        return (obj || new PNM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPNM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PNM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$PNM');
    }
    MULTIFORMAT_ADDRESS(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    PUBLISH_TIMESTAMP(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    FILE_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    FILE_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SIGNATURE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TIMESTAMP_SIGNATURE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SIGNATURE_TYPE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TIMESTAMP_SIGNATURE_TYPE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startPNM(builder) {
        builder.startObject(9);
    }
    static addMultiformatAddress(builder, MULTIFORMAT_ADDRESSOffset) {
        builder.addFieldOffset(0, MULTIFORMAT_ADDRESSOffset, 0);
    }
    static addPublishTimestamp(builder, PUBLISH_TIMESTAMPOffset) {
        builder.addFieldOffset(1, PUBLISH_TIMESTAMPOffset, 0);
    }
    static addCid(builder, CIDOffset) {
        builder.addFieldOffset(2, CIDOffset, 0);
    }
    static addFileName(builder, FILE_NAMEOffset) {
        builder.addFieldOffset(3, FILE_NAMEOffset, 0);
    }
    static addFileId(builder, FILE_IDOffset) {
        builder.addFieldOffset(4, FILE_IDOffset, 0);
    }
    static addSignature(builder, SIGNATUREOffset) {
        builder.addFieldOffset(5, SIGNATUREOffset, 0);
    }
    static addTimestampSignature(builder, TIMESTAMP_SIGNATUREOffset) {
        builder.addFieldOffset(6, TIMESTAMP_SIGNATUREOffset, 0);
    }
    static addSignatureType(builder, SIGNATURE_TYPEOffset) {
        builder.addFieldOffset(7, SIGNATURE_TYPEOffset, 0);
    }
    static addTimestampSignatureType(builder, TIMESTAMP_SIGNATURE_TYPEOffset) {
        builder.addFieldOffset(8, TIMESTAMP_SIGNATURE_TYPEOffset, 0);
    }
    static endPNM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishPNMBuffer(builder, offset) {
        builder.finish(offset, '$PNM');
    }
    static finishSizePrefixedPNMBuffer(builder, offset) {
        builder.finish(offset, '$PNM', true);
    }
    static createPNM(builder, MULTIFORMAT_ADDRESSOffset, PUBLISH_TIMESTAMPOffset, CIDOffset, FILE_NAMEOffset, FILE_IDOffset, SIGNATUREOffset, TIMESTAMP_SIGNATUREOffset, SIGNATURE_TYPEOffset, TIMESTAMP_SIGNATURE_TYPEOffset) {
        PNM.startPNM(builder);
        PNM.addMultiformatAddress(builder, MULTIFORMAT_ADDRESSOffset);
        PNM.addPublishTimestamp(builder, PUBLISH_TIMESTAMPOffset);
        PNM.addCid(builder, CIDOffset);
        PNM.addFileName(builder, FILE_NAMEOffset);
        PNM.addFileId(builder, FILE_IDOffset);
        PNM.addSignature(builder, SIGNATUREOffset);
        PNM.addTimestampSignature(builder, TIMESTAMP_SIGNATUREOffset);
        PNM.addSignatureType(builder, SIGNATURE_TYPEOffset);
        PNM.addTimestampSignatureType(builder, TIMESTAMP_SIGNATURE_TYPEOffset);
        return PNM.endPNM(builder);
    }
    unpack() {
        return new PNMT(this.MULTIFORMAT_ADDRESS(), this.PUBLISH_TIMESTAMP(), this.CID(), this.FILE_NAME(), this.FILE_ID(), this.SIGNATURE(), this.TIMESTAMP_SIGNATURE(), this.SIGNATURE_TYPE(), this.TIMESTAMP_SIGNATURE_TYPE());
    }
    unpackTo(_o) {
        _o.MULTIFORMAT_ADDRESS = this.MULTIFORMAT_ADDRESS();
        _o.PUBLISH_TIMESTAMP = this.PUBLISH_TIMESTAMP();
        _o.CID = this.CID();
        _o.FILE_NAME = this.FILE_NAME();
        _o.FILE_ID = this.FILE_ID();
        _o.SIGNATURE = this.SIGNATURE();
        _o.TIMESTAMP_SIGNATURE = this.TIMESTAMP_SIGNATURE();
        _o.SIGNATURE_TYPE = this.SIGNATURE_TYPE();
        _o.TIMESTAMP_SIGNATURE_TYPE = this.TIMESTAMP_SIGNATURE_TYPE();
    }
}
export class PNMT {
    constructor(MULTIFORMAT_ADDRESS = null, PUBLISH_TIMESTAMP = null, CID = null, FILE_NAME = null, FILE_ID = null, SIGNATURE = null, TIMESTAMP_SIGNATURE = null, SIGNATURE_TYPE = null, TIMESTAMP_SIGNATURE_TYPE = null) {
        this.MULTIFORMAT_ADDRESS = MULTIFORMAT_ADDRESS;
        this.PUBLISH_TIMESTAMP = PUBLISH_TIMESTAMP;
        this.CID = CID;
        this.FILE_NAME = FILE_NAME;
        this.FILE_ID = FILE_ID;
        this.SIGNATURE = SIGNATURE;
        this.TIMESTAMP_SIGNATURE = TIMESTAMP_SIGNATURE;
        this.SIGNATURE_TYPE = SIGNATURE_TYPE;
        this.TIMESTAMP_SIGNATURE_TYPE = TIMESTAMP_SIGNATURE_TYPE;
    }
    pack(builder) {
        const MULTIFORMAT_ADDRESS = (this.MULTIFORMAT_ADDRESS !== null ? builder.createString(this.MULTIFORMAT_ADDRESS) : 0);
        const PUBLISH_TIMESTAMP = (this.PUBLISH_TIMESTAMP !== null ? builder.createString(this.PUBLISH_TIMESTAMP) : 0);
        const CID = (this.CID !== null ? builder.createString(this.CID) : 0);
        const FILE_NAME = (this.FILE_NAME !== null ? builder.createString(this.FILE_NAME) : 0);
        const FILE_ID = (this.FILE_ID !== null ? builder.createString(this.FILE_ID) : 0);
        const SIGNATURE = (this.SIGNATURE !== null ? builder.createString(this.SIGNATURE) : 0);
        const TIMESTAMP_SIGNATURE = (this.TIMESTAMP_SIGNATURE !== null ? builder.createString(this.TIMESTAMP_SIGNATURE) : 0);
        const SIGNATURE_TYPE = (this.SIGNATURE_TYPE !== null ? builder.createString(this.SIGNATURE_TYPE) : 0);
        const TIMESTAMP_SIGNATURE_TYPE = (this.TIMESTAMP_SIGNATURE_TYPE !== null ? builder.createString(this.TIMESTAMP_SIGNATURE_TYPE) : 0);
        return PNM.createPNM(builder, MULTIFORMAT_ADDRESS, PUBLISH_TIMESTAMP, CID, FILE_NAME, FILE_ID, SIGNATURE, TIMESTAMP_SIGNATURE, SIGNATURE_TYPE, TIMESTAMP_SIGNATURE_TYPE);
    }
}
