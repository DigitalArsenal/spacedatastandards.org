// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { CAT } from './CAT.js';
import { EPM } from './EPM.js';
import { covarianceMethod } from './covarianceMethod.js';
import { referenceFrame } from './referenceFrame.js';
export class CDMObject {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCDMObject(bb, obj) {
        return (obj || new CDMObject()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCDMObject(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CDMObject()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    COMMENT(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OBJECT(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new CAT()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    /**
     * Point of Contact
     */
    POC(obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new EPM()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    OPERATOR_CONTACT_POSITION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OPERATOR_ORGANIZATION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    EPHEMERIS_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Covariance method
     */
    COVARIANCE_METHOD() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : covarianceMethod.CALCULATED;
    }
    /**
     * Reference Frame in which the object position is defined
     */
    REF_FRAME() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : referenceFrame.ECEF;
    }
    GRAVITY_MODEL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ATMOSPHERIC_MODEL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    N_BODY_PERTURBATIONS(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Solar radiation pressure
     */
    SOLAR_RAD_PRESSURE() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    /**
     * Earth tides
     */
    EARTH_TIDES() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    /**
     * Intrack thrust
     */
    INTRACK_THRUST() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    TIME_LASTOB_START(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TIME_LASTOB_END(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Recommended observation data span
     */
    RECOMMENDED_OD_SPAN() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Actual observation data span
     */
    ACTUAL_OD_SPAN() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Number of observations available
     */
    OBS_AVAILABLE() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    /**
     * Number of observations used
     */
    OBS_USED() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    /**
     * Number of tracks available
     */
    TRACKS_AVAILABLE() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    /**
     * Number of tracks used
     */
    TRACKS_USED() {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    /**
     * Residuals accepted
     */
    RESIDUALS_ACCEPTED() {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Weighted root mean square
     */
    WEIGHTED_RMS() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Area of the object
     */
    AREA_PC() {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Area of the object drag
     */
    AREA_DRG() {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Area of the object solar radiation pressure
     */
    AREA_SRP() {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Object's area-to-mass ratio
     */
    CR_AREA_OVER_MASS() {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Object's thrust acceleration
     */
    THRUST_ACCELERATION() {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Object's solar flux
     */
    SEDR() {
        const offset = this.bb.__offset(this.bb_pos, 62);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * X-coordinate of the object's position in RTN coordinates
     */
    X() {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Y-coordinate of the object's position in RTN
     */
    Y() {
        const offset = this.bb.__offset(this.bb_pos, 66);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Z-coordinate of the object's position in RTN
     */
    Z() {
        const offset = this.bb.__offset(this.bb_pos, 68);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * X-coordinate of the object's position in RTN coordinates
     */
    X_DOT() {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Y-coordinate of the object's position in RTN
     */
    Y_DOT() {
        const offset = this.bb.__offset(this.bb_pos, 72);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Z-coordinate of the object's position in RTN
     */
    Z_DOT() {
        const offset = this.bb.__offset(this.bb_pos, 74);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CR_R() {
        const offset = this.bb.__offset(this.bb_pos, 76);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CT_R() {
        const offset = this.bb.__offset(this.bb_pos, 78);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CT_T() {
        const offset = this.bb.__offset(this.bb_pos, 80);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CN_R() {
        const offset = this.bb.__offset(this.bb_pos, 82);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CN_T() {
        const offset = this.bb.__offset(this.bb_pos, 84);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CN_N() {
        const offset = this.bb.__offset(this.bb_pos, 86);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CRDOT_R() {
        const offset = this.bb.__offset(this.bb_pos, 88);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CRDOT_T() {
        const offset = this.bb.__offset(this.bb_pos, 90);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CRDOT_N() {
        const offset = this.bb.__offset(this.bb_pos, 92);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CRDOT_RDOT() {
        const offset = this.bb.__offset(this.bb_pos, 94);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CTDOT_R() {
        const offset = this.bb.__offset(this.bb_pos, 96);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CTDOT_T() {
        const offset = this.bb.__offset(this.bb_pos, 98);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CTDOT_N() {
        const offset = this.bb.__offset(this.bb_pos, 100);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CTDOT_RDOT() {
        const offset = this.bb.__offset(this.bb_pos, 102);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CTDOT_TDOT() {
        const offset = this.bb.__offset(this.bb_pos, 104);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CNDOT_R() {
        const offset = this.bb.__offset(this.bb_pos, 106);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CNDOT_T() {
        const offset = this.bb.__offset(this.bb_pos, 108);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CNDOT_N() {
        const offset = this.bb.__offset(this.bb_pos, 110);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CNDOT_RDOT() {
        const offset = this.bb.__offset(this.bb_pos, 112);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CNDOT_TDOT() {
        const offset = this.bb.__offset(this.bb_pos, 114);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CNDOT_NDOT() {
        const offset = this.bb.__offset(this.bb_pos, 116);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CDRG_R() {
        const offset = this.bb.__offset(this.bb_pos, 118);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CDRG_T() {
        const offset = this.bb.__offset(this.bb_pos, 120);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CDRG_N() {
        const offset = this.bb.__offset(this.bb_pos, 122);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CDRG_RDOT() {
        const offset = this.bb.__offset(this.bb_pos, 124);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CDRG_TDOT() {
        const offset = this.bb.__offset(this.bb_pos, 126);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CDRG_NDOT() {
        const offset = this.bb.__offset(this.bb_pos, 128);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CDRG_DRG() {
        const offset = this.bb.__offset(this.bb_pos, 130);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CSRP_R() {
        const offset = this.bb.__offset(this.bb_pos, 132);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CSRP_T() {
        const offset = this.bb.__offset(this.bb_pos, 134);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CSRP_N() {
        const offset = this.bb.__offset(this.bb_pos, 136);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CSRP_RDOT() {
        const offset = this.bb.__offset(this.bb_pos, 138);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CSRP_TDOT() {
        const offset = this.bb.__offset(this.bb_pos, 140);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CSRP_NDOT() {
        const offset = this.bb.__offset(this.bb_pos, 142);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CSRP_DRG() {
        const offset = this.bb.__offset(this.bb_pos, 144);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CSRP_SRP() {
        const offset = this.bb.__offset(this.bb_pos, 146);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CTHR_R() {
        const offset = this.bb.__offset(this.bb_pos, 148);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CTHR_T() {
        const offset = this.bb.__offset(this.bb_pos, 150);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CTHR_N() {
        const offset = this.bb.__offset(this.bb_pos, 152);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CTHR_RDOT() {
        const offset = this.bb.__offset(this.bb_pos, 154);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CTHR_TDOT() {
        const offset = this.bb.__offset(this.bb_pos, 156);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CTHR_NDOT() {
        const offset = this.bb.__offset(this.bb_pos, 158);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CTHR_DRG() {
        const offset = this.bb.__offset(this.bb_pos, 160);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CTHR_SRP() {
        const offset = this.bb.__offset(this.bb_pos, 162);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    CTHR_THR() {
        const offset = this.bb.__offset(this.bb_pos, 164);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startCDMObject(builder) {
        builder.startObject(81);
    }
    static addComment(builder, COMMENTOffset) {
        builder.addFieldOffset(0, COMMENTOffset, 0);
    }
    static addObject(builder, OBJECTOffset) {
        builder.addFieldOffset(1, OBJECTOffset, 0);
    }
    static addPoc(builder, POCOffset) {
        builder.addFieldOffset(2, POCOffset, 0);
    }
    static addOperatorContactPosition(builder, OPERATOR_CONTACT_POSITIONOffset) {
        builder.addFieldOffset(3, OPERATOR_CONTACT_POSITIONOffset, 0);
    }
    static addOperatorOrganization(builder, OPERATOR_ORGANIZATIONOffset) {
        builder.addFieldOffset(4, OPERATOR_ORGANIZATIONOffset, 0);
    }
    static addEphemerisName(builder, EPHEMERIS_NAMEOffset) {
        builder.addFieldOffset(5, EPHEMERIS_NAMEOffset, 0);
    }
    static addCovarianceMethod(builder, COVARIANCE_METHOD) {
        builder.addFieldInt8(6, COVARIANCE_METHOD, covarianceMethod.CALCULATED);
    }
    static addRefFrame(builder, REF_FRAME) {
        builder.addFieldInt8(7, REF_FRAME, referenceFrame.ECEF);
    }
    static addGravityModel(builder, GRAVITY_MODELOffset) {
        builder.addFieldOffset(8, GRAVITY_MODELOffset, 0);
    }
    static addAtmosphericModel(builder, ATMOSPHERIC_MODELOffset) {
        builder.addFieldOffset(9, ATMOSPHERIC_MODELOffset, 0);
    }
    static addNBodyPerturbations(builder, N_BODY_PERTURBATIONSOffset) {
        builder.addFieldOffset(10, N_BODY_PERTURBATIONSOffset, 0);
    }
    static addSolarRadPressure(builder, SOLAR_RAD_PRESSURE) {
        builder.addFieldInt8(11, +SOLAR_RAD_PRESSURE, +false);
    }
    static addEarthTides(builder, EARTH_TIDES) {
        builder.addFieldInt8(12, +EARTH_TIDES, +false);
    }
    static addIntrackThrust(builder, INTRACK_THRUST) {
        builder.addFieldInt8(13, +INTRACK_THRUST, +false);
    }
    static addTimeLastobStart(builder, TIME_LASTOB_STARTOffset) {
        builder.addFieldOffset(14, TIME_LASTOB_STARTOffset, 0);
    }
    static addTimeLastobEnd(builder, TIME_LASTOB_ENDOffset) {
        builder.addFieldOffset(15, TIME_LASTOB_ENDOffset, 0);
    }
    static addRecommendedOdSpan(builder, RECOMMENDED_OD_SPAN) {
        builder.addFieldFloat64(16, RECOMMENDED_OD_SPAN, 0.0);
    }
    static addActualOdSpan(builder, ACTUAL_OD_SPAN) {
        builder.addFieldFloat64(17, ACTUAL_OD_SPAN, 0.0);
    }
    static addObsAvailable(builder, OBS_AVAILABLE) {
        builder.addFieldInt32(18, OBS_AVAILABLE, 0);
    }
    static addObsUsed(builder, OBS_USED) {
        builder.addFieldInt32(19, OBS_USED, 0);
    }
    static addTracksAvailable(builder, TRACKS_AVAILABLE) {
        builder.addFieldInt32(20, TRACKS_AVAILABLE, 0);
    }
    static addTracksUsed(builder, TRACKS_USED) {
        builder.addFieldInt32(21, TRACKS_USED, 0);
    }
    static addResidualsAccepted(builder, RESIDUALS_ACCEPTED) {
        builder.addFieldFloat64(22, RESIDUALS_ACCEPTED, 0.0);
    }
    static addWeightedRms(builder, WEIGHTED_RMS) {
        builder.addFieldFloat64(23, WEIGHTED_RMS, 0.0);
    }
    static addAreaPc(builder, AREA_PC) {
        builder.addFieldFloat64(24, AREA_PC, 0.0);
    }
    static addAreaDrg(builder, AREA_DRG) {
        builder.addFieldFloat64(25, AREA_DRG, 0.0);
    }
    static addAreaSrp(builder, AREA_SRP) {
        builder.addFieldFloat64(26, AREA_SRP, 0.0);
    }
    static addCrAreaOverMass(builder, CR_AREA_OVER_MASS) {
        builder.addFieldFloat64(27, CR_AREA_OVER_MASS, 0.0);
    }
    static addThrustAcceleration(builder, THRUST_ACCELERATION) {
        builder.addFieldFloat64(28, THRUST_ACCELERATION, 0.0);
    }
    static addSedr(builder, SEDR) {
        builder.addFieldFloat64(29, SEDR, 0.0);
    }
    static addX(builder, X) {
        builder.addFieldFloat64(30, X, 0.0);
    }
    static addY(builder, Y) {
        builder.addFieldFloat64(31, Y, 0.0);
    }
    static addZ(builder, Z) {
        builder.addFieldFloat64(32, Z, 0.0);
    }
    static addXDot(builder, X_DOT) {
        builder.addFieldFloat64(33, X_DOT, 0.0);
    }
    static addYDot(builder, Y_DOT) {
        builder.addFieldFloat64(34, Y_DOT, 0.0);
    }
    static addZDot(builder, Z_DOT) {
        builder.addFieldFloat64(35, Z_DOT, 0.0);
    }
    static addCrR(builder, CR_R) {
        builder.addFieldFloat64(36, CR_R, 0.0);
    }
    static addCtR(builder, CT_R) {
        builder.addFieldFloat64(37, CT_R, 0.0);
    }
    static addCtT(builder, CT_T) {
        builder.addFieldFloat64(38, CT_T, 0.0);
    }
    static addCnR(builder, CN_R) {
        builder.addFieldFloat64(39, CN_R, 0.0);
    }
    static addCnT(builder, CN_T) {
        builder.addFieldFloat64(40, CN_T, 0.0);
    }
    static addCnN(builder, CN_N) {
        builder.addFieldFloat64(41, CN_N, 0.0);
    }
    static addCrdotR(builder, CRDOT_R) {
        builder.addFieldFloat64(42, CRDOT_R, 0.0);
    }
    static addCrdotT(builder, CRDOT_T) {
        builder.addFieldFloat64(43, CRDOT_T, 0.0);
    }
    static addCrdotN(builder, CRDOT_N) {
        builder.addFieldFloat64(44, CRDOT_N, 0.0);
    }
    static addCrdotRdot(builder, CRDOT_RDOT) {
        builder.addFieldFloat64(45, CRDOT_RDOT, 0.0);
    }
    static addCtdotR(builder, CTDOT_R) {
        builder.addFieldFloat64(46, CTDOT_R, 0.0);
    }
    static addCtdotT(builder, CTDOT_T) {
        builder.addFieldFloat64(47, CTDOT_T, 0.0);
    }
    static addCtdotN(builder, CTDOT_N) {
        builder.addFieldFloat64(48, CTDOT_N, 0.0);
    }
    static addCtdotRdot(builder, CTDOT_RDOT) {
        builder.addFieldFloat64(49, CTDOT_RDOT, 0.0);
    }
    static addCtdotTdot(builder, CTDOT_TDOT) {
        builder.addFieldFloat64(50, CTDOT_TDOT, 0.0);
    }
    static addCndotR(builder, CNDOT_R) {
        builder.addFieldFloat64(51, CNDOT_R, 0.0);
    }
    static addCndotT(builder, CNDOT_T) {
        builder.addFieldFloat64(52, CNDOT_T, 0.0);
    }
    static addCndotN(builder, CNDOT_N) {
        builder.addFieldFloat64(53, CNDOT_N, 0.0);
    }
    static addCndotRdot(builder, CNDOT_RDOT) {
        builder.addFieldFloat64(54, CNDOT_RDOT, 0.0);
    }
    static addCndotTdot(builder, CNDOT_TDOT) {
        builder.addFieldFloat64(55, CNDOT_TDOT, 0.0);
    }
    static addCndotNdot(builder, CNDOT_NDOT) {
        builder.addFieldFloat64(56, CNDOT_NDOT, 0.0);
    }
    static addCdrgR(builder, CDRG_R) {
        builder.addFieldFloat64(57, CDRG_R, 0.0);
    }
    static addCdrgT(builder, CDRG_T) {
        builder.addFieldFloat64(58, CDRG_T, 0.0);
    }
    static addCdrgN(builder, CDRG_N) {
        builder.addFieldFloat64(59, CDRG_N, 0.0);
    }
    static addCdrgRdot(builder, CDRG_RDOT) {
        builder.addFieldFloat64(60, CDRG_RDOT, 0.0);
    }
    static addCdrgTdot(builder, CDRG_TDOT) {
        builder.addFieldFloat64(61, CDRG_TDOT, 0.0);
    }
    static addCdrgNdot(builder, CDRG_NDOT) {
        builder.addFieldFloat64(62, CDRG_NDOT, 0.0);
    }
    static addCdrgDrg(builder, CDRG_DRG) {
        builder.addFieldFloat64(63, CDRG_DRG, 0.0);
    }
    static addCsrpR(builder, CSRP_R) {
        builder.addFieldFloat64(64, CSRP_R, 0.0);
    }
    static addCsrpT(builder, CSRP_T) {
        builder.addFieldFloat64(65, CSRP_T, 0.0);
    }
    static addCsrpN(builder, CSRP_N) {
        builder.addFieldFloat64(66, CSRP_N, 0.0);
    }
    static addCsrpRdot(builder, CSRP_RDOT) {
        builder.addFieldFloat64(67, CSRP_RDOT, 0.0);
    }
    static addCsrpTdot(builder, CSRP_TDOT) {
        builder.addFieldFloat64(68, CSRP_TDOT, 0.0);
    }
    static addCsrpNdot(builder, CSRP_NDOT) {
        builder.addFieldFloat64(69, CSRP_NDOT, 0.0);
    }
    static addCsrpDrg(builder, CSRP_DRG) {
        builder.addFieldFloat64(70, CSRP_DRG, 0.0);
    }
    static addCsrpSrp(builder, CSRP_SRP) {
        builder.addFieldFloat64(71, CSRP_SRP, 0.0);
    }
    static addCthrR(builder, CTHR_R) {
        builder.addFieldFloat64(72, CTHR_R, 0.0);
    }
    static addCthrT(builder, CTHR_T) {
        builder.addFieldFloat64(73, CTHR_T, 0.0);
    }
    static addCthrN(builder, CTHR_N) {
        builder.addFieldFloat64(74, CTHR_N, 0.0);
    }
    static addCthrRdot(builder, CTHR_RDOT) {
        builder.addFieldFloat64(75, CTHR_RDOT, 0.0);
    }
    static addCthrTdot(builder, CTHR_TDOT) {
        builder.addFieldFloat64(76, CTHR_TDOT, 0.0);
    }
    static addCthrNdot(builder, CTHR_NDOT) {
        builder.addFieldFloat64(77, CTHR_NDOT, 0.0);
    }
    static addCthrDrg(builder, CTHR_DRG) {
        builder.addFieldFloat64(78, CTHR_DRG, 0.0);
    }
    static addCthrSrp(builder, CTHR_SRP) {
        builder.addFieldFloat64(79, CTHR_SRP, 0.0);
    }
    static addCthrThr(builder, CTHR_THR) {
        builder.addFieldFloat64(80, CTHR_THR, 0.0);
    }
    static endCDMObject(builder) {
        const offset = builder.endObject();
        return offset;
    }
    unpack() {
        return new CDMObjectT(this.COMMENT(), (this.OBJECT() !== null ? this.OBJECT().unpack() : null), (this.POC() !== null ? this.POC().unpack() : null), this.OPERATOR_CONTACT_POSITION(), this.OPERATOR_ORGANIZATION(), this.EPHEMERIS_NAME(), this.COVARIANCE_METHOD(), this.REF_FRAME(), this.GRAVITY_MODEL(), this.ATMOSPHERIC_MODEL(), this.N_BODY_PERTURBATIONS(), this.SOLAR_RAD_PRESSURE(), this.EARTH_TIDES(), this.INTRACK_THRUST(), this.TIME_LASTOB_START(), this.TIME_LASTOB_END(), this.RECOMMENDED_OD_SPAN(), this.ACTUAL_OD_SPAN(), this.OBS_AVAILABLE(), this.OBS_USED(), this.TRACKS_AVAILABLE(), this.TRACKS_USED(), this.RESIDUALS_ACCEPTED(), this.WEIGHTED_RMS(), this.AREA_PC(), this.AREA_DRG(), this.AREA_SRP(), this.CR_AREA_OVER_MASS(), this.THRUST_ACCELERATION(), this.SEDR(), this.X(), this.Y(), this.Z(), this.X_DOT(), this.Y_DOT(), this.Z_DOT(), this.CR_R(), this.CT_R(), this.CT_T(), this.CN_R(), this.CN_T(), this.CN_N(), this.CRDOT_R(), this.CRDOT_T(), this.CRDOT_N(), this.CRDOT_RDOT(), this.CTDOT_R(), this.CTDOT_T(), this.CTDOT_N(), this.CTDOT_RDOT(), this.CTDOT_TDOT(), this.CNDOT_R(), this.CNDOT_T(), this.CNDOT_N(), this.CNDOT_RDOT(), this.CNDOT_TDOT(), this.CNDOT_NDOT(), this.CDRG_R(), this.CDRG_T(), this.CDRG_N(), this.CDRG_RDOT(), this.CDRG_TDOT(), this.CDRG_NDOT(), this.CDRG_DRG(), this.CSRP_R(), this.CSRP_T(), this.CSRP_N(), this.CSRP_RDOT(), this.CSRP_TDOT(), this.CSRP_NDOT(), this.CSRP_DRG(), this.CSRP_SRP(), this.CTHR_R(), this.CTHR_T(), this.CTHR_N(), this.CTHR_RDOT(), this.CTHR_TDOT(), this.CTHR_NDOT(), this.CTHR_DRG(), this.CTHR_SRP(), this.CTHR_THR());
    }
    unpackTo(_o) {
        _o.COMMENT = this.COMMENT();
        _o.OBJECT = (this.OBJECT() !== null ? this.OBJECT().unpack() : null);
        _o.POC = (this.POC() !== null ? this.POC().unpack() : null);
        _o.OPERATOR_CONTACT_POSITION = this.OPERATOR_CONTACT_POSITION();
        _o.OPERATOR_ORGANIZATION = this.OPERATOR_ORGANIZATION();
        _o.EPHEMERIS_NAME = this.EPHEMERIS_NAME();
        _o.COVARIANCE_METHOD = this.COVARIANCE_METHOD();
        _o.REF_FRAME = this.REF_FRAME();
        _o.GRAVITY_MODEL = this.GRAVITY_MODEL();
        _o.ATMOSPHERIC_MODEL = this.ATMOSPHERIC_MODEL();
        _o.N_BODY_PERTURBATIONS = this.N_BODY_PERTURBATIONS();
        _o.SOLAR_RAD_PRESSURE = this.SOLAR_RAD_PRESSURE();
        _o.EARTH_TIDES = this.EARTH_TIDES();
        _o.INTRACK_THRUST = this.INTRACK_THRUST();
        _o.TIME_LASTOB_START = this.TIME_LASTOB_START();
        _o.TIME_LASTOB_END = this.TIME_LASTOB_END();
        _o.RECOMMENDED_OD_SPAN = this.RECOMMENDED_OD_SPAN();
        _o.ACTUAL_OD_SPAN = this.ACTUAL_OD_SPAN();
        _o.OBS_AVAILABLE = this.OBS_AVAILABLE();
        _o.OBS_USED = this.OBS_USED();
        _o.TRACKS_AVAILABLE = this.TRACKS_AVAILABLE();
        _o.TRACKS_USED = this.TRACKS_USED();
        _o.RESIDUALS_ACCEPTED = this.RESIDUALS_ACCEPTED();
        _o.WEIGHTED_RMS = this.WEIGHTED_RMS();
        _o.AREA_PC = this.AREA_PC();
        _o.AREA_DRG = this.AREA_DRG();
        _o.AREA_SRP = this.AREA_SRP();
        _o.CR_AREA_OVER_MASS = this.CR_AREA_OVER_MASS();
        _o.THRUST_ACCELERATION = this.THRUST_ACCELERATION();
        _o.SEDR = this.SEDR();
        _o.X = this.X();
        _o.Y = this.Y();
        _o.Z = this.Z();
        _o.X_DOT = this.X_DOT();
        _o.Y_DOT = this.Y_DOT();
        _o.Z_DOT = this.Z_DOT();
        _o.CR_R = this.CR_R();
        _o.CT_R = this.CT_R();
        _o.CT_T = this.CT_T();
        _o.CN_R = this.CN_R();
        _o.CN_T = this.CN_T();
        _o.CN_N = this.CN_N();
        _o.CRDOT_R = this.CRDOT_R();
        _o.CRDOT_T = this.CRDOT_T();
        _o.CRDOT_N = this.CRDOT_N();
        _o.CRDOT_RDOT = this.CRDOT_RDOT();
        _o.CTDOT_R = this.CTDOT_R();
        _o.CTDOT_T = this.CTDOT_T();
        _o.CTDOT_N = this.CTDOT_N();
        _o.CTDOT_RDOT = this.CTDOT_RDOT();
        _o.CTDOT_TDOT = this.CTDOT_TDOT();
        _o.CNDOT_R = this.CNDOT_R();
        _o.CNDOT_T = this.CNDOT_T();
        _o.CNDOT_N = this.CNDOT_N();
        _o.CNDOT_RDOT = this.CNDOT_RDOT();
        _o.CNDOT_TDOT = this.CNDOT_TDOT();
        _o.CNDOT_NDOT = this.CNDOT_NDOT();
        _o.CDRG_R = this.CDRG_R();
        _o.CDRG_T = this.CDRG_T();
        _o.CDRG_N = this.CDRG_N();
        _o.CDRG_RDOT = this.CDRG_RDOT();
        _o.CDRG_TDOT = this.CDRG_TDOT();
        _o.CDRG_NDOT = this.CDRG_NDOT();
        _o.CDRG_DRG = this.CDRG_DRG();
        _o.CSRP_R = this.CSRP_R();
        _o.CSRP_T = this.CSRP_T();
        _o.CSRP_N = this.CSRP_N();
        _o.CSRP_RDOT = this.CSRP_RDOT();
        _o.CSRP_TDOT = this.CSRP_TDOT();
        _o.CSRP_NDOT = this.CSRP_NDOT();
        _o.CSRP_DRG = this.CSRP_DRG();
        _o.CSRP_SRP = this.CSRP_SRP();
        _o.CTHR_R = this.CTHR_R();
        _o.CTHR_T = this.CTHR_T();
        _o.CTHR_N = this.CTHR_N();
        _o.CTHR_RDOT = this.CTHR_RDOT();
        _o.CTHR_TDOT = this.CTHR_TDOT();
        _o.CTHR_NDOT = this.CTHR_NDOT();
        _o.CTHR_DRG = this.CTHR_DRG();
        _o.CTHR_SRP = this.CTHR_SRP();
        _o.CTHR_THR = this.CTHR_THR();
    }
}
export class CDMObjectT {
    constructor(COMMENT = null, OBJECT = null, POC = null, OPERATOR_CONTACT_POSITION = null, OPERATOR_ORGANIZATION = null, EPHEMERIS_NAME = null, COVARIANCE_METHOD = covarianceMethod.CALCULATED, REF_FRAME = referenceFrame.ECEF, GRAVITY_MODEL = null, ATMOSPHERIC_MODEL = null, N_BODY_PERTURBATIONS = null, SOLAR_RAD_PRESSURE = false, EARTH_TIDES = false, INTRACK_THRUST = false, TIME_LASTOB_START = null, TIME_LASTOB_END = null, RECOMMENDED_OD_SPAN = 0.0, ACTUAL_OD_SPAN = 0.0, OBS_AVAILABLE = 0, OBS_USED = 0, TRACKS_AVAILABLE = 0, TRACKS_USED = 0, RESIDUALS_ACCEPTED = 0.0, WEIGHTED_RMS = 0.0, AREA_PC = 0.0, AREA_DRG = 0.0, AREA_SRP = 0.0, CR_AREA_OVER_MASS = 0.0, THRUST_ACCELERATION = 0.0, SEDR = 0.0, X = 0.0, Y = 0.0, Z = 0.0, X_DOT = 0.0, Y_DOT = 0.0, Z_DOT = 0.0, CR_R = 0.0, CT_R = 0.0, CT_T = 0.0, CN_R = 0.0, CN_T = 0.0, CN_N = 0.0, CRDOT_R = 0.0, CRDOT_T = 0.0, CRDOT_N = 0.0, CRDOT_RDOT = 0.0, CTDOT_R = 0.0, CTDOT_T = 0.0, CTDOT_N = 0.0, CTDOT_RDOT = 0.0, CTDOT_TDOT = 0.0, CNDOT_R = 0.0, CNDOT_T = 0.0, CNDOT_N = 0.0, CNDOT_RDOT = 0.0, CNDOT_TDOT = 0.0, CNDOT_NDOT = 0.0, CDRG_R = 0.0, CDRG_T = 0.0, CDRG_N = 0.0, CDRG_RDOT = 0.0, CDRG_TDOT = 0.0, CDRG_NDOT = 0.0, CDRG_DRG = 0.0, CSRP_R = 0.0, CSRP_T = 0.0, CSRP_N = 0.0, CSRP_RDOT = 0.0, CSRP_TDOT = 0.0, CSRP_NDOT = 0.0, CSRP_DRG = 0.0, CSRP_SRP = 0.0, CTHR_R = 0.0, CTHR_T = 0.0, CTHR_N = 0.0, CTHR_RDOT = 0.0, CTHR_TDOT = 0.0, CTHR_NDOT = 0.0, CTHR_DRG = 0.0, CTHR_SRP = 0.0, CTHR_THR = 0.0) {
        this.COMMENT = COMMENT;
        this.OBJECT = OBJECT;
        this.POC = POC;
        this.OPERATOR_CONTACT_POSITION = OPERATOR_CONTACT_POSITION;
        this.OPERATOR_ORGANIZATION = OPERATOR_ORGANIZATION;
        this.EPHEMERIS_NAME = EPHEMERIS_NAME;
        this.COVARIANCE_METHOD = COVARIANCE_METHOD;
        this.REF_FRAME = REF_FRAME;
        this.GRAVITY_MODEL = GRAVITY_MODEL;
        this.ATMOSPHERIC_MODEL = ATMOSPHERIC_MODEL;
        this.N_BODY_PERTURBATIONS = N_BODY_PERTURBATIONS;
        this.SOLAR_RAD_PRESSURE = SOLAR_RAD_PRESSURE;
        this.EARTH_TIDES = EARTH_TIDES;
        this.INTRACK_THRUST = INTRACK_THRUST;
        this.TIME_LASTOB_START = TIME_LASTOB_START;
        this.TIME_LASTOB_END = TIME_LASTOB_END;
        this.RECOMMENDED_OD_SPAN = RECOMMENDED_OD_SPAN;
        this.ACTUAL_OD_SPAN = ACTUAL_OD_SPAN;
        this.OBS_AVAILABLE = OBS_AVAILABLE;
        this.OBS_USED = OBS_USED;
        this.TRACKS_AVAILABLE = TRACKS_AVAILABLE;
        this.TRACKS_USED = TRACKS_USED;
        this.RESIDUALS_ACCEPTED = RESIDUALS_ACCEPTED;
        this.WEIGHTED_RMS = WEIGHTED_RMS;
        this.AREA_PC = AREA_PC;
        this.AREA_DRG = AREA_DRG;
        this.AREA_SRP = AREA_SRP;
        this.CR_AREA_OVER_MASS = CR_AREA_OVER_MASS;
        this.THRUST_ACCELERATION = THRUST_ACCELERATION;
        this.SEDR = SEDR;
        this.X = X;
        this.Y = Y;
        this.Z = Z;
        this.X_DOT = X_DOT;
        this.Y_DOT = Y_DOT;
        this.Z_DOT = Z_DOT;
        this.CR_R = CR_R;
        this.CT_R = CT_R;
        this.CT_T = CT_T;
        this.CN_R = CN_R;
        this.CN_T = CN_T;
        this.CN_N = CN_N;
        this.CRDOT_R = CRDOT_R;
        this.CRDOT_T = CRDOT_T;
        this.CRDOT_N = CRDOT_N;
        this.CRDOT_RDOT = CRDOT_RDOT;
        this.CTDOT_R = CTDOT_R;
        this.CTDOT_T = CTDOT_T;
        this.CTDOT_N = CTDOT_N;
        this.CTDOT_RDOT = CTDOT_RDOT;
        this.CTDOT_TDOT = CTDOT_TDOT;
        this.CNDOT_R = CNDOT_R;
        this.CNDOT_T = CNDOT_T;
        this.CNDOT_N = CNDOT_N;
        this.CNDOT_RDOT = CNDOT_RDOT;
        this.CNDOT_TDOT = CNDOT_TDOT;
        this.CNDOT_NDOT = CNDOT_NDOT;
        this.CDRG_R = CDRG_R;
        this.CDRG_T = CDRG_T;
        this.CDRG_N = CDRG_N;
        this.CDRG_RDOT = CDRG_RDOT;
        this.CDRG_TDOT = CDRG_TDOT;
        this.CDRG_NDOT = CDRG_NDOT;
        this.CDRG_DRG = CDRG_DRG;
        this.CSRP_R = CSRP_R;
        this.CSRP_T = CSRP_T;
        this.CSRP_N = CSRP_N;
        this.CSRP_RDOT = CSRP_RDOT;
        this.CSRP_TDOT = CSRP_TDOT;
        this.CSRP_NDOT = CSRP_NDOT;
        this.CSRP_DRG = CSRP_DRG;
        this.CSRP_SRP = CSRP_SRP;
        this.CTHR_R = CTHR_R;
        this.CTHR_T = CTHR_T;
        this.CTHR_N = CTHR_N;
        this.CTHR_RDOT = CTHR_RDOT;
        this.CTHR_TDOT = CTHR_TDOT;
        this.CTHR_NDOT = CTHR_NDOT;
        this.CTHR_DRG = CTHR_DRG;
        this.CTHR_SRP = CTHR_SRP;
        this.CTHR_THR = CTHR_THR;
    }
    pack(builder) {
        const COMMENT = (this.COMMENT !== null ? builder.createString(this.COMMENT) : 0);
        const OBJECT = (this.OBJECT !== null ? this.OBJECT.pack(builder) : 0);
        const POC = (this.POC !== null ? this.POC.pack(builder) : 0);
        const OPERATOR_CONTACT_POSITION = (this.OPERATOR_CONTACT_POSITION !== null ? builder.createString(this.OPERATOR_CONTACT_POSITION) : 0);
        const OPERATOR_ORGANIZATION = (this.OPERATOR_ORGANIZATION !== null ? builder.createString(this.OPERATOR_ORGANIZATION) : 0);
        const EPHEMERIS_NAME = (this.EPHEMERIS_NAME !== null ? builder.createString(this.EPHEMERIS_NAME) : 0);
        const GRAVITY_MODEL = (this.GRAVITY_MODEL !== null ? builder.createString(this.GRAVITY_MODEL) : 0);
        const ATMOSPHERIC_MODEL = (this.ATMOSPHERIC_MODEL !== null ? builder.createString(this.ATMOSPHERIC_MODEL) : 0);
        const N_BODY_PERTURBATIONS = (this.N_BODY_PERTURBATIONS !== null ? builder.createString(this.N_BODY_PERTURBATIONS) : 0);
        const TIME_LASTOB_START = (this.TIME_LASTOB_START !== null ? builder.createString(this.TIME_LASTOB_START) : 0);
        const TIME_LASTOB_END = (this.TIME_LASTOB_END !== null ? builder.createString(this.TIME_LASTOB_END) : 0);
        CDMObject.startCDMObject(builder);
        CDMObject.addComment(builder, COMMENT);
        CDMObject.addObject(builder, OBJECT);
        CDMObject.addPoc(builder, POC);
        CDMObject.addOperatorContactPosition(builder, OPERATOR_CONTACT_POSITION);
        CDMObject.addOperatorOrganization(builder, OPERATOR_ORGANIZATION);
        CDMObject.addEphemerisName(builder, EPHEMERIS_NAME);
        CDMObject.addCovarianceMethod(builder, this.COVARIANCE_METHOD);
        CDMObject.addRefFrame(builder, this.REF_FRAME);
        CDMObject.addGravityModel(builder, GRAVITY_MODEL);
        CDMObject.addAtmosphericModel(builder, ATMOSPHERIC_MODEL);
        CDMObject.addNBodyPerturbations(builder, N_BODY_PERTURBATIONS);
        CDMObject.addSolarRadPressure(builder, this.SOLAR_RAD_PRESSURE);
        CDMObject.addEarthTides(builder, this.EARTH_TIDES);
        CDMObject.addIntrackThrust(builder, this.INTRACK_THRUST);
        CDMObject.addTimeLastobStart(builder, TIME_LASTOB_START);
        CDMObject.addTimeLastobEnd(builder, TIME_LASTOB_END);
        CDMObject.addRecommendedOdSpan(builder, this.RECOMMENDED_OD_SPAN);
        CDMObject.addActualOdSpan(builder, this.ACTUAL_OD_SPAN);
        CDMObject.addObsAvailable(builder, this.OBS_AVAILABLE);
        CDMObject.addObsUsed(builder, this.OBS_USED);
        CDMObject.addTracksAvailable(builder, this.TRACKS_AVAILABLE);
        CDMObject.addTracksUsed(builder, this.TRACKS_USED);
        CDMObject.addResidualsAccepted(builder, this.RESIDUALS_ACCEPTED);
        CDMObject.addWeightedRms(builder, this.WEIGHTED_RMS);
        CDMObject.addAreaPc(builder, this.AREA_PC);
        CDMObject.addAreaDrg(builder, this.AREA_DRG);
        CDMObject.addAreaSrp(builder, this.AREA_SRP);
        CDMObject.addCrAreaOverMass(builder, this.CR_AREA_OVER_MASS);
        CDMObject.addThrustAcceleration(builder, this.THRUST_ACCELERATION);
        CDMObject.addSedr(builder, this.SEDR);
        CDMObject.addX(builder, this.X);
        CDMObject.addY(builder, this.Y);
        CDMObject.addZ(builder, this.Z);
        CDMObject.addXDot(builder, this.X_DOT);
        CDMObject.addYDot(builder, this.Y_DOT);
        CDMObject.addZDot(builder, this.Z_DOT);
        CDMObject.addCrR(builder, this.CR_R);
        CDMObject.addCtR(builder, this.CT_R);
        CDMObject.addCtT(builder, this.CT_T);
        CDMObject.addCnR(builder, this.CN_R);
        CDMObject.addCnT(builder, this.CN_T);
        CDMObject.addCnN(builder, this.CN_N);
        CDMObject.addCrdotR(builder, this.CRDOT_R);
        CDMObject.addCrdotT(builder, this.CRDOT_T);
        CDMObject.addCrdotN(builder, this.CRDOT_N);
        CDMObject.addCrdotRdot(builder, this.CRDOT_RDOT);
        CDMObject.addCtdotR(builder, this.CTDOT_R);
        CDMObject.addCtdotT(builder, this.CTDOT_T);
        CDMObject.addCtdotN(builder, this.CTDOT_N);
        CDMObject.addCtdotRdot(builder, this.CTDOT_RDOT);
        CDMObject.addCtdotTdot(builder, this.CTDOT_TDOT);
        CDMObject.addCndotR(builder, this.CNDOT_R);
        CDMObject.addCndotT(builder, this.CNDOT_T);
        CDMObject.addCndotN(builder, this.CNDOT_N);
        CDMObject.addCndotRdot(builder, this.CNDOT_RDOT);
        CDMObject.addCndotTdot(builder, this.CNDOT_TDOT);
        CDMObject.addCndotNdot(builder, this.CNDOT_NDOT);
        CDMObject.addCdrgR(builder, this.CDRG_R);
        CDMObject.addCdrgT(builder, this.CDRG_T);
        CDMObject.addCdrgN(builder, this.CDRG_N);
        CDMObject.addCdrgRdot(builder, this.CDRG_RDOT);
        CDMObject.addCdrgTdot(builder, this.CDRG_TDOT);
        CDMObject.addCdrgNdot(builder, this.CDRG_NDOT);
        CDMObject.addCdrgDrg(builder, this.CDRG_DRG);
        CDMObject.addCsrpR(builder, this.CSRP_R);
        CDMObject.addCsrpT(builder, this.CSRP_T);
        CDMObject.addCsrpN(builder, this.CSRP_N);
        CDMObject.addCsrpRdot(builder, this.CSRP_RDOT);
        CDMObject.addCsrpTdot(builder, this.CSRP_TDOT);
        CDMObject.addCsrpNdot(builder, this.CSRP_NDOT);
        CDMObject.addCsrpDrg(builder, this.CSRP_DRG);
        CDMObject.addCsrpSrp(builder, this.CSRP_SRP);
        CDMObject.addCthrR(builder, this.CTHR_R);
        CDMObject.addCthrT(builder, this.CTHR_T);
        CDMObject.addCthrN(builder, this.CTHR_N);
        CDMObject.addCthrRdot(builder, this.CTHR_RDOT);
        CDMObject.addCthrTdot(builder, this.CTHR_TDOT);
        CDMObject.addCthrNdot(builder, this.CTHR_NDOT);
        CDMObject.addCthrDrg(builder, this.CTHR_DRG);
        CDMObject.addCthrSrp(builder, this.CTHR_SRP);
        CDMObject.addCthrThr(builder, this.CTHR_THR);
        return CDMObject.endCDMObject(builder);
    }
}
