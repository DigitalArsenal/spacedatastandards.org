// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * Represents a geographic address
 */
export class Address {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsAddress(bb, obj) {
        return (obj || new Address()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsAddress(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Address()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    COUNTRY(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    REGION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    LOCALITY(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    POSTAL_CODE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    STREET(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    POST_OFFICE_BOX_NUMBER(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startAddress(builder) {
        builder.startObject(6);
    }
    static addCountry(builder, COUNTRYOffset) {
        builder.addFieldOffset(0, COUNTRYOffset, 0);
    }
    static addRegion(builder, REGIONOffset) {
        builder.addFieldOffset(1, REGIONOffset, 0);
    }
    static addLocality(builder, LOCALITYOffset) {
        builder.addFieldOffset(2, LOCALITYOffset, 0);
    }
    static addPostalCode(builder, POSTAL_CODEOffset) {
        builder.addFieldOffset(3, POSTAL_CODEOffset, 0);
    }
    static addStreet(builder, STREETOffset) {
        builder.addFieldOffset(4, STREETOffset, 0);
    }
    static addPostOfficeBoxNumber(builder, POST_OFFICE_BOX_NUMBEROffset) {
        builder.addFieldOffset(5, POST_OFFICE_BOX_NUMBEROffset, 0);
    }
    static endAddress(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createAddress(builder, COUNTRYOffset, REGIONOffset, LOCALITYOffset, POSTAL_CODEOffset, STREETOffset, POST_OFFICE_BOX_NUMBEROffset) {
        Address.startAddress(builder);
        Address.addCountry(builder, COUNTRYOffset);
        Address.addRegion(builder, REGIONOffset);
        Address.addLocality(builder, LOCALITYOffset);
        Address.addPostalCode(builder, POSTAL_CODEOffset);
        Address.addStreet(builder, STREETOffset);
        Address.addPostOfficeBoxNumber(builder, POST_OFFICE_BOX_NUMBEROffset);
        return Address.endAddress(builder);
    }
    unpack() {
        return new AddressT(this.COUNTRY(), this.REGION(), this.LOCALITY(), this.POSTAL_CODE(), this.STREET(), this.POST_OFFICE_BOX_NUMBER());
    }
    unpackTo(_o) {
        _o.COUNTRY = this.COUNTRY();
        _o.REGION = this.REGION();
        _o.LOCALITY = this.LOCALITY();
        _o.POSTAL_CODE = this.POSTAL_CODE();
        _o.STREET = this.STREET();
        _o.POST_OFFICE_BOX_NUMBER = this.POST_OFFICE_BOX_NUMBER();
    }
}
export class AddressT {
    constructor(COUNTRY = null, REGION = null, LOCALITY = null, POSTAL_CODE = null, STREET = null, POST_OFFICE_BOX_NUMBER = null) {
        this.COUNTRY = COUNTRY;
        this.REGION = REGION;
        this.LOCALITY = LOCALITY;
        this.POSTAL_CODE = POSTAL_CODE;
        this.STREET = STREET;
        this.POST_OFFICE_BOX_NUMBER = POST_OFFICE_BOX_NUMBER;
    }
    pack(builder) {
        const COUNTRY = (this.COUNTRY !== null ? builder.createString(this.COUNTRY) : 0);
        const REGION = (this.REGION !== null ? builder.createString(this.REGION) : 0);
        const LOCALITY = (this.LOCALITY !== null ? builder.createString(this.LOCALITY) : 0);
        const POSTAL_CODE = (this.POSTAL_CODE !== null ? builder.createString(this.POSTAL_CODE) : 0);
        const STREET = (this.STREET !== null ? builder.createString(this.STREET) : 0);
        const POST_OFFICE_BOX_NUMBER = (this.POST_OFFICE_BOX_NUMBER !== null ? builder.createString(this.POST_OFFICE_BOX_NUMBER) : 0);
        return Address.createAddress(builder, COUNTRY, REGION, LOCALITY, POSTAL_CODE, STREET, POST_OFFICE_BOX_NUMBER);
    }
}
