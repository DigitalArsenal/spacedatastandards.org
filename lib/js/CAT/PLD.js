// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { IDM } from './IDM.js';
/**
 * Payload Information
 */
export class PLD {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPLD(bb, obj) {
        return (obj || new PLD()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPLD(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PLD()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    PAYLOAD_DURATION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MASS_AT_LAUNCH() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    DIMENSIONS(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SOLAR_ARRAY_AREA() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    SOLAR_ARRAY_DIMENSIONS(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    NOMINAL_OPERATIONAL_LIFETIME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    INSTRUMENTS(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? (obj || new IDM()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    instrumentsLength() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startPLD(builder) {
        builder.startObject(7);
    }
    static addPayloadDuration(builder, PAYLOAD_DURATIONOffset) {
        builder.addFieldOffset(0, PAYLOAD_DURATIONOffset, 0);
    }
    static addMassAtLaunch(builder, MASS_AT_LAUNCH) {
        builder.addFieldFloat32(1, MASS_AT_LAUNCH, 0.0);
    }
    static addDimensions(builder, DIMENSIONSOffset) {
        builder.addFieldOffset(2, DIMENSIONSOffset, 0);
    }
    static addSolarArrayArea(builder, SOLAR_ARRAY_AREA) {
        builder.addFieldFloat32(3, SOLAR_ARRAY_AREA, 0.0);
    }
    static addSolarArrayDimensions(builder, SOLAR_ARRAY_DIMENSIONSOffset) {
        builder.addFieldOffset(4, SOLAR_ARRAY_DIMENSIONSOffset, 0);
    }
    static addNominalOperationalLifetime(builder, NOMINAL_OPERATIONAL_LIFETIMEOffset) {
        builder.addFieldOffset(5, NOMINAL_OPERATIONAL_LIFETIMEOffset, 0);
    }
    static addInstruments(builder, INSTRUMENTSOffset) {
        builder.addFieldOffset(6, INSTRUMENTSOffset, 0);
    }
    static createInstrumentsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startInstrumentsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endPLD(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createPLD(builder, PAYLOAD_DURATIONOffset, MASS_AT_LAUNCH, DIMENSIONSOffset, SOLAR_ARRAY_AREA, SOLAR_ARRAY_DIMENSIONSOffset, NOMINAL_OPERATIONAL_LIFETIMEOffset, INSTRUMENTSOffset) {
        PLD.startPLD(builder);
        PLD.addPayloadDuration(builder, PAYLOAD_DURATIONOffset);
        PLD.addMassAtLaunch(builder, MASS_AT_LAUNCH);
        PLD.addDimensions(builder, DIMENSIONSOffset);
        PLD.addSolarArrayArea(builder, SOLAR_ARRAY_AREA);
        PLD.addSolarArrayDimensions(builder, SOLAR_ARRAY_DIMENSIONSOffset);
        PLD.addNominalOperationalLifetime(builder, NOMINAL_OPERATIONAL_LIFETIMEOffset);
        PLD.addInstruments(builder, INSTRUMENTSOffset);
        return PLD.endPLD(builder);
    }
    unpack() {
        return new PLDT(this.PAYLOAD_DURATION(), this.MASS_AT_LAUNCH(), this.DIMENSIONS(), this.SOLAR_ARRAY_AREA(), this.SOLAR_ARRAY_DIMENSIONS(), this.NOMINAL_OPERATIONAL_LIFETIME(), this.bb.createObjList(this.INSTRUMENTS.bind(this), this.instrumentsLength()));
    }
    unpackTo(_o) {
        _o.PAYLOAD_DURATION = this.PAYLOAD_DURATION();
        _o.MASS_AT_LAUNCH = this.MASS_AT_LAUNCH();
        _o.DIMENSIONS = this.DIMENSIONS();
        _o.SOLAR_ARRAY_AREA = this.SOLAR_ARRAY_AREA();
        _o.SOLAR_ARRAY_DIMENSIONS = this.SOLAR_ARRAY_DIMENSIONS();
        _o.NOMINAL_OPERATIONAL_LIFETIME = this.NOMINAL_OPERATIONAL_LIFETIME();
        _o.INSTRUMENTS = this.bb.createObjList(this.INSTRUMENTS.bind(this), this.instrumentsLength());
    }
}
export class PLDT {
    constructor(PAYLOAD_DURATION = null, MASS_AT_LAUNCH = 0.0, DIMENSIONS = null, SOLAR_ARRAY_AREA = 0.0, SOLAR_ARRAY_DIMENSIONS = null, NOMINAL_OPERATIONAL_LIFETIME = null, INSTRUMENTS = []) {
        this.PAYLOAD_DURATION = PAYLOAD_DURATION;
        this.MASS_AT_LAUNCH = MASS_AT_LAUNCH;
        this.DIMENSIONS = DIMENSIONS;
        this.SOLAR_ARRAY_AREA = SOLAR_ARRAY_AREA;
        this.SOLAR_ARRAY_DIMENSIONS = SOLAR_ARRAY_DIMENSIONS;
        this.NOMINAL_OPERATIONAL_LIFETIME = NOMINAL_OPERATIONAL_LIFETIME;
        this.INSTRUMENTS = INSTRUMENTS;
    }
    pack(builder) {
        const PAYLOAD_DURATION = (this.PAYLOAD_DURATION !== null ? builder.createString(this.PAYLOAD_DURATION) : 0);
        const DIMENSIONS = (this.DIMENSIONS !== null ? builder.createString(this.DIMENSIONS) : 0);
        const SOLAR_ARRAY_DIMENSIONS = (this.SOLAR_ARRAY_DIMENSIONS !== null ? builder.createString(this.SOLAR_ARRAY_DIMENSIONS) : 0);
        const NOMINAL_OPERATIONAL_LIFETIME = (this.NOMINAL_OPERATIONAL_LIFETIME !== null ? builder.createString(this.NOMINAL_OPERATIONAL_LIFETIME) : 0);
        const INSTRUMENTS = PLD.createInstrumentsVector(builder, builder.createObjectOffsetList(this.INSTRUMENTS));
        return PLD.createPLD(builder, PAYLOAD_DURATION, this.MASS_AT_LAUNCH, DIMENSIONS, this.SOLAR_ARRAY_AREA, SOLAR_ARRAY_DIMENSIONS, NOMINAL_OPERATIONAL_LIFETIME, INSTRUMENTS);
    }
}
