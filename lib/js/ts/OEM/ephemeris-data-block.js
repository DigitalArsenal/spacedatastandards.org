// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { CAT } from './cat.js';
import { covarianceMatrixLine } from './covariance-matrix-line.js';
import { ephemerisDataLine } from './ephemeris-data-line.js';
import { refFrame } from './ref-frame.js';
import { timeSystem } from './time-system.js';
/**
 * OEM Ephemeris Data Block
 */
export class ephemerisDataBlock {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsephemerisDataBlock(bb, obj) {
        return (obj || new ephemerisDataBlock()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsephemerisDataBlock(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ephemerisDataBlock()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    comment(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Satellite name for the first object
     */
    object(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new CAT()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    centerName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Name of the reference frame (TEME, EME2000, etc.)
     */
    referenceFrame() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : refFrame.ECEF;
    }
    referenceFrameEpoch(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Reference frame for the covariance matrix
     */
    covReferenceFrame() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : refFrame.ECEF;
    }
    /**
     * Time system used for the orbit state and covariance matrix. (UTC)
     */
    timeSystem() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : timeSystem.GMST;
    }
    startTime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    useableStartTime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    useableStopTime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    stopTime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Step size in seconds separating the epochs of each ephemeris data row
     */
    stepSize() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    interpolation(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Recommended interpolation degree for ephemeris data
     */
    interpolationDegree() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    /**
     * Array of ephemeris data lines
     */
    ephemerisDataLines(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? (obj || new ephemerisDataLine()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    ephemerisDataLinesLength() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Array of covariance matrix lines
     */
    covarianceMatrixLines(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? (obj || new covarianceMatrixLine()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    covarianceMatrixLinesLength() {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startephemerisDataBlock(builder) {
        builder.startObject(16);
    }
    static addComment(builder, commentOffset) {
        builder.addFieldOffset(0, commentOffset, 0);
    }
    static addObject(builder, objectOffset) {
        builder.addFieldOffset(1, objectOffset, 0);
    }
    static addCenterName(builder, centerNameOffset) {
        builder.addFieldOffset(2, centerNameOffset, 0);
    }
    static addReferenceFrame(builder, referenceFrame) {
        builder.addFieldInt8(3, referenceFrame, refFrame.ECEF);
    }
    static addReferenceFrameEpoch(builder, referenceFrameEpochOffset) {
        builder.addFieldOffset(4, referenceFrameEpochOffset, 0);
    }
    static addCovReferenceFrame(builder, covReferenceFrame) {
        builder.addFieldInt8(5, covReferenceFrame, refFrame.ECEF);
    }
    static addTimeSystem(builder, timeSystem) {
        builder.addFieldInt8(6, timeSystem, timeSystem.GMST);
    }
    static addStartTime(builder, startTimeOffset) {
        builder.addFieldOffset(7, startTimeOffset, 0);
    }
    static addUseableStartTime(builder, useableStartTimeOffset) {
        builder.addFieldOffset(8, useableStartTimeOffset, 0);
    }
    static addUseableStopTime(builder, useableStopTimeOffset) {
        builder.addFieldOffset(9, useableStopTimeOffset, 0);
    }
    static addStopTime(builder, stopTimeOffset) {
        builder.addFieldOffset(10, stopTimeOffset, 0);
    }
    static addStepSize(builder, stepSize) {
        builder.addFieldFloat64(11, stepSize, 0.0);
    }
    static addInterpolation(builder, interpolationOffset) {
        builder.addFieldOffset(12, interpolationOffset, 0);
    }
    static addInterpolationDegree(builder, interpolationDegree) {
        builder.addFieldInt32(13, interpolationDegree, 0);
    }
    static addEphemerisDataLines(builder, ephemerisDataLinesOffset) {
        builder.addFieldOffset(14, ephemerisDataLinesOffset, 0);
    }
    static createEphemerisDataLinesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startEphemerisDataLinesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addCovarianceMatrixLines(builder, covarianceMatrixLinesOffset) {
        builder.addFieldOffset(15, covarianceMatrixLinesOffset, 0);
    }
    static createCovarianceMatrixLinesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startCovarianceMatrixLinesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endephemerisDataBlock(builder) {
        const offset = builder.endObject();
        return offset;
    }
    unpack() {
        return new ephemerisDataBlockT(this.comment(), (this.object() !== null ? this.object().unpack() : null), this.centerName(), this.referenceFrame(), this.referenceFrameEpoch(), this.covReferenceFrame(), this.timeSystem(), this.startTime(), this.useableStartTime(), this.useableStopTime(), this.stopTime(), this.stepSize(), this.interpolation(), this.interpolationDegree(), this.bb.createObjList(this.ephemerisDataLines.bind(this), this.ephemerisDataLinesLength()), this.bb.createObjList(this.covarianceMatrixLines.bind(this), this.covarianceMatrixLinesLength()));
    }
    unpackTo(_o) {
        _o.comment = this.comment();
        _o.object = (this.object() !== null ? this.object().unpack() : null);
        _o.centerName = this.centerName();
        _o.referenceFrame = this.referenceFrame();
        _o.referenceFrameEpoch = this.referenceFrameEpoch();
        _o.covReferenceFrame = this.covReferenceFrame();
        _o.timeSystem = this.timeSystem();
        _o.startTime = this.startTime();
        _o.useableStartTime = this.useableStartTime();
        _o.useableStopTime = this.useableStopTime();
        _o.stopTime = this.stopTime();
        _o.stepSize = this.stepSize();
        _o.interpolation = this.interpolation();
        _o.interpolationDegree = this.interpolationDegree();
        _o.ephemerisDataLines = this.bb.createObjList(this.ephemerisDataLines.bind(this), this.ephemerisDataLinesLength());
        _o.covarianceMatrixLines = this.bb.createObjList(this.covarianceMatrixLines.bind(this), this.covarianceMatrixLinesLength());
    }
}
export class ephemerisDataBlockT {
    constructor(comment = null, object = null, centerName = null, referenceFrame = refFrame.ECEF, referenceFrameEpoch = null, covReferenceFrame = refFrame.ECEF, timeSystem = timeSystem.GMST, startTime = null, useableStartTime = null, useableStopTime = null, stopTime = null, stepSize = 0.0, interpolation = null, interpolationDegree = 0, ephemerisDataLines = [], covarianceMatrixLines = []) {
        this.comment = comment;
        this.object = object;
        this.centerName = centerName;
        this.referenceFrame = referenceFrame;
        this.referenceFrameEpoch = referenceFrameEpoch;
        this.covReferenceFrame = covReferenceFrame;
        this.timeSystem = timeSystem;
        this.startTime = startTime;
        this.useableStartTime = useableStartTime;
        this.useableStopTime = useableStopTime;
        this.stopTime = stopTime;
        this.stepSize = stepSize;
        this.interpolation = interpolation;
        this.interpolationDegree = interpolationDegree;
        this.ephemerisDataLines = ephemerisDataLines;
        this.covarianceMatrixLines = covarianceMatrixLines;
    }
    pack(builder) {
        const comment = (this.comment !== null ? builder.createString(this.comment) : 0);
        const object = (this.object !== null ? this.object.pack(builder) : 0);
        const centerName = (this.centerName !== null ? builder.createString(this.centerName) : 0);
        const referenceFrameEpoch = (this.referenceFrameEpoch !== null ? builder.createString(this.referenceFrameEpoch) : 0);
        const startTime = (this.startTime !== null ? builder.createString(this.startTime) : 0);
        const useableStartTime = (this.useableStartTime !== null ? builder.createString(this.useableStartTime) : 0);
        const useableStopTime = (this.useableStopTime !== null ? builder.createString(this.useableStopTime) : 0);
        const stopTime = (this.stopTime !== null ? builder.createString(this.stopTime) : 0);
        const interpolation = (this.interpolation !== null ? builder.createString(this.interpolation) : 0);
        const ephemerisDataLines = ephemerisDataBlock.createEphemerisDataLinesVector(builder, builder.createObjectOffsetList(this.ephemerisDataLines));
        const covarianceMatrixLines = ephemerisDataBlock.createCovarianceMatrixLinesVector(builder, builder.createObjectOffsetList(this.covarianceMatrixLines));
        ephemerisDataBlock.startephemerisDataBlock(builder);
        ephemerisDataBlock.addComment(builder, comment);
        ephemerisDataBlock.addObject(builder, object);
        ephemerisDataBlock.addCenterName(builder, centerName);
        ephemerisDataBlock.addReferenceFrame(builder, this.referenceFrame);
        ephemerisDataBlock.addReferenceFrameEpoch(builder, referenceFrameEpoch);
        ephemerisDataBlock.addCovReferenceFrame(builder, this.covReferenceFrame);
        ephemerisDataBlock.addTimeSystem(builder, this.timeSystem);
        ephemerisDataBlock.addStartTime(builder, startTime);
        ephemerisDataBlock.addUseableStartTime(builder, useableStartTime);
        ephemerisDataBlock.addUseableStopTime(builder, useableStopTime);
        ephemerisDataBlock.addStopTime(builder, stopTime);
        ephemerisDataBlock.addStepSize(builder, this.stepSize);
        ephemerisDataBlock.addInterpolation(builder, interpolation);
        ephemerisDataBlock.addInterpolationDegree(builder, this.interpolationDegree);
        ephemerisDataBlock.addEphemerisDataLines(builder, ephemerisDataLines);
        ephemerisDataBlock.addCovarianceMatrixLines(builder, covarianceMatrixLines);
        return ephemerisDataBlock.endephemerisDataBlock(builder);
    }
}
