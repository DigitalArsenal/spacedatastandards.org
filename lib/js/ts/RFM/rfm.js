// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { refFrame } from './ref-frame.js';
/**
 * Reference Frame Message
 */
export class RFM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsRFM(bb, obj) {
        return (obj || new RFM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsRFM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RFM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$RFM');
    }
    referenceFrame() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : refFrame.ECEF;
    }
    static startRFM(builder) {
        builder.startObject(1);
    }
    static addReferenceFrame(builder, referenceFrame) {
        builder.addFieldInt8(0, referenceFrame, refFrame.ECEF);
    }
    static endRFM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishRFMBuffer(builder, offset) {
        builder.finish(offset, '$RFM');
    }
    static finishSizePrefixedRFMBuffer(builder, offset) {
        builder.finish(offset, '$RFM', true);
    }
    static createRFM(builder, referenceFrame) {
        RFM.startRFM(builder);
        RFM.addReferenceFrame(builder, referenceFrame);
        return RFM.endRFM(builder);
    }
    unpack() {
        return new RFMT(this.referenceFrame());
    }
    unpackTo(_o) {
        _o.referenceFrame = this.referenceFrame();
    }
}
export class RFMT {
    constructor(referenceFrame = refFrame.ECEF) {
        this.referenceFrame = referenceFrame;
    }
    pack(builder) {
        return RFM.createRFM(builder, this.referenceFrame);
    }
}
