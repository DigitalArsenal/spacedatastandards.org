// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * Country Identity Message
 */
export class CTR {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCTR(bb, obj) {
        return (obj || new CTR()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCTR(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CTR()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$CTR');
    }
    id(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    name(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    gencCode(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    alpha2Code(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    alpha3Code(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    stanagCode(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    internetCctld(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    comment(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startCTR(builder) {
        builder.startObject(8);
    }
    static addId(builder, idOffset) {
        builder.addFieldOffset(0, idOffset, 0);
    }
    static addName(builder, nameOffset) {
        builder.addFieldOffset(1, nameOffset, 0);
    }
    static addGencCode(builder, gencCodeOffset) {
        builder.addFieldOffset(2, gencCodeOffset, 0);
    }
    static addAlpha2Code(builder, alpha2CodeOffset) {
        builder.addFieldOffset(3, alpha2CodeOffset, 0);
    }
    static addAlpha3Code(builder, alpha3CodeOffset) {
        builder.addFieldOffset(4, alpha3CodeOffset, 0);
    }
    static addStanagCode(builder, stanagCodeOffset) {
        builder.addFieldOffset(5, stanagCodeOffset, 0);
    }
    static addInternetCctld(builder, internetCctldOffset) {
        builder.addFieldOffset(6, internetCctldOffset, 0);
    }
    static addComment(builder, commentOffset) {
        builder.addFieldOffset(7, commentOffset, 0);
    }
    static endCTR(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishCTRBuffer(builder, offset) {
        builder.finish(offset, '$CTR');
    }
    static finishSizePrefixedCTRBuffer(builder, offset) {
        builder.finish(offset, '$CTR', true);
    }
    static createCTR(builder, idOffset, nameOffset, gencCodeOffset, alpha2CodeOffset, alpha3CodeOffset, stanagCodeOffset, internetCctldOffset, commentOffset) {
        CTR.startCTR(builder);
        CTR.addId(builder, idOffset);
        CTR.addName(builder, nameOffset);
        CTR.addGencCode(builder, gencCodeOffset);
        CTR.addAlpha2Code(builder, alpha2CodeOffset);
        CTR.addAlpha3Code(builder, alpha3CodeOffset);
        CTR.addStanagCode(builder, stanagCodeOffset);
        CTR.addInternetCctld(builder, internetCctldOffset);
        CTR.addComment(builder, commentOffset);
        return CTR.endCTR(builder);
    }
    unpack() {
        return new CTRT(this.id(), this.name(), this.gencCode(), this.alpha2Code(), this.alpha3Code(), this.stanagCode(), this.internetCctld(), this.comment());
    }
    unpackTo(_o) {
        _o.id = this.id();
        _o.name = this.name();
        _o.gencCode = this.gencCode();
        _o.alpha2Code = this.alpha2Code();
        _o.alpha3Code = this.alpha3Code();
        _o.stanagCode = this.stanagCode();
        _o.internetCctld = this.internetCctld();
        _o.comment = this.comment();
    }
}
export class CTRT {
    constructor(id = null, name = null, gencCode = null, alpha2Code = null, alpha3Code = null, stanagCode = null, internetCctld = null, comment = null) {
        this.id = id;
        this.name = name;
        this.gencCode = gencCode;
        this.alpha2Code = alpha2Code;
        this.alpha3Code = alpha3Code;
        this.stanagCode = stanagCode;
        this.internetCctld = internetCctld;
        this.comment = comment;
    }
    pack(builder) {
        const id = (this.id !== null ? builder.createString(this.id) : 0);
        const name = (this.name !== null ? builder.createString(this.name) : 0);
        const gencCode = (this.gencCode !== null ? builder.createString(this.gencCode) : 0);
        const alpha2Code = (this.alpha2Code !== null ? builder.createString(this.alpha2Code) : 0);
        const alpha3Code = (this.alpha3Code !== null ? builder.createString(this.alpha3Code) : 0);
        const stanagCode = (this.stanagCode !== null ? builder.createString(this.stanagCode) : 0);
        const internetCctld = (this.internetCctld !== null ? builder.createString(this.internetCctld) : 0);
        const comment = (this.comment !== null ? builder.createString(this.comment) : 0);
        return CTR.createCTR(builder, id, name, gencCode, alpha2Code, alpha3Code, stanagCode, internetCctld, comment);
    }
}
