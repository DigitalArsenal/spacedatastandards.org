// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class Metadata {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMetadata(bb, obj) {
        return (obj || new Metadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMetadata(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Metadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    comment(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    commentLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    objectName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    internationalDesignator(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    catalogName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    objectDesignator(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    alternateNames(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    alternateNamesLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    originatorPoc(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    originatorPosition(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    originatorPhone(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    originatorEmail(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    originatorAddress(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    techOrg(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    techPoc(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    techPosition(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    techPhone(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    techEmail(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    techAddress(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    previousMessageId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    nextMessageId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    admMsgLink(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    cdmMsgLink(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    prmMsgLink(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    rdmMsgLink(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    tdmMsgLink(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    tdmMsgLinkLength() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    operator(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    owner(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    country(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    constellation(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    objectType(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    timeSystem(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 62);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    epochTzero(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    opsStatus(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 66);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    orbitCategory(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 68);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ocmDataElements(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    ocmDataElementsLength() {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Number of spacecraft clock counts at EPOCH_TZERO (used if TIME_SYSTEM is SCLK).
     */
    sclkOffsetAtEpoch() {
        const offset = this.bb.__offset(this.bb_pos, 72);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Number of clock seconds occurring during one SI second (used if TIME_SYSTEM is SCLK).
     */
    sclkSecPerSiSec() {
        const offset = this.bb.__offset(this.bb_pos, 74);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    previousMessageEpoch(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 76);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    nextMessageEpoch(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 78);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    startTime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 80);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    stopTime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 82);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Span of time that the OCM covers, measured in days.
     */
    timeSpan() {
        const offset = this.bb.__offset(this.bb_pos, 84);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Difference (TAI - UTC) in seconds at EPOCH_TZERO.
     */
    taimutcAtTzero() {
        const offset = this.bb.__offset(this.bb_pos, 86);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    nextLeapEpoch(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 88);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Difference (TAI - UTC) in seconds at NEXT_LEAP_EPOCH.
     */
    nextLeapTaimutc() {
        const offset = this.bb.__offset(this.bb_pos, 90);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Difference (UT1 - UTC) in seconds at EPOCH_TZERO.
     */
    ut1MutcAtTzero() {
        const offset = this.bb.__offset(this.bb_pos, 92);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    eopSource(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 94);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    interpMethodEop(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 96);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    celestialSource(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 98);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startMetadata(builder) {
        builder.startObject(48);
    }
    static addComment(builder, commentOffset) {
        builder.addFieldOffset(0, commentOffset, 0);
    }
    static createCommentVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startCommentVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addObjectName(builder, objectNameOffset) {
        builder.addFieldOffset(1, objectNameOffset, 0);
    }
    static addInternationalDesignator(builder, internationalDesignatorOffset) {
        builder.addFieldOffset(2, internationalDesignatorOffset, 0);
    }
    static addCatalogName(builder, catalogNameOffset) {
        builder.addFieldOffset(3, catalogNameOffset, 0);
    }
    static addObjectDesignator(builder, objectDesignatorOffset) {
        builder.addFieldOffset(4, objectDesignatorOffset, 0);
    }
    static addAlternateNames(builder, alternateNamesOffset) {
        builder.addFieldOffset(5, alternateNamesOffset, 0);
    }
    static createAlternateNamesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startAlternateNamesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addOriginatorPoc(builder, originatorPocOffset) {
        builder.addFieldOffset(6, originatorPocOffset, 0);
    }
    static addOriginatorPosition(builder, originatorPositionOffset) {
        builder.addFieldOffset(7, originatorPositionOffset, 0);
    }
    static addOriginatorPhone(builder, originatorPhoneOffset) {
        builder.addFieldOffset(8, originatorPhoneOffset, 0);
    }
    static addOriginatorEmail(builder, originatorEmailOffset) {
        builder.addFieldOffset(9, originatorEmailOffset, 0);
    }
    static addOriginatorAddress(builder, originatorAddressOffset) {
        builder.addFieldOffset(10, originatorAddressOffset, 0);
    }
    static addTechOrg(builder, techOrgOffset) {
        builder.addFieldOffset(11, techOrgOffset, 0);
    }
    static addTechPoc(builder, techPocOffset) {
        builder.addFieldOffset(12, techPocOffset, 0);
    }
    static addTechPosition(builder, techPositionOffset) {
        builder.addFieldOffset(13, techPositionOffset, 0);
    }
    static addTechPhone(builder, techPhoneOffset) {
        builder.addFieldOffset(14, techPhoneOffset, 0);
    }
    static addTechEmail(builder, techEmailOffset) {
        builder.addFieldOffset(15, techEmailOffset, 0);
    }
    static addTechAddress(builder, techAddressOffset) {
        builder.addFieldOffset(16, techAddressOffset, 0);
    }
    static addPreviousMessageId(builder, previousMessageIdOffset) {
        builder.addFieldOffset(17, previousMessageIdOffset, 0);
    }
    static addNextMessageId(builder, nextMessageIdOffset) {
        builder.addFieldOffset(18, nextMessageIdOffset, 0);
    }
    static addAdmMsgLink(builder, admMsgLinkOffset) {
        builder.addFieldOffset(19, admMsgLinkOffset, 0);
    }
    static addCdmMsgLink(builder, cdmMsgLinkOffset) {
        builder.addFieldOffset(20, cdmMsgLinkOffset, 0);
    }
    static addPrmMsgLink(builder, prmMsgLinkOffset) {
        builder.addFieldOffset(21, prmMsgLinkOffset, 0);
    }
    static addRdmMsgLink(builder, rdmMsgLinkOffset) {
        builder.addFieldOffset(22, rdmMsgLinkOffset, 0);
    }
    static addTdmMsgLink(builder, tdmMsgLinkOffset) {
        builder.addFieldOffset(23, tdmMsgLinkOffset, 0);
    }
    static createTdmMsgLinkVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startTdmMsgLinkVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addOperator(builder, operatorOffset) {
        builder.addFieldOffset(24, operatorOffset, 0);
    }
    static addOwner(builder, ownerOffset) {
        builder.addFieldOffset(25, ownerOffset, 0);
    }
    static addCountry(builder, countryOffset) {
        builder.addFieldOffset(26, countryOffset, 0);
    }
    static addConstellation(builder, constellationOffset) {
        builder.addFieldOffset(27, constellationOffset, 0);
    }
    static addObjectType(builder, objectTypeOffset) {
        builder.addFieldOffset(28, objectTypeOffset, 0);
    }
    static addTimeSystem(builder, timeSystemOffset) {
        builder.addFieldOffset(29, timeSystemOffset, 0);
    }
    static addEpochTzero(builder, epochTzeroOffset) {
        builder.addFieldOffset(30, epochTzeroOffset, 0);
    }
    static addOpsStatus(builder, opsStatusOffset) {
        builder.addFieldOffset(31, opsStatusOffset, 0);
    }
    static addOrbitCategory(builder, orbitCategoryOffset) {
        builder.addFieldOffset(32, orbitCategoryOffset, 0);
    }
    static addOcmDataElements(builder, ocmDataElementsOffset) {
        builder.addFieldOffset(33, ocmDataElementsOffset, 0);
    }
    static createOcmDataElementsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startOcmDataElementsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addSclkOffsetAtEpoch(builder, sclkOffsetAtEpoch) {
        builder.addFieldFloat64(34, sclkOffsetAtEpoch, 0.0);
    }
    static addSclkSecPerSiSec(builder, sclkSecPerSiSec) {
        builder.addFieldFloat64(35, sclkSecPerSiSec, 0.0);
    }
    static addPreviousMessageEpoch(builder, previousMessageEpochOffset) {
        builder.addFieldOffset(36, previousMessageEpochOffset, 0);
    }
    static addNextMessageEpoch(builder, nextMessageEpochOffset) {
        builder.addFieldOffset(37, nextMessageEpochOffset, 0);
    }
    static addStartTime(builder, startTimeOffset) {
        builder.addFieldOffset(38, startTimeOffset, 0);
    }
    static addStopTime(builder, stopTimeOffset) {
        builder.addFieldOffset(39, stopTimeOffset, 0);
    }
    static addTimeSpan(builder, timeSpan) {
        builder.addFieldFloat64(40, timeSpan, 0.0);
    }
    static addTaimutcAtTzero(builder, taimutcAtTzero) {
        builder.addFieldFloat64(41, taimutcAtTzero, 0.0);
    }
    static addNextLeapEpoch(builder, nextLeapEpochOffset) {
        builder.addFieldOffset(42, nextLeapEpochOffset, 0);
    }
    static addNextLeapTaimutc(builder, nextLeapTaimutc) {
        builder.addFieldFloat64(43, nextLeapTaimutc, 0.0);
    }
    static addUt1MutcAtTzero(builder, ut1MutcAtTzero) {
        builder.addFieldFloat64(44, ut1MutcAtTzero, 0.0);
    }
    static addEopSource(builder, eopSourceOffset) {
        builder.addFieldOffset(45, eopSourceOffset, 0);
    }
    static addInterpMethodEop(builder, interpMethodEopOffset) {
        builder.addFieldOffset(46, interpMethodEopOffset, 0);
    }
    static addCelestialSource(builder, celestialSourceOffset) {
        builder.addFieldOffset(47, celestialSourceOffset, 0);
    }
    static endMetadata(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createMetadata(builder, commentOffset, objectNameOffset, internationalDesignatorOffset, catalogNameOffset, objectDesignatorOffset, alternateNamesOffset, originatorPocOffset, originatorPositionOffset, originatorPhoneOffset, originatorEmailOffset, originatorAddressOffset, techOrgOffset, techPocOffset, techPositionOffset, techPhoneOffset, techEmailOffset, techAddressOffset, previousMessageIdOffset, nextMessageIdOffset, admMsgLinkOffset, cdmMsgLinkOffset, prmMsgLinkOffset, rdmMsgLinkOffset, tdmMsgLinkOffset, operatorOffset, ownerOffset, countryOffset, constellationOffset, objectTypeOffset, timeSystemOffset, epochTzeroOffset, opsStatusOffset, orbitCategoryOffset, ocmDataElementsOffset, sclkOffsetAtEpoch, sclkSecPerSiSec, previousMessageEpochOffset, nextMessageEpochOffset, startTimeOffset, stopTimeOffset, timeSpan, taimutcAtTzero, nextLeapEpochOffset, nextLeapTaimutc, ut1MutcAtTzero, eopSourceOffset, interpMethodEopOffset, celestialSourceOffset) {
        Metadata.startMetadata(builder);
        Metadata.addComment(builder, commentOffset);
        Metadata.addObjectName(builder, objectNameOffset);
        Metadata.addInternationalDesignator(builder, internationalDesignatorOffset);
        Metadata.addCatalogName(builder, catalogNameOffset);
        Metadata.addObjectDesignator(builder, objectDesignatorOffset);
        Metadata.addAlternateNames(builder, alternateNamesOffset);
        Metadata.addOriginatorPoc(builder, originatorPocOffset);
        Metadata.addOriginatorPosition(builder, originatorPositionOffset);
        Metadata.addOriginatorPhone(builder, originatorPhoneOffset);
        Metadata.addOriginatorEmail(builder, originatorEmailOffset);
        Metadata.addOriginatorAddress(builder, originatorAddressOffset);
        Metadata.addTechOrg(builder, techOrgOffset);
        Metadata.addTechPoc(builder, techPocOffset);
        Metadata.addTechPosition(builder, techPositionOffset);
        Metadata.addTechPhone(builder, techPhoneOffset);
        Metadata.addTechEmail(builder, techEmailOffset);
        Metadata.addTechAddress(builder, techAddressOffset);
        Metadata.addPreviousMessageId(builder, previousMessageIdOffset);
        Metadata.addNextMessageId(builder, nextMessageIdOffset);
        Metadata.addAdmMsgLink(builder, admMsgLinkOffset);
        Metadata.addCdmMsgLink(builder, cdmMsgLinkOffset);
        Metadata.addPrmMsgLink(builder, prmMsgLinkOffset);
        Metadata.addRdmMsgLink(builder, rdmMsgLinkOffset);
        Metadata.addTdmMsgLink(builder, tdmMsgLinkOffset);
        Metadata.addOperator(builder, operatorOffset);
        Metadata.addOwner(builder, ownerOffset);
        Metadata.addCountry(builder, countryOffset);
        Metadata.addConstellation(builder, constellationOffset);
        Metadata.addObjectType(builder, objectTypeOffset);
        Metadata.addTimeSystem(builder, timeSystemOffset);
        Metadata.addEpochTzero(builder, epochTzeroOffset);
        Metadata.addOpsStatus(builder, opsStatusOffset);
        Metadata.addOrbitCategory(builder, orbitCategoryOffset);
        Metadata.addOcmDataElements(builder, ocmDataElementsOffset);
        Metadata.addSclkOffsetAtEpoch(builder, sclkOffsetAtEpoch);
        Metadata.addSclkSecPerSiSec(builder, sclkSecPerSiSec);
        Metadata.addPreviousMessageEpoch(builder, previousMessageEpochOffset);
        Metadata.addNextMessageEpoch(builder, nextMessageEpochOffset);
        Metadata.addStartTime(builder, startTimeOffset);
        Metadata.addStopTime(builder, stopTimeOffset);
        Metadata.addTimeSpan(builder, timeSpan);
        Metadata.addTaimutcAtTzero(builder, taimutcAtTzero);
        Metadata.addNextLeapEpoch(builder, nextLeapEpochOffset);
        Metadata.addNextLeapTaimutc(builder, nextLeapTaimutc);
        Metadata.addUt1MutcAtTzero(builder, ut1MutcAtTzero);
        Metadata.addEopSource(builder, eopSourceOffset);
        Metadata.addInterpMethodEop(builder, interpMethodEopOffset);
        Metadata.addCelestialSource(builder, celestialSourceOffset);
        return Metadata.endMetadata(builder);
    }
    unpack() {
        return new MetadataT(this.bb.createScalarList(this.comment.bind(this), this.commentLength()), this.objectName(), this.internationalDesignator(), this.catalogName(), this.objectDesignator(), this.bb.createScalarList(this.alternateNames.bind(this), this.alternateNamesLength()), this.originatorPoc(), this.originatorPosition(), this.originatorPhone(), this.originatorEmail(), this.originatorAddress(), this.techOrg(), this.techPoc(), this.techPosition(), this.techPhone(), this.techEmail(), this.techAddress(), this.previousMessageId(), this.nextMessageId(), this.admMsgLink(), this.cdmMsgLink(), this.prmMsgLink(), this.rdmMsgLink(), this.bb.createScalarList(this.tdmMsgLink.bind(this), this.tdmMsgLinkLength()), this.operator(), this.owner(), this.country(), this.constellation(), this.objectType(), this.timeSystem(), this.epochTzero(), this.opsStatus(), this.orbitCategory(), this.bb.createScalarList(this.ocmDataElements.bind(this), this.ocmDataElementsLength()), this.sclkOffsetAtEpoch(), this.sclkSecPerSiSec(), this.previousMessageEpoch(), this.nextMessageEpoch(), this.startTime(), this.stopTime(), this.timeSpan(), this.taimutcAtTzero(), this.nextLeapEpoch(), this.nextLeapTaimutc(), this.ut1MutcAtTzero(), this.eopSource(), this.interpMethodEop(), this.celestialSource());
    }
    unpackTo(_o) {
        _o.comment = this.bb.createScalarList(this.comment.bind(this), this.commentLength());
        _o.objectName = this.objectName();
        _o.internationalDesignator = this.internationalDesignator();
        _o.catalogName = this.catalogName();
        _o.objectDesignator = this.objectDesignator();
        _o.alternateNames = this.bb.createScalarList(this.alternateNames.bind(this), this.alternateNamesLength());
        _o.originatorPoc = this.originatorPoc();
        _o.originatorPosition = this.originatorPosition();
        _o.originatorPhone = this.originatorPhone();
        _o.originatorEmail = this.originatorEmail();
        _o.originatorAddress = this.originatorAddress();
        _o.techOrg = this.techOrg();
        _o.techPoc = this.techPoc();
        _o.techPosition = this.techPosition();
        _o.techPhone = this.techPhone();
        _o.techEmail = this.techEmail();
        _o.techAddress = this.techAddress();
        _o.previousMessageId = this.previousMessageId();
        _o.nextMessageId = this.nextMessageId();
        _o.admMsgLink = this.admMsgLink();
        _o.cdmMsgLink = this.cdmMsgLink();
        _o.prmMsgLink = this.prmMsgLink();
        _o.rdmMsgLink = this.rdmMsgLink();
        _o.tdmMsgLink = this.bb.createScalarList(this.tdmMsgLink.bind(this), this.tdmMsgLinkLength());
        _o.operator = this.operator();
        _o.owner = this.owner();
        _o.country = this.country();
        _o.constellation = this.constellation();
        _o.objectType = this.objectType();
        _o.timeSystem = this.timeSystem();
        _o.epochTzero = this.epochTzero();
        _o.opsStatus = this.opsStatus();
        _o.orbitCategory = this.orbitCategory();
        _o.ocmDataElements = this.bb.createScalarList(this.ocmDataElements.bind(this), this.ocmDataElementsLength());
        _o.sclkOffsetAtEpoch = this.sclkOffsetAtEpoch();
        _o.sclkSecPerSiSec = this.sclkSecPerSiSec();
        _o.previousMessageEpoch = this.previousMessageEpoch();
        _o.nextMessageEpoch = this.nextMessageEpoch();
        _o.startTime = this.startTime();
        _o.stopTime = this.stopTime();
        _o.timeSpan = this.timeSpan();
        _o.taimutcAtTzero = this.taimutcAtTzero();
        _o.nextLeapEpoch = this.nextLeapEpoch();
        _o.nextLeapTaimutc = this.nextLeapTaimutc();
        _o.ut1MutcAtTzero = this.ut1MutcAtTzero();
        _o.eopSource = this.eopSource();
        _o.interpMethodEop = this.interpMethodEop();
        _o.celestialSource = this.celestialSource();
    }
}
export class MetadataT {
    constructor(comment = [], objectName = null, internationalDesignator = null, catalogName = null, objectDesignator = null, alternateNames = [], originatorPoc = null, originatorPosition = null, originatorPhone = null, originatorEmail = null, originatorAddress = null, techOrg = null, techPoc = null, techPosition = null, techPhone = null, techEmail = null, techAddress = null, previousMessageId = null, nextMessageId = null, admMsgLink = null, cdmMsgLink = null, prmMsgLink = null, rdmMsgLink = null, tdmMsgLink = [], operator = null, owner = null, country = null, constellation = null, objectType = null, timeSystem = null, epochTzero = null, opsStatus = null, orbitCategory = null, ocmDataElements = [], sclkOffsetAtEpoch = 0.0, sclkSecPerSiSec = 0.0, previousMessageEpoch = null, nextMessageEpoch = null, startTime = null, stopTime = null, timeSpan = 0.0, taimutcAtTzero = 0.0, nextLeapEpoch = null, nextLeapTaimutc = 0.0, ut1MutcAtTzero = 0.0, eopSource = null, interpMethodEop = null, celestialSource = null) {
        this.comment = comment;
        this.objectName = objectName;
        this.internationalDesignator = internationalDesignator;
        this.catalogName = catalogName;
        this.objectDesignator = objectDesignator;
        this.alternateNames = alternateNames;
        this.originatorPoc = originatorPoc;
        this.originatorPosition = originatorPosition;
        this.originatorPhone = originatorPhone;
        this.originatorEmail = originatorEmail;
        this.originatorAddress = originatorAddress;
        this.techOrg = techOrg;
        this.techPoc = techPoc;
        this.techPosition = techPosition;
        this.techPhone = techPhone;
        this.techEmail = techEmail;
        this.techAddress = techAddress;
        this.previousMessageId = previousMessageId;
        this.nextMessageId = nextMessageId;
        this.admMsgLink = admMsgLink;
        this.cdmMsgLink = cdmMsgLink;
        this.prmMsgLink = prmMsgLink;
        this.rdmMsgLink = rdmMsgLink;
        this.tdmMsgLink = tdmMsgLink;
        this.operator = operator;
        this.owner = owner;
        this.country = country;
        this.constellation = constellation;
        this.objectType = objectType;
        this.timeSystem = timeSystem;
        this.epochTzero = epochTzero;
        this.opsStatus = opsStatus;
        this.orbitCategory = orbitCategory;
        this.ocmDataElements = ocmDataElements;
        this.sclkOffsetAtEpoch = sclkOffsetAtEpoch;
        this.sclkSecPerSiSec = sclkSecPerSiSec;
        this.previousMessageEpoch = previousMessageEpoch;
        this.nextMessageEpoch = nextMessageEpoch;
        this.startTime = startTime;
        this.stopTime = stopTime;
        this.timeSpan = timeSpan;
        this.taimutcAtTzero = taimutcAtTzero;
        this.nextLeapEpoch = nextLeapEpoch;
        this.nextLeapTaimutc = nextLeapTaimutc;
        this.ut1MutcAtTzero = ut1MutcAtTzero;
        this.eopSource = eopSource;
        this.interpMethodEop = interpMethodEop;
        this.celestialSource = celestialSource;
    }
    pack(builder) {
        const comment = Metadata.createCommentVector(builder, builder.createObjectOffsetList(this.comment));
        const objectName = (this.objectName !== null ? builder.createString(this.objectName) : 0);
        const internationalDesignator = (this.internationalDesignator !== null ? builder.createString(this.internationalDesignator) : 0);
        const catalogName = (this.catalogName !== null ? builder.createString(this.catalogName) : 0);
        const objectDesignator = (this.objectDesignator !== null ? builder.createString(this.objectDesignator) : 0);
        const alternateNames = Metadata.createAlternateNamesVector(builder, builder.createObjectOffsetList(this.alternateNames));
        const originatorPoc = (this.originatorPoc !== null ? builder.createString(this.originatorPoc) : 0);
        const originatorPosition = (this.originatorPosition !== null ? builder.createString(this.originatorPosition) : 0);
        const originatorPhone = (this.originatorPhone !== null ? builder.createString(this.originatorPhone) : 0);
        const originatorEmail = (this.originatorEmail !== null ? builder.createString(this.originatorEmail) : 0);
        const originatorAddress = (this.originatorAddress !== null ? builder.createString(this.originatorAddress) : 0);
        const techOrg = (this.techOrg !== null ? builder.createString(this.techOrg) : 0);
        const techPoc = (this.techPoc !== null ? builder.createString(this.techPoc) : 0);
        const techPosition = (this.techPosition !== null ? builder.createString(this.techPosition) : 0);
        const techPhone = (this.techPhone !== null ? builder.createString(this.techPhone) : 0);
        const techEmail = (this.techEmail !== null ? builder.createString(this.techEmail) : 0);
        const techAddress = (this.techAddress !== null ? builder.createString(this.techAddress) : 0);
        const previousMessageId = (this.previousMessageId !== null ? builder.createString(this.previousMessageId) : 0);
        const nextMessageId = (this.nextMessageId !== null ? builder.createString(this.nextMessageId) : 0);
        const admMsgLink = (this.admMsgLink !== null ? builder.createString(this.admMsgLink) : 0);
        const cdmMsgLink = (this.cdmMsgLink !== null ? builder.createString(this.cdmMsgLink) : 0);
        const prmMsgLink = (this.prmMsgLink !== null ? builder.createString(this.prmMsgLink) : 0);
        const rdmMsgLink = (this.rdmMsgLink !== null ? builder.createString(this.rdmMsgLink) : 0);
        const tdmMsgLink = Metadata.createTdmMsgLinkVector(builder, builder.createObjectOffsetList(this.tdmMsgLink));
        const operator = (this.operator !== null ? builder.createString(this.operator) : 0);
        const owner = (this.owner !== null ? builder.createString(this.owner) : 0);
        const country = (this.country !== null ? builder.createString(this.country) : 0);
        const constellation = (this.constellation !== null ? builder.createString(this.constellation) : 0);
        const objectType = (this.objectType !== null ? builder.createString(this.objectType) : 0);
        const timeSystem = (this.timeSystem !== null ? builder.createString(this.timeSystem) : 0);
        const epochTzero = (this.epochTzero !== null ? builder.createString(this.epochTzero) : 0);
        const opsStatus = (this.opsStatus !== null ? builder.createString(this.opsStatus) : 0);
        const orbitCategory = (this.orbitCategory !== null ? builder.createString(this.orbitCategory) : 0);
        const ocmDataElements = Metadata.createOcmDataElementsVector(builder, builder.createObjectOffsetList(this.ocmDataElements));
        const previousMessageEpoch = (this.previousMessageEpoch !== null ? builder.createString(this.previousMessageEpoch) : 0);
        const nextMessageEpoch = (this.nextMessageEpoch !== null ? builder.createString(this.nextMessageEpoch) : 0);
        const startTime = (this.startTime !== null ? builder.createString(this.startTime) : 0);
        const stopTime = (this.stopTime !== null ? builder.createString(this.stopTime) : 0);
        const nextLeapEpoch = (this.nextLeapEpoch !== null ? builder.createString(this.nextLeapEpoch) : 0);
        const eopSource = (this.eopSource !== null ? builder.createString(this.eopSource) : 0);
        const interpMethodEop = (this.interpMethodEop !== null ? builder.createString(this.interpMethodEop) : 0);
        const celestialSource = (this.celestialSource !== null ? builder.createString(this.celestialSource) : 0);
        return Metadata.createMetadata(builder, comment, objectName, internationalDesignator, catalogName, objectDesignator, alternateNames, originatorPoc, originatorPosition, originatorPhone, originatorEmail, originatorAddress, techOrg, techPoc, techPosition, techPhone, techEmail, techAddress, previousMessageId, nextMessageId, admMsgLink, cdmMsgLink, prmMsgLink, rdmMsgLink, tdmMsgLink, operator, owner, country, constellation, objectType, timeSystem, epochTzero, opsStatus, orbitCategory, ocmDataElements, this.sclkOffsetAtEpoch, this.sclkSecPerSiSec, previousMessageEpoch, nextMessageEpoch, startTime, stopTime, this.timeSpan, this.taimutcAtTzero, nextLeapEpoch, this.nextLeapTaimutc, this.ut1MutcAtTzero, eopSource, interpMethodEop, celestialSource);
    }
}
