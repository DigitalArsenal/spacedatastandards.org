// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class Maneuver {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsManeuver(bb, obj) {
        return (obj || new Maneuver()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsManeuver(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Maneuver()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    manId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    manBasis(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    manDeviceId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    manPrevId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    manPurpose(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    manRefFrame(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    manFrameEpoch(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    manType(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    manEpochStart(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Duration of the maneuver.
     */
    manDuration() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    manUnits(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    manUnitsLength() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    data(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    dataLength() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    manComment(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    manCommentLength() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startManeuver(builder) {
        builder.startObject(13);
    }
    static addManId(builder, manIdOffset) {
        builder.addFieldOffset(0, manIdOffset, 0);
    }
    static addManBasis(builder, manBasisOffset) {
        builder.addFieldOffset(1, manBasisOffset, 0);
    }
    static addManDeviceId(builder, manDeviceIdOffset) {
        builder.addFieldOffset(2, manDeviceIdOffset, 0);
    }
    static addManPrevId(builder, manPrevIdOffset) {
        builder.addFieldOffset(3, manPrevIdOffset, 0);
    }
    static addManPurpose(builder, manPurposeOffset) {
        builder.addFieldOffset(4, manPurposeOffset, 0);
    }
    static addManRefFrame(builder, manRefFrameOffset) {
        builder.addFieldOffset(5, manRefFrameOffset, 0);
    }
    static addManFrameEpoch(builder, manFrameEpochOffset) {
        builder.addFieldOffset(6, manFrameEpochOffset, 0);
    }
    static addManType(builder, manTypeOffset) {
        builder.addFieldOffset(7, manTypeOffset, 0);
    }
    static addManEpochStart(builder, manEpochStartOffset) {
        builder.addFieldOffset(8, manEpochStartOffset, 0);
    }
    static addManDuration(builder, manDuration) {
        builder.addFieldFloat64(9, manDuration, 0.0);
    }
    static addManUnits(builder, manUnitsOffset) {
        builder.addFieldOffset(10, manUnitsOffset, 0);
    }
    static createManUnitsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startManUnitsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addData(builder, dataOffset) {
        builder.addFieldOffset(11, dataOffset, 0);
    }
    static createDataVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startDataVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addManComment(builder, manCommentOffset) {
        builder.addFieldOffset(12, manCommentOffset, 0);
    }
    static createManCommentVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startManCommentVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endManeuver(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createManeuver(builder, manIdOffset, manBasisOffset, manDeviceIdOffset, manPrevIdOffset, manPurposeOffset, manRefFrameOffset, manFrameEpochOffset, manTypeOffset, manEpochStartOffset, manDuration, manUnitsOffset, dataOffset, manCommentOffset) {
        Maneuver.startManeuver(builder);
        Maneuver.addManId(builder, manIdOffset);
        Maneuver.addManBasis(builder, manBasisOffset);
        Maneuver.addManDeviceId(builder, manDeviceIdOffset);
        Maneuver.addManPrevId(builder, manPrevIdOffset);
        Maneuver.addManPurpose(builder, manPurposeOffset);
        Maneuver.addManRefFrame(builder, manRefFrameOffset);
        Maneuver.addManFrameEpoch(builder, manFrameEpochOffset);
        Maneuver.addManType(builder, manTypeOffset);
        Maneuver.addManEpochStart(builder, manEpochStartOffset);
        Maneuver.addManDuration(builder, manDuration);
        Maneuver.addManUnits(builder, manUnitsOffset);
        Maneuver.addData(builder, dataOffset);
        Maneuver.addManComment(builder, manCommentOffset);
        return Maneuver.endManeuver(builder);
    }
    unpack() {
        return new ManeuverT(this.manId(), this.manBasis(), this.manDeviceId(), this.manPrevId(), this.manPurpose(), this.manRefFrame(), this.manFrameEpoch(), this.manType(), this.manEpochStart(), this.manDuration(), this.bb.createScalarList(this.manUnits.bind(this), this.manUnitsLength()), this.bb.createScalarList(this.data.bind(this), this.dataLength()), this.bb.createScalarList(this.manComment.bind(this), this.manCommentLength()));
    }
    unpackTo(_o) {
        _o.manId = this.manId();
        _o.manBasis = this.manBasis();
        _o.manDeviceId = this.manDeviceId();
        _o.manPrevId = this.manPrevId();
        _o.manPurpose = this.manPurpose();
        _o.manRefFrame = this.manRefFrame();
        _o.manFrameEpoch = this.manFrameEpoch();
        _o.manType = this.manType();
        _o.manEpochStart = this.manEpochStart();
        _o.manDuration = this.manDuration();
        _o.manUnits = this.bb.createScalarList(this.manUnits.bind(this), this.manUnitsLength());
        _o.data = this.bb.createScalarList(this.data.bind(this), this.dataLength());
        _o.manComment = this.bb.createScalarList(this.manComment.bind(this), this.manCommentLength());
    }
}
export class ManeuverT {
    constructor(manId = null, manBasis = null, manDeviceId = null, manPrevId = null, manPurpose = null, manRefFrame = null, manFrameEpoch = null, manType = null, manEpochStart = null, manDuration = 0.0, manUnits = [], data = [], manComment = []) {
        this.manId = manId;
        this.manBasis = manBasis;
        this.manDeviceId = manDeviceId;
        this.manPrevId = manPrevId;
        this.manPurpose = manPurpose;
        this.manRefFrame = manRefFrame;
        this.manFrameEpoch = manFrameEpoch;
        this.manType = manType;
        this.manEpochStart = manEpochStart;
        this.manDuration = manDuration;
        this.manUnits = manUnits;
        this.data = data;
        this.manComment = manComment;
    }
    pack(builder) {
        const manId = (this.manId !== null ? builder.createString(this.manId) : 0);
        const manBasis = (this.manBasis !== null ? builder.createString(this.manBasis) : 0);
        const manDeviceId = (this.manDeviceId !== null ? builder.createString(this.manDeviceId) : 0);
        const manPrevId = (this.manPrevId !== null ? builder.createString(this.manPrevId) : 0);
        const manPurpose = (this.manPurpose !== null ? builder.createString(this.manPurpose) : 0);
        const manRefFrame = (this.manRefFrame !== null ? builder.createString(this.manRefFrame) : 0);
        const manFrameEpoch = (this.manFrameEpoch !== null ? builder.createString(this.manFrameEpoch) : 0);
        const manType = (this.manType !== null ? builder.createString(this.manType) : 0);
        const manEpochStart = (this.manEpochStart !== null ? builder.createString(this.manEpochStart) : 0);
        const manUnits = Maneuver.createManUnitsVector(builder, builder.createObjectOffsetList(this.manUnits));
        const data = Maneuver.createDataVector(builder, builder.createObjectOffsetList(this.data));
        const manComment = Maneuver.createManCommentVector(builder, builder.createObjectOffsetList(this.manComment));
        return Maneuver.createManeuver(builder, manId, manBasis, manDeviceId, manPrevId, manPurpose, manRefFrame, manFrameEpoch, manType, manEpochStart, this.manDuration, manUnits, data, manComment);
    }
}
