// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { meanElementTheory } from './mean-element-theory.js';
/**
 * Mean Element Theory
 */
export class MET {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMET(bb, obj) {
        return (obj || new MET()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMET(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MET()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$MET');
    }
    meanElementTheory() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : meanElementTheory.SGP4;
    }
    static startMET(builder) {
        builder.startObject(1);
    }
    static addMeanElementTheory(builder, meanElementTheory) {
        builder.addFieldInt8(0, meanElementTheory, meanElementTheory.SGP4);
    }
    static endMET(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishMETBuffer(builder, offset) {
        builder.finish(offset, '$MET');
    }
    static finishSizePrefixedMETBuffer(builder, offset) {
        builder.finish(offset, '$MET', true);
    }
    static createMET(builder, meanElementTheory) {
        MET.startMET(builder);
        MET.addMeanElementTheory(builder, meanElementTheory);
        return MET.endMET(builder);
    }
    unpack() {
        return new METT(this.meanElementTheory());
    }
    unpackTo(_o) {
        _o.meanElementTheory = this.meanElementTheory();
    }
}
export class METT {
    constructor(meanElementTheory = meanElementTheory.SGP4) {
        this.meanElementTheory = meanElementTheory;
    }
    pack(builder) {
        return MET.createMET(builder, this.meanElementTheory);
    }
}
