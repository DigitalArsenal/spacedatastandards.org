import * as flatbuffers from 'flatbuffers';
import { VCMAtmosphericModelData, VCMAtmosphericModelDataT } from './vcmatmospheric-model-data.js';
import { VCMCovarianceMatrixLine, VCMCovarianceMatrixLineT } from './vcmcovariance-matrix-line.js';
import { VCMStateVector, VCMStateVectorT } from './vcmstate-vector.js';
import { equinoctialElements, equinoctialElementsT } from './equinoctial-elements.js';
import { keplerianElements, keplerianElementsT } from './keplerian-elements.js';
import { perturbationStatus } from './perturbation-status.js';
import { propagatorConfig, propagatorConfigT } from './propagator-config.js';
import { uvwSigmas, uvwSigmasT } from './uvw-sigmas.js';
/**
 * Vector Covariance Message
 */
export declare class VCM implements flatbuffers.IUnpackableObject<VCMT> {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): VCM;
    static getRootAsVCM(bb: flatbuffers.ByteBuffer, obj?: VCM): VCM;
    static getSizePrefixedRootAsVCM(bb: flatbuffers.ByteBuffer, obj?: VCM): VCM;
    ccsdsOmmVers(): number;
    creationDate(): string | null;
    creationDate(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    originator(): string | null;
    originator(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    objectName(): string | null;
    objectName(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    objectId(): string | null;
    objectId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    centerName(): string | null;
    centerName(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    refFrame(): string | null;
    refFrame(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    timeSystem(): string | null;
    timeSystem(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    stateVector(obj?: VCMStateVector): VCMStateVector | null;
    keplerianElements(obj?: keplerianElements): keplerianElements | null;
    equinoctialElements(obj?: equinoctialElements): equinoctialElements | null;
    gm(): number;
    atmosphericModelData(obj?: VCMAtmosphericModelData): VCMAtmosphericModelData | null;
    propagatorSettings(obj?: propagatorConfig): propagatorConfig | null;
    covarianceMatrix(index: number, obj?: VCMCovarianceMatrixLine): VCMCovarianceMatrixLine | null;
    covarianceMatrixLength(): number;
    uvwSigmas(obj?: uvwSigmas): uvwSigmas | null;
    mass(): number;
    solarRadArea(): number;
    solarRadCoeff(): number;
    dragArea(): number;
    dragCoeff(): number;
    srp(): perturbationStatus;
    classificationType(): string | null;
    classificationType(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    noradCatId(): number;
    elementSetNo(): number;
    revAtEpoch(): number;
    bstar(): number;
    meanMotionDot(): number;
    meanMotionDdot(): number;
    covReferenceFrame(): string | null;
    covReferenceFrame(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    cxX(): number;
    cyX(): number;
    czX(): number;
    cxDotX(): number;
    userDefinedBip0044Type(): number;
    userDefinedObjectDesignator(): string | null;
    userDefinedObjectDesignator(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    userDefinedEarthModel(): string | null;
    userDefinedEarthModel(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    userDefinedEpochTimestamp(): number;
    userDefinedMicroseconds(): number;
    static startVCM(builder: flatbuffers.Builder): void;
    static addCcsdsOmmVers(builder: flatbuffers.Builder, ccsdsOmmVers: number): void;
    static addCreationDate(builder: flatbuffers.Builder, creationDateOffset: flatbuffers.Offset): void;
    static addOriginator(builder: flatbuffers.Builder, originatorOffset: flatbuffers.Offset): void;
    static addObjectName(builder: flatbuffers.Builder, objectNameOffset: flatbuffers.Offset): void;
    static addObjectId(builder: flatbuffers.Builder, objectIdOffset: flatbuffers.Offset): void;
    static addCenterName(builder: flatbuffers.Builder, centerNameOffset: flatbuffers.Offset): void;
    static addRefFrame(builder: flatbuffers.Builder, refFrameOffset: flatbuffers.Offset): void;
    static addTimeSystem(builder: flatbuffers.Builder, timeSystemOffset: flatbuffers.Offset): void;
    static addStateVector(builder: flatbuffers.Builder, stateVectorOffset: flatbuffers.Offset): void;
    static addKeplerianElements(builder: flatbuffers.Builder, keplerianElementsOffset: flatbuffers.Offset): void;
    static addEquinoctialElements(builder: flatbuffers.Builder, equinoctialElementsOffset: flatbuffers.Offset): void;
    static addGm(builder: flatbuffers.Builder, gm: number): void;
    static addAtmosphericModelData(builder: flatbuffers.Builder, atmosphericModelDataOffset: flatbuffers.Offset): void;
    static addPropagatorSettings(builder: flatbuffers.Builder, propagatorSettingsOffset: flatbuffers.Offset): void;
    static addCovarianceMatrix(builder: flatbuffers.Builder, covarianceMatrixOffset: flatbuffers.Offset): void;
    static createCovarianceMatrixVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startCovarianceMatrixVector(builder: flatbuffers.Builder, numElems: number): void;
    static addUvwSigmas(builder: flatbuffers.Builder, uvwSigmasOffset: flatbuffers.Offset): void;
    static addMass(builder: flatbuffers.Builder, mass: number): void;
    static addSolarRadArea(builder: flatbuffers.Builder, solarRadArea: number): void;
    static addSolarRadCoeff(builder: flatbuffers.Builder, solarRadCoeff: number): void;
    static addDragArea(builder: flatbuffers.Builder, dragArea: number): void;
    static addDragCoeff(builder: flatbuffers.Builder, dragCoeff: number): void;
    static addSrp(builder: flatbuffers.Builder, srp: perturbationStatus): void;
    static addClassificationType(builder: flatbuffers.Builder, classificationTypeOffset: flatbuffers.Offset): void;
    static addNoradCatId(builder: flatbuffers.Builder, noradCatId: number): void;
    static addElementSetNo(builder: flatbuffers.Builder, elementSetNo: number): void;
    static addRevAtEpoch(builder: flatbuffers.Builder, revAtEpoch: number): void;
    static addBstar(builder: flatbuffers.Builder, bstar: number): void;
    static addMeanMotionDot(builder: flatbuffers.Builder, meanMotionDot: number): void;
    static addMeanMotionDdot(builder: flatbuffers.Builder, meanMotionDdot: number): void;
    static addCovReferenceFrame(builder: flatbuffers.Builder, covReferenceFrameOffset: flatbuffers.Offset): void;
    static addCxX(builder: flatbuffers.Builder, cxX: number): void;
    static addCyX(builder: flatbuffers.Builder, cyX: number): void;
    static addCzX(builder: flatbuffers.Builder, czX: number): void;
    static addCxDotX(builder: flatbuffers.Builder, cxDotX: number): void;
    static addUserDefinedBip0044Type(builder: flatbuffers.Builder, userDefinedBip0044Type: number): void;
    static addUserDefinedObjectDesignator(builder: flatbuffers.Builder, userDefinedObjectDesignatorOffset: flatbuffers.Offset): void;
    static addUserDefinedEarthModel(builder: flatbuffers.Builder, userDefinedEarthModelOffset: flatbuffers.Offset): void;
    static addUserDefinedEpochTimestamp(builder: flatbuffers.Builder, userDefinedEpochTimestamp: number): void;
    static addUserDefinedMicroseconds(builder: flatbuffers.Builder, userDefinedMicroseconds: number): void;
    static endVCM(builder: flatbuffers.Builder): flatbuffers.Offset;
    static finishVCMBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset): void;
    static finishSizePrefixedVCMBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset): void;
    unpack(): VCMT;
    unpackTo(_o: VCMT): void;
}
export declare class VCMT implements flatbuffers.IGeneratedObject {
    ccsdsOmmVers: number;
    creationDate: string | Uint8Array | null;
    originator: string | Uint8Array | null;
    objectName: string | Uint8Array | null;
    objectId: string | Uint8Array | null;
    centerName: string | Uint8Array | null;
    refFrame: string | Uint8Array | null;
    timeSystem: string | Uint8Array | null;
    stateVector: VCMStateVectorT | null;
    keplerianElements: keplerianElementsT | null;
    equinoctialElements: equinoctialElementsT | null;
    gm: number;
    atmosphericModelData: VCMAtmosphericModelDataT | null;
    propagatorSettings: propagatorConfigT | null;
    covarianceMatrix: (VCMCovarianceMatrixLineT)[];
    uvwSigmas: uvwSigmasT | null;
    mass: number;
    solarRadArea: number;
    solarRadCoeff: number;
    dragArea: number;
    dragCoeff: number;
    srp: perturbationStatus;
    classificationType: string | Uint8Array | null;
    noradCatId: number;
    elementSetNo: number;
    revAtEpoch: number;
    bstar: number;
    meanMotionDot: number;
    meanMotionDdot: number;
    covReferenceFrame: string | Uint8Array | null;
    cxX: number;
    cyX: number;
    czX: number;
    cxDotX: number;
    userDefinedBip0044Type: number;
    userDefinedObjectDesignator: string | Uint8Array | null;
    userDefinedEarthModel: string | Uint8Array | null;
    userDefinedEpochTimestamp: number;
    userDefinedMicroseconds: number;
    constructor(ccsdsOmmVers?: number, creationDate?: string | Uint8Array | null, originator?: string | Uint8Array | null, objectName?: string | Uint8Array | null, objectId?: string | Uint8Array | null, centerName?: string | Uint8Array | null, refFrame?: string | Uint8Array | null, timeSystem?: string | Uint8Array | null, stateVector?: VCMStateVectorT | null, keplerianElements?: keplerianElementsT | null, equinoctialElements?: equinoctialElementsT | null, gm?: number, atmosphericModelData?: VCMAtmosphericModelDataT | null, propagatorSettings?: propagatorConfigT | null, covarianceMatrix?: (VCMCovarianceMatrixLineT)[], uvwSigmas?: uvwSigmasT | null, mass?: number, solarRadArea?: number, solarRadCoeff?: number, dragArea?: number, dragCoeff?: number, srp?: perturbationStatus, classificationType?: string | Uint8Array | null, noradCatId?: number, elementSetNo?: number, revAtEpoch?: number, bstar?: number, meanMotionDot?: number, meanMotionDdot?: number, covReferenceFrame?: string | Uint8Array | null, cxX?: number, cyX?: number, czX?: number, cxDotX?: number, userDefinedBip0044Type?: number, userDefinedObjectDesignator?: string | Uint8Array | null, userDefinedEarthModel?: string | Uint8Array | null, userDefinedEpochTimestamp?: number, userDefinedMicroseconds?: number);
    pack(builder: flatbuffers.Builder): flatbuffers.Offset;
}
//# sourceMappingURL=vcm.d.ts.map