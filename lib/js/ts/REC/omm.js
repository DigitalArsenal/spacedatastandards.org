// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { ephemerisType } from './ephemeris-type.js';
import { meanElementTheory } from './mean-element-theory.js';
import { refFrame } from './ref-frame.js';
import { timeSystem } from './time-system.js';
/**
 * Orbit Mean Elements Message
 */
export class OMM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsOMM(bb, obj) {
        return (obj || new OMM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsOMM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new OMM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$OMM');
    }
    /**
     * CCSDS OMM Version
     */
    ccsdsOmmVers() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    creationDate(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    originator(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    objectName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    objectId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    centerName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Reference Frame
     */
    referenceFrame() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : refFrame.TEME;
    }
    referenceFrameEpoch(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Time System [M, UTC]
     */
    timeSystem() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : timeSystem.UTC;
    }
    /**
     * Mean Element Theory
     */
    meanElementTheory() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : meanElementTheory.SGP4;
    }
    comment(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    epoch(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Semi-major axis in km or Mean Motion in rev/day
     */
    semiMajorAxis() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Mean motion in rev/day if MEAN_ELEMENT_THEORY=SGP/SGP4 else unused
     */
    meanMotion() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Eccentricity (unitless)
     */
    eccentricity() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Inclination in degrees
     */
    inclination() {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * RA_OF_ASC_NODE in degrees
     */
    raOfAscNode() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * ARG_OF_PERICENTER in degrees
     */
    argOfPericenter() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * MEAN_ANOMALY in degrees
     */
    meanAnomaly() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * GM in km**3/s**2
     */
    gm() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * MASS in kg
     */
    mass() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * SOLAR_RAD_AREA in m**2
     */
    solarRadArea() {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * SOLAR_RAD_COEFF (unitless)
     */
    solarRadCoeff() {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * DRAG_AREA in m**2
     */
    dragArea() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * DRAG_COEFF (unitless)
     */
    dragCoeff() {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * TLE Related Parameters (Only if MEAN_ELEMENT_THEORY=SGP/SGP4)
     * EPHEMERIS_TYPE Default=0
     */
    ephemerisType() {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ephemerisType.SGP4;
    }
    classificationType(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * NORAD_CAT_ID (integer) [O if SGP/SGP4]
     */
    noradCatId() {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    /**
     * ELEMENT_SET_NO [O if SGP/SGP4]
     */
    elementSetNo() {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    /**
     * REV_AT_EPOCH [O if SGP/SGP4]
     */
    revAtEpoch() {
        const offset = this.bb.__offset(this.bb_pos, 62);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * BSTAR in 1/Earth radii or BTERM in m²/kg depending on MEAN_ELEMENT_THEORY [C]
     */
    bstar() {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * MEAN_MOTION_DOT in rev/day² [C if SGP or PPT3]
     */
    meanMotionDot() {
        const offset = this.bb.__offset(this.bb_pos, 66);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * MEAN_MOTION_DDOT in rev/day³ if SGP/PPT3 or AGOM in m²/kg if SGP4-XP [C]
     */
    meanMotionDdot() {
        const offset = this.bb.__offset(this.bb_pos, 68);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Position/Velocity Covariance Matrix (6x6 Lower Triangular) [C if any covariance provided]
     * COV_REF_FRAME reference frame for covariance [C if covariance given]
     */
    covReferenceFrame() {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : refFrame.RSW;
    }
    /**
     * CX_X [km**2]
     */
    cxX() {
        const offset = this.bb.__offset(this.bb_pos, 72);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CY_X [km**2]
     */
    cyX() {
        const offset = this.bb.__offset(this.bb_pos, 74);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CY_Y [km**2]
     */
    cyY() {
        const offset = this.bb.__offset(this.bb_pos, 76);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CZ_X [km**2]
     */
    czX() {
        const offset = this.bb.__offset(this.bb_pos, 78);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CZ_Y [km**2]
     */
    czY() {
        const offset = this.bb.__offset(this.bb_pos, 80);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CZ_Z [km**2]
     */
    czZ() {
        const offset = this.bb.__offset(this.bb_pos, 82);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CX_DOT_X [km**2/s]
     */
    cxDotX() {
        const offset = this.bb.__offset(this.bb_pos, 84);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CX_DOT_Y [km**2/s]
     */
    cxDotY() {
        const offset = this.bb.__offset(this.bb_pos, 86);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CX_DOT_Z [km**2/s]
     */
    cxDotZ() {
        const offset = this.bb.__offset(this.bb_pos, 88);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CX_DOT_X_DOT [km**2/s**2]
     */
    cxDotXDot() {
        const offset = this.bb.__offset(this.bb_pos, 90);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CY_DOT_X [km**2/s]
     */
    cyDotX() {
        const offset = this.bb.__offset(this.bb_pos, 92);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CY_DOT_Y [km**2/s]
     */
    cyDotY() {
        const offset = this.bb.__offset(this.bb_pos, 94);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CY_DOT_Z [km**2/s]
     */
    cyDotZ() {
        const offset = this.bb.__offset(this.bb_pos, 96);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CY_DOT_X_DOT [km**2/s**2]
     */
    cyDotXDot() {
        const offset = this.bb.__offset(this.bb_pos, 98);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CY_DOT_Y_DOT [km**2/s**2]
     */
    cyDotYDot() {
        const offset = this.bb.__offset(this.bb_pos, 100);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CZ_DOT_X [km**2/s]
     */
    czDotX() {
        const offset = this.bb.__offset(this.bb_pos, 102);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CZ_DOT_Y [km**2/s]
     */
    czDotY() {
        const offset = this.bb.__offset(this.bb_pos, 104);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CZ_DOT_Z [km**2/s]
     */
    czDotZ() {
        const offset = this.bb.__offset(this.bb_pos, 106);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CZ_DOT_X_DOT [km**2/s**2]
     */
    czDotXDot() {
        const offset = this.bb.__offset(this.bb_pos, 108);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CZ_DOT_Y_DOT [km**2/s**2]
     */
    czDotYDot() {
        const offset = this.bb.__offset(this.bb_pos, 110);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * CZ_DOT_Z_DOT [km**2/s**2]
     */
    czDotZDot() {
        const offset = this.bb.__offset(this.bb_pos, 112);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * USER_DEFINED_BIP_0044_TYPE [O, units per ICD]
     */
    userDefinedBip0044Type() {
        const offset = this.bb.__offset(this.bb_pos, 114);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    userDefinedObjectDesignator(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 116);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    userDefinedEarthModel(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 118);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * USER_DEFINED_EPOCH_TIMESTAMP [O, units per ICD]
     */
    userDefinedEpochTimestamp() {
        const offset = this.bb.__offset(this.bb_pos, 120);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * USER_DEFINED_MICROSECONDS [O, units per ICD]
     */
    userDefinedMicroseconds() {
        const offset = this.bb.__offset(this.bb_pos, 122);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startOMM(builder) {
        builder.startObject(60);
    }
    static addCcsdsOmmVers(builder, ccsdsOmmVers) {
        builder.addFieldFloat64(0, ccsdsOmmVers, 0.0);
    }
    static addCreationDate(builder, creationDateOffset) {
        builder.addFieldOffset(1, creationDateOffset, 0);
    }
    static addOriginator(builder, originatorOffset) {
        builder.addFieldOffset(2, originatorOffset, 0);
    }
    static addObjectName(builder, objectNameOffset) {
        builder.addFieldOffset(3, objectNameOffset, 0);
    }
    static addObjectId(builder, objectIdOffset) {
        builder.addFieldOffset(4, objectIdOffset, 0);
    }
    static addCenterName(builder, centerNameOffset) {
        builder.addFieldOffset(5, centerNameOffset, 0);
    }
    static addReferenceFrame(builder, referenceFrame) {
        builder.addFieldInt8(6, referenceFrame, refFrame.TEME);
    }
    static addReferenceFrameEpoch(builder, referenceFrameEpochOffset) {
        builder.addFieldOffset(7, referenceFrameEpochOffset, 0);
    }
    static addTimeSystem(builder, timeSystem) {
        builder.addFieldInt8(8, timeSystem, timeSystem.UTC);
    }
    static addMeanElementTheory(builder, meanElementTheory) {
        builder.addFieldInt8(9, meanElementTheory, meanElementTheory.SGP4);
    }
    static addComment(builder, commentOffset) {
        builder.addFieldOffset(10, commentOffset, 0);
    }
    static addEpoch(builder, epochOffset) {
        builder.addFieldOffset(11, epochOffset, 0);
    }
    static addSemiMajorAxis(builder, semiMajorAxis) {
        builder.addFieldFloat64(12, semiMajorAxis, 0.0);
    }
    static addMeanMotion(builder, meanMotion) {
        builder.addFieldFloat64(13, meanMotion, 0.0);
    }
    static addEccentricity(builder, eccentricity) {
        builder.addFieldFloat64(14, eccentricity, 0.0);
    }
    static addInclination(builder, inclination) {
        builder.addFieldFloat64(15, inclination, 0.0);
    }
    static addRaOfAscNode(builder, raOfAscNode) {
        builder.addFieldFloat64(16, raOfAscNode, 0.0);
    }
    static addArgOfPericenter(builder, argOfPericenter) {
        builder.addFieldFloat64(17, argOfPericenter, 0.0);
    }
    static addMeanAnomaly(builder, meanAnomaly) {
        builder.addFieldFloat64(18, meanAnomaly, 0.0);
    }
    static addGm(builder, gm) {
        builder.addFieldFloat64(19, gm, 0.0);
    }
    static addMass(builder, mass) {
        builder.addFieldFloat64(20, mass, 0.0);
    }
    static addSolarRadArea(builder, solarRadArea) {
        builder.addFieldFloat64(21, solarRadArea, 0.0);
    }
    static addSolarRadCoeff(builder, solarRadCoeff) {
        builder.addFieldFloat64(22, solarRadCoeff, 0.0);
    }
    static addDragArea(builder, dragArea) {
        builder.addFieldFloat64(23, dragArea, 0.0);
    }
    static addDragCoeff(builder, dragCoeff) {
        builder.addFieldFloat64(24, dragCoeff, 0.0);
    }
    static addEphemerisType(builder, ephemerisType) {
        builder.addFieldInt8(25, ephemerisType, ephemerisType.SGP4);
    }
    static addClassificationType(builder, classificationTypeOffset) {
        builder.addFieldOffset(26, classificationTypeOffset, 0);
    }
    static addNoradCatId(builder, noradCatId) {
        builder.addFieldInt32(27, noradCatId, 0);
    }
    static addElementSetNo(builder, elementSetNo) {
        builder.addFieldInt32(28, elementSetNo, 0);
    }
    static addRevAtEpoch(builder, revAtEpoch) {
        builder.addFieldFloat64(29, revAtEpoch, 0.0);
    }
    static addBstar(builder, bstar) {
        builder.addFieldFloat64(30, bstar, 0.0);
    }
    static addMeanMotionDot(builder, meanMotionDot) {
        builder.addFieldFloat64(31, meanMotionDot, 0.0);
    }
    static addMeanMotionDdot(builder, meanMotionDdot) {
        builder.addFieldFloat64(32, meanMotionDdot, 0.0);
    }
    static addCovReferenceFrame(builder, covReferenceFrame) {
        builder.addFieldInt8(33, covReferenceFrame, refFrame.RSW);
    }
    static addCxX(builder, cxX) {
        builder.addFieldFloat64(34, cxX, 0.0);
    }
    static addCyX(builder, cyX) {
        builder.addFieldFloat64(35, cyX, 0.0);
    }
    static addCyY(builder, cyY) {
        builder.addFieldFloat64(36, cyY, 0.0);
    }
    static addCzX(builder, czX) {
        builder.addFieldFloat64(37, czX, 0.0);
    }
    static addCzY(builder, czY) {
        builder.addFieldFloat64(38, czY, 0.0);
    }
    static addCzZ(builder, czZ) {
        builder.addFieldFloat64(39, czZ, 0.0);
    }
    static addCxDotX(builder, cxDotX) {
        builder.addFieldFloat64(40, cxDotX, 0.0);
    }
    static addCxDotY(builder, cxDotY) {
        builder.addFieldFloat64(41, cxDotY, 0.0);
    }
    static addCxDotZ(builder, cxDotZ) {
        builder.addFieldFloat64(42, cxDotZ, 0.0);
    }
    static addCxDotXDot(builder, cxDotXDot) {
        builder.addFieldFloat64(43, cxDotXDot, 0.0);
    }
    static addCyDotX(builder, cyDotX) {
        builder.addFieldFloat64(44, cyDotX, 0.0);
    }
    static addCyDotY(builder, cyDotY) {
        builder.addFieldFloat64(45, cyDotY, 0.0);
    }
    static addCyDotZ(builder, cyDotZ) {
        builder.addFieldFloat64(46, cyDotZ, 0.0);
    }
    static addCyDotXDot(builder, cyDotXDot) {
        builder.addFieldFloat64(47, cyDotXDot, 0.0);
    }
    static addCyDotYDot(builder, cyDotYDot) {
        builder.addFieldFloat64(48, cyDotYDot, 0.0);
    }
    static addCzDotX(builder, czDotX) {
        builder.addFieldFloat64(49, czDotX, 0.0);
    }
    static addCzDotY(builder, czDotY) {
        builder.addFieldFloat64(50, czDotY, 0.0);
    }
    static addCzDotZ(builder, czDotZ) {
        builder.addFieldFloat64(51, czDotZ, 0.0);
    }
    static addCzDotXDot(builder, czDotXDot) {
        builder.addFieldFloat64(52, czDotXDot, 0.0);
    }
    static addCzDotYDot(builder, czDotYDot) {
        builder.addFieldFloat64(53, czDotYDot, 0.0);
    }
    static addCzDotZDot(builder, czDotZDot) {
        builder.addFieldFloat64(54, czDotZDot, 0.0);
    }
    static addUserDefinedBip0044Type(builder, userDefinedBip0044Type) {
        builder.addFieldInt32(55, userDefinedBip0044Type, 0);
    }
    static addUserDefinedObjectDesignator(builder, userDefinedObjectDesignatorOffset) {
        builder.addFieldOffset(56, userDefinedObjectDesignatorOffset, 0);
    }
    static addUserDefinedEarthModel(builder, userDefinedEarthModelOffset) {
        builder.addFieldOffset(57, userDefinedEarthModelOffset, 0);
    }
    static addUserDefinedEpochTimestamp(builder, userDefinedEpochTimestamp) {
        builder.addFieldFloat64(58, userDefinedEpochTimestamp, 0.0);
    }
    static addUserDefinedMicroseconds(builder, userDefinedMicroseconds) {
        builder.addFieldFloat64(59, userDefinedMicroseconds, 0.0);
    }
    static endOMM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishOMMBuffer(builder, offset) {
        builder.finish(offset, '$OMM');
    }
    static finishSizePrefixedOMMBuffer(builder, offset) {
        builder.finish(offset, '$OMM', true);
    }
    static createOMM(builder, ccsdsOmmVers, creationDateOffset, originatorOffset, objectNameOffset, objectIdOffset, centerNameOffset, referenceFrame, referenceFrameEpochOffset, timeSystem, meanElementTheory, commentOffset, epochOffset, semiMajorAxis, meanMotion, eccentricity, inclination, raOfAscNode, argOfPericenter, meanAnomaly, gm, mass, solarRadArea, solarRadCoeff, dragArea, dragCoeff, ephemerisType, classificationTypeOffset, noradCatId, elementSetNo, revAtEpoch, bstar, meanMotionDot, meanMotionDdot, covReferenceFrame, cxX, cyX, cyY, czX, czY, czZ, cxDotX, cxDotY, cxDotZ, cxDotXDot, cyDotX, cyDotY, cyDotZ, cyDotXDot, cyDotYDot, czDotX, czDotY, czDotZ, czDotXDot, czDotYDot, czDotZDot, userDefinedBip0044Type, userDefinedObjectDesignatorOffset, userDefinedEarthModelOffset, userDefinedEpochTimestamp, userDefinedMicroseconds) {
        OMM.startOMM(builder);
        OMM.addCcsdsOmmVers(builder, ccsdsOmmVers);
        OMM.addCreationDate(builder, creationDateOffset);
        OMM.addOriginator(builder, originatorOffset);
        OMM.addObjectName(builder, objectNameOffset);
        OMM.addObjectId(builder, objectIdOffset);
        OMM.addCenterName(builder, centerNameOffset);
        OMM.addReferenceFrame(builder, referenceFrame);
        OMM.addReferenceFrameEpoch(builder, referenceFrameEpochOffset);
        OMM.addTimeSystem(builder, timeSystem);
        OMM.addMeanElementTheory(builder, meanElementTheory);
        OMM.addComment(builder, commentOffset);
        OMM.addEpoch(builder, epochOffset);
        OMM.addSemiMajorAxis(builder, semiMajorAxis);
        OMM.addMeanMotion(builder, meanMotion);
        OMM.addEccentricity(builder, eccentricity);
        OMM.addInclination(builder, inclination);
        OMM.addRaOfAscNode(builder, raOfAscNode);
        OMM.addArgOfPericenter(builder, argOfPericenter);
        OMM.addMeanAnomaly(builder, meanAnomaly);
        OMM.addGm(builder, gm);
        OMM.addMass(builder, mass);
        OMM.addSolarRadArea(builder, solarRadArea);
        OMM.addSolarRadCoeff(builder, solarRadCoeff);
        OMM.addDragArea(builder, dragArea);
        OMM.addDragCoeff(builder, dragCoeff);
        OMM.addEphemerisType(builder, ephemerisType);
        OMM.addClassificationType(builder, classificationTypeOffset);
        OMM.addNoradCatId(builder, noradCatId);
        OMM.addElementSetNo(builder, elementSetNo);
        OMM.addRevAtEpoch(builder, revAtEpoch);
        OMM.addBstar(builder, bstar);
        OMM.addMeanMotionDot(builder, meanMotionDot);
        OMM.addMeanMotionDdot(builder, meanMotionDdot);
        OMM.addCovReferenceFrame(builder, covReferenceFrame);
        OMM.addCxX(builder, cxX);
        OMM.addCyX(builder, cyX);
        OMM.addCyY(builder, cyY);
        OMM.addCzX(builder, czX);
        OMM.addCzY(builder, czY);
        OMM.addCzZ(builder, czZ);
        OMM.addCxDotX(builder, cxDotX);
        OMM.addCxDotY(builder, cxDotY);
        OMM.addCxDotZ(builder, cxDotZ);
        OMM.addCxDotXDot(builder, cxDotXDot);
        OMM.addCyDotX(builder, cyDotX);
        OMM.addCyDotY(builder, cyDotY);
        OMM.addCyDotZ(builder, cyDotZ);
        OMM.addCyDotXDot(builder, cyDotXDot);
        OMM.addCyDotYDot(builder, cyDotYDot);
        OMM.addCzDotX(builder, czDotX);
        OMM.addCzDotY(builder, czDotY);
        OMM.addCzDotZ(builder, czDotZ);
        OMM.addCzDotXDot(builder, czDotXDot);
        OMM.addCzDotYDot(builder, czDotYDot);
        OMM.addCzDotZDot(builder, czDotZDot);
        OMM.addUserDefinedBip0044Type(builder, userDefinedBip0044Type);
        OMM.addUserDefinedObjectDesignator(builder, userDefinedObjectDesignatorOffset);
        OMM.addUserDefinedEarthModel(builder, userDefinedEarthModelOffset);
        OMM.addUserDefinedEpochTimestamp(builder, userDefinedEpochTimestamp);
        OMM.addUserDefinedMicroseconds(builder, userDefinedMicroseconds);
        return OMM.endOMM(builder);
    }
    unpack() {
        return new OMMT(this.ccsdsOmmVers(), this.creationDate(), this.originator(), this.objectName(), this.objectId(), this.centerName(), this.referenceFrame(), this.referenceFrameEpoch(), this.timeSystem(), this.meanElementTheory(), this.comment(), this.epoch(), this.semiMajorAxis(), this.meanMotion(), this.eccentricity(), this.inclination(), this.raOfAscNode(), this.argOfPericenter(), this.meanAnomaly(), this.gm(), this.mass(), this.solarRadArea(), this.solarRadCoeff(), this.dragArea(), this.dragCoeff(), this.ephemerisType(), this.classificationType(), this.noradCatId(), this.elementSetNo(), this.revAtEpoch(), this.bstar(), this.meanMotionDot(), this.meanMotionDdot(), this.covReferenceFrame(), this.cxX(), this.cyX(), this.cyY(), this.czX(), this.czY(), this.czZ(), this.cxDotX(), this.cxDotY(), this.cxDotZ(), this.cxDotXDot(), this.cyDotX(), this.cyDotY(), this.cyDotZ(), this.cyDotXDot(), this.cyDotYDot(), this.czDotX(), this.czDotY(), this.czDotZ(), this.czDotXDot(), this.czDotYDot(), this.czDotZDot(), this.userDefinedBip0044Type(), this.userDefinedObjectDesignator(), this.userDefinedEarthModel(), this.userDefinedEpochTimestamp(), this.userDefinedMicroseconds());
    }
    unpackTo(_o) {
        _o.ccsdsOmmVers = this.ccsdsOmmVers();
        _o.creationDate = this.creationDate();
        _o.originator = this.originator();
        _o.objectName = this.objectName();
        _o.objectId = this.objectId();
        _o.centerName = this.centerName();
        _o.referenceFrame = this.referenceFrame();
        _o.referenceFrameEpoch = this.referenceFrameEpoch();
        _o.timeSystem = this.timeSystem();
        _o.meanElementTheory = this.meanElementTheory();
        _o.comment = this.comment();
        _o.epoch = this.epoch();
        _o.semiMajorAxis = this.semiMajorAxis();
        _o.meanMotion = this.meanMotion();
        _o.eccentricity = this.eccentricity();
        _o.inclination = this.inclination();
        _o.raOfAscNode = this.raOfAscNode();
        _o.argOfPericenter = this.argOfPericenter();
        _o.meanAnomaly = this.meanAnomaly();
        _o.gm = this.gm();
        _o.mass = this.mass();
        _o.solarRadArea = this.solarRadArea();
        _o.solarRadCoeff = this.solarRadCoeff();
        _o.dragArea = this.dragArea();
        _o.dragCoeff = this.dragCoeff();
        _o.ephemerisType = this.ephemerisType();
        _o.classificationType = this.classificationType();
        _o.noradCatId = this.noradCatId();
        _o.elementSetNo = this.elementSetNo();
        _o.revAtEpoch = this.revAtEpoch();
        _o.bstar = this.bstar();
        _o.meanMotionDot = this.meanMotionDot();
        _o.meanMotionDdot = this.meanMotionDdot();
        _o.covReferenceFrame = this.covReferenceFrame();
        _o.cxX = this.cxX();
        _o.cyX = this.cyX();
        _o.cyY = this.cyY();
        _o.czX = this.czX();
        _o.czY = this.czY();
        _o.czZ = this.czZ();
        _o.cxDotX = this.cxDotX();
        _o.cxDotY = this.cxDotY();
        _o.cxDotZ = this.cxDotZ();
        _o.cxDotXDot = this.cxDotXDot();
        _o.cyDotX = this.cyDotX();
        _o.cyDotY = this.cyDotY();
        _o.cyDotZ = this.cyDotZ();
        _o.cyDotXDot = this.cyDotXDot();
        _o.cyDotYDot = this.cyDotYDot();
        _o.czDotX = this.czDotX();
        _o.czDotY = this.czDotY();
        _o.czDotZ = this.czDotZ();
        _o.czDotXDot = this.czDotXDot();
        _o.czDotYDot = this.czDotYDot();
        _o.czDotZDot = this.czDotZDot();
        _o.userDefinedBip0044Type = this.userDefinedBip0044Type();
        _o.userDefinedObjectDesignator = this.userDefinedObjectDesignator();
        _o.userDefinedEarthModel = this.userDefinedEarthModel();
        _o.userDefinedEpochTimestamp = this.userDefinedEpochTimestamp();
        _o.userDefinedMicroseconds = this.userDefinedMicroseconds();
    }
}
export class OMMT {
    constructor(ccsdsOmmVers = 0.0, creationDate = null, originator = null, objectName = null, objectId = null, centerName = null, referenceFrame = refFrame.TEME, referenceFrameEpoch = null, timeSystem = timeSystem.UTC, meanElementTheory = meanElementTheory.SGP4, comment = null, epoch = null, semiMajorAxis = 0.0, meanMotion = 0.0, eccentricity = 0.0, inclination = 0.0, raOfAscNode = 0.0, argOfPericenter = 0.0, meanAnomaly = 0.0, gm = 0.0, mass = 0.0, solarRadArea = 0.0, solarRadCoeff = 0.0, dragArea = 0.0, dragCoeff = 0.0, ephemerisType = ephemerisType.SGP4, classificationType = null, noradCatId = 0, elementSetNo = 0, revAtEpoch = 0.0, bstar = 0.0, meanMotionDot = 0.0, meanMotionDdot = 0.0, covReferenceFrame = refFrame.RSW, cxX = 0.0, cyX = 0.0, cyY = 0.0, czX = 0.0, czY = 0.0, czZ = 0.0, cxDotX = 0.0, cxDotY = 0.0, cxDotZ = 0.0, cxDotXDot = 0.0, cyDotX = 0.0, cyDotY = 0.0, cyDotZ = 0.0, cyDotXDot = 0.0, cyDotYDot = 0.0, czDotX = 0.0, czDotY = 0.0, czDotZ = 0.0, czDotXDot = 0.0, czDotYDot = 0.0, czDotZDot = 0.0, userDefinedBip0044Type = 0, userDefinedObjectDesignator = null, userDefinedEarthModel = null, userDefinedEpochTimestamp = 0.0, userDefinedMicroseconds = 0.0) {
        this.ccsdsOmmVers = ccsdsOmmVers;
        this.creationDate = creationDate;
        this.originator = originator;
        this.objectName = objectName;
        this.objectId = objectId;
        this.centerName = centerName;
        this.referenceFrame = referenceFrame;
        this.referenceFrameEpoch = referenceFrameEpoch;
        this.timeSystem = timeSystem;
        this.meanElementTheory = meanElementTheory;
        this.comment = comment;
        this.epoch = epoch;
        this.semiMajorAxis = semiMajorAxis;
        this.meanMotion = meanMotion;
        this.eccentricity = eccentricity;
        this.inclination = inclination;
        this.raOfAscNode = raOfAscNode;
        this.argOfPericenter = argOfPericenter;
        this.meanAnomaly = meanAnomaly;
        this.gm = gm;
        this.mass = mass;
        this.solarRadArea = solarRadArea;
        this.solarRadCoeff = solarRadCoeff;
        this.dragArea = dragArea;
        this.dragCoeff = dragCoeff;
        this.ephemerisType = ephemerisType;
        this.classificationType = classificationType;
        this.noradCatId = noradCatId;
        this.elementSetNo = elementSetNo;
        this.revAtEpoch = revAtEpoch;
        this.bstar = bstar;
        this.meanMotionDot = meanMotionDot;
        this.meanMotionDdot = meanMotionDdot;
        this.covReferenceFrame = covReferenceFrame;
        this.cxX = cxX;
        this.cyX = cyX;
        this.cyY = cyY;
        this.czX = czX;
        this.czY = czY;
        this.czZ = czZ;
        this.cxDotX = cxDotX;
        this.cxDotY = cxDotY;
        this.cxDotZ = cxDotZ;
        this.cxDotXDot = cxDotXDot;
        this.cyDotX = cyDotX;
        this.cyDotY = cyDotY;
        this.cyDotZ = cyDotZ;
        this.cyDotXDot = cyDotXDot;
        this.cyDotYDot = cyDotYDot;
        this.czDotX = czDotX;
        this.czDotY = czDotY;
        this.czDotZ = czDotZ;
        this.czDotXDot = czDotXDot;
        this.czDotYDot = czDotYDot;
        this.czDotZDot = czDotZDot;
        this.userDefinedBip0044Type = userDefinedBip0044Type;
        this.userDefinedObjectDesignator = userDefinedObjectDesignator;
        this.userDefinedEarthModel = userDefinedEarthModel;
        this.userDefinedEpochTimestamp = userDefinedEpochTimestamp;
        this.userDefinedMicroseconds = userDefinedMicroseconds;
    }
    pack(builder) {
        const creationDate = (this.creationDate !== null ? builder.createString(this.creationDate) : 0);
        const originator = (this.originator !== null ? builder.createString(this.originator) : 0);
        const objectName = (this.objectName !== null ? builder.createString(this.objectName) : 0);
        const objectId = (this.objectId !== null ? builder.createString(this.objectId) : 0);
        const centerName = (this.centerName !== null ? builder.createString(this.centerName) : 0);
        const referenceFrameEpoch = (this.referenceFrameEpoch !== null ? builder.createString(this.referenceFrameEpoch) : 0);
        const comment = (this.comment !== null ? builder.createString(this.comment) : 0);
        const epoch = (this.epoch !== null ? builder.createString(this.epoch) : 0);
        const classificationType = (this.classificationType !== null ? builder.createString(this.classificationType) : 0);
        const userDefinedObjectDesignator = (this.userDefinedObjectDesignator !== null ? builder.createString(this.userDefinedObjectDesignator) : 0);
        const userDefinedEarthModel = (this.userDefinedEarthModel !== null ? builder.createString(this.userDefinedEarthModel) : 0);
        return OMM.createOMM(builder, this.ccsdsOmmVers, creationDate, originator, objectName, objectId, centerName, this.referenceFrame, referenceFrameEpoch, this.timeSystem, this.meanElementTheory, comment, epoch, this.semiMajorAxis, this.meanMotion, this.eccentricity, this.inclination, this.raOfAscNode, this.argOfPericenter, this.meanAnomaly, this.gm, this.mass, this.solarRadArea, this.solarRadCoeff, this.dragArea, this.dragCoeff, this.ephemerisType, classificationType, this.noradCatId, this.elementSetNo, this.revAtEpoch, this.bstar, this.meanMotionDot, this.meanMotionDdot, this.covReferenceFrame, this.cxX, this.cyX, this.cyY, this.czX, this.czY, this.czZ, this.cxDotX, this.cxDotY, this.cxDotZ, this.cxDotXDot, this.cyDotX, this.cyDotY, this.cyDotZ, this.cyDotXDot, this.cyDotYDot, this.czDotX, this.czDotY, this.czDotZ, this.czDotXDot, this.czDotYDot, this.czDotZDot, this.userDefinedBip0044Type, userDefinedObjectDesignator, userDefinedEarthModel, this.userDefinedEpochTimestamp, this.userDefinedMicroseconds);
    }
}
