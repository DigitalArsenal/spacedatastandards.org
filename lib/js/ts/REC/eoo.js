// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { refFrame } from './ref-frame.js';
/**
 * Electro-Optical Observation
 */
export class EOO {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsEOO(bb, obj) {
        return (obj || new EOO()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsEOO(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new EOO()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$EOO');
    }
    eobservationId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    classification(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    obTime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Quality of the correlation
     */
    corrQuality() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    idOnOrbit(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    sensorId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    collectMethod(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * NORAD catalog identifier for the satellite
     */
    noradCatId() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    taskId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    transactionId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    trackId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    obPosition(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    origObjectId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    origSensorId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Universal Coordinated Time flag
     */
    uct() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    /**
     * Azimuth angle
     */
    azimuth() {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Uncertainty in azimuth angle
     */
    azimuthUnc() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Bias in azimuth angle
     */
    azimuthBias() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Rate of change in azimuth
     */
    azimuthRate() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Elevation angle
     */
    elevation() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Uncertainty in elevation angle
     */
    elevationUnc() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Bias in elevation angle
     */
    elevationBias() {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Rate of change in elevation
     */
    elevationRate() {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Range to the target
     */
    range() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Uncertainty in range
     */
    rangeUnc() {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Bias in range measurement
     */
    rangeBias() {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Rate of change in range
     */
    rangeRate() {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Uncertainty in range rate
     */
    rangeRateUnc() {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Right ascension
     */
    ra() {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Rate of change in right ascension
     */
    raRate() {
        const offset = this.bb.__offset(this.bb_pos, 62);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Uncertainty in right ascension
     */
    raUnc() {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Bias in right ascension
     */
    raBias() {
        const offset = this.bb.__offset(this.bb_pos, 66);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Declination angle
     */
    declination() {
        const offset = this.bb.__offset(this.bb_pos, 68);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Rate of change in declination
     */
    declinationRate() {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Uncertainty in declination
     */
    declinationUnc() {
        const offset = this.bb.__offset(this.bb_pos, 72);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Bias in declination
     */
    declinationBias() {
        const offset = this.bb.__offset(this.bb_pos, 74);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * X-component of line-of-sight vector
     */
    losx() {
        const offset = this.bb.__offset(this.bb_pos, 76);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Y-component of line-of-sight vector
     */
    losy() {
        const offset = this.bb.__offset(this.bb_pos, 78);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Z-component of line-of-sight vector
     */
    losz() {
        const offset = this.bb.__offset(this.bb_pos, 80);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Uncertainty in line-of-sight vector
     */
    losUnc() {
        const offset = this.bb.__offset(this.bb_pos, 82);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * X-component of line-of-sight velocity
     */
    losxvel() {
        const offset = this.bb.__offset(this.bb_pos, 84);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Y-component of line-of-sight velocity
     */
    losyvel() {
        const offset = this.bb.__offset(this.bb_pos, 86);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Z-component of line-of-sight velocity
     */
    loszvel() {
        const offset = this.bb.__offset(this.bb_pos, 88);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Latitude of sensor
     */
    senlat() {
        const offset = this.bb.__offset(this.bb_pos, 90);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Longitude of sensor
     */
    senlon() {
        const offset = this.bb.__offset(this.bb_pos, 92);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Altitude of sensor
     */
    senalt() {
        const offset = this.bb.__offset(this.bb_pos, 94);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * X-coordinate of sensor position
     */
    senx() {
        const offset = this.bb.__offset(this.bb_pos, 96);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Y-coordinate of sensor position
     */
    seny() {
        const offset = this.bb.__offset(this.bb_pos, 98);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Z-coordinate of sensor position
     */
    senz() {
        const offset = this.bb.__offset(this.bb_pos, 100);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Number of fields of view
     */
    fovCount() {
        const offset = this.bb.__offset(this.bb_pos, 102);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Duration of the exposure
     */
    expDuration() {
        const offset = this.bb.__offset(this.bb_pos, 104);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Zero-point displacement
     */
    zeroptd() {
        const offset = this.bb.__offset(this.bb_pos, 106);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Net object signal
     */
    netObjSig() {
        const offset = this.bb.__offset(this.bb_pos, 108);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Uncertainty in net object signal
     */
    netObjSigUnc() {
        const offset = this.bb.__offset(this.bb_pos, 110);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Magnitude of the observation
     */
    mag() {
        const offset = this.bb.__offset(this.bb_pos, 112);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Uncertainty in magnitude
     */
    magUnc() {
        const offset = this.bb.__offset(this.bb_pos, 114);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Normalized range for magnitude
     */
    magNormRange() {
        const offset = this.bb.__offset(this.bb_pos, 116);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Geocentric latitude
     */
    geolat() {
        const offset = this.bb.__offset(this.bb_pos, 118);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Geocentric longitude
     */
    geolon() {
        const offset = this.bb.__offset(this.bb_pos, 120);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Geocentric altitude
     */
    geoalt() {
        const offset = this.bb.__offset(this.bb_pos, 122);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Geocentric range
     */
    georange() {
        const offset = this.bb.__offset(this.bb_pos, 124);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Sky background level
     */
    skyBkgrnd() {
        const offset = this.bb.__offset(this.bb_pos, 126);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Primary extinction
     */
    primaryExtinction() {
        const offset = this.bb.__offset(this.bb_pos, 128);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Uncertainty in primary extinction
     */
    primaryExtinctionUnc() {
        const offset = this.bb.__offset(this.bb_pos, 130);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Solar phase angle
     */
    solarPhaseAngle() {
        const offset = this.bb.__offset(this.bb_pos, 132);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Solar equatorial phase angle
     */
    solarEqPhaseAngle() {
        const offset = this.bb.__offset(this.bb_pos, 134);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Solar declination angle
     */
    solarDecAngle() {
        const offset = this.bb.__offset(this.bb_pos, 136);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Shutter delay
     */
    shutterDelay() {
        const offset = this.bb.__offset(this.bb_pos, 138);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Timing bias
     */
    timingBias() {
        const offset = this.bb.__offset(this.bb_pos, 140);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    rawFileUri(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 142);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Intensity of the observation
     */
    intensity() {
        const offset = this.bb.__offset(this.bb_pos, 144);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Background intensity
     */
    bgIntensity() {
        const offset = this.bb.__offset(this.bb_pos, 146);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    descriptor(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 148);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    source(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 150);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    origin(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 152);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    dataMode(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 154);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    createdAt(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 156);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    createdBy(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 158);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Reference frame of the observation
     */
    referenceFrame() {
        const offset = this.bb.__offset(this.bb_pos, 160);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : refFrame.ECEF;
    }
    senReferenceFrame(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 162);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Flag for umbra (total eclipse)
     */
    umbra() {
        const offset = this.bb.__offset(this.bb_pos, 164);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    /**
     * Flag for penumbra (partial eclipse)
     */
    penumbra() {
        const offset = this.bb.__offset(this.bb_pos, 166);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    origNetwork(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 168);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    sourceDl(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 170);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    type(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 172);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startEOO(builder) {
        builder.startObject(85);
    }
    static addEobservationId(builder, eobservationIdOffset) {
        builder.addFieldOffset(0, eobservationIdOffset, 0);
    }
    static addClassification(builder, classificationOffset) {
        builder.addFieldOffset(1, classificationOffset, 0);
    }
    static addObTime(builder, obTimeOffset) {
        builder.addFieldOffset(2, obTimeOffset, 0);
    }
    static addCorrQuality(builder, corrQuality) {
        builder.addFieldFloat32(3, corrQuality, 0.0);
    }
    static addIdOnOrbit(builder, idOnOrbitOffset) {
        builder.addFieldOffset(4, idOnOrbitOffset, 0);
    }
    static addSensorId(builder, sensorIdOffset) {
        builder.addFieldOffset(5, sensorIdOffset, 0);
    }
    static addCollectMethod(builder, collectMethodOffset) {
        builder.addFieldOffset(6, collectMethodOffset, 0);
    }
    static addNoradCatId(builder, noradCatId) {
        builder.addFieldInt32(7, noradCatId, 0);
    }
    static addTaskId(builder, taskIdOffset) {
        builder.addFieldOffset(8, taskIdOffset, 0);
    }
    static addTransactionId(builder, transactionIdOffset) {
        builder.addFieldOffset(9, transactionIdOffset, 0);
    }
    static addTrackId(builder, trackIdOffset) {
        builder.addFieldOffset(10, trackIdOffset, 0);
    }
    static addObPosition(builder, obPositionOffset) {
        builder.addFieldOffset(11, obPositionOffset, 0);
    }
    static addOrigObjectId(builder, origObjectIdOffset) {
        builder.addFieldOffset(12, origObjectIdOffset, 0);
    }
    static addOrigSensorId(builder, origSensorIdOffset) {
        builder.addFieldOffset(13, origSensorIdOffset, 0);
    }
    static addUct(builder, uct) {
        builder.addFieldInt8(14, +uct, +false);
    }
    static addAzimuth(builder, azimuth) {
        builder.addFieldFloat32(15, azimuth, 0.0);
    }
    static addAzimuthUnc(builder, azimuthUnc) {
        builder.addFieldFloat32(16, azimuthUnc, 0.0);
    }
    static addAzimuthBias(builder, azimuthBias) {
        builder.addFieldFloat32(17, azimuthBias, 0.0);
    }
    static addAzimuthRate(builder, azimuthRate) {
        builder.addFieldFloat32(18, azimuthRate, 0.0);
    }
    static addElevation(builder, elevation) {
        builder.addFieldFloat32(19, elevation, 0.0);
    }
    static addElevationUnc(builder, elevationUnc) {
        builder.addFieldFloat32(20, elevationUnc, 0.0);
    }
    static addElevationBias(builder, elevationBias) {
        builder.addFieldFloat32(21, elevationBias, 0.0);
    }
    static addElevationRate(builder, elevationRate) {
        builder.addFieldFloat32(22, elevationRate, 0.0);
    }
    static addRange(builder, range) {
        builder.addFieldFloat32(23, range, 0.0);
    }
    static addRangeUnc(builder, rangeUnc) {
        builder.addFieldFloat32(24, rangeUnc, 0.0);
    }
    static addRangeBias(builder, rangeBias) {
        builder.addFieldFloat32(25, rangeBias, 0.0);
    }
    static addRangeRate(builder, rangeRate) {
        builder.addFieldFloat32(26, rangeRate, 0.0);
    }
    static addRangeRateUnc(builder, rangeRateUnc) {
        builder.addFieldFloat32(27, rangeRateUnc, 0.0);
    }
    static addRa(builder, ra) {
        builder.addFieldFloat32(28, ra, 0.0);
    }
    static addRaRate(builder, raRate) {
        builder.addFieldFloat32(29, raRate, 0.0);
    }
    static addRaUnc(builder, raUnc) {
        builder.addFieldFloat32(30, raUnc, 0.0);
    }
    static addRaBias(builder, raBias) {
        builder.addFieldFloat32(31, raBias, 0.0);
    }
    static addDeclination(builder, declination) {
        builder.addFieldFloat32(32, declination, 0.0);
    }
    static addDeclinationRate(builder, declinationRate) {
        builder.addFieldFloat32(33, declinationRate, 0.0);
    }
    static addDeclinationUnc(builder, declinationUnc) {
        builder.addFieldFloat32(34, declinationUnc, 0.0);
    }
    static addDeclinationBias(builder, declinationBias) {
        builder.addFieldFloat32(35, declinationBias, 0.0);
    }
    static addLosx(builder, losx) {
        builder.addFieldFloat32(36, losx, 0.0);
    }
    static addLosy(builder, losy) {
        builder.addFieldFloat32(37, losy, 0.0);
    }
    static addLosz(builder, losz) {
        builder.addFieldFloat32(38, losz, 0.0);
    }
    static addLosUnc(builder, losUnc) {
        builder.addFieldFloat32(39, losUnc, 0.0);
    }
    static addLosxvel(builder, losxvel) {
        builder.addFieldFloat32(40, losxvel, 0.0);
    }
    static addLosyvel(builder, losyvel) {
        builder.addFieldFloat32(41, losyvel, 0.0);
    }
    static addLoszvel(builder, loszvel) {
        builder.addFieldFloat32(42, loszvel, 0.0);
    }
    static addSenlat(builder, senlat) {
        builder.addFieldFloat32(43, senlat, 0.0);
    }
    static addSenlon(builder, senlon) {
        builder.addFieldFloat32(44, senlon, 0.0);
    }
    static addSenalt(builder, senalt) {
        builder.addFieldFloat32(45, senalt, 0.0);
    }
    static addSenx(builder, senx) {
        builder.addFieldFloat32(46, senx, 0.0);
    }
    static addSeny(builder, seny) {
        builder.addFieldFloat32(47, seny, 0.0);
    }
    static addSenz(builder, senz) {
        builder.addFieldFloat32(48, senz, 0.0);
    }
    static addFovCount(builder, fovCount) {
        builder.addFieldInt32(49, fovCount, 0);
    }
    static addExpDuration(builder, expDuration) {
        builder.addFieldFloat32(50, expDuration, 0.0);
    }
    static addZeroptd(builder, zeroptd) {
        builder.addFieldFloat32(51, zeroptd, 0.0);
    }
    static addNetObjSig(builder, netObjSig) {
        builder.addFieldFloat32(52, netObjSig, 0.0);
    }
    static addNetObjSigUnc(builder, netObjSigUnc) {
        builder.addFieldFloat32(53, netObjSigUnc, 0.0);
    }
    static addMag(builder, mag) {
        builder.addFieldFloat32(54, mag, 0.0);
    }
    static addMagUnc(builder, magUnc) {
        builder.addFieldFloat32(55, magUnc, 0.0);
    }
    static addMagNormRange(builder, magNormRange) {
        builder.addFieldFloat32(56, magNormRange, 0.0);
    }
    static addGeolat(builder, geolat) {
        builder.addFieldFloat32(57, geolat, 0.0);
    }
    static addGeolon(builder, geolon) {
        builder.addFieldFloat32(58, geolon, 0.0);
    }
    static addGeoalt(builder, geoalt) {
        builder.addFieldFloat32(59, geoalt, 0.0);
    }
    static addGeorange(builder, georange) {
        builder.addFieldFloat32(60, georange, 0.0);
    }
    static addSkyBkgrnd(builder, skyBkgrnd) {
        builder.addFieldFloat32(61, skyBkgrnd, 0.0);
    }
    static addPrimaryExtinction(builder, primaryExtinction) {
        builder.addFieldFloat32(62, primaryExtinction, 0.0);
    }
    static addPrimaryExtinctionUnc(builder, primaryExtinctionUnc) {
        builder.addFieldFloat32(63, primaryExtinctionUnc, 0.0);
    }
    static addSolarPhaseAngle(builder, solarPhaseAngle) {
        builder.addFieldFloat32(64, solarPhaseAngle, 0.0);
    }
    static addSolarEqPhaseAngle(builder, solarEqPhaseAngle) {
        builder.addFieldFloat32(65, solarEqPhaseAngle, 0.0);
    }
    static addSolarDecAngle(builder, solarDecAngle) {
        builder.addFieldFloat32(66, solarDecAngle, 0.0);
    }
    static addShutterDelay(builder, shutterDelay) {
        builder.addFieldFloat32(67, shutterDelay, 0.0);
    }
    static addTimingBias(builder, timingBias) {
        builder.addFieldFloat32(68, timingBias, 0.0);
    }
    static addRawFileUri(builder, rawFileUriOffset) {
        builder.addFieldOffset(69, rawFileUriOffset, 0);
    }
    static addIntensity(builder, intensity) {
        builder.addFieldFloat32(70, intensity, 0.0);
    }
    static addBgIntensity(builder, bgIntensity) {
        builder.addFieldFloat32(71, bgIntensity, 0.0);
    }
    static addDescriptor(builder, descriptorOffset) {
        builder.addFieldOffset(72, descriptorOffset, 0);
    }
    static addSource(builder, sourceOffset) {
        builder.addFieldOffset(73, sourceOffset, 0);
    }
    static addOrigin(builder, originOffset) {
        builder.addFieldOffset(74, originOffset, 0);
    }
    static addDataMode(builder, dataModeOffset) {
        builder.addFieldOffset(75, dataModeOffset, 0);
    }
    static addCreatedAt(builder, createdAtOffset) {
        builder.addFieldOffset(76, createdAtOffset, 0);
    }
    static addCreatedBy(builder, createdByOffset) {
        builder.addFieldOffset(77, createdByOffset, 0);
    }
    static addReferenceFrame(builder, referenceFrame) {
        builder.addFieldInt8(78, referenceFrame, refFrame.ECEF);
    }
    static addSenReferenceFrame(builder, senReferenceFrameOffset) {
        builder.addFieldOffset(79, senReferenceFrameOffset, 0);
    }
    static addUmbra(builder, umbra) {
        builder.addFieldInt8(80, +umbra, +false);
    }
    static addPenumbra(builder, penumbra) {
        builder.addFieldInt8(81, +penumbra, +false);
    }
    static addOrigNetwork(builder, origNetworkOffset) {
        builder.addFieldOffset(82, origNetworkOffset, 0);
    }
    static addSourceDl(builder, sourceDlOffset) {
        builder.addFieldOffset(83, sourceDlOffset, 0);
    }
    static addType(builder, typeOffset) {
        builder.addFieldOffset(84, typeOffset, 0);
    }
    static endEOO(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishEOOBuffer(builder, offset) {
        builder.finish(offset, '$EOO');
    }
    static finishSizePrefixedEOOBuffer(builder, offset) {
        builder.finish(offset, '$EOO', true);
    }
    static createEOO(builder, eobservationIdOffset, classificationOffset, obTimeOffset, corrQuality, idOnOrbitOffset, sensorIdOffset, collectMethodOffset, noradCatId, taskIdOffset, transactionIdOffset, trackIdOffset, obPositionOffset, origObjectIdOffset, origSensorIdOffset, uct, azimuth, azimuthUnc, azimuthBias, azimuthRate, elevation, elevationUnc, elevationBias, elevationRate, range, rangeUnc, rangeBias, rangeRate, rangeRateUnc, ra, raRate, raUnc, raBias, declination, declinationRate, declinationUnc, declinationBias, losx, losy, losz, losUnc, losxvel, losyvel, loszvel, senlat, senlon, senalt, senx, seny, senz, fovCount, expDuration, zeroptd, netObjSig, netObjSigUnc, mag, magUnc, magNormRange, geolat, geolon, geoalt, georange, skyBkgrnd, primaryExtinction, primaryExtinctionUnc, solarPhaseAngle, solarEqPhaseAngle, solarDecAngle, shutterDelay, timingBias, rawFileUriOffset, intensity, bgIntensity, descriptorOffset, sourceOffset, originOffset, dataModeOffset, createdAtOffset, createdByOffset, referenceFrame, senReferenceFrameOffset, umbra, penumbra, origNetworkOffset, sourceDlOffset, typeOffset) {
        EOO.startEOO(builder);
        EOO.addEobservationId(builder, eobservationIdOffset);
        EOO.addClassification(builder, classificationOffset);
        EOO.addObTime(builder, obTimeOffset);
        EOO.addCorrQuality(builder, corrQuality);
        EOO.addIdOnOrbit(builder, idOnOrbitOffset);
        EOO.addSensorId(builder, sensorIdOffset);
        EOO.addCollectMethod(builder, collectMethodOffset);
        EOO.addNoradCatId(builder, noradCatId);
        EOO.addTaskId(builder, taskIdOffset);
        EOO.addTransactionId(builder, transactionIdOffset);
        EOO.addTrackId(builder, trackIdOffset);
        EOO.addObPosition(builder, obPositionOffset);
        EOO.addOrigObjectId(builder, origObjectIdOffset);
        EOO.addOrigSensorId(builder, origSensorIdOffset);
        EOO.addUct(builder, uct);
        EOO.addAzimuth(builder, azimuth);
        EOO.addAzimuthUnc(builder, azimuthUnc);
        EOO.addAzimuthBias(builder, azimuthBias);
        EOO.addAzimuthRate(builder, azimuthRate);
        EOO.addElevation(builder, elevation);
        EOO.addElevationUnc(builder, elevationUnc);
        EOO.addElevationBias(builder, elevationBias);
        EOO.addElevationRate(builder, elevationRate);
        EOO.addRange(builder, range);
        EOO.addRangeUnc(builder, rangeUnc);
        EOO.addRangeBias(builder, rangeBias);
        EOO.addRangeRate(builder, rangeRate);
        EOO.addRangeRateUnc(builder, rangeRateUnc);
        EOO.addRa(builder, ra);
        EOO.addRaRate(builder, raRate);
        EOO.addRaUnc(builder, raUnc);
        EOO.addRaBias(builder, raBias);
        EOO.addDeclination(builder, declination);
        EOO.addDeclinationRate(builder, declinationRate);
        EOO.addDeclinationUnc(builder, declinationUnc);
        EOO.addDeclinationBias(builder, declinationBias);
        EOO.addLosx(builder, losx);
        EOO.addLosy(builder, losy);
        EOO.addLosz(builder, losz);
        EOO.addLosUnc(builder, losUnc);
        EOO.addLosxvel(builder, losxvel);
        EOO.addLosyvel(builder, losyvel);
        EOO.addLoszvel(builder, loszvel);
        EOO.addSenlat(builder, senlat);
        EOO.addSenlon(builder, senlon);
        EOO.addSenalt(builder, senalt);
        EOO.addSenx(builder, senx);
        EOO.addSeny(builder, seny);
        EOO.addSenz(builder, senz);
        EOO.addFovCount(builder, fovCount);
        EOO.addExpDuration(builder, expDuration);
        EOO.addZeroptd(builder, zeroptd);
        EOO.addNetObjSig(builder, netObjSig);
        EOO.addNetObjSigUnc(builder, netObjSigUnc);
        EOO.addMag(builder, mag);
        EOO.addMagUnc(builder, magUnc);
        EOO.addMagNormRange(builder, magNormRange);
        EOO.addGeolat(builder, geolat);
        EOO.addGeolon(builder, geolon);
        EOO.addGeoalt(builder, geoalt);
        EOO.addGeorange(builder, georange);
        EOO.addSkyBkgrnd(builder, skyBkgrnd);
        EOO.addPrimaryExtinction(builder, primaryExtinction);
        EOO.addPrimaryExtinctionUnc(builder, primaryExtinctionUnc);
        EOO.addSolarPhaseAngle(builder, solarPhaseAngle);
        EOO.addSolarEqPhaseAngle(builder, solarEqPhaseAngle);
        EOO.addSolarDecAngle(builder, solarDecAngle);
        EOO.addShutterDelay(builder, shutterDelay);
        EOO.addTimingBias(builder, timingBias);
        EOO.addRawFileUri(builder, rawFileUriOffset);
        EOO.addIntensity(builder, intensity);
        EOO.addBgIntensity(builder, bgIntensity);
        EOO.addDescriptor(builder, descriptorOffset);
        EOO.addSource(builder, sourceOffset);
        EOO.addOrigin(builder, originOffset);
        EOO.addDataMode(builder, dataModeOffset);
        EOO.addCreatedAt(builder, createdAtOffset);
        EOO.addCreatedBy(builder, createdByOffset);
        EOO.addReferenceFrame(builder, referenceFrame);
        EOO.addSenReferenceFrame(builder, senReferenceFrameOffset);
        EOO.addUmbra(builder, umbra);
        EOO.addPenumbra(builder, penumbra);
        EOO.addOrigNetwork(builder, origNetworkOffset);
        EOO.addSourceDl(builder, sourceDlOffset);
        EOO.addType(builder, typeOffset);
        return EOO.endEOO(builder);
    }
    unpack() {
        return new EOOT(this.eobservationId(), this.classification(), this.obTime(), this.corrQuality(), this.idOnOrbit(), this.sensorId(), this.collectMethod(), this.noradCatId(), this.taskId(), this.transactionId(), this.trackId(), this.obPosition(), this.origObjectId(), this.origSensorId(), this.uct(), this.azimuth(), this.azimuthUnc(), this.azimuthBias(), this.azimuthRate(), this.elevation(), this.elevationUnc(), this.elevationBias(), this.elevationRate(), this.range(), this.rangeUnc(), this.rangeBias(), this.rangeRate(), this.rangeRateUnc(), this.ra(), this.raRate(), this.raUnc(), this.raBias(), this.declination(), this.declinationRate(), this.declinationUnc(), this.declinationBias(), this.losx(), this.losy(), this.losz(), this.losUnc(), this.losxvel(), this.losyvel(), this.loszvel(), this.senlat(), this.senlon(), this.senalt(), this.senx(), this.seny(), this.senz(), this.fovCount(), this.expDuration(), this.zeroptd(), this.netObjSig(), this.netObjSigUnc(), this.mag(), this.magUnc(), this.magNormRange(), this.geolat(), this.geolon(), this.geoalt(), this.georange(), this.skyBkgrnd(), this.primaryExtinction(), this.primaryExtinctionUnc(), this.solarPhaseAngle(), this.solarEqPhaseAngle(), this.solarDecAngle(), this.shutterDelay(), this.timingBias(), this.rawFileUri(), this.intensity(), this.bgIntensity(), this.descriptor(), this.source(), this.origin(), this.dataMode(), this.createdAt(), this.createdBy(), this.referenceFrame(), this.senReferenceFrame(), this.umbra(), this.penumbra(), this.origNetwork(), this.sourceDl(), this.type());
    }
    unpackTo(_o) {
        _o.eobservationId = this.eobservationId();
        _o.classification = this.classification();
        _o.obTime = this.obTime();
        _o.corrQuality = this.corrQuality();
        _o.idOnOrbit = this.idOnOrbit();
        _o.sensorId = this.sensorId();
        _o.collectMethod = this.collectMethod();
        _o.noradCatId = this.noradCatId();
        _o.taskId = this.taskId();
        _o.transactionId = this.transactionId();
        _o.trackId = this.trackId();
        _o.obPosition = this.obPosition();
        _o.origObjectId = this.origObjectId();
        _o.origSensorId = this.origSensorId();
        _o.uct = this.uct();
        _o.azimuth = this.azimuth();
        _o.azimuthUnc = this.azimuthUnc();
        _o.azimuthBias = this.azimuthBias();
        _o.azimuthRate = this.azimuthRate();
        _o.elevation = this.elevation();
        _o.elevationUnc = this.elevationUnc();
        _o.elevationBias = this.elevationBias();
        _o.elevationRate = this.elevationRate();
        _o.range = this.range();
        _o.rangeUnc = this.rangeUnc();
        _o.rangeBias = this.rangeBias();
        _o.rangeRate = this.rangeRate();
        _o.rangeRateUnc = this.rangeRateUnc();
        _o.ra = this.ra();
        _o.raRate = this.raRate();
        _o.raUnc = this.raUnc();
        _o.raBias = this.raBias();
        _o.declination = this.declination();
        _o.declinationRate = this.declinationRate();
        _o.declinationUnc = this.declinationUnc();
        _o.declinationBias = this.declinationBias();
        _o.losx = this.losx();
        _o.losy = this.losy();
        _o.losz = this.losz();
        _o.losUnc = this.losUnc();
        _o.losxvel = this.losxvel();
        _o.losyvel = this.losyvel();
        _o.loszvel = this.loszvel();
        _o.senlat = this.senlat();
        _o.senlon = this.senlon();
        _o.senalt = this.senalt();
        _o.senx = this.senx();
        _o.seny = this.seny();
        _o.senz = this.senz();
        _o.fovCount = this.fovCount();
        _o.expDuration = this.expDuration();
        _o.zeroptd = this.zeroptd();
        _o.netObjSig = this.netObjSig();
        _o.netObjSigUnc = this.netObjSigUnc();
        _o.mag = this.mag();
        _o.magUnc = this.magUnc();
        _o.magNormRange = this.magNormRange();
        _o.geolat = this.geolat();
        _o.geolon = this.geolon();
        _o.geoalt = this.geoalt();
        _o.georange = this.georange();
        _o.skyBkgrnd = this.skyBkgrnd();
        _o.primaryExtinction = this.primaryExtinction();
        _o.primaryExtinctionUnc = this.primaryExtinctionUnc();
        _o.solarPhaseAngle = this.solarPhaseAngle();
        _o.solarEqPhaseAngle = this.solarEqPhaseAngle();
        _o.solarDecAngle = this.solarDecAngle();
        _o.shutterDelay = this.shutterDelay();
        _o.timingBias = this.timingBias();
        _o.rawFileUri = this.rawFileUri();
        _o.intensity = this.intensity();
        _o.bgIntensity = this.bgIntensity();
        _o.descriptor = this.descriptor();
        _o.source = this.source();
        _o.origin = this.origin();
        _o.dataMode = this.dataMode();
        _o.createdAt = this.createdAt();
        _o.createdBy = this.createdBy();
        _o.referenceFrame = this.referenceFrame();
        _o.senReferenceFrame = this.senReferenceFrame();
        _o.umbra = this.umbra();
        _o.penumbra = this.penumbra();
        _o.origNetwork = this.origNetwork();
        _o.sourceDl = this.sourceDl();
        _o.type = this.type();
    }
}
export class EOOT {
    constructor(eobservationId = null, classification = null, obTime = null, corrQuality = 0.0, idOnOrbit = null, sensorId = null, collectMethod = null, noradCatId = 0, taskId = null, transactionId = null, trackId = null, obPosition = null, origObjectId = null, origSensorId = null, uct = false, azimuth = 0.0, azimuthUnc = 0.0, azimuthBias = 0.0, azimuthRate = 0.0, elevation = 0.0, elevationUnc = 0.0, elevationBias = 0.0, elevationRate = 0.0, range = 0.0, rangeUnc = 0.0, rangeBias = 0.0, rangeRate = 0.0, rangeRateUnc = 0.0, ra = 0.0, raRate = 0.0, raUnc = 0.0, raBias = 0.0, declination = 0.0, declinationRate = 0.0, declinationUnc = 0.0, declinationBias = 0.0, losx = 0.0, losy = 0.0, losz = 0.0, losUnc = 0.0, losxvel = 0.0, losyvel = 0.0, loszvel = 0.0, senlat = 0.0, senlon = 0.0, senalt = 0.0, senx = 0.0, seny = 0.0, senz = 0.0, fovCount = 0, expDuration = 0.0, zeroptd = 0.0, netObjSig = 0.0, netObjSigUnc = 0.0, mag = 0.0, magUnc = 0.0, magNormRange = 0.0, geolat = 0.0, geolon = 0.0, geoalt = 0.0, georange = 0.0, skyBkgrnd = 0.0, primaryExtinction = 0.0, primaryExtinctionUnc = 0.0, solarPhaseAngle = 0.0, solarEqPhaseAngle = 0.0, solarDecAngle = 0.0, shutterDelay = 0.0, timingBias = 0.0, rawFileUri = null, intensity = 0.0, bgIntensity = 0.0, descriptor = null, source = null, origin = null, dataMode = null, createdAt = null, createdBy = null, referenceFrame = refFrame.ECEF, senReferenceFrame = null, umbra = false, penumbra = false, origNetwork = null, sourceDl = null, type = null) {
        this.eobservationId = eobservationId;
        this.classification = classification;
        this.obTime = obTime;
        this.corrQuality = corrQuality;
        this.idOnOrbit = idOnOrbit;
        this.sensorId = sensorId;
        this.collectMethod = collectMethod;
        this.noradCatId = noradCatId;
        this.taskId = taskId;
        this.transactionId = transactionId;
        this.trackId = trackId;
        this.obPosition = obPosition;
        this.origObjectId = origObjectId;
        this.origSensorId = origSensorId;
        this.uct = uct;
        this.azimuth = azimuth;
        this.azimuthUnc = azimuthUnc;
        this.azimuthBias = azimuthBias;
        this.azimuthRate = azimuthRate;
        this.elevation = elevation;
        this.elevationUnc = elevationUnc;
        this.elevationBias = elevationBias;
        this.elevationRate = elevationRate;
        this.range = range;
        this.rangeUnc = rangeUnc;
        this.rangeBias = rangeBias;
        this.rangeRate = rangeRate;
        this.rangeRateUnc = rangeRateUnc;
        this.ra = ra;
        this.raRate = raRate;
        this.raUnc = raUnc;
        this.raBias = raBias;
        this.declination = declination;
        this.declinationRate = declinationRate;
        this.declinationUnc = declinationUnc;
        this.declinationBias = declinationBias;
        this.losx = losx;
        this.losy = losy;
        this.losz = losz;
        this.losUnc = losUnc;
        this.losxvel = losxvel;
        this.losyvel = losyvel;
        this.loszvel = loszvel;
        this.senlat = senlat;
        this.senlon = senlon;
        this.senalt = senalt;
        this.senx = senx;
        this.seny = seny;
        this.senz = senz;
        this.fovCount = fovCount;
        this.expDuration = expDuration;
        this.zeroptd = zeroptd;
        this.netObjSig = netObjSig;
        this.netObjSigUnc = netObjSigUnc;
        this.mag = mag;
        this.magUnc = magUnc;
        this.magNormRange = magNormRange;
        this.geolat = geolat;
        this.geolon = geolon;
        this.geoalt = geoalt;
        this.georange = georange;
        this.skyBkgrnd = skyBkgrnd;
        this.primaryExtinction = primaryExtinction;
        this.primaryExtinctionUnc = primaryExtinctionUnc;
        this.solarPhaseAngle = solarPhaseAngle;
        this.solarEqPhaseAngle = solarEqPhaseAngle;
        this.solarDecAngle = solarDecAngle;
        this.shutterDelay = shutterDelay;
        this.timingBias = timingBias;
        this.rawFileUri = rawFileUri;
        this.intensity = intensity;
        this.bgIntensity = bgIntensity;
        this.descriptor = descriptor;
        this.source = source;
        this.origin = origin;
        this.dataMode = dataMode;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.referenceFrame = referenceFrame;
        this.senReferenceFrame = senReferenceFrame;
        this.umbra = umbra;
        this.penumbra = penumbra;
        this.origNetwork = origNetwork;
        this.sourceDl = sourceDl;
        this.type = type;
    }
    pack(builder) {
        const eobservationId = (this.eobservationId !== null ? builder.createString(this.eobservationId) : 0);
        const classification = (this.classification !== null ? builder.createString(this.classification) : 0);
        const obTime = (this.obTime !== null ? builder.createString(this.obTime) : 0);
        const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit) : 0);
        const sensorId = (this.sensorId !== null ? builder.createString(this.sensorId) : 0);
        const collectMethod = (this.collectMethod !== null ? builder.createString(this.collectMethod) : 0);
        const taskId = (this.taskId !== null ? builder.createString(this.taskId) : 0);
        const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId) : 0);
        const trackId = (this.trackId !== null ? builder.createString(this.trackId) : 0);
        const obPosition = (this.obPosition !== null ? builder.createString(this.obPosition) : 0);
        const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId) : 0);
        const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId) : 0);
        const rawFileUri = (this.rawFileUri !== null ? builder.createString(this.rawFileUri) : 0);
        const descriptor = (this.descriptor !== null ? builder.createString(this.descriptor) : 0);
        const source = (this.source !== null ? builder.createString(this.source) : 0);
        const origin = (this.origin !== null ? builder.createString(this.origin) : 0);
        const dataMode = (this.dataMode !== null ? builder.createString(this.dataMode) : 0);
        const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt) : 0);
        const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy) : 0);
        const senReferenceFrame = (this.senReferenceFrame !== null ? builder.createString(this.senReferenceFrame) : 0);
        const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork) : 0);
        const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl) : 0);
        const type = (this.type !== null ? builder.createString(this.type) : 0);
        return EOO.createEOO(builder, eobservationId, classification, obTime, this.corrQuality, idOnOrbit, sensorId, collectMethod, this.noradCatId, taskId, transactionId, trackId, obPosition, origObjectId, origSensorId, this.uct, this.azimuth, this.azimuthUnc, this.azimuthBias, this.azimuthRate, this.elevation, this.elevationUnc, this.elevationBias, this.elevationRate, this.range, this.rangeUnc, this.rangeBias, this.rangeRate, this.rangeRateUnc, this.ra, this.raRate, this.raUnc, this.raBias, this.declination, this.declinationRate, this.declinationUnc, this.declinationBias, this.losx, this.losy, this.losz, this.losUnc, this.losxvel, this.losyvel, this.loszvel, this.senlat, this.senlon, this.senalt, this.senx, this.seny, this.senz, this.fovCount, this.expDuration, this.zeroptd, this.netObjSig, this.netObjSigUnc, this.mag, this.magUnc, this.magNormRange, this.geolat, this.geolon, this.geoalt, this.georange, this.skyBkgrnd, this.primaryExtinction, this.primaryExtinctionUnc, this.solarPhaseAngle, this.solarEqPhaseAngle, this.solarDecAngle, this.shutterDelay, this.timingBias, rawFileUri, this.intensity, this.bgIntensity, descriptor, source, origin, dataMode, createdAt, createdBy, this.referenceFrame, senReferenceFrame, this.umbra, this.penumbra, origNetwork, sourceDl, type);
    }
}
