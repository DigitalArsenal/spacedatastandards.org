// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * UVW Sigmas (Covariance matrix in UVW frame)
 */
export class uvwSigmas {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsuvwSigmas(bb, obj) {
        return (obj || new uvwSigmas()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsuvwSigmas(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new uvwSigmas()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    uSigma() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    vSigma() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    wSigma() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    udSigma() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    vdSigma() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    wdSigma() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startuvwSigmas(builder) {
        builder.startObject(6);
    }
    static addUSigma(builder, uSigma) {
        builder.addFieldFloat64(0, uSigma, 0.0);
    }
    static addVSigma(builder, vSigma) {
        builder.addFieldFloat64(1, vSigma, 0.0);
    }
    static addWSigma(builder, wSigma) {
        builder.addFieldFloat64(2, wSigma, 0.0);
    }
    static addUdSigma(builder, udSigma) {
        builder.addFieldFloat64(3, udSigma, 0.0);
    }
    static addVdSigma(builder, vdSigma) {
        builder.addFieldFloat64(4, vdSigma, 0.0);
    }
    static addWdSigma(builder, wdSigma) {
        builder.addFieldFloat64(5, wdSigma, 0.0);
    }
    static enduvwSigmas(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createuvwSigmas(builder, uSigma, vSigma, wSigma, udSigma, vdSigma, wdSigma) {
        uvwSigmas.startuvwSigmas(builder);
        uvwSigmas.addUSigma(builder, uSigma);
        uvwSigmas.addVSigma(builder, vSigma);
        uvwSigmas.addWSigma(builder, wSigma);
        uvwSigmas.addUdSigma(builder, udSigma);
        uvwSigmas.addVdSigma(builder, vdSigma);
        uvwSigmas.addWdSigma(builder, wdSigma);
        return uvwSigmas.enduvwSigmas(builder);
    }
    unpack() {
        return new uvwSigmasT(this.uSigma(), this.vSigma(), this.wSigma(), this.udSigma(), this.vdSigma(), this.wdSigma());
    }
    unpackTo(_o) {
        _o.uSigma = this.uSigma();
        _o.vSigma = this.vSigma();
        _o.wSigma = this.wSigma();
        _o.udSigma = this.udSigma();
        _o.vdSigma = this.vdSigma();
        _o.wdSigma = this.wdSigma();
    }
}
export class uvwSigmasT {
    constructor(uSigma = 0.0, vSigma = 0.0, wSigma = 0.0, udSigma = 0.0, vdSigma = 0.0, wdSigma = 0.0) {
        this.uSigma = uSigma;
        this.vSigma = vSigma;
        this.wSigma = wSigma;
        this.udSigma = udSigma;
        this.vdSigma = vdSigma;
        this.wdSigma = wdSigma;
    }
    pack(builder) {
        return uvwSigmas.createuvwSigmas(builder, this.uSigma, this.vSigma, this.wSigma, this.udSigma, this.vdSigma, this.wdSigma);
    }
}
