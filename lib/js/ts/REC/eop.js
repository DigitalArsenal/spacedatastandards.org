// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { DataType } from './data-type.js';
/**
 * Earth Orientation Parameters
 */
export class EOP {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsEOP(bb, obj) {
        return (obj || new EOP()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsEOP(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new EOP()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$EOP');
    }
    date(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Modified Julian Date
     */
    mjd() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    /**
     * x pole coordinate in arcseconds
     */
    x() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * y pole coordinate in arcseconds
     */
    y() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * UT1-UTC in seconds
     */
    ut1MinusUtc() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Length of Day correction in seconds
     */
    lod() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Nutation correction in longitude (δΔψ) in arcseconds
     */
    dpsi() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Nutation correction in obliquity (δΔε) in arcseconds
     */
    deps() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Celestial pole offset in x (δX) in arcseconds
     */
    dx() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Celestial pole offset in y (δY) in arcseconds
     */
    dy() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Delta Atomic Time (TAI-UTC) in seconds
     */
    dat() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    }
    /**
     * Data type (O = Observed, P = Predicted)
     */
    dataType() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : DataType.OBSERVED;
    }
    static startEOP(builder) {
        builder.startObject(12);
    }
    static addDate(builder, dateOffset) {
        builder.addFieldOffset(0, dateOffset, 0);
    }
    static addMjd(builder, mjd) {
        builder.addFieldInt32(1, mjd, 0);
    }
    static addX(builder, x) {
        builder.addFieldFloat32(2, x, 0.0);
    }
    static addY(builder, y) {
        builder.addFieldFloat32(3, y, 0.0);
    }
    static addUt1MinusUtc(builder, ut1MinusUtc) {
        builder.addFieldFloat32(4, ut1MinusUtc, 0.0);
    }
    static addLod(builder, lod) {
        builder.addFieldFloat32(5, lod, 0.0);
    }
    static addDpsi(builder, dpsi) {
        builder.addFieldFloat32(6, dpsi, 0.0);
    }
    static addDeps(builder, deps) {
        builder.addFieldFloat32(7, deps, 0.0);
    }
    static addDx(builder, dx) {
        builder.addFieldFloat32(8, dx, 0.0);
    }
    static addDy(builder, dy) {
        builder.addFieldFloat32(9, dy, 0.0);
    }
    static addDat(builder, dat) {
        builder.addFieldInt16(10, dat, 0);
    }
    static addDataType(builder, dataType) {
        builder.addFieldInt8(11, dataType, DataType.OBSERVED);
    }
    static endEOP(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishEOPBuffer(builder, offset) {
        builder.finish(offset, '$EOP');
    }
    static finishSizePrefixedEOPBuffer(builder, offset) {
        builder.finish(offset, '$EOP', true);
    }
    static createEOP(builder, dateOffset, mjd, x, y, ut1MinusUtc, lod, dpsi, deps, dx, dy, dat, dataType) {
        EOP.startEOP(builder);
        EOP.addDate(builder, dateOffset);
        EOP.addMjd(builder, mjd);
        EOP.addX(builder, x);
        EOP.addY(builder, y);
        EOP.addUt1MinusUtc(builder, ut1MinusUtc);
        EOP.addLod(builder, lod);
        EOP.addDpsi(builder, dpsi);
        EOP.addDeps(builder, deps);
        EOP.addDx(builder, dx);
        EOP.addDy(builder, dy);
        EOP.addDat(builder, dat);
        EOP.addDataType(builder, dataType);
        return EOP.endEOP(builder);
    }
    unpack() {
        return new EOPT(this.date(), this.mjd(), this.x(), this.y(), this.ut1MinusUtc(), this.lod(), this.dpsi(), this.deps(), this.dx(), this.dy(), this.dat(), this.dataType());
    }
    unpackTo(_o) {
        _o.date = this.date();
        _o.mjd = this.mjd();
        _o.x = this.x();
        _o.y = this.y();
        _o.ut1MinusUtc = this.ut1MinusUtc();
        _o.lod = this.lod();
        _o.dpsi = this.dpsi();
        _o.deps = this.deps();
        _o.dx = this.dx();
        _o.dy = this.dy();
        _o.dat = this.dat();
        _o.dataType = this.dataType();
    }
}
export class EOPT {
    constructor(date = null, mjd = 0, x = 0.0, y = 0.0, ut1MinusUtc = 0.0, lod = 0.0, dpsi = 0.0, deps = 0.0, dx = 0.0, dy = 0.0, dat = 0, dataType = DataType.OBSERVED) {
        this.date = date;
        this.mjd = mjd;
        this.x = x;
        this.y = y;
        this.ut1MinusUtc = ut1MinusUtc;
        this.lod = lod;
        this.dpsi = dpsi;
        this.deps = deps;
        this.dx = dx;
        this.dy = dy;
        this.dat = dat;
        this.dataType = dataType;
    }
    pack(builder) {
        const date = (this.date !== null ? builder.createString(this.date) : 0);
        return EOP.createEOP(builder, date, this.mjd, this.x, this.y, this.ut1MinusUtc, this.lod, this.dpsi, this.deps, this.dx, this.dy, this.dat, this.dataType);
    }
}
