// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { Address } from './address.js';
import { CryptoKey } from './crypto-key.js';
/**
 * Entity Profile Message
 */
export class EPM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsEPM(bb, obj) {
        return (obj || new EPM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsEPM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new EPM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$EPM');
    }
    dn(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    legalName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    familyName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    givenName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    additionalName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    honorificPrefix(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    honorificSuffix(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    jobTitle(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    occupation(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Physical Address
     */
    address(obj) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? (obj || new Address()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    alternateNames(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    alternateNamesLength() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    email(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    telephone(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Cryptographic keys associated with the entity
     */
    keys(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? (obj || new CryptoKey()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    keysLength() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    multiformatAddress(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    multiformatAddressLength() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startEPM(builder) {
        builder.startObject(15);
    }
    static addDn(builder, dnOffset) {
        builder.addFieldOffset(0, dnOffset, 0);
    }
    static addLegalName(builder, legalNameOffset) {
        builder.addFieldOffset(1, legalNameOffset, 0);
    }
    static addFamilyName(builder, familyNameOffset) {
        builder.addFieldOffset(2, familyNameOffset, 0);
    }
    static addGivenName(builder, givenNameOffset) {
        builder.addFieldOffset(3, givenNameOffset, 0);
    }
    static addAdditionalName(builder, additionalNameOffset) {
        builder.addFieldOffset(4, additionalNameOffset, 0);
    }
    static addHonorificPrefix(builder, honorificPrefixOffset) {
        builder.addFieldOffset(5, honorificPrefixOffset, 0);
    }
    static addHonorificSuffix(builder, honorificSuffixOffset) {
        builder.addFieldOffset(6, honorificSuffixOffset, 0);
    }
    static addJobTitle(builder, jobTitleOffset) {
        builder.addFieldOffset(7, jobTitleOffset, 0);
    }
    static addOccupation(builder, occupationOffset) {
        builder.addFieldOffset(8, occupationOffset, 0);
    }
    static addAddress(builder, addressOffset) {
        builder.addFieldOffset(9, addressOffset, 0);
    }
    static addAlternateNames(builder, alternateNamesOffset) {
        builder.addFieldOffset(10, alternateNamesOffset, 0);
    }
    static createAlternateNamesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startAlternateNamesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addEmail(builder, emailOffset) {
        builder.addFieldOffset(11, emailOffset, 0);
    }
    static addTelephone(builder, telephoneOffset) {
        builder.addFieldOffset(12, telephoneOffset, 0);
    }
    static addKeys(builder, keysOffset) {
        builder.addFieldOffset(13, keysOffset, 0);
    }
    static createKeysVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startKeysVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addMultiformatAddress(builder, multiformatAddressOffset) {
        builder.addFieldOffset(14, multiformatAddressOffset, 0);
    }
    static createMultiformatAddressVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startMultiformatAddressVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endEPM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishEPMBuffer(builder, offset) {
        builder.finish(offset, '$EPM');
    }
    static finishSizePrefixedEPMBuffer(builder, offset) {
        builder.finish(offset, '$EPM', true);
    }
    unpack() {
        return new EPMT(this.dn(), this.legalName(), this.familyName(), this.givenName(), this.additionalName(), this.honorificPrefix(), this.honorificSuffix(), this.jobTitle(), this.occupation(), (this.address() !== null ? this.address().unpack() : null), this.bb.createScalarList(this.alternateNames.bind(this), this.alternateNamesLength()), this.email(), this.telephone(), this.bb.createObjList(this.keys.bind(this), this.keysLength()), this.bb.createScalarList(this.multiformatAddress.bind(this), this.multiformatAddressLength()));
    }
    unpackTo(_o) {
        _o.dn = this.dn();
        _o.legalName = this.legalName();
        _o.familyName = this.familyName();
        _o.givenName = this.givenName();
        _o.additionalName = this.additionalName();
        _o.honorificPrefix = this.honorificPrefix();
        _o.honorificSuffix = this.honorificSuffix();
        _o.jobTitle = this.jobTitle();
        _o.occupation = this.occupation();
        _o.address = (this.address() !== null ? this.address().unpack() : null);
        _o.alternateNames = this.bb.createScalarList(this.alternateNames.bind(this), this.alternateNamesLength());
        _o.email = this.email();
        _o.telephone = this.telephone();
        _o.keys = this.bb.createObjList(this.keys.bind(this), this.keysLength());
        _o.multiformatAddress = this.bb.createScalarList(this.multiformatAddress.bind(this), this.multiformatAddressLength());
    }
}
export class EPMT {
    constructor(dn = null, legalName = null, familyName = null, givenName = null, additionalName = null, honorificPrefix = null, honorificSuffix = null, jobTitle = null, occupation = null, address = null, alternateNames = [], email = null, telephone = null, keys = [], multiformatAddress = []) {
        this.dn = dn;
        this.legalName = legalName;
        this.familyName = familyName;
        this.givenName = givenName;
        this.additionalName = additionalName;
        this.honorificPrefix = honorificPrefix;
        this.honorificSuffix = honorificSuffix;
        this.jobTitle = jobTitle;
        this.occupation = occupation;
        this.address = address;
        this.alternateNames = alternateNames;
        this.email = email;
        this.telephone = telephone;
        this.keys = keys;
        this.multiformatAddress = multiformatAddress;
    }
    pack(builder) {
        const dn = (this.dn !== null ? builder.createString(this.dn) : 0);
        const legalName = (this.legalName !== null ? builder.createString(this.legalName) : 0);
        const familyName = (this.familyName !== null ? builder.createString(this.familyName) : 0);
        const givenName = (this.givenName !== null ? builder.createString(this.givenName) : 0);
        const additionalName = (this.additionalName !== null ? builder.createString(this.additionalName) : 0);
        const honorificPrefix = (this.honorificPrefix !== null ? builder.createString(this.honorificPrefix) : 0);
        const honorificSuffix = (this.honorificSuffix !== null ? builder.createString(this.honorificSuffix) : 0);
        const jobTitle = (this.jobTitle !== null ? builder.createString(this.jobTitle) : 0);
        const occupation = (this.occupation !== null ? builder.createString(this.occupation) : 0);
        const address = (this.address !== null ? this.address.pack(builder) : 0);
        const alternateNames = EPM.createAlternateNamesVector(builder, builder.createObjectOffsetList(this.alternateNames));
        const email = (this.email !== null ? builder.createString(this.email) : 0);
        const telephone = (this.telephone !== null ? builder.createString(this.telephone) : 0);
        const keys = EPM.createKeysVector(builder, builder.createObjectOffsetList(this.keys));
        const multiformatAddress = EPM.createMultiformatAddressVector(builder, builder.createObjectOffsetList(this.multiformatAddress));
        EPM.startEPM(builder);
        EPM.addDn(builder, dn);
        EPM.addLegalName(builder, legalName);
        EPM.addFamilyName(builder, familyName);
        EPM.addGivenName(builder, givenName);
        EPM.addAdditionalName(builder, additionalName);
        EPM.addHonorificPrefix(builder, honorificPrefix);
        EPM.addHonorificSuffix(builder, honorificSuffix);
        EPM.addJobTitle(builder, jobTitle);
        EPM.addOccupation(builder, occupation);
        EPM.addAddress(builder, address);
        EPM.addAlternateNames(builder, alternateNames);
        EPM.addEmail(builder, email);
        EPM.addTelephone(builder, telephone);
        EPM.addKeys(builder, keys);
        EPM.addMultiformatAddress(builder, multiformatAddress);
        return EPM.endEPM(builder);
    }
}
