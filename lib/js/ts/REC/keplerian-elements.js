// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { anomalyType } from './anomaly-type.js';
/**
 * Keplerian Elements
 */
export class keplerianElements {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAskeplerianElements(bb, obj) {
        return (obj || new keplerianElements()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAskeplerianElements(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new keplerianElements()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    semiMajorAxis() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    eccentricity() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    inclination() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    raOfAscNode() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    argOfPericenter() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    anomalyType() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : anomalyType.TRUE_ANOMALY;
    }
    anomaly() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startkeplerianElements(builder) {
        builder.startObject(7);
    }
    static addSemiMajorAxis(builder, semiMajorAxis) {
        builder.addFieldFloat64(0, semiMajorAxis, 0.0);
    }
    static addEccentricity(builder, eccentricity) {
        builder.addFieldFloat64(1, eccentricity, 0.0);
    }
    static addInclination(builder, inclination) {
        builder.addFieldFloat64(2, inclination, 0.0);
    }
    static addRaOfAscNode(builder, raOfAscNode) {
        builder.addFieldFloat64(3, raOfAscNode, 0.0);
    }
    static addArgOfPericenter(builder, argOfPericenter) {
        builder.addFieldFloat64(4, argOfPericenter, 0.0);
    }
    static addAnomalyType(builder, anomalyType) {
        builder.addFieldInt8(5, anomalyType, anomalyType.TRUE_ANOMALY);
    }
    static addAnomaly(builder, anomaly) {
        builder.addFieldFloat64(6, anomaly, 0.0);
    }
    static endkeplerianElements(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createkeplerianElements(builder, semiMajorAxis, eccentricity, inclination, raOfAscNode, argOfPericenter, anomalyType, anomaly) {
        keplerianElements.startkeplerianElements(builder);
        keplerianElements.addSemiMajorAxis(builder, semiMajorAxis);
        keplerianElements.addEccentricity(builder, eccentricity);
        keplerianElements.addInclination(builder, inclination);
        keplerianElements.addRaOfAscNode(builder, raOfAscNode);
        keplerianElements.addArgOfPericenter(builder, argOfPericenter);
        keplerianElements.addAnomalyType(builder, anomalyType);
        keplerianElements.addAnomaly(builder, anomaly);
        return keplerianElements.endkeplerianElements(builder);
    }
    unpack() {
        return new keplerianElementsT(this.semiMajorAxis(), this.eccentricity(), this.inclination(), this.raOfAscNode(), this.argOfPericenter(), this.anomalyType(), this.anomaly());
    }
    unpackTo(_o) {
        _o.semiMajorAxis = this.semiMajorAxis();
        _o.eccentricity = this.eccentricity();
        _o.inclination = this.inclination();
        _o.raOfAscNode = this.raOfAscNode();
        _o.argOfPericenter = this.argOfPericenter();
        _o.anomalyType = this.anomalyType();
        _o.anomaly = this.anomaly();
    }
}
export class keplerianElementsT {
    constructor(semiMajorAxis = 0.0, eccentricity = 0.0, inclination = 0.0, raOfAscNode = 0.0, argOfPericenter = 0.0, anomalyType = anomalyType.TRUE_ANOMALY, anomaly = 0.0) {
        this.semiMajorAxis = semiMajorAxis;
        this.eccentricity = eccentricity;
        this.inclination = inclination;
        this.raOfAscNode = raOfAscNode;
        this.argOfPericenter = argOfPericenter;
        this.anomalyType = anomalyType;
        this.anomaly = anomaly;
    }
    pack(builder) {
        return keplerianElements.createkeplerianElements(builder, this.semiMajorAxis, this.eccentricity, this.inclination, this.raOfAscNode, this.argOfPericenter, this.anomalyType, this.anomaly);
    }
}
