// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * VCM State Vector (position and velocity)
 */
export class VCMStateVector {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsVCMStateVector(bb, obj) {
        return (obj || new VCMStateVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsVCMStateVector(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VCMStateVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    epoch(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    x() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    y() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    z() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    xDot() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    yDot() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    zDot() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startVCMStateVector(builder) {
        builder.startObject(7);
    }
    static addEpoch(builder, epochOffset) {
        builder.addFieldOffset(0, epochOffset, 0);
    }
    static addX(builder, x) {
        builder.addFieldFloat64(1, x, 0.0);
    }
    static addY(builder, y) {
        builder.addFieldFloat64(2, y, 0.0);
    }
    static addZ(builder, z) {
        builder.addFieldFloat64(3, z, 0.0);
    }
    static addXDot(builder, xDot) {
        builder.addFieldFloat64(4, xDot, 0.0);
    }
    static addYDot(builder, yDot) {
        builder.addFieldFloat64(5, yDot, 0.0);
    }
    static addZDot(builder, zDot) {
        builder.addFieldFloat64(6, zDot, 0.0);
    }
    static endVCMStateVector(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createVCMStateVector(builder, epochOffset, x, y, z, xDot, yDot, zDot) {
        VCMStateVector.startVCMStateVector(builder);
        VCMStateVector.addEpoch(builder, epochOffset);
        VCMStateVector.addX(builder, x);
        VCMStateVector.addY(builder, y);
        VCMStateVector.addZ(builder, z);
        VCMStateVector.addXDot(builder, xDot);
        VCMStateVector.addYDot(builder, yDot);
        VCMStateVector.addZDot(builder, zDot);
        return VCMStateVector.endVCMStateVector(builder);
    }
    unpack() {
        return new VCMStateVectorT(this.epoch(), this.x(), this.y(), this.z(), this.xDot(), this.yDot(), this.zDot());
    }
    unpackTo(_o) {
        _o.epoch = this.epoch();
        _o.x = this.x();
        _o.y = this.y();
        _o.z = this.z();
        _o.xDot = this.xDot();
        _o.yDot = this.yDot();
        _o.zDot = this.zDot();
    }
}
export class VCMStateVectorT {
    constructor(epoch = null, x = 0.0, y = 0.0, z = 0.0, xDot = 0.0, yDot = 0.0, zDot = 0.0) {
        this.epoch = epoch;
        this.x = x;
        this.y = y;
        this.z = z;
        this.xDot = xDot;
        this.yDot = yDot;
        this.zDot = zDot;
    }
    pack(builder) {
        const epoch = (this.epoch !== null ? builder.createString(this.epoch) : 0);
        return VCMStateVector.createVCMStateVector(builder, epoch, this.x, this.y, this.z, this.xDot, this.yDot, this.zDot);
    }
}
