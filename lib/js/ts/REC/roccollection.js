// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { ROC } from './roc.js';
/**
 * Collection of Rocket Configurations
 */
export class ROCCOLLECTION {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsROCCOLLECTION(bb, obj) {
        return (obj || new ROCCOLLECTION()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsROCCOLLECTION(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ROCCOLLECTION()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    records(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new ROC()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    recordsLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startROCCOLLECTION(builder) {
        builder.startObject(1);
    }
    static addRecords(builder, recordsOffset) {
        builder.addFieldOffset(0, recordsOffset, 0);
    }
    static createRecordsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startRecordsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endROCCOLLECTION(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createROCCOLLECTION(builder, recordsOffset) {
        ROCCOLLECTION.startROCCOLLECTION(builder);
        ROCCOLLECTION.addRecords(builder, recordsOffset);
        return ROCCOLLECTION.endROCCOLLECTION(builder);
    }
    unpack() {
        return new ROCCOLLECTIONT(this.bb.createObjList(this.records.bind(this), this.recordsLength()));
    }
    unpackTo(_o) {
        _o.records = this.bb.createObjList(this.records.bind(this), this.recordsLength());
    }
}
export class ROCCOLLECTIONT {
    constructor(records = []) {
        this.records = records;
    }
    pack(builder) {
        const records = ROCCOLLECTION.createRecordsVector(builder, builder.createObjectOffsetList(this.records));
        return ROCCOLLECTION.createROCCOLLECTION(builder, records);
    }
}
