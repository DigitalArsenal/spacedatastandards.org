// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { STAGE } from './stage.js';
import { SUSTAINER } from './sustainer.js';
/**
 * Rocket Configuration
 */
export class ROC {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsROC(bb, obj) {
        return (obj || new ROC()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsROC(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ROC()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$ROC');
    }
    name(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    family(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    variant(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Stages in the Rocket
     */
    stages(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new STAGE()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    stagesLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Sustainers in the Rocket
     */
    sustainers(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new SUSTAINER()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    sustainersLength() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startROC(builder) {
        builder.startObject(5);
    }
    static addName(builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    }
    static addFamily(builder, familyOffset) {
        builder.addFieldOffset(1, familyOffset, 0);
    }
    static addVariant(builder, variantOffset) {
        builder.addFieldOffset(2, variantOffset, 0);
    }
    static addStages(builder, stagesOffset) {
        builder.addFieldOffset(3, stagesOffset, 0);
    }
    static createStagesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startStagesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addSustainers(builder, sustainersOffset) {
        builder.addFieldOffset(4, sustainersOffset, 0);
    }
    static createSustainersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startSustainersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endROC(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishROCBuffer(builder, offset) {
        builder.finish(offset, '$ROC');
    }
    static finishSizePrefixedROCBuffer(builder, offset) {
        builder.finish(offset, '$ROC', true);
    }
    static createROC(builder, nameOffset, familyOffset, variantOffset, stagesOffset, sustainersOffset) {
        ROC.startROC(builder);
        ROC.addName(builder, nameOffset);
        ROC.addFamily(builder, familyOffset);
        ROC.addVariant(builder, variantOffset);
        ROC.addStages(builder, stagesOffset);
        ROC.addSustainers(builder, sustainersOffset);
        return ROC.endROC(builder);
    }
    unpack() {
        return new ROCT(this.name(), this.family(), this.variant(), this.bb.createObjList(this.stages.bind(this), this.stagesLength()), this.bb.createObjList(this.sustainers.bind(this), this.sustainersLength()));
    }
    unpackTo(_o) {
        _o.name = this.name();
        _o.family = this.family();
        _o.variant = this.variant();
        _o.stages = this.bb.createObjList(this.stages.bind(this), this.stagesLength());
        _o.sustainers = this.bb.createObjList(this.sustainers.bind(this), this.sustainersLength());
    }
}
export class ROCT {
    constructor(name = null, family = null, variant = null, stages = [], sustainers = []) {
        this.name = name;
        this.family = family;
        this.variant = variant;
        this.stages = stages;
        this.sustainers = sustainers;
    }
    pack(builder) {
        const name = (this.name !== null ? builder.createString(this.name) : 0);
        const family = (this.family !== null ? builder.createString(this.family) : 0);
        const variant = (this.variant !== null ? builder.createString(this.variant) : 0);
        const stages = ROC.createStagesVector(builder, builder.createObjectOffsetList(this.stages));
        const sustainers = ROC.createSustainersVector(builder, builder.createObjectOffsetList(this.sustainers));
        return ROC.createROC(builder, name, family, variant, stages, sustainers);
    }
}
