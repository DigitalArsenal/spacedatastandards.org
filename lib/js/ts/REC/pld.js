// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { IDM } from './idm.js';
/**
 * Payload Information
 */
export class PLD {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPLD(bb, obj) {
        return (obj || new PLD()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPLD(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PLD()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$PLD');
    }
    payloadDuration(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    massAtLaunch() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    dimensions(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    solarArrayArea() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    solarArrayDimensions(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    nominalOperationalLifetime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    instruments(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? (obj || new IDM()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    instrumentsLength() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startPLD(builder) {
        builder.startObject(7);
    }
    static addPayloadDuration(builder, payloadDurationOffset) {
        builder.addFieldOffset(0, payloadDurationOffset, 0);
    }
    static addMassAtLaunch(builder, massAtLaunch) {
        builder.addFieldFloat32(1, massAtLaunch, 0.0);
    }
    static addDimensions(builder, dimensionsOffset) {
        builder.addFieldOffset(2, dimensionsOffset, 0);
    }
    static addSolarArrayArea(builder, solarArrayArea) {
        builder.addFieldFloat32(3, solarArrayArea, 0.0);
    }
    static addSolarArrayDimensions(builder, solarArrayDimensionsOffset) {
        builder.addFieldOffset(4, solarArrayDimensionsOffset, 0);
    }
    static addNominalOperationalLifetime(builder, nominalOperationalLifetimeOffset) {
        builder.addFieldOffset(5, nominalOperationalLifetimeOffset, 0);
    }
    static addInstruments(builder, instrumentsOffset) {
        builder.addFieldOffset(6, instrumentsOffset, 0);
    }
    static createInstrumentsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startInstrumentsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endPLD(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishPLDBuffer(builder, offset) {
        builder.finish(offset, '$PLD');
    }
    static finishSizePrefixedPLDBuffer(builder, offset) {
        builder.finish(offset, '$PLD', true);
    }
    static createPLD(builder, payloadDurationOffset, massAtLaunch, dimensionsOffset, solarArrayArea, solarArrayDimensionsOffset, nominalOperationalLifetimeOffset, instrumentsOffset) {
        PLD.startPLD(builder);
        PLD.addPayloadDuration(builder, payloadDurationOffset);
        PLD.addMassAtLaunch(builder, massAtLaunch);
        PLD.addDimensions(builder, dimensionsOffset);
        PLD.addSolarArrayArea(builder, solarArrayArea);
        PLD.addSolarArrayDimensions(builder, solarArrayDimensionsOffset);
        PLD.addNominalOperationalLifetime(builder, nominalOperationalLifetimeOffset);
        PLD.addInstruments(builder, instrumentsOffset);
        return PLD.endPLD(builder);
    }
    unpack() {
        return new PLDT(this.payloadDuration(), this.massAtLaunch(), this.dimensions(), this.solarArrayArea(), this.solarArrayDimensions(), this.nominalOperationalLifetime(), this.bb.createObjList(this.instruments.bind(this), this.instrumentsLength()));
    }
    unpackTo(_o) {
        _o.payloadDuration = this.payloadDuration();
        _o.massAtLaunch = this.massAtLaunch();
        _o.dimensions = this.dimensions();
        _o.solarArrayArea = this.solarArrayArea();
        _o.solarArrayDimensions = this.solarArrayDimensions();
        _o.nominalOperationalLifetime = this.nominalOperationalLifetime();
        _o.instruments = this.bb.createObjList(this.instruments.bind(this), this.instrumentsLength());
    }
}
export class PLDT {
    constructor(payloadDuration = null, massAtLaunch = 0.0, dimensions = null, solarArrayArea = 0.0, solarArrayDimensions = null, nominalOperationalLifetime = null, instruments = []) {
        this.payloadDuration = payloadDuration;
        this.massAtLaunch = massAtLaunch;
        this.dimensions = dimensions;
        this.solarArrayArea = solarArrayArea;
        this.solarArrayDimensions = solarArrayDimensions;
        this.nominalOperationalLifetime = nominalOperationalLifetime;
        this.instruments = instruments;
    }
    pack(builder) {
        const payloadDuration = (this.payloadDuration !== null ? builder.createString(this.payloadDuration) : 0);
        const dimensions = (this.dimensions !== null ? builder.createString(this.dimensions) : 0);
        const solarArrayDimensions = (this.solarArrayDimensions !== null ? builder.createString(this.solarArrayDimensions) : 0);
        const nominalOperationalLifetime = (this.nominalOperationalLifetime !== null ? builder.createString(this.nominalOperationalLifetime) : 0);
        const instruments = PLD.createInstrumentsVector(builder, builder.createObjectOffsetList(this.instruments));
        return PLD.createPLD(builder, payloadDuration, this.massAtLaunch, dimensions, this.solarArrayArea, solarArrayDimensions, nominalOperationalLifetime, instruments);
    }
}
