// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { VCMAtmosphericModelData } from './vcmatmospheric-model-data.js';
import { VCMCovarianceMatrixLine } from './vcmcovariance-matrix-line.js';
import { VCMStateVector } from './vcmstate-vector.js';
import { equinoctialElements } from './equinoctial-elements.js';
import { keplerianElements } from './keplerian-elements.js';
import { perturbationStatus } from './perturbation-status.js';
import { propagatorConfig } from './propagator-config.js';
import { uvwSigmas } from './uvw-sigmas.js';
/**
 * Vector Covariance Message
 */
export class VCM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsVCM(bb, obj) {
        return (obj || new VCM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsVCM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VCM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    ccsdsOmmVers() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    creationDate(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    originator(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    objectName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    objectId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    centerName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    refFrame(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    timeSystem(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    stateVector(obj) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? (obj || new VCMStateVector()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    keplerianElements(obj) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? (obj || new keplerianElements()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    equinoctialElements(obj) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? (obj || new equinoctialElements()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    gm() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    atmosphericModelData(obj) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? (obj || new VCMAtmosphericModelData()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    propagatorSettings(obj) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? (obj || new propagatorConfig()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    covarianceMatrix(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? (obj || new VCMCovarianceMatrixLine()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    covarianceMatrixLength() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    uvwSigmas(obj) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? (obj || new uvwSigmas()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    mass() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    solarRadArea() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    solarRadCoeff() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    dragArea() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    dragCoeff() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    srp() {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : perturbationStatus.OFF;
    }
    classificationType(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    noradCatId() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    elementSetNo() {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    revAtEpoch() {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    bstar() {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    meanMotionDot() {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    meanMotionDdot() {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    covReferenceFrame(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 62);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    cxX() {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    cyX() {
        const offset = this.bb.__offset(this.bb_pos, 66);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    czX() {
        const offset = this.bb.__offset(this.bb_pos, 68);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    cxDotX() {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    userDefinedBip0044Type() {
        const offset = this.bb.__offset(this.bb_pos, 72);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    userDefinedObjectDesignator(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 74);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    userDefinedEarthModel(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 76);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    userDefinedEpochTimestamp() {
        const offset = this.bb.__offset(this.bb_pos, 78);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    userDefinedMicroseconds() {
        const offset = this.bb.__offset(this.bb_pos, 80);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startVCM(builder) {
        builder.startObject(39);
    }
    static addCcsdsOmmVers(builder, ccsdsOmmVers) {
        builder.addFieldFloat64(0, ccsdsOmmVers, 0.0);
    }
    static addCreationDate(builder, creationDateOffset) {
        builder.addFieldOffset(1, creationDateOffset, 0);
    }
    static addOriginator(builder, originatorOffset) {
        builder.addFieldOffset(2, originatorOffset, 0);
    }
    static addObjectName(builder, objectNameOffset) {
        builder.addFieldOffset(3, objectNameOffset, 0);
    }
    static addObjectId(builder, objectIdOffset) {
        builder.addFieldOffset(4, objectIdOffset, 0);
    }
    static addCenterName(builder, centerNameOffset) {
        builder.addFieldOffset(5, centerNameOffset, 0);
    }
    static addRefFrame(builder, refFrameOffset) {
        builder.addFieldOffset(6, refFrameOffset, 0);
    }
    static addTimeSystem(builder, timeSystemOffset) {
        builder.addFieldOffset(7, timeSystemOffset, 0);
    }
    static addStateVector(builder, stateVectorOffset) {
        builder.addFieldOffset(8, stateVectorOffset, 0);
    }
    static addKeplerianElements(builder, keplerianElementsOffset) {
        builder.addFieldOffset(9, keplerianElementsOffset, 0);
    }
    static addEquinoctialElements(builder, equinoctialElementsOffset) {
        builder.addFieldOffset(10, equinoctialElementsOffset, 0);
    }
    static addGm(builder, gm) {
        builder.addFieldFloat64(11, gm, 0.0);
    }
    static addAtmosphericModelData(builder, atmosphericModelDataOffset) {
        builder.addFieldOffset(12, atmosphericModelDataOffset, 0);
    }
    static addPropagatorSettings(builder, propagatorSettingsOffset) {
        builder.addFieldOffset(13, propagatorSettingsOffset, 0);
    }
    static addCovarianceMatrix(builder, covarianceMatrixOffset) {
        builder.addFieldOffset(14, covarianceMatrixOffset, 0);
    }
    static createCovarianceMatrixVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startCovarianceMatrixVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addUvwSigmas(builder, uvwSigmasOffset) {
        builder.addFieldOffset(15, uvwSigmasOffset, 0);
    }
    static addMass(builder, mass) {
        builder.addFieldFloat64(16, mass, 0.0);
    }
    static addSolarRadArea(builder, solarRadArea) {
        builder.addFieldFloat64(17, solarRadArea, 0.0);
    }
    static addSolarRadCoeff(builder, solarRadCoeff) {
        builder.addFieldFloat64(18, solarRadCoeff, 0.0);
    }
    static addDragArea(builder, dragArea) {
        builder.addFieldFloat64(19, dragArea, 0.0);
    }
    static addDragCoeff(builder, dragCoeff) {
        builder.addFieldFloat64(20, dragCoeff, 0.0);
    }
    static addSrp(builder, srp) {
        builder.addFieldInt8(21, srp, perturbationStatus.OFF);
    }
    static addClassificationType(builder, classificationTypeOffset) {
        builder.addFieldOffset(22, classificationTypeOffset, 0);
    }
    static addNoradCatId(builder, noradCatId) {
        builder.addFieldInt32(23, noradCatId, 0);
    }
    static addElementSetNo(builder, elementSetNo) {
        builder.addFieldInt32(24, elementSetNo, 0);
    }
    static addRevAtEpoch(builder, revAtEpoch) {
        builder.addFieldFloat64(25, revAtEpoch, 0.0);
    }
    static addBstar(builder, bstar) {
        builder.addFieldFloat64(26, bstar, 0.0);
    }
    static addMeanMotionDot(builder, meanMotionDot) {
        builder.addFieldFloat64(27, meanMotionDot, 0.0);
    }
    static addMeanMotionDdot(builder, meanMotionDdot) {
        builder.addFieldFloat64(28, meanMotionDdot, 0.0);
    }
    static addCovReferenceFrame(builder, covReferenceFrameOffset) {
        builder.addFieldOffset(29, covReferenceFrameOffset, 0);
    }
    static addCxX(builder, cxX) {
        builder.addFieldFloat64(30, cxX, 0.0);
    }
    static addCyX(builder, cyX) {
        builder.addFieldFloat64(31, cyX, 0.0);
    }
    static addCzX(builder, czX) {
        builder.addFieldFloat64(32, czX, 0.0);
    }
    static addCxDotX(builder, cxDotX) {
        builder.addFieldFloat64(33, cxDotX, 0.0);
    }
    static addUserDefinedBip0044Type(builder, userDefinedBip0044Type) {
        builder.addFieldInt32(34, userDefinedBip0044Type, 0);
    }
    static addUserDefinedObjectDesignator(builder, userDefinedObjectDesignatorOffset) {
        builder.addFieldOffset(35, userDefinedObjectDesignatorOffset, 0);
    }
    static addUserDefinedEarthModel(builder, userDefinedEarthModelOffset) {
        builder.addFieldOffset(36, userDefinedEarthModelOffset, 0);
    }
    static addUserDefinedEpochTimestamp(builder, userDefinedEpochTimestamp) {
        builder.addFieldFloat64(37, userDefinedEpochTimestamp, 0.0);
    }
    static addUserDefinedMicroseconds(builder, userDefinedMicroseconds) {
        builder.addFieldFloat64(38, userDefinedMicroseconds, 0.0);
    }
    static endVCM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishVCMBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedVCMBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    unpack() {
        return new VCMT(this.ccsdsOmmVers(), this.creationDate(), this.originator(), this.objectName(), this.objectId(), this.centerName(), this.refFrame(), this.timeSystem(), (this.stateVector() !== null ? this.stateVector().unpack() : null), (this.keplerianElements() !== null ? this.keplerianElements().unpack() : null), (this.equinoctialElements() !== null ? this.equinoctialElements().unpack() : null), this.gm(), (this.atmosphericModelData() !== null ? this.atmosphericModelData().unpack() : null), (this.propagatorSettings() !== null ? this.propagatorSettings().unpack() : null), this.bb.createObjList(this.covarianceMatrix.bind(this), this.covarianceMatrixLength()), (this.uvwSigmas() !== null ? this.uvwSigmas().unpack() : null), this.mass(), this.solarRadArea(), this.solarRadCoeff(), this.dragArea(), this.dragCoeff(), this.srp(), this.classificationType(), this.noradCatId(), this.elementSetNo(), this.revAtEpoch(), this.bstar(), this.meanMotionDot(), this.meanMotionDdot(), this.covReferenceFrame(), this.cxX(), this.cyX(), this.czX(), this.cxDotX(), this.userDefinedBip0044Type(), this.userDefinedObjectDesignator(), this.userDefinedEarthModel(), this.userDefinedEpochTimestamp(), this.userDefinedMicroseconds());
    }
    unpackTo(_o) {
        _o.ccsdsOmmVers = this.ccsdsOmmVers();
        _o.creationDate = this.creationDate();
        _o.originator = this.originator();
        _o.objectName = this.objectName();
        _o.objectId = this.objectId();
        _o.centerName = this.centerName();
        _o.refFrame = this.refFrame();
        _o.timeSystem = this.timeSystem();
        _o.stateVector = (this.stateVector() !== null ? this.stateVector().unpack() : null);
        _o.keplerianElements = (this.keplerianElements() !== null ? this.keplerianElements().unpack() : null);
        _o.equinoctialElements = (this.equinoctialElements() !== null ? this.equinoctialElements().unpack() : null);
        _o.gm = this.gm();
        _o.atmosphericModelData = (this.atmosphericModelData() !== null ? this.atmosphericModelData().unpack() : null);
        _o.propagatorSettings = (this.propagatorSettings() !== null ? this.propagatorSettings().unpack() : null);
        _o.covarianceMatrix = this.bb.createObjList(this.covarianceMatrix.bind(this), this.covarianceMatrixLength());
        _o.uvwSigmas = (this.uvwSigmas() !== null ? this.uvwSigmas().unpack() : null);
        _o.mass = this.mass();
        _o.solarRadArea = this.solarRadArea();
        _o.solarRadCoeff = this.solarRadCoeff();
        _o.dragArea = this.dragArea();
        _o.dragCoeff = this.dragCoeff();
        _o.srp = this.srp();
        _o.classificationType = this.classificationType();
        _o.noradCatId = this.noradCatId();
        _o.elementSetNo = this.elementSetNo();
        _o.revAtEpoch = this.revAtEpoch();
        _o.bstar = this.bstar();
        _o.meanMotionDot = this.meanMotionDot();
        _o.meanMotionDdot = this.meanMotionDdot();
        _o.covReferenceFrame = this.covReferenceFrame();
        _o.cxX = this.cxX();
        _o.cyX = this.cyX();
        _o.czX = this.czX();
        _o.cxDotX = this.cxDotX();
        _o.userDefinedBip0044Type = this.userDefinedBip0044Type();
        _o.userDefinedObjectDesignator = this.userDefinedObjectDesignator();
        _o.userDefinedEarthModel = this.userDefinedEarthModel();
        _o.userDefinedEpochTimestamp = this.userDefinedEpochTimestamp();
        _o.userDefinedMicroseconds = this.userDefinedMicroseconds();
    }
}
export class VCMT {
    constructor(ccsdsOmmVers = 0.0, creationDate = null, originator = null, objectName = null, objectId = null, centerName = null, refFrame = null, timeSystem = null, stateVector = null, keplerianElements = null, equinoctialElements = null, gm = 0.0, atmosphericModelData = null, propagatorSettings = null, covarianceMatrix = [], uvwSigmas = null, mass = 0.0, solarRadArea = 0.0, solarRadCoeff = 0.0, dragArea = 0.0, dragCoeff = 0.0, srp = perturbationStatus.OFF, classificationType = null, noradCatId = 0, elementSetNo = 0, revAtEpoch = 0.0, bstar = 0.0, meanMotionDot = 0.0, meanMotionDdot = 0.0, covReferenceFrame = null, cxX = 0.0, cyX = 0.0, czX = 0.0, cxDotX = 0.0, userDefinedBip0044Type = 0, userDefinedObjectDesignator = null, userDefinedEarthModel = null, userDefinedEpochTimestamp = 0.0, userDefinedMicroseconds = 0.0) {
        this.ccsdsOmmVers = ccsdsOmmVers;
        this.creationDate = creationDate;
        this.originator = originator;
        this.objectName = objectName;
        this.objectId = objectId;
        this.centerName = centerName;
        this.refFrame = refFrame;
        this.timeSystem = timeSystem;
        this.stateVector = stateVector;
        this.keplerianElements = keplerianElements;
        this.equinoctialElements = equinoctialElements;
        this.gm = gm;
        this.atmosphericModelData = atmosphericModelData;
        this.propagatorSettings = propagatorSettings;
        this.covarianceMatrix = covarianceMatrix;
        this.uvwSigmas = uvwSigmas;
        this.mass = mass;
        this.solarRadArea = solarRadArea;
        this.solarRadCoeff = solarRadCoeff;
        this.dragArea = dragArea;
        this.dragCoeff = dragCoeff;
        this.srp = srp;
        this.classificationType = classificationType;
        this.noradCatId = noradCatId;
        this.elementSetNo = elementSetNo;
        this.revAtEpoch = revAtEpoch;
        this.bstar = bstar;
        this.meanMotionDot = meanMotionDot;
        this.meanMotionDdot = meanMotionDdot;
        this.covReferenceFrame = covReferenceFrame;
        this.cxX = cxX;
        this.cyX = cyX;
        this.czX = czX;
        this.cxDotX = cxDotX;
        this.userDefinedBip0044Type = userDefinedBip0044Type;
        this.userDefinedObjectDesignator = userDefinedObjectDesignator;
        this.userDefinedEarthModel = userDefinedEarthModel;
        this.userDefinedEpochTimestamp = userDefinedEpochTimestamp;
        this.userDefinedMicroseconds = userDefinedMicroseconds;
    }
    pack(builder) {
        const creationDate = (this.creationDate !== null ? builder.createString(this.creationDate) : 0);
        const originator = (this.originator !== null ? builder.createString(this.originator) : 0);
        const objectName = (this.objectName !== null ? builder.createString(this.objectName) : 0);
        const objectId = (this.objectId !== null ? builder.createString(this.objectId) : 0);
        const centerName = (this.centerName !== null ? builder.createString(this.centerName) : 0);
        const refFrame = (this.refFrame !== null ? builder.createString(this.refFrame) : 0);
        const timeSystem = (this.timeSystem !== null ? builder.createString(this.timeSystem) : 0);
        const stateVector = (this.stateVector !== null ? this.stateVector.pack(builder) : 0);
        const keplerianElements = (this.keplerianElements !== null ? this.keplerianElements.pack(builder) : 0);
        const equinoctialElements = (this.equinoctialElements !== null ? this.equinoctialElements.pack(builder) : 0);
        const atmosphericModelData = (this.atmosphericModelData !== null ? this.atmosphericModelData.pack(builder) : 0);
        const propagatorSettings = (this.propagatorSettings !== null ? this.propagatorSettings.pack(builder) : 0);
        const covarianceMatrix = VCM.createCovarianceMatrixVector(builder, builder.createObjectOffsetList(this.covarianceMatrix));
        const uvwSigmas = (this.uvwSigmas !== null ? this.uvwSigmas.pack(builder) : 0);
        const classificationType = (this.classificationType !== null ? builder.createString(this.classificationType) : 0);
        const covReferenceFrame = (this.covReferenceFrame !== null ? builder.createString(this.covReferenceFrame) : 0);
        const userDefinedObjectDesignator = (this.userDefinedObjectDesignator !== null ? builder.createString(this.userDefinedObjectDesignator) : 0);
        const userDefinedEarthModel = (this.userDefinedEarthModel !== null ? builder.createString(this.userDefinedEarthModel) : 0);
        VCM.startVCM(builder);
        VCM.addCcsdsOmmVers(builder, this.ccsdsOmmVers);
        VCM.addCreationDate(builder, creationDate);
        VCM.addOriginator(builder, originator);
        VCM.addObjectName(builder, objectName);
        VCM.addObjectId(builder, objectId);
        VCM.addCenterName(builder, centerName);
        VCM.addRefFrame(builder, refFrame);
        VCM.addTimeSystem(builder, timeSystem);
        VCM.addStateVector(builder, stateVector);
        VCM.addKeplerianElements(builder, keplerianElements);
        VCM.addEquinoctialElements(builder, equinoctialElements);
        VCM.addGm(builder, this.gm);
        VCM.addAtmosphericModelData(builder, atmosphericModelData);
        VCM.addPropagatorSettings(builder, propagatorSettings);
        VCM.addCovarianceMatrix(builder, covarianceMatrix);
        VCM.addUvwSigmas(builder, uvwSigmas);
        VCM.addMass(builder, this.mass);
        VCM.addSolarRadArea(builder, this.solarRadArea);
        VCM.addSolarRadCoeff(builder, this.solarRadCoeff);
        VCM.addDragArea(builder, this.dragArea);
        VCM.addDragCoeff(builder, this.dragCoeff);
        VCM.addSrp(builder, this.srp);
        VCM.addClassificationType(builder, classificationType);
        VCM.addNoradCatId(builder, this.noradCatId);
        VCM.addElementSetNo(builder, this.elementSetNo);
        VCM.addRevAtEpoch(builder, this.revAtEpoch);
        VCM.addBstar(builder, this.bstar);
        VCM.addMeanMotionDot(builder, this.meanMotionDot);
        VCM.addMeanMotionDdot(builder, this.meanMotionDdot);
        VCM.addCovReferenceFrame(builder, covReferenceFrame);
        VCM.addCxX(builder, this.cxX);
        VCM.addCyX(builder, this.cyX);
        VCM.addCzX(builder, this.czX);
        VCM.addCxDotX(builder, this.cxDotX);
        VCM.addUserDefinedBip0044Type(builder, this.userDefinedBip0044Type);
        VCM.addUserDefinedObjectDesignator(builder, userDefinedObjectDesignator);
        VCM.addUserDefinedEarthModel(builder, userDefinedEarthModel);
        VCM.addUserDefinedEpochTimestamp(builder, this.userDefinedEpochTimestamp);
        VCM.addUserDefinedMicroseconds(builder, this.userDefinedMicroseconds);
        return VCM.endVCM(builder);
    }
}
