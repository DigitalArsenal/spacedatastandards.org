// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { Geometry } from './geometry.js';
import { IDM } from './idm.js';
import { SiteType } from './site-type.js';
/**
 * Site Information Message
 */
export class SIT {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSIT(bb, obj) {
        return (obj || new SIT()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSIT(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SIT()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$SIT');
    }
    id(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    name(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    abbreviation(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Site type as defined in SiteType enum
     */
    siteType() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : SiteType.LAUNCH_SITE;
    }
    catcode(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    network(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Latitude of the site
     */
    latitude() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Longitude of the site
     */
    longitude() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Altitude of the site
     */
    altitude() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Geometry of the site
     */
    geometry(obj) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? (obj || new Geometry()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    /**
     * Center point geometry coordinates
     */
    centerPointGeometry(index) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    centerPointGeometryLength() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    centerPointGeometryArray() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    classification(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ctrId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    createdBy(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    description(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    modelUrl(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    source(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Indicates if the site is taskable
     */
    taskable() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    operationalStatus(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    establishmentDate(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    contactInfo(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    environmentalImpact(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    accessibilityInfra(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Vector of Integrated Devices (IDM)
     */
    integratedDevices(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? (obj || new IDM()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    integratedDevicesLength() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startSIT(builder) {
        builder.startObject(24);
    }
    static addId(builder, idOffset) {
        builder.addFieldOffset(0, idOffset, 0);
    }
    static addName(builder, nameOffset) {
        builder.addFieldOffset(1, nameOffset, 0);
    }
    static addAbbreviation(builder, abbreviationOffset) {
        builder.addFieldOffset(2, abbreviationOffset, 0);
    }
    static addSiteType(builder, siteType) {
        builder.addFieldInt8(3, siteType, SiteType.LAUNCH_SITE);
    }
    static addCatcode(builder, catcodeOffset) {
        builder.addFieldOffset(4, catcodeOffset, 0);
    }
    static addNetwork(builder, networkOffset) {
        builder.addFieldOffset(5, networkOffset, 0);
    }
    static addLatitude(builder, latitude) {
        builder.addFieldFloat32(6, latitude, 0.0);
    }
    static addLongitude(builder, longitude) {
        builder.addFieldFloat32(7, longitude, 0.0);
    }
    static addAltitude(builder, altitude) {
        builder.addFieldFloat32(8, altitude, 0.0);
    }
    static addGeometry(builder, geometryOffset) {
        builder.addFieldOffset(9, geometryOffset, 0);
    }
    static addCenterPointGeometry(builder, centerPointGeometryOffset) {
        builder.addFieldOffset(10, centerPointGeometryOffset, 0);
    }
    static createCenterPointGeometryVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    }
    static startCenterPointGeometryVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addClassification(builder, classificationOffset) {
        builder.addFieldOffset(11, classificationOffset, 0);
    }
    static addCtrId(builder, ctrIdOffset) {
        builder.addFieldOffset(12, ctrIdOffset, 0);
    }
    static addCreatedBy(builder, createdByOffset) {
        builder.addFieldOffset(13, createdByOffset, 0);
    }
    static addDescription(builder, descriptionOffset) {
        builder.addFieldOffset(14, descriptionOffset, 0);
    }
    static addModelUrl(builder, modelUrlOffset) {
        builder.addFieldOffset(15, modelUrlOffset, 0);
    }
    static addSource(builder, sourceOffset) {
        builder.addFieldOffset(16, sourceOffset, 0);
    }
    static addTaskable(builder, taskable) {
        builder.addFieldInt8(17, +taskable, +false);
    }
    static addOperationalStatus(builder, operationalStatusOffset) {
        builder.addFieldOffset(18, operationalStatusOffset, 0);
    }
    static addEstablishmentDate(builder, establishmentDateOffset) {
        builder.addFieldOffset(19, establishmentDateOffset, 0);
    }
    static addContactInfo(builder, contactInfoOffset) {
        builder.addFieldOffset(20, contactInfoOffset, 0);
    }
    static addEnvironmentalImpact(builder, environmentalImpactOffset) {
        builder.addFieldOffset(21, environmentalImpactOffset, 0);
    }
    static addAccessibilityInfra(builder, accessibilityInfraOffset) {
        builder.addFieldOffset(22, accessibilityInfraOffset, 0);
    }
    static addIntegratedDevices(builder, integratedDevicesOffset) {
        builder.addFieldOffset(23, integratedDevicesOffset, 0);
    }
    static createIntegratedDevicesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startIntegratedDevicesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endSIT(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishSITBuffer(builder, offset) {
        builder.finish(offset, '$SIT');
    }
    static finishSizePrefixedSITBuffer(builder, offset) {
        builder.finish(offset, '$SIT', true);
    }
    unpack() {
        return new SITT(this.id(), this.name(), this.abbreviation(), this.siteType(), this.catcode(), this.network(), this.latitude(), this.longitude(), this.altitude(), (this.geometry() !== null ? this.geometry().unpack() : null), this.bb.createScalarList(this.centerPointGeometry.bind(this), this.centerPointGeometryLength()), this.classification(), this.ctrId(), this.createdBy(), this.description(), this.modelUrl(), this.source(), this.taskable(), this.operationalStatus(), this.establishmentDate(), this.contactInfo(), this.environmentalImpact(), this.accessibilityInfra(), this.bb.createObjList(this.integratedDevices.bind(this), this.integratedDevicesLength()));
    }
    unpackTo(_o) {
        _o.id = this.id();
        _o.name = this.name();
        _o.abbreviation = this.abbreviation();
        _o.siteType = this.siteType();
        _o.catcode = this.catcode();
        _o.network = this.network();
        _o.latitude = this.latitude();
        _o.longitude = this.longitude();
        _o.altitude = this.altitude();
        _o.geometry = (this.geometry() !== null ? this.geometry().unpack() : null);
        _o.centerPointGeometry = this.bb.createScalarList(this.centerPointGeometry.bind(this), this.centerPointGeometryLength());
        _o.classification = this.classification();
        _o.ctrId = this.ctrId();
        _o.createdBy = this.createdBy();
        _o.description = this.description();
        _o.modelUrl = this.modelUrl();
        _o.source = this.source();
        _o.taskable = this.taskable();
        _o.operationalStatus = this.operationalStatus();
        _o.establishmentDate = this.establishmentDate();
        _o.contactInfo = this.contactInfo();
        _o.environmentalImpact = this.environmentalImpact();
        _o.accessibilityInfra = this.accessibilityInfra();
        _o.integratedDevices = this.bb.createObjList(this.integratedDevices.bind(this), this.integratedDevicesLength());
    }
}
export class SITT {
    constructor(id = null, name = null, abbreviation = null, siteType = SiteType.LAUNCH_SITE, catcode = null, network = null, latitude = 0.0, longitude = 0.0, altitude = 0.0, geometry = null, centerPointGeometry = [], classification = null, ctrId = null, createdBy = null, description = null, modelUrl = null, source = null, taskable = false, operationalStatus = null, establishmentDate = null, contactInfo = null, environmentalImpact = null, accessibilityInfra = null, integratedDevices = []) {
        this.id = id;
        this.name = name;
        this.abbreviation = abbreviation;
        this.siteType = siteType;
        this.catcode = catcode;
        this.network = network;
        this.latitude = latitude;
        this.longitude = longitude;
        this.altitude = altitude;
        this.geometry = geometry;
        this.centerPointGeometry = centerPointGeometry;
        this.classification = classification;
        this.ctrId = ctrId;
        this.createdBy = createdBy;
        this.description = description;
        this.modelUrl = modelUrl;
        this.source = source;
        this.taskable = taskable;
        this.operationalStatus = operationalStatus;
        this.establishmentDate = establishmentDate;
        this.contactInfo = contactInfo;
        this.environmentalImpact = environmentalImpact;
        this.accessibilityInfra = accessibilityInfra;
        this.integratedDevices = integratedDevices;
    }
    pack(builder) {
        const id = (this.id !== null ? builder.createString(this.id) : 0);
        const name = (this.name !== null ? builder.createString(this.name) : 0);
        const abbreviation = (this.abbreviation !== null ? builder.createString(this.abbreviation) : 0);
        const catcode = (this.catcode !== null ? builder.createString(this.catcode) : 0);
        const network = (this.network !== null ? builder.createString(this.network) : 0);
        const geometry = (this.geometry !== null ? this.geometry.pack(builder) : 0);
        const centerPointGeometry = SIT.createCenterPointGeometryVector(builder, this.centerPointGeometry);
        const classification = (this.classification !== null ? builder.createString(this.classification) : 0);
        const ctrId = (this.ctrId !== null ? builder.createString(this.ctrId) : 0);
        const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy) : 0);
        const description = (this.description !== null ? builder.createString(this.description) : 0);
        const modelUrl = (this.modelUrl !== null ? builder.createString(this.modelUrl) : 0);
        const source = (this.source !== null ? builder.createString(this.source) : 0);
        const operationalStatus = (this.operationalStatus !== null ? builder.createString(this.operationalStatus) : 0);
        const establishmentDate = (this.establishmentDate !== null ? builder.createString(this.establishmentDate) : 0);
        const contactInfo = (this.contactInfo !== null ? builder.createString(this.contactInfo) : 0);
        const environmentalImpact = (this.environmentalImpact !== null ? builder.createString(this.environmentalImpact) : 0);
        const accessibilityInfra = (this.accessibilityInfra !== null ? builder.createString(this.accessibilityInfra) : 0);
        const integratedDevices = SIT.createIntegratedDevicesVector(builder, builder.createObjectOffsetList(this.integratedDevices));
        SIT.startSIT(builder);
        SIT.addId(builder, id);
        SIT.addName(builder, name);
        SIT.addAbbreviation(builder, abbreviation);
        SIT.addSiteType(builder, this.siteType);
        SIT.addCatcode(builder, catcode);
        SIT.addNetwork(builder, network);
        SIT.addLatitude(builder, this.latitude);
        SIT.addLongitude(builder, this.longitude);
        SIT.addAltitude(builder, this.altitude);
        SIT.addGeometry(builder, geometry);
        SIT.addCenterPointGeometry(builder, centerPointGeometry);
        SIT.addClassification(builder, classification);
        SIT.addCtrId(builder, ctrId);
        SIT.addCreatedBy(builder, createdBy);
        SIT.addDescription(builder, description);
        SIT.addModelUrl(builder, modelUrl);
        SIT.addSource(builder, source);
        SIT.addTaskable(builder, this.taskable);
        SIT.addOperationalStatus(builder, operationalStatus);
        SIT.addEstablishmentDate(builder, establishmentDate);
        SIT.addContactInfo(builder, contactInfo);
        SIT.addEnvironmentalImpact(builder, environmentalImpact);
        SIT.addAccessibilityInfra(builder, accessibilityInfra);
        SIT.addIntegratedDevices(builder, integratedDevices);
        return SIT.endSIT(builder);
    }
}
