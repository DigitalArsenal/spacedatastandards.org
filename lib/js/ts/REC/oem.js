// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { ephemerisDataBlock } from './ephemeris-data-block.js';
/**
 * Orbit Ephemeris Message
 */
export class OEM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsOEM(bb, obj) {
        return (obj || new OEM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsOEM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new OEM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$OEM');
    }
    classification(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * OEM Version
     */
    ccsdsOemVers() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    creationDate(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    originator(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Array of ephemeris data blocks
     */
    ephemerisDataBlock(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new ephemerisDataBlock()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    ephemerisDataBlockLength() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startOEM(builder) {
        builder.startObject(5);
    }
    static addClassification(builder, classificationOffset) {
        builder.addFieldOffset(0, classificationOffset, 0);
    }
    static addCcsdsOemVers(builder, ccsdsOemVers) {
        builder.addFieldFloat64(1, ccsdsOemVers, 0.0);
    }
    static addCreationDate(builder, creationDateOffset) {
        builder.addFieldOffset(2, creationDateOffset, 0);
    }
    static addOriginator(builder, originatorOffset) {
        builder.addFieldOffset(3, originatorOffset, 0);
    }
    static addEphemerisDataBlock(builder, ephemerisDataBlockOffset) {
        builder.addFieldOffset(4, ephemerisDataBlockOffset, 0);
    }
    static createEphemerisDataBlockVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startEphemerisDataBlockVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endOEM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishOEMBuffer(builder, offset) {
        builder.finish(offset, '$OEM');
    }
    static finishSizePrefixedOEMBuffer(builder, offset) {
        builder.finish(offset, '$OEM', true);
    }
    static createOEM(builder, classificationOffset, ccsdsOemVers, creationDateOffset, originatorOffset, ephemerisDataBlockOffset) {
        OEM.startOEM(builder);
        OEM.addClassification(builder, classificationOffset);
        OEM.addCcsdsOemVers(builder, ccsdsOemVers);
        OEM.addCreationDate(builder, creationDateOffset);
        OEM.addOriginator(builder, originatorOffset);
        OEM.addEphemerisDataBlock(builder, ephemerisDataBlockOffset);
        return OEM.endOEM(builder);
    }
    unpack() {
        return new OEMT(this.classification(), this.ccsdsOemVers(), this.creationDate(), this.originator(), this.bb.createObjList(this.ephemerisDataBlock.bind(this), this.ephemerisDataBlockLength()));
    }
    unpackTo(_o) {
        _o.classification = this.classification();
        _o.ccsdsOemVers = this.ccsdsOemVers();
        _o.creationDate = this.creationDate();
        _o.originator = this.originator();
        _o.ephemerisDataBlock = this.bb.createObjList(this.ephemerisDataBlock.bind(this), this.ephemerisDataBlockLength());
    }
}
export class OEMT {
    constructor(classification = null, ccsdsOemVers = 0.0, creationDate = null, originator = null, ephemerisDataBlock = []) {
        this.classification = classification;
        this.ccsdsOemVers = ccsdsOemVers;
        this.creationDate = creationDate;
        this.originator = originator;
        this.ephemerisDataBlock = ephemerisDataBlock;
    }
    pack(builder) {
        const classification = (this.classification !== null ? builder.createString(this.classification) : 0);
        const creationDate = (this.creationDate !== null ? builder.createString(this.creationDate) : 0);
        const originator = (this.originator !== null ? builder.createString(this.originator) : 0);
        const ephemerisDataBlock = OEM.createEphemerisDataBlockVector(builder, builder.createObjectOffsetList(this.ephemerisDataBlock));
        return OEM.createOEM(builder, classification, this.ccsdsOemVers, creationDate, originator, ephemerisDataBlock);
    }
}
