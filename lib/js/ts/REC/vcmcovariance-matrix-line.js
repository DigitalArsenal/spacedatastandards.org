// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * VCM Covariance Matrix Line
 */
export class VCMCovarianceMatrixLine {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsVCMCovarianceMatrixLine(bb, obj) {
        return (obj || new VCMCovarianceMatrixLine()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsVCMCovarianceMatrixLine(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VCMCovarianceMatrixLine()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    cxX() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    cyX() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    czX() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    cxDotX() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startVCMCovarianceMatrixLine(builder) {
        builder.startObject(4);
    }
    static addCxX(builder, cxX) {
        builder.addFieldFloat64(0, cxX, 0.0);
    }
    static addCyX(builder, cyX) {
        builder.addFieldFloat64(1, cyX, 0.0);
    }
    static addCzX(builder, czX) {
        builder.addFieldFloat64(2, czX, 0.0);
    }
    static addCxDotX(builder, cxDotX) {
        builder.addFieldFloat64(3, cxDotX, 0.0);
    }
    static endVCMCovarianceMatrixLine(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createVCMCovarianceMatrixLine(builder, cxX, cyX, czX, cxDotX) {
        VCMCovarianceMatrixLine.startVCMCovarianceMatrixLine(builder);
        VCMCovarianceMatrixLine.addCxX(builder, cxX);
        VCMCovarianceMatrixLine.addCyX(builder, cyX);
        VCMCovarianceMatrixLine.addCzX(builder, czX);
        VCMCovarianceMatrixLine.addCxDotX(builder, cxDotX);
        return VCMCovarianceMatrixLine.endVCMCovarianceMatrixLine(builder);
    }
    unpack() {
        return new VCMCovarianceMatrixLineT(this.cxX(), this.cyX(), this.czX(), this.cxDotX());
    }
    unpackTo(_o) {
        _o.cxX = this.cxX();
        _o.cyX = this.cyX();
        _o.czX = this.czX();
        _o.cxDotX = this.cxDotX();
    }
}
export class VCMCovarianceMatrixLineT {
    constructor(cxX = 0.0, cyX = 0.0, czX = 0.0, cxDotX = 0.0) {
        this.cxX = cxX;
        this.cyX = cyX;
        this.czX = czX;
        this.cxDotX = cxDotX;
    }
    pack(builder) {
        return VCMCovarianceMatrixLine.createVCMCovarianceMatrixLine(builder, this.cxX, this.cyX, this.czX, this.cxDotX);
    }
}
