// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { ENGINE } from './engine.js';
/**
 * Stage Details
 */
export class STAGE {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSTAGE(bb, obj) {
        return (obj || new STAGE()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSTAGE(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new STAGE()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    /**
     * Stage Number
     */
    stageNumber() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Engines Used in This Stage
     */
    engines(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new ENGINE()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    enginesLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    fuelType(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Thrust Produced by This Stage (in Newtons)
     */
    thrust() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Duration of the Burn (in Seconds)
     */
    burnDuration() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startSTAGE(builder) {
        builder.startObject(5);
    }
    static addStageNumber(builder, stageNumber) {
        builder.addFieldInt32(0, stageNumber, 0);
    }
    static addEngines(builder, enginesOffset) {
        builder.addFieldOffset(1, enginesOffset, 0);
    }
    static createEnginesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startEnginesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addFuelType(builder, fuelTypeOffset) {
        builder.addFieldOffset(2, fuelTypeOffset, 0);
    }
    static addThrust(builder, thrust) {
        builder.addFieldFloat64(3, thrust, 0.0);
    }
    static addBurnDuration(builder, burnDuration) {
        builder.addFieldFloat64(4, burnDuration, 0.0);
    }
    static endSTAGE(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createSTAGE(builder, stageNumber, enginesOffset, fuelTypeOffset, thrust, burnDuration) {
        STAGE.startSTAGE(builder);
        STAGE.addStageNumber(builder, stageNumber);
        STAGE.addEngines(builder, enginesOffset);
        STAGE.addFuelType(builder, fuelTypeOffset);
        STAGE.addThrust(builder, thrust);
        STAGE.addBurnDuration(builder, burnDuration);
        return STAGE.endSTAGE(builder);
    }
    unpack() {
        return new STAGET(this.stageNumber(), this.bb.createObjList(this.engines.bind(this), this.enginesLength()), this.fuelType(), this.thrust(), this.burnDuration());
    }
    unpackTo(_o) {
        _o.stageNumber = this.stageNumber();
        _o.engines = this.bb.createObjList(this.engines.bind(this), this.enginesLength());
        _o.fuelType = this.fuelType();
        _o.thrust = this.thrust();
        _o.burnDuration = this.burnDuration();
    }
}
export class STAGET {
    constructor(stageNumber = 0, engines = [], fuelType = null, thrust = 0.0, burnDuration = 0.0) {
        this.stageNumber = stageNumber;
        this.engines = engines;
        this.fuelType = fuelType;
        this.thrust = thrust;
        this.burnDuration = burnDuration;
    }
    pack(builder) {
        const engines = STAGE.createEnginesVector(builder, builder.createObjectOffsetList(this.engines));
        const fuelType = (this.fuelType !== null ? builder.createString(this.fuelType) : 0);
        return STAGE.createSTAGE(builder, this.stageNumber, engines, fuelType, this.thrust, this.burnDuration);
    }
}
