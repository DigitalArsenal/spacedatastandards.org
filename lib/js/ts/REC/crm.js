// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * Collection Request Message
 */
export class CRM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCRM(bb, obj) {
        return (obj || new CRM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCRM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CRM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$CRM');
    }
    id(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    classification(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    type(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    idPlan(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Index number for records within a collection plan or schedule.
     */
    planIndex() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    taskId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    dwellId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    externalId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    idSensor(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    origSensorId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    obType(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    priority(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * The tasking category associated with this request.
     */
    taskCategory() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    suffix(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Boolean indicating that this collect request is UCT follow-up.
     */
    uctFollowUp() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    startTime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    endTime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Satellite/catalog number of the target on-orbit object for this request.
     */
    noradCatId() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    origObjectId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    taskGroup(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Inter-Range Operations Number.
     */
    iron() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    orbitRegime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * The minimum object (diameter) size, in meters, to be reported.
     */
    targetSize() {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The minimum Radar Cross-Section of the target, in m^2.
     */
    rcsMin() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The Radar Cross-Section of the target, in m^2.
     */
    rcs() {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The maximum Radar Cross-Section of the target, in m^2.
     */
    rcsMax() {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The minimum frequency of interest, in MHz.
     */
    freqMin() {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The estimated or expected emission frequency of the target, in MHz.
     */
    freq() {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The maximum frequency of interest, in MHz.
     */
    freqMax() {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    polarization(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 62);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).
     */
    visMagMin() {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The estimated or expected visual magnitude of the target, in Magnitudes (M).
     */
    visMag() {
        const offset = this.bb.__offset(this.bb_pos, 66);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).
     */
    visMagMax() {
        const offset = this.bb.__offset(this.bb_pos, 68);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    spectralModel(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * The fraction of solar energy reflected from target.
     */
    reflectance() {
        const offset = this.bb.__offset(this.bb_pos, 72);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The target object irradiance value.
     */
    irradiance() {
        const offset = this.bb.__offset(this.bb_pos, 74);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * For optical sensors, the requested number of frames to capture at each sensor step.
     */
    numFrames() {
        const offset = this.bb.__offset(this.bb_pos, 76);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * For optical sensors, the frame rate of the camera, in Hz.
     */
    frameRate() {
        const offset = this.bb.__offset(this.bb_pos, 78);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * For optical sensors, the integration time per camera frame, in milliseconds.
     */
    integrationTime() {
        const offset = this.bb.__offset(this.bb_pos, 80);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The number of requested tracks on the target.
     */
    numTracks() {
        const offset = this.bb.__offset(this.bb_pos, 82);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * The number of requested observations on the target.
     */
    numObs() {
        const offset = this.bb.__offset(this.bb_pos, 84);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * The duration of the collect request, in seconds.
     */
    duration() {
        const offset = this.bb.__offset(this.bb_pos, 86);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    srchPattern(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 88);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    scenario(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 90);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    idElset(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 92);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    idManifold(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 94);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    idStateVector(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 96);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    esId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 98);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    epoch(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 100);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * The average of the periapsis and apoapsis distances, in kilometers.
     */
    semiMajorAxis() {
        const offset = this.bb.__offset(this.bb_pos, 102);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The orbital eccentricity of an astronomical object.
     */
    eccentricity() {
        const offset = this.bb.__offset(this.bb_pos, 104);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The angle, in degrees, between the equator and the orbit plane.
     */
    inclination() {
        const offset = this.bb.__offset(this.bb_pos, 106);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Right ascension of the ascending node, in degrees.
     */
    raan() {
        const offset = this.bb.__offset(this.bb_pos, 108);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The argument of perigee, in degrees.
     */
    argOfPerigee() {
        const offset = this.bb.__offset(this.bb_pos, 110);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The mean anomaly defines the angular position, in degrees, of the object on its orbital path.
     */
    meanAnomaly() {
        const offset = this.bb.__offset(this.bb_pos, 112);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The expected or directed right ascension angle, in degrees.
     */
    ra() {
        const offset = this.bb.__offset(this.bb_pos, 114);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The expected or directed declination angle, in degrees.
     */
    dec() {
        const offset = this.bb.__offset(this.bb_pos, 116);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The expected or directed azimuth angle, in degrees.
     */
    az() {
        const offset = this.bb.__offset(this.bb_pos, 118);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The expected or directed elevation angle, in degrees.
     */
    el() {
        const offset = this.bb.__offset(this.bb_pos, 120);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The expected acquisition range or defined center range, in km.
     */
    range() {
        const offset = this.bb.__offset(this.bb_pos, 122);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The extent of the azimuth angle, in degrees, from center azimuth.
     */
    extentAz() {
        const offset = this.bb.__offset(this.bb_pos, 124);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The extent of the elevation angle, in degrees, from center elevation.
     */
    extentEl() {
        const offset = this.bb.__offset(this.bb_pos, 126);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The extent of the range, in km, from center range.
     */
    extentRange() {
        const offset = this.bb.__offset(this.bb_pos, 128);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * WGS-84 latitude, in degrees.
     */
    lat() {
        const offset = this.bb.__offset(this.bb_pos, 130);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * WGS-84 longitude, in degrees.
     */
    lon() {
        const offset = this.bb.__offset(this.bb_pos, 132);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Height above WGS-84 ellipsoid (HAE), in kilometers.
     */
    alt() {
        const offset = this.bb.__offset(this.bb_pos, 134);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The stopping WGS-84 latitude of a volume definition, in degrees.
     */
    stopLat() {
        const offset = this.bb.__offset(this.bb_pos, 136);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The stopping WGS-84 longitude of a volume definition, in degrees.
     */
    stopLon() {
        const offset = this.bb.__offset(this.bb_pos, 138);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The stopping HAE WGS-84 height above ellipsoid (HAE), in kilometers.
     */
    stopAlt() {
        const offset = this.bb.__offset(this.bb_pos, 140);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The maximum inclination, in degrees, to be used in search operations.
     */
    srchInc() {
        const offset = this.bb.__offset(this.bb_pos, 142);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The angular distance, in degrees, in the sensor-x direction from scan center.
     */
    xAngle() {
        const offset = this.bb.__offset(this.bb_pos, 144);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The angular distance, in degrees, in the sensor-y direction from scan center.
     */
    yAngle() {
        const offset = this.bb.__offset(this.bb_pos, 146);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.
     */
    orientAngle() {
        const offset = this.bb.__offset(this.bb_pos, 148);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    customer(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 150);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    notes(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 152);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    source(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 154);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    origin(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 156);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    dataMode(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 158);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startCRM(builder) {
        builder.startObject(78);
    }
    static addId(builder, idOffset) {
        builder.addFieldOffset(0, idOffset, 0);
    }
    static addClassification(builder, classificationOffset) {
        builder.addFieldOffset(1, classificationOffset, 0);
    }
    static addType(builder, typeOffset) {
        builder.addFieldOffset(2, typeOffset, 0);
    }
    static addIdPlan(builder, idPlanOffset) {
        builder.addFieldOffset(3, idPlanOffset, 0);
    }
    static addPlanIndex(builder, planIndex) {
        builder.addFieldInt32(4, planIndex, 0);
    }
    static addTaskId(builder, taskIdOffset) {
        builder.addFieldOffset(5, taskIdOffset, 0);
    }
    static addDwellId(builder, dwellIdOffset) {
        builder.addFieldOffset(6, dwellIdOffset, 0);
    }
    static addExternalId(builder, externalIdOffset) {
        builder.addFieldOffset(7, externalIdOffset, 0);
    }
    static addIdSensor(builder, idSensorOffset) {
        builder.addFieldOffset(8, idSensorOffset, 0);
    }
    static addOrigSensorId(builder, origSensorIdOffset) {
        builder.addFieldOffset(9, origSensorIdOffset, 0);
    }
    static addObType(builder, obTypeOffset) {
        builder.addFieldOffset(10, obTypeOffset, 0);
    }
    static addPriority(builder, priorityOffset) {
        builder.addFieldOffset(11, priorityOffset, 0);
    }
    static addTaskCategory(builder, taskCategory) {
        builder.addFieldInt32(12, taskCategory, 0);
    }
    static addSuffix(builder, suffixOffset) {
        builder.addFieldOffset(13, suffixOffset, 0);
    }
    static addUctFollowUp(builder, uctFollowUp) {
        builder.addFieldInt8(14, +uctFollowUp, +false);
    }
    static addStartTime(builder, startTimeOffset) {
        builder.addFieldOffset(15, startTimeOffset, 0);
    }
    static addEndTime(builder, endTimeOffset) {
        builder.addFieldOffset(16, endTimeOffset, 0);
    }
    static addNoradCatId(builder, noradCatId) {
        builder.addFieldInt32(17, noradCatId, 0);
    }
    static addOrigObjectId(builder, origObjectIdOffset) {
        builder.addFieldOffset(18, origObjectIdOffset, 0);
    }
    static addTaskGroup(builder, taskGroupOffset) {
        builder.addFieldOffset(19, taskGroupOffset, 0);
    }
    static addIron(builder, iron) {
        builder.addFieldInt32(20, iron, 0);
    }
    static addOrbitRegime(builder, orbitRegimeOffset) {
        builder.addFieldOffset(21, orbitRegimeOffset, 0);
    }
    static addTargetSize(builder, targetSize) {
        builder.addFieldFloat64(22, targetSize, 0.0);
    }
    static addRcsMin(builder, rcsMin) {
        builder.addFieldFloat64(23, rcsMin, 0.0);
    }
    static addRcs(builder, rcs) {
        builder.addFieldFloat64(24, rcs, 0.0);
    }
    static addRcsMax(builder, rcsMax) {
        builder.addFieldFloat64(25, rcsMax, 0.0);
    }
    static addFreqMin(builder, freqMin) {
        builder.addFieldFloat64(26, freqMin, 0.0);
    }
    static addFreq(builder, freq) {
        builder.addFieldFloat64(27, freq, 0.0);
    }
    static addFreqMax(builder, freqMax) {
        builder.addFieldFloat64(28, freqMax, 0.0);
    }
    static addPolarization(builder, polarizationOffset) {
        builder.addFieldOffset(29, polarizationOffset, 0);
    }
    static addVisMagMin(builder, visMagMin) {
        builder.addFieldFloat64(30, visMagMin, 0.0);
    }
    static addVisMag(builder, visMag) {
        builder.addFieldFloat64(31, visMag, 0.0);
    }
    static addVisMagMax(builder, visMagMax) {
        builder.addFieldFloat64(32, visMagMax, 0.0);
    }
    static addSpectralModel(builder, spectralModelOffset) {
        builder.addFieldOffset(33, spectralModelOffset, 0);
    }
    static addReflectance(builder, reflectance) {
        builder.addFieldFloat64(34, reflectance, 0.0);
    }
    static addIrradiance(builder, irradiance) {
        builder.addFieldFloat64(35, irradiance, 0.0);
    }
    static addNumFrames(builder, numFrames) {
        builder.addFieldInt32(36, numFrames, 0);
    }
    static addFrameRate(builder, frameRate) {
        builder.addFieldFloat64(37, frameRate, 0.0);
    }
    static addIntegrationTime(builder, integrationTime) {
        builder.addFieldFloat64(38, integrationTime, 0.0);
    }
    static addNumTracks(builder, numTracks) {
        builder.addFieldInt32(39, numTracks, 0);
    }
    static addNumObs(builder, numObs) {
        builder.addFieldInt32(40, numObs, 0);
    }
    static addDuration(builder, duration) {
        builder.addFieldInt32(41, duration, 0);
    }
    static addSrchPattern(builder, srchPatternOffset) {
        builder.addFieldOffset(42, srchPatternOffset, 0);
    }
    static addScenario(builder, scenarioOffset) {
        builder.addFieldOffset(43, scenarioOffset, 0);
    }
    static addIdElset(builder, idElsetOffset) {
        builder.addFieldOffset(44, idElsetOffset, 0);
    }
    static addIdManifold(builder, idManifoldOffset) {
        builder.addFieldOffset(45, idManifoldOffset, 0);
    }
    static addIdStateVector(builder, idStateVectorOffset) {
        builder.addFieldOffset(46, idStateVectorOffset, 0);
    }
    static addEsId(builder, esIdOffset) {
        builder.addFieldOffset(47, esIdOffset, 0);
    }
    static addEpoch(builder, epochOffset) {
        builder.addFieldOffset(48, epochOffset, 0);
    }
    static addSemiMajorAxis(builder, semiMajorAxis) {
        builder.addFieldFloat64(49, semiMajorAxis, 0.0);
    }
    static addEccentricity(builder, eccentricity) {
        builder.addFieldFloat64(50, eccentricity, 0.0);
    }
    static addInclination(builder, inclination) {
        builder.addFieldFloat64(51, inclination, 0.0);
    }
    static addRaan(builder, raan) {
        builder.addFieldFloat64(52, raan, 0.0);
    }
    static addArgOfPerigee(builder, argOfPerigee) {
        builder.addFieldFloat64(53, argOfPerigee, 0.0);
    }
    static addMeanAnomaly(builder, meanAnomaly) {
        builder.addFieldFloat64(54, meanAnomaly, 0.0);
    }
    static addRa(builder, ra) {
        builder.addFieldFloat64(55, ra, 0.0);
    }
    static addDec(builder, dec) {
        builder.addFieldFloat64(56, dec, 0.0);
    }
    static addAz(builder, az) {
        builder.addFieldFloat64(57, az, 0.0);
    }
    static addEl(builder, el) {
        builder.addFieldFloat64(58, el, 0.0);
    }
    static addRange(builder, range) {
        builder.addFieldFloat64(59, range, 0.0);
    }
    static addExtentAz(builder, extentAz) {
        builder.addFieldFloat64(60, extentAz, 0.0);
    }
    static addExtentEl(builder, extentEl) {
        builder.addFieldFloat64(61, extentEl, 0.0);
    }
    static addExtentRange(builder, extentRange) {
        builder.addFieldFloat64(62, extentRange, 0.0);
    }
    static addLat(builder, lat) {
        builder.addFieldFloat64(63, lat, 0.0);
    }
    static addLon(builder, lon) {
        builder.addFieldFloat64(64, lon, 0.0);
    }
    static addAlt(builder, alt) {
        builder.addFieldFloat64(65, alt, 0.0);
    }
    static addStopLat(builder, stopLat) {
        builder.addFieldFloat64(66, stopLat, 0.0);
    }
    static addStopLon(builder, stopLon) {
        builder.addFieldFloat64(67, stopLon, 0.0);
    }
    static addStopAlt(builder, stopAlt) {
        builder.addFieldFloat64(68, stopAlt, 0.0);
    }
    static addSrchInc(builder, srchInc) {
        builder.addFieldFloat64(69, srchInc, 0.0);
    }
    static addXAngle(builder, xAngle) {
        builder.addFieldFloat64(70, xAngle, 0.0);
    }
    static addYAngle(builder, yAngle) {
        builder.addFieldFloat64(71, yAngle, 0.0);
    }
    static addOrientAngle(builder, orientAngle) {
        builder.addFieldFloat64(72, orientAngle, 0.0);
    }
    static addCustomer(builder, customerOffset) {
        builder.addFieldOffset(73, customerOffset, 0);
    }
    static addNotes(builder, notesOffset) {
        builder.addFieldOffset(74, notesOffset, 0);
    }
    static addSource(builder, sourceOffset) {
        builder.addFieldOffset(75, sourceOffset, 0);
    }
    static addOrigin(builder, originOffset) {
        builder.addFieldOffset(76, originOffset, 0);
    }
    static addDataMode(builder, dataModeOffset) {
        builder.addFieldOffset(77, dataModeOffset, 0);
    }
    static endCRM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishCRMBuffer(builder, offset) {
        builder.finish(offset, '$CRM');
    }
    static finishSizePrefixedCRMBuffer(builder, offset) {
        builder.finish(offset, '$CRM', true);
    }
    static createCRM(builder, idOffset, classificationOffset, typeOffset, idPlanOffset, planIndex, taskIdOffset, dwellIdOffset, externalIdOffset, idSensorOffset, origSensorIdOffset, obTypeOffset, priorityOffset, taskCategory, suffixOffset, uctFollowUp, startTimeOffset, endTimeOffset, noradCatId, origObjectIdOffset, taskGroupOffset, iron, orbitRegimeOffset, targetSize, rcsMin, rcs, rcsMax, freqMin, freq, freqMax, polarizationOffset, visMagMin, visMag, visMagMax, spectralModelOffset, reflectance, irradiance, numFrames, frameRate, integrationTime, numTracks, numObs, duration, srchPatternOffset, scenarioOffset, idElsetOffset, idManifoldOffset, idStateVectorOffset, esIdOffset, epochOffset, semiMajorAxis, eccentricity, inclination, raan, argOfPerigee, meanAnomaly, ra, dec, az, el, range, extentAz, extentEl, extentRange, lat, lon, alt, stopLat, stopLon, stopAlt, srchInc, xAngle, yAngle, orientAngle, customerOffset, notesOffset, sourceOffset, originOffset, dataModeOffset) {
        CRM.startCRM(builder);
        CRM.addId(builder, idOffset);
        CRM.addClassification(builder, classificationOffset);
        CRM.addType(builder, typeOffset);
        CRM.addIdPlan(builder, idPlanOffset);
        CRM.addPlanIndex(builder, planIndex);
        CRM.addTaskId(builder, taskIdOffset);
        CRM.addDwellId(builder, dwellIdOffset);
        CRM.addExternalId(builder, externalIdOffset);
        CRM.addIdSensor(builder, idSensorOffset);
        CRM.addOrigSensorId(builder, origSensorIdOffset);
        CRM.addObType(builder, obTypeOffset);
        CRM.addPriority(builder, priorityOffset);
        CRM.addTaskCategory(builder, taskCategory);
        CRM.addSuffix(builder, suffixOffset);
        CRM.addUctFollowUp(builder, uctFollowUp);
        CRM.addStartTime(builder, startTimeOffset);
        CRM.addEndTime(builder, endTimeOffset);
        CRM.addNoradCatId(builder, noradCatId);
        CRM.addOrigObjectId(builder, origObjectIdOffset);
        CRM.addTaskGroup(builder, taskGroupOffset);
        CRM.addIron(builder, iron);
        CRM.addOrbitRegime(builder, orbitRegimeOffset);
        CRM.addTargetSize(builder, targetSize);
        CRM.addRcsMin(builder, rcsMin);
        CRM.addRcs(builder, rcs);
        CRM.addRcsMax(builder, rcsMax);
        CRM.addFreqMin(builder, freqMin);
        CRM.addFreq(builder, freq);
        CRM.addFreqMax(builder, freqMax);
        CRM.addPolarization(builder, polarizationOffset);
        CRM.addVisMagMin(builder, visMagMin);
        CRM.addVisMag(builder, visMag);
        CRM.addVisMagMax(builder, visMagMax);
        CRM.addSpectralModel(builder, spectralModelOffset);
        CRM.addReflectance(builder, reflectance);
        CRM.addIrradiance(builder, irradiance);
        CRM.addNumFrames(builder, numFrames);
        CRM.addFrameRate(builder, frameRate);
        CRM.addIntegrationTime(builder, integrationTime);
        CRM.addNumTracks(builder, numTracks);
        CRM.addNumObs(builder, numObs);
        CRM.addDuration(builder, duration);
        CRM.addSrchPattern(builder, srchPatternOffset);
        CRM.addScenario(builder, scenarioOffset);
        CRM.addIdElset(builder, idElsetOffset);
        CRM.addIdManifold(builder, idManifoldOffset);
        CRM.addIdStateVector(builder, idStateVectorOffset);
        CRM.addEsId(builder, esIdOffset);
        CRM.addEpoch(builder, epochOffset);
        CRM.addSemiMajorAxis(builder, semiMajorAxis);
        CRM.addEccentricity(builder, eccentricity);
        CRM.addInclination(builder, inclination);
        CRM.addRaan(builder, raan);
        CRM.addArgOfPerigee(builder, argOfPerigee);
        CRM.addMeanAnomaly(builder, meanAnomaly);
        CRM.addRa(builder, ra);
        CRM.addDec(builder, dec);
        CRM.addAz(builder, az);
        CRM.addEl(builder, el);
        CRM.addRange(builder, range);
        CRM.addExtentAz(builder, extentAz);
        CRM.addExtentEl(builder, extentEl);
        CRM.addExtentRange(builder, extentRange);
        CRM.addLat(builder, lat);
        CRM.addLon(builder, lon);
        CRM.addAlt(builder, alt);
        CRM.addStopLat(builder, stopLat);
        CRM.addStopLon(builder, stopLon);
        CRM.addStopAlt(builder, stopAlt);
        CRM.addSrchInc(builder, srchInc);
        CRM.addXAngle(builder, xAngle);
        CRM.addYAngle(builder, yAngle);
        CRM.addOrientAngle(builder, orientAngle);
        CRM.addCustomer(builder, customerOffset);
        CRM.addNotes(builder, notesOffset);
        CRM.addSource(builder, sourceOffset);
        CRM.addOrigin(builder, originOffset);
        CRM.addDataMode(builder, dataModeOffset);
        return CRM.endCRM(builder);
    }
    unpack() {
        return new CRMT(this.id(), this.classification(), this.type(), this.idPlan(), this.planIndex(), this.taskId(), this.dwellId(), this.externalId(), this.idSensor(), this.origSensorId(), this.obType(), this.priority(), this.taskCategory(), this.suffix(), this.uctFollowUp(), this.startTime(), this.endTime(), this.noradCatId(), this.origObjectId(), this.taskGroup(), this.iron(), this.orbitRegime(), this.targetSize(), this.rcsMin(), this.rcs(), this.rcsMax(), this.freqMin(), this.freq(), this.freqMax(), this.polarization(), this.visMagMin(), this.visMag(), this.visMagMax(), this.spectralModel(), this.reflectance(), this.irradiance(), this.numFrames(), this.frameRate(), this.integrationTime(), this.numTracks(), this.numObs(), this.duration(), this.srchPattern(), this.scenario(), this.idElset(), this.idManifold(), this.idStateVector(), this.esId(), this.epoch(), this.semiMajorAxis(), this.eccentricity(), this.inclination(), this.raan(), this.argOfPerigee(), this.meanAnomaly(), this.ra(), this.dec(), this.az(), this.el(), this.range(), this.extentAz(), this.extentEl(), this.extentRange(), this.lat(), this.lon(), this.alt(), this.stopLat(), this.stopLon(), this.stopAlt(), this.srchInc(), this.xAngle(), this.yAngle(), this.orientAngle(), this.customer(), this.notes(), this.source(), this.origin(), this.dataMode());
    }
    unpackTo(_o) {
        _o.id = this.id();
        _o.classification = this.classification();
        _o.type = this.type();
        _o.idPlan = this.idPlan();
        _o.planIndex = this.planIndex();
        _o.taskId = this.taskId();
        _o.dwellId = this.dwellId();
        _o.externalId = this.externalId();
        _o.idSensor = this.idSensor();
        _o.origSensorId = this.origSensorId();
        _o.obType = this.obType();
        _o.priority = this.priority();
        _o.taskCategory = this.taskCategory();
        _o.suffix = this.suffix();
        _o.uctFollowUp = this.uctFollowUp();
        _o.startTime = this.startTime();
        _o.endTime = this.endTime();
        _o.noradCatId = this.noradCatId();
        _o.origObjectId = this.origObjectId();
        _o.taskGroup = this.taskGroup();
        _o.iron = this.iron();
        _o.orbitRegime = this.orbitRegime();
        _o.targetSize = this.targetSize();
        _o.rcsMin = this.rcsMin();
        _o.rcs = this.rcs();
        _o.rcsMax = this.rcsMax();
        _o.freqMin = this.freqMin();
        _o.freq = this.freq();
        _o.freqMax = this.freqMax();
        _o.polarization = this.polarization();
        _o.visMagMin = this.visMagMin();
        _o.visMag = this.visMag();
        _o.visMagMax = this.visMagMax();
        _o.spectralModel = this.spectralModel();
        _o.reflectance = this.reflectance();
        _o.irradiance = this.irradiance();
        _o.numFrames = this.numFrames();
        _o.frameRate = this.frameRate();
        _o.integrationTime = this.integrationTime();
        _o.numTracks = this.numTracks();
        _o.numObs = this.numObs();
        _o.duration = this.duration();
        _o.srchPattern = this.srchPattern();
        _o.scenario = this.scenario();
        _o.idElset = this.idElset();
        _o.idManifold = this.idManifold();
        _o.idStateVector = this.idStateVector();
        _o.esId = this.esId();
        _o.epoch = this.epoch();
        _o.semiMajorAxis = this.semiMajorAxis();
        _o.eccentricity = this.eccentricity();
        _o.inclination = this.inclination();
        _o.raan = this.raan();
        _o.argOfPerigee = this.argOfPerigee();
        _o.meanAnomaly = this.meanAnomaly();
        _o.ra = this.ra();
        _o.dec = this.dec();
        _o.az = this.az();
        _o.el = this.el();
        _o.range = this.range();
        _o.extentAz = this.extentAz();
        _o.extentEl = this.extentEl();
        _o.extentRange = this.extentRange();
        _o.lat = this.lat();
        _o.lon = this.lon();
        _o.alt = this.alt();
        _o.stopLat = this.stopLat();
        _o.stopLon = this.stopLon();
        _o.stopAlt = this.stopAlt();
        _o.srchInc = this.srchInc();
        _o.xAngle = this.xAngle();
        _o.yAngle = this.yAngle();
        _o.orientAngle = this.orientAngle();
        _o.customer = this.customer();
        _o.notes = this.notes();
        _o.source = this.source();
        _o.origin = this.origin();
        _o.dataMode = this.dataMode();
    }
}
export class CRMT {
    constructor(id = null, classification = null, type = null, idPlan = null, planIndex = 0, taskId = null, dwellId = null, externalId = null, idSensor = null, origSensorId = null, obType = null, priority = null, taskCategory = 0, suffix = null, uctFollowUp = false, startTime = null, endTime = null, noradCatId = 0, origObjectId = null, taskGroup = null, iron = 0, orbitRegime = null, targetSize = 0.0, rcsMin = 0.0, rcs = 0.0, rcsMax = 0.0, freqMin = 0.0, freq = 0.0, freqMax = 0.0, polarization = null, visMagMin = 0.0, visMag = 0.0, visMagMax = 0.0, spectralModel = null, reflectance = 0.0, irradiance = 0.0, numFrames = 0, frameRate = 0.0, integrationTime = 0.0, numTracks = 0, numObs = 0, duration = 0, srchPattern = null, scenario = null, idElset = null, idManifold = null, idStateVector = null, esId = null, epoch = null, semiMajorAxis = 0.0, eccentricity = 0.0, inclination = 0.0, raan = 0.0, argOfPerigee = 0.0, meanAnomaly = 0.0, ra = 0.0, dec = 0.0, az = 0.0, el = 0.0, range = 0.0, extentAz = 0.0, extentEl = 0.0, extentRange = 0.0, lat = 0.0, lon = 0.0, alt = 0.0, stopLat = 0.0, stopLon = 0.0, stopAlt = 0.0, srchInc = 0.0, xAngle = 0.0, yAngle = 0.0, orientAngle = 0.0, customer = null, notes = null, source = null, origin = null, dataMode = null) {
        this.id = id;
        this.classification = classification;
        this.type = type;
        this.idPlan = idPlan;
        this.planIndex = planIndex;
        this.taskId = taskId;
        this.dwellId = dwellId;
        this.externalId = externalId;
        this.idSensor = idSensor;
        this.origSensorId = origSensorId;
        this.obType = obType;
        this.priority = priority;
        this.taskCategory = taskCategory;
        this.suffix = suffix;
        this.uctFollowUp = uctFollowUp;
        this.startTime = startTime;
        this.endTime = endTime;
        this.noradCatId = noradCatId;
        this.origObjectId = origObjectId;
        this.taskGroup = taskGroup;
        this.iron = iron;
        this.orbitRegime = orbitRegime;
        this.targetSize = targetSize;
        this.rcsMin = rcsMin;
        this.rcs = rcs;
        this.rcsMax = rcsMax;
        this.freqMin = freqMin;
        this.freq = freq;
        this.freqMax = freqMax;
        this.polarization = polarization;
        this.visMagMin = visMagMin;
        this.visMag = visMag;
        this.visMagMax = visMagMax;
        this.spectralModel = spectralModel;
        this.reflectance = reflectance;
        this.irradiance = irradiance;
        this.numFrames = numFrames;
        this.frameRate = frameRate;
        this.integrationTime = integrationTime;
        this.numTracks = numTracks;
        this.numObs = numObs;
        this.duration = duration;
        this.srchPattern = srchPattern;
        this.scenario = scenario;
        this.idElset = idElset;
        this.idManifold = idManifold;
        this.idStateVector = idStateVector;
        this.esId = esId;
        this.epoch = epoch;
        this.semiMajorAxis = semiMajorAxis;
        this.eccentricity = eccentricity;
        this.inclination = inclination;
        this.raan = raan;
        this.argOfPerigee = argOfPerigee;
        this.meanAnomaly = meanAnomaly;
        this.ra = ra;
        this.dec = dec;
        this.az = az;
        this.el = el;
        this.range = range;
        this.extentAz = extentAz;
        this.extentEl = extentEl;
        this.extentRange = extentRange;
        this.lat = lat;
        this.lon = lon;
        this.alt = alt;
        this.stopLat = stopLat;
        this.stopLon = stopLon;
        this.stopAlt = stopAlt;
        this.srchInc = srchInc;
        this.xAngle = xAngle;
        this.yAngle = yAngle;
        this.orientAngle = orientAngle;
        this.customer = customer;
        this.notes = notes;
        this.source = source;
        this.origin = origin;
        this.dataMode = dataMode;
    }
    pack(builder) {
        const id = (this.id !== null ? builder.createString(this.id) : 0);
        const classification = (this.classification !== null ? builder.createString(this.classification) : 0);
        const type = (this.type !== null ? builder.createString(this.type) : 0);
        const idPlan = (this.idPlan !== null ? builder.createString(this.idPlan) : 0);
        const taskId = (this.taskId !== null ? builder.createString(this.taskId) : 0);
        const dwellId = (this.dwellId !== null ? builder.createString(this.dwellId) : 0);
        const externalId = (this.externalId !== null ? builder.createString(this.externalId) : 0);
        const idSensor = (this.idSensor !== null ? builder.createString(this.idSensor) : 0);
        const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId) : 0);
        const obType = (this.obType !== null ? builder.createString(this.obType) : 0);
        const priority = (this.priority !== null ? builder.createString(this.priority) : 0);
        const suffix = (this.suffix !== null ? builder.createString(this.suffix) : 0);
        const startTime = (this.startTime !== null ? builder.createString(this.startTime) : 0);
        const endTime = (this.endTime !== null ? builder.createString(this.endTime) : 0);
        const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId) : 0);
        const taskGroup = (this.taskGroup !== null ? builder.createString(this.taskGroup) : 0);
        const orbitRegime = (this.orbitRegime !== null ? builder.createString(this.orbitRegime) : 0);
        const polarization = (this.polarization !== null ? builder.createString(this.polarization) : 0);
        const spectralModel = (this.spectralModel !== null ? builder.createString(this.spectralModel) : 0);
        const srchPattern = (this.srchPattern !== null ? builder.createString(this.srchPattern) : 0);
        const scenario = (this.scenario !== null ? builder.createString(this.scenario) : 0);
        const idElset = (this.idElset !== null ? builder.createString(this.idElset) : 0);
        const idManifold = (this.idManifold !== null ? builder.createString(this.idManifold) : 0);
        const idStateVector = (this.idStateVector !== null ? builder.createString(this.idStateVector) : 0);
        const esId = (this.esId !== null ? builder.createString(this.esId) : 0);
        const epoch = (this.epoch !== null ? builder.createString(this.epoch) : 0);
        const customer = (this.customer !== null ? builder.createString(this.customer) : 0);
        const notes = (this.notes !== null ? builder.createString(this.notes) : 0);
        const source = (this.source !== null ? builder.createString(this.source) : 0);
        const origin = (this.origin !== null ? builder.createString(this.origin) : 0);
        const dataMode = (this.dataMode !== null ? builder.createString(this.dataMode) : 0);
        return CRM.createCRM(builder, id, classification, type, idPlan, this.planIndex, taskId, dwellId, externalId, idSensor, origSensorId, obType, priority, this.taskCategory, suffix, this.uctFollowUp, startTime, endTime, this.noradCatId, origObjectId, taskGroup, this.iron, orbitRegime, this.targetSize, this.rcsMin, this.rcs, this.rcsMax, this.freqMin, this.freq, this.freqMax, polarization, this.visMagMin, this.visMag, this.visMagMax, spectralModel, this.reflectance, this.irradiance, this.numFrames, this.frameRate, this.integrationTime, this.numTracks, this.numObs, this.duration, srchPattern, scenario, idElset, idManifold, idStateVector, esId, epoch, this.semiMajorAxis, this.eccentricity, this.inclination, this.raan, this.argOfPerigee, this.meanAnomaly, this.ra, this.dec, this.az, this.el, this.range, this.extentAz, this.extentEl, this.extentRange, this.lat, this.lon, this.alt, this.stopLat, this.stopLon, this.stopAlt, this.srchInc, this.xAngle, this.yAngle, this.orientAngle, customer, notes, source, origin, dataMode);
    }
}
