// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * Geometry table with information about geometric properties
 */
export class Geometry {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsGeometry(bb, obj) {
        return (obj || new Geometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsGeometry(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Geometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    geometryType(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Coordinates of the geometry
     */
    coordinates(index) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    coordinatesLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    coordinatesArray() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startGeometry(builder) {
        builder.startObject(2);
    }
    static addGeometryType(builder, geometryTypeOffset) {
        builder.addFieldOffset(0, geometryTypeOffset, 0);
    }
    static addCoordinates(builder, coordinatesOffset) {
        builder.addFieldOffset(1, coordinatesOffset, 0);
    }
    static createCoordinatesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    }
    static startCoordinatesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endGeometry(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createGeometry(builder, geometryTypeOffset, coordinatesOffset) {
        Geometry.startGeometry(builder);
        Geometry.addGeometryType(builder, geometryTypeOffset);
        Geometry.addCoordinates(builder, coordinatesOffset);
        return Geometry.endGeometry(builder);
    }
    unpack() {
        return new GeometryT(this.geometryType(), this.bb.createScalarList(this.coordinates.bind(this), this.coordinatesLength()));
    }
    unpackTo(_o) {
        _o.geometryType = this.geometryType();
        _o.coordinates = this.bb.createScalarList(this.coordinates.bind(this), this.coordinatesLength());
    }
}
export class GeometryT {
    constructor(geometryType = null, coordinates = []) {
        this.geometryType = geometryType;
        this.coordinates = coordinates;
    }
    pack(builder) {
        const geometryType = (this.geometryType !== null ? builder.createString(this.geometryType) : 0);
        const coordinates = Geometry.createCoordinatesVector(builder, this.coordinates);
        return Geometry.createGeometry(builder, geometryType, coordinates);
    }
}
