// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { Score } from './score.js';
/**
 * Hypothesis Message
 */
export class HYP {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsHYP(bb, obj) {
        return (obj || new HYP()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsHYP(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new HYP()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$HYP');
    }
    catIds(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    catIdsLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    sitIds(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    sitIdsLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    name(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    category(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    rowIndicators(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    rowIndicatorsLength() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    colIndicators(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    colIndicatorsLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Matrix data as a boolean array in row major format; if overflow, adds additional rows
     */
    matrix(index) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? !!this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : false;
    }
    matrixLength() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    matrixArray() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Scores for objects
     */
    score(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new Score()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    scoreLength() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    analysisMethod(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    eventStartTime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    eventEndTime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startHYP(builder) {
        builder.startObject(11);
    }
    static addCatIds(builder, catIdsOffset) {
        builder.addFieldOffset(0, catIdsOffset, 0);
    }
    static createCatIdsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startCatIdsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addSitIds(builder, sitIdsOffset) {
        builder.addFieldOffset(1, sitIdsOffset, 0);
    }
    static createSitIdsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startSitIdsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addName(builder, nameOffset) {
        builder.addFieldOffset(2, nameOffset, 0);
    }
    static addCategory(builder, categoryOffset) {
        builder.addFieldOffset(3, categoryOffset, 0);
    }
    static addRowIndicators(builder, rowIndicatorsOffset) {
        builder.addFieldOffset(4, rowIndicatorsOffset, 0);
    }
    static createRowIndicatorsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startRowIndicatorsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addColIndicators(builder, colIndicatorsOffset) {
        builder.addFieldOffset(5, colIndicatorsOffset, 0);
    }
    static createColIndicatorsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startColIndicatorsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addMatrix(builder, matrixOffset) {
        builder.addFieldOffset(6, matrixOffset, 0);
    }
    static createMatrixVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(+data[i]);
        }
        return builder.endVector();
    }
    static startMatrixVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addScore(builder, scoreOffset) {
        builder.addFieldOffset(7, scoreOffset, 0);
    }
    static createScoreVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startScoreVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addAnalysisMethod(builder, analysisMethodOffset) {
        builder.addFieldOffset(8, analysisMethodOffset, 0);
    }
    static addEventStartTime(builder, eventStartTimeOffset) {
        builder.addFieldOffset(9, eventStartTimeOffset, 0);
    }
    static addEventEndTime(builder, eventEndTimeOffset) {
        builder.addFieldOffset(10, eventEndTimeOffset, 0);
    }
    static endHYP(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishHYPBuffer(builder, offset) {
        builder.finish(offset, '$HYP');
    }
    static finishSizePrefixedHYPBuffer(builder, offset) {
        builder.finish(offset, '$HYP', true);
    }
    static createHYP(builder, catIdsOffset, sitIdsOffset, nameOffset, categoryOffset, rowIndicatorsOffset, colIndicatorsOffset, matrixOffset, scoreOffset, analysisMethodOffset, eventStartTimeOffset, eventEndTimeOffset) {
        HYP.startHYP(builder);
        HYP.addCatIds(builder, catIdsOffset);
        HYP.addSitIds(builder, sitIdsOffset);
        HYP.addName(builder, nameOffset);
        HYP.addCategory(builder, categoryOffset);
        HYP.addRowIndicators(builder, rowIndicatorsOffset);
        HYP.addColIndicators(builder, colIndicatorsOffset);
        HYP.addMatrix(builder, matrixOffset);
        HYP.addScore(builder, scoreOffset);
        HYP.addAnalysisMethod(builder, analysisMethodOffset);
        HYP.addEventStartTime(builder, eventStartTimeOffset);
        HYP.addEventEndTime(builder, eventEndTimeOffset);
        return HYP.endHYP(builder);
    }
    unpack() {
        return new HYPT(this.bb.createScalarList(this.catIds.bind(this), this.catIdsLength()), this.bb.createScalarList(this.sitIds.bind(this), this.sitIdsLength()), this.name(), this.category(), this.bb.createScalarList(this.rowIndicators.bind(this), this.rowIndicatorsLength()), this.bb.createScalarList(this.colIndicators.bind(this), this.colIndicatorsLength()), this.bb.createScalarList(this.matrix.bind(this), this.matrixLength()), this.bb.createObjList(this.score.bind(this), this.scoreLength()), this.analysisMethod(), this.eventStartTime(), this.eventEndTime());
    }
    unpackTo(_o) {
        _o.catIds = this.bb.createScalarList(this.catIds.bind(this), this.catIdsLength());
        _o.sitIds = this.bb.createScalarList(this.sitIds.bind(this), this.sitIdsLength());
        _o.name = this.name();
        _o.category = this.category();
        _o.rowIndicators = this.bb.createScalarList(this.rowIndicators.bind(this), this.rowIndicatorsLength());
        _o.colIndicators = this.bb.createScalarList(this.colIndicators.bind(this), this.colIndicatorsLength());
        _o.matrix = this.bb.createScalarList(this.matrix.bind(this), this.matrixLength());
        _o.score = this.bb.createObjList(this.score.bind(this), this.scoreLength());
        _o.analysisMethod = this.analysisMethod();
        _o.eventStartTime = this.eventStartTime();
        _o.eventEndTime = this.eventEndTime();
    }
}
export class HYPT {
    constructor(catIds = [], sitIds = [], name = null, category = null, rowIndicators = [], colIndicators = [], matrix = [], score = [], analysisMethod = null, eventStartTime = null, eventEndTime = null) {
        this.catIds = catIds;
        this.sitIds = sitIds;
        this.name = name;
        this.category = category;
        this.rowIndicators = rowIndicators;
        this.colIndicators = colIndicators;
        this.matrix = matrix;
        this.score = score;
        this.analysisMethod = analysisMethod;
        this.eventStartTime = eventStartTime;
        this.eventEndTime = eventEndTime;
    }
    pack(builder) {
        const catIds = HYP.createCatIdsVector(builder, builder.createObjectOffsetList(this.catIds));
        const sitIds = HYP.createSitIdsVector(builder, builder.createObjectOffsetList(this.sitIds));
        const name = (this.name !== null ? builder.createString(this.name) : 0);
        const category = (this.category !== null ? builder.createString(this.category) : 0);
        const rowIndicators = HYP.createRowIndicatorsVector(builder, builder.createObjectOffsetList(this.rowIndicators));
        const colIndicators = HYP.createColIndicatorsVector(builder, builder.createObjectOffsetList(this.colIndicators));
        const matrix = HYP.createMatrixVector(builder, this.matrix);
        const score = HYP.createScoreVector(builder, builder.createObjectOffsetList(this.score));
        const analysisMethod = (this.analysisMethod !== null ? builder.createString(this.analysisMethod) : 0);
        const eventStartTime = (this.eventStartTime !== null ? builder.createString(this.eventStartTime) : 0);
        const eventEndTime = (this.eventEndTime !== null ? builder.createString(this.eventEndTime) : 0);
        return HYP.createHYP(builder, catIds, sitIds, name, category, rowIndicators, colIndicators, matrix, score, analysisMethod, eventStartTime, eventEndTime);
    }
}
