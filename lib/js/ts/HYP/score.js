// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { ScoreType } from './score-type.js';
export class Score {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsScore(bb, obj) {
        return (obj || new Score()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsScore(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Score()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    noradCatId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    type() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ScoreType.OUTLIER;
    }
    tag(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    score() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    static startScore(builder) {
        builder.startObject(4);
    }
    static addNoradCatId(builder, noradCatIdOffset) {
        builder.addFieldOffset(0, noradCatIdOffset, 0);
    }
    static addType(builder, type) {
        builder.addFieldInt8(1, type, ScoreType.OUTLIER);
    }
    static addTag(builder, tagOffset) {
        builder.addFieldOffset(2, tagOffset, 0);
    }
    static addScore(builder, score) {
        builder.addFieldFloat32(3, score, 0.0);
    }
    static endScore(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createScore(builder, noradCatIdOffset, type, tagOffset, score) {
        Score.startScore(builder);
        Score.addNoradCatId(builder, noradCatIdOffset);
        Score.addType(builder, type);
        Score.addTag(builder, tagOffset);
        Score.addScore(builder, score);
        return Score.endScore(builder);
    }
    unpack() {
        return new ScoreT(this.noradCatId(), this.type(), this.tag(), this.score());
    }
    unpackTo(_o) {
        _o.noradCatId = this.noradCatId();
        _o.type = this.type();
        _o.tag = this.tag();
        _o.score = this.score();
    }
}
export class ScoreT {
    constructor(noradCatId = null, type = ScoreType.OUTLIER, tag = null, score = 0.0) {
        this.noradCatId = noradCatId;
        this.type = type;
        this.tag = tag;
        this.score = score;
    }
    pack(builder) {
        const noradCatId = (this.noradCatId !== null ? builder.createString(this.noradCatId) : 0);
        const tag = (this.tag !== null ? builder.createString(this.tag) : 0);
        return Score.createScore(builder, noradCatId, this.type, tag, this.score);
    }
}
