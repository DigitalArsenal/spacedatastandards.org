// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { refFrame } from './ref-frame.js';
/**
 * Tracking Data Message
 */
export class TDM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsTDM(bb, obj) {
        return (obj || new TDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsTDM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$TDM');
    }
    observerId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Cartesian X coordinate of the OBSERVER location in chosen reference frame
     */
    observerX() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Cartesian Y coordinate of the OBSERVER location in chosen reference frame
     */
    observerY() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Cartesian Z coordinate of the OBSERVER location in chosen reference frame
     */
    observerZ() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Cartesian X coordinate of the OBSERVER velocity in chosen reference frame
     */
    observerVx() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Cartesian Y coordinate of the OBSERVER velocity in chosen reference frame
     */
    observerVy() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Cartesian Z coordinate of the OBSERVER velocity in chosen reference frame
     */
    observerVz() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Reference frame used for OBSERVER location Cartesian coordinates (e.g., ECEF, ECI)
     */
    observerPositionReferenceFrame() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : refFrame.ECEF;
    }
    /**
     * Reference frame used for obs location Cartesian coordinates (e.g., ECEF, ECI)
     */
    obsReferenceFrame() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : refFrame.ECEF;
    }
    epoch(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ccsdsTdmVers(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    comment(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    commentLength() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    creationDate(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    originator(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    metaStart(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    timeSystem(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    startTime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    stopTime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    participant1(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    participant2(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    participant3(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    participant4(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    participant5(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    mode(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * First path in TDM -  CCSDS 503.0-B-1, Page D-9
     */
    path1() {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    }
    /**
     * Second path in TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
     */
    path2() {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    }
    transmitBand(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    receiveBand(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Integration interval -  CCSDS 503.0-B-1, Page D-9
     */
    integrationInterval() {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    integrationRef(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 62);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Receive delay for second participant -  CCSDS 503.0-B-1, Page D-9
     */
    receiveDelay2() {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Receive delay for third participant -  CCSDS 503.0-B-1, Page D-9
     */
    receiveDelay3() {
        const offset = this.bb.__offset(this.bb_pos, 66);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    dataQuality(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 68);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    metaStop(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    dataStart(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 72);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Transmit frequency for first participant -  CCSDS 503.0-B-1, Page D-9
     */
    transmitFreq1() {
        const offset = this.bb.__offset(this.bb_pos, 74);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Receive frequency -  CCSDS 503.0-B-1, Page D-9
     */
    receiveFreq(index) {
        const offset = this.bb.__offset(this.bb_pos, 76);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    receiveFreqLength() {
        const offset = this.bb.__offset(this.bb_pos, 76);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    receiveFreqArray() {
        const offset = this.bb.__offset(this.bb_pos, 76);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    dataStop(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 78);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    timetagRef(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 80);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    angleType(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 82);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * First angle value -  CCSDS 503.0-B-1, Page D-12
     */
    angle1(index) {
        const offset = this.bb.__offset(this.bb_pos, 84);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    angle1Length() {
        const offset = this.bb.__offset(this.bb_pos, 84);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    angle1Array() {
        const offset = this.bb.__offset(this.bb_pos, 84);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Second angle value -  CCSDS 503.0-B-1, Page D-12
     */
    angle2(index) {
        const offset = this.bb.__offset(this.bb_pos, 86);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    angle2Length() {
        const offset = this.bb.__offset(this.bb_pos, 86);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    angle2Array() {
        const offset = this.bb.__offset(this.bb_pos, 86);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Uncertainty of first angle -  CCSDS 503.0-B-1
     */
    angleUncertainty1() {
        const offset = this.bb.__offset(this.bb_pos, 88);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Uncertainty of second angle -  CCSDS 503.0-B-1
     */
    angleUncertainty2() {
        const offset = this.bb.__offset(this.bb_pos, 90);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Rate of change of range -  CCSDS 503.0-B-1
     */
    rangeRate() {
        const offset = this.bb.__offset(this.bb_pos, 92);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Uncertainty in range -  CCSDS 503.0-B-1
     */
    rangeUncertainty() {
        const offset = this.bb.__offset(this.bb_pos, 94);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    rangeMode(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 96);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Modulus value for range data -  CCSDS 503.0-B-1, Page D-10
     */
    rangeModulus() {
        const offset = this.bb.__offset(this.bb_pos, 98);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * First correction angle -  CCSDS 503.0-B-1, Page D-12
     */
    correctionAngle1() {
        const offset = this.bb.__offset(this.bb_pos, 100);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Second correction angle -  CCSDS 503.0-B-1, Page D-12
     */
    correctionAngle2() {
        const offset = this.bb.__offset(this.bb_pos, 102);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    correctionsApplied(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 104);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Dry component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
     */
    tropoDry(index) {
        const offset = this.bb.__offset(this.bb_pos, 106);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    tropoDryLength() {
        const offset = this.bb.__offset(this.bb_pos, 106);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    tropoDryArray() {
        const offset = this.bb.__offset(this.bb_pos, 106);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Wet component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
     */
    tropoWet(index) {
        const offset = this.bb.__offset(this.bb_pos, 108);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    tropoWetLength() {
        const offset = this.bb.__offset(this.bb_pos, 108);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    tropoWetArray() {
        const offset = this.bb.__offset(this.bb_pos, 108);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Slant total electron content -  CCSDS 503.0-B-1, Page D-13
     */
    stec(index) {
        const offset = this.bb.__offset(this.bb_pos, 110);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    stecLength() {
        const offset = this.bb.__offset(this.bb_pos, 110);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    stecArray() {
        const offset = this.bb.__offset(this.bb_pos, 110);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Atmospheric pressure -  CCSDS 503.0-B-1, Page D-14
     */
    pressure(index) {
        const offset = this.bb.__offset(this.bb_pos, 112);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    pressureLength() {
        const offset = this.bb.__offset(this.bb_pos, 112);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    pressureArray() {
        const offset = this.bb.__offset(this.bb_pos, 112);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Relative humidity -  CCSDS 503.0-B-1, Page D-14
     */
    rhumidity(index) {
        const offset = this.bb.__offset(this.bb_pos, 114);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    rhumidityLength() {
        const offset = this.bb.__offset(this.bb_pos, 114);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    rhumidityArray() {
        const offset = this.bb.__offset(this.bb_pos, 114);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Ambient temperature -  CCSDS 503.0-B-1, Page D-14
     */
    temperature(index) {
        const offset = this.bb.__offset(this.bb_pos, 116);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    temperatureLength() {
        const offset = this.bb.__offset(this.bb_pos, 116);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    temperatureArray() {
        const offset = this.bb.__offset(this.bb_pos, 116);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Clock bias values -  CCSDS 503.0-B-1, Page D-15
     */
    clockBias(index) {
        const offset = this.bb.__offset(this.bb_pos, 118);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    clockBiasLength() {
        const offset = this.bb.__offset(this.bb_pos, 118);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    clockBiasArray() {
        const offset = this.bb.__offset(this.bb_pos, 118);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Clock drift values -  CCSDS 503.0-B-1, Page D-15
     */
    clockDrift(index) {
        const offset = this.bb.__offset(this.bb_pos, 120);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    clockDriftLength() {
        const offset = this.bb.__offset(this.bb_pos, 120);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    clockDriftArray() {
        const offset = this.bb.__offset(this.bb_pos, 120);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startTDM(builder) {
        builder.startObject(59);
    }
    static addObserverId(builder, observerIdOffset) {
        builder.addFieldOffset(0, observerIdOffset, 0);
    }
    static addObserverX(builder, observerX) {
        builder.addFieldFloat64(1, observerX, 0.0);
    }
    static addObserverY(builder, observerY) {
        builder.addFieldFloat64(2, observerY, 0.0);
    }
    static addObserverZ(builder, observerZ) {
        builder.addFieldFloat64(3, observerZ, 0.0);
    }
    static addObserverVx(builder, observerVx) {
        builder.addFieldFloat64(4, observerVx, 0.0);
    }
    static addObserverVy(builder, observerVy) {
        builder.addFieldFloat64(5, observerVy, 0.0);
    }
    static addObserverVz(builder, observerVz) {
        builder.addFieldFloat64(6, observerVz, 0.0);
    }
    static addObserverPositionReferenceFrame(builder, observerPositionReferenceFrame) {
        builder.addFieldInt8(7, observerPositionReferenceFrame, refFrame.ECEF);
    }
    static addObsReferenceFrame(builder, obsReferenceFrame) {
        builder.addFieldInt8(8, obsReferenceFrame, refFrame.ECEF);
    }
    static addEpoch(builder, epochOffset) {
        builder.addFieldOffset(9, epochOffset, 0);
    }
    static addCcsdsTdmVers(builder, ccsdsTdmVersOffset) {
        builder.addFieldOffset(10, ccsdsTdmVersOffset, 0);
    }
    static addComment(builder, commentOffset) {
        builder.addFieldOffset(11, commentOffset, 0);
    }
    static createCommentVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startCommentVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addCreationDate(builder, creationDateOffset) {
        builder.addFieldOffset(12, creationDateOffset, 0);
    }
    static addOriginator(builder, originatorOffset) {
        builder.addFieldOffset(13, originatorOffset, 0);
    }
    static addMetaStart(builder, metaStartOffset) {
        builder.addFieldOffset(14, metaStartOffset, 0);
    }
    static addTimeSystem(builder, timeSystemOffset) {
        builder.addFieldOffset(15, timeSystemOffset, 0);
    }
    static addStartTime(builder, startTimeOffset) {
        builder.addFieldOffset(16, startTimeOffset, 0);
    }
    static addStopTime(builder, stopTimeOffset) {
        builder.addFieldOffset(17, stopTimeOffset, 0);
    }
    static addParticipant1(builder, participant1Offset) {
        builder.addFieldOffset(18, participant1Offset, 0);
    }
    static addParticipant2(builder, participant2Offset) {
        builder.addFieldOffset(19, participant2Offset, 0);
    }
    static addParticipant3(builder, participant3Offset) {
        builder.addFieldOffset(20, participant3Offset, 0);
    }
    static addParticipant4(builder, participant4Offset) {
        builder.addFieldOffset(21, participant4Offset, 0);
    }
    static addParticipant5(builder, participant5Offset) {
        builder.addFieldOffset(22, participant5Offset, 0);
    }
    static addMode(builder, modeOffset) {
        builder.addFieldOffset(23, modeOffset, 0);
    }
    static addPath1(builder, path1) {
        builder.addFieldInt16(24, path1, 0);
    }
    static addPath2(builder, path2) {
        builder.addFieldInt16(25, path2, 0);
    }
    static addTransmitBand(builder, transmitBandOffset) {
        builder.addFieldOffset(26, transmitBandOffset, 0);
    }
    static addReceiveBand(builder, receiveBandOffset) {
        builder.addFieldOffset(27, receiveBandOffset, 0);
    }
    static addIntegrationInterval(builder, integrationInterval) {
        builder.addFieldFloat32(28, integrationInterval, 0.0);
    }
    static addIntegrationRef(builder, integrationRefOffset) {
        builder.addFieldOffset(29, integrationRefOffset, 0);
    }
    static addReceiveDelay2(builder, receiveDelay2) {
        builder.addFieldFloat64(30, receiveDelay2, 0.0);
    }
    static addReceiveDelay3(builder, receiveDelay3) {
        builder.addFieldFloat64(31, receiveDelay3, 0.0);
    }
    static addDataQuality(builder, dataQualityOffset) {
        builder.addFieldOffset(32, dataQualityOffset, 0);
    }
    static addMetaStop(builder, metaStopOffset) {
        builder.addFieldOffset(33, metaStopOffset, 0);
    }
    static addDataStart(builder, dataStartOffset) {
        builder.addFieldOffset(34, dataStartOffset, 0);
    }
    static addTransmitFreq1(builder, transmitFreq1) {
        builder.addFieldFloat64(35, transmitFreq1, 0.0);
    }
    static addReceiveFreq(builder, receiveFreqOffset) {
        builder.addFieldOffset(36, receiveFreqOffset, 0);
    }
    static createReceiveFreqVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startReceiveFreqVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static addDataStop(builder, dataStopOffset) {
        builder.addFieldOffset(37, dataStopOffset, 0);
    }
    static addTimetagRef(builder, timetagRefOffset) {
        builder.addFieldOffset(38, timetagRefOffset, 0);
    }
    static addAngleType(builder, angleTypeOffset) {
        builder.addFieldOffset(39, angleTypeOffset, 0);
    }
    static addAngle1(builder, angle1Offset) {
        builder.addFieldOffset(40, angle1Offset, 0);
    }
    static createAngle1Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    }
    static startAngle1Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addAngle2(builder, angle2Offset) {
        builder.addFieldOffset(41, angle2Offset, 0);
    }
    static createAngle2Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    }
    static startAngle2Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addAngleUncertainty1(builder, angleUncertainty1) {
        builder.addFieldFloat32(42, angleUncertainty1, 0.0);
    }
    static addAngleUncertainty2(builder, angleUncertainty2) {
        builder.addFieldFloat32(43, angleUncertainty2, 0.0);
    }
    static addRangeRate(builder, rangeRate) {
        builder.addFieldFloat64(44, rangeRate, 0.0);
    }
    static addRangeUncertainty(builder, rangeUncertainty) {
        builder.addFieldFloat64(45, rangeUncertainty, 0.0);
    }
    static addRangeMode(builder, rangeModeOffset) {
        builder.addFieldOffset(46, rangeModeOffset, 0);
    }
    static addRangeModulus(builder, rangeModulus) {
        builder.addFieldFloat64(47, rangeModulus, 0.0);
    }
    static addCorrectionAngle1(builder, correctionAngle1) {
        builder.addFieldFloat32(48, correctionAngle1, 0.0);
    }
    static addCorrectionAngle2(builder, correctionAngle2) {
        builder.addFieldFloat32(49, correctionAngle2, 0.0);
    }
    static addCorrectionsApplied(builder, correctionsAppliedOffset) {
        builder.addFieldOffset(50, correctionsAppliedOffset, 0);
    }
    static addTropoDry(builder, tropoDryOffset) {
        builder.addFieldOffset(51, tropoDryOffset, 0);
    }
    static createTropoDryVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startTropoDryVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static addTropoWet(builder, tropoWetOffset) {
        builder.addFieldOffset(52, tropoWetOffset, 0);
    }
    static createTropoWetVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startTropoWetVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static addStec(builder, stecOffset) {
        builder.addFieldOffset(53, stecOffset, 0);
    }
    static createStecVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startStecVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static addPressure(builder, pressureOffset) {
        builder.addFieldOffset(54, pressureOffset, 0);
    }
    static createPressureVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startPressureVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static addRhumidity(builder, rhumidityOffset) {
        builder.addFieldOffset(55, rhumidityOffset, 0);
    }
    static createRhumidityVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startRhumidityVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static addTemperature(builder, temperatureOffset) {
        builder.addFieldOffset(56, temperatureOffset, 0);
    }
    static createTemperatureVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startTemperatureVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static addClockBias(builder, clockBiasOffset) {
        builder.addFieldOffset(57, clockBiasOffset, 0);
    }
    static createClockBiasVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startClockBiasVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static addClockDrift(builder, clockDriftOffset) {
        builder.addFieldOffset(58, clockDriftOffset, 0);
    }
    static createClockDriftVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startClockDriftVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static endTDM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishTDMBuffer(builder, offset) {
        builder.finish(offset, '$TDM');
    }
    static finishSizePrefixedTDMBuffer(builder, offset) {
        builder.finish(offset, '$TDM', true);
    }
    static createTDM(builder, observerIdOffset, observerX, observerY, observerZ, observerVx, observerVy, observerVz, observerPositionReferenceFrame, obsReferenceFrame, epochOffset, ccsdsTdmVersOffset, commentOffset, creationDateOffset, originatorOffset, metaStartOffset, timeSystemOffset, startTimeOffset, stopTimeOffset, participant1Offset, participant2Offset, participant3Offset, participant4Offset, participant5Offset, modeOffset, path1, path2, transmitBandOffset, receiveBandOffset, integrationInterval, integrationRefOffset, receiveDelay2, receiveDelay3, dataQualityOffset, metaStopOffset, dataStartOffset, transmitFreq1, receiveFreqOffset, dataStopOffset, timetagRefOffset, angleTypeOffset, angle1Offset, angle2Offset, angleUncertainty1, angleUncertainty2, rangeRate, rangeUncertainty, rangeModeOffset, rangeModulus, correctionAngle1, correctionAngle2, correctionsAppliedOffset, tropoDryOffset, tropoWetOffset, stecOffset, pressureOffset, rhumidityOffset, temperatureOffset, clockBiasOffset, clockDriftOffset) {
        TDM.startTDM(builder);
        TDM.addObserverId(builder, observerIdOffset);
        TDM.addObserverX(builder, observerX);
        TDM.addObserverY(builder, observerY);
        TDM.addObserverZ(builder, observerZ);
        TDM.addObserverVx(builder, observerVx);
        TDM.addObserverVy(builder, observerVy);
        TDM.addObserverVz(builder, observerVz);
        TDM.addObserverPositionReferenceFrame(builder, observerPositionReferenceFrame);
        TDM.addObsReferenceFrame(builder, obsReferenceFrame);
        TDM.addEpoch(builder, epochOffset);
        TDM.addCcsdsTdmVers(builder, ccsdsTdmVersOffset);
        TDM.addComment(builder, commentOffset);
        TDM.addCreationDate(builder, creationDateOffset);
        TDM.addOriginator(builder, originatorOffset);
        TDM.addMetaStart(builder, metaStartOffset);
        TDM.addTimeSystem(builder, timeSystemOffset);
        TDM.addStartTime(builder, startTimeOffset);
        TDM.addStopTime(builder, stopTimeOffset);
        TDM.addParticipant1(builder, participant1Offset);
        TDM.addParticipant2(builder, participant2Offset);
        TDM.addParticipant3(builder, participant3Offset);
        TDM.addParticipant4(builder, participant4Offset);
        TDM.addParticipant5(builder, participant5Offset);
        TDM.addMode(builder, modeOffset);
        TDM.addPath1(builder, path1);
        TDM.addPath2(builder, path2);
        TDM.addTransmitBand(builder, transmitBandOffset);
        TDM.addReceiveBand(builder, receiveBandOffset);
        TDM.addIntegrationInterval(builder, integrationInterval);
        TDM.addIntegrationRef(builder, integrationRefOffset);
        TDM.addReceiveDelay2(builder, receiveDelay2);
        TDM.addReceiveDelay3(builder, receiveDelay3);
        TDM.addDataQuality(builder, dataQualityOffset);
        TDM.addMetaStop(builder, metaStopOffset);
        TDM.addDataStart(builder, dataStartOffset);
        TDM.addTransmitFreq1(builder, transmitFreq1);
        TDM.addReceiveFreq(builder, receiveFreqOffset);
        TDM.addDataStop(builder, dataStopOffset);
        TDM.addTimetagRef(builder, timetagRefOffset);
        TDM.addAngleType(builder, angleTypeOffset);
        TDM.addAngle1(builder, angle1Offset);
        TDM.addAngle2(builder, angle2Offset);
        TDM.addAngleUncertainty1(builder, angleUncertainty1);
        TDM.addAngleUncertainty2(builder, angleUncertainty2);
        TDM.addRangeRate(builder, rangeRate);
        TDM.addRangeUncertainty(builder, rangeUncertainty);
        TDM.addRangeMode(builder, rangeModeOffset);
        TDM.addRangeModulus(builder, rangeModulus);
        TDM.addCorrectionAngle1(builder, correctionAngle1);
        TDM.addCorrectionAngle2(builder, correctionAngle2);
        TDM.addCorrectionsApplied(builder, correctionsAppliedOffset);
        TDM.addTropoDry(builder, tropoDryOffset);
        TDM.addTropoWet(builder, tropoWetOffset);
        TDM.addStec(builder, stecOffset);
        TDM.addPressure(builder, pressureOffset);
        TDM.addRhumidity(builder, rhumidityOffset);
        TDM.addTemperature(builder, temperatureOffset);
        TDM.addClockBias(builder, clockBiasOffset);
        TDM.addClockDrift(builder, clockDriftOffset);
        return TDM.endTDM(builder);
    }
    unpack() {
        return new TDMT(this.observerId(), this.observerX(), this.observerY(), this.observerZ(), this.observerVx(), this.observerVy(), this.observerVz(), this.observerPositionReferenceFrame(), this.obsReferenceFrame(), this.epoch(), this.ccsdsTdmVers(), this.bb.createScalarList(this.comment.bind(this), this.commentLength()), this.creationDate(), this.originator(), this.metaStart(), this.timeSystem(), this.startTime(), this.stopTime(), this.participant1(), this.participant2(), this.participant3(), this.participant4(), this.participant5(), this.mode(), this.path1(), this.path2(), this.transmitBand(), this.receiveBand(), this.integrationInterval(), this.integrationRef(), this.receiveDelay2(), this.receiveDelay3(), this.dataQuality(), this.metaStop(), this.dataStart(), this.transmitFreq1(), this.bb.createScalarList(this.receiveFreq.bind(this), this.receiveFreqLength()), this.dataStop(), this.timetagRef(), this.angleType(), this.bb.createScalarList(this.angle1.bind(this), this.angle1Length()), this.bb.createScalarList(this.angle2.bind(this), this.angle2Length()), this.angleUncertainty1(), this.angleUncertainty2(), this.rangeRate(), this.rangeUncertainty(), this.rangeMode(), this.rangeModulus(), this.correctionAngle1(), this.correctionAngle2(), this.correctionsApplied(), this.bb.createScalarList(this.tropoDry.bind(this), this.tropoDryLength()), this.bb.createScalarList(this.tropoWet.bind(this), this.tropoWetLength()), this.bb.createScalarList(this.stec.bind(this), this.stecLength()), this.bb.createScalarList(this.pressure.bind(this), this.pressureLength()), this.bb.createScalarList(this.rhumidity.bind(this), this.rhumidityLength()), this.bb.createScalarList(this.temperature.bind(this), this.temperatureLength()), this.bb.createScalarList(this.clockBias.bind(this), this.clockBiasLength()), this.bb.createScalarList(this.clockDrift.bind(this), this.clockDriftLength()));
    }
    unpackTo(_o) {
        _o.observerId = this.observerId();
        _o.observerX = this.observerX();
        _o.observerY = this.observerY();
        _o.observerZ = this.observerZ();
        _o.observerVx = this.observerVx();
        _o.observerVy = this.observerVy();
        _o.observerVz = this.observerVz();
        _o.observerPositionReferenceFrame = this.observerPositionReferenceFrame();
        _o.obsReferenceFrame = this.obsReferenceFrame();
        _o.epoch = this.epoch();
        _o.ccsdsTdmVers = this.ccsdsTdmVers();
        _o.comment = this.bb.createScalarList(this.comment.bind(this), this.commentLength());
        _o.creationDate = this.creationDate();
        _o.originator = this.originator();
        _o.metaStart = this.metaStart();
        _o.timeSystem = this.timeSystem();
        _o.startTime = this.startTime();
        _o.stopTime = this.stopTime();
        _o.participant1 = this.participant1();
        _o.participant2 = this.participant2();
        _o.participant3 = this.participant3();
        _o.participant4 = this.participant4();
        _o.participant5 = this.participant5();
        _o.mode = this.mode();
        _o.path1 = this.path1();
        _o.path2 = this.path2();
        _o.transmitBand = this.transmitBand();
        _o.receiveBand = this.receiveBand();
        _o.integrationInterval = this.integrationInterval();
        _o.integrationRef = this.integrationRef();
        _o.receiveDelay2 = this.receiveDelay2();
        _o.receiveDelay3 = this.receiveDelay3();
        _o.dataQuality = this.dataQuality();
        _o.metaStop = this.metaStop();
        _o.dataStart = this.dataStart();
        _o.transmitFreq1 = this.transmitFreq1();
        _o.receiveFreq = this.bb.createScalarList(this.receiveFreq.bind(this), this.receiveFreqLength());
        _o.dataStop = this.dataStop();
        _o.timetagRef = this.timetagRef();
        _o.angleType = this.angleType();
        _o.angle1 = this.bb.createScalarList(this.angle1.bind(this), this.angle1Length());
        _o.angle2 = this.bb.createScalarList(this.angle2.bind(this), this.angle2Length());
        _o.angleUncertainty1 = this.angleUncertainty1();
        _o.angleUncertainty2 = this.angleUncertainty2();
        _o.rangeRate = this.rangeRate();
        _o.rangeUncertainty = this.rangeUncertainty();
        _o.rangeMode = this.rangeMode();
        _o.rangeModulus = this.rangeModulus();
        _o.correctionAngle1 = this.correctionAngle1();
        _o.correctionAngle2 = this.correctionAngle2();
        _o.correctionsApplied = this.correctionsApplied();
        _o.tropoDry = this.bb.createScalarList(this.tropoDry.bind(this), this.tropoDryLength());
        _o.tropoWet = this.bb.createScalarList(this.tropoWet.bind(this), this.tropoWetLength());
        _o.stec = this.bb.createScalarList(this.stec.bind(this), this.stecLength());
        _o.pressure = this.bb.createScalarList(this.pressure.bind(this), this.pressureLength());
        _o.rhumidity = this.bb.createScalarList(this.rhumidity.bind(this), this.rhumidityLength());
        _o.temperature = this.bb.createScalarList(this.temperature.bind(this), this.temperatureLength());
        _o.clockBias = this.bb.createScalarList(this.clockBias.bind(this), this.clockBiasLength());
        _o.clockDrift = this.bb.createScalarList(this.clockDrift.bind(this), this.clockDriftLength());
    }
}
export class TDMT {
    constructor(observerId = null, observerX = 0.0, observerY = 0.0, observerZ = 0.0, observerVx = 0.0, observerVy = 0.0, observerVz = 0.0, observerPositionReferenceFrame = refFrame.ECEF, obsReferenceFrame = refFrame.ECEF, epoch = null, ccsdsTdmVers = null, comment = [], creationDate = null, originator = null, metaStart = null, timeSystem = null, startTime = null, stopTime = null, participant1 = null, participant2 = null, participant3 = null, participant4 = null, participant5 = null, mode = null, path1 = 0, path2 = 0, transmitBand = null, receiveBand = null, integrationInterval = 0.0, integrationRef = null, receiveDelay2 = 0.0, receiveDelay3 = 0.0, dataQuality = null, metaStop = null, dataStart = null, transmitFreq1 = 0.0, receiveFreq = [], dataStop = null, timetagRef = null, angleType = null, angle1 = [], angle2 = [], angleUncertainty1 = 0.0, angleUncertainty2 = 0.0, rangeRate = 0.0, rangeUncertainty = 0.0, rangeMode = null, rangeModulus = 0.0, correctionAngle1 = 0.0, correctionAngle2 = 0.0, correctionsApplied = null, tropoDry = [], tropoWet = [], stec = [], pressure = [], rhumidity = [], temperature = [], clockBias = [], clockDrift = []) {
        this.observerId = observerId;
        this.observerX = observerX;
        this.observerY = observerY;
        this.observerZ = observerZ;
        this.observerVx = observerVx;
        this.observerVy = observerVy;
        this.observerVz = observerVz;
        this.observerPositionReferenceFrame = observerPositionReferenceFrame;
        this.obsReferenceFrame = obsReferenceFrame;
        this.epoch = epoch;
        this.ccsdsTdmVers = ccsdsTdmVers;
        this.comment = comment;
        this.creationDate = creationDate;
        this.originator = originator;
        this.metaStart = metaStart;
        this.timeSystem = timeSystem;
        this.startTime = startTime;
        this.stopTime = stopTime;
        this.participant1 = participant1;
        this.participant2 = participant2;
        this.participant3 = participant3;
        this.participant4 = participant4;
        this.participant5 = participant5;
        this.mode = mode;
        this.path1 = path1;
        this.path2 = path2;
        this.transmitBand = transmitBand;
        this.receiveBand = receiveBand;
        this.integrationInterval = integrationInterval;
        this.integrationRef = integrationRef;
        this.receiveDelay2 = receiveDelay2;
        this.receiveDelay3 = receiveDelay3;
        this.dataQuality = dataQuality;
        this.metaStop = metaStop;
        this.dataStart = dataStart;
        this.transmitFreq1 = transmitFreq1;
        this.receiveFreq = receiveFreq;
        this.dataStop = dataStop;
        this.timetagRef = timetagRef;
        this.angleType = angleType;
        this.angle1 = angle1;
        this.angle2 = angle2;
        this.angleUncertainty1 = angleUncertainty1;
        this.angleUncertainty2 = angleUncertainty2;
        this.rangeRate = rangeRate;
        this.rangeUncertainty = rangeUncertainty;
        this.rangeMode = rangeMode;
        this.rangeModulus = rangeModulus;
        this.correctionAngle1 = correctionAngle1;
        this.correctionAngle2 = correctionAngle2;
        this.correctionsApplied = correctionsApplied;
        this.tropoDry = tropoDry;
        this.tropoWet = tropoWet;
        this.stec = stec;
        this.pressure = pressure;
        this.rhumidity = rhumidity;
        this.temperature = temperature;
        this.clockBias = clockBias;
        this.clockDrift = clockDrift;
    }
    pack(builder) {
        const observerId = (this.observerId !== null ? builder.createString(this.observerId) : 0);
        const epoch = (this.epoch !== null ? builder.createString(this.epoch) : 0);
        const ccsdsTdmVers = (this.ccsdsTdmVers !== null ? builder.createString(this.ccsdsTdmVers) : 0);
        const comment = TDM.createCommentVector(builder, builder.createObjectOffsetList(this.comment));
        const creationDate = (this.creationDate !== null ? builder.createString(this.creationDate) : 0);
        const originator = (this.originator !== null ? builder.createString(this.originator) : 0);
        const metaStart = (this.metaStart !== null ? builder.createString(this.metaStart) : 0);
        const timeSystem = (this.timeSystem !== null ? builder.createString(this.timeSystem) : 0);
        const startTime = (this.startTime !== null ? builder.createString(this.startTime) : 0);
        const stopTime = (this.stopTime !== null ? builder.createString(this.stopTime) : 0);
        const participant1 = (this.participant1 !== null ? builder.createString(this.participant1) : 0);
        const participant2 = (this.participant2 !== null ? builder.createString(this.participant2) : 0);
        const participant3 = (this.participant3 !== null ? builder.createString(this.participant3) : 0);
        const participant4 = (this.participant4 !== null ? builder.createString(this.participant4) : 0);
        const participant5 = (this.participant5 !== null ? builder.createString(this.participant5) : 0);
        const mode = (this.mode !== null ? builder.createString(this.mode) : 0);
        const transmitBand = (this.transmitBand !== null ? builder.createString(this.transmitBand) : 0);
        const receiveBand = (this.receiveBand !== null ? builder.createString(this.receiveBand) : 0);
        const integrationRef = (this.integrationRef !== null ? builder.createString(this.integrationRef) : 0);
        const dataQuality = (this.dataQuality !== null ? builder.createString(this.dataQuality) : 0);
        const metaStop = (this.metaStop !== null ? builder.createString(this.metaStop) : 0);
        const dataStart = (this.dataStart !== null ? builder.createString(this.dataStart) : 0);
        const receiveFreq = TDM.createReceiveFreqVector(builder, this.receiveFreq);
        const dataStop = (this.dataStop !== null ? builder.createString(this.dataStop) : 0);
        const timetagRef = (this.timetagRef !== null ? builder.createString(this.timetagRef) : 0);
        const angleType = (this.angleType !== null ? builder.createString(this.angleType) : 0);
        const angle1 = TDM.createAngle1Vector(builder, this.angle1);
        const angle2 = TDM.createAngle2Vector(builder, this.angle2);
        const rangeMode = (this.rangeMode !== null ? builder.createString(this.rangeMode) : 0);
        const correctionsApplied = (this.correctionsApplied !== null ? builder.createString(this.correctionsApplied) : 0);
        const tropoDry = TDM.createTropoDryVector(builder, this.tropoDry);
        const tropoWet = TDM.createTropoWetVector(builder, this.tropoWet);
        const stec = TDM.createStecVector(builder, this.stec);
        const pressure = TDM.createPressureVector(builder, this.pressure);
        const rhumidity = TDM.createRhumidityVector(builder, this.rhumidity);
        const temperature = TDM.createTemperatureVector(builder, this.temperature);
        const clockBias = TDM.createClockBiasVector(builder, this.clockBias);
        const clockDrift = TDM.createClockDriftVector(builder, this.clockDrift);
        return TDM.createTDM(builder, observerId, this.observerX, this.observerY, this.observerZ, this.observerVx, this.observerVy, this.observerVz, this.observerPositionReferenceFrame, this.obsReferenceFrame, epoch, ccsdsTdmVers, comment, creationDate, originator, metaStart, timeSystem, startTime, stopTime, participant1, participant2, participant3, participant4, participant5, mode, this.path1, this.path2, transmitBand, receiveBand, this.integrationInterval, integrationRef, this.receiveDelay2, this.receiveDelay3, dataQuality, metaStop, dataStart, this.transmitFreq1, receiveFreq, dataStop, timetagRef, angleType, angle1, angle2, this.angleUncertainty1, this.angleUncertainty2, this.rangeRate, this.rangeUncertainty, rangeMode, this.rangeModulus, this.correctionAngle1, this.correctionAngle2, correctionsApplied, tropoDry, tropoWet, stec, pressure, rhumidity, temperature, clockBias, clockDrift);
    }
}
