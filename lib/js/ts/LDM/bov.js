// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * Burn Out Vector Message
 */
export class BOV {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsBOV(bb, obj) {
        return (obj || new BOV()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsBOV(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new BOV()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$BOV');
    }
    eCoordinate() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    fCoordinate() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    gCoordinate() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    eDot() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    fDot() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    gDot() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    epoch(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    timeFromLaunch() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startBOV(builder) {
        builder.startObject(8);
    }
    static addECoordinate(builder, eCoordinate) {
        builder.addFieldFloat64(0, eCoordinate, 0.0);
    }
    static addFCoordinate(builder, fCoordinate) {
        builder.addFieldFloat64(1, fCoordinate, 0.0);
    }
    static addGCoordinate(builder, gCoordinate) {
        builder.addFieldFloat64(2, gCoordinate, 0.0);
    }
    static addEDot(builder, eDot) {
        builder.addFieldFloat64(3, eDot, 0.0);
    }
    static addFDot(builder, fDot) {
        builder.addFieldFloat64(4, fDot, 0.0);
    }
    static addGDot(builder, gDot) {
        builder.addFieldFloat64(5, gDot, 0.0);
    }
    static addEpoch(builder, epochOffset) {
        builder.addFieldOffset(6, epochOffset, 0);
    }
    static addTimeFromLaunch(builder, timeFromLaunch) {
        builder.addFieldFloat64(7, timeFromLaunch, 0.0);
    }
    static endBOV(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishBOVBuffer(builder, offset) {
        builder.finish(offset, '$BOV');
    }
    static finishSizePrefixedBOVBuffer(builder, offset) {
        builder.finish(offset, '$BOV', true);
    }
    static createBOV(builder, eCoordinate, fCoordinate, gCoordinate, eDot, fDot, gDot, epochOffset, timeFromLaunch) {
        BOV.startBOV(builder);
        BOV.addECoordinate(builder, eCoordinate);
        BOV.addFCoordinate(builder, fCoordinate);
        BOV.addGCoordinate(builder, gCoordinate);
        BOV.addEDot(builder, eDot);
        BOV.addFDot(builder, fDot);
        BOV.addGDot(builder, gDot);
        BOV.addEpoch(builder, epochOffset);
        BOV.addTimeFromLaunch(builder, timeFromLaunch);
        return BOV.endBOV(builder);
    }
    unpack() {
        return new BOVT(this.eCoordinate(), this.fCoordinate(), this.gCoordinate(), this.eDot(), this.fDot(), this.gDot(), this.epoch(), this.timeFromLaunch());
    }
    unpackTo(_o) {
        _o.eCoordinate = this.eCoordinate();
        _o.fCoordinate = this.fCoordinate();
        _o.gCoordinate = this.gCoordinate();
        _o.eDot = this.eDot();
        _o.fDot = this.fDot();
        _o.gDot = this.gDot();
        _o.epoch = this.epoch();
        _o.timeFromLaunch = this.timeFromLaunch();
    }
}
export class BOVT {
    constructor(eCoordinate = 0.0, fCoordinate = 0.0, gCoordinate = 0.0, eDot = 0.0, fDot = 0.0, gDot = 0.0, epoch = null, timeFromLaunch = 0.0) {
        this.eCoordinate = eCoordinate;
        this.fCoordinate = fCoordinate;
        this.gCoordinate = gCoordinate;
        this.eDot = eDot;
        this.fDot = fDot;
        this.gDot = gDot;
        this.epoch = epoch;
        this.timeFromLaunch = timeFromLaunch;
    }
    pack(builder) {
        const epoch = (this.epoch !== null ? builder.createString(this.epoch) : 0);
        return BOV.createBOV(builder, this.eCoordinate, this.fCoordinate, this.gCoordinate, this.eDot, this.fDot, this.gDot, epoch, this.timeFromLaunch);
    }
}
