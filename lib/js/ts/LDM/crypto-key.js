// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { KeyType } from './key-type.js';
/**
 * Represents cryptographic key information
 */
export class CryptoKey {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCryptoKey(bb, obj) {
        return (obj || new CryptoKey()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCryptoKey(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CryptoKey()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    publicKey(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    xpub(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    privateKey(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    xpriv(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    keyAddress(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    addressType(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Type of the cryptographic key (signing or encryption)
     */
    keyType() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : KeyType.Signing;
    }
    static startCryptoKey(builder) {
        builder.startObject(7);
    }
    static addPublicKey(builder, publicKeyOffset) {
        builder.addFieldOffset(0, publicKeyOffset, 0);
    }
    static addXpub(builder, xpubOffset) {
        builder.addFieldOffset(1, xpubOffset, 0);
    }
    static addPrivateKey(builder, privateKeyOffset) {
        builder.addFieldOffset(2, privateKeyOffset, 0);
    }
    static addXpriv(builder, xprivOffset) {
        builder.addFieldOffset(3, xprivOffset, 0);
    }
    static addKeyAddress(builder, keyAddressOffset) {
        builder.addFieldOffset(4, keyAddressOffset, 0);
    }
    static addAddressType(builder, addressTypeOffset) {
        builder.addFieldOffset(5, addressTypeOffset, 0);
    }
    static addKeyType(builder, keyType) {
        builder.addFieldInt8(6, keyType, KeyType.Signing);
    }
    static endCryptoKey(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createCryptoKey(builder, publicKeyOffset, xpubOffset, privateKeyOffset, xprivOffset, keyAddressOffset, addressTypeOffset, keyType) {
        CryptoKey.startCryptoKey(builder);
        CryptoKey.addPublicKey(builder, publicKeyOffset);
        CryptoKey.addXpub(builder, xpubOffset);
        CryptoKey.addPrivateKey(builder, privateKeyOffset);
        CryptoKey.addXpriv(builder, xprivOffset);
        CryptoKey.addKeyAddress(builder, keyAddressOffset);
        CryptoKey.addAddressType(builder, addressTypeOffset);
        CryptoKey.addKeyType(builder, keyType);
        return CryptoKey.endCryptoKey(builder);
    }
    unpack() {
        return new CryptoKeyT(this.publicKey(), this.xpub(), this.privateKey(), this.xpriv(), this.keyAddress(), this.addressType(), this.keyType());
    }
    unpackTo(_o) {
        _o.publicKey = this.publicKey();
        _o.xpub = this.xpub();
        _o.privateKey = this.privateKey();
        _o.xpriv = this.xpriv();
        _o.keyAddress = this.keyAddress();
        _o.addressType = this.addressType();
        _o.keyType = this.keyType();
    }
}
export class CryptoKeyT {
    constructor(publicKey = null, xpub = null, privateKey = null, xpriv = null, keyAddress = null, addressType = null, keyType = KeyType.Signing) {
        this.publicKey = publicKey;
        this.xpub = xpub;
        this.privateKey = privateKey;
        this.xpriv = xpriv;
        this.keyAddress = keyAddress;
        this.addressType = addressType;
        this.keyType = keyType;
    }
    pack(builder) {
        const publicKey = (this.publicKey !== null ? builder.createString(this.publicKey) : 0);
        const xpub = (this.xpub !== null ? builder.createString(this.xpub) : 0);
        const privateKey = (this.privateKey !== null ? builder.createString(this.privateKey) : 0);
        const xpriv = (this.xpriv !== null ? builder.createString(this.xpriv) : 0);
        const keyAddress = (this.keyAddress !== null ? builder.createString(this.keyAddress) : 0);
        const addressType = (this.addressType !== null ? builder.createString(this.addressType) : 0);
        return CryptoKey.createCryptoKey(builder, publicKey, xpub, privateKey, xpriv, keyAddress, addressType, this.keyType);
    }
}
