// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { BOV } from './bov.js';
import { CAT } from './cat.js';
import { EPM } from './epm.js';
import { ROC } from './roc.js';
import { SIT } from './sit.js';
/**
 * Launch Data Message
 */
export class LDM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsLDM(bb, obj) {
        return (obj || new LDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsLDM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$LDM');
    }
    /**
     * Launch Site Information
     */
    site(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new SIT()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    /**
     * Azimuth at Launch (in Degrees)
     */
    azimuth() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    references(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    agencyName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Points of Contact for Launch
     */
    pointsOfContact(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new EPM()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    pointsOfContactLength() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Operations Points of Contact for Launch
     */
    operationsPointsOfContact(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new EPM()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    operationsPointsOfContactLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    net(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Rocket Configuration Details
     */
    rocketConfiguration(obj) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new ROC()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    missionName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    missionDescription(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    missionType(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    orbitType(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    weatherConditions(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    launchStatus(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    webcastUrl(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    mediaLinks(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    mediaLinksLength() {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    earliestLaunchTimes(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    earliestLaunchTimesLength() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    latestLaunchTimes(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    latestLaunchTimesLength() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    lcolaWindowClosures(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    lcolaWindowClosuresLength() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Payload Information (Catalog Entities)
     */
    objects(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? (obj || new CAT()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    objectsLength() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    trackingRequirements(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    trackingRequirementsLength() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    colaScreenDuration(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    probabilityOfCollisionThreshold(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    colaRunsRequired(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Points of Contact for Collision Avoidance
     */
    colaPointsOfContact(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? (obj || new EPM()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    colaPointsOfContactLength() {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    orbitalParameters(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    orbitalParametersLength() {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Burn Out Vectors for the Launch
     */
    burnOutVectors(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? (obj || new BOV()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    burnOutVectorsLength() {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startLDM(builder) {
        builder.startObject(27);
    }
    static addSite(builder, siteOffset) {
        builder.addFieldOffset(0, siteOffset, 0);
    }
    static addAzimuth(builder, azimuth) {
        builder.addFieldFloat32(1, azimuth, 0.0);
    }
    static addReferences(builder, referencesOffset) {
        builder.addFieldOffset(2, referencesOffset, 0);
    }
    static addAgencyName(builder, agencyNameOffset) {
        builder.addFieldOffset(3, agencyNameOffset, 0);
    }
    static addPointsOfContact(builder, pointsOfContactOffset) {
        builder.addFieldOffset(4, pointsOfContactOffset, 0);
    }
    static createPointsOfContactVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startPointsOfContactVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addOperationsPointsOfContact(builder, operationsPointsOfContactOffset) {
        builder.addFieldOffset(5, operationsPointsOfContactOffset, 0);
    }
    static createOperationsPointsOfContactVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startOperationsPointsOfContactVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addNet(builder, netOffset) {
        builder.addFieldOffset(6, netOffset, 0);
    }
    static addRocketConfiguration(builder, rocketConfigurationOffset) {
        builder.addFieldOffset(7, rocketConfigurationOffset, 0);
    }
    static addMissionName(builder, missionNameOffset) {
        builder.addFieldOffset(8, missionNameOffset, 0);
    }
    static addMissionDescription(builder, missionDescriptionOffset) {
        builder.addFieldOffset(9, missionDescriptionOffset, 0);
    }
    static addMissionType(builder, missionTypeOffset) {
        builder.addFieldOffset(10, missionTypeOffset, 0);
    }
    static addOrbitType(builder, orbitTypeOffset) {
        builder.addFieldOffset(11, orbitTypeOffset, 0);
    }
    static addWeatherConditions(builder, weatherConditionsOffset) {
        builder.addFieldOffset(12, weatherConditionsOffset, 0);
    }
    static addLaunchStatus(builder, launchStatusOffset) {
        builder.addFieldOffset(13, launchStatusOffset, 0);
    }
    static addWebcastUrl(builder, webcastUrlOffset) {
        builder.addFieldOffset(14, webcastUrlOffset, 0);
    }
    static addMediaLinks(builder, mediaLinksOffset) {
        builder.addFieldOffset(15, mediaLinksOffset, 0);
    }
    static createMediaLinksVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startMediaLinksVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addEarliestLaunchTimes(builder, earliestLaunchTimesOffset) {
        builder.addFieldOffset(16, earliestLaunchTimesOffset, 0);
    }
    static createEarliestLaunchTimesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startEarliestLaunchTimesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addLatestLaunchTimes(builder, latestLaunchTimesOffset) {
        builder.addFieldOffset(17, latestLaunchTimesOffset, 0);
    }
    static createLatestLaunchTimesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startLatestLaunchTimesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addLcolaWindowClosures(builder, lcolaWindowClosuresOffset) {
        builder.addFieldOffset(18, lcolaWindowClosuresOffset, 0);
    }
    static createLcolaWindowClosuresVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startLcolaWindowClosuresVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addObjects(builder, objectsOffset) {
        builder.addFieldOffset(19, objectsOffset, 0);
    }
    static createObjectsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startObjectsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addTrackingRequirements(builder, trackingRequirementsOffset) {
        builder.addFieldOffset(20, trackingRequirementsOffset, 0);
    }
    static createTrackingRequirementsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startTrackingRequirementsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addColaScreenDuration(builder, colaScreenDurationOffset) {
        builder.addFieldOffset(21, colaScreenDurationOffset, 0);
    }
    static addProbabilityOfCollisionThreshold(builder, probabilityOfCollisionThresholdOffset) {
        builder.addFieldOffset(22, probabilityOfCollisionThresholdOffset, 0);
    }
    static addColaRunsRequired(builder, colaRunsRequiredOffset) {
        builder.addFieldOffset(23, colaRunsRequiredOffset, 0);
    }
    static addColaPointsOfContact(builder, colaPointsOfContactOffset) {
        builder.addFieldOffset(24, colaPointsOfContactOffset, 0);
    }
    static createColaPointsOfContactVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startColaPointsOfContactVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addOrbitalParameters(builder, orbitalParametersOffset) {
        builder.addFieldOffset(25, orbitalParametersOffset, 0);
    }
    static createOrbitalParametersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startOrbitalParametersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addBurnOutVectors(builder, burnOutVectorsOffset) {
        builder.addFieldOffset(26, burnOutVectorsOffset, 0);
    }
    static createBurnOutVectorsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startBurnOutVectorsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endLDM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishLDMBuffer(builder, offset) {
        builder.finish(offset, '$LDM');
    }
    static finishSizePrefixedLDMBuffer(builder, offset) {
        builder.finish(offset, '$LDM', true);
    }
    unpack() {
        return new LDMT((this.site() !== null ? this.site().unpack() : null), this.azimuth(), this.references(), this.agencyName(), this.bb.createObjList(this.pointsOfContact.bind(this), this.pointsOfContactLength()), this.bb.createObjList(this.operationsPointsOfContact.bind(this), this.operationsPointsOfContactLength()), this.net(), (this.rocketConfiguration() !== null ? this.rocketConfiguration().unpack() : null), this.missionName(), this.missionDescription(), this.missionType(), this.orbitType(), this.weatherConditions(), this.launchStatus(), this.webcastUrl(), this.bb.createScalarList(this.mediaLinks.bind(this), this.mediaLinksLength()), this.bb.createScalarList(this.earliestLaunchTimes.bind(this), this.earliestLaunchTimesLength()), this.bb.createScalarList(this.latestLaunchTimes.bind(this), this.latestLaunchTimesLength()), this.bb.createScalarList(this.lcolaWindowClosures.bind(this), this.lcolaWindowClosuresLength()), this.bb.createObjList(this.objects.bind(this), this.objectsLength()), this.bb.createScalarList(this.trackingRequirements.bind(this), this.trackingRequirementsLength()), this.colaScreenDuration(), this.probabilityOfCollisionThreshold(), this.colaRunsRequired(), this.bb.createObjList(this.colaPointsOfContact.bind(this), this.colaPointsOfContactLength()), this.bb.createScalarList(this.orbitalParameters.bind(this), this.orbitalParametersLength()), this.bb.createObjList(this.burnOutVectors.bind(this), this.burnOutVectorsLength()));
    }
    unpackTo(_o) {
        _o.site = (this.site() !== null ? this.site().unpack() : null);
        _o.azimuth = this.azimuth();
        _o.references = this.references();
        _o.agencyName = this.agencyName();
        _o.pointsOfContact = this.bb.createObjList(this.pointsOfContact.bind(this), this.pointsOfContactLength());
        _o.operationsPointsOfContact = this.bb.createObjList(this.operationsPointsOfContact.bind(this), this.operationsPointsOfContactLength());
        _o.net = this.net();
        _o.rocketConfiguration = (this.rocketConfiguration() !== null ? this.rocketConfiguration().unpack() : null);
        _o.missionName = this.missionName();
        _o.missionDescription = this.missionDescription();
        _o.missionType = this.missionType();
        _o.orbitType = this.orbitType();
        _o.weatherConditions = this.weatherConditions();
        _o.launchStatus = this.launchStatus();
        _o.webcastUrl = this.webcastUrl();
        _o.mediaLinks = this.bb.createScalarList(this.mediaLinks.bind(this), this.mediaLinksLength());
        _o.earliestLaunchTimes = this.bb.createScalarList(this.earliestLaunchTimes.bind(this), this.earliestLaunchTimesLength());
        _o.latestLaunchTimes = this.bb.createScalarList(this.latestLaunchTimes.bind(this), this.latestLaunchTimesLength());
        _o.lcolaWindowClosures = this.bb.createScalarList(this.lcolaWindowClosures.bind(this), this.lcolaWindowClosuresLength());
        _o.objects = this.bb.createObjList(this.objects.bind(this), this.objectsLength());
        _o.trackingRequirements = this.bb.createScalarList(this.trackingRequirements.bind(this), this.trackingRequirementsLength());
        _o.colaScreenDuration = this.colaScreenDuration();
        _o.probabilityOfCollisionThreshold = this.probabilityOfCollisionThreshold();
        _o.colaRunsRequired = this.colaRunsRequired();
        _o.colaPointsOfContact = this.bb.createObjList(this.colaPointsOfContact.bind(this), this.colaPointsOfContactLength());
        _o.orbitalParameters = this.bb.createScalarList(this.orbitalParameters.bind(this), this.orbitalParametersLength());
        _o.burnOutVectors = this.bb.createObjList(this.burnOutVectors.bind(this), this.burnOutVectorsLength());
    }
}
export class LDMT {
    constructor(site = null, azimuth = 0.0, references = null, agencyName = null, pointsOfContact = [], operationsPointsOfContact = [], net = null, rocketConfiguration = null, missionName = null, missionDescription = null, missionType = null, orbitType = null, weatherConditions = null, launchStatus = null, webcastUrl = null, mediaLinks = [], earliestLaunchTimes = [], latestLaunchTimes = [], lcolaWindowClosures = [], objects = [], trackingRequirements = [], colaScreenDuration = null, probabilityOfCollisionThreshold = null, colaRunsRequired = null, colaPointsOfContact = [], orbitalParameters = [], burnOutVectors = []) {
        this.site = site;
        this.azimuth = azimuth;
        this.references = references;
        this.agencyName = agencyName;
        this.pointsOfContact = pointsOfContact;
        this.operationsPointsOfContact = operationsPointsOfContact;
        this.net = net;
        this.rocketConfiguration = rocketConfiguration;
        this.missionName = missionName;
        this.missionDescription = missionDescription;
        this.missionType = missionType;
        this.orbitType = orbitType;
        this.weatherConditions = weatherConditions;
        this.launchStatus = launchStatus;
        this.webcastUrl = webcastUrl;
        this.mediaLinks = mediaLinks;
        this.earliestLaunchTimes = earliestLaunchTimes;
        this.latestLaunchTimes = latestLaunchTimes;
        this.lcolaWindowClosures = lcolaWindowClosures;
        this.objects = objects;
        this.trackingRequirements = trackingRequirements;
        this.colaScreenDuration = colaScreenDuration;
        this.probabilityOfCollisionThreshold = probabilityOfCollisionThreshold;
        this.colaRunsRequired = colaRunsRequired;
        this.colaPointsOfContact = colaPointsOfContact;
        this.orbitalParameters = orbitalParameters;
        this.burnOutVectors = burnOutVectors;
    }
    pack(builder) {
        const site = (this.site !== null ? this.site.pack(builder) : 0);
        const references = (this.references !== null ? builder.createString(this.references) : 0);
        const agencyName = (this.agencyName !== null ? builder.createString(this.agencyName) : 0);
        const pointsOfContact = LDM.createPointsOfContactVector(builder, builder.createObjectOffsetList(this.pointsOfContact));
        const operationsPointsOfContact = LDM.createOperationsPointsOfContactVector(builder, builder.createObjectOffsetList(this.operationsPointsOfContact));
        const net = (this.net !== null ? builder.createString(this.net) : 0);
        const rocketConfiguration = (this.rocketConfiguration !== null ? this.rocketConfiguration.pack(builder) : 0);
        const missionName = (this.missionName !== null ? builder.createString(this.missionName) : 0);
        const missionDescription = (this.missionDescription !== null ? builder.createString(this.missionDescription) : 0);
        const missionType = (this.missionType !== null ? builder.createString(this.missionType) : 0);
        const orbitType = (this.orbitType !== null ? builder.createString(this.orbitType) : 0);
        const weatherConditions = (this.weatherConditions !== null ? builder.createString(this.weatherConditions) : 0);
        const launchStatus = (this.launchStatus !== null ? builder.createString(this.launchStatus) : 0);
        const webcastUrl = (this.webcastUrl !== null ? builder.createString(this.webcastUrl) : 0);
        const mediaLinks = LDM.createMediaLinksVector(builder, builder.createObjectOffsetList(this.mediaLinks));
        const earliestLaunchTimes = LDM.createEarliestLaunchTimesVector(builder, builder.createObjectOffsetList(this.earliestLaunchTimes));
        const latestLaunchTimes = LDM.createLatestLaunchTimesVector(builder, builder.createObjectOffsetList(this.latestLaunchTimes));
        const lcolaWindowClosures = LDM.createLcolaWindowClosuresVector(builder, builder.createObjectOffsetList(this.lcolaWindowClosures));
        const objects = LDM.createObjectsVector(builder, builder.createObjectOffsetList(this.objects));
        const trackingRequirements = LDM.createTrackingRequirementsVector(builder, builder.createObjectOffsetList(this.trackingRequirements));
        const colaScreenDuration = (this.colaScreenDuration !== null ? builder.createString(this.colaScreenDuration) : 0);
        const probabilityOfCollisionThreshold = (this.probabilityOfCollisionThreshold !== null ? builder.createString(this.probabilityOfCollisionThreshold) : 0);
        const colaRunsRequired = (this.colaRunsRequired !== null ? builder.createString(this.colaRunsRequired) : 0);
        const colaPointsOfContact = LDM.createColaPointsOfContactVector(builder, builder.createObjectOffsetList(this.colaPointsOfContact));
        const orbitalParameters = LDM.createOrbitalParametersVector(builder, builder.createObjectOffsetList(this.orbitalParameters));
        const burnOutVectors = LDM.createBurnOutVectorsVector(builder, builder.createObjectOffsetList(this.burnOutVectors));
        LDM.startLDM(builder);
        LDM.addSite(builder, site);
        LDM.addAzimuth(builder, this.azimuth);
        LDM.addReferences(builder, references);
        LDM.addAgencyName(builder, agencyName);
        LDM.addPointsOfContact(builder, pointsOfContact);
        LDM.addOperationsPointsOfContact(builder, operationsPointsOfContact);
        LDM.addNet(builder, net);
        LDM.addRocketConfiguration(builder, rocketConfiguration);
        LDM.addMissionName(builder, missionName);
        LDM.addMissionDescription(builder, missionDescription);
        LDM.addMissionType(builder, missionType);
        LDM.addOrbitType(builder, orbitType);
        LDM.addWeatherConditions(builder, weatherConditions);
        LDM.addLaunchStatus(builder, launchStatus);
        LDM.addWebcastUrl(builder, webcastUrl);
        LDM.addMediaLinks(builder, mediaLinks);
        LDM.addEarliestLaunchTimes(builder, earliestLaunchTimes);
        LDM.addLatestLaunchTimes(builder, latestLaunchTimes);
        LDM.addLcolaWindowClosures(builder, lcolaWindowClosures);
        LDM.addObjects(builder, objects);
        LDM.addTrackingRequirements(builder, trackingRequirements);
        LDM.addColaScreenDuration(builder, colaScreenDuration);
        LDM.addProbabilityOfCollisionThreshold(builder, probabilityOfCollisionThreshold);
        LDM.addColaRunsRequired(builder, colaRunsRequired);
        LDM.addColaPointsOfContact(builder, colaPointsOfContact);
        LDM.addOrbitalParameters(builder, orbitalParameters);
        LDM.addBurnOutVectors(builder, burnOutVectors);
        return LDM.endLDM(builder);
    }
}
