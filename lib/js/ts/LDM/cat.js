// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { PLD } from './pld.js';
import { dataStatusCode } from './data-status-code.js';
import { legacyCountryCode } from './legacy-country-code.js';
import { massType } from './mass-type.js';
import { objectType } from './object-type.js';
import { opsStatusCode } from './ops-status-code.js';
import { orbitType } from './orbit-type.js';
/**
 * Catalog Entity Message
 */
export class CAT {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCAT(bb, obj) {
        return (obj || new CAT()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCAT(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CAT()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$CAT');
    }
    objectName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    objectId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * NORAD Catalog Number
     */
    noradCatId() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    /**
     * Object type (Payload, Rocket body, Debris, Unknown)
     */
    objectType() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : objectType.UNKNOWN;
    }
    /**
     * Operational Status Code
     */
    opsStatusCode() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : opsStatusCode.UNKNOWN;
    }
    /**
     * Ownership, typically country or company
     */
    owner() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : legacyCountryCode.AB;
    }
    launchDate(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    launchSite(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    decayDate(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Orbital period [minutes]
     */
    period() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Inclination [degrees]
     */
    inclination() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Apogee Altitude [kilometers]
     */
    apogee() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Perigee Altitude [kilometers]
     */
    perigee() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Radar Cross Section [meters2]; blank if no data available
     */
    rcs() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Data status code; blank otherwise
     */
    dataStatusCode() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : dataStatusCode.NO_CURRENT_ELEMENTS;
    }
    orbitCenter(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Orbit type (Orbit, Landing, Impact, Docked to RSO, roundtrip)
     */
    orbitType() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : orbitType.ORBIT;
    }
    deploymentDate(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Indicates if the object is maneuverable
     */
    maneuverable() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    /**
     * Size [meters]; blank if no data available
     */
    size() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Mass [kilograms]; blank if no data available
     */
    mass() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Mass type (Dry, Wet)
     */
    massType() {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : massType.DRY;
    }
    /**
     * Vector of PAYLOADS
     */
    payloads(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? (obj || new PLD()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    payloadsLength() {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startCAT(builder) {
        builder.startObject(23);
    }
    static addObjectName(builder, objectNameOffset) {
        builder.addFieldOffset(0, objectNameOffset, 0);
    }
    static addObjectId(builder, objectIdOffset) {
        builder.addFieldOffset(1, objectIdOffset, 0);
    }
    static addNoradCatId(builder, noradCatId) {
        builder.addFieldInt32(2, noradCatId, 0);
    }
    static addObjectType(builder, objectType) {
        builder.addFieldInt8(3, objectType, objectType.UNKNOWN);
    }
    static addOpsStatusCode(builder, opsStatusCode) {
        builder.addFieldInt8(4, opsStatusCode, opsStatusCode.UNKNOWN);
    }
    static addOwner(builder, owner) {
        builder.addFieldInt8(5, owner, legacyCountryCode.AB);
    }
    static addLaunchDate(builder, launchDateOffset) {
        builder.addFieldOffset(6, launchDateOffset, 0);
    }
    static addLaunchSite(builder, launchSiteOffset) {
        builder.addFieldOffset(7, launchSiteOffset, 0);
    }
    static addDecayDate(builder, decayDateOffset) {
        builder.addFieldOffset(8, decayDateOffset, 0);
    }
    static addPeriod(builder, period) {
        builder.addFieldFloat64(9, period, 0.0);
    }
    static addInclination(builder, inclination) {
        builder.addFieldFloat64(10, inclination, 0.0);
    }
    static addApogee(builder, apogee) {
        builder.addFieldFloat64(11, apogee, 0.0);
    }
    static addPerigee(builder, perigee) {
        builder.addFieldFloat64(12, perigee, 0.0);
    }
    static addRcs(builder, rcs) {
        builder.addFieldFloat64(13, rcs, 0.0);
    }
    static addDataStatusCode(builder, dataStatusCode) {
        builder.addFieldInt8(14, dataStatusCode, dataStatusCode.NO_CURRENT_ELEMENTS);
    }
    static addOrbitCenter(builder, orbitCenterOffset) {
        builder.addFieldOffset(15, orbitCenterOffset, 0);
    }
    static addOrbitType(builder, orbitType) {
        builder.addFieldInt8(16, orbitType, orbitType.ORBIT);
    }
    static addDeploymentDate(builder, deploymentDateOffset) {
        builder.addFieldOffset(17, deploymentDateOffset, 0);
    }
    static addManeuverable(builder, maneuverable) {
        builder.addFieldInt8(18, +maneuverable, +false);
    }
    static addSize(builder, size) {
        builder.addFieldFloat64(19, size, 0.0);
    }
    static addMass(builder, mass) {
        builder.addFieldFloat64(20, mass, 0.0);
    }
    static addMassType(builder, massType) {
        builder.addFieldInt8(21, massType, massType.DRY);
    }
    static addPayloads(builder, payloadsOffset) {
        builder.addFieldOffset(22, payloadsOffset, 0);
    }
    static createPayloadsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startPayloadsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endCAT(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishCATBuffer(builder, offset) {
        builder.finish(offset, '$CAT');
    }
    static finishSizePrefixedCATBuffer(builder, offset) {
        builder.finish(offset, '$CAT', true);
    }
    static createCAT(builder, objectNameOffset, objectIdOffset, noradCatId, objectType, opsStatusCode, owner, launchDateOffset, launchSiteOffset, decayDateOffset, period, inclination, apogee, perigee, rcs, dataStatusCode, orbitCenterOffset, orbitType, deploymentDateOffset, maneuverable, size, mass, massType, payloadsOffset) {
        CAT.startCAT(builder);
        CAT.addObjectName(builder, objectNameOffset);
        CAT.addObjectId(builder, objectIdOffset);
        CAT.addNoradCatId(builder, noradCatId);
        CAT.addObjectType(builder, objectType);
        CAT.addOpsStatusCode(builder, opsStatusCode);
        CAT.addOwner(builder, owner);
        CAT.addLaunchDate(builder, launchDateOffset);
        CAT.addLaunchSite(builder, launchSiteOffset);
        CAT.addDecayDate(builder, decayDateOffset);
        CAT.addPeriod(builder, period);
        CAT.addInclination(builder, inclination);
        CAT.addApogee(builder, apogee);
        CAT.addPerigee(builder, perigee);
        CAT.addRcs(builder, rcs);
        CAT.addDataStatusCode(builder, dataStatusCode);
        CAT.addOrbitCenter(builder, orbitCenterOffset);
        CAT.addOrbitType(builder, orbitType);
        CAT.addDeploymentDate(builder, deploymentDateOffset);
        CAT.addManeuverable(builder, maneuverable);
        CAT.addSize(builder, size);
        CAT.addMass(builder, mass);
        CAT.addMassType(builder, massType);
        CAT.addPayloads(builder, payloadsOffset);
        return CAT.endCAT(builder);
    }
    unpack() {
        return new CATT(this.objectName(), this.objectId(), this.noradCatId(), this.objectType(), this.opsStatusCode(), this.owner(), this.launchDate(), this.launchSite(), this.decayDate(), this.period(), this.inclination(), this.apogee(), this.perigee(), this.rcs(), this.dataStatusCode(), this.orbitCenter(), this.orbitType(), this.deploymentDate(), this.maneuverable(), this.size(), this.mass(), this.massType(), this.bb.createObjList(this.payloads.bind(this), this.payloadsLength()));
    }
    unpackTo(_o) {
        _o.objectName = this.objectName();
        _o.objectId = this.objectId();
        _o.noradCatId = this.noradCatId();
        _o.objectType = this.objectType();
        _o.opsStatusCode = this.opsStatusCode();
        _o.owner = this.owner();
        _o.launchDate = this.launchDate();
        _o.launchSite = this.launchSite();
        _o.decayDate = this.decayDate();
        _o.period = this.period();
        _o.inclination = this.inclination();
        _o.apogee = this.apogee();
        _o.perigee = this.perigee();
        _o.rcs = this.rcs();
        _o.dataStatusCode = this.dataStatusCode();
        _o.orbitCenter = this.orbitCenter();
        _o.orbitType = this.orbitType();
        _o.deploymentDate = this.deploymentDate();
        _o.maneuverable = this.maneuverable();
        _o.size = this.size();
        _o.mass = this.mass();
        _o.massType = this.massType();
        _o.payloads = this.bb.createObjList(this.payloads.bind(this), this.payloadsLength());
    }
}
export class CATT {
    constructor(objectName = null, objectId = null, noradCatId = 0, objectType = objectType.UNKNOWN, opsStatusCode = opsStatusCode.UNKNOWN, owner = legacyCountryCode.AB, launchDate = null, launchSite = null, decayDate = null, period = 0.0, inclination = 0.0, apogee = 0.0, perigee = 0.0, rcs = 0.0, dataStatusCode = dataStatusCode.NO_CURRENT_ELEMENTS, orbitCenter = null, orbitType = orbitType.ORBIT, deploymentDate = null, maneuverable = false, size = 0.0, mass = 0.0, massType = massType.DRY, payloads = []) {
        this.objectName = objectName;
        this.objectId = objectId;
        this.noradCatId = noradCatId;
        this.objectType = objectType;
        this.opsStatusCode = opsStatusCode;
        this.owner = owner;
        this.launchDate = launchDate;
        this.launchSite = launchSite;
        this.decayDate = decayDate;
        this.period = period;
        this.inclination = inclination;
        this.apogee = apogee;
        this.perigee = perigee;
        this.rcs = rcs;
        this.dataStatusCode = dataStatusCode;
        this.orbitCenter = orbitCenter;
        this.orbitType = orbitType;
        this.deploymentDate = deploymentDate;
        this.maneuverable = maneuverable;
        this.size = size;
        this.mass = mass;
        this.massType = massType;
        this.payloads = payloads;
    }
    pack(builder) {
        const objectName = (this.objectName !== null ? builder.createString(this.objectName) : 0);
        const objectId = (this.objectId !== null ? builder.createString(this.objectId) : 0);
        const launchDate = (this.launchDate !== null ? builder.createString(this.launchDate) : 0);
        const launchSite = (this.launchSite !== null ? builder.createString(this.launchSite) : 0);
        const decayDate = (this.decayDate !== null ? builder.createString(this.decayDate) : 0);
        const orbitCenter = (this.orbitCenter !== null ? builder.createString(this.orbitCenter) : 0);
        const deploymentDate = (this.deploymentDate !== null ? builder.createString(this.deploymentDate) : 0);
        const payloads = CAT.createPayloadsVector(builder, builder.createObjectOffsetList(this.payloads));
        return CAT.createCAT(builder, objectName, objectId, this.noradCatId, this.objectType, this.opsStatusCode, this.owner, launchDate, launchSite, decayDate, this.period, this.inclination, this.apogee, this.perigee, this.rcs, this.dataStatusCode, orbitCenter, this.orbitType, deploymentDate, this.maneuverable, this.size, this.mass, this.massType, payloads);
    }
}
