// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { FrequencyRange } from './frequency-range.js';
/**
 * Table representing a frequency band with a name and frequency range
 */
export class Band {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsBand(bb, obj) {
        return (obj || new Band()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsBand(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Band()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    name(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Frequency range of the band
     */
    frequencyRange(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new FrequencyRange()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startBand(builder) {
        builder.startObject(2);
    }
    static addName(builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    }
    static addFrequencyRange(builder, frequencyRangeOffset) {
        builder.addFieldOffset(1, frequencyRangeOffset, 0);
    }
    static endBand(builder) {
        const offset = builder.endObject();
        return offset;
    }
    unpack() {
        return new BandT(this.name(), (this.frequencyRange() !== null ? this.frequencyRange().unpack() : null));
    }
    unpackTo(_o) {
        _o.name = this.name();
        _o.frequencyRange = (this.frequencyRange() !== null ? this.frequencyRange().unpack() : null);
    }
}
export class BandT {
    constructor(name = null, frequencyRange = null) {
        this.name = name;
        this.frequencyRange = frequencyRange;
    }
    pack(builder) {
        const name = (this.name !== null ? builder.createString(this.name) : 0);
        const frequencyRange = (this.frequencyRange !== null ? this.frequencyRange.pack(builder) : 0);
        Band.startBand(builder);
        Band.addName(builder, name);
        Band.addFrequencyRange(builder, frequencyRange);
        return Band.endBand(builder);
    }
}
