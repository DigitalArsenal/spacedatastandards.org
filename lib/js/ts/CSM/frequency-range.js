// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * Frequency range with lower and upper limits
 */
export class FrequencyRange {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsFrequencyRange(bb, obj) {
        return (obj || new FrequencyRange()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsFrequencyRange(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new FrequencyRange()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    /**
     * Lower frequency in MHz
     */
    lower() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Upper frequency in MHz
     */
    upper() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startFrequencyRange(builder) {
        builder.startObject(2);
    }
    static addLower(builder, lower) {
        builder.addFieldFloat64(0, lower, 0.0);
    }
    static addUpper(builder, upper) {
        builder.addFieldFloat64(1, upper, 0.0);
    }
    static endFrequencyRange(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createFrequencyRange(builder, lower, upper) {
        FrequencyRange.startFrequencyRange(builder);
        FrequencyRange.addLower(builder, lower);
        FrequencyRange.addUpper(builder, upper);
        return FrequencyRange.endFrequencyRange(builder);
    }
    unpack() {
        return new FrequencyRangeT(this.lower(), this.upper());
    }
    unpackTo(_o) {
        _o.lower = this.lower();
        _o.upper = this.upper();
    }
}
export class FrequencyRangeT {
    constructor(lower = 0.0, upper = 0.0) {
        this.lower = lower;
        this.upper = upper;
    }
    pack(builder) {
        return FrequencyRange.createFrequencyRange(builder, this.lower, this.upper);
    }
}
