// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * Sustainer Details
 */
export class SUSTAINER {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSUSTAINER(bb, obj) {
        return (obj || new SUSTAINER()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSUSTAINER(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SUSTAINER()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    sustainerName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Thrust Produced by the Sustainer (in Newtons)
     */
    thrust() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Duration of the Burn (in Seconds)
     */
    burnDuration() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startSUSTAINER(builder) {
        builder.startObject(3);
    }
    static addSustainerName(builder, sustainerNameOffset) {
        builder.addFieldOffset(0, sustainerNameOffset, 0);
    }
    static addThrust(builder, thrust) {
        builder.addFieldFloat64(1, thrust, 0.0);
    }
    static addBurnDuration(builder, burnDuration) {
        builder.addFieldFloat64(2, burnDuration, 0.0);
    }
    static endSUSTAINER(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createSUSTAINER(builder, sustainerNameOffset, thrust, burnDuration) {
        SUSTAINER.startSUSTAINER(builder);
        SUSTAINER.addSustainerName(builder, sustainerNameOffset);
        SUSTAINER.addThrust(builder, thrust);
        SUSTAINER.addBurnDuration(builder, burnDuration);
        return SUSTAINER.endSUSTAINER(builder);
    }
    unpack() {
        return new SUSTAINERT(this.sustainerName(), this.thrust(), this.burnDuration());
    }
    unpackTo(_o) {
        _o.sustainerName = this.sustainerName();
        _o.thrust = this.thrust();
        _o.burnDuration = this.burnDuration();
    }
}
export class SUSTAINERT {
    constructor(sustainerName = null, thrust = 0.0, burnDuration = 0.0) {
        this.sustainerName = sustainerName;
        this.thrust = thrust;
        this.burnDuration = burnDuration;
    }
    pack(builder) {
        const sustainerName = (this.sustainerName !== null ? builder.createString(this.sustainerName) : 0);
        return SUSTAINER.createSUSTAINER(builder, sustainerName, this.thrust, this.burnDuration);
    }
}
