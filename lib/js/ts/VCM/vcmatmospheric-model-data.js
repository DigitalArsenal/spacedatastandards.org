// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { atmosphericModel } from './atmospheric-model.js';
import { geopotentialModel } from './geopotential-model.js';
import { lunarPerturbationModel } from './lunar-perturbation-model.js';
import { perturbationStatus } from './perturbation-status.js';
import { resonanceModel } from './resonance-model.js';
import { solarPerturbationModel } from './solar-perturbation-model.js';
import { solarRadiationPressureModel } from './solar-radiation-pressure-model.js';
/**
 * VCM Atmospheric and Perturbation Model Data
 */
export class VCMAtmosphericModelData {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsVCMAtmosphericModelData(bb, obj) {
        return (obj || new VCMAtmosphericModelData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsVCMAtmosphericModelData(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VCMAtmosphericModelData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    atmosphericModel() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : atmosphericModel.NONE;
    }
    geopotentialModel() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : geopotentialModel.NONE;
    }
    lunarSolarPerturbation() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : perturbationStatus.OFF;
    }
    lunarPerturbationModel() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : lunarPerturbationModel.NONE;
    }
    solarPerturbationModel() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : solarPerturbationModel.NONE;
    }
    solarRadiationPressure() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : perturbationStatus.OFF;
    }
    srpModel() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : solarRadiationPressureModel.NONE;
    }
    resonanceModel() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : resonanceModel.NONE;
    }
    static startVCMAtmosphericModelData(builder) {
        builder.startObject(8);
    }
    static addAtmosphericModel(builder, atmosphericModel) {
        builder.addFieldInt8(0, atmosphericModel, atmosphericModel.NONE);
    }
    static addGeopotentialModel(builder, geopotentialModel) {
        builder.addFieldInt8(1, geopotentialModel, geopotentialModel.NONE);
    }
    static addLunarSolarPerturbation(builder, lunarSolarPerturbation) {
        builder.addFieldInt8(2, lunarSolarPerturbation, perturbationStatus.OFF);
    }
    static addLunarPerturbationModel(builder, lunarPerturbationModel) {
        builder.addFieldInt8(3, lunarPerturbationModel, lunarPerturbationModel.NONE);
    }
    static addSolarPerturbationModel(builder, solarPerturbationModel) {
        builder.addFieldInt8(4, solarPerturbationModel, solarPerturbationModel.NONE);
    }
    static addSolarRadiationPressure(builder, solarRadiationPressure) {
        builder.addFieldInt8(5, solarRadiationPressure, perturbationStatus.OFF);
    }
    static addSrpModel(builder, srpModel) {
        builder.addFieldInt8(6, srpModel, solarRadiationPressureModel.NONE);
    }
    static addResonanceModel(builder, resonanceModel) {
        builder.addFieldInt8(7, resonanceModel, resonanceModel.NONE);
    }
    static endVCMAtmosphericModelData(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createVCMAtmosphericModelData(builder, atmosphericModel, geopotentialModel, lunarSolarPerturbation, lunarPerturbationModel, solarPerturbationModel, solarRadiationPressure, srpModel, resonanceModel) {
        VCMAtmosphericModelData.startVCMAtmosphericModelData(builder);
        VCMAtmosphericModelData.addAtmosphericModel(builder, atmosphericModel);
        VCMAtmosphericModelData.addGeopotentialModel(builder, geopotentialModel);
        VCMAtmosphericModelData.addLunarSolarPerturbation(builder, lunarSolarPerturbation);
        VCMAtmosphericModelData.addLunarPerturbationModel(builder, lunarPerturbationModel);
        VCMAtmosphericModelData.addSolarPerturbationModel(builder, solarPerturbationModel);
        VCMAtmosphericModelData.addSolarRadiationPressure(builder, solarRadiationPressure);
        VCMAtmosphericModelData.addSrpModel(builder, srpModel);
        VCMAtmosphericModelData.addResonanceModel(builder, resonanceModel);
        return VCMAtmosphericModelData.endVCMAtmosphericModelData(builder);
    }
    unpack() {
        return new VCMAtmosphericModelDataT(this.atmosphericModel(), this.geopotentialModel(), this.lunarSolarPerturbation(), this.lunarPerturbationModel(), this.solarPerturbationModel(), this.solarRadiationPressure(), this.srpModel(), this.resonanceModel());
    }
    unpackTo(_o) {
        _o.atmosphericModel = this.atmosphericModel();
        _o.geopotentialModel = this.geopotentialModel();
        _o.lunarSolarPerturbation = this.lunarSolarPerturbation();
        _o.lunarPerturbationModel = this.lunarPerturbationModel();
        _o.solarPerturbationModel = this.solarPerturbationModel();
        _o.solarRadiationPressure = this.solarRadiationPressure();
        _o.srpModel = this.srpModel();
        _o.resonanceModel = this.resonanceModel();
    }
}
export class VCMAtmosphericModelDataT {
    constructor(atmosphericModel = atmosphericModel.NONE, geopotentialModel = geopotentialModel.NONE, lunarSolarPerturbation = perturbationStatus.OFF, lunarPerturbationModel = lunarPerturbationModel.NONE, solarPerturbationModel = solarPerturbationModel.NONE, solarRadiationPressure = perturbationStatus.OFF, srpModel = solarRadiationPressureModel.NONE, resonanceModel = resonanceModel.NONE) {
        this.atmosphericModel = atmosphericModel;
        this.geopotentialModel = geopotentialModel;
        this.lunarSolarPerturbation = lunarSolarPerturbation;
        this.lunarPerturbationModel = lunarPerturbationModel;
        this.solarPerturbationModel = solarPerturbationModel;
        this.solarRadiationPressure = solarRadiationPressure;
        this.srpModel = srpModel;
        this.resonanceModel = resonanceModel;
    }
    pack(builder) {
        return VCMAtmosphericModelData.createVCMAtmosphericModelData(builder, this.atmosphericModel, this.geopotentialModel, this.lunarSolarPerturbation, this.lunarPerturbationModel, this.solarPerturbationModel, this.solarRadiationPressure, this.srpModel, this.resonanceModel);
    }
}
