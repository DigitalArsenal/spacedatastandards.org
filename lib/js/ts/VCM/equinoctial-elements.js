// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * Equinoctial Elements
 */
export class equinoctialElements {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsequinoctialElements(bb, obj) {
        return (obj || new equinoctialElements()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsequinoctialElements(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new equinoctialElements()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    af() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    ag() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    l() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    n() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    chi() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    psi() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startequinoctialElements(builder) {
        builder.startObject(6);
    }
    static addAf(builder, af) {
        builder.addFieldFloat64(0, af, 0.0);
    }
    static addAg(builder, ag) {
        builder.addFieldFloat64(1, ag, 0.0);
    }
    static addL(builder, l) {
        builder.addFieldFloat64(2, l, 0.0);
    }
    static addN(builder, n) {
        builder.addFieldFloat64(3, n, 0.0);
    }
    static addChi(builder, chi) {
        builder.addFieldFloat64(4, chi, 0.0);
    }
    static addPsi(builder, psi) {
        builder.addFieldFloat64(5, psi, 0.0);
    }
    static endequinoctialElements(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createequinoctialElements(builder, af, ag, l, n, chi, psi) {
        equinoctialElements.startequinoctialElements(builder);
        equinoctialElements.addAf(builder, af);
        equinoctialElements.addAg(builder, ag);
        equinoctialElements.addL(builder, l);
        equinoctialElements.addN(builder, n);
        equinoctialElements.addChi(builder, chi);
        equinoctialElements.addPsi(builder, psi);
        return equinoctialElements.endequinoctialElements(builder);
    }
    unpack() {
        return new equinoctialElementsT(this.af(), this.ag(), this.l(), this.n(), this.chi(), this.psi());
    }
    unpackTo(_o) {
        _o.af = this.af();
        _o.ag = this.ag();
        _o.l = this.l();
        _o.n = this.n();
        _o.chi = this.chi();
        _o.psi = this.psi();
    }
}
export class equinoctialElementsT {
    constructor(af = 0.0, ag = 0.0, l = 0.0, n = 0.0, chi = 0.0, psi = 0.0) {
        this.af = af;
        this.ag = ag;
        this.l = l;
        this.n = n;
        this.chi = chi;
        this.psi = psi;
    }
    pack(builder) {
        return equinoctialElements.createequinoctialElements(builder, this.af, this.ag, this.l, this.n, this.chi, this.psi);
    }
}
