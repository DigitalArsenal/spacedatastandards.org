// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class OrbitDetermination {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsOrbitDetermination(bb, obj) {
        return (obj || new OrbitDetermination()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsOrbitDetermination(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new OrbitDetermination()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    odId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    odPrevId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    odAlgorithm(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    odMethod(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    odEpoch(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    odTimeTag(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    odProcessNoise(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    odCovReduction(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    odNoiseModels(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    odObservationsType(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    odObservationsTypeLength() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Number of observations used.
     */
    odObservationsUsed() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Number of tracks used.
     */
    odTracksUsed() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    odDataWeighting(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    odConvergenceCriteria(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    odEstParameters(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    odEstParametersLength() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    odAprioriData(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    odResiduals(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startOrbitDetermination(builder) {
        builder.startObject(17);
    }
    static addOdId(builder, odIdOffset) {
        builder.addFieldOffset(0, odIdOffset, 0);
    }
    static addOdPrevId(builder, odPrevIdOffset) {
        builder.addFieldOffset(1, odPrevIdOffset, 0);
    }
    static addOdAlgorithm(builder, odAlgorithmOffset) {
        builder.addFieldOffset(2, odAlgorithmOffset, 0);
    }
    static addOdMethod(builder, odMethodOffset) {
        builder.addFieldOffset(3, odMethodOffset, 0);
    }
    static addOdEpoch(builder, odEpochOffset) {
        builder.addFieldOffset(4, odEpochOffset, 0);
    }
    static addOdTimeTag(builder, odTimeTagOffset) {
        builder.addFieldOffset(5, odTimeTagOffset, 0);
    }
    static addOdProcessNoise(builder, odProcessNoiseOffset) {
        builder.addFieldOffset(6, odProcessNoiseOffset, 0);
    }
    static addOdCovReduction(builder, odCovReductionOffset) {
        builder.addFieldOffset(7, odCovReductionOffset, 0);
    }
    static addOdNoiseModels(builder, odNoiseModelsOffset) {
        builder.addFieldOffset(8, odNoiseModelsOffset, 0);
    }
    static addOdObservationsType(builder, odObservationsTypeOffset) {
        builder.addFieldOffset(9, odObservationsTypeOffset, 0);
    }
    static createOdObservationsTypeVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startOdObservationsTypeVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addOdObservationsUsed(builder, odObservationsUsed) {
        builder.addFieldInt32(10, odObservationsUsed, 0);
    }
    static addOdTracksUsed(builder, odTracksUsed) {
        builder.addFieldInt32(11, odTracksUsed, 0);
    }
    static addOdDataWeighting(builder, odDataWeightingOffset) {
        builder.addFieldOffset(12, odDataWeightingOffset, 0);
    }
    static addOdConvergenceCriteria(builder, odConvergenceCriteriaOffset) {
        builder.addFieldOffset(13, odConvergenceCriteriaOffset, 0);
    }
    static addOdEstParameters(builder, odEstParametersOffset) {
        builder.addFieldOffset(14, odEstParametersOffset, 0);
    }
    static createOdEstParametersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startOdEstParametersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addOdAprioriData(builder, odAprioriDataOffset) {
        builder.addFieldOffset(15, odAprioriDataOffset, 0);
    }
    static addOdResiduals(builder, odResidualsOffset) {
        builder.addFieldOffset(16, odResidualsOffset, 0);
    }
    static endOrbitDetermination(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createOrbitDetermination(builder, odIdOffset, odPrevIdOffset, odAlgorithmOffset, odMethodOffset, odEpochOffset, odTimeTagOffset, odProcessNoiseOffset, odCovReductionOffset, odNoiseModelsOffset, odObservationsTypeOffset, odObservationsUsed, odTracksUsed, odDataWeightingOffset, odConvergenceCriteriaOffset, odEstParametersOffset, odAprioriDataOffset, odResidualsOffset) {
        OrbitDetermination.startOrbitDetermination(builder);
        OrbitDetermination.addOdId(builder, odIdOffset);
        OrbitDetermination.addOdPrevId(builder, odPrevIdOffset);
        OrbitDetermination.addOdAlgorithm(builder, odAlgorithmOffset);
        OrbitDetermination.addOdMethod(builder, odMethodOffset);
        OrbitDetermination.addOdEpoch(builder, odEpochOffset);
        OrbitDetermination.addOdTimeTag(builder, odTimeTagOffset);
        OrbitDetermination.addOdProcessNoise(builder, odProcessNoiseOffset);
        OrbitDetermination.addOdCovReduction(builder, odCovReductionOffset);
        OrbitDetermination.addOdNoiseModels(builder, odNoiseModelsOffset);
        OrbitDetermination.addOdObservationsType(builder, odObservationsTypeOffset);
        OrbitDetermination.addOdObservationsUsed(builder, odObservationsUsed);
        OrbitDetermination.addOdTracksUsed(builder, odTracksUsed);
        OrbitDetermination.addOdDataWeighting(builder, odDataWeightingOffset);
        OrbitDetermination.addOdConvergenceCriteria(builder, odConvergenceCriteriaOffset);
        OrbitDetermination.addOdEstParameters(builder, odEstParametersOffset);
        OrbitDetermination.addOdAprioriData(builder, odAprioriDataOffset);
        OrbitDetermination.addOdResiduals(builder, odResidualsOffset);
        return OrbitDetermination.endOrbitDetermination(builder);
    }
    unpack() {
        return new OrbitDeterminationT(this.odId(), this.odPrevId(), this.odAlgorithm(), this.odMethod(), this.odEpoch(), this.odTimeTag(), this.odProcessNoise(), this.odCovReduction(), this.odNoiseModels(), this.bb.createScalarList(this.odObservationsType.bind(this), this.odObservationsTypeLength()), this.odObservationsUsed(), this.odTracksUsed(), this.odDataWeighting(), this.odConvergenceCriteria(), this.bb.createScalarList(this.odEstParameters.bind(this), this.odEstParametersLength()), this.odAprioriData(), this.odResiduals());
    }
    unpackTo(_o) {
        _o.odId = this.odId();
        _o.odPrevId = this.odPrevId();
        _o.odAlgorithm = this.odAlgorithm();
        _o.odMethod = this.odMethod();
        _o.odEpoch = this.odEpoch();
        _o.odTimeTag = this.odTimeTag();
        _o.odProcessNoise = this.odProcessNoise();
        _o.odCovReduction = this.odCovReduction();
        _o.odNoiseModels = this.odNoiseModels();
        _o.odObservationsType = this.bb.createScalarList(this.odObservationsType.bind(this), this.odObservationsTypeLength());
        _o.odObservationsUsed = this.odObservationsUsed();
        _o.odTracksUsed = this.odTracksUsed();
        _o.odDataWeighting = this.odDataWeighting();
        _o.odConvergenceCriteria = this.odConvergenceCriteria();
        _o.odEstParameters = this.bb.createScalarList(this.odEstParameters.bind(this), this.odEstParametersLength());
        _o.odAprioriData = this.odAprioriData();
        _o.odResiduals = this.odResiduals();
    }
}
export class OrbitDeterminationT {
    constructor(odId = null, odPrevId = null, odAlgorithm = null, odMethod = null, odEpoch = null, odTimeTag = null, odProcessNoise = null, odCovReduction = null, odNoiseModels = null, odObservationsType = [], odObservationsUsed = 0, odTracksUsed = 0, odDataWeighting = null, odConvergenceCriteria = null, odEstParameters = [], odAprioriData = null, odResiduals = null) {
        this.odId = odId;
        this.odPrevId = odPrevId;
        this.odAlgorithm = odAlgorithm;
        this.odMethod = odMethod;
        this.odEpoch = odEpoch;
        this.odTimeTag = odTimeTag;
        this.odProcessNoise = odProcessNoise;
        this.odCovReduction = odCovReduction;
        this.odNoiseModels = odNoiseModels;
        this.odObservationsType = odObservationsType;
        this.odObservationsUsed = odObservationsUsed;
        this.odTracksUsed = odTracksUsed;
        this.odDataWeighting = odDataWeighting;
        this.odConvergenceCriteria = odConvergenceCriteria;
        this.odEstParameters = odEstParameters;
        this.odAprioriData = odAprioriData;
        this.odResiduals = odResiduals;
    }
    pack(builder) {
        const odId = (this.odId !== null ? builder.createString(this.odId) : 0);
        const odPrevId = (this.odPrevId !== null ? builder.createString(this.odPrevId) : 0);
        const odAlgorithm = (this.odAlgorithm !== null ? builder.createString(this.odAlgorithm) : 0);
        const odMethod = (this.odMethod !== null ? builder.createString(this.odMethod) : 0);
        const odEpoch = (this.odEpoch !== null ? builder.createString(this.odEpoch) : 0);
        const odTimeTag = (this.odTimeTag !== null ? builder.createString(this.odTimeTag) : 0);
        const odProcessNoise = (this.odProcessNoise !== null ? builder.createString(this.odProcessNoise) : 0);
        const odCovReduction = (this.odCovReduction !== null ? builder.createString(this.odCovReduction) : 0);
        const odNoiseModels = (this.odNoiseModels !== null ? builder.createString(this.odNoiseModels) : 0);
        const odObservationsType = OrbitDetermination.createOdObservationsTypeVector(builder, builder.createObjectOffsetList(this.odObservationsType));
        const odDataWeighting = (this.odDataWeighting !== null ? builder.createString(this.odDataWeighting) : 0);
        const odConvergenceCriteria = (this.odConvergenceCriteria !== null ? builder.createString(this.odConvergenceCriteria) : 0);
        const odEstParameters = OrbitDetermination.createOdEstParametersVector(builder, builder.createObjectOffsetList(this.odEstParameters));
        const odAprioriData = (this.odAprioriData !== null ? builder.createString(this.odAprioriData) : 0);
        const odResiduals = (this.odResiduals !== null ? builder.createString(this.odResiduals) : 0);
        return OrbitDetermination.createOrbitDetermination(builder, odId, odPrevId, odAlgorithm, odMethod, odEpoch, odTimeTag, odProcessNoise, odCovReduction, odNoiseModels, odObservationsType, this.odObservationsUsed, this.odTracksUsed, odDataWeighting, odConvergenceCriteria, odEstParameters, odAprioriData, odResiduals);
    }
}
