// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { Header } from './header.js';
import { Maneuver } from './maneuver.js';
import { Metadata } from './metadata.js';
import { OrbitDetermination } from './orbit-determination.js';
import { Perturbations } from './perturbations.js';
import { PhysicalProperties } from './physical-properties.js';
import { StateVector } from './state-vector.js';
import { UserDefinedParameters } from './user-defined-parameters.js';
/**
 * Orbit Comprehensive Message
 */
export class OCM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsOCM(bb, obj) {
        return (obj || new OCM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsOCM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new OCM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$OCM');
    }
    /**
     * Header section of the OCM.
     */
    header(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new Header()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    /**
     * Metadata section of the OCM.
     */
    metadata(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new Metadata()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    trajType(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * State vector data.
     */
    stateData(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new StateVector()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    stateDataLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Physical properties of the space object.
     */
    physicalProperties(obj) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new PhysicalProperties()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    /**
     * Covariance data associated with the state vectors.
     */
    covarianceData(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new StateVector()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    covarianceDataLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Maneuver data.
     */
    maneuverData(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? (obj || new Maneuver()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    maneuverDataLength() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Perturbations parameters used.
     */
    perturbations(obj) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new Perturbations()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    /**
     * Orbit determination data.
     */
    orbitDetermination(obj) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? (obj || new OrbitDetermination()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    /**
     * User-defined parameters and supplemental comments.
     */
    userDefinedParameters(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? (obj || new UserDefinedParameters()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    userDefinedParametersLength() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startOCM(builder) {
        builder.startObject(10);
    }
    static addHeader(builder, headerOffset) {
        builder.addFieldOffset(0, headerOffset, 0);
    }
    static addMetadata(builder, metadataOffset) {
        builder.addFieldOffset(1, metadataOffset, 0);
    }
    static addTrajType(builder, trajTypeOffset) {
        builder.addFieldOffset(2, trajTypeOffset, 0);
    }
    static addStateData(builder, stateDataOffset) {
        builder.addFieldOffset(3, stateDataOffset, 0);
    }
    static createStateDataVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startStateDataVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addPhysicalProperties(builder, physicalPropertiesOffset) {
        builder.addFieldOffset(4, physicalPropertiesOffset, 0);
    }
    static addCovarianceData(builder, covarianceDataOffset) {
        builder.addFieldOffset(5, covarianceDataOffset, 0);
    }
    static createCovarianceDataVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startCovarianceDataVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addManeuverData(builder, maneuverDataOffset) {
        builder.addFieldOffset(6, maneuverDataOffset, 0);
    }
    static createManeuverDataVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startManeuverDataVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addPerturbations(builder, perturbationsOffset) {
        builder.addFieldOffset(7, perturbationsOffset, 0);
    }
    static addOrbitDetermination(builder, orbitDeterminationOffset) {
        builder.addFieldOffset(8, orbitDeterminationOffset, 0);
    }
    static addUserDefinedParameters(builder, userDefinedParametersOffset) {
        builder.addFieldOffset(9, userDefinedParametersOffset, 0);
    }
    static createUserDefinedParametersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startUserDefinedParametersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endOCM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishOCMBuffer(builder, offset) {
        builder.finish(offset, '$OCM');
    }
    static finishSizePrefixedOCMBuffer(builder, offset) {
        builder.finish(offset, '$OCM', true);
    }
    unpack() {
        return new OCMT((this.header() !== null ? this.header().unpack() : null), (this.metadata() !== null ? this.metadata().unpack() : null), this.trajType(), this.bb.createObjList(this.stateData.bind(this), this.stateDataLength()), (this.physicalProperties() !== null ? this.physicalProperties().unpack() : null), this.bb.createObjList(this.covarianceData.bind(this), this.covarianceDataLength()), this.bb.createObjList(this.maneuverData.bind(this), this.maneuverDataLength()), (this.perturbations() !== null ? this.perturbations().unpack() : null), (this.orbitDetermination() !== null ? this.orbitDetermination().unpack() : null), this.bb.createObjList(this.userDefinedParameters.bind(this), this.userDefinedParametersLength()));
    }
    unpackTo(_o) {
        _o.header = (this.header() !== null ? this.header().unpack() : null);
        _o.metadata = (this.metadata() !== null ? this.metadata().unpack() : null);
        _o.trajType = this.trajType();
        _o.stateData = this.bb.createObjList(this.stateData.bind(this), this.stateDataLength());
        _o.physicalProperties = (this.physicalProperties() !== null ? this.physicalProperties().unpack() : null);
        _o.covarianceData = this.bb.createObjList(this.covarianceData.bind(this), this.covarianceDataLength());
        _o.maneuverData = this.bb.createObjList(this.maneuverData.bind(this), this.maneuverDataLength());
        _o.perturbations = (this.perturbations() !== null ? this.perturbations().unpack() : null);
        _o.orbitDetermination = (this.orbitDetermination() !== null ? this.orbitDetermination().unpack() : null);
        _o.userDefinedParameters = this.bb.createObjList(this.userDefinedParameters.bind(this), this.userDefinedParametersLength());
    }
}
export class OCMT {
    constructor(header = null, metadata = null, trajType = null, stateData = [], physicalProperties = null, covarianceData = [], maneuverData = [], perturbations = null, orbitDetermination = null, userDefinedParameters = []) {
        this.header = header;
        this.metadata = metadata;
        this.trajType = trajType;
        this.stateData = stateData;
        this.physicalProperties = physicalProperties;
        this.covarianceData = covarianceData;
        this.maneuverData = maneuverData;
        this.perturbations = perturbations;
        this.orbitDetermination = orbitDetermination;
        this.userDefinedParameters = userDefinedParameters;
    }
    pack(builder) {
        const header = (this.header !== null ? this.header.pack(builder) : 0);
        const metadata = (this.metadata !== null ? this.metadata.pack(builder) : 0);
        const trajType = (this.trajType !== null ? builder.createString(this.trajType) : 0);
        const stateData = OCM.createStateDataVector(builder, builder.createObjectOffsetList(this.stateData));
        const physicalProperties = (this.physicalProperties !== null ? this.physicalProperties.pack(builder) : 0);
        const covarianceData = OCM.createCovarianceDataVector(builder, builder.createObjectOffsetList(this.covarianceData));
        const maneuverData = OCM.createManeuverDataVector(builder, builder.createObjectOffsetList(this.maneuverData));
        const perturbations = (this.perturbations !== null ? this.perturbations.pack(builder) : 0);
        const orbitDetermination = (this.orbitDetermination !== null ? this.orbitDetermination.pack(builder) : 0);
        const userDefinedParameters = OCM.createUserDefinedParametersVector(builder, builder.createObjectOffsetList(this.userDefinedParameters));
        OCM.startOCM(builder);
        OCM.addHeader(builder, header);
        OCM.addMetadata(builder, metadata);
        OCM.addTrajType(builder, trajType);
        OCM.addStateData(builder, stateData);
        OCM.addPhysicalProperties(builder, physicalProperties);
        OCM.addCovarianceData(builder, covarianceData);
        OCM.addManeuverData(builder, maneuverData);
        OCM.addPerturbations(builder, perturbations);
        OCM.addOrbitDetermination(builder, orbitDetermination);
        OCM.addUserDefinedParameters(builder, userDefinedParameters);
        return OCM.endOCM(builder);
    }
}
