// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class Perturbations {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPerturbations(bb, obj) {
        return (obj || new Perturbations()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPerturbations(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Perturbations()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    comment(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    commentLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    atmosphericModel(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    gravityModel(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Degree of the gravity model.
     */
    gravityDegree() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Order of the gravity model.
     */
    gravityOrder() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Gravitational constant times the mass of the central body.
     */
    gm() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    nBodyPerturbations(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    nBodyPerturbationsLength() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    oceanTidesModel(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    solidTidesModel(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    atmosphericTidesModel(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    geopotentialModel(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    solarRadPressure(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    albedo(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    thermal(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    relativity(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    atmosphericDrag(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Fixed geomagnetic Kp index used.
     */
    fixedGeomagKp() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Fixed F10.7 solar flux value used.
     */
    fixedF10P7() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Fixed mean F10.7 solar flux value used.
     */
    fixedF10P7Mean() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startPerturbations(builder) {
        builder.startObject(19);
    }
    static addComment(builder, commentOffset) {
        builder.addFieldOffset(0, commentOffset, 0);
    }
    static createCommentVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startCommentVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addAtmosphericModel(builder, atmosphericModelOffset) {
        builder.addFieldOffset(1, atmosphericModelOffset, 0);
    }
    static addGravityModel(builder, gravityModelOffset) {
        builder.addFieldOffset(2, gravityModelOffset, 0);
    }
    static addGravityDegree(builder, gravityDegree) {
        builder.addFieldInt32(3, gravityDegree, 0);
    }
    static addGravityOrder(builder, gravityOrder) {
        builder.addFieldInt32(4, gravityOrder, 0);
    }
    static addGm(builder, gm) {
        builder.addFieldFloat64(5, gm, 0.0);
    }
    static addNBodyPerturbations(builder, nBodyPerturbationsOffset) {
        builder.addFieldOffset(6, nBodyPerturbationsOffset, 0);
    }
    static createNBodyPerturbationsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startNBodyPerturbationsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addOceanTidesModel(builder, oceanTidesModelOffset) {
        builder.addFieldOffset(7, oceanTidesModelOffset, 0);
    }
    static addSolidTidesModel(builder, solidTidesModelOffset) {
        builder.addFieldOffset(8, solidTidesModelOffset, 0);
    }
    static addAtmosphericTidesModel(builder, atmosphericTidesModelOffset) {
        builder.addFieldOffset(9, atmosphericTidesModelOffset, 0);
    }
    static addGeopotentialModel(builder, geopotentialModelOffset) {
        builder.addFieldOffset(10, geopotentialModelOffset, 0);
    }
    static addSolarRadPressure(builder, solarRadPressureOffset) {
        builder.addFieldOffset(11, solarRadPressureOffset, 0);
    }
    static addAlbedo(builder, albedoOffset) {
        builder.addFieldOffset(12, albedoOffset, 0);
    }
    static addThermal(builder, thermalOffset) {
        builder.addFieldOffset(13, thermalOffset, 0);
    }
    static addRelativity(builder, relativityOffset) {
        builder.addFieldOffset(14, relativityOffset, 0);
    }
    static addAtmosphericDrag(builder, atmosphericDragOffset) {
        builder.addFieldOffset(15, atmosphericDragOffset, 0);
    }
    static addFixedGeomagKp(builder, fixedGeomagKp) {
        builder.addFieldFloat64(16, fixedGeomagKp, 0.0);
    }
    static addFixedF10P7(builder, fixedF10P7) {
        builder.addFieldFloat64(17, fixedF10P7, 0.0);
    }
    static addFixedF10P7Mean(builder, fixedF10P7Mean) {
        builder.addFieldFloat64(18, fixedF10P7Mean, 0.0);
    }
    static endPerturbations(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createPerturbations(builder, commentOffset, atmosphericModelOffset, gravityModelOffset, gravityDegree, gravityOrder, gm, nBodyPerturbationsOffset, oceanTidesModelOffset, solidTidesModelOffset, atmosphericTidesModelOffset, geopotentialModelOffset, solarRadPressureOffset, albedoOffset, thermalOffset, relativityOffset, atmosphericDragOffset, fixedGeomagKp, fixedF10P7, fixedF10P7Mean) {
        Perturbations.startPerturbations(builder);
        Perturbations.addComment(builder, commentOffset);
        Perturbations.addAtmosphericModel(builder, atmosphericModelOffset);
        Perturbations.addGravityModel(builder, gravityModelOffset);
        Perturbations.addGravityDegree(builder, gravityDegree);
        Perturbations.addGravityOrder(builder, gravityOrder);
        Perturbations.addGm(builder, gm);
        Perturbations.addNBodyPerturbations(builder, nBodyPerturbationsOffset);
        Perturbations.addOceanTidesModel(builder, oceanTidesModelOffset);
        Perturbations.addSolidTidesModel(builder, solidTidesModelOffset);
        Perturbations.addAtmosphericTidesModel(builder, atmosphericTidesModelOffset);
        Perturbations.addGeopotentialModel(builder, geopotentialModelOffset);
        Perturbations.addSolarRadPressure(builder, solarRadPressureOffset);
        Perturbations.addAlbedo(builder, albedoOffset);
        Perturbations.addThermal(builder, thermalOffset);
        Perturbations.addRelativity(builder, relativityOffset);
        Perturbations.addAtmosphericDrag(builder, atmosphericDragOffset);
        Perturbations.addFixedGeomagKp(builder, fixedGeomagKp);
        Perturbations.addFixedF10P7(builder, fixedF10P7);
        Perturbations.addFixedF10P7Mean(builder, fixedF10P7Mean);
        return Perturbations.endPerturbations(builder);
    }
    unpack() {
        return new PerturbationsT(this.bb.createScalarList(this.comment.bind(this), this.commentLength()), this.atmosphericModel(), this.gravityModel(), this.gravityDegree(), this.gravityOrder(), this.gm(), this.bb.createScalarList(this.nBodyPerturbations.bind(this), this.nBodyPerturbationsLength()), this.oceanTidesModel(), this.solidTidesModel(), this.atmosphericTidesModel(), this.geopotentialModel(), this.solarRadPressure(), this.albedo(), this.thermal(), this.relativity(), this.atmosphericDrag(), this.fixedGeomagKp(), this.fixedF10P7(), this.fixedF10P7Mean());
    }
    unpackTo(_o) {
        _o.comment = this.bb.createScalarList(this.comment.bind(this), this.commentLength());
        _o.atmosphericModel = this.atmosphericModel();
        _o.gravityModel = this.gravityModel();
        _o.gravityDegree = this.gravityDegree();
        _o.gravityOrder = this.gravityOrder();
        _o.gm = this.gm();
        _o.nBodyPerturbations = this.bb.createScalarList(this.nBodyPerturbations.bind(this), this.nBodyPerturbationsLength());
        _o.oceanTidesModel = this.oceanTidesModel();
        _o.solidTidesModel = this.solidTidesModel();
        _o.atmosphericTidesModel = this.atmosphericTidesModel();
        _o.geopotentialModel = this.geopotentialModel();
        _o.solarRadPressure = this.solarRadPressure();
        _o.albedo = this.albedo();
        _o.thermal = this.thermal();
        _o.relativity = this.relativity();
        _o.atmosphericDrag = this.atmosphericDrag();
        _o.fixedGeomagKp = this.fixedGeomagKp();
        _o.fixedF10P7 = this.fixedF10P7();
        _o.fixedF10P7Mean = this.fixedF10P7Mean();
    }
}
export class PerturbationsT {
    constructor(comment = [], atmosphericModel = null, gravityModel = null, gravityDegree = 0, gravityOrder = 0, gm = 0.0, nBodyPerturbations = [], oceanTidesModel = null, solidTidesModel = null, atmosphericTidesModel = null, geopotentialModel = null, solarRadPressure = null, albedo = null, thermal = null, relativity = null, atmosphericDrag = null, fixedGeomagKp = 0.0, fixedF10P7 = 0.0, fixedF10P7Mean = 0.0) {
        this.comment = comment;
        this.atmosphericModel = atmosphericModel;
        this.gravityModel = gravityModel;
        this.gravityDegree = gravityDegree;
        this.gravityOrder = gravityOrder;
        this.gm = gm;
        this.nBodyPerturbations = nBodyPerturbations;
        this.oceanTidesModel = oceanTidesModel;
        this.solidTidesModel = solidTidesModel;
        this.atmosphericTidesModel = atmosphericTidesModel;
        this.geopotentialModel = geopotentialModel;
        this.solarRadPressure = solarRadPressure;
        this.albedo = albedo;
        this.thermal = thermal;
        this.relativity = relativity;
        this.atmosphericDrag = atmosphericDrag;
        this.fixedGeomagKp = fixedGeomagKp;
        this.fixedF10P7 = fixedF10P7;
        this.fixedF10P7Mean = fixedF10P7Mean;
    }
    pack(builder) {
        const comment = Perturbations.createCommentVector(builder, builder.createObjectOffsetList(this.comment));
        const atmosphericModel = (this.atmosphericModel !== null ? builder.createString(this.atmosphericModel) : 0);
        const gravityModel = (this.gravityModel !== null ? builder.createString(this.gravityModel) : 0);
        const nBodyPerturbations = Perturbations.createNBodyPerturbationsVector(builder, builder.createObjectOffsetList(this.nBodyPerturbations));
        const oceanTidesModel = (this.oceanTidesModel !== null ? builder.createString(this.oceanTidesModel) : 0);
        const solidTidesModel = (this.solidTidesModel !== null ? builder.createString(this.solidTidesModel) : 0);
        const atmosphericTidesModel = (this.atmosphericTidesModel !== null ? builder.createString(this.atmosphericTidesModel) : 0);
        const geopotentialModel = (this.geopotentialModel !== null ? builder.createString(this.geopotentialModel) : 0);
        const solarRadPressure = (this.solarRadPressure !== null ? builder.createString(this.solarRadPressure) : 0);
        const albedo = (this.albedo !== null ? builder.createString(this.albedo) : 0);
        const thermal = (this.thermal !== null ? builder.createString(this.thermal) : 0);
        const relativity = (this.relativity !== null ? builder.createString(this.relativity) : 0);
        const atmosphericDrag = (this.atmosphericDrag !== null ? builder.createString(this.atmosphericDrag) : 0);
        return Perturbations.createPerturbations(builder, comment, atmosphericModel, gravityModel, this.gravityDegree, this.gravityOrder, this.gm, nBodyPerturbations, oceanTidesModel, solidTidesModel, atmosphericTidesModel, geopotentialModel, solarRadPressure, albedo, thermal, relativity, atmosphericDrag, this.fixedGeomagKp, this.fixedF10P7, this.fixedF10P7Mean);
    }
}
