// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class PhysicalProperties {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPhysicalProperties(bb, obj) {
        return (obj || new PhysicalProperties()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPhysicalProperties(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PhysicalProperties()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    comment(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    commentLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Wet mass of the space object.
     */
    wetMass() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Dry mass of the space object.
     */
    dryMass() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    massUnits(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Quaternion component q1 of orientation from OEB to EME2000.
     */
    oebQ1() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Quaternion component q2.
     */
    oebQ2() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Quaternion component q3.
     */
    oebQ3() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Quaternion scalar component qc.
     */
    oebQc() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Maximum dimension of the object along OEB frame axes.
     */
    oebMax() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Intermediate dimension along OEB frame axes.
     */
    oebInt() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Minimum dimension of the object along OEB frame axes.
     */
    oebMin() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Area along OEB_MAX axis.
     */
    areaAlongOebMax() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Area along OEB_INT axis.
     */
    areaAlongOebInt() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Area along OEB_MIN axis.
     */
    areaAlongOebMin() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    areaUnits(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Constant area for drag computations.
     */
    dragConstArea() {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Nominal drag coefficient.
     */
    dragCoeffNom() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Uncertainty in the drag coefficient.
     */
    dragUncertainty() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Constant area for solar radiation pressure computations.
     */
    srpConstArea() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Nominal solar radiation pressure coefficient.
     */
    solarRadCoeff() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Uncertainty in the solar radiation pressure coefficient.
     */
    srpUncertainty() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startPhysicalProperties(builder) {
        builder.startObject(21);
    }
    static addComment(builder, commentOffset) {
        builder.addFieldOffset(0, commentOffset, 0);
    }
    static createCommentVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startCommentVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addWetMass(builder, wetMass) {
        builder.addFieldFloat64(1, wetMass, 0.0);
    }
    static addDryMass(builder, dryMass) {
        builder.addFieldFloat64(2, dryMass, 0.0);
    }
    static addMassUnits(builder, massUnitsOffset) {
        builder.addFieldOffset(3, massUnitsOffset, 0);
    }
    static addOebQ1(builder, oebQ1) {
        builder.addFieldFloat64(4, oebQ1, 0.0);
    }
    static addOebQ2(builder, oebQ2) {
        builder.addFieldFloat64(5, oebQ2, 0.0);
    }
    static addOebQ3(builder, oebQ3) {
        builder.addFieldFloat64(6, oebQ3, 0.0);
    }
    static addOebQc(builder, oebQc) {
        builder.addFieldFloat64(7, oebQc, 0.0);
    }
    static addOebMax(builder, oebMax) {
        builder.addFieldFloat64(8, oebMax, 0.0);
    }
    static addOebInt(builder, oebInt) {
        builder.addFieldFloat64(9, oebInt, 0.0);
    }
    static addOebMin(builder, oebMin) {
        builder.addFieldFloat64(10, oebMin, 0.0);
    }
    static addAreaAlongOebMax(builder, areaAlongOebMax) {
        builder.addFieldFloat64(11, areaAlongOebMax, 0.0);
    }
    static addAreaAlongOebInt(builder, areaAlongOebInt) {
        builder.addFieldFloat64(12, areaAlongOebInt, 0.0);
    }
    static addAreaAlongOebMin(builder, areaAlongOebMin) {
        builder.addFieldFloat64(13, areaAlongOebMin, 0.0);
    }
    static addAreaUnits(builder, areaUnitsOffset) {
        builder.addFieldOffset(14, areaUnitsOffset, 0);
    }
    static addDragConstArea(builder, dragConstArea) {
        builder.addFieldFloat64(15, dragConstArea, 0.0);
    }
    static addDragCoeffNom(builder, dragCoeffNom) {
        builder.addFieldFloat64(16, dragCoeffNom, 0.0);
    }
    static addDragUncertainty(builder, dragUncertainty) {
        builder.addFieldFloat64(17, dragUncertainty, 0.0);
    }
    static addSrpConstArea(builder, srpConstArea) {
        builder.addFieldFloat64(18, srpConstArea, 0.0);
    }
    static addSolarRadCoeff(builder, solarRadCoeff) {
        builder.addFieldFloat64(19, solarRadCoeff, 0.0);
    }
    static addSrpUncertainty(builder, srpUncertainty) {
        builder.addFieldFloat64(20, srpUncertainty, 0.0);
    }
    static endPhysicalProperties(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createPhysicalProperties(builder, commentOffset, wetMass, dryMass, massUnitsOffset, oebQ1, oebQ2, oebQ3, oebQc, oebMax, oebInt, oebMin, areaAlongOebMax, areaAlongOebInt, areaAlongOebMin, areaUnitsOffset, dragConstArea, dragCoeffNom, dragUncertainty, srpConstArea, solarRadCoeff, srpUncertainty) {
        PhysicalProperties.startPhysicalProperties(builder);
        PhysicalProperties.addComment(builder, commentOffset);
        PhysicalProperties.addWetMass(builder, wetMass);
        PhysicalProperties.addDryMass(builder, dryMass);
        PhysicalProperties.addMassUnits(builder, massUnitsOffset);
        PhysicalProperties.addOebQ1(builder, oebQ1);
        PhysicalProperties.addOebQ2(builder, oebQ2);
        PhysicalProperties.addOebQ3(builder, oebQ3);
        PhysicalProperties.addOebQc(builder, oebQc);
        PhysicalProperties.addOebMax(builder, oebMax);
        PhysicalProperties.addOebInt(builder, oebInt);
        PhysicalProperties.addOebMin(builder, oebMin);
        PhysicalProperties.addAreaAlongOebMax(builder, areaAlongOebMax);
        PhysicalProperties.addAreaAlongOebInt(builder, areaAlongOebInt);
        PhysicalProperties.addAreaAlongOebMin(builder, areaAlongOebMin);
        PhysicalProperties.addAreaUnits(builder, areaUnitsOffset);
        PhysicalProperties.addDragConstArea(builder, dragConstArea);
        PhysicalProperties.addDragCoeffNom(builder, dragCoeffNom);
        PhysicalProperties.addDragUncertainty(builder, dragUncertainty);
        PhysicalProperties.addSrpConstArea(builder, srpConstArea);
        PhysicalProperties.addSolarRadCoeff(builder, solarRadCoeff);
        PhysicalProperties.addSrpUncertainty(builder, srpUncertainty);
        return PhysicalProperties.endPhysicalProperties(builder);
    }
    unpack() {
        return new PhysicalPropertiesT(this.bb.createScalarList(this.comment.bind(this), this.commentLength()), this.wetMass(), this.dryMass(), this.massUnits(), this.oebQ1(), this.oebQ2(), this.oebQ3(), this.oebQc(), this.oebMax(), this.oebInt(), this.oebMin(), this.areaAlongOebMax(), this.areaAlongOebInt(), this.areaAlongOebMin(), this.areaUnits(), this.dragConstArea(), this.dragCoeffNom(), this.dragUncertainty(), this.srpConstArea(), this.solarRadCoeff(), this.srpUncertainty());
    }
    unpackTo(_o) {
        _o.comment = this.bb.createScalarList(this.comment.bind(this), this.commentLength());
        _o.wetMass = this.wetMass();
        _o.dryMass = this.dryMass();
        _o.massUnits = this.massUnits();
        _o.oebQ1 = this.oebQ1();
        _o.oebQ2 = this.oebQ2();
        _o.oebQ3 = this.oebQ3();
        _o.oebQc = this.oebQc();
        _o.oebMax = this.oebMax();
        _o.oebInt = this.oebInt();
        _o.oebMin = this.oebMin();
        _o.areaAlongOebMax = this.areaAlongOebMax();
        _o.areaAlongOebInt = this.areaAlongOebInt();
        _o.areaAlongOebMin = this.areaAlongOebMin();
        _o.areaUnits = this.areaUnits();
        _o.dragConstArea = this.dragConstArea();
        _o.dragCoeffNom = this.dragCoeffNom();
        _o.dragUncertainty = this.dragUncertainty();
        _o.srpConstArea = this.srpConstArea();
        _o.solarRadCoeff = this.solarRadCoeff();
        _o.srpUncertainty = this.srpUncertainty();
    }
}
export class PhysicalPropertiesT {
    constructor(comment = [], wetMass = 0.0, dryMass = 0.0, massUnits = null, oebQ1 = 0.0, oebQ2 = 0.0, oebQ3 = 0.0, oebQc = 0.0, oebMax = 0.0, oebInt = 0.0, oebMin = 0.0, areaAlongOebMax = 0.0, areaAlongOebInt = 0.0, areaAlongOebMin = 0.0, areaUnits = null, dragConstArea = 0.0, dragCoeffNom = 0.0, dragUncertainty = 0.0, srpConstArea = 0.0, solarRadCoeff = 0.0, srpUncertainty = 0.0) {
        this.comment = comment;
        this.wetMass = wetMass;
        this.dryMass = dryMass;
        this.massUnits = massUnits;
        this.oebQ1 = oebQ1;
        this.oebQ2 = oebQ2;
        this.oebQ3 = oebQ3;
        this.oebQc = oebQc;
        this.oebMax = oebMax;
        this.oebInt = oebInt;
        this.oebMin = oebMin;
        this.areaAlongOebMax = areaAlongOebMax;
        this.areaAlongOebInt = areaAlongOebInt;
        this.areaAlongOebMin = areaAlongOebMin;
        this.areaUnits = areaUnits;
        this.dragConstArea = dragConstArea;
        this.dragCoeffNom = dragCoeffNom;
        this.dragUncertainty = dragUncertainty;
        this.srpConstArea = srpConstArea;
        this.solarRadCoeff = solarRadCoeff;
        this.srpUncertainty = srpUncertainty;
    }
    pack(builder) {
        const comment = PhysicalProperties.createCommentVector(builder, builder.createObjectOffsetList(this.comment));
        const massUnits = (this.massUnits !== null ? builder.createString(this.massUnits) : 0);
        const areaUnits = (this.areaUnits !== null ? builder.createString(this.areaUnits) : 0);
        return PhysicalProperties.createPhysicalProperties(builder, comment, this.wetMass, this.dryMass, massUnits, this.oebQ1, this.oebQ2, this.oebQ3, this.oebQc, this.oebMax, this.oebInt, this.oebMin, this.areaAlongOebMax, this.areaAlongOebInt, this.areaAlongOebMin, areaUnits, this.dragConstArea, this.dragCoeffNom, this.dragUncertainty, this.srpConstArea, this.solarRadCoeff, this.srpUncertainty);
    }
}
