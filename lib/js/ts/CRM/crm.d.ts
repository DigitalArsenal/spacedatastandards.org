import * as flatbuffers from 'flatbuffers';
/**
 * Collection Request Message
 */
export declare class CRM implements flatbuffers.IUnpackableObject<CRMT> {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): CRM;
    static getRootAsCRM(bb: flatbuffers.ByteBuffer, obj?: CRM): CRM;
    static getSizePrefixedRootAsCRM(bb: flatbuffers.ByteBuffer, obj?: CRM): CRM;
    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean;
    /**
     * Unique identifier of the record, auto-generated by the system.
     */
    id(): string | null;
    id(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     */
    classification(): string | null;
    classification(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * The type of this collect or contact request.
     */
    type(): string | null;
    type(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * Unique identifier of the parent plan or schedule associated with this request.
     */
    idPlan(): string | null;
    idPlan(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * Index number for records within a collection plan or schedule.
     */
    planIndex(): number;
    /**
     * Task ID associated with this request.
     */
    taskId(): string | null;
    taskId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * The dwell ID associated with this request.
     */
    dwellId(): string | null;
    dwellId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * Optional ID from external systems.
     */
    externalId(): string | null;
    externalId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * Unique identifier of the requested/scheduled/planned sensor associated with this request.
     */
    idSensor(): string | null;
    idSensor(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request.
     */
    origSensorId(): string | null;
    origSensorId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * Optional type of observation requested.
     */
    obType(): string | null;
    obType(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * The priority of the collect request.
     */
    priority(): string | null;
    priority(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * The tasking category associated with this request.
     */
    taskCategory(): number;
    /**
     * The tasking suffix associated with this request.
     */
    suffix(): string | null;
    suffix(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * Boolean indicating that this collect request is UCT follow-up.
     */
    uctFollowUp(): boolean;
    /**
     * The start time of the collect or contact request window, in ISO 8601 UTC format.
     */
    startTime(): string | null;
    startTime(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * The end time of the collect or contact request window, in ISO 8601 UTC format.
     */
    endTime(): string | null;
    endTime(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * Satellite/catalog number of the target on-orbit object for this request.
     */
    noradCatId(): number;
    /**
     * Optional identifier provided by the data source to indicate the target object of this request.
     */
    origObjectId(): string | null;
    origObjectId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * The tasking group to which the target object is assigned.
     */
    taskGroup(): string | null;
    taskGroup(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * Inter-Range Operations Number.
     */
    iron(): number;
    /**
     * The orbit regime of the target.
     */
    orbitRegime(): string | null;
    orbitRegime(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * The minimum object (diameter) size, in meters, to be reported.
     */
    targetSize(): number;
    /**
     * The minimum Radar Cross-Section of the target, in m^2.
     */
    rcsMin(): number;
    /**
     * The Radar Cross-Section of the target, in m^2.
     */
    rcs(): number;
    /**
     * The maximum Radar Cross-Section of the target, in m^2.
     */
    rcsMax(): number;
    /**
     * The minimum frequency of interest, in MHz.
     */
    freqMin(): number;
    /**
     * The estimated or expected emission frequency of the target, in MHz.
     */
    freq(): number;
    /**
     * The maximum frequency of interest, in MHz.
     */
    freqMax(): number;
    /**
     * The RF polarization.
     */
    polarization(): string | null;
    polarization(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).
     */
    visMagMin(): number;
    /**
     * The estimated or expected visual magnitude of the target, in Magnitudes (M).
     */
    visMag(): number;
    /**
     * The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).
     */
    visMagMax(): number;
    /**
     * The spectral model used for the irradiance calculation.
     */
    spectralModel(): string | null;
    spectralModel(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * The fraction of solar energy reflected from target.
     */
    reflectance(): number;
    /**
     * The target object irradiance value.
     */
    irradiance(): number;
    /**
     * For optical sensors, the requested number of frames to capture at each sensor step.
     */
    numFrames(): number;
    /**
     * For optical sensors, the frame rate of the camera, in Hz.
     */
    frameRate(): number;
    /**
     * For optical sensors, the integration time per camera frame, in milliseconds.
     */
    integrationTime(): number;
    /**
     * The number of requested tracks on the target.
     */
    numTracks(): number;
    /**
     * The number of requested observations on the target.
     */
    numObs(): number;
    /**
     * The duration of the collect request, in seconds.
     */
    duration(): number;
    /**
     * The search pattern to be executed for this request.
     */
    srchPattern(): string | null;
    srchPattern(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.
     */
    scenario(): string | null;
    scenario(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * ID of the Elset of the object associated with this request.
     */
    idElset(): string | null;
    idElset(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * ID of the Manifold Elset of the object associated with this request.
     */
    idManifold(): string | null;
    idManifold(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * ID of the State Vector of the object or central vector associated with this request.
     */
    idStateVector(): string | null;
    idStateVector(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * ID of the Ephemeris Set of the object associated with this request.
     */
    esId(): string | null;
    esId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * Epoch time, in ISO 8601 UTC format, of the orbital elements.
     */
    epoch(): string | null;
    epoch(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * The average of the periapsis and apoapsis distances, in kilometers.
     */
    semiMajorAxis(): number;
    /**
     * The orbital eccentricity of an astronomical object.
     */
    eccentricity(): number;
    /**
     * The angle, in degrees, between the equator and the orbit plane.
     */
    inclination(): number;
    /**
     * Right ascension of the ascending node, in degrees.
     */
    raan(): number;
    /**
     * The argument of perigee, in degrees.
     */
    argOfPerigee(): number;
    /**
     * The mean anomaly defines the angular position, in degrees, of the object on its orbital path.
     */
    meanAnomaly(): number;
    /**
     * The expected or directed right ascension angle, in degrees.
     */
    ra(): number;
    /**
     * The expected or directed declination angle, in degrees.
     */
    dec(): number;
    /**
     * The expected or directed azimuth angle, in degrees.
     */
    az(): number;
    /**
     * The expected or directed elevation angle, in degrees.
     */
    el(): number;
    /**
     * The expected acquisition range or defined center range, in km.
     */
    range(): number;
    /**
     * The extent of the azimuth angle, in degrees, from center azimuth.
     */
    extentAz(): number;
    /**
     * The extent of the elevation angle, in degrees, from center elevation.
     */
    extentEl(): number;
    /**
     * The extent of the range, in km, from center range.
     */
    extentRange(): number;
    /**
     * WGS-84 latitude, in degrees.
     */
    lat(): number;
    /**
     * WGS-84 longitude, in degrees.
     */
    lon(): number;
    /**
     * Height above WGS-84 ellipsoid (HAE), in kilometers.
     */
    alt(): number;
    /**
     * The stopping WGS-84 latitude of a volume definition, in degrees.
     */
    stopLat(): number;
    /**
     * The stopping WGS-84 longitude of a volume definition, in degrees.
     */
    stopLon(): number;
    /**
     * The stopping HAE WGS-84 height above ellipsoid (HAE), in kilometers.
     */
    stopAlt(): number;
    /**
     * The maximum inclination, in degrees, to be used in search operations.
     */
    srchInc(): number;
    /**
     * The angular distance, in degrees, in the sensor-x direction from scan center.
     */
    xAngle(): number;
    /**
     * The angular distance, in degrees, in the sensor-y direction from scan center.
     */
    yAngle(): number;
    /**
     * The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.
     */
    orientAngle(): number;
    /**
     * The customer for this request.
     */
    customer(): string | null;
    customer(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     * Notes or comments associated with this request.
     */
    notes(): string | null;
    notes(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     *  Source of the data.
     */
    source(): string | null;
    source(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     *  Originating system or organization which produced the data, if different from the source.
     */
    origin(): string | null;
    origin(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    /**
     *  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data.
     */
    dataMode(): string | null;
    dataMode(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    static startCRM(builder: flatbuffers.Builder): void;
    static addId(builder: flatbuffers.Builder, idOffset: flatbuffers.Offset): void;
    static addClassification(builder: flatbuffers.Builder, classificationOffset: flatbuffers.Offset): void;
    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset): void;
    static addIdPlan(builder: flatbuffers.Builder, idPlanOffset: flatbuffers.Offset): void;
    static addPlanIndex(builder: flatbuffers.Builder, planIndex: number): void;
    static addTaskId(builder: flatbuffers.Builder, taskIdOffset: flatbuffers.Offset): void;
    static addDwellId(builder: flatbuffers.Builder, dwellIdOffset: flatbuffers.Offset): void;
    static addExternalId(builder: flatbuffers.Builder, externalIdOffset: flatbuffers.Offset): void;
    static addIdSensor(builder: flatbuffers.Builder, idSensorOffset: flatbuffers.Offset): void;
    static addOrigSensorId(builder: flatbuffers.Builder, origSensorIdOffset: flatbuffers.Offset): void;
    static addObType(builder: flatbuffers.Builder, obTypeOffset: flatbuffers.Offset): void;
    static addPriority(builder: flatbuffers.Builder, priorityOffset: flatbuffers.Offset): void;
    static addTaskCategory(builder: flatbuffers.Builder, taskCategory: number): void;
    static addSuffix(builder: flatbuffers.Builder, suffixOffset: flatbuffers.Offset): void;
    static addUctFollowUp(builder: flatbuffers.Builder, uctFollowUp: boolean): void;
    static addStartTime(builder: flatbuffers.Builder, startTimeOffset: flatbuffers.Offset): void;
    static addEndTime(builder: flatbuffers.Builder, endTimeOffset: flatbuffers.Offset): void;
    static addNoradCatId(builder: flatbuffers.Builder, noradCatId: number): void;
    static addOrigObjectId(builder: flatbuffers.Builder, origObjectIdOffset: flatbuffers.Offset): void;
    static addTaskGroup(builder: flatbuffers.Builder, taskGroupOffset: flatbuffers.Offset): void;
    static addIron(builder: flatbuffers.Builder, iron: number): void;
    static addOrbitRegime(builder: flatbuffers.Builder, orbitRegimeOffset: flatbuffers.Offset): void;
    static addTargetSize(builder: flatbuffers.Builder, targetSize: number): void;
    static addRcsMin(builder: flatbuffers.Builder, rcsMin: number): void;
    static addRcs(builder: flatbuffers.Builder, rcs: number): void;
    static addRcsMax(builder: flatbuffers.Builder, rcsMax: number): void;
    static addFreqMin(builder: flatbuffers.Builder, freqMin: number): void;
    static addFreq(builder: flatbuffers.Builder, freq: number): void;
    static addFreqMax(builder: flatbuffers.Builder, freqMax: number): void;
    static addPolarization(builder: flatbuffers.Builder, polarizationOffset: flatbuffers.Offset): void;
    static addVisMagMin(builder: flatbuffers.Builder, visMagMin: number): void;
    static addVisMag(builder: flatbuffers.Builder, visMag: number): void;
    static addVisMagMax(builder: flatbuffers.Builder, visMagMax: number): void;
    static addSpectralModel(builder: flatbuffers.Builder, spectralModelOffset: flatbuffers.Offset): void;
    static addReflectance(builder: flatbuffers.Builder, reflectance: number): void;
    static addIrradiance(builder: flatbuffers.Builder, irradiance: number): void;
    static addNumFrames(builder: flatbuffers.Builder, numFrames: number): void;
    static addFrameRate(builder: flatbuffers.Builder, frameRate: number): void;
    static addIntegrationTime(builder: flatbuffers.Builder, integrationTime: number): void;
    static addNumTracks(builder: flatbuffers.Builder, numTracks: number): void;
    static addNumObs(builder: flatbuffers.Builder, numObs: number): void;
    static addDuration(builder: flatbuffers.Builder, duration: number): void;
    static addSrchPattern(builder: flatbuffers.Builder, srchPatternOffset: flatbuffers.Offset): void;
    static addScenario(builder: flatbuffers.Builder, scenarioOffset: flatbuffers.Offset): void;
    static addIdElset(builder: flatbuffers.Builder, idElsetOffset: flatbuffers.Offset): void;
    static addIdManifold(builder: flatbuffers.Builder, idManifoldOffset: flatbuffers.Offset): void;
    static addIdStateVector(builder: flatbuffers.Builder, idStateVectorOffset: flatbuffers.Offset): void;
    static addEsId(builder: flatbuffers.Builder, esIdOffset: flatbuffers.Offset): void;
    static addEpoch(builder: flatbuffers.Builder, epochOffset: flatbuffers.Offset): void;
    static addSemiMajorAxis(builder: flatbuffers.Builder, semiMajorAxis: number): void;
    static addEccentricity(builder: flatbuffers.Builder, eccentricity: number): void;
    static addInclination(builder: flatbuffers.Builder, inclination: number): void;
    static addRaan(builder: flatbuffers.Builder, raan: number): void;
    static addArgOfPerigee(builder: flatbuffers.Builder, argOfPerigee: number): void;
    static addMeanAnomaly(builder: flatbuffers.Builder, meanAnomaly: number): void;
    static addRa(builder: flatbuffers.Builder, ra: number): void;
    static addDec(builder: flatbuffers.Builder, dec: number): void;
    static addAz(builder: flatbuffers.Builder, az: number): void;
    static addEl(builder: flatbuffers.Builder, el: number): void;
    static addRange(builder: flatbuffers.Builder, range: number): void;
    static addExtentAz(builder: flatbuffers.Builder, extentAz: number): void;
    static addExtentEl(builder: flatbuffers.Builder, extentEl: number): void;
    static addExtentRange(builder: flatbuffers.Builder, extentRange: number): void;
    static addLat(builder: flatbuffers.Builder, lat: number): void;
    static addLon(builder: flatbuffers.Builder, lon: number): void;
    static addAlt(builder: flatbuffers.Builder, alt: number): void;
    static addStopLat(builder: flatbuffers.Builder, stopLat: number): void;
    static addStopLon(builder: flatbuffers.Builder, stopLon: number): void;
    static addStopAlt(builder: flatbuffers.Builder, stopAlt: number): void;
    static addSrchInc(builder: flatbuffers.Builder, srchInc: number): void;
    static addXAngle(builder: flatbuffers.Builder, xAngle: number): void;
    static addYAngle(builder: flatbuffers.Builder, yAngle: number): void;
    static addOrientAngle(builder: flatbuffers.Builder, orientAngle: number): void;
    static addCustomer(builder: flatbuffers.Builder, customerOffset: flatbuffers.Offset): void;
    static addNotes(builder: flatbuffers.Builder, notesOffset: flatbuffers.Offset): void;
    static addSource(builder: flatbuffers.Builder, sourceOffset: flatbuffers.Offset): void;
    static addOrigin(builder: flatbuffers.Builder, originOffset: flatbuffers.Offset): void;
    static addDataMode(builder: flatbuffers.Builder, dataModeOffset: flatbuffers.Offset): void;
    static endCRM(builder: flatbuffers.Builder): flatbuffers.Offset;
    static finishCRMBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset): void;
    static finishSizePrefixedCRMBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset): void;
    static createCRM(builder: flatbuffers.Builder, idOffset: flatbuffers.Offset, classificationOffset: flatbuffers.Offset, typeOffset: flatbuffers.Offset, idPlanOffset: flatbuffers.Offset, planIndex: number, taskIdOffset: flatbuffers.Offset, dwellIdOffset: flatbuffers.Offset, externalIdOffset: flatbuffers.Offset, idSensorOffset: flatbuffers.Offset, origSensorIdOffset: flatbuffers.Offset, obTypeOffset: flatbuffers.Offset, priorityOffset: flatbuffers.Offset, taskCategory: number, suffixOffset: flatbuffers.Offset, uctFollowUp: boolean, startTimeOffset: flatbuffers.Offset, endTimeOffset: flatbuffers.Offset, noradCatId: number, origObjectIdOffset: flatbuffers.Offset, taskGroupOffset: flatbuffers.Offset, iron: number, orbitRegimeOffset: flatbuffers.Offset, targetSize: number, rcsMin: number, rcs: number, rcsMax: number, freqMin: number, freq: number, freqMax: number, polarizationOffset: flatbuffers.Offset, visMagMin: number, visMag: number, visMagMax: number, spectralModelOffset: flatbuffers.Offset, reflectance: number, irradiance: number, numFrames: number, frameRate: number, integrationTime: number, numTracks: number, numObs: number, duration: number, srchPatternOffset: flatbuffers.Offset, scenarioOffset: flatbuffers.Offset, idElsetOffset: flatbuffers.Offset, idManifoldOffset: flatbuffers.Offset, idStateVectorOffset: flatbuffers.Offset, esIdOffset: flatbuffers.Offset, epochOffset: flatbuffers.Offset, semiMajorAxis: number, eccentricity: number, inclination: number, raan: number, argOfPerigee: number, meanAnomaly: number, ra: number, dec: number, az: number, el: number, range: number, extentAz: number, extentEl: number, extentRange: number, lat: number, lon: number, alt: number, stopLat: number, stopLon: number, stopAlt: number, srchInc: number, xAngle: number, yAngle: number, orientAngle: number, customerOffset: flatbuffers.Offset, notesOffset: flatbuffers.Offset, sourceOffset: flatbuffers.Offset, originOffset: flatbuffers.Offset, dataModeOffset: flatbuffers.Offset): flatbuffers.Offset;
    unpack(): CRMT;
    unpackTo(_o: CRMT): void;
}
export declare class CRMT implements flatbuffers.IGeneratedObject {
    id: string | Uint8Array | null;
    classification: string | Uint8Array | null;
    type: string | Uint8Array | null;
    idPlan: string | Uint8Array | null;
    planIndex: number;
    taskId: string | Uint8Array | null;
    dwellId: string | Uint8Array | null;
    externalId: string | Uint8Array | null;
    idSensor: string | Uint8Array | null;
    origSensorId: string | Uint8Array | null;
    obType: string | Uint8Array | null;
    priority: string | Uint8Array | null;
    taskCategory: number;
    suffix: string | Uint8Array | null;
    uctFollowUp: boolean;
    startTime: string | Uint8Array | null;
    endTime: string | Uint8Array | null;
    noradCatId: number;
    origObjectId: string | Uint8Array | null;
    taskGroup: string | Uint8Array | null;
    iron: number;
    orbitRegime: string | Uint8Array | null;
    targetSize: number;
    rcsMin: number;
    rcs: number;
    rcsMax: number;
    freqMin: number;
    freq: number;
    freqMax: number;
    polarization: string | Uint8Array | null;
    visMagMin: number;
    visMag: number;
    visMagMax: number;
    spectralModel: string | Uint8Array | null;
    reflectance: number;
    irradiance: number;
    numFrames: number;
    frameRate: number;
    integrationTime: number;
    numTracks: number;
    numObs: number;
    duration: number;
    srchPattern: string | Uint8Array | null;
    scenario: string | Uint8Array | null;
    idElset: string | Uint8Array | null;
    idManifold: string | Uint8Array | null;
    idStateVector: string | Uint8Array | null;
    esId: string | Uint8Array | null;
    epoch: string | Uint8Array | null;
    semiMajorAxis: number;
    eccentricity: number;
    inclination: number;
    raan: number;
    argOfPerigee: number;
    meanAnomaly: number;
    ra: number;
    dec: number;
    az: number;
    el: number;
    range: number;
    extentAz: number;
    extentEl: number;
    extentRange: number;
    lat: number;
    lon: number;
    alt: number;
    stopLat: number;
    stopLon: number;
    stopAlt: number;
    srchInc: number;
    xAngle: number;
    yAngle: number;
    orientAngle: number;
    customer: string | Uint8Array | null;
    notes: string | Uint8Array | null;
    source: string | Uint8Array | null;
    origin: string | Uint8Array | null;
    dataMode: string | Uint8Array | null;
    constructor(id?: string | Uint8Array | null, classification?: string | Uint8Array | null, type?: string | Uint8Array | null, idPlan?: string | Uint8Array | null, planIndex?: number, taskId?: string | Uint8Array | null, dwellId?: string | Uint8Array | null, externalId?: string | Uint8Array | null, idSensor?: string | Uint8Array | null, origSensorId?: string | Uint8Array | null, obType?: string | Uint8Array | null, priority?: string | Uint8Array | null, taskCategory?: number, suffix?: string | Uint8Array | null, uctFollowUp?: boolean, startTime?: string | Uint8Array | null, endTime?: string | Uint8Array | null, noradCatId?: number, origObjectId?: string | Uint8Array | null, taskGroup?: string | Uint8Array | null, iron?: number, orbitRegime?: string | Uint8Array | null, targetSize?: number, rcsMin?: number, rcs?: number, rcsMax?: number, freqMin?: number, freq?: number, freqMax?: number, polarization?: string | Uint8Array | null, visMagMin?: number, visMag?: number, visMagMax?: number, spectralModel?: string | Uint8Array | null, reflectance?: number, irradiance?: number, numFrames?: number, frameRate?: number, integrationTime?: number, numTracks?: number, numObs?: number, duration?: number, srchPattern?: string | Uint8Array | null, scenario?: string | Uint8Array | null, idElset?: string | Uint8Array | null, idManifold?: string | Uint8Array | null, idStateVector?: string | Uint8Array | null, esId?: string | Uint8Array | null, epoch?: string | Uint8Array | null, semiMajorAxis?: number, eccentricity?: number, inclination?: number, raan?: number, argOfPerigee?: number, meanAnomaly?: number, ra?: number, dec?: number, az?: number, el?: number, range?: number, extentAz?: number, extentEl?: number, extentRange?: number, lat?: number, lon?: number, alt?: number, stopLat?: number, stopLon?: number, stopAlt?: number, srchInc?: number, xAngle?: number, yAngle?: number, orientAngle?: number, customer?: string | Uint8Array | null, notes?: string | Uint8Array | null, source?: string | Uint8Array | null, origin?: string | Uint8Array | null, dataMode?: string | Uint8Array | null);
    pack(builder: flatbuffers.Builder): flatbuffers.Offset;
}
//# sourceMappingURL=crm.d.ts.map