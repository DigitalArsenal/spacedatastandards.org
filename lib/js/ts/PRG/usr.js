// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class USR {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsUSR(bb, obj) {
        return (obj || new USR()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsUSR(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new USR()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    id(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    messageTypes(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    messageTypesLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startUSR(builder) {
        builder.startObject(2);
    }
    static addId(builder, idOffset) {
        builder.addFieldOffset(0, idOffset, 0);
    }
    static addMessageTypes(builder, messageTypesOffset) {
        builder.addFieldOffset(1, messageTypesOffset, 0);
    }
    static createMessageTypesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startMessageTypesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endUSR(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createUSR(builder, idOffset, messageTypesOffset) {
        USR.startUSR(builder);
        USR.addId(builder, idOffset);
        USR.addMessageTypes(builder, messageTypesOffset);
        return USR.endUSR(builder);
    }
    unpack() {
        return new USRT(this.id(), this.bb.createScalarList(this.messageTypes.bind(this), this.messageTypesLength()));
    }
    unpackTo(_o) {
        _o.id = this.id();
        _o.messageTypes = this.bb.createScalarList(this.messageTypes.bind(this), this.messageTypesLength());
    }
}
export class USRT {
    constructor(id = null, messageTypes = []) {
        this.id = id;
        this.messageTypes = messageTypes;
    }
    pack(builder) {
        const id = (this.id !== null ? builder.createString(this.id) : 0);
        const messageTypes = USR.createMessageTypesVector(builder, builder.createObjectOffsetList(this.messageTypes));
        return USR.createUSR(builder, id, messageTypes);
    }
}
