// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { USR } from './usr.js';
/**
 * Program Description Message
 */
export class PRG {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPRG(bb, obj) {
        return (obj || new PRG()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPRG(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PRG()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$PRG');
    }
    name(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    hdKeyPath(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    messageTypes(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    messageTypesLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Vector of users associated with the program, each user can have assigned message types
     */
    users(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new USR()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    usersLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startPRG(builder) {
        builder.startObject(4);
    }
    static addName(builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    }
    static addHdKeyPath(builder, hdKeyPathOffset) {
        builder.addFieldOffset(1, hdKeyPathOffset, 0);
    }
    static addMessageTypes(builder, messageTypesOffset) {
        builder.addFieldOffset(2, messageTypesOffset, 0);
    }
    static createMessageTypesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startMessageTypesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addUsers(builder, usersOffset) {
        builder.addFieldOffset(3, usersOffset, 0);
    }
    static createUsersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startUsersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endPRG(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishPRGBuffer(builder, offset) {
        builder.finish(offset, '$PRG');
    }
    static finishSizePrefixedPRGBuffer(builder, offset) {
        builder.finish(offset, '$PRG', true);
    }
    static createPRG(builder, nameOffset, hdKeyPathOffset, messageTypesOffset, usersOffset) {
        PRG.startPRG(builder);
        PRG.addName(builder, nameOffset);
        PRG.addHdKeyPath(builder, hdKeyPathOffset);
        PRG.addMessageTypes(builder, messageTypesOffset);
        PRG.addUsers(builder, usersOffset);
        return PRG.endPRG(builder);
    }
    unpack() {
        return new PRGT(this.name(), this.hdKeyPath(), this.bb.createScalarList(this.messageTypes.bind(this), this.messageTypesLength()), this.bb.createObjList(this.users.bind(this), this.usersLength()));
    }
    unpackTo(_o) {
        _o.name = this.name();
        _o.hdKeyPath = this.hdKeyPath();
        _o.messageTypes = this.bb.createScalarList(this.messageTypes.bind(this), this.messageTypesLength());
        _o.users = this.bb.createObjList(this.users.bind(this), this.usersLength());
    }
}
export class PRGT {
    constructor(name = null, hdKeyPath = null, messageTypes = [], users = []) {
        this.name = name;
        this.hdKeyPath = hdKeyPath;
        this.messageTypes = messageTypes;
        this.users = users;
    }
    pack(builder) {
        const name = (this.name !== null ? builder.createString(this.name) : 0);
        const hdKeyPath = (this.hdKeyPath !== null ? builder.createString(this.hdKeyPath) : 0);
        const messageTypes = PRG.createMessageTypesVector(builder, builder.createObjectOffsetList(this.messageTypes));
        const users = PRG.createUsersVector(builder, builder.createObjectOffsetList(this.users));
        return PRG.createPRG(builder, name, hdKeyPath, messageTypes, users);
    }
}
