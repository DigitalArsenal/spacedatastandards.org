// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { CDMObject } from './cdmobject.js';
import { PNM } from './pnm.js';
import { refFrame } from './ref-frame.js';
import { screeningVolumeShape } from './screening-volume-shape.js';
/**
 * Conjunction Data Message
 */
export class CDM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCDM(bb, obj) {
        return (obj || new CDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCDM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$CDM');
    }
    /**
     * The version of the CCSDS CDM standard used
     */
    ccsdsCdmVers() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    creationDate(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    originator(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    messageFor(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    messageId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    tca(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * The miss distance between the two objects
     */
    missDistance() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The relative speed between the two objects
     */
    relativeSpeed() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The relative position R component
     */
    relativePositionR() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The relative position T component
     */
    relativePositionT() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The relative position N component
     */
    relativePositionN() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The relative velocity R component
     */
    relativeVelocityR() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The relative velocity T component
     */
    relativeVelocityT() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The relative velocity N component
     */
    relativeVelocityN() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    startScreenPeriod(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    stopScreenPeriod(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * The reference frame for the screening volume
     */
    screenVolumeFrame() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : refFrame.ECEF;
    }
    /**
     * The shape of the screening volume
     */
    screenVolumeShape() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : screeningVolumeShape.ELLIPSOID;
    }
    /**
     * The X dimension of the screening volume
     */
    screenVolumeX() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The Y dimension of the screening volume
     */
    screenVolumeY() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * The Z dimension of the screening volume
     */
    screenVolumeZ() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    screenEntryTime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    screenExitTime(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * The probability of collision between the two objects
     */
    collisionProbability() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    collisionProbabilityMethod(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * The first object in the CDM message
     */
    object1(obj) {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? (obj || new CDMObject()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    /**
     * The second object in the CDM message
     */
    object2(obj) {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? (obj || new CDMObject()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    /**
     * Data Source for the positional information for Object 1
     */
    object1Datasource(obj) {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? (obj || new PNM()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    /**
     * Data Source for the positional information for Object 2
     */
    object2Datasource(obj) {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? (obj || new PNM()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startCDM(builder) {
        builder.startObject(29);
    }
    static addCcsdsCdmVers(builder, ccsdsCdmVers) {
        builder.addFieldFloat64(0, ccsdsCdmVers, 0.0);
    }
    static addCreationDate(builder, creationDateOffset) {
        builder.addFieldOffset(1, creationDateOffset, 0);
    }
    static addOriginator(builder, originatorOffset) {
        builder.addFieldOffset(2, originatorOffset, 0);
    }
    static addMessageFor(builder, messageForOffset) {
        builder.addFieldOffset(3, messageForOffset, 0);
    }
    static addMessageId(builder, messageIdOffset) {
        builder.addFieldOffset(4, messageIdOffset, 0);
    }
    static addTca(builder, tcaOffset) {
        builder.addFieldOffset(5, tcaOffset, 0);
    }
    static addMissDistance(builder, missDistance) {
        builder.addFieldFloat64(6, missDistance, 0.0);
    }
    static addRelativeSpeed(builder, relativeSpeed) {
        builder.addFieldFloat64(7, relativeSpeed, 0.0);
    }
    static addRelativePositionR(builder, relativePositionR) {
        builder.addFieldFloat64(8, relativePositionR, 0.0);
    }
    static addRelativePositionT(builder, relativePositionT) {
        builder.addFieldFloat64(9, relativePositionT, 0.0);
    }
    static addRelativePositionN(builder, relativePositionN) {
        builder.addFieldFloat64(10, relativePositionN, 0.0);
    }
    static addRelativeVelocityR(builder, relativeVelocityR) {
        builder.addFieldFloat64(11, relativeVelocityR, 0.0);
    }
    static addRelativeVelocityT(builder, relativeVelocityT) {
        builder.addFieldFloat64(12, relativeVelocityT, 0.0);
    }
    static addRelativeVelocityN(builder, relativeVelocityN) {
        builder.addFieldFloat64(13, relativeVelocityN, 0.0);
    }
    static addStartScreenPeriod(builder, startScreenPeriodOffset) {
        builder.addFieldOffset(14, startScreenPeriodOffset, 0);
    }
    static addStopScreenPeriod(builder, stopScreenPeriodOffset) {
        builder.addFieldOffset(15, stopScreenPeriodOffset, 0);
    }
    static addScreenVolumeFrame(builder, screenVolumeFrame) {
        builder.addFieldInt8(16, screenVolumeFrame, refFrame.ECEF);
    }
    static addScreenVolumeShape(builder, screenVolumeShape) {
        builder.addFieldInt8(17, screenVolumeShape, screeningVolumeShape.ELLIPSOID);
    }
    static addScreenVolumeX(builder, screenVolumeX) {
        builder.addFieldFloat64(18, screenVolumeX, 0.0);
    }
    static addScreenVolumeY(builder, screenVolumeY) {
        builder.addFieldFloat64(19, screenVolumeY, 0.0);
    }
    static addScreenVolumeZ(builder, screenVolumeZ) {
        builder.addFieldFloat64(20, screenVolumeZ, 0.0);
    }
    static addScreenEntryTime(builder, screenEntryTimeOffset) {
        builder.addFieldOffset(21, screenEntryTimeOffset, 0);
    }
    static addScreenExitTime(builder, screenExitTimeOffset) {
        builder.addFieldOffset(22, screenExitTimeOffset, 0);
    }
    static addCollisionProbability(builder, collisionProbability) {
        builder.addFieldFloat64(23, collisionProbability, 0.0);
    }
    static addCollisionProbabilityMethod(builder, collisionProbabilityMethodOffset) {
        builder.addFieldOffset(24, collisionProbabilityMethodOffset, 0);
    }
    static addObject1(builder, object1Offset) {
        builder.addFieldOffset(25, object1Offset, 0);
    }
    static addObject2(builder, object2Offset) {
        builder.addFieldOffset(26, object2Offset, 0);
    }
    static addObject1Datasource(builder, object1DatasourceOffset) {
        builder.addFieldOffset(27, object1DatasourceOffset, 0);
    }
    static addObject2Datasource(builder, object2DatasourceOffset) {
        builder.addFieldOffset(28, object2DatasourceOffset, 0);
    }
    static endCDM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishCDMBuffer(builder, offset) {
        builder.finish(offset, '$CDM');
    }
    static finishSizePrefixedCDMBuffer(builder, offset) {
        builder.finish(offset, '$CDM', true);
    }
    unpack() {
        return new CDMT(this.ccsdsCdmVers(), this.creationDate(), this.originator(), this.messageFor(), this.messageId(), this.tca(), this.missDistance(), this.relativeSpeed(), this.relativePositionR(), this.relativePositionT(), this.relativePositionN(), this.relativeVelocityR(), this.relativeVelocityT(), this.relativeVelocityN(), this.startScreenPeriod(), this.stopScreenPeriod(), this.screenVolumeFrame(), this.screenVolumeShape(), this.screenVolumeX(), this.screenVolumeY(), this.screenVolumeZ(), this.screenEntryTime(), this.screenExitTime(), this.collisionProbability(), this.collisionProbabilityMethod(), (this.object1() !== null ? this.object1().unpack() : null), (this.object2() !== null ? this.object2().unpack() : null), (this.object1Datasource() !== null ? this.object1Datasource().unpack() : null), (this.object2Datasource() !== null ? this.object2Datasource().unpack() : null));
    }
    unpackTo(_o) {
        _o.ccsdsCdmVers = this.ccsdsCdmVers();
        _o.creationDate = this.creationDate();
        _o.originator = this.originator();
        _o.messageFor = this.messageFor();
        _o.messageId = this.messageId();
        _o.tca = this.tca();
        _o.missDistance = this.missDistance();
        _o.relativeSpeed = this.relativeSpeed();
        _o.relativePositionR = this.relativePositionR();
        _o.relativePositionT = this.relativePositionT();
        _o.relativePositionN = this.relativePositionN();
        _o.relativeVelocityR = this.relativeVelocityR();
        _o.relativeVelocityT = this.relativeVelocityT();
        _o.relativeVelocityN = this.relativeVelocityN();
        _o.startScreenPeriod = this.startScreenPeriod();
        _o.stopScreenPeriod = this.stopScreenPeriod();
        _o.screenVolumeFrame = this.screenVolumeFrame();
        _o.screenVolumeShape = this.screenVolumeShape();
        _o.screenVolumeX = this.screenVolumeX();
        _o.screenVolumeY = this.screenVolumeY();
        _o.screenVolumeZ = this.screenVolumeZ();
        _o.screenEntryTime = this.screenEntryTime();
        _o.screenExitTime = this.screenExitTime();
        _o.collisionProbability = this.collisionProbability();
        _o.collisionProbabilityMethod = this.collisionProbabilityMethod();
        _o.object1 = (this.object1() !== null ? this.object1().unpack() : null);
        _o.object2 = (this.object2() !== null ? this.object2().unpack() : null);
        _o.object1Datasource = (this.object1Datasource() !== null ? this.object1Datasource().unpack() : null);
        _o.object2Datasource = (this.object2Datasource() !== null ? this.object2Datasource().unpack() : null);
    }
}
export class CDMT {
    constructor(ccsdsCdmVers = 0.0, creationDate = null, originator = null, messageFor = null, messageId = null, tca = null, missDistance = 0.0, relativeSpeed = 0.0, relativePositionR = 0.0, relativePositionT = 0.0, relativePositionN = 0.0, relativeVelocityR = 0.0, relativeVelocityT = 0.0, relativeVelocityN = 0.0, startScreenPeriod = null, stopScreenPeriod = null, screenVolumeFrame = refFrame.ECEF, screenVolumeShape = screeningVolumeShape.ELLIPSOID, screenVolumeX = 0.0, screenVolumeY = 0.0, screenVolumeZ = 0.0, screenEntryTime = null, screenExitTime = null, collisionProbability = 0.0, collisionProbabilityMethod = null, object1 = null, object2 = null, object1Datasource = null, object2Datasource = null) {
        this.ccsdsCdmVers = ccsdsCdmVers;
        this.creationDate = creationDate;
        this.originator = originator;
        this.messageFor = messageFor;
        this.messageId = messageId;
        this.tca = tca;
        this.missDistance = missDistance;
        this.relativeSpeed = relativeSpeed;
        this.relativePositionR = relativePositionR;
        this.relativePositionT = relativePositionT;
        this.relativePositionN = relativePositionN;
        this.relativeVelocityR = relativeVelocityR;
        this.relativeVelocityT = relativeVelocityT;
        this.relativeVelocityN = relativeVelocityN;
        this.startScreenPeriod = startScreenPeriod;
        this.stopScreenPeriod = stopScreenPeriod;
        this.screenVolumeFrame = screenVolumeFrame;
        this.screenVolumeShape = screenVolumeShape;
        this.screenVolumeX = screenVolumeX;
        this.screenVolumeY = screenVolumeY;
        this.screenVolumeZ = screenVolumeZ;
        this.screenEntryTime = screenEntryTime;
        this.screenExitTime = screenExitTime;
        this.collisionProbability = collisionProbability;
        this.collisionProbabilityMethod = collisionProbabilityMethod;
        this.object1 = object1;
        this.object2 = object2;
        this.object1Datasource = object1Datasource;
        this.object2Datasource = object2Datasource;
    }
    pack(builder) {
        const creationDate = (this.creationDate !== null ? builder.createString(this.creationDate) : 0);
        const originator = (this.originator !== null ? builder.createString(this.originator) : 0);
        const messageFor = (this.messageFor !== null ? builder.createString(this.messageFor) : 0);
        const messageId = (this.messageId !== null ? builder.createString(this.messageId) : 0);
        const tca = (this.tca !== null ? builder.createString(this.tca) : 0);
        const startScreenPeriod = (this.startScreenPeriod !== null ? builder.createString(this.startScreenPeriod) : 0);
        const stopScreenPeriod = (this.stopScreenPeriod !== null ? builder.createString(this.stopScreenPeriod) : 0);
        const screenEntryTime = (this.screenEntryTime !== null ? builder.createString(this.screenEntryTime) : 0);
        const screenExitTime = (this.screenExitTime !== null ? builder.createString(this.screenExitTime) : 0);
        const collisionProbabilityMethod = (this.collisionProbabilityMethod !== null ? builder.createString(this.collisionProbabilityMethod) : 0);
        const object1 = (this.object1 !== null ? this.object1.pack(builder) : 0);
        const object2 = (this.object2 !== null ? this.object2.pack(builder) : 0);
        const object1Datasource = (this.object1Datasource !== null ? this.object1Datasource.pack(builder) : 0);
        const object2Datasource = (this.object2Datasource !== null ? this.object2Datasource.pack(builder) : 0);
        CDM.startCDM(builder);
        CDM.addCcsdsCdmVers(builder, this.ccsdsCdmVers);
        CDM.addCreationDate(builder, creationDate);
        CDM.addOriginator(builder, originator);
        CDM.addMessageFor(builder, messageFor);
        CDM.addMessageId(builder, messageId);
        CDM.addTca(builder, tca);
        CDM.addMissDistance(builder, this.missDistance);
        CDM.addRelativeSpeed(builder, this.relativeSpeed);
        CDM.addRelativePositionR(builder, this.relativePositionR);
        CDM.addRelativePositionT(builder, this.relativePositionT);
        CDM.addRelativePositionN(builder, this.relativePositionN);
        CDM.addRelativeVelocityR(builder, this.relativeVelocityR);
        CDM.addRelativeVelocityT(builder, this.relativeVelocityT);
        CDM.addRelativeVelocityN(builder, this.relativeVelocityN);
        CDM.addStartScreenPeriod(builder, startScreenPeriod);
        CDM.addStopScreenPeriod(builder, stopScreenPeriod);
        CDM.addScreenVolumeFrame(builder, this.screenVolumeFrame);
        CDM.addScreenVolumeShape(builder, this.screenVolumeShape);
        CDM.addScreenVolumeX(builder, this.screenVolumeX);
        CDM.addScreenVolumeY(builder, this.screenVolumeY);
        CDM.addScreenVolumeZ(builder, this.screenVolumeZ);
        CDM.addScreenEntryTime(builder, screenEntryTime);
        CDM.addScreenExitTime(builder, screenExitTime);
        CDM.addCollisionProbability(builder, this.collisionProbability);
        CDM.addCollisionProbabilityMethod(builder, collisionProbabilityMethod);
        CDM.addObject1(builder, object1);
        CDM.addObject2(builder, object2);
        CDM.addObject1Datasource(builder, object1Datasource);
        CDM.addObject2Datasource(builder, object2Datasource);
        return CDM.endCDM(builder);
    }
}
