// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * Represents a geographic address
 */
export class Address {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsAddress(bb, obj) {
        return (obj || new Address()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsAddress(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Address()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    country(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    region(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    locality(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    postalCode(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    street(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    postOfficeBoxNumber(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startAddress(builder) {
        builder.startObject(6);
    }
    static addCountry(builder, countryOffset) {
        builder.addFieldOffset(0, countryOffset, 0);
    }
    static addRegion(builder, regionOffset) {
        builder.addFieldOffset(1, regionOffset, 0);
    }
    static addLocality(builder, localityOffset) {
        builder.addFieldOffset(2, localityOffset, 0);
    }
    static addPostalCode(builder, postalCodeOffset) {
        builder.addFieldOffset(3, postalCodeOffset, 0);
    }
    static addStreet(builder, streetOffset) {
        builder.addFieldOffset(4, streetOffset, 0);
    }
    static addPostOfficeBoxNumber(builder, postOfficeBoxNumberOffset) {
        builder.addFieldOffset(5, postOfficeBoxNumberOffset, 0);
    }
    static endAddress(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createAddress(builder, countryOffset, regionOffset, localityOffset, postalCodeOffset, streetOffset, postOfficeBoxNumberOffset) {
        Address.startAddress(builder);
        Address.addCountry(builder, countryOffset);
        Address.addRegion(builder, regionOffset);
        Address.addLocality(builder, localityOffset);
        Address.addPostalCode(builder, postalCodeOffset);
        Address.addStreet(builder, streetOffset);
        Address.addPostOfficeBoxNumber(builder, postOfficeBoxNumberOffset);
        return Address.endAddress(builder);
    }
    unpack() {
        return new AddressT(this.country(), this.region(), this.locality(), this.postalCode(), this.street(), this.postOfficeBoxNumber());
    }
    unpackTo(_o) {
        _o.country = this.country();
        _o.region = this.region();
        _o.locality = this.locality();
        _o.postalCode = this.postalCode();
        _o.street = this.street();
        _o.postOfficeBoxNumber = this.postOfficeBoxNumber();
    }
}
export class AddressT {
    constructor(country = null, region = null, locality = null, postalCode = null, street = null, postOfficeBoxNumber = null) {
        this.country = country;
        this.region = region;
        this.locality = locality;
        this.postalCode = postalCode;
        this.street = street;
        this.postOfficeBoxNumber = postOfficeBoxNumber;
    }
    pack(builder) {
        const country = (this.country !== null ? builder.createString(this.country) : 0);
        const region = (this.region !== null ? builder.createString(this.region) : 0);
        const locality = (this.locality !== null ? builder.createString(this.locality) : 0);
        const postalCode = (this.postalCode !== null ? builder.createString(this.postalCode) : 0);
        const street = (this.street !== null ? builder.createString(this.street) : 0);
        const postOfficeBoxNumber = (this.postOfficeBoxNumber !== null ? builder.createString(this.postOfficeBoxNumber) : 0);
        return Address.createAddress(builder, country, region, locality, postalCode, street, postOfficeBoxNumber);
    }
}
