// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { legacyCountryCode } from './legacy-country-code.js';
/**
 * Legacy Country Code
 */
export class LCC {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsLCC(bb, obj) {
        return (obj || new LCC()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsLCC(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LCC()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$LCC');
    }
    owner() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : legacyCountryCode.AB;
    }
    static startLCC(builder) {
        builder.startObject(1);
    }
    static addOwner(builder, owner) {
        builder.addFieldInt8(0, owner, legacyCountryCode.AB);
    }
    static endLCC(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishLCCBuffer(builder, offset) {
        builder.finish(offset, '$LCC');
    }
    static finishSizePrefixedLCCBuffer(builder, offset) {
        builder.finish(offset, '$LCC', true);
    }
    static createLCC(builder, owner) {
        LCC.startLCC(builder);
        LCC.addOwner(builder, owner);
        return LCC.endLCC(builder);
    }
    unpack() {
        return new LCCT(this.owner());
    }
    unpackTo(_o) {
        _o.owner = this.owner();
    }
}
export class LCCT {
    constructor(owner = legacyCountryCode.AB) {
        this.owner = owner;
    }
    pack(builder) {
        return LCC.createLCC(builder, this.owner);
    }
}
