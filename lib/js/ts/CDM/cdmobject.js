// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { CAT } from './cat.js';
import { EPM } from './epm.js';
import { covarianceMethod } from './covariance-method.js';
import { refFrame } from './ref-frame.js';
export class CDMObject {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCDMObject(bb, obj) {
        return (obj || new CDMObject()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCDMObject(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CDMObject()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    comment(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    object(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new CAT()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    /**
     * Point of Contact
     */
    poc(obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new EPM()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    operatorContactPosition(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    operatorOrganization(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ephemerisName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Covariance method
     */
    covarianceMethod() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : covarianceMethod.CALCULATED;
    }
    /**
     * Reference Frame in which the object position is defined
     */
    referenceFrame() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : refFrame.ECEF;
    }
    gravityModel(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    atmosphericModel(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    nBodyPerturbations(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Solar radiation pressure
     */
    solarRadPressure() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    /**
     * Earth tides
     */
    earthTides() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    /**
     * Intrack thrust
     */
    intrackThrust() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    timeLastobStart(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    timeLastobEnd(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Recommended observation data span
     */
    recommendedOdSpan() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Actual observation data span
     */
    actualOdSpan() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Number of observations available
     */
    obsAvailable() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    /**
     * Number of observations used
     */
    obsUsed() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    /**
     * Number of tracks available
     */
    tracksAvailable() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    /**
     * Number of tracks used
     */
    tracksUsed() {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    /**
     * Residuals accepted
     */
    residualsAccepted() {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Weighted root mean square
     */
    weightedRms() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Area of the object
     */
    areaPc() {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Area of the object drag
     */
    areaDrg() {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Area of the object solar radiation pressure
     */
    areaSrp() {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Object's area-to-mass ratio
     */
    crAreaOverMass() {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Object's thrust acceleration
     */
    thrustAcceleration() {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Object's solar flux
     */
    sedr() {
        const offset = this.bb.__offset(this.bb_pos, 62);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * X-coordinate of the object's position in RTN coordinates
     */
    x() {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Y-coordinate of the object's position in RTN
     */
    y() {
        const offset = this.bb.__offset(this.bb_pos, 66);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Z-coordinate of the object's position in RTN
     */
    z() {
        const offset = this.bb.__offset(this.bb_pos, 68);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * X-coordinate of the object's position in RTN coordinates
     */
    xDot() {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Y-coordinate of the object's position in RTN
     */
    yDot() {
        const offset = this.bb.__offset(this.bb_pos, 72);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Z-coordinate of the object's position in RTN
     */
    zDot() {
        const offset = this.bb.__offset(this.bb_pos, 74);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    crR() {
        const offset = this.bb.__offset(this.bb_pos, 76);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    ctR() {
        const offset = this.bb.__offset(this.bb_pos, 78);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    ctT() {
        const offset = this.bb.__offset(this.bb_pos, 80);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cnR() {
        const offset = this.bb.__offset(this.bb_pos, 82);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cnT() {
        const offset = this.bb.__offset(this.bb_pos, 84);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cnN() {
        const offset = this.bb.__offset(this.bb_pos, 86);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    crdotR() {
        const offset = this.bb.__offset(this.bb_pos, 88);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    crdotT() {
        const offset = this.bb.__offset(this.bb_pos, 90);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    crdotN() {
        const offset = this.bb.__offset(this.bb_pos, 92);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    crdotRdot() {
        const offset = this.bb.__offset(this.bb_pos, 94);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    ctdotR() {
        const offset = this.bb.__offset(this.bb_pos, 96);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    ctdotT() {
        const offset = this.bb.__offset(this.bb_pos, 98);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    ctdotN() {
        const offset = this.bb.__offset(this.bb_pos, 100);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    ctdotRdot() {
        const offset = this.bb.__offset(this.bb_pos, 102);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    ctdotTdot() {
        const offset = this.bb.__offset(this.bb_pos, 104);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cndotR() {
        const offset = this.bb.__offset(this.bb_pos, 106);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cndotT() {
        const offset = this.bb.__offset(this.bb_pos, 108);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cndotN() {
        const offset = this.bb.__offset(this.bb_pos, 110);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cndotRdot() {
        const offset = this.bb.__offset(this.bb_pos, 112);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cndotTdot() {
        const offset = this.bb.__offset(this.bb_pos, 114);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cndotNdot() {
        const offset = this.bb.__offset(this.bb_pos, 116);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cdrgR() {
        const offset = this.bb.__offset(this.bb_pos, 118);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cdrgT() {
        const offset = this.bb.__offset(this.bb_pos, 120);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cdrgN() {
        const offset = this.bb.__offset(this.bb_pos, 122);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cdrgRdot() {
        const offset = this.bb.__offset(this.bb_pos, 124);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cdrgTdot() {
        const offset = this.bb.__offset(this.bb_pos, 126);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cdrgNdot() {
        const offset = this.bb.__offset(this.bb_pos, 128);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cdrgDrg() {
        const offset = this.bb.__offset(this.bb_pos, 130);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    csrpR() {
        const offset = this.bb.__offset(this.bb_pos, 132);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    csrpT() {
        const offset = this.bb.__offset(this.bb_pos, 134);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    csrpN() {
        const offset = this.bb.__offset(this.bb_pos, 136);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    csrpRdot() {
        const offset = this.bb.__offset(this.bb_pos, 138);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    csrpTdot() {
        const offset = this.bb.__offset(this.bb_pos, 140);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    csrpNdot() {
        const offset = this.bb.__offset(this.bb_pos, 142);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    csrpDrg() {
        const offset = this.bb.__offset(this.bb_pos, 144);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    csrpSrp() {
        const offset = this.bb.__offset(this.bb_pos, 146);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cthrR() {
        const offset = this.bb.__offset(this.bb_pos, 148);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cthrT() {
        const offset = this.bb.__offset(this.bb_pos, 150);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cthrN() {
        const offset = this.bb.__offset(this.bb_pos, 152);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cthrRdot() {
        const offset = this.bb.__offset(this.bb_pos, 154);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cthrTdot() {
        const offset = this.bb.__offset(this.bb_pos, 156);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cthrNdot() {
        const offset = this.bb.__offset(this.bb_pos, 158);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cthrDrg() {
        const offset = this.bb.__offset(this.bb_pos, 160);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cthrSrp() {
        const offset = this.bb.__offset(this.bb_pos, 162);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Covariance Matrix component
     */
    cthrThr() {
        const offset = this.bb.__offset(this.bb_pos, 164);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startCDMObject(builder) {
        builder.startObject(81);
    }
    static addComment(builder, commentOffset) {
        builder.addFieldOffset(0, commentOffset, 0);
    }
    static addObject(builder, objectOffset) {
        builder.addFieldOffset(1, objectOffset, 0);
    }
    static addPoc(builder, pocOffset) {
        builder.addFieldOffset(2, pocOffset, 0);
    }
    static addOperatorContactPosition(builder, operatorContactPositionOffset) {
        builder.addFieldOffset(3, operatorContactPositionOffset, 0);
    }
    static addOperatorOrganization(builder, operatorOrganizationOffset) {
        builder.addFieldOffset(4, operatorOrganizationOffset, 0);
    }
    static addEphemerisName(builder, ephemerisNameOffset) {
        builder.addFieldOffset(5, ephemerisNameOffset, 0);
    }
    static addCovarianceMethod(builder, covarianceMethod) {
        builder.addFieldInt8(6, covarianceMethod, covarianceMethod.CALCULATED);
    }
    static addReferenceFrame(builder, referenceFrame) {
        builder.addFieldInt8(7, referenceFrame, refFrame.ECEF);
    }
    static addGravityModel(builder, gravityModelOffset) {
        builder.addFieldOffset(8, gravityModelOffset, 0);
    }
    static addAtmosphericModel(builder, atmosphericModelOffset) {
        builder.addFieldOffset(9, atmosphericModelOffset, 0);
    }
    static addNBodyPerturbations(builder, nBodyPerturbationsOffset) {
        builder.addFieldOffset(10, nBodyPerturbationsOffset, 0);
    }
    static addSolarRadPressure(builder, solarRadPressure) {
        builder.addFieldInt8(11, +solarRadPressure, +false);
    }
    static addEarthTides(builder, earthTides) {
        builder.addFieldInt8(12, +earthTides, +false);
    }
    static addIntrackThrust(builder, intrackThrust) {
        builder.addFieldInt8(13, +intrackThrust, +false);
    }
    static addTimeLastobStart(builder, timeLastobStartOffset) {
        builder.addFieldOffset(14, timeLastobStartOffset, 0);
    }
    static addTimeLastobEnd(builder, timeLastobEndOffset) {
        builder.addFieldOffset(15, timeLastobEndOffset, 0);
    }
    static addRecommendedOdSpan(builder, recommendedOdSpan) {
        builder.addFieldFloat64(16, recommendedOdSpan, 0.0);
    }
    static addActualOdSpan(builder, actualOdSpan) {
        builder.addFieldFloat64(17, actualOdSpan, 0.0);
    }
    static addObsAvailable(builder, obsAvailable) {
        builder.addFieldInt32(18, obsAvailable, 0);
    }
    static addObsUsed(builder, obsUsed) {
        builder.addFieldInt32(19, obsUsed, 0);
    }
    static addTracksAvailable(builder, tracksAvailable) {
        builder.addFieldInt32(20, tracksAvailable, 0);
    }
    static addTracksUsed(builder, tracksUsed) {
        builder.addFieldInt32(21, tracksUsed, 0);
    }
    static addResidualsAccepted(builder, residualsAccepted) {
        builder.addFieldFloat64(22, residualsAccepted, 0.0);
    }
    static addWeightedRms(builder, weightedRms) {
        builder.addFieldFloat64(23, weightedRms, 0.0);
    }
    static addAreaPc(builder, areaPc) {
        builder.addFieldFloat64(24, areaPc, 0.0);
    }
    static addAreaDrg(builder, areaDrg) {
        builder.addFieldFloat64(25, areaDrg, 0.0);
    }
    static addAreaSrp(builder, areaSrp) {
        builder.addFieldFloat64(26, areaSrp, 0.0);
    }
    static addCrAreaOverMass(builder, crAreaOverMass) {
        builder.addFieldFloat64(27, crAreaOverMass, 0.0);
    }
    static addThrustAcceleration(builder, thrustAcceleration) {
        builder.addFieldFloat64(28, thrustAcceleration, 0.0);
    }
    static addSedr(builder, sedr) {
        builder.addFieldFloat64(29, sedr, 0.0);
    }
    static addX(builder, x) {
        builder.addFieldFloat64(30, x, 0.0);
    }
    static addY(builder, y) {
        builder.addFieldFloat64(31, y, 0.0);
    }
    static addZ(builder, z) {
        builder.addFieldFloat64(32, z, 0.0);
    }
    static addXDot(builder, xDot) {
        builder.addFieldFloat64(33, xDot, 0.0);
    }
    static addYDot(builder, yDot) {
        builder.addFieldFloat64(34, yDot, 0.0);
    }
    static addZDot(builder, zDot) {
        builder.addFieldFloat64(35, zDot, 0.0);
    }
    static addCrR(builder, crR) {
        builder.addFieldFloat64(36, crR, 0.0);
    }
    static addCtR(builder, ctR) {
        builder.addFieldFloat64(37, ctR, 0.0);
    }
    static addCtT(builder, ctT) {
        builder.addFieldFloat64(38, ctT, 0.0);
    }
    static addCnR(builder, cnR) {
        builder.addFieldFloat64(39, cnR, 0.0);
    }
    static addCnT(builder, cnT) {
        builder.addFieldFloat64(40, cnT, 0.0);
    }
    static addCnN(builder, cnN) {
        builder.addFieldFloat64(41, cnN, 0.0);
    }
    static addCrdotR(builder, crdotR) {
        builder.addFieldFloat64(42, crdotR, 0.0);
    }
    static addCrdotT(builder, crdotT) {
        builder.addFieldFloat64(43, crdotT, 0.0);
    }
    static addCrdotN(builder, crdotN) {
        builder.addFieldFloat64(44, crdotN, 0.0);
    }
    static addCrdotRdot(builder, crdotRdot) {
        builder.addFieldFloat64(45, crdotRdot, 0.0);
    }
    static addCtdotR(builder, ctdotR) {
        builder.addFieldFloat64(46, ctdotR, 0.0);
    }
    static addCtdotT(builder, ctdotT) {
        builder.addFieldFloat64(47, ctdotT, 0.0);
    }
    static addCtdotN(builder, ctdotN) {
        builder.addFieldFloat64(48, ctdotN, 0.0);
    }
    static addCtdotRdot(builder, ctdotRdot) {
        builder.addFieldFloat64(49, ctdotRdot, 0.0);
    }
    static addCtdotTdot(builder, ctdotTdot) {
        builder.addFieldFloat64(50, ctdotTdot, 0.0);
    }
    static addCndotR(builder, cndotR) {
        builder.addFieldFloat64(51, cndotR, 0.0);
    }
    static addCndotT(builder, cndotT) {
        builder.addFieldFloat64(52, cndotT, 0.0);
    }
    static addCndotN(builder, cndotN) {
        builder.addFieldFloat64(53, cndotN, 0.0);
    }
    static addCndotRdot(builder, cndotRdot) {
        builder.addFieldFloat64(54, cndotRdot, 0.0);
    }
    static addCndotTdot(builder, cndotTdot) {
        builder.addFieldFloat64(55, cndotTdot, 0.0);
    }
    static addCndotNdot(builder, cndotNdot) {
        builder.addFieldFloat64(56, cndotNdot, 0.0);
    }
    static addCdrgR(builder, cdrgR) {
        builder.addFieldFloat64(57, cdrgR, 0.0);
    }
    static addCdrgT(builder, cdrgT) {
        builder.addFieldFloat64(58, cdrgT, 0.0);
    }
    static addCdrgN(builder, cdrgN) {
        builder.addFieldFloat64(59, cdrgN, 0.0);
    }
    static addCdrgRdot(builder, cdrgRdot) {
        builder.addFieldFloat64(60, cdrgRdot, 0.0);
    }
    static addCdrgTdot(builder, cdrgTdot) {
        builder.addFieldFloat64(61, cdrgTdot, 0.0);
    }
    static addCdrgNdot(builder, cdrgNdot) {
        builder.addFieldFloat64(62, cdrgNdot, 0.0);
    }
    static addCdrgDrg(builder, cdrgDrg) {
        builder.addFieldFloat64(63, cdrgDrg, 0.0);
    }
    static addCsrpR(builder, csrpR) {
        builder.addFieldFloat64(64, csrpR, 0.0);
    }
    static addCsrpT(builder, csrpT) {
        builder.addFieldFloat64(65, csrpT, 0.0);
    }
    static addCsrpN(builder, csrpN) {
        builder.addFieldFloat64(66, csrpN, 0.0);
    }
    static addCsrpRdot(builder, csrpRdot) {
        builder.addFieldFloat64(67, csrpRdot, 0.0);
    }
    static addCsrpTdot(builder, csrpTdot) {
        builder.addFieldFloat64(68, csrpTdot, 0.0);
    }
    static addCsrpNdot(builder, csrpNdot) {
        builder.addFieldFloat64(69, csrpNdot, 0.0);
    }
    static addCsrpDrg(builder, csrpDrg) {
        builder.addFieldFloat64(70, csrpDrg, 0.0);
    }
    static addCsrpSrp(builder, csrpSrp) {
        builder.addFieldFloat64(71, csrpSrp, 0.0);
    }
    static addCthrR(builder, cthrR) {
        builder.addFieldFloat64(72, cthrR, 0.0);
    }
    static addCthrT(builder, cthrT) {
        builder.addFieldFloat64(73, cthrT, 0.0);
    }
    static addCthrN(builder, cthrN) {
        builder.addFieldFloat64(74, cthrN, 0.0);
    }
    static addCthrRdot(builder, cthrRdot) {
        builder.addFieldFloat64(75, cthrRdot, 0.0);
    }
    static addCthrTdot(builder, cthrTdot) {
        builder.addFieldFloat64(76, cthrTdot, 0.0);
    }
    static addCthrNdot(builder, cthrNdot) {
        builder.addFieldFloat64(77, cthrNdot, 0.0);
    }
    static addCthrDrg(builder, cthrDrg) {
        builder.addFieldFloat64(78, cthrDrg, 0.0);
    }
    static addCthrSrp(builder, cthrSrp) {
        builder.addFieldFloat64(79, cthrSrp, 0.0);
    }
    static addCthrThr(builder, cthrThr) {
        builder.addFieldFloat64(80, cthrThr, 0.0);
    }
    static endCDMObject(builder) {
        const offset = builder.endObject();
        return offset;
    }
    unpack() {
        return new CDMObjectT(this.comment(), (this.object() !== null ? this.object().unpack() : null), (this.poc() !== null ? this.poc().unpack() : null), this.operatorContactPosition(), this.operatorOrganization(), this.ephemerisName(), this.covarianceMethod(), this.referenceFrame(), this.gravityModel(), this.atmosphericModel(), this.nBodyPerturbations(), this.solarRadPressure(), this.earthTides(), this.intrackThrust(), this.timeLastobStart(), this.timeLastobEnd(), this.recommendedOdSpan(), this.actualOdSpan(), this.obsAvailable(), this.obsUsed(), this.tracksAvailable(), this.tracksUsed(), this.residualsAccepted(), this.weightedRms(), this.areaPc(), this.areaDrg(), this.areaSrp(), this.crAreaOverMass(), this.thrustAcceleration(), this.sedr(), this.x(), this.y(), this.z(), this.xDot(), this.yDot(), this.zDot(), this.crR(), this.ctR(), this.ctT(), this.cnR(), this.cnT(), this.cnN(), this.crdotR(), this.crdotT(), this.crdotN(), this.crdotRdot(), this.ctdotR(), this.ctdotT(), this.ctdotN(), this.ctdotRdot(), this.ctdotTdot(), this.cndotR(), this.cndotT(), this.cndotN(), this.cndotRdot(), this.cndotTdot(), this.cndotNdot(), this.cdrgR(), this.cdrgT(), this.cdrgN(), this.cdrgRdot(), this.cdrgTdot(), this.cdrgNdot(), this.cdrgDrg(), this.csrpR(), this.csrpT(), this.csrpN(), this.csrpRdot(), this.csrpTdot(), this.csrpNdot(), this.csrpDrg(), this.csrpSrp(), this.cthrR(), this.cthrT(), this.cthrN(), this.cthrRdot(), this.cthrTdot(), this.cthrNdot(), this.cthrDrg(), this.cthrSrp(), this.cthrThr());
    }
    unpackTo(_o) {
        _o.comment = this.comment();
        _o.object = (this.object() !== null ? this.object().unpack() : null);
        _o.poc = (this.poc() !== null ? this.poc().unpack() : null);
        _o.operatorContactPosition = this.operatorContactPosition();
        _o.operatorOrganization = this.operatorOrganization();
        _o.ephemerisName = this.ephemerisName();
        _o.covarianceMethod = this.covarianceMethod();
        _o.referenceFrame = this.referenceFrame();
        _o.gravityModel = this.gravityModel();
        _o.atmosphericModel = this.atmosphericModel();
        _o.nBodyPerturbations = this.nBodyPerturbations();
        _o.solarRadPressure = this.solarRadPressure();
        _o.earthTides = this.earthTides();
        _o.intrackThrust = this.intrackThrust();
        _o.timeLastobStart = this.timeLastobStart();
        _o.timeLastobEnd = this.timeLastobEnd();
        _o.recommendedOdSpan = this.recommendedOdSpan();
        _o.actualOdSpan = this.actualOdSpan();
        _o.obsAvailable = this.obsAvailable();
        _o.obsUsed = this.obsUsed();
        _o.tracksAvailable = this.tracksAvailable();
        _o.tracksUsed = this.tracksUsed();
        _o.residualsAccepted = this.residualsAccepted();
        _o.weightedRms = this.weightedRms();
        _o.areaPc = this.areaPc();
        _o.areaDrg = this.areaDrg();
        _o.areaSrp = this.areaSrp();
        _o.crAreaOverMass = this.crAreaOverMass();
        _o.thrustAcceleration = this.thrustAcceleration();
        _o.sedr = this.sedr();
        _o.x = this.x();
        _o.y = this.y();
        _o.z = this.z();
        _o.xDot = this.xDot();
        _o.yDot = this.yDot();
        _o.zDot = this.zDot();
        _o.crR = this.crR();
        _o.ctR = this.ctR();
        _o.ctT = this.ctT();
        _o.cnR = this.cnR();
        _o.cnT = this.cnT();
        _o.cnN = this.cnN();
        _o.crdotR = this.crdotR();
        _o.crdotT = this.crdotT();
        _o.crdotN = this.crdotN();
        _o.crdotRdot = this.crdotRdot();
        _o.ctdotR = this.ctdotR();
        _o.ctdotT = this.ctdotT();
        _o.ctdotN = this.ctdotN();
        _o.ctdotRdot = this.ctdotRdot();
        _o.ctdotTdot = this.ctdotTdot();
        _o.cndotR = this.cndotR();
        _o.cndotT = this.cndotT();
        _o.cndotN = this.cndotN();
        _o.cndotRdot = this.cndotRdot();
        _o.cndotTdot = this.cndotTdot();
        _o.cndotNdot = this.cndotNdot();
        _o.cdrgR = this.cdrgR();
        _o.cdrgT = this.cdrgT();
        _o.cdrgN = this.cdrgN();
        _o.cdrgRdot = this.cdrgRdot();
        _o.cdrgTdot = this.cdrgTdot();
        _o.cdrgNdot = this.cdrgNdot();
        _o.cdrgDrg = this.cdrgDrg();
        _o.csrpR = this.csrpR();
        _o.csrpT = this.csrpT();
        _o.csrpN = this.csrpN();
        _o.csrpRdot = this.csrpRdot();
        _o.csrpTdot = this.csrpTdot();
        _o.csrpNdot = this.csrpNdot();
        _o.csrpDrg = this.csrpDrg();
        _o.csrpSrp = this.csrpSrp();
        _o.cthrR = this.cthrR();
        _o.cthrT = this.cthrT();
        _o.cthrN = this.cthrN();
        _o.cthrRdot = this.cthrRdot();
        _o.cthrTdot = this.cthrTdot();
        _o.cthrNdot = this.cthrNdot();
        _o.cthrDrg = this.cthrDrg();
        _o.cthrSrp = this.cthrSrp();
        _o.cthrThr = this.cthrThr();
    }
}
export class CDMObjectT {
    constructor(comment = null, object = null, poc = null, operatorContactPosition = null, operatorOrganization = null, ephemerisName = null, covarianceMethod = covarianceMethod.CALCULATED, referenceFrame = refFrame.ECEF, gravityModel = null, atmosphericModel = null, nBodyPerturbations = null, solarRadPressure = false, earthTides = false, intrackThrust = false, timeLastobStart = null, timeLastobEnd = null, recommendedOdSpan = 0.0, actualOdSpan = 0.0, obsAvailable = 0, obsUsed = 0, tracksAvailable = 0, tracksUsed = 0, residualsAccepted = 0.0, weightedRms = 0.0, areaPc = 0.0, areaDrg = 0.0, areaSrp = 0.0, crAreaOverMass = 0.0, thrustAcceleration = 0.0, sedr = 0.0, x = 0.0, y = 0.0, z = 0.0, xDot = 0.0, yDot = 0.0, zDot = 0.0, crR = 0.0, ctR = 0.0, ctT = 0.0, cnR = 0.0, cnT = 0.0, cnN = 0.0, crdotR = 0.0, crdotT = 0.0, crdotN = 0.0, crdotRdot = 0.0, ctdotR = 0.0, ctdotT = 0.0, ctdotN = 0.0, ctdotRdot = 0.0, ctdotTdot = 0.0, cndotR = 0.0, cndotT = 0.0, cndotN = 0.0, cndotRdot = 0.0, cndotTdot = 0.0, cndotNdot = 0.0, cdrgR = 0.0, cdrgT = 0.0, cdrgN = 0.0, cdrgRdot = 0.0, cdrgTdot = 0.0, cdrgNdot = 0.0, cdrgDrg = 0.0, csrpR = 0.0, csrpT = 0.0, csrpN = 0.0, csrpRdot = 0.0, csrpTdot = 0.0, csrpNdot = 0.0, csrpDrg = 0.0, csrpSrp = 0.0, cthrR = 0.0, cthrT = 0.0, cthrN = 0.0, cthrRdot = 0.0, cthrTdot = 0.0, cthrNdot = 0.0, cthrDrg = 0.0, cthrSrp = 0.0, cthrThr = 0.0) {
        this.comment = comment;
        this.object = object;
        this.poc = poc;
        this.operatorContactPosition = operatorContactPosition;
        this.operatorOrganization = operatorOrganization;
        this.ephemerisName = ephemerisName;
        this.covarianceMethod = covarianceMethod;
        this.referenceFrame = referenceFrame;
        this.gravityModel = gravityModel;
        this.atmosphericModel = atmosphericModel;
        this.nBodyPerturbations = nBodyPerturbations;
        this.solarRadPressure = solarRadPressure;
        this.earthTides = earthTides;
        this.intrackThrust = intrackThrust;
        this.timeLastobStart = timeLastobStart;
        this.timeLastobEnd = timeLastobEnd;
        this.recommendedOdSpan = recommendedOdSpan;
        this.actualOdSpan = actualOdSpan;
        this.obsAvailable = obsAvailable;
        this.obsUsed = obsUsed;
        this.tracksAvailable = tracksAvailable;
        this.tracksUsed = tracksUsed;
        this.residualsAccepted = residualsAccepted;
        this.weightedRms = weightedRms;
        this.areaPc = areaPc;
        this.areaDrg = areaDrg;
        this.areaSrp = areaSrp;
        this.crAreaOverMass = crAreaOverMass;
        this.thrustAcceleration = thrustAcceleration;
        this.sedr = sedr;
        this.x = x;
        this.y = y;
        this.z = z;
        this.xDot = xDot;
        this.yDot = yDot;
        this.zDot = zDot;
        this.crR = crR;
        this.ctR = ctR;
        this.ctT = ctT;
        this.cnR = cnR;
        this.cnT = cnT;
        this.cnN = cnN;
        this.crdotR = crdotR;
        this.crdotT = crdotT;
        this.crdotN = crdotN;
        this.crdotRdot = crdotRdot;
        this.ctdotR = ctdotR;
        this.ctdotT = ctdotT;
        this.ctdotN = ctdotN;
        this.ctdotRdot = ctdotRdot;
        this.ctdotTdot = ctdotTdot;
        this.cndotR = cndotR;
        this.cndotT = cndotT;
        this.cndotN = cndotN;
        this.cndotRdot = cndotRdot;
        this.cndotTdot = cndotTdot;
        this.cndotNdot = cndotNdot;
        this.cdrgR = cdrgR;
        this.cdrgT = cdrgT;
        this.cdrgN = cdrgN;
        this.cdrgRdot = cdrgRdot;
        this.cdrgTdot = cdrgTdot;
        this.cdrgNdot = cdrgNdot;
        this.cdrgDrg = cdrgDrg;
        this.csrpR = csrpR;
        this.csrpT = csrpT;
        this.csrpN = csrpN;
        this.csrpRdot = csrpRdot;
        this.csrpTdot = csrpTdot;
        this.csrpNdot = csrpNdot;
        this.csrpDrg = csrpDrg;
        this.csrpSrp = csrpSrp;
        this.cthrR = cthrR;
        this.cthrT = cthrT;
        this.cthrN = cthrN;
        this.cthrRdot = cthrRdot;
        this.cthrTdot = cthrTdot;
        this.cthrNdot = cthrNdot;
        this.cthrDrg = cthrDrg;
        this.cthrSrp = cthrSrp;
        this.cthrThr = cthrThr;
    }
    pack(builder) {
        const comment = (this.comment !== null ? builder.createString(this.comment) : 0);
        const object = (this.object !== null ? this.object.pack(builder) : 0);
        const poc = (this.poc !== null ? this.poc.pack(builder) : 0);
        const operatorContactPosition = (this.operatorContactPosition !== null ? builder.createString(this.operatorContactPosition) : 0);
        const operatorOrganization = (this.operatorOrganization !== null ? builder.createString(this.operatorOrganization) : 0);
        const ephemerisName = (this.ephemerisName !== null ? builder.createString(this.ephemerisName) : 0);
        const gravityModel = (this.gravityModel !== null ? builder.createString(this.gravityModel) : 0);
        const atmosphericModel = (this.atmosphericModel !== null ? builder.createString(this.atmosphericModel) : 0);
        const nBodyPerturbations = (this.nBodyPerturbations !== null ? builder.createString(this.nBodyPerturbations) : 0);
        const timeLastobStart = (this.timeLastobStart !== null ? builder.createString(this.timeLastobStart) : 0);
        const timeLastobEnd = (this.timeLastobEnd !== null ? builder.createString(this.timeLastobEnd) : 0);
        CDMObject.startCDMObject(builder);
        CDMObject.addComment(builder, comment);
        CDMObject.addObject(builder, object);
        CDMObject.addPoc(builder, poc);
        CDMObject.addOperatorContactPosition(builder, operatorContactPosition);
        CDMObject.addOperatorOrganization(builder, operatorOrganization);
        CDMObject.addEphemerisName(builder, ephemerisName);
        CDMObject.addCovarianceMethod(builder, this.covarianceMethod);
        CDMObject.addReferenceFrame(builder, this.referenceFrame);
        CDMObject.addGravityModel(builder, gravityModel);
        CDMObject.addAtmosphericModel(builder, atmosphericModel);
        CDMObject.addNBodyPerturbations(builder, nBodyPerturbations);
        CDMObject.addSolarRadPressure(builder, this.solarRadPressure);
        CDMObject.addEarthTides(builder, this.earthTides);
        CDMObject.addIntrackThrust(builder, this.intrackThrust);
        CDMObject.addTimeLastobStart(builder, timeLastobStart);
        CDMObject.addTimeLastobEnd(builder, timeLastobEnd);
        CDMObject.addRecommendedOdSpan(builder, this.recommendedOdSpan);
        CDMObject.addActualOdSpan(builder, this.actualOdSpan);
        CDMObject.addObsAvailable(builder, this.obsAvailable);
        CDMObject.addObsUsed(builder, this.obsUsed);
        CDMObject.addTracksAvailable(builder, this.tracksAvailable);
        CDMObject.addTracksUsed(builder, this.tracksUsed);
        CDMObject.addResidualsAccepted(builder, this.residualsAccepted);
        CDMObject.addWeightedRms(builder, this.weightedRms);
        CDMObject.addAreaPc(builder, this.areaPc);
        CDMObject.addAreaDrg(builder, this.areaDrg);
        CDMObject.addAreaSrp(builder, this.areaSrp);
        CDMObject.addCrAreaOverMass(builder, this.crAreaOverMass);
        CDMObject.addThrustAcceleration(builder, this.thrustAcceleration);
        CDMObject.addSedr(builder, this.sedr);
        CDMObject.addX(builder, this.x);
        CDMObject.addY(builder, this.y);
        CDMObject.addZ(builder, this.z);
        CDMObject.addXDot(builder, this.xDot);
        CDMObject.addYDot(builder, this.yDot);
        CDMObject.addZDot(builder, this.zDot);
        CDMObject.addCrR(builder, this.crR);
        CDMObject.addCtR(builder, this.ctR);
        CDMObject.addCtT(builder, this.ctT);
        CDMObject.addCnR(builder, this.cnR);
        CDMObject.addCnT(builder, this.cnT);
        CDMObject.addCnN(builder, this.cnN);
        CDMObject.addCrdotR(builder, this.crdotR);
        CDMObject.addCrdotT(builder, this.crdotT);
        CDMObject.addCrdotN(builder, this.crdotN);
        CDMObject.addCrdotRdot(builder, this.crdotRdot);
        CDMObject.addCtdotR(builder, this.ctdotR);
        CDMObject.addCtdotT(builder, this.ctdotT);
        CDMObject.addCtdotN(builder, this.ctdotN);
        CDMObject.addCtdotRdot(builder, this.ctdotRdot);
        CDMObject.addCtdotTdot(builder, this.ctdotTdot);
        CDMObject.addCndotR(builder, this.cndotR);
        CDMObject.addCndotT(builder, this.cndotT);
        CDMObject.addCndotN(builder, this.cndotN);
        CDMObject.addCndotRdot(builder, this.cndotRdot);
        CDMObject.addCndotTdot(builder, this.cndotTdot);
        CDMObject.addCndotNdot(builder, this.cndotNdot);
        CDMObject.addCdrgR(builder, this.cdrgR);
        CDMObject.addCdrgT(builder, this.cdrgT);
        CDMObject.addCdrgN(builder, this.cdrgN);
        CDMObject.addCdrgRdot(builder, this.cdrgRdot);
        CDMObject.addCdrgTdot(builder, this.cdrgTdot);
        CDMObject.addCdrgNdot(builder, this.cdrgNdot);
        CDMObject.addCdrgDrg(builder, this.cdrgDrg);
        CDMObject.addCsrpR(builder, this.csrpR);
        CDMObject.addCsrpT(builder, this.csrpT);
        CDMObject.addCsrpN(builder, this.csrpN);
        CDMObject.addCsrpRdot(builder, this.csrpRdot);
        CDMObject.addCsrpTdot(builder, this.csrpTdot);
        CDMObject.addCsrpNdot(builder, this.csrpNdot);
        CDMObject.addCsrpDrg(builder, this.csrpDrg);
        CDMObject.addCsrpSrp(builder, this.csrpSrp);
        CDMObject.addCthrR(builder, this.cthrR);
        CDMObject.addCthrT(builder, this.cthrT);
        CDMObject.addCthrN(builder, this.cthrN);
        CDMObject.addCthrRdot(builder, this.cthrRdot);
        CDMObject.addCthrTdot(builder, this.cthrTdot);
        CDMObject.addCthrNdot(builder, this.cthrNdot);
        CDMObject.addCthrDrg(builder, this.cthrDrg);
        CDMObject.addCthrSrp(builder, this.cthrSrp);
        CDMObject.addCthrThr(builder, this.cthrThr);
        return CDMObject.endCDMObject(builder);
    }
}
