// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * Publish Notification Message
 */
export class PNM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPNM(bb, obj) {
        return (obj || new PNM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPNM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PNM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$PNM');
    }
    multiformatAddress(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    publishTimestamp(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    cid(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    fileName(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    fileId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    signature(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    timestampSignature(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    signatureType(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    timestampSignatureType(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startPNM(builder) {
        builder.startObject(9);
    }
    static addMultiformatAddress(builder, multiformatAddressOffset) {
        builder.addFieldOffset(0, multiformatAddressOffset, 0);
    }
    static addPublishTimestamp(builder, publishTimestampOffset) {
        builder.addFieldOffset(1, publishTimestampOffset, 0);
    }
    static addCid(builder, cidOffset) {
        builder.addFieldOffset(2, cidOffset, 0);
    }
    static addFileName(builder, fileNameOffset) {
        builder.addFieldOffset(3, fileNameOffset, 0);
    }
    static addFileId(builder, fileIdOffset) {
        builder.addFieldOffset(4, fileIdOffset, 0);
    }
    static addSignature(builder, signatureOffset) {
        builder.addFieldOffset(5, signatureOffset, 0);
    }
    static addTimestampSignature(builder, timestampSignatureOffset) {
        builder.addFieldOffset(6, timestampSignatureOffset, 0);
    }
    static addSignatureType(builder, signatureTypeOffset) {
        builder.addFieldOffset(7, signatureTypeOffset, 0);
    }
    static addTimestampSignatureType(builder, timestampSignatureTypeOffset) {
        builder.addFieldOffset(8, timestampSignatureTypeOffset, 0);
    }
    static endPNM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishPNMBuffer(builder, offset) {
        builder.finish(offset, '$PNM');
    }
    static finishSizePrefixedPNMBuffer(builder, offset) {
        builder.finish(offset, '$PNM', true);
    }
    static createPNM(builder, multiformatAddressOffset, publishTimestampOffset, cidOffset, fileNameOffset, fileIdOffset, signatureOffset, timestampSignatureOffset, signatureTypeOffset, timestampSignatureTypeOffset) {
        PNM.startPNM(builder);
        PNM.addMultiformatAddress(builder, multiformatAddressOffset);
        PNM.addPublishTimestamp(builder, publishTimestampOffset);
        PNM.addCid(builder, cidOffset);
        PNM.addFileName(builder, fileNameOffset);
        PNM.addFileId(builder, fileIdOffset);
        PNM.addSignature(builder, signatureOffset);
        PNM.addTimestampSignature(builder, timestampSignatureOffset);
        PNM.addSignatureType(builder, signatureTypeOffset);
        PNM.addTimestampSignatureType(builder, timestampSignatureTypeOffset);
        return PNM.endPNM(builder);
    }
    unpack() {
        return new PNMT(this.multiformatAddress(), this.publishTimestamp(), this.cid(), this.fileName(), this.fileId(), this.signature(), this.timestampSignature(), this.signatureType(), this.timestampSignatureType());
    }
    unpackTo(_o) {
        _o.multiformatAddress = this.multiformatAddress();
        _o.publishTimestamp = this.publishTimestamp();
        _o.cid = this.cid();
        _o.fileName = this.fileName();
        _o.fileId = this.fileId();
        _o.signature = this.signature();
        _o.timestampSignature = this.timestampSignature();
        _o.signatureType = this.signatureType();
        _o.timestampSignatureType = this.timestampSignatureType();
    }
}
export class PNMT {
    constructor(multiformatAddress = null, publishTimestamp = null, cid = null, fileName = null, fileId = null, signature = null, timestampSignature = null, signatureType = null, timestampSignatureType = null) {
        this.multiformatAddress = multiformatAddress;
        this.publishTimestamp = publishTimestamp;
        this.cid = cid;
        this.fileName = fileName;
        this.fileId = fileId;
        this.signature = signature;
        this.timestampSignature = timestampSignature;
        this.signatureType = signatureType;
        this.timestampSignatureType = timestampSignatureType;
    }
    pack(builder) {
        const multiformatAddress = (this.multiformatAddress !== null ? builder.createString(this.multiformatAddress) : 0);
        const publishTimestamp = (this.publishTimestamp !== null ? builder.createString(this.publishTimestamp) : 0);
        const cid = (this.cid !== null ? builder.createString(this.cid) : 0);
        const fileName = (this.fileName !== null ? builder.createString(this.fileName) : 0);
        const fileId = (this.fileId !== null ? builder.createString(this.fileId) : 0);
        const signature = (this.signature !== null ? builder.createString(this.signature) : 0);
        const timestampSignature = (this.timestampSignature !== null ? builder.createString(this.timestampSignature) : 0);
        const signatureType = (this.signatureType !== null ? builder.createString(this.signatureType) : 0);
        const timestampSignatureType = (this.timestampSignatureType !== null ? builder.createString(this.timestampSignatureType) : 0);
        return PNM.createPNM(builder, multiformatAddress, publishTimestamp, cid, fileName, fileId, signature, timestampSignature, signatureType, timestampSignatureType);
    }
}
