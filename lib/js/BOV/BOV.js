// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
/**
 * Burn Out Vector Message
 */
export class BOV {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsBOV(bb, obj) {
        return (obj || new BOV()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsBOV(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new BOV()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    E_COORDINATE() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    F_COORDINATE() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    G_COORDINATE() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    E_DOT() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    F_DOT() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    G_DOT() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    EPOCH_TIME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TIME_FROM_LAUNCH() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startBOV(builder) {
        builder.startObject(8);
    }
    static addECoordinate(builder, E_COORDINATE) {
        builder.addFieldFloat64(0, E_COORDINATE, 0.0);
    }
    static addFCoordinate(builder, F_COORDINATE) {
        builder.addFieldFloat64(1, F_COORDINATE, 0.0);
    }
    static addGCoordinate(builder, G_COORDINATE) {
        builder.addFieldFloat64(2, G_COORDINATE, 0.0);
    }
    static addEDot(builder, E_DOT) {
        builder.addFieldFloat64(3, E_DOT, 0.0);
    }
    static addFDot(builder, F_DOT) {
        builder.addFieldFloat64(4, F_DOT, 0.0);
    }
    static addGDot(builder, G_DOT) {
        builder.addFieldFloat64(5, G_DOT, 0.0);
    }
    static addEpochTime(builder, EPOCH_TIMEOffset) {
        builder.addFieldOffset(6, EPOCH_TIMEOffset, 0);
    }
    static addTimeFromLaunch(builder, TIME_FROM_LAUNCH) {
        builder.addFieldFloat64(7, TIME_FROM_LAUNCH, 0.0);
    }
    static endBOV(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createBOV(builder, E_COORDINATE, F_COORDINATE, G_COORDINATE, E_DOT, F_DOT, G_DOT, EPOCH_TIMEOffset, TIME_FROM_LAUNCH) {
        BOV.startBOV(builder);
        BOV.addECoordinate(builder, E_COORDINATE);
        BOV.addFCoordinate(builder, F_COORDINATE);
        BOV.addGCoordinate(builder, G_COORDINATE);
        BOV.addEDot(builder, E_DOT);
        BOV.addFDot(builder, F_DOT);
        BOV.addGDot(builder, G_DOT);
        BOV.addEpochTime(builder, EPOCH_TIMEOffset);
        BOV.addTimeFromLaunch(builder, TIME_FROM_LAUNCH);
        return BOV.endBOV(builder);
    }
    unpack() {
        return new BOVT(this.E_COORDINATE(), this.F_COORDINATE(), this.G_COORDINATE(), this.E_DOT(), this.F_DOT(), this.G_DOT(), this.EPOCH_TIME(), this.TIME_FROM_LAUNCH());
    }
    unpackTo(_o) {
        _o.E_COORDINATE = this.E_COORDINATE();
        _o.F_COORDINATE = this.F_COORDINATE();
        _o.G_COORDINATE = this.G_COORDINATE();
        _o.E_DOT = this.E_DOT();
        _o.F_DOT = this.F_DOT();
        _o.G_DOT = this.G_DOT();
        _o.EPOCH_TIME = this.EPOCH_TIME();
        _o.TIME_FROM_LAUNCH = this.TIME_FROM_LAUNCH();
    }
}
export class BOVT {
    constructor(E_COORDINATE = 0.0, F_COORDINATE = 0.0, G_COORDINATE = 0.0, E_DOT = 0.0, F_DOT = 0.0, G_DOT = 0.0, EPOCH_TIME = null, TIME_FROM_LAUNCH = 0.0) {
        this.E_COORDINATE = E_COORDINATE;
        this.F_COORDINATE = F_COORDINATE;
        this.G_COORDINATE = G_COORDINATE;
        this.E_DOT = E_DOT;
        this.F_DOT = F_DOT;
        this.G_DOT = G_DOT;
        this.EPOCH_TIME = EPOCH_TIME;
        this.TIME_FROM_LAUNCH = TIME_FROM_LAUNCH;
    }
    pack(builder) {
        const EPOCH_TIME = (this.EPOCH_TIME !== null ? builder.createString(this.EPOCH_TIME) : 0);
        return BOV.createBOV(builder, this.E_COORDINATE, this.F_COORDINATE, this.G_COORDINATE, this.E_DOT, this.F_DOT, this.G_DOT, EPOCH_TIME, this.TIME_FROM_LAUNCH);
    }
}
