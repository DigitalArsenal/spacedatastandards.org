// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * VCM Covariance Matrix Line
 */
export class VCMCovarianceMatrixLine {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsVCMCovarianceMatrixLine(bb, obj) {
        return (obj || new VCMCovarianceMatrixLine()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsVCMCovarianceMatrixLine(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VCMCovarianceMatrixLine()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    CX_X() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    CY_X() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    CZ_X() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    CX_DOT_X() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startVCMCovarianceMatrixLine(builder) {
        builder.startObject(4);
    }
    static addCxX(builder, CX_X) {
        builder.addFieldFloat64(0, CX_X, 0.0);
    }
    static addCyX(builder, CY_X) {
        builder.addFieldFloat64(1, CY_X, 0.0);
    }
    static addCzX(builder, CZ_X) {
        builder.addFieldFloat64(2, CZ_X, 0.0);
    }
    static addCxDotX(builder, CX_DOT_X) {
        builder.addFieldFloat64(3, CX_DOT_X, 0.0);
    }
    static endVCMCovarianceMatrixLine(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createVCMCovarianceMatrixLine(builder, CX_X, CY_X, CZ_X, CX_DOT_X) {
        VCMCovarianceMatrixLine.startVCMCovarianceMatrixLine(builder);
        VCMCovarianceMatrixLine.addCxX(builder, CX_X);
        VCMCovarianceMatrixLine.addCyX(builder, CY_X);
        VCMCovarianceMatrixLine.addCzX(builder, CZ_X);
        VCMCovarianceMatrixLine.addCxDotX(builder, CX_DOT_X);
        return VCMCovarianceMatrixLine.endVCMCovarianceMatrixLine(builder);
    }
    unpack() {
        return new VCMCovarianceMatrixLineT(this.CX_X(), this.CY_X(), this.CZ_X(), this.CX_DOT_X());
    }
    unpackTo(_o) {
        _o.CX_X = this.CX_X();
        _o.CY_X = this.CY_X();
        _o.CZ_X = this.CZ_X();
        _o.CX_DOT_X = this.CX_DOT_X();
    }
}
export class VCMCovarianceMatrixLineT {
    constructor(CX_X = 0.0, CY_X = 0.0, CZ_X = 0.0, CX_DOT_X = 0.0) {
        this.CX_X = CX_X;
        this.CY_X = CY_X;
        this.CZ_X = CZ_X;
        this.CX_DOT_X = CX_DOT_X;
    }
    pack(builder) {
        return VCMCovarianceMatrixLine.createVCMCovarianceMatrixLine(builder, this.CX_X, this.CY_X, this.CZ_X, this.CX_DOT_X);
    }
}
