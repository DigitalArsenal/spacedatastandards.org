// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * Equinoctial Elements
 */
export class equinoctialElements {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsequinoctialElements(bb, obj) {
        return (obj || new equinoctialElements()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsequinoctialElements(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new equinoctialElements()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    AF() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    AG() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    L() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    N() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    CHI() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    PSI() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startequinoctialElements(builder) {
        builder.startObject(6);
    }
    static addAf(builder, AF) {
        builder.addFieldFloat64(0, AF, 0.0);
    }
    static addAg(builder, AG) {
        builder.addFieldFloat64(1, AG, 0.0);
    }
    static addL(builder, L) {
        builder.addFieldFloat64(2, L, 0.0);
    }
    static addN(builder, N) {
        builder.addFieldFloat64(3, N, 0.0);
    }
    static addChi(builder, CHI) {
        builder.addFieldFloat64(4, CHI, 0.0);
    }
    static addPsi(builder, PSI) {
        builder.addFieldFloat64(5, PSI, 0.0);
    }
    static endequinoctialElements(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createequinoctialElements(builder, AF, AG, L, N, CHI, PSI) {
        equinoctialElements.startequinoctialElements(builder);
        equinoctialElements.addAf(builder, AF);
        equinoctialElements.addAg(builder, AG);
        equinoctialElements.addL(builder, L);
        equinoctialElements.addN(builder, N);
        equinoctialElements.addChi(builder, CHI);
        equinoctialElements.addPsi(builder, PSI);
        return equinoctialElements.endequinoctialElements(builder);
    }
    unpack() {
        return new equinoctialElementsT(this.AF(), this.AG(), this.L(), this.N(), this.CHI(), this.PSI());
    }
    unpackTo(_o) {
        _o.AF = this.AF();
        _o.AG = this.AG();
        _o.L = this.L();
        _o.N = this.N();
        _o.CHI = this.CHI();
        _o.PSI = this.PSI();
    }
}
export class equinoctialElementsT {
    constructor(AF = 0.0, AG = 0.0, L = 0.0, N = 0.0, CHI = 0.0, PSI = 0.0) {
        this.AF = AF;
        this.AG = AG;
        this.L = L;
        this.N = N;
        this.CHI = CHI;
        this.PSI = PSI;
    }
    pack(builder) {
        return equinoctialElements.createequinoctialElements(builder, this.AF, this.AG, this.L, this.N, this.CHI, this.PSI);
    }
}
