// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
/**
 * UVW Sigmas (Covariance matrix in UVW frame)
 */
export class uvwSigmas {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsuvwSigmas(bb, obj) {
        return (obj || new uvwSigmas()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsuvwSigmas(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new uvwSigmas()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    U_SIGMA() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    V_SIGMA() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    W_SIGMA() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    UD_SIGMA() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    VD_SIGMA() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    WD_SIGMA() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startuvwSigmas(builder) {
        builder.startObject(6);
    }
    static addUSigma(builder, U_SIGMA) {
        builder.addFieldFloat64(0, U_SIGMA, 0.0);
    }
    static addVSigma(builder, V_SIGMA) {
        builder.addFieldFloat64(1, V_SIGMA, 0.0);
    }
    static addWSigma(builder, W_SIGMA) {
        builder.addFieldFloat64(2, W_SIGMA, 0.0);
    }
    static addUdSigma(builder, UD_SIGMA) {
        builder.addFieldFloat64(3, UD_SIGMA, 0.0);
    }
    static addVdSigma(builder, VD_SIGMA) {
        builder.addFieldFloat64(4, VD_SIGMA, 0.0);
    }
    static addWdSigma(builder, WD_SIGMA) {
        builder.addFieldFloat64(5, WD_SIGMA, 0.0);
    }
    static enduvwSigmas(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createuvwSigmas(builder, U_SIGMA, V_SIGMA, W_SIGMA, UD_SIGMA, VD_SIGMA, WD_SIGMA) {
        uvwSigmas.startuvwSigmas(builder);
        uvwSigmas.addUSigma(builder, U_SIGMA);
        uvwSigmas.addVSigma(builder, V_SIGMA);
        uvwSigmas.addWSigma(builder, W_SIGMA);
        uvwSigmas.addUdSigma(builder, UD_SIGMA);
        uvwSigmas.addVdSigma(builder, VD_SIGMA);
        uvwSigmas.addWdSigma(builder, WD_SIGMA);
        return uvwSigmas.enduvwSigmas(builder);
    }
    unpack() {
        return new uvwSigmasT(this.U_SIGMA(), this.V_SIGMA(), this.W_SIGMA(), this.UD_SIGMA(), this.VD_SIGMA(), this.WD_SIGMA());
    }
    unpackTo(_o) {
        _o.U_SIGMA = this.U_SIGMA();
        _o.V_SIGMA = this.V_SIGMA();
        _o.W_SIGMA = this.W_SIGMA();
        _o.UD_SIGMA = this.UD_SIGMA();
        _o.VD_SIGMA = this.VD_SIGMA();
        _o.WD_SIGMA = this.WD_SIGMA();
    }
}
export class uvwSigmasT {
    constructor(U_SIGMA = 0.0, V_SIGMA = 0.0, W_SIGMA = 0.0, UD_SIGMA = 0.0, VD_SIGMA = 0.0, WD_SIGMA = 0.0) {
        this.U_SIGMA = U_SIGMA;
        this.V_SIGMA = V_SIGMA;
        this.W_SIGMA = W_SIGMA;
        this.UD_SIGMA = UD_SIGMA;
        this.VD_SIGMA = VD_SIGMA;
        this.WD_SIGMA = WD_SIGMA;
    }
    pack(builder) {
        return uvwSigmas.createuvwSigmas(builder, this.U_SIGMA, this.V_SIGMA, this.W_SIGMA, this.UD_SIGMA, this.VD_SIGMA, this.WD_SIGMA);
    }
}
