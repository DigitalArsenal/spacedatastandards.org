// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { CryptoKey } from './CryptoKey.js';
import { DistinguishedName } from './DistinguishedName.js';
import { SpecificAttributes, unionToSpecificAttributes } from './SpecificAttributes.js';
/**
 * Entity Profile Message
 */
export class EPM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsEPM(bb, obj) {
        return (obj || new EPM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsEPM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new EPM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    /**
     * Distinguished Name of the entity
     */
    DN(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new DistinguishedName()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ALTERNATE_NAMES(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    alternateNamesLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    EMAIL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TELEPHONE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Cryptographic keys associated with the entity
     */
    KEYS(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new CryptoKey()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    keysLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    MULTIFORMAT_ADDRESS(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    multiformatAddressLength() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    attributesType() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : SpecificAttributes.NONE;
    }
    /**
     * Specific attributes for the entity, either Person or Organization
     */
    ATTRIBUTES(obj) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    static startEPM(builder) {
        builder.startObject(9);
    }
    static addDn(builder, DNOffset) {
        builder.addFieldOffset(0, DNOffset, 0);
    }
    static addName(builder, NAMEOffset) {
        builder.addFieldOffset(1, NAMEOffset, 0);
    }
    static addAlternateNames(builder, ALTERNATE_NAMESOffset) {
        builder.addFieldOffset(2, ALTERNATE_NAMESOffset, 0);
    }
    static createAlternateNamesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startAlternateNamesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addEmail(builder, EMAILOffset) {
        builder.addFieldOffset(3, EMAILOffset, 0);
    }
    static addTelephone(builder, TELEPHONEOffset) {
        builder.addFieldOffset(4, TELEPHONEOffset, 0);
    }
    static addKeys(builder, KEYSOffset) {
        builder.addFieldOffset(5, KEYSOffset, 0);
    }
    static createKeysVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startKeysVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addMultiformatAddress(builder, MULTIFORMAT_ADDRESSOffset) {
        builder.addFieldOffset(6, MULTIFORMAT_ADDRESSOffset, 0);
    }
    static createMultiformatAddressVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startMultiformatAddressVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addAttributesType(builder, attributesType) {
        builder.addFieldInt8(7, attributesType, SpecificAttributes.NONE);
    }
    static addAttributes(builder, ATTRIBUTESOffset) {
        builder.addFieldOffset(8, ATTRIBUTESOffset, 0);
    }
    static endEPM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createEPM(builder, DNOffset, NAMEOffset, ALTERNATE_NAMESOffset, EMAILOffset, TELEPHONEOffset, KEYSOffset, MULTIFORMAT_ADDRESSOffset, attributesType, ATTRIBUTESOffset) {
        EPM.startEPM(builder);
        EPM.addDn(builder, DNOffset);
        EPM.addName(builder, NAMEOffset);
        EPM.addAlternateNames(builder, ALTERNATE_NAMESOffset);
        EPM.addEmail(builder, EMAILOffset);
        EPM.addTelephone(builder, TELEPHONEOffset);
        EPM.addKeys(builder, KEYSOffset);
        EPM.addMultiformatAddress(builder, MULTIFORMAT_ADDRESSOffset);
        EPM.addAttributesType(builder, attributesType);
        EPM.addAttributes(builder, ATTRIBUTESOffset);
        return EPM.endEPM(builder);
    }
    unpack() {
        return new EPMT((this.DN() !== null ? this.DN().unpack() : null), this.NAME(), this.bb.createScalarList(this.ALTERNATE_NAMES.bind(this), this.alternateNamesLength()), this.EMAIL(), this.TELEPHONE(), this.bb.createObjList(this.KEYS.bind(this), this.keysLength()), this.bb.createScalarList(this.MULTIFORMAT_ADDRESS.bind(this), this.multiformatAddressLength()), this.attributesType(), (() => {
            const temp = unionToSpecificAttributes(this.attributesType(), this.ATTRIBUTES.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })());
    }
    unpackTo(_o) {
        _o.DN = (this.DN() !== null ? this.DN().unpack() : null);
        _o.NAME = this.NAME();
        _o.ALTERNATE_NAMES = this.bb.createScalarList(this.ALTERNATE_NAMES.bind(this), this.alternateNamesLength());
        _o.EMAIL = this.EMAIL();
        _o.TELEPHONE = this.TELEPHONE();
        _o.KEYS = this.bb.createObjList(this.KEYS.bind(this), this.keysLength());
        _o.MULTIFORMAT_ADDRESS = this.bb.createScalarList(this.MULTIFORMAT_ADDRESS.bind(this), this.multiformatAddressLength());
        _o.attributesType = this.attributesType();
        _o.ATTRIBUTES = (() => {
            const temp = unionToSpecificAttributes(this.attributesType(), this.ATTRIBUTES.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
    }
}
export class EPMT {
    constructor(DN = null, NAME = null, ALTERNATE_NAMES = [], EMAIL = null, TELEPHONE = null, KEYS = [], MULTIFORMAT_ADDRESS = [], attributesType = SpecificAttributes.NONE, ATTRIBUTES = null) {
        this.DN = DN;
        this.NAME = NAME;
        this.ALTERNATE_NAMES = ALTERNATE_NAMES;
        this.EMAIL = EMAIL;
        this.TELEPHONE = TELEPHONE;
        this.KEYS = KEYS;
        this.MULTIFORMAT_ADDRESS = MULTIFORMAT_ADDRESS;
        this.attributesType = attributesType;
        this.ATTRIBUTES = ATTRIBUTES;
    }
    pack(builder) {
        const DN = (this.DN !== null ? this.DN.pack(builder) : 0);
        const NAME = (this.NAME !== null ? builder.createString(this.NAME) : 0);
        const ALTERNATE_NAMES = EPM.createAlternateNamesVector(builder, builder.createObjectOffsetList(this.ALTERNATE_NAMES));
        const EMAIL = (this.EMAIL !== null ? builder.createString(this.EMAIL) : 0);
        const TELEPHONE = (this.TELEPHONE !== null ? builder.createString(this.TELEPHONE) : 0);
        const KEYS = EPM.createKeysVector(builder, builder.createObjectOffsetList(this.KEYS));
        const MULTIFORMAT_ADDRESS = EPM.createMultiformatAddressVector(builder, builder.createObjectOffsetList(this.MULTIFORMAT_ADDRESS));
        const ATTRIBUTES = builder.createObjectOffset(this.ATTRIBUTES);
        return EPM.createEPM(builder, DN, NAME, ALTERNATE_NAMES, EMAIL, TELEPHONE, KEYS, MULTIFORMAT_ADDRESS, this.attributesType, ATTRIBUTES);
    }
}
