// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { BOV } from './BOV.js';
import { CAT } from './CAT.js';
import { ROC } from './ROC.js';
import { SIT } from './SIT.js';
import { UPM } from './UPM.js';
/**
 * Launch Data Message
 */
export class LDM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsLDM(bb, obj) {
        return (obj || new LDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsLDM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$LDM');
    }
    /**
     * Launch Site Information
     */
    SITE(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new SIT()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    /**
     * Azimuth at Launch (in Degrees)
     */
    AZIMUTH() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    REFERENCES(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    AGENCY_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Points of Contact for Launch
     */
    POINTS_OF_CONTACT(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new UPM()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    pointsOfContactLength() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Operations Points of Contact for Launch
     */
    OPERATIONS_POINTS_OF_CONTACT(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new UPM()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    operationsPointsOfContactLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    NET(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Rocket Configuration Details
     */
    ROCKET_CONFIGURATION(obj) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new ROC()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    MISSION_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MISSION_DESCRIPTION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MISSION_TYPE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ORBIT_TYPE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    WEATHER_CONDITIONS(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    LAUNCH_STATUS(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    WEBCAST_URL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MEDIA_LINKS(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    mediaLinksLength() {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    EARLIEST_LAUNCH_TIMES(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    earliestLaunchTimesLength() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    LATEST_LAUNCH_TIMES(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    latestLaunchTimesLength() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    LCOLA_WINDOW_CLOSURES(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    lcolaWindowClosuresLength() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Payload Information (Catalog Entities)
     */
    OBJECTS(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? (obj || new CAT()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    objectsLength() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    TRACKING_REQUIREMENTS(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    trackingRequirementsLength() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    COLA_SCREEN_DURATION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    PROBABILITY_OF_COLLISION_THRESHOLD(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    COLA_RUNS_REQUIRED(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Points of Contact for Collision Avoidance
     */
    COLA_POINTS_OF_CONTACT(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? (obj || new UPM()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    colaPointsOfContactLength() {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    ORBITAL_PARAMETERS(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    orbitalParametersLength() {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Burn Out Vectors for the Launch
     */
    BURN_OUT_VECTORS(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? (obj || new BOV()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    burnOutVectorsLength() {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startLDM(builder) {
        builder.startObject(27);
    }
    static addSite(builder, SITEOffset) {
        builder.addFieldOffset(0, SITEOffset, 0);
    }
    static addAzimuth(builder, AZIMUTH) {
        builder.addFieldFloat32(1, AZIMUTH, 0.0);
    }
    static addReferences(builder, REFERENCESOffset) {
        builder.addFieldOffset(2, REFERENCESOffset, 0);
    }
    static addAgencyName(builder, AGENCY_NAMEOffset) {
        builder.addFieldOffset(3, AGENCY_NAMEOffset, 0);
    }
    static addPointsOfContact(builder, POINTS_OF_CONTACTOffset) {
        builder.addFieldOffset(4, POINTS_OF_CONTACTOffset, 0);
    }
    static createPointsOfContactVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startPointsOfContactVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addOperationsPointsOfContact(builder, OPERATIONS_POINTS_OF_CONTACTOffset) {
        builder.addFieldOffset(5, OPERATIONS_POINTS_OF_CONTACTOffset, 0);
    }
    static createOperationsPointsOfContactVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startOperationsPointsOfContactVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addNet(builder, NETOffset) {
        builder.addFieldOffset(6, NETOffset, 0);
    }
    static addRocketConfiguration(builder, ROCKET_CONFIGURATIONOffset) {
        builder.addFieldOffset(7, ROCKET_CONFIGURATIONOffset, 0);
    }
    static addMissionName(builder, MISSION_NAMEOffset) {
        builder.addFieldOffset(8, MISSION_NAMEOffset, 0);
    }
    static addMissionDescription(builder, MISSION_DESCRIPTIONOffset) {
        builder.addFieldOffset(9, MISSION_DESCRIPTIONOffset, 0);
    }
    static addMissionType(builder, MISSION_TYPEOffset) {
        builder.addFieldOffset(10, MISSION_TYPEOffset, 0);
    }
    static addOrbitType(builder, ORBIT_TYPEOffset) {
        builder.addFieldOffset(11, ORBIT_TYPEOffset, 0);
    }
    static addWeatherConditions(builder, WEATHER_CONDITIONSOffset) {
        builder.addFieldOffset(12, WEATHER_CONDITIONSOffset, 0);
    }
    static addLaunchStatus(builder, LAUNCH_STATUSOffset) {
        builder.addFieldOffset(13, LAUNCH_STATUSOffset, 0);
    }
    static addWebcastUrl(builder, WEBCAST_URLOffset) {
        builder.addFieldOffset(14, WEBCAST_URLOffset, 0);
    }
    static addMediaLinks(builder, MEDIA_LINKSOffset) {
        builder.addFieldOffset(15, MEDIA_LINKSOffset, 0);
    }
    static createMediaLinksVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startMediaLinksVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addEarliestLaunchTimes(builder, EARLIEST_LAUNCH_TIMESOffset) {
        builder.addFieldOffset(16, EARLIEST_LAUNCH_TIMESOffset, 0);
    }
    static createEarliestLaunchTimesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startEarliestLaunchTimesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addLatestLaunchTimes(builder, LATEST_LAUNCH_TIMESOffset) {
        builder.addFieldOffset(17, LATEST_LAUNCH_TIMESOffset, 0);
    }
    static createLatestLaunchTimesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startLatestLaunchTimesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addLcolaWindowClosures(builder, LCOLA_WINDOW_CLOSURESOffset) {
        builder.addFieldOffset(18, LCOLA_WINDOW_CLOSURESOffset, 0);
    }
    static createLcolaWindowClosuresVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startLcolaWindowClosuresVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addObjects(builder, OBJECTSOffset) {
        builder.addFieldOffset(19, OBJECTSOffset, 0);
    }
    static createObjectsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startObjectsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addTrackingRequirements(builder, TRACKING_REQUIREMENTSOffset) {
        builder.addFieldOffset(20, TRACKING_REQUIREMENTSOffset, 0);
    }
    static createTrackingRequirementsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startTrackingRequirementsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addColaScreenDuration(builder, COLA_SCREEN_DURATIONOffset) {
        builder.addFieldOffset(21, COLA_SCREEN_DURATIONOffset, 0);
    }
    static addProbabilityOfCollisionThreshold(builder, PROBABILITY_OF_COLLISION_THRESHOLDOffset) {
        builder.addFieldOffset(22, PROBABILITY_OF_COLLISION_THRESHOLDOffset, 0);
    }
    static addColaRunsRequired(builder, COLA_RUNS_REQUIREDOffset) {
        builder.addFieldOffset(23, COLA_RUNS_REQUIREDOffset, 0);
    }
    static addColaPointsOfContact(builder, COLA_POINTS_OF_CONTACTOffset) {
        builder.addFieldOffset(24, COLA_POINTS_OF_CONTACTOffset, 0);
    }
    static createColaPointsOfContactVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startColaPointsOfContactVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addOrbitalParameters(builder, ORBITAL_PARAMETERSOffset) {
        builder.addFieldOffset(25, ORBITAL_PARAMETERSOffset, 0);
    }
    static createOrbitalParametersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startOrbitalParametersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addBurnOutVectors(builder, BURN_OUT_VECTORSOffset) {
        builder.addFieldOffset(26, BURN_OUT_VECTORSOffset, 0);
    }
    static createBurnOutVectorsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startBurnOutVectorsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endLDM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishLDMBuffer(builder, offset) {
        builder.finish(offset, '$LDM');
    }
    static finishSizePrefixedLDMBuffer(builder, offset) {
        builder.finish(offset, '$LDM', true);
    }
    unpack() {
        return new LDMT((this.SITE() !== null ? this.SITE().unpack() : null), this.AZIMUTH(), this.REFERENCES(), this.AGENCY_NAME(), this.bb.createObjList(this.POINTS_OF_CONTACT.bind(this), this.pointsOfContactLength()), this.bb.createObjList(this.OPERATIONS_POINTS_OF_CONTACT.bind(this), this.operationsPointsOfContactLength()), this.NET(), (this.ROCKET_CONFIGURATION() !== null ? this.ROCKET_CONFIGURATION().unpack() : null), this.MISSION_NAME(), this.MISSION_DESCRIPTION(), this.MISSION_TYPE(), this.ORBIT_TYPE(), this.WEATHER_CONDITIONS(), this.LAUNCH_STATUS(), this.WEBCAST_URL(), this.bb.createScalarList(this.MEDIA_LINKS.bind(this), this.mediaLinksLength()), this.bb.createScalarList(this.EARLIEST_LAUNCH_TIMES.bind(this), this.earliestLaunchTimesLength()), this.bb.createScalarList(this.LATEST_LAUNCH_TIMES.bind(this), this.latestLaunchTimesLength()), this.bb.createScalarList(this.LCOLA_WINDOW_CLOSURES.bind(this), this.lcolaWindowClosuresLength()), this.bb.createObjList(this.OBJECTS.bind(this), this.objectsLength()), this.bb.createScalarList(this.TRACKING_REQUIREMENTS.bind(this), this.trackingRequirementsLength()), this.COLA_SCREEN_DURATION(), this.PROBABILITY_OF_COLLISION_THRESHOLD(), this.COLA_RUNS_REQUIRED(), this.bb.createObjList(this.COLA_POINTS_OF_CONTACT.bind(this), this.colaPointsOfContactLength()), this.bb.createScalarList(this.ORBITAL_PARAMETERS.bind(this), this.orbitalParametersLength()), this.bb.createObjList(this.BURN_OUT_VECTORS.bind(this), this.burnOutVectorsLength()));
    }
    unpackTo(_o) {
        _o.SITE = (this.SITE() !== null ? this.SITE().unpack() : null);
        _o.AZIMUTH = this.AZIMUTH();
        _o.REFERENCES = this.REFERENCES();
        _o.AGENCY_NAME = this.AGENCY_NAME();
        _o.POINTS_OF_CONTACT = this.bb.createObjList(this.POINTS_OF_CONTACT.bind(this), this.pointsOfContactLength());
        _o.OPERATIONS_POINTS_OF_CONTACT = this.bb.createObjList(this.OPERATIONS_POINTS_OF_CONTACT.bind(this), this.operationsPointsOfContactLength());
        _o.NET = this.NET();
        _o.ROCKET_CONFIGURATION = (this.ROCKET_CONFIGURATION() !== null ? this.ROCKET_CONFIGURATION().unpack() : null);
        _o.MISSION_NAME = this.MISSION_NAME();
        _o.MISSION_DESCRIPTION = this.MISSION_DESCRIPTION();
        _o.MISSION_TYPE = this.MISSION_TYPE();
        _o.ORBIT_TYPE = this.ORBIT_TYPE();
        _o.WEATHER_CONDITIONS = this.WEATHER_CONDITIONS();
        _o.LAUNCH_STATUS = this.LAUNCH_STATUS();
        _o.WEBCAST_URL = this.WEBCAST_URL();
        _o.MEDIA_LINKS = this.bb.createScalarList(this.MEDIA_LINKS.bind(this), this.mediaLinksLength());
        _o.EARLIEST_LAUNCH_TIMES = this.bb.createScalarList(this.EARLIEST_LAUNCH_TIMES.bind(this), this.earliestLaunchTimesLength());
        _o.LATEST_LAUNCH_TIMES = this.bb.createScalarList(this.LATEST_LAUNCH_TIMES.bind(this), this.latestLaunchTimesLength());
        _o.LCOLA_WINDOW_CLOSURES = this.bb.createScalarList(this.LCOLA_WINDOW_CLOSURES.bind(this), this.lcolaWindowClosuresLength());
        _o.OBJECTS = this.bb.createObjList(this.OBJECTS.bind(this), this.objectsLength());
        _o.TRACKING_REQUIREMENTS = this.bb.createScalarList(this.TRACKING_REQUIREMENTS.bind(this), this.trackingRequirementsLength());
        _o.COLA_SCREEN_DURATION = this.COLA_SCREEN_DURATION();
        _o.PROBABILITY_OF_COLLISION_THRESHOLD = this.PROBABILITY_OF_COLLISION_THRESHOLD();
        _o.COLA_RUNS_REQUIRED = this.COLA_RUNS_REQUIRED();
        _o.COLA_POINTS_OF_CONTACT = this.bb.createObjList(this.COLA_POINTS_OF_CONTACT.bind(this), this.colaPointsOfContactLength());
        _o.ORBITAL_PARAMETERS = this.bb.createScalarList(this.ORBITAL_PARAMETERS.bind(this), this.orbitalParametersLength());
        _o.BURN_OUT_VECTORS = this.bb.createObjList(this.BURN_OUT_VECTORS.bind(this), this.burnOutVectorsLength());
    }
}
export class LDMT {
    constructor(SITE = null, AZIMUTH = 0.0, REFERENCES = null, AGENCY_NAME = null, POINTS_OF_CONTACT = [], OPERATIONS_POINTS_OF_CONTACT = [], NET = null, ROCKET_CONFIGURATION = null, MISSION_NAME = null, MISSION_DESCRIPTION = null, MISSION_TYPE = null, ORBIT_TYPE = null, WEATHER_CONDITIONS = null, LAUNCH_STATUS = null, WEBCAST_URL = null, MEDIA_LINKS = [], EARLIEST_LAUNCH_TIMES = [], LATEST_LAUNCH_TIMES = [], LCOLA_WINDOW_CLOSURES = [], OBJECTS = [], TRACKING_REQUIREMENTS = [], COLA_SCREEN_DURATION = null, PROBABILITY_OF_COLLISION_THRESHOLD = null, COLA_RUNS_REQUIRED = null, COLA_POINTS_OF_CONTACT = [], ORBITAL_PARAMETERS = [], BURN_OUT_VECTORS = []) {
        this.SITE = SITE;
        this.AZIMUTH = AZIMUTH;
        this.REFERENCES = REFERENCES;
        this.AGENCY_NAME = AGENCY_NAME;
        this.POINTS_OF_CONTACT = POINTS_OF_CONTACT;
        this.OPERATIONS_POINTS_OF_CONTACT = OPERATIONS_POINTS_OF_CONTACT;
        this.NET = NET;
        this.ROCKET_CONFIGURATION = ROCKET_CONFIGURATION;
        this.MISSION_NAME = MISSION_NAME;
        this.MISSION_DESCRIPTION = MISSION_DESCRIPTION;
        this.MISSION_TYPE = MISSION_TYPE;
        this.ORBIT_TYPE = ORBIT_TYPE;
        this.WEATHER_CONDITIONS = WEATHER_CONDITIONS;
        this.LAUNCH_STATUS = LAUNCH_STATUS;
        this.WEBCAST_URL = WEBCAST_URL;
        this.MEDIA_LINKS = MEDIA_LINKS;
        this.EARLIEST_LAUNCH_TIMES = EARLIEST_LAUNCH_TIMES;
        this.LATEST_LAUNCH_TIMES = LATEST_LAUNCH_TIMES;
        this.LCOLA_WINDOW_CLOSURES = LCOLA_WINDOW_CLOSURES;
        this.OBJECTS = OBJECTS;
        this.TRACKING_REQUIREMENTS = TRACKING_REQUIREMENTS;
        this.COLA_SCREEN_DURATION = COLA_SCREEN_DURATION;
        this.PROBABILITY_OF_COLLISION_THRESHOLD = PROBABILITY_OF_COLLISION_THRESHOLD;
        this.COLA_RUNS_REQUIRED = COLA_RUNS_REQUIRED;
        this.COLA_POINTS_OF_CONTACT = COLA_POINTS_OF_CONTACT;
        this.ORBITAL_PARAMETERS = ORBITAL_PARAMETERS;
        this.BURN_OUT_VECTORS = BURN_OUT_VECTORS;
    }
    pack(builder) {
        const SITE = (this.SITE !== null ? this.SITE.pack(builder) : 0);
        const REFERENCES = (this.REFERENCES !== null ? builder.createString(this.REFERENCES) : 0);
        const AGENCY_NAME = (this.AGENCY_NAME !== null ? builder.createString(this.AGENCY_NAME) : 0);
        const POINTS_OF_CONTACT = LDM.createPointsOfContactVector(builder, builder.createObjectOffsetList(this.POINTS_OF_CONTACT));
        const OPERATIONS_POINTS_OF_CONTACT = LDM.createOperationsPointsOfContactVector(builder, builder.createObjectOffsetList(this.OPERATIONS_POINTS_OF_CONTACT));
        const NET = (this.NET !== null ? builder.createString(this.NET) : 0);
        const ROCKET_CONFIGURATION = (this.ROCKET_CONFIGURATION !== null ? this.ROCKET_CONFIGURATION.pack(builder) : 0);
        const MISSION_NAME = (this.MISSION_NAME !== null ? builder.createString(this.MISSION_NAME) : 0);
        const MISSION_DESCRIPTION = (this.MISSION_DESCRIPTION !== null ? builder.createString(this.MISSION_DESCRIPTION) : 0);
        const MISSION_TYPE = (this.MISSION_TYPE !== null ? builder.createString(this.MISSION_TYPE) : 0);
        const ORBIT_TYPE = (this.ORBIT_TYPE !== null ? builder.createString(this.ORBIT_TYPE) : 0);
        const WEATHER_CONDITIONS = (this.WEATHER_CONDITIONS !== null ? builder.createString(this.WEATHER_CONDITIONS) : 0);
        const LAUNCH_STATUS = (this.LAUNCH_STATUS !== null ? builder.createString(this.LAUNCH_STATUS) : 0);
        const WEBCAST_URL = (this.WEBCAST_URL !== null ? builder.createString(this.WEBCAST_URL) : 0);
        const MEDIA_LINKS = LDM.createMediaLinksVector(builder, builder.createObjectOffsetList(this.MEDIA_LINKS));
        const EARLIEST_LAUNCH_TIMES = LDM.createEarliestLaunchTimesVector(builder, builder.createObjectOffsetList(this.EARLIEST_LAUNCH_TIMES));
        const LATEST_LAUNCH_TIMES = LDM.createLatestLaunchTimesVector(builder, builder.createObjectOffsetList(this.LATEST_LAUNCH_TIMES));
        const LCOLA_WINDOW_CLOSURES = LDM.createLcolaWindowClosuresVector(builder, builder.createObjectOffsetList(this.LCOLA_WINDOW_CLOSURES));
        const OBJECTS = LDM.createObjectsVector(builder, builder.createObjectOffsetList(this.OBJECTS));
        const TRACKING_REQUIREMENTS = LDM.createTrackingRequirementsVector(builder, builder.createObjectOffsetList(this.TRACKING_REQUIREMENTS));
        const COLA_SCREEN_DURATION = (this.COLA_SCREEN_DURATION !== null ? builder.createString(this.COLA_SCREEN_DURATION) : 0);
        const PROBABILITY_OF_COLLISION_THRESHOLD = (this.PROBABILITY_OF_COLLISION_THRESHOLD !== null ? builder.createString(this.PROBABILITY_OF_COLLISION_THRESHOLD) : 0);
        const COLA_RUNS_REQUIRED = (this.COLA_RUNS_REQUIRED !== null ? builder.createString(this.COLA_RUNS_REQUIRED) : 0);
        const COLA_POINTS_OF_CONTACT = LDM.createColaPointsOfContactVector(builder, builder.createObjectOffsetList(this.COLA_POINTS_OF_CONTACT));
        const ORBITAL_PARAMETERS = LDM.createOrbitalParametersVector(builder, builder.createObjectOffsetList(this.ORBITAL_PARAMETERS));
        const BURN_OUT_VECTORS = LDM.createBurnOutVectorsVector(builder, builder.createObjectOffsetList(this.BURN_OUT_VECTORS));
        LDM.startLDM(builder);
        LDM.addSite(builder, SITE);
        LDM.addAzimuth(builder, this.AZIMUTH);
        LDM.addReferences(builder, REFERENCES);
        LDM.addAgencyName(builder, AGENCY_NAME);
        LDM.addPointsOfContact(builder, POINTS_OF_CONTACT);
        LDM.addOperationsPointsOfContact(builder, OPERATIONS_POINTS_OF_CONTACT);
        LDM.addNet(builder, NET);
        LDM.addRocketConfiguration(builder, ROCKET_CONFIGURATION);
        LDM.addMissionName(builder, MISSION_NAME);
        LDM.addMissionDescription(builder, MISSION_DESCRIPTION);
        LDM.addMissionType(builder, MISSION_TYPE);
        LDM.addOrbitType(builder, ORBIT_TYPE);
        LDM.addWeatherConditions(builder, WEATHER_CONDITIONS);
        LDM.addLaunchStatus(builder, LAUNCH_STATUS);
        LDM.addWebcastUrl(builder, WEBCAST_URL);
        LDM.addMediaLinks(builder, MEDIA_LINKS);
        LDM.addEarliestLaunchTimes(builder, EARLIEST_LAUNCH_TIMES);
        LDM.addLatestLaunchTimes(builder, LATEST_LAUNCH_TIMES);
        LDM.addLcolaWindowClosures(builder, LCOLA_WINDOW_CLOSURES);
        LDM.addObjects(builder, OBJECTS);
        LDM.addTrackingRequirements(builder, TRACKING_REQUIREMENTS);
        LDM.addColaScreenDuration(builder, COLA_SCREEN_DURATION);
        LDM.addProbabilityOfCollisionThreshold(builder, PROBABILITY_OF_COLLISION_THRESHOLD);
        LDM.addColaRunsRequired(builder, COLA_RUNS_REQUIRED);
        LDM.addColaPointsOfContact(builder, COLA_POINTS_OF_CONTACT);
        LDM.addOrbitalParameters(builder, ORBITAL_PARAMETERS);
        LDM.addBurnOutVectors(builder, BURN_OUT_VECTORS);
        return LDM.endLDM(builder);
    }
}
