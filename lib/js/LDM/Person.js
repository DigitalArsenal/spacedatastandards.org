// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
/**
 * Information about a person
 */
export class Person {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPerson(bb, obj) {
        return (obj || new Person()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPerson(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Person()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    FAMILY_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    GIVEN_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ADDITIONAL_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    HONORIFIC_PREFIX(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    HONORIFIC_SUFFIX(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startPerson(builder) {
        builder.startObject(5);
    }
    static addFamilyName(builder, FAMILY_NAMEOffset) {
        builder.addFieldOffset(0, FAMILY_NAMEOffset, 0);
    }
    static addGivenName(builder, GIVEN_NAMEOffset) {
        builder.addFieldOffset(1, GIVEN_NAMEOffset, 0);
    }
    static addAdditionalName(builder, ADDITIONAL_NAMEOffset) {
        builder.addFieldOffset(2, ADDITIONAL_NAMEOffset, 0);
    }
    static addHonorificPrefix(builder, HONORIFIC_PREFIXOffset) {
        builder.addFieldOffset(3, HONORIFIC_PREFIXOffset, 0);
    }
    static addHonorificSuffix(builder, HONORIFIC_SUFFIXOffset) {
        builder.addFieldOffset(4, HONORIFIC_SUFFIXOffset, 0);
    }
    static endPerson(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createPerson(builder, FAMILY_NAMEOffset, GIVEN_NAMEOffset, ADDITIONAL_NAMEOffset, HONORIFIC_PREFIXOffset, HONORIFIC_SUFFIXOffset) {
        Person.startPerson(builder);
        Person.addFamilyName(builder, FAMILY_NAMEOffset);
        Person.addGivenName(builder, GIVEN_NAMEOffset);
        Person.addAdditionalName(builder, ADDITIONAL_NAMEOffset);
        Person.addHonorificPrefix(builder, HONORIFIC_PREFIXOffset);
        Person.addHonorificSuffix(builder, HONORIFIC_SUFFIXOffset);
        return Person.endPerson(builder);
    }
    unpack() {
        return new PersonT(this.FAMILY_NAME(), this.GIVEN_NAME(), this.ADDITIONAL_NAME(), this.HONORIFIC_PREFIX(), this.HONORIFIC_SUFFIX());
    }
    unpackTo(_o) {
        _o.FAMILY_NAME = this.FAMILY_NAME();
        _o.GIVEN_NAME = this.GIVEN_NAME();
        _o.ADDITIONAL_NAME = this.ADDITIONAL_NAME();
        _o.HONORIFIC_PREFIX = this.HONORIFIC_PREFIX();
        _o.HONORIFIC_SUFFIX = this.HONORIFIC_SUFFIX();
    }
}
export class PersonT {
    constructor(FAMILY_NAME = null, GIVEN_NAME = null, ADDITIONAL_NAME = null, HONORIFIC_PREFIX = null, HONORIFIC_SUFFIX = null) {
        this.FAMILY_NAME = FAMILY_NAME;
        this.GIVEN_NAME = GIVEN_NAME;
        this.ADDITIONAL_NAME = ADDITIONAL_NAME;
        this.HONORIFIC_PREFIX = HONORIFIC_PREFIX;
        this.HONORIFIC_SUFFIX = HONORIFIC_SUFFIX;
    }
    pack(builder) {
        const FAMILY_NAME = (this.FAMILY_NAME !== null ? builder.createString(this.FAMILY_NAME) : 0);
        const GIVEN_NAME = (this.GIVEN_NAME !== null ? builder.createString(this.GIVEN_NAME) : 0);
        const ADDITIONAL_NAME = (this.ADDITIONAL_NAME !== null ? builder.createString(this.ADDITIONAL_NAME) : 0);
        const HONORIFIC_PREFIX = (this.HONORIFIC_PREFIX !== null ? builder.createString(this.HONORIFIC_PREFIX) : 0);
        const HONORIFIC_SUFFIX = (this.HONORIFIC_SUFFIX !== null ? builder.createString(this.HONORIFIC_SUFFIX) : 0);
        return Person.createPerson(builder, FAMILY_NAME, GIVEN_NAME, ADDITIONAL_NAME, HONORIFIC_PREFIX, HONORIFIC_SUFFIX);
    }
}
