// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { Geometry } from './Geometry.js';
import { IDM } from './IDM.js';
import { SiteType } from './SiteType.js';
/**
 * Site Information Message
 */
export class SIT {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSIT(bb, obj) {
        return (obj || new SIT()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSIT(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SIT()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ABBREVIATION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Site type as defined in SiteType enum
     */
    SITE_TYPE() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : SiteType.LAUNCH_SITE;
    }
    CATCODE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    NETWORK(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Latitude of the site
     */
    LATITUDE() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Longitude of the site
     */
    LONGITUDE() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Altitude of the site
     */
    ALTITUDE() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Geometry of the site
     */
    GEOMETRY(obj) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? (obj || new Geometry()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    /**
     * Center point geometry coordinates
     */
    CENTER_POINT_GEOMETRY(index) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    centerPointGeometryLength() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    centerPointGeometryArray() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    CLASSIFICATION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CTR_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CREATED_BY(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    DESCRIPTION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MODEL_URL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SOURCE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Indicates if the site is taskable
     */
    TASKABLE() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    OPERATIONAL_STATUS(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ESTABLISHMENT_DATE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CONTACT_INFO(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ENVIRONMENTAL_IMPACT(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ACCESSIBILITY_INFRA(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Vector of Integrated Devices (IDM)
     */
    INTEGRATED_DEVICES(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? (obj || new IDM()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    integratedDevicesLength() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startSIT(builder) {
        builder.startObject(24);
    }
    static addId(builder, IDOffset) {
        builder.addFieldOffset(0, IDOffset, 0);
    }
    static addName(builder, NAMEOffset) {
        builder.addFieldOffset(1, NAMEOffset, 0);
    }
    static addAbbreviation(builder, ABBREVIATIONOffset) {
        builder.addFieldOffset(2, ABBREVIATIONOffset, 0);
    }
    static addSiteType(builder, SITE_TYPE) {
        builder.addFieldInt8(3, SITE_TYPE, SiteType.LAUNCH_SITE);
    }
    static addCatcode(builder, CATCODEOffset) {
        builder.addFieldOffset(4, CATCODEOffset, 0);
    }
    static addNetwork(builder, NETWORKOffset) {
        builder.addFieldOffset(5, NETWORKOffset, 0);
    }
    static addLatitude(builder, LATITUDE) {
        builder.addFieldFloat32(6, LATITUDE, 0.0);
    }
    static addLongitude(builder, LONGITUDE) {
        builder.addFieldFloat32(7, LONGITUDE, 0.0);
    }
    static addAltitude(builder, ALTITUDE) {
        builder.addFieldFloat32(8, ALTITUDE, 0.0);
    }
    static addGeometry(builder, GEOMETRYOffset) {
        builder.addFieldOffset(9, GEOMETRYOffset, 0);
    }
    static addCenterPointGeometry(builder, CENTER_POINT_GEOMETRYOffset) {
        builder.addFieldOffset(10, CENTER_POINT_GEOMETRYOffset, 0);
    }
    static createCenterPointGeometryVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    }
    static startCenterPointGeometryVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addClassification(builder, CLASSIFICATIONOffset) {
        builder.addFieldOffset(11, CLASSIFICATIONOffset, 0);
    }
    static addCtrId(builder, CTR_IDOffset) {
        builder.addFieldOffset(12, CTR_IDOffset, 0);
    }
    static addCreatedBy(builder, CREATED_BYOffset) {
        builder.addFieldOffset(13, CREATED_BYOffset, 0);
    }
    static addDescription(builder, DESCRIPTIONOffset) {
        builder.addFieldOffset(14, DESCRIPTIONOffset, 0);
    }
    static addModelUrl(builder, MODEL_URLOffset) {
        builder.addFieldOffset(15, MODEL_URLOffset, 0);
    }
    static addSource(builder, SOURCEOffset) {
        builder.addFieldOffset(16, SOURCEOffset, 0);
    }
    static addTaskable(builder, TASKABLE) {
        builder.addFieldInt8(17, +TASKABLE, +false);
    }
    static addOperationalStatus(builder, OPERATIONAL_STATUSOffset) {
        builder.addFieldOffset(18, OPERATIONAL_STATUSOffset, 0);
    }
    static addEstablishmentDate(builder, ESTABLISHMENT_DATEOffset) {
        builder.addFieldOffset(19, ESTABLISHMENT_DATEOffset, 0);
    }
    static addContactInfo(builder, CONTACT_INFOOffset) {
        builder.addFieldOffset(20, CONTACT_INFOOffset, 0);
    }
    static addEnvironmentalImpact(builder, ENVIRONMENTAL_IMPACTOffset) {
        builder.addFieldOffset(21, ENVIRONMENTAL_IMPACTOffset, 0);
    }
    static addAccessibilityInfra(builder, ACCESSIBILITY_INFRAOffset) {
        builder.addFieldOffset(22, ACCESSIBILITY_INFRAOffset, 0);
    }
    static addIntegratedDevices(builder, INTEGRATED_DEVICESOffset) {
        builder.addFieldOffset(23, INTEGRATED_DEVICESOffset, 0);
    }
    static createIntegratedDevicesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startIntegratedDevicesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endSIT(builder) {
        const offset = builder.endObject();
        return offset;
    }
    unpack() {
        return new SITT(this.ID(), this.NAME(), this.ABBREVIATION(), this.SITE_TYPE(), this.CATCODE(), this.NETWORK(), this.LATITUDE(), this.LONGITUDE(), this.ALTITUDE(), (this.GEOMETRY() !== null ? this.GEOMETRY().unpack() : null), this.bb.createScalarList(this.CENTER_POINT_GEOMETRY.bind(this), this.centerPointGeometryLength()), this.CLASSIFICATION(), this.CTR_ID(), this.CREATED_BY(), this.DESCRIPTION(), this.MODEL_URL(), this.SOURCE(), this.TASKABLE(), this.OPERATIONAL_STATUS(), this.ESTABLISHMENT_DATE(), this.CONTACT_INFO(), this.ENVIRONMENTAL_IMPACT(), this.ACCESSIBILITY_INFRA(), this.bb.createObjList(this.INTEGRATED_DEVICES.bind(this), this.integratedDevicesLength()));
    }
    unpackTo(_o) {
        _o.ID = this.ID();
        _o.NAME = this.NAME();
        _o.ABBREVIATION = this.ABBREVIATION();
        _o.SITE_TYPE = this.SITE_TYPE();
        _o.CATCODE = this.CATCODE();
        _o.NETWORK = this.NETWORK();
        _o.LATITUDE = this.LATITUDE();
        _o.LONGITUDE = this.LONGITUDE();
        _o.ALTITUDE = this.ALTITUDE();
        _o.GEOMETRY = (this.GEOMETRY() !== null ? this.GEOMETRY().unpack() : null);
        _o.CENTER_POINT_GEOMETRY = this.bb.createScalarList(this.CENTER_POINT_GEOMETRY.bind(this), this.centerPointGeometryLength());
        _o.CLASSIFICATION = this.CLASSIFICATION();
        _o.CTR_ID = this.CTR_ID();
        _o.CREATED_BY = this.CREATED_BY();
        _o.DESCRIPTION = this.DESCRIPTION();
        _o.MODEL_URL = this.MODEL_URL();
        _o.SOURCE = this.SOURCE();
        _o.TASKABLE = this.TASKABLE();
        _o.OPERATIONAL_STATUS = this.OPERATIONAL_STATUS();
        _o.ESTABLISHMENT_DATE = this.ESTABLISHMENT_DATE();
        _o.CONTACT_INFO = this.CONTACT_INFO();
        _o.ENVIRONMENTAL_IMPACT = this.ENVIRONMENTAL_IMPACT();
        _o.ACCESSIBILITY_INFRA = this.ACCESSIBILITY_INFRA();
        _o.INTEGRATED_DEVICES = this.bb.createObjList(this.INTEGRATED_DEVICES.bind(this), this.integratedDevicesLength());
    }
}
export class SITT {
    constructor(ID = null, NAME = null, ABBREVIATION = null, SITE_TYPE = SiteType.LAUNCH_SITE, CATCODE = null, NETWORK = null, LATITUDE = 0.0, LONGITUDE = 0.0, ALTITUDE = 0.0, GEOMETRY = null, CENTER_POINT_GEOMETRY = [], CLASSIFICATION = null, CTR_ID = null, CREATED_BY = null, DESCRIPTION = null, MODEL_URL = null, SOURCE = null, TASKABLE = false, OPERATIONAL_STATUS = null, ESTABLISHMENT_DATE = null, CONTACT_INFO = null, ENVIRONMENTAL_IMPACT = null, ACCESSIBILITY_INFRA = null, INTEGRATED_DEVICES = []) {
        this.ID = ID;
        this.NAME = NAME;
        this.ABBREVIATION = ABBREVIATION;
        this.SITE_TYPE = SITE_TYPE;
        this.CATCODE = CATCODE;
        this.NETWORK = NETWORK;
        this.LATITUDE = LATITUDE;
        this.LONGITUDE = LONGITUDE;
        this.ALTITUDE = ALTITUDE;
        this.GEOMETRY = GEOMETRY;
        this.CENTER_POINT_GEOMETRY = CENTER_POINT_GEOMETRY;
        this.CLASSIFICATION = CLASSIFICATION;
        this.CTR_ID = CTR_ID;
        this.CREATED_BY = CREATED_BY;
        this.DESCRIPTION = DESCRIPTION;
        this.MODEL_URL = MODEL_URL;
        this.SOURCE = SOURCE;
        this.TASKABLE = TASKABLE;
        this.OPERATIONAL_STATUS = OPERATIONAL_STATUS;
        this.ESTABLISHMENT_DATE = ESTABLISHMENT_DATE;
        this.CONTACT_INFO = CONTACT_INFO;
        this.ENVIRONMENTAL_IMPACT = ENVIRONMENTAL_IMPACT;
        this.ACCESSIBILITY_INFRA = ACCESSIBILITY_INFRA;
        this.INTEGRATED_DEVICES = INTEGRATED_DEVICES;
    }
    pack(builder) {
        const ID = (this.ID !== null ? builder.createString(this.ID) : 0);
        const NAME = (this.NAME !== null ? builder.createString(this.NAME) : 0);
        const ABBREVIATION = (this.ABBREVIATION !== null ? builder.createString(this.ABBREVIATION) : 0);
        const CATCODE = (this.CATCODE !== null ? builder.createString(this.CATCODE) : 0);
        const NETWORK = (this.NETWORK !== null ? builder.createString(this.NETWORK) : 0);
        const GEOMETRY = (this.GEOMETRY !== null ? this.GEOMETRY.pack(builder) : 0);
        const CENTER_POINT_GEOMETRY = SIT.createCenterPointGeometryVector(builder, this.CENTER_POINT_GEOMETRY);
        const CLASSIFICATION = (this.CLASSIFICATION !== null ? builder.createString(this.CLASSIFICATION) : 0);
        const CTR_ID = (this.CTR_ID !== null ? builder.createString(this.CTR_ID) : 0);
        const CREATED_BY = (this.CREATED_BY !== null ? builder.createString(this.CREATED_BY) : 0);
        const DESCRIPTION = (this.DESCRIPTION !== null ? builder.createString(this.DESCRIPTION) : 0);
        const MODEL_URL = (this.MODEL_URL !== null ? builder.createString(this.MODEL_URL) : 0);
        const SOURCE = (this.SOURCE !== null ? builder.createString(this.SOURCE) : 0);
        const OPERATIONAL_STATUS = (this.OPERATIONAL_STATUS !== null ? builder.createString(this.OPERATIONAL_STATUS) : 0);
        const ESTABLISHMENT_DATE = (this.ESTABLISHMENT_DATE !== null ? builder.createString(this.ESTABLISHMENT_DATE) : 0);
        const CONTACT_INFO = (this.CONTACT_INFO !== null ? builder.createString(this.CONTACT_INFO) : 0);
        const ENVIRONMENTAL_IMPACT = (this.ENVIRONMENTAL_IMPACT !== null ? builder.createString(this.ENVIRONMENTAL_IMPACT) : 0);
        const ACCESSIBILITY_INFRA = (this.ACCESSIBILITY_INFRA !== null ? builder.createString(this.ACCESSIBILITY_INFRA) : 0);
        const INTEGRATED_DEVICES = SIT.createIntegratedDevicesVector(builder, builder.createObjectOffsetList(this.INTEGRATED_DEVICES));
        SIT.startSIT(builder);
        SIT.addId(builder, ID);
        SIT.addName(builder, NAME);
        SIT.addAbbreviation(builder, ABBREVIATION);
        SIT.addSiteType(builder, this.SITE_TYPE);
        SIT.addCatcode(builder, CATCODE);
        SIT.addNetwork(builder, NETWORK);
        SIT.addLatitude(builder, this.LATITUDE);
        SIT.addLongitude(builder, this.LONGITUDE);
        SIT.addAltitude(builder, this.ALTITUDE);
        SIT.addGeometry(builder, GEOMETRY);
        SIT.addCenterPointGeometry(builder, CENTER_POINT_GEOMETRY);
        SIT.addClassification(builder, CLASSIFICATION);
        SIT.addCtrId(builder, CTR_ID);
        SIT.addCreatedBy(builder, CREATED_BY);
        SIT.addDescription(builder, DESCRIPTION);
        SIT.addModelUrl(builder, MODEL_URL);
        SIT.addSource(builder, SOURCE);
        SIT.addTaskable(builder, this.TASKABLE);
        SIT.addOperationalStatus(builder, OPERATIONAL_STATUS);
        SIT.addEstablishmentDate(builder, ESTABLISHMENT_DATE);
        SIT.addContactInfo(builder, CONTACT_INFO);
        SIT.addEnvironmentalImpact(builder, ENVIRONMENTAL_IMPACT);
        SIT.addAccessibilityInfra(builder, ACCESSIBILITY_INFRA);
        SIT.addIntegratedDevices(builder, INTEGRATED_DEVICES);
        return SIT.endSIT(builder);
    }
}
