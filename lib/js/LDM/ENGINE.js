// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { ENGINE_TYPE } from './ENGINE_TYPE.js';
/**
 * Engine Details
 */
export class ENGINE {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsENGINE(bb, obj) {
        return (obj || new ENGINE()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsENGINE(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ENGINE()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    ENGINE_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Type of Engine
     */
    TYPE() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : ENGINE_TYPE.LIQUID;
    }
    /**
     * Thrust Produced by the Engine (in Newtons)
     */
    THRUST() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startENGINE(builder) {
        builder.startObject(3);
    }
    static addEngineName(builder, ENGINE_NAMEOffset) {
        builder.addFieldOffset(0, ENGINE_NAMEOffset, 0);
    }
    static addType(builder, TYPE) {
        builder.addFieldInt8(1, TYPE, ENGINE_TYPE.LIQUID);
    }
    static addThrust(builder, THRUST) {
        builder.addFieldFloat64(2, THRUST, 0.0);
    }
    static endENGINE(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createENGINE(builder, ENGINE_NAMEOffset, TYPE, THRUST) {
        ENGINE.startENGINE(builder);
        ENGINE.addEngineName(builder, ENGINE_NAMEOffset);
        ENGINE.addType(builder, TYPE);
        ENGINE.addThrust(builder, THRUST);
        return ENGINE.endENGINE(builder);
    }
    unpack() {
        return new ENGINET(this.ENGINE_NAME(), this.TYPE(), this.THRUST());
    }
    unpackTo(_o) {
        _o.ENGINE_NAME = this.ENGINE_NAME();
        _o.TYPE = this.TYPE();
        _o.THRUST = this.THRUST();
    }
}
export class ENGINET {
    constructor(ENGINE_NAME = null, TYPE = ENGINE_TYPE.LIQUID, THRUST = 0.0) {
        this.ENGINE_NAME = ENGINE_NAME;
        this.TYPE = TYPE;
        this.THRUST = THRUST;
    }
    pack(builder) {
        const ENGINE_NAME = (this.ENGINE_NAME !== null ? builder.createString(this.ENGINE_NAME) : 0);
        return ENGINE.createENGINE(builder, ENGINE_NAME, this.TYPE, this.THRUST);
    }
}
