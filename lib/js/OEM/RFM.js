// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { RFMUnion, unionToRfmunion } from './RFMUnion.js';
/**
 * Reference Frame Message
 */
export class RFM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsRFM(bb, obj) {
        return (obj || new RFM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsRFM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RFM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$RFM');
    }
    referenceFrameType() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : RFMUnion.NONE;
    }
    REFERENCE_FRAME(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    INDEX(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startRFM(builder) {
        builder.startObject(3);
    }
    static addReferenceFrameType(builder, referenceFrameType) {
        builder.addFieldInt8(0, referenceFrameType, RFMUnion.NONE);
    }
    static addReferenceFrame(builder, REFERENCE_FRAMEOffset) {
        builder.addFieldOffset(1, REFERENCE_FRAMEOffset, 0);
    }
    static addIndex(builder, INDEXOffset) {
        builder.addFieldOffset(2, INDEXOffset, 0);
    }
    static endRFM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishRFMBuffer(builder, offset) {
        builder.finish(offset, '$RFM');
    }
    static finishSizePrefixedRFMBuffer(builder, offset) {
        builder.finish(offset, '$RFM', true);
    }
    static createRFM(builder, referenceFrameType, REFERENCE_FRAMEOffset, INDEXOffset) {
        RFM.startRFM(builder);
        RFM.addReferenceFrameType(builder, referenceFrameType);
        RFM.addReferenceFrame(builder, REFERENCE_FRAMEOffset);
        RFM.addIndex(builder, INDEXOffset);
        return RFM.endRFM(builder);
    }
    unpack() {
        return new RFMT(this.referenceFrameType(), (() => {
            const temp = unionToRfmunion(this.referenceFrameType(), this.REFERENCE_FRAME.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })(), this.INDEX());
    }
    unpackTo(_o) {
        _o.referenceFrameType = this.referenceFrameType();
        _o.REFERENCE_FRAME = (() => {
            const temp = unionToRfmunion(this.referenceFrameType(), this.REFERENCE_FRAME.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
        _o.INDEX = this.INDEX();
    }
}
export class RFMT {
    constructor(referenceFrameType = RFMUnion.NONE, REFERENCE_FRAME = null, INDEX = null) {
        this.referenceFrameType = referenceFrameType;
        this.REFERENCE_FRAME = REFERENCE_FRAME;
        this.INDEX = INDEX;
    }
    pack(builder) {
        const REFERENCE_FRAME = builder.createObjectOffset(this.REFERENCE_FRAME);
        const INDEX = (this.INDEX !== null ? builder.createString(this.INDEX) : 0);
        return RFM.createRFM(builder, this.referenceFrameType, REFERENCE_FRAME, INDEX);
    }
}
