// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { STAGE } from './STAGE.js';
import { SUSTAINER } from './SUSTAINER.js';
/**
 * Rocket Configuration
 */
export class ROC {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsROC(bb, obj) {
        return (obj || new ROC()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsROC(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ROC()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    FAMILY(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    VARIANT(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Stages in the Rocket
     */
    STAGES(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new STAGE()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    stagesLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Sustainers in the Rocket
     */
    SUSTAINERS(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new SUSTAINER()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    sustainersLength() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startROC(builder) {
        builder.startObject(5);
    }
    static addName(builder, NAMEOffset) {
        builder.addFieldOffset(0, NAMEOffset, 0);
    }
    static addFamily(builder, FAMILYOffset) {
        builder.addFieldOffset(1, FAMILYOffset, 0);
    }
    static addVariant(builder, VARIANTOffset) {
        builder.addFieldOffset(2, VARIANTOffset, 0);
    }
    static addStages(builder, STAGESOffset) {
        builder.addFieldOffset(3, STAGESOffset, 0);
    }
    static createStagesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startStagesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addSustainers(builder, SUSTAINERSOffset) {
        builder.addFieldOffset(4, SUSTAINERSOffset, 0);
    }
    static createSustainersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startSustainersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endROC(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createROC(builder, NAMEOffset, FAMILYOffset, VARIANTOffset, STAGESOffset, SUSTAINERSOffset) {
        ROC.startROC(builder);
        ROC.addName(builder, NAMEOffset);
        ROC.addFamily(builder, FAMILYOffset);
        ROC.addVariant(builder, VARIANTOffset);
        ROC.addStages(builder, STAGESOffset);
        ROC.addSustainers(builder, SUSTAINERSOffset);
        return ROC.endROC(builder);
    }
    unpack() {
        return new ROCT(this.NAME(), this.FAMILY(), this.VARIANT(), this.bb.createObjList(this.STAGES.bind(this), this.stagesLength()), this.bb.createObjList(this.SUSTAINERS.bind(this), this.sustainersLength()));
    }
    unpackTo(_o) {
        _o.NAME = this.NAME();
        _o.FAMILY = this.FAMILY();
        _o.VARIANT = this.VARIANT();
        _o.STAGES = this.bb.createObjList(this.STAGES.bind(this), this.stagesLength());
        _o.SUSTAINERS = this.bb.createObjList(this.SUSTAINERS.bind(this), this.sustainersLength());
    }
}
export class ROCT {
    constructor(NAME = null, FAMILY = null, VARIANT = null, STAGES = [], SUSTAINERS = []) {
        this.NAME = NAME;
        this.FAMILY = FAMILY;
        this.VARIANT = VARIANT;
        this.STAGES = STAGES;
        this.SUSTAINERS = SUSTAINERS;
    }
    pack(builder) {
        const NAME = (this.NAME !== null ? builder.createString(this.NAME) : 0);
        const FAMILY = (this.FAMILY !== null ? builder.createString(this.FAMILY) : 0);
        const VARIANT = (this.VARIANT !== null ? builder.createString(this.VARIANT) : 0);
        const STAGES = ROC.createStagesVector(builder, builder.createObjectOffsetList(this.STAGES));
        const SUSTAINERS = ROC.createSustainersVector(builder, builder.createObjectOffsetList(this.SUSTAINERS));
        return ROC.createROC(builder, NAME, FAMILY, VARIANT, STAGES, SUSTAINERS);
    }
}
