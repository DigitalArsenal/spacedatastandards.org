// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
/**
 * Country Identity Message
 */
export class CTR {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCTR(bb, obj) {
        return (obj || new CTR()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCTR(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CTR()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$CTR');
    }
    ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    GENC_CODE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ALPHA_2_CODE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ALPHA_3_CODE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    STANAG_CODE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    INTERNET_CCTLD(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    COMMENT(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startCTR(builder) {
        builder.startObject(8);
    }
    static addId(builder, IDOffset) {
        builder.addFieldOffset(0, IDOffset, 0);
    }
    static addName(builder, NAMEOffset) {
        builder.addFieldOffset(1, NAMEOffset, 0);
    }
    static addGencCode(builder, GENC_CODEOffset) {
        builder.addFieldOffset(2, GENC_CODEOffset, 0);
    }
    static addAlpha2Code(builder, ALPHA_2_CODEOffset) {
        builder.addFieldOffset(3, ALPHA_2_CODEOffset, 0);
    }
    static addAlpha3Code(builder, ALPHA_3_CODEOffset) {
        builder.addFieldOffset(4, ALPHA_3_CODEOffset, 0);
    }
    static addStanagCode(builder, STANAG_CODEOffset) {
        builder.addFieldOffset(5, STANAG_CODEOffset, 0);
    }
    static addInternetCctld(builder, INTERNET_CCTLDOffset) {
        builder.addFieldOffset(6, INTERNET_CCTLDOffset, 0);
    }
    static addComment(builder, COMMENTOffset) {
        builder.addFieldOffset(7, COMMENTOffset, 0);
    }
    static endCTR(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishCTRBuffer(builder, offset) {
        builder.finish(offset, '$CTR');
    }
    static finishSizePrefixedCTRBuffer(builder, offset) {
        builder.finish(offset, '$CTR', true);
    }
    static createCTR(builder, IDOffset, NAMEOffset, GENC_CODEOffset, ALPHA_2_CODEOffset, ALPHA_3_CODEOffset, STANAG_CODEOffset, INTERNET_CCTLDOffset, COMMENTOffset) {
        CTR.startCTR(builder);
        CTR.addId(builder, IDOffset);
        CTR.addName(builder, NAMEOffset);
        CTR.addGencCode(builder, GENC_CODEOffset);
        CTR.addAlpha2Code(builder, ALPHA_2_CODEOffset);
        CTR.addAlpha3Code(builder, ALPHA_3_CODEOffset);
        CTR.addStanagCode(builder, STANAG_CODEOffset);
        CTR.addInternetCctld(builder, INTERNET_CCTLDOffset);
        CTR.addComment(builder, COMMENTOffset);
        return CTR.endCTR(builder);
    }
    unpack() {
        return new CTRT(this.ID(), this.NAME(), this.GENC_CODE(), this.ALPHA_2_CODE(), this.ALPHA_3_CODE(), this.STANAG_CODE(), this.INTERNET_CCTLD(), this.COMMENT());
    }
    unpackTo(_o) {
        _o.ID = this.ID();
        _o.NAME = this.NAME();
        _o.GENC_CODE = this.GENC_CODE();
        _o.ALPHA_2_CODE = this.ALPHA_2_CODE();
        _o.ALPHA_3_CODE = this.ALPHA_3_CODE();
        _o.STANAG_CODE = this.STANAG_CODE();
        _o.INTERNET_CCTLD = this.INTERNET_CCTLD();
        _o.COMMENT = this.COMMENT();
    }
}
export class CTRT {
    constructor(ID = null, NAME = null, GENC_CODE = null, ALPHA_2_CODE = null, ALPHA_3_CODE = null, STANAG_CODE = null, INTERNET_CCTLD = null, COMMENT = null) {
        this.ID = ID;
        this.NAME = NAME;
        this.GENC_CODE = GENC_CODE;
        this.ALPHA_2_CODE = ALPHA_2_CODE;
        this.ALPHA_3_CODE = ALPHA_3_CODE;
        this.STANAG_CODE = STANAG_CODE;
        this.INTERNET_CCTLD = INTERNET_CCTLD;
        this.COMMENT = COMMENT;
    }
    pack(builder) {
        const ID = (this.ID !== null ? builder.createString(this.ID) : 0);
        const NAME = (this.NAME !== null ? builder.createString(this.NAME) : 0);
        const GENC_CODE = (this.GENC_CODE !== null ? builder.createString(this.GENC_CODE) : 0);
        const ALPHA_2_CODE = (this.ALPHA_2_CODE !== null ? builder.createString(this.ALPHA_2_CODE) : 0);
        const ALPHA_3_CODE = (this.ALPHA_3_CODE !== null ? builder.createString(this.ALPHA_3_CODE) : 0);
        const STANAG_CODE = (this.STANAG_CODE !== null ? builder.createString(this.STANAG_CODE) : 0);
        const INTERNET_CCTLD = (this.INTERNET_CCTLD !== null ? builder.createString(this.INTERNET_CCTLD) : 0);
        const COMMENT = (this.COMMENT !== null ? builder.createString(this.COMMENT) : 0);
        return CTR.createCTR(builder, ID, NAME, GENC_CODE, ALPHA_2_CODE, ALPHA_3_CODE, STANAG_CODE, INTERNET_CCTLD, COMMENT);
    }
}
