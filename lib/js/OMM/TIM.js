// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { timeSystem } from './timeSystem.js';
export class TIM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsTIM(bb, obj) {
        return (obj || new TIM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsTIM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TIM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$TIM');
    }
    TIME_SYSTEM() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : timeSystem.GMST;
    }
    static startTIM(builder) {
        builder.startObject(1);
    }
    static addTimeSystem(builder, TIME_SYSTEM) {
        builder.addFieldInt8(0, TIME_SYSTEM, timeSystem.GMST);
    }
    static endTIM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishTIMBuffer(builder, offset) {
        builder.finish(offset, '$TIM');
    }
    static finishSizePrefixedTIMBuffer(builder, offset) {
        builder.finish(offset, '$TIM', true);
    }
    static createTIM(builder, TIME_SYSTEM) {
        TIM.startTIM(builder);
        TIM.addTimeSystem(builder, TIME_SYSTEM);
        return TIM.endTIM(builder);
    }
    unpack() {
        return new TIMT(this.TIME_SYSTEM());
    }
    unpackTo(_o) {
        _o.TIME_SYSTEM = this.TIME_SYSTEM();
    }
}
export class TIMT {
    constructor(TIME_SYSTEM = timeSystem.GMST) {
        this.TIME_SYSTEM = TIME_SYSTEM;
    }
    pack(builder) {
        return TIM.createTIM(builder, this.TIME_SYSTEM);
    }
}
