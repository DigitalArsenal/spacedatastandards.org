// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { OBSERVERLocationReferenceFrame } from './OBSERVERLocationReferenceFrame.js';
/**
 * Tracking Data Message
 */
export class TDM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsTDM(bb, obj) {
        return (obj || new TDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsTDM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$TDM');
    }
    OBSERVER_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Cartesian X coordinate of the OBSERVER location in chosen reference frame
     */
    OBSERVER_X() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Cartesian Y coordinate of the OBSERVER location in chosen reference frame
     */
    OBSERVER_Y() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Cartesian Z coordinate of the OBSERVER location in chosen reference frame
     */
    OBSERVER_Z() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Cartesian X coordinate of the OBSERVER velocity in chosen reference frame
     */
    OBSERVER_VX() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Cartesian Y coordinate of the OBSERVER velocity in chosen reference frame
     */
    OBSERVER_VY() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Cartesian Z coordinate of the OBSERVER velocity in chosen reference frame
     */
    OBSERVER_VZ() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Reference frame used for OBSERVER location Cartesian coordinates (e.g., ECEF, ECI)
     */
    OBSERVER_POSITION_REFERENCE_FRAME() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : OBSERVERLocationReferenceFrame.EME2000;
    }
    /**
     * Reference frame used for obs location Cartesian coordinates (e.g., ECEF, ECI)
     */
    OBS_REFERENCE_FRAME() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : OBSERVERLocationReferenceFrame.EME2000;
    }
    EPOCH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CCSDS_TDM_VERS(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    COMMENT(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    commentLength() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    CREATION_DATE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ORIGINATOR(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    META_START(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TIME_SYSTEM(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    START_TIME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    STOP_TIME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    PARTICIPANT_1(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    PARTICIPANT_2(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    PARTICIPANT_3(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MODE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * First path in TDM -  CCSDS 503.0-B-1, Page D-9
     */
    PATH_1() {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    }
    /**
     * Second path in TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
     */
    PATH_2() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    }
    TRANSMIT_BAND(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    RECEIVE_BAND(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Integration interval -  CCSDS 503.0-B-1, Page D-9
     */
    INTEGRATION_INTERVAL() {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    INTEGRATION_REF(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Receive delay for second participant -  CCSDS 503.0-B-1, Page D-9
     */
    RECEIVE_DELAY_2() {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Receive delay for third participant -  CCSDS 503.0-B-1, Page D-9
     */
    RECEIVE_DELAY_3() {
        const offset = this.bb.__offset(this.bb_pos, 62);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    DATA_QUALITY(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    META_STOP(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 66);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    DATA_START(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 68);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Transmit frequency for first participant -  CCSDS 503.0-B-1, Page D-9
     */
    TRANSMIT_FREQ_1() {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Receive frequency -  CCSDS 503.0-B-1, Page D-9
     */
    RECEIVE_FREQ(index) {
        const offset = this.bb.__offset(this.bb_pos, 72);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    receiveFreqLength() {
        const offset = this.bb.__offset(this.bb_pos, 72);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    receiveFreqArray() {
        const offset = this.bb.__offset(this.bb_pos, 72);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    DATA_STOP(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 74);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TIMETAG_REF(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 76);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ANGLE_TYPE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 78);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * First angle value -  CCSDS 503.0-B-1, Page D-12
     */
    ANGLE_1(index) {
        const offset = this.bb.__offset(this.bb_pos, 80);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    angle1Length() {
        const offset = this.bb.__offset(this.bb_pos, 80);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    angle1Array() {
        const offset = this.bb.__offset(this.bb_pos, 80);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Second angle value -  CCSDS 503.0-B-1, Page D-12
     */
    ANGLE_2(index) {
        const offset = this.bb.__offset(this.bb_pos, 82);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    angle2Length() {
        const offset = this.bb.__offset(this.bb_pos, 82);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    angle2Array() {
        const offset = this.bb.__offset(this.bb_pos, 82);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Uncertainty of first angle -  CCSDS 503.0-B-1
     */
    ANGLE_UNCERTAINTY_1() {
        const offset = this.bb.__offset(this.bb_pos, 84);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Uncertainty of second angle -  CCSDS 503.0-B-1
     */
    ANGLE_UNCERTAINTY_2() {
        const offset = this.bb.__offset(this.bb_pos, 86);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Rate of change of range -  CCSDS 503.0-B-1
     */
    RANGE_RATE() {
        const offset = this.bb.__offset(this.bb_pos, 88);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Uncertainty in range -  CCSDS 503.0-B-1
     */
    RANGE_UNCERTAINTY() {
        const offset = this.bb.__offset(this.bb_pos, 90);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    RANGE_MODE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 92);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Modulus value for range data -  CCSDS 503.0-B-1, Page D-10
     */
    RANGE_MODULUS() {
        const offset = this.bb.__offset(this.bb_pos, 94);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * First correction angle -  CCSDS 503.0-B-1, Page D-12
     */
    CORRECTION_ANGLE_1() {
        const offset = this.bb.__offset(this.bb_pos, 96);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Second correction angle -  CCSDS 503.0-B-1, Page D-12
     */
    CORRECTION_ANGLE_2() {
        const offset = this.bb.__offset(this.bb_pos, 98);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    CORRECTIONS_APPLIED(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 100);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Dry component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
     */
    TROPO_DRY(index) {
        const offset = this.bb.__offset(this.bb_pos, 102);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    tropoDryLength() {
        const offset = this.bb.__offset(this.bb_pos, 102);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    tropoDryArray() {
        const offset = this.bb.__offset(this.bb_pos, 102);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Wet component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
     */
    TROPO_WET(index) {
        const offset = this.bb.__offset(this.bb_pos, 104);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    tropoWetLength() {
        const offset = this.bb.__offset(this.bb_pos, 104);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    tropoWetArray() {
        const offset = this.bb.__offset(this.bb_pos, 104);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Slant total electron content -  CCSDS 503.0-B-1, Page D-13
     */
    STEC(index) {
        const offset = this.bb.__offset(this.bb_pos, 106);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    stecLength() {
        const offset = this.bb.__offset(this.bb_pos, 106);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    stecArray() {
        const offset = this.bb.__offset(this.bb_pos, 106);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Atmospheric pressure -  CCSDS 503.0-B-1, Page D-14
     */
    PRESSURE(index) {
        const offset = this.bb.__offset(this.bb_pos, 108);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    pressureLength() {
        const offset = this.bb.__offset(this.bb_pos, 108);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    pressureArray() {
        const offset = this.bb.__offset(this.bb_pos, 108);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Relative humidity -  CCSDS 503.0-B-1, Page D-14
     */
    RHUMIDITY(index) {
        const offset = this.bb.__offset(this.bb_pos, 110);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    rhumidityLength() {
        const offset = this.bb.__offset(this.bb_pos, 110);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    rhumidityArray() {
        const offset = this.bb.__offset(this.bb_pos, 110);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Ambient temperature -  CCSDS 503.0-B-1, Page D-14
     */
    TEMPERATURE(index) {
        const offset = this.bb.__offset(this.bb_pos, 112);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    temperatureLength() {
        const offset = this.bb.__offset(this.bb_pos, 112);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    temperatureArray() {
        const offset = this.bb.__offset(this.bb_pos, 112);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Clock bias values -  CCSDS 503.0-B-1, Page D-15
     */
    CLOCK_BIAS(index) {
        const offset = this.bb.__offset(this.bb_pos, 114);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    clockBiasLength() {
        const offset = this.bb.__offset(this.bb_pos, 114);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    clockBiasArray() {
        const offset = this.bb.__offset(this.bb_pos, 114);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    /**
     * Clock drift values -  CCSDS 503.0-B-1, Page D-15
     */
    CLOCK_DRIFT(index) {
        const offset = this.bb.__offset(this.bb_pos, 116);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    clockDriftLength() {
        const offset = this.bb.__offset(this.bb_pos, 116);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    clockDriftArray() {
        const offset = this.bb.__offset(this.bb_pos, 116);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startTDM(builder) {
        builder.startObject(57);
    }
    static addObserverId(builder, OBSERVER_IDOffset) {
        builder.addFieldOffset(0, OBSERVER_IDOffset, 0);
    }
    static addObserverX(builder, OBSERVER_X) {
        builder.addFieldFloat64(1, OBSERVER_X, 0.0);
    }
    static addObserverY(builder, OBSERVER_Y) {
        builder.addFieldFloat64(2, OBSERVER_Y, 0.0);
    }
    static addObserverZ(builder, OBSERVER_Z) {
        builder.addFieldFloat64(3, OBSERVER_Z, 0.0);
    }
    static addObserverVx(builder, OBSERVER_VX) {
        builder.addFieldFloat64(4, OBSERVER_VX, 0.0);
    }
    static addObserverVy(builder, OBSERVER_VY) {
        builder.addFieldFloat64(5, OBSERVER_VY, 0.0);
    }
    static addObserverVz(builder, OBSERVER_VZ) {
        builder.addFieldFloat64(6, OBSERVER_VZ, 0.0);
    }
    static addObserverPositionReferenceFrame(builder, OBSERVER_POSITION_REFERENCE_FRAME) {
        builder.addFieldInt8(7, OBSERVER_POSITION_REFERENCE_FRAME, OBSERVERLocationReferenceFrame.EME2000);
    }
    static addObsReferenceFrame(builder, OBS_REFERENCE_FRAME) {
        builder.addFieldInt8(8, OBS_REFERENCE_FRAME, OBSERVERLocationReferenceFrame.EME2000);
    }
    static addEpoch(builder, EPOCHOffset) {
        builder.addFieldOffset(9, EPOCHOffset, 0);
    }
    static addCcsdsTdmVers(builder, CCSDS_TDM_VERSOffset) {
        builder.addFieldOffset(10, CCSDS_TDM_VERSOffset, 0);
    }
    static addComment(builder, COMMENTOffset) {
        builder.addFieldOffset(11, COMMENTOffset, 0);
    }
    static createCommentVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startCommentVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addCreationDate(builder, CREATION_DATEOffset) {
        builder.addFieldOffset(12, CREATION_DATEOffset, 0);
    }
    static addOriginator(builder, ORIGINATOROffset) {
        builder.addFieldOffset(13, ORIGINATOROffset, 0);
    }
    static addMetaStart(builder, META_STARTOffset) {
        builder.addFieldOffset(14, META_STARTOffset, 0);
    }
    static addTimeSystem(builder, TIME_SYSTEMOffset) {
        builder.addFieldOffset(15, TIME_SYSTEMOffset, 0);
    }
    static addStartTime(builder, START_TIMEOffset) {
        builder.addFieldOffset(16, START_TIMEOffset, 0);
    }
    static addStopTime(builder, STOP_TIMEOffset) {
        builder.addFieldOffset(17, STOP_TIMEOffset, 0);
    }
    static addParticipant1(builder, PARTICIPANT_1Offset) {
        builder.addFieldOffset(18, PARTICIPANT_1Offset, 0);
    }
    static addParticipant2(builder, PARTICIPANT_2Offset) {
        builder.addFieldOffset(19, PARTICIPANT_2Offset, 0);
    }
    static addParticipant3(builder, PARTICIPANT_3Offset) {
        builder.addFieldOffset(20, PARTICIPANT_3Offset, 0);
    }
    static addMode(builder, MODEOffset) {
        builder.addFieldOffset(21, MODEOffset, 0);
    }
    static addPath1(builder, PATH_1) {
        builder.addFieldInt16(22, PATH_1, 0);
    }
    static addPath2(builder, PATH_2) {
        builder.addFieldInt16(23, PATH_2, 0);
    }
    static addTransmitBand(builder, TRANSMIT_BANDOffset) {
        builder.addFieldOffset(24, TRANSMIT_BANDOffset, 0);
    }
    static addReceiveBand(builder, RECEIVE_BANDOffset) {
        builder.addFieldOffset(25, RECEIVE_BANDOffset, 0);
    }
    static addIntegrationInterval(builder, INTEGRATION_INTERVAL) {
        builder.addFieldFloat32(26, INTEGRATION_INTERVAL, 0.0);
    }
    static addIntegrationRef(builder, INTEGRATION_REFOffset) {
        builder.addFieldOffset(27, INTEGRATION_REFOffset, 0);
    }
    static addReceiveDelay2(builder, RECEIVE_DELAY_2) {
        builder.addFieldFloat64(28, RECEIVE_DELAY_2, 0.0);
    }
    static addReceiveDelay3(builder, RECEIVE_DELAY_3) {
        builder.addFieldFloat64(29, RECEIVE_DELAY_3, 0.0);
    }
    static addDataQuality(builder, DATA_QUALITYOffset) {
        builder.addFieldOffset(30, DATA_QUALITYOffset, 0);
    }
    static addMetaStop(builder, META_STOPOffset) {
        builder.addFieldOffset(31, META_STOPOffset, 0);
    }
    static addDataStart(builder, DATA_STARTOffset) {
        builder.addFieldOffset(32, DATA_STARTOffset, 0);
    }
    static addTransmitFreq1(builder, TRANSMIT_FREQ_1) {
        builder.addFieldFloat64(33, TRANSMIT_FREQ_1, 0.0);
    }
    static addReceiveFreq(builder, RECEIVE_FREQOffset) {
        builder.addFieldOffset(34, RECEIVE_FREQOffset, 0);
    }
    static createReceiveFreqVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startReceiveFreqVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static addDataStop(builder, DATA_STOPOffset) {
        builder.addFieldOffset(35, DATA_STOPOffset, 0);
    }
    static addTimetagRef(builder, TIMETAG_REFOffset) {
        builder.addFieldOffset(36, TIMETAG_REFOffset, 0);
    }
    static addAngleType(builder, ANGLE_TYPEOffset) {
        builder.addFieldOffset(37, ANGLE_TYPEOffset, 0);
    }
    static addAngle1(builder, ANGLE_1Offset) {
        builder.addFieldOffset(38, ANGLE_1Offset, 0);
    }
    static createAngle1Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    }
    static startAngle1Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addAngle2(builder, ANGLE_2Offset) {
        builder.addFieldOffset(39, ANGLE_2Offset, 0);
    }
    static createAngle2Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    }
    static startAngle2Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addAngleUncertainty1(builder, ANGLE_UNCERTAINTY_1) {
        builder.addFieldFloat32(40, ANGLE_UNCERTAINTY_1, 0.0);
    }
    static addAngleUncertainty2(builder, ANGLE_UNCERTAINTY_2) {
        builder.addFieldFloat32(41, ANGLE_UNCERTAINTY_2, 0.0);
    }
    static addRangeRate(builder, RANGE_RATE) {
        builder.addFieldFloat64(42, RANGE_RATE, 0.0);
    }
    static addRangeUncertainty(builder, RANGE_UNCERTAINTY) {
        builder.addFieldFloat64(43, RANGE_UNCERTAINTY, 0.0);
    }
    static addRangeMode(builder, RANGE_MODEOffset) {
        builder.addFieldOffset(44, RANGE_MODEOffset, 0);
    }
    static addRangeModulus(builder, RANGE_MODULUS) {
        builder.addFieldFloat64(45, RANGE_MODULUS, 0.0);
    }
    static addCorrectionAngle1(builder, CORRECTION_ANGLE_1) {
        builder.addFieldFloat32(46, CORRECTION_ANGLE_1, 0.0);
    }
    static addCorrectionAngle2(builder, CORRECTION_ANGLE_2) {
        builder.addFieldFloat32(47, CORRECTION_ANGLE_2, 0.0);
    }
    static addCorrectionsApplied(builder, CORRECTIONS_APPLIEDOffset) {
        builder.addFieldOffset(48, CORRECTIONS_APPLIEDOffset, 0);
    }
    static addTropoDry(builder, TROPO_DRYOffset) {
        builder.addFieldOffset(49, TROPO_DRYOffset, 0);
    }
    static createTropoDryVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startTropoDryVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static addTropoWet(builder, TROPO_WETOffset) {
        builder.addFieldOffset(50, TROPO_WETOffset, 0);
    }
    static createTropoWetVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startTropoWetVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static addStec(builder, STECOffset) {
        builder.addFieldOffset(51, STECOffset, 0);
    }
    static createStecVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startStecVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static addPressure(builder, PRESSUREOffset) {
        builder.addFieldOffset(52, PRESSUREOffset, 0);
    }
    static createPressureVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startPressureVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static addRhumidity(builder, RHUMIDITYOffset) {
        builder.addFieldOffset(53, RHUMIDITYOffset, 0);
    }
    static createRhumidityVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startRhumidityVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static addTemperature(builder, TEMPERATUREOffset) {
        builder.addFieldOffset(54, TEMPERATUREOffset, 0);
    }
    static createTemperatureVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startTemperatureVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static addClockBias(builder, CLOCK_BIASOffset) {
        builder.addFieldOffset(55, CLOCK_BIASOffset, 0);
    }
    static createClockBiasVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startClockBiasVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static addClockDrift(builder, CLOCK_DRIFTOffset) {
        builder.addFieldOffset(56, CLOCK_DRIFTOffset, 0);
    }
    static createClockDriftVector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static startClockDriftVector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static endTDM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishTDMBuffer(builder, offset) {
        builder.finish(offset, '$TDM');
    }
    static finishSizePrefixedTDMBuffer(builder, offset) {
        builder.finish(offset, '$TDM', true);
    }
    static createTDM(builder, OBSERVER_IDOffset, OBSERVER_X, OBSERVER_Y, OBSERVER_Z, OBSERVER_VX, OBSERVER_VY, OBSERVER_VZ, OBSERVER_POSITION_REFERENCE_FRAME, OBS_REFERENCE_FRAME, EPOCHOffset, CCSDS_TDM_VERSOffset, COMMENTOffset, CREATION_DATEOffset, ORIGINATOROffset, META_STARTOffset, TIME_SYSTEMOffset, START_TIMEOffset, STOP_TIMEOffset, PARTICIPANT_1Offset, PARTICIPANT_2Offset, PARTICIPANT_3Offset, MODEOffset, PATH_1, PATH_2, TRANSMIT_BANDOffset, RECEIVE_BANDOffset, INTEGRATION_INTERVAL, INTEGRATION_REFOffset, RECEIVE_DELAY_2, RECEIVE_DELAY_3, DATA_QUALITYOffset, META_STOPOffset, DATA_STARTOffset, TRANSMIT_FREQ_1, RECEIVE_FREQOffset, DATA_STOPOffset, TIMETAG_REFOffset, ANGLE_TYPEOffset, ANGLE_1Offset, ANGLE_2Offset, ANGLE_UNCERTAINTY_1, ANGLE_UNCERTAINTY_2, RANGE_RATE, RANGE_UNCERTAINTY, RANGE_MODEOffset, RANGE_MODULUS, CORRECTION_ANGLE_1, CORRECTION_ANGLE_2, CORRECTIONS_APPLIEDOffset, TROPO_DRYOffset, TROPO_WETOffset, STECOffset, PRESSUREOffset, RHUMIDITYOffset, TEMPERATUREOffset, CLOCK_BIASOffset, CLOCK_DRIFTOffset) {
        TDM.startTDM(builder);
        TDM.addObserverId(builder, OBSERVER_IDOffset);
        TDM.addObserverX(builder, OBSERVER_X);
        TDM.addObserverY(builder, OBSERVER_Y);
        TDM.addObserverZ(builder, OBSERVER_Z);
        TDM.addObserverVx(builder, OBSERVER_VX);
        TDM.addObserverVy(builder, OBSERVER_VY);
        TDM.addObserverVz(builder, OBSERVER_VZ);
        TDM.addObserverPositionReferenceFrame(builder, OBSERVER_POSITION_REFERENCE_FRAME);
        TDM.addObsReferenceFrame(builder, OBS_REFERENCE_FRAME);
        TDM.addEpoch(builder, EPOCHOffset);
        TDM.addCcsdsTdmVers(builder, CCSDS_TDM_VERSOffset);
        TDM.addComment(builder, COMMENTOffset);
        TDM.addCreationDate(builder, CREATION_DATEOffset);
        TDM.addOriginator(builder, ORIGINATOROffset);
        TDM.addMetaStart(builder, META_STARTOffset);
        TDM.addTimeSystem(builder, TIME_SYSTEMOffset);
        TDM.addStartTime(builder, START_TIMEOffset);
        TDM.addStopTime(builder, STOP_TIMEOffset);
        TDM.addParticipant1(builder, PARTICIPANT_1Offset);
        TDM.addParticipant2(builder, PARTICIPANT_2Offset);
        TDM.addParticipant3(builder, PARTICIPANT_3Offset);
        TDM.addMode(builder, MODEOffset);
        TDM.addPath1(builder, PATH_1);
        TDM.addPath2(builder, PATH_2);
        TDM.addTransmitBand(builder, TRANSMIT_BANDOffset);
        TDM.addReceiveBand(builder, RECEIVE_BANDOffset);
        TDM.addIntegrationInterval(builder, INTEGRATION_INTERVAL);
        TDM.addIntegrationRef(builder, INTEGRATION_REFOffset);
        TDM.addReceiveDelay2(builder, RECEIVE_DELAY_2);
        TDM.addReceiveDelay3(builder, RECEIVE_DELAY_3);
        TDM.addDataQuality(builder, DATA_QUALITYOffset);
        TDM.addMetaStop(builder, META_STOPOffset);
        TDM.addDataStart(builder, DATA_STARTOffset);
        TDM.addTransmitFreq1(builder, TRANSMIT_FREQ_1);
        TDM.addReceiveFreq(builder, RECEIVE_FREQOffset);
        TDM.addDataStop(builder, DATA_STOPOffset);
        TDM.addTimetagRef(builder, TIMETAG_REFOffset);
        TDM.addAngleType(builder, ANGLE_TYPEOffset);
        TDM.addAngle1(builder, ANGLE_1Offset);
        TDM.addAngle2(builder, ANGLE_2Offset);
        TDM.addAngleUncertainty1(builder, ANGLE_UNCERTAINTY_1);
        TDM.addAngleUncertainty2(builder, ANGLE_UNCERTAINTY_2);
        TDM.addRangeRate(builder, RANGE_RATE);
        TDM.addRangeUncertainty(builder, RANGE_UNCERTAINTY);
        TDM.addRangeMode(builder, RANGE_MODEOffset);
        TDM.addRangeModulus(builder, RANGE_MODULUS);
        TDM.addCorrectionAngle1(builder, CORRECTION_ANGLE_1);
        TDM.addCorrectionAngle2(builder, CORRECTION_ANGLE_2);
        TDM.addCorrectionsApplied(builder, CORRECTIONS_APPLIEDOffset);
        TDM.addTropoDry(builder, TROPO_DRYOffset);
        TDM.addTropoWet(builder, TROPO_WETOffset);
        TDM.addStec(builder, STECOffset);
        TDM.addPressure(builder, PRESSUREOffset);
        TDM.addRhumidity(builder, RHUMIDITYOffset);
        TDM.addTemperature(builder, TEMPERATUREOffset);
        TDM.addClockBias(builder, CLOCK_BIASOffset);
        TDM.addClockDrift(builder, CLOCK_DRIFTOffset);
        return TDM.endTDM(builder);
    }
    unpack() {
        return new TDMT(this.OBSERVER_ID(), this.OBSERVER_X(), this.OBSERVER_Y(), this.OBSERVER_Z(), this.OBSERVER_VX(), this.OBSERVER_VY(), this.OBSERVER_VZ(), this.OBSERVER_POSITION_REFERENCE_FRAME(), this.OBS_REFERENCE_FRAME(), this.EPOCH(), this.CCSDS_TDM_VERS(), this.bb.createScalarList(this.COMMENT.bind(this), this.commentLength()), this.CREATION_DATE(), this.ORIGINATOR(), this.META_START(), this.TIME_SYSTEM(), this.START_TIME(), this.STOP_TIME(), this.PARTICIPANT_1(), this.PARTICIPANT_2(), this.PARTICIPANT_3(), this.MODE(), this.PATH_1(), this.PATH_2(), this.TRANSMIT_BAND(), this.RECEIVE_BAND(), this.INTEGRATION_INTERVAL(), this.INTEGRATION_REF(), this.RECEIVE_DELAY_2(), this.RECEIVE_DELAY_3(), this.DATA_QUALITY(), this.META_STOP(), this.DATA_START(), this.TRANSMIT_FREQ_1(), this.bb.createScalarList(this.RECEIVE_FREQ.bind(this), this.receiveFreqLength()), this.DATA_STOP(), this.TIMETAG_REF(), this.ANGLE_TYPE(), this.bb.createScalarList(this.ANGLE_1.bind(this), this.angle1Length()), this.bb.createScalarList(this.ANGLE_2.bind(this), this.angle2Length()), this.ANGLE_UNCERTAINTY_1(), this.ANGLE_UNCERTAINTY_2(), this.RANGE_RATE(), this.RANGE_UNCERTAINTY(), this.RANGE_MODE(), this.RANGE_MODULUS(), this.CORRECTION_ANGLE_1(), this.CORRECTION_ANGLE_2(), this.CORRECTIONS_APPLIED(), this.bb.createScalarList(this.TROPO_DRY.bind(this), this.tropoDryLength()), this.bb.createScalarList(this.TROPO_WET.bind(this), this.tropoWetLength()), this.bb.createScalarList(this.STEC.bind(this), this.stecLength()), this.bb.createScalarList(this.PRESSURE.bind(this), this.pressureLength()), this.bb.createScalarList(this.RHUMIDITY.bind(this), this.rhumidityLength()), this.bb.createScalarList(this.TEMPERATURE.bind(this), this.temperatureLength()), this.bb.createScalarList(this.CLOCK_BIAS.bind(this), this.clockBiasLength()), this.bb.createScalarList(this.CLOCK_DRIFT.bind(this), this.clockDriftLength()));
    }
    unpackTo(_o) {
        _o.OBSERVER_ID = this.OBSERVER_ID();
        _o.OBSERVER_X = this.OBSERVER_X();
        _o.OBSERVER_Y = this.OBSERVER_Y();
        _o.OBSERVER_Z = this.OBSERVER_Z();
        _o.OBSERVER_VX = this.OBSERVER_VX();
        _o.OBSERVER_VY = this.OBSERVER_VY();
        _o.OBSERVER_VZ = this.OBSERVER_VZ();
        _o.OBSERVER_POSITION_REFERENCE_FRAME = this.OBSERVER_POSITION_REFERENCE_FRAME();
        _o.OBS_REFERENCE_FRAME = this.OBS_REFERENCE_FRAME();
        _o.EPOCH = this.EPOCH();
        _o.CCSDS_TDM_VERS = this.CCSDS_TDM_VERS();
        _o.COMMENT = this.bb.createScalarList(this.COMMENT.bind(this), this.commentLength());
        _o.CREATION_DATE = this.CREATION_DATE();
        _o.ORIGINATOR = this.ORIGINATOR();
        _o.META_START = this.META_START();
        _o.TIME_SYSTEM = this.TIME_SYSTEM();
        _o.START_TIME = this.START_TIME();
        _o.STOP_TIME = this.STOP_TIME();
        _o.PARTICIPANT_1 = this.PARTICIPANT_1();
        _o.PARTICIPANT_2 = this.PARTICIPANT_2();
        _o.PARTICIPANT_3 = this.PARTICIPANT_3();
        _o.MODE = this.MODE();
        _o.PATH_1 = this.PATH_1();
        _o.PATH_2 = this.PATH_2();
        _o.TRANSMIT_BAND = this.TRANSMIT_BAND();
        _o.RECEIVE_BAND = this.RECEIVE_BAND();
        _o.INTEGRATION_INTERVAL = this.INTEGRATION_INTERVAL();
        _o.INTEGRATION_REF = this.INTEGRATION_REF();
        _o.RECEIVE_DELAY_2 = this.RECEIVE_DELAY_2();
        _o.RECEIVE_DELAY_3 = this.RECEIVE_DELAY_3();
        _o.DATA_QUALITY = this.DATA_QUALITY();
        _o.META_STOP = this.META_STOP();
        _o.DATA_START = this.DATA_START();
        _o.TRANSMIT_FREQ_1 = this.TRANSMIT_FREQ_1();
        _o.RECEIVE_FREQ = this.bb.createScalarList(this.RECEIVE_FREQ.bind(this), this.receiveFreqLength());
        _o.DATA_STOP = this.DATA_STOP();
        _o.TIMETAG_REF = this.TIMETAG_REF();
        _o.ANGLE_TYPE = this.ANGLE_TYPE();
        _o.ANGLE_1 = this.bb.createScalarList(this.ANGLE_1.bind(this), this.angle1Length());
        _o.ANGLE_2 = this.bb.createScalarList(this.ANGLE_2.bind(this), this.angle2Length());
        _o.ANGLE_UNCERTAINTY_1 = this.ANGLE_UNCERTAINTY_1();
        _o.ANGLE_UNCERTAINTY_2 = this.ANGLE_UNCERTAINTY_2();
        _o.RANGE_RATE = this.RANGE_RATE();
        _o.RANGE_UNCERTAINTY = this.RANGE_UNCERTAINTY();
        _o.RANGE_MODE = this.RANGE_MODE();
        _o.RANGE_MODULUS = this.RANGE_MODULUS();
        _o.CORRECTION_ANGLE_1 = this.CORRECTION_ANGLE_1();
        _o.CORRECTION_ANGLE_2 = this.CORRECTION_ANGLE_2();
        _o.CORRECTIONS_APPLIED = this.CORRECTIONS_APPLIED();
        _o.TROPO_DRY = this.bb.createScalarList(this.TROPO_DRY.bind(this), this.tropoDryLength());
        _o.TROPO_WET = this.bb.createScalarList(this.TROPO_WET.bind(this), this.tropoWetLength());
        _o.STEC = this.bb.createScalarList(this.STEC.bind(this), this.stecLength());
        _o.PRESSURE = this.bb.createScalarList(this.PRESSURE.bind(this), this.pressureLength());
        _o.RHUMIDITY = this.bb.createScalarList(this.RHUMIDITY.bind(this), this.rhumidityLength());
        _o.TEMPERATURE = this.bb.createScalarList(this.TEMPERATURE.bind(this), this.temperatureLength());
        _o.CLOCK_BIAS = this.bb.createScalarList(this.CLOCK_BIAS.bind(this), this.clockBiasLength());
        _o.CLOCK_DRIFT = this.bb.createScalarList(this.CLOCK_DRIFT.bind(this), this.clockDriftLength());
    }
}
export class TDMT {
    constructor(OBSERVER_ID = null, OBSERVER_X = 0.0, OBSERVER_Y = 0.0, OBSERVER_Z = 0.0, OBSERVER_VX = 0.0, OBSERVER_VY = 0.0, OBSERVER_VZ = 0.0, OBSERVER_POSITION_REFERENCE_FRAME = OBSERVERLocationReferenceFrame.EME2000, OBS_REFERENCE_FRAME = OBSERVERLocationReferenceFrame.EME2000, EPOCH = null, CCSDS_TDM_VERS = null, COMMENT = [], CREATION_DATE = null, ORIGINATOR = null, META_START = null, TIME_SYSTEM = null, START_TIME = null, STOP_TIME = null, PARTICIPANT_1 = null, PARTICIPANT_2 = null, PARTICIPANT_3 = null, MODE = null, PATH_1 = 0, PATH_2 = 0, TRANSMIT_BAND = null, RECEIVE_BAND = null, INTEGRATION_INTERVAL = 0.0, INTEGRATION_REF = null, RECEIVE_DELAY_2 = 0.0, RECEIVE_DELAY_3 = 0.0, DATA_QUALITY = null, META_STOP = null, DATA_START = null, TRANSMIT_FREQ_1 = 0.0, RECEIVE_FREQ = [], DATA_STOP = null, TIMETAG_REF = null, ANGLE_TYPE = null, ANGLE_1 = [], ANGLE_2 = [], ANGLE_UNCERTAINTY_1 = 0.0, ANGLE_UNCERTAINTY_2 = 0.0, RANGE_RATE = 0.0, RANGE_UNCERTAINTY = 0.0, RANGE_MODE = null, RANGE_MODULUS = 0.0, CORRECTION_ANGLE_1 = 0.0, CORRECTION_ANGLE_2 = 0.0, CORRECTIONS_APPLIED = null, TROPO_DRY = [], TROPO_WET = [], STEC = [], PRESSURE = [], RHUMIDITY = [], TEMPERATURE = [], CLOCK_BIAS = [], CLOCK_DRIFT = []) {
        this.OBSERVER_ID = OBSERVER_ID;
        this.OBSERVER_X = OBSERVER_X;
        this.OBSERVER_Y = OBSERVER_Y;
        this.OBSERVER_Z = OBSERVER_Z;
        this.OBSERVER_VX = OBSERVER_VX;
        this.OBSERVER_VY = OBSERVER_VY;
        this.OBSERVER_VZ = OBSERVER_VZ;
        this.OBSERVER_POSITION_REFERENCE_FRAME = OBSERVER_POSITION_REFERENCE_FRAME;
        this.OBS_REFERENCE_FRAME = OBS_REFERENCE_FRAME;
        this.EPOCH = EPOCH;
        this.CCSDS_TDM_VERS = CCSDS_TDM_VERS;
        this.COMMENT = COMMENT;
        this.CREATION_DATE = CREATION_DATE;
        this.ORIGINATOR = ORIGINATOR;
        this.META_START = META_START;
        this.TIME_SYSTEM = TIME_SYSTEM;
        this.START_TIME = START_TIME;
        this.STOP_TIME = STOP_TIME;
        this.PARTICIPANT_1 = PARTICIPANT_1;
        this.PARTICIPANT_2 = PARTICIPANT_2;
        this.PARTICIPANT_3 = PARTICIPANT_3;
        this.MODE = MODE;
        this.PATH_1 = PATH_1;
        this.PATH_2 = PATH_2;
        this.TRANSMIT_BAND = TRANSMIT_BAND;
        this.RECEIVE_BAND = RECEIVE_BAND;
        this.INTEGRATION_INTERVAL = INTEGRATION_INTERVAL;
        this.INTEGRATION_REF = INTEGRATION_REF;
        this.RECEIVE_DELAY_2 = RECEIVE_DELAY_2;
        this.RECEIVE_DELAY_3 = RECEIVE_DELAY_3;
        this.DATA_QUALITY = DATA_QUALITY;
        this.META_STOP = META_STOP;
        this.DATA_START = DATA_START;
        this.TRANSMIT_FREQ_1 = TRANSMIT_FREQ_1;
        this.RECEIVE_FREQ = RECEIVE_FREQ;
        this.DATA_STOP = DATA_STOP;
        this.TIMETAG_REF = TIMETAG_REF;
        this.ANGLE_TYPE = ANGLE_TYPE;
        this.ANGLE_1 = ANGLE_1;
        this.ANGLE_2 = ANGLE_2;
        this.ANGLE_UNCERTAINTY_1 = ANGLE_UNCERTAINTY_1;
        this.ANGLE_UNCERTAINTY_2 = ANGLE_UNCERTAINTY_2;
        this.RANGE_RATE = RANGE_RATE;
        this.RANGE_UNCERTAINTY = RANGE_UNCERTAINTY;
        this.RANGE_MODE = RANGE_MODE;
        this.RANGE_MODULUS = RANGE_MODULUS;
        this.CORRECTION_ANGLE_1 = CORRECTION_ANGLE_1;
        this.CORRECTION_ANGLE_2 = CORRECTION_ANGLE_2;
        this.CORRECTIONS_APPLIED = CORRECTIONS_APPLIED;
        this.TROPO_DRY = TROPO_DRY;
        this.TROPO_WET = TROPO_WET;
        this.STEC = STEC;
        this.PRESSURE = PRESSURE;
        this.RHUMIDITY = RHUMIDITY;
        this.TEMPERATURE = TEMPERATURE;
        this.CLOCK_BIAS = CLOCK_BIAS;
        this.CLOCK_DRIFT = CLOCK_DRIFT;
    }
    pack(builder) {
        const OBSERVER_ID = (this.OBSERVER_ID !== null ? builder.createString(this.OBSERVER_ID) : 0);
        const EPOCH = (this.EPOCH !== null ? builder.createString(this.EPOCH) : 0);
        const CCSDS_TDM_VERS = (this.CCSDS_TDM_VERS !== null ? builder.createString(this.CCSDS_TDM_VERS) : 0);
        const COMMENT = TDM.createCommentVector(builder, builder.createObjectOffsetList(this.COMMENT));
        const CREATION_DATE = (this.CREATION_DATE !== null ? builder.createString(this.CREATION_DATE) : 0);
        const ORIGINATOR = (this.ORIGINATOR !== null ? builder.createString(this.ORIGINATOR) : 0);
        const META_START = (this.META_START !== null ? builder.createString(this.META_START) : 0);
        const TIME_SYSTEM = (this.TIME_SYSTEM !== null ? builder.createString(this.TIME_SYSTEM) : 0);
        const START_TIME = (this.START_TIME !== null ? builder.createString(this.START_TIME) : 0);
        const STOP_TIME = (this.STOP_TIME !== null ? builder.createString(this.STOP_TIME) : 0);
        const PARTICIPANT_1 = (this.PARTICIPANT_1 !== null ? builder.createString(this.PARTICIPANT_1) : 0);
        const PARTICIPANT_2 = (this.PARTICIPANT_2 !== null ? builder.createString(this.PARTICIPANT_2) : 0);
        const PARTICIPANT_3 = (this.PARTICIPANT_3 !== null ? builder.createString(this.PARTICIPANT_3) : 0);
        const MODE = (this.MODE !== null ? builder.createString(this.MODE) : 0);
        const TRANSMIT_BAND = (this.TRANSMIT_BAND !== null ? builder.createString(this.TRANSMIT_BAND) : 0);
        const RECEIVE_BAND = (this.RECEIVE_BAND !== null ? builder.createString(this.RECEIVE_BAND) : 0);
        const INTEGRATION_REF = (this.INTEGRATION_REF !== null ? builder.createString(this.INTEGRATION_REF) : 0);
        const DATA_QUALITY = (this.DATA_QUALITY !== null ? builder.createString(this.DATA_QUALITY) : 0);
        const META_STOP = (this.META_STOP !== null ? builder.createString(this.META_STOP) : 0);
        const DATA_START = (this.DATA_START !== null ? builder.createString(this.DATA_START) : 0);
        const RECEIVE_FREQ = TDM.createReceiveFreqVector(builder, this.RECEIVE_FREQ);
        const DATA_STOP = (this.DATA_STOP !== null ? builder.createString(this.DATA_STOP) : 0);
        const TIMETAG_REF = (this.TIMETAG_REF !== null ? builder.createString(this.TIMETAG_REF) : 0);
        const ANGLE_TYPE = (this.ANGLE_TYPE !== null ? builder.createString(this.ANGLE_TYPE) : 0);
        const ANGLE_1 = TDM.createAngle1Vector(builder, this.ANGLE_1);
        const ANGLE_2 = TDM.createAngle2Vector(builder, this.ANGLE_2);
        const RANGE_MODE = (this.RANGE_MODE !== null ? builder.createString(this.RANGE_MODE) : 0);
        const CORRECTIONS_APPLIED = (this.CORRECTIONS_APPLIED !== null ? builder.createString(this.CORRECTIONS_APPLIED) : 0);
        const TROPO_DRY = TDM.createTropoDryVector(builder, this.TROPO_DRY);
        const TROPO_WET = TDM.createTropoWetVector(builder, this.TROPO_WET);
        const STEC = TDM.createStecVector(builder, this.STEC);
        const PRESSURE = TDM.createPressureVector(builder, this.PRESSURE);
        const RHUMIDITY = TDM.createRhumidityVector(builder, this.RHUMIDITY);
        const TEMPERATURE = TDM.createTemperatureVector(builder, this.TEMPERATURE);
        const CLOCK_BIAS = TDM.createClockBiasVector(builder, this.CLOCK_BIAS);
        const CLOCK_DRIFT = TDM.createClockDriftVector(builder, this.CLOCK_DRIFT);
        return TDM.createTDM(builder, OBSERVER_ID, this.OBSERVER_X, this.OBSERVER_Y, this.OBSERVER_Z, this.OBSERVER_VX, this.OBSERVER_VY, this.OBSERVER_VZ, this.OBSERVER_POSITION_REFERENCE_FRAME, this.OBS_REFERENCE_FRAME, EPOCH, CCSDS_TDM_VERS, COMMENT, CREATION_DATE, ORIGINATOR, META_START, TIME_SYSTEM, START_TIME, STOP_TIME, PARTICIPANT_1, PARTICIPANT_2, PARTICIPANT_3, MODE, this.PATH_1, this.PATH_2, TRANSMIT_BAND, RECEIVE_BAND, this.INTEGRATION_INTERVAL, INTEGRATION_REF, this.RECEIVE_DELAY_2, this.RECEIVE_DELAY_3, DATA_QUALITY, META_STOP, DATA_START, this.TRANSMIT_FREQ_1, RECEIVE_FREQ, DATA_STOP, TIMETAG_REF, ANGLE_TYPE, ANGLE_1, ANGLE_2, this.ANGLE_UNCERTAINTY_1, this.ANGLE_UNCERTAINTY_2, this.RANGE_RATE, this.RANGE_UNCERTAINTY, RANGE_MODE, this.RANGE_MODULUS, this.CORRECTION_ANGLE_1, this.CORRECTION_ANGLE_2, CORRECTIONS_APPLIED, TROPO_DRY, TROPO_WET, STEC, PRESSURE, RHUMIDITY, TEMPERATURE, CLOCK_BIAS, CLOCK_DRIFT);
    }
}
