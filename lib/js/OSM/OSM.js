// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
/**
 * Observation Stability Message
 */
export class OSM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsOSM(bb, obj) {
        return (obj || new OSM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsOSM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new OSM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$OSM');
    }
    /**
     * Indicates whether the observation is stable or not
     */
    IS_STABLE() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    /**
     * The number of observations
     */
    NUM_OBS() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    OBJECT_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ID_SENSOR(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    PASS_START(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Duration of the observation pass in seconds
     */
    PASS_DURATION() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    static startOSM(builder) {
        builder.startObject(6);
    }
    static addIsStable(builder, IS_STABLE) {
        builder.addFieldInt8(0, +IS_STABLE, +false);
    }
    static addNumObs(builder, NUM_OBS) {
        builder.addFieldInt32(1, NUM_OBS, 0);
    }
    static addObjectId(builder, OBJECT_IDOffset) {
        builder.addFieldOffset(2, OBJECT_IDOffset, 0);
    }
    static addIdSensor(builder, ID_SENSOROffset) {
        builder.addFieldOffset(3, ID_SENSOROffset, 0);
    }
    static addPassStart(builder, PASS_STARTOffset) {
        builder.addFieldOffset(4, PASS_STARTOffset, 0);
    }
    static addPassDuration(builder, PASS_DURATION) {
        builder.addFieldInt32(5, PASS_DURATION, 0);
    }
    static endOSM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishOSMBuffer(builder, offset) {
        builder.finish(offset, '$OSM');
    }
    static finishSizePrefixedOSMBuffer(builder, offset) {
        builder.finish(offset, '$OSM', true);
    }
    static createOSM(builder, IS_STABLE, NUM_OBS, OBJECT_IDOffset, ID_SENSOROffset, PASS_STARTOffset, PASS_DURATION) {
        OSM.startOSM(builder);
        OSM.addIsStable(builder, IS_STABLE);
        OSM.addNumObs(builder, NUM_OBS);
        OSM.addObjectId(builder, OBJECT_IDOffset);
        OSM.addIdSensor(builder, ID_SENSOROffset);
        OSM.addPassStart(builder, PASS_STARTOffset);
        OSM.addPassDuration(builder, PASS_DURATION);
        return OSM.endOSM(builder);
    }
    unpack() {
        return new OSMT(this.IS_STABLE(), this.NUM_OBS(), this.OBJECT_ID(), this.ID_SENSOR(), this.PASS_START(), this.PASS_DURATION());
    }
    unpackTo(_o) {
        _o.IS_STABLE = this.IS_STABLE();
        _o.NUM_OBS = this.NUM_OBS();
        _o.OBJECT_ID = this.OBJECT_ID();
        _o.ID_SENSOR = this.ID_SENSOR();
        _o.PASS_START = this.PASS_START();
        _o.PASS_DURATION = this.PASS_DURATION();
    }
}
export class OSMT {
    constructor(IS_STABLE = false, NUM_OBS = 0, OBJECT_ID = null, ID_SENSOR = null, PASS_START = null, PASS_DURATION = 0) {
        this.IS_STABLE = IS_STABLE;
        this.NUM_OBS = NUM_OBS;
        this.OBJECT_ID = OBJECT_ID;
        this.ID_SENSOR = ID_SENSOR;
        this.PASS_START = PASS_START;
        this.PASS_DURATION = PASS_DURATION;
    }
    pack(builder) {
        const OBJECT_ID = (this.OBJECT_ID !== null ? builder.createString(this.OBJECT_ID) : 0);
        const ID_SENSOR = (this.ID_SENSOR !== null ? builder.createString(this.ID_SENSOR) : 0);
        const PASS_START = (this.PASS_START !== null ? builder.createString(this.PASS_START) : 0);
        return OSM.createOSM(builder, this.IS_STABLE, this.NUM_OBS, OBJECT_ID, ID_SENSOR, PASS_START, this.PASS_DURATION);
    }
}
