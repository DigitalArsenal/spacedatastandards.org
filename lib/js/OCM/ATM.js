// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { AtmosphericModelFamily } from './AtmosphericModelFamily.js';
/**
 * Atmospheric Model Message
 */
export class ATM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsATM(bb, obj) {
        return (obj || new ATM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsATM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ATM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$ATM');
    }
    /**
     * Canonical model family
     */
    MODEL() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : AtmosphericModelFamily.CIRA_XX;
    }
    /**
     * Four-digit year identifying the model version (e.g., 1970, 2008, 2020)
     */
    YEAR() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    static startATM(builder) {
        builder.startObject(2);
    }
    static addModel(builder, MODEL) {
        builder.addFieldInt8(0, MODEL, AtmosphericModelFamily.CIRA_XX);
    }
    static addYear(builder, YEAR) {
        builder.addFieldInt32(1, YEAR, 0);
    }
    static endATM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishATMBuffer(builder, offset) {
        builder.finish(offset, '$ATM');
    }
    static finishSizePrefixedATMBuffer(builder, offset) {
        builder.finish(offset, '$ATM', true);
    }
    static createATM(builder, MODEL, YEAR) {
        ATM.startATM(builder);
        ATM.addModel(builder, MODEL);
        ATM.addYear(builder, YEAR);
        return ATM.endATM(builder);
    }
    unpack() {
        return new ATMT(this.MODEL(), this.YEAR());
    }
    unpackTo(_o) {
        _o.MODEL = this.MODEL();
        _o.YEAR = this.YEAR();
    }
}
export class ATMT {
    constructor(MODEL = AtmosphericModelFamily.CIRA_XX, YEAR = 0) {
        this.MODEL = MODEL;
        this.YEAR = YEAR;
    }
    pack(builder) {
        return ATM.createATM(builder, this.MODEL, this.YEAR);
    }
}
