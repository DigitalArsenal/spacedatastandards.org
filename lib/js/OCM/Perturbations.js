// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { ATM } from './ATM.js';
export class Perturbations {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPerturbations(bb, obj) {
        return (obj || new Perturbations()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPerturbations(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Perturbations()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    COMMENT(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    commentLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * Atmospheric model used.
     */
    ATMOSPHERIC_MODEL(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new ATM()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    GRAVITY_MODEL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Degree of the gravity model.
     */
    GRAVITY_DEGREE() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Order of the gravity model.
     */
    GRAVITY_ORDER() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    /**
     * Gravitational constant times the mass of the central body.
     */
    GM() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    N_BODY_PERTURBATIONS(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    nBodyPerturbationsLength() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    OCEAN_TIDES_MODEL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SOLID_TIDES_MODEL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ATMOSPHERIC_TIDES_MODEL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    GEOPOTENTIAL_MODEL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SOLAR_RAD_PRESSURE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ALBEDO(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    THERMAL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    RELATIVITY(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ATMOSPHERIC_DRAG(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Fixed geomagnetic Kp index used.
     */
    FIXED_GEOMAG_KP() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Fixed F10.7 solar flux value used.
     */
    FIXED_F10P7() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Fixed mean F10.7 solar flux value used.
     */
    FIXED_F10P7_MEAN() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startPerturbations(builder) {
        builder.startObject(19);
    }
    static addComment(builder, COMMENTOffset) {
        builder.addFieldOffset(0, COMMENTOffset, 0);
    }
    static createCommentVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startCommentVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addAtmosphericModel(builder, ATMOSPHERIC_MODELOffset) {
        builder.addFieldOffset(1, ATMOSPHERIC_MODELOffset, 0);
    }
    static addGravityModel(builder, GRAVITY_MODELOffset) {
        builder.addFieldOffset(2, GRAVITY_MODELOffset, 0);
    }
    static addGravityDegree(builder, GRAVITY_DEGREE) {
        builder.addFieldInt32(3, GRAVITY_DEGREE, 0);
    }
    static addGravityOrder(builder, GRAVITY_ORDER) {
        builder.addFieldInt32(4, GRAVITY_ORDER, 0);
    }
    static addGm(builder, GM) {
        builder.addFieldFloat64(5, GM, 0.0);
    }
    static addNBodyPerturbations(builder, N_BODY_PERTURBATIONSOffset) {
        builder.addFieldOffset(6, N_BODY_PERTURBATIONSOffset, 0);
    }
    static createNBodyPerturbationsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startNBodyPerturbationsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addOceanTidesModel(builder, OCEAN_TIDES_MODELOffset) {
        builder.addFieldOffset(7, OCEAN_TIDES_MODELOffset, 0);
    }
    static addSolidTidesModel(builder, SOLID_TIDES_MODELOffset) {
        builder.addFieldOffset(8, SOLID_TIDES_MODELOffset, 0);
    }
    static addAtmosphericTidesModel(builder, ATMOSPHERIC_TIDES_MODELOffset) {
        builder.addFieldOffset(9, ATMOSPHERIC_TIDES_MODELOffset, 0);
    }
    static addGeopotentialModel(builder, GEOPOTENTIAL_MODELOffset) {
        builder.addFieldOffset(10, GEOPOTENTIAL_MODELOffset, 0);
    }
    static addSolarRadPressure(builder, SOLAR_RAD_PRESSUREOffset) {
        builder.addFieldOffset(11, SOLAR_RAD_PRESSUREOffset, 0);
    }
    static addAlbedo(builder, ALBEDOOffset) {
        builder.addFieldOffset(12, ALBEDOOffset, 0);
    }
    static addThermal(builder, THERMALOffset) {
        builder.addFieldOffset(13, THERMALOffset, 0);
    }
    static addRelativity(builder, RELATIVITYOffset) {
        builder.addFieldOffset(14, RELATIVITYOffset, 0);
    }
    static addAtmosphericDrag(builder, ATMOSPHERIC_DRAGOffset) {
        builder.addFieldOffset(15, ATMOSPHERIC_DRAGOffset, 0);
    }
    static addFixedGeomagKp(builder, FIXED_GEOMAG_KP) {
        builder.addFieldFloat64(16, FIXED_GEOMAG_KP, 0.0);
    }
    static addFixedF10P7(builder, FIXED_F10P7) {
        builder.addFieldFloat64(17, FIXED_F10P7, 0.0);
    }
    static addFixedF10P7Mean(builder, FIXED_F10P7_MEAN) {
        builder.addFieldFloat64(18, FIXED_F10P7_MEAN, 0.0);
    }
    static endPerturbations(builder) {
        const offset = builder.endObject();
        return offset;
    }
    unpack() {
        return new PerturbationsT(this.bb.createScalarList(this.COMMENT.bind(this), this.commentLength()), (this.ATMOSPHERIC_MODEL() !== null ? this.ATMOSPHERIC_MODEL().unpack() : null), this.GRAVITY_MODEL(), this.GRAVITY_DEGREE(), this.GRAVITY_ORDER(), this.GM(), this.bb.createScalarList(this.N_BODY_PERTURBATIONS.bind(this), this.nBodyPerturbationsLength()), this.OCEAN_TIDES_MODEL(), this.SOLID_TIDES_MODEL(), this.ATMOSPHERIC_TIDES_MODEL(), this.GEOPOTENTIAL_MODEL(), this.SOLAR_RAD_PRESSURE(), this.ALBEDO(), this.THERMAL(), this.RELATIVITY(), this.ATMOSPHERIC_DRAG(), this.FIXED_GEOMAG_KP(), this.FIXED_F10P7(), this.FIXED_F10P7_MEAN());
    }
    unpackTo(_o) {
        _o.COMMENT = this.bb.createScalarList(this.COMMENT.bind(this), this.commentLength());
        _o.ATMOSPHERIC_MODEL = (this.ATMOSPHERIC_MODEL() !== null ? this.ATMOSPHERIC_MODEL().unpack() : null);
        _o.GRAVITY_MODEL = this.GRAVITY_MODEL();
        _o.GRAVITY_DEGREE = this.GRAVITY_DEGREE();
        _o.GRAVITY_ORDER = this.GRAVITY_ORDER();
        _o.GM = this.GM();
        _o.N_BODY_PERTURBATIONS = this.bb.createScalarList(this.N_BODY_PERTURBATIONS.bind(this), this.nBodyPerturbationsLength());
        _o.OCEAN_TIDES_MODEL = this.OCEAN_TIDES_MODEL();
        _o.SOLID_TIDES_MODEL = this.SOLID_TIDES_MODEL();
        _o.ATMOSPHERIC_TIDES_MODEL = this.ATMOSPHERIC_TIDES_MODEL();
        _o.GEOPOTENTIAL_MODEL = this.GEOPOTENTIAL_MODEL();
        _o.SOLAR_RAD_PRESSURE = this.SOLAR_RAD_PRESSURE();
        _o.ALBEDO = this.ALBEDO();
        _o.THERMAL = this.THERMAL();
        _o.RELATIVITY = this.RELATIVITY();
        _o.ATMOSPHERIC_DRAG = this.ATMOSPHERIC_DRAG();
        _o.FIXED_GEOMAG_KP = this.FIXED_GEOMAG_KP();
        _o.FIXED_F10P7 = this.FIXED_F10P7();
        _o.FIXED_F10P7_MEAN = this.FIXED_F10P7_MEAN();
    }
}
export class PerturbationsT {
    constructor(COMMENT = [], ATMOSPHERIC_MODEL = null, GRAVITY_MODEL = null, GRAVITY_DEGREE = 0, GRAVITY_ORDER = 0, GM = 0.0, N_BODY_PERTURBATIONS = [], OCEAN_TIDES_MODEL = null, SOLID_TIDES_MODEL = null, ATMOSPHERIC_TIDES_MODEL = null, GEOPOTENTIAL_MODEL = null, SOLAR_RAD_PRESSURE = null, ALBEDO = null, THERMAL = null, RELATIVITY = null, ATMOSPHERIC_DRAG = null, FIXED_GEOMAG_KP = 0.0, FIXED_F10P7 = 0.0, FIXED_F10P7_MEAN = 0.0) {
        this.COMMENT = COMMENT;
        this.ATMOSPHERIC_MODEL = ATMOSPHERIC_MODEL;
        this.GRAVITY_MODEL = GRAVITY_MODEL;
        this.GRAVITY_DEGREE = GRAVITY_DEGREE;
        this.GRAVITY_ORDER = GRAVITY_ORDER;
        this.GM = GM;
        this.N_BODY_PERTURBATIONS = N_BODY_PERTURBATIONS;
        this.OCEAN_TIDES_MODEL = OCEAN_TIDES_MODEL;
        this.SOLID_TIDES_MODEL = SOLID_TIDES_MODEL;
        this.ATMOSPHERIC_TIDES_MODEL = ATMOSPHERIC_TIDES_MODEL;
        this.GEOPOTENTIAL_MODEL = GEOPOTENTIAL_MODEL;
        this.SOLAR_RAD_PRESSURE = SOLAR_RAD_PRESSURE;
        this.ALBEDO = ALBEDO;
        this.THERMAL = THERMAL;
        this.RELATIVITY = RELATIVITY;
        this.ATMOSPHERIC_DRAG = ATMOSPHERIC_DRAG;
        this.FIXED_GEOMAG_KP = FIXED_GEOMAG_KP;
        this.FIXED_F10P7 = FIXED_F10P7;
        this.FIXED_F10P7_MEAN = FIXED_F10P7_MEAN;
    }
    pack(builder) {
        const COMMENT = Perturbations.createCommentVector(builder, builder.createObjectOffsetList(this.COMMENT));
        const ATMOSPHERIC_MODEL = (this.ATMOSPHERIC_MODEL !== null ? this.ATMOSPHERIC_MODEL.pack(builder) : 0);
        const GRAVITY_MODEL = (this.GRAVITY_MODEL !== null ? builder.createString(this.GRAVITY_MODEL) : 0);
        const N_BODY_PERTURBATIONS = Perturbations.createNBodyPerturbationsVector(builder, builder.createObjectOffsetList(this.N_BODY_PERTURBATIONS));
        const OCEAN_TIDES_MODEL = (this.OCEAN_TIDES_MODEL !== null ? builder.createString(this.OCEAN_TIDES_MODEL) : 0);
        const SOLID_TIDES_MODEL = (this.SOLID_TIDES_MODEL !== null ? builder.createString(this.SOLID_TIDES_MODEL) : 0);
        const ATMOSPHERIC_TIDES_MODEL = (this.ATMOSPHERIC_TIDES_MODEL !== null ? builder.createString(this.ATMOSPHERIC_TIDES_MODEL) : 0);
        const GEOPOTENTIAL_MODEL = (this.GEOPOTENTIAL_MODEL !== null ? builder.createString(this.GEOPOTENTIAL_MODEL) : 0);
        const SOLAR_RAD_PRESSURE = (this.SOLAR_RAD_PRESSURE !== null ? builder.createString(this.SOLAR_RAD_PRESSURE) : 0);
        const ALBEDO = (this.ALBEDO !== null ? builder.createString(this.ALBEDO) : 0);
        const THERMAL = (this.THERMAL !== null ? builder.createString(this.THERMAL) : 0);
        const RELATIVITY = (this.RELATIVITY !== null ? builder.createString(this.RELATIVITY) : 0);
        const ATMOSPHERIC_DRAG = (this.ATMOSPHERIC_DRAG !== null ? builder.createString(this.ATMOSPHERIC_DRAG) : 0);
        Perturbations.startPerturbations(builder);
        Perturbations.addComment(builder, COMMENT);
        Perturbations.addAtmosphericModel(builder, ATMOSPHERIC_MODEL);
        Perturbations.addGravityModel(builder, GRAVITY_MODEL);
        Perturbations.addGravityDegree(builder, this.GRAVITY_DEGREE);
        Perturbations.addGravityOrder(builder, this.GRAVITY_ORDER);
        Perturbations.addGm(builder, this.GM);
        Perturbations.addNBodyPerturbations(builder, N_BODY_PERTURBATIONS);
        Perturbations.addOceanTidesModel(builder, OCEAN_TIDES_MODEL);
        Perturbations.addSolidTidesModel(builder, SOLID_TIDES_MODEL);
        Perturbations.addAtmosphericTidesModel(builder, ATMOSPHERIC_TIDES_MODEL);
        Perturbations.addGeopotentialModel(builder, GEOPOTENTIAL_MODEL);
        Perturbations.addSolarRadPressure(builder, SOLAR_RAD_PRESSURE);
        Perturbations.addAlbedo(builder, ALBEDO);
        Perturbations.addThermal(builder, THERMAL);
        Perturbations.addRelativity(builder, RELATIVITY);
        Perturbations.addAtmosphericDrag(builder, ATMOSPHERIC_DRAG);
        Perturbations.addFixedGeomagKp(builder, this.FIXED_GEOMAG_KP);
        Perturbations.addFixedF10P7(builder, this.FIXED_F10P7);
        Perturbations.addFixedF10P7Mean(builder, this.FIXED_F10P7_MEAN);
        return Perturbations.endPerturbations(builder);
    }
}
