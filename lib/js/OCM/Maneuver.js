// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
export class Maneuver {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsManeuver(bb, obj) {
        return (obj || new Maneuver()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsManeuver(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Maneuver()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    MAN_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MAN_BASIS(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MAN_DEVICE_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MAN_PREV_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MAN_PURPOSE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MAN_REF_FRAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MAN_FRAME_EPOCH(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MAN_TYPE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    MAN_EPOCH_START(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Duration of the maneuver.
     */
    MAN_DURATION() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    MAN_UNITS(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    manUnitsLength() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    DATA(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    dataLength() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    MAN_COMMENT(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    manCommentLength() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startManeuver(builder) {
        builder.startObject(13);
    }
    static addManId(builder, MAN_IDOffset) {
        builder.addFieldOffset(0, MAN_IDOffset, 0);
    }
    static addManBasis(builder, MAN_BASISOffset) {
        builder.addFieldOffset(1, MAN_BASISOffset, 0);
    }
    static addManDeviceId(builder, MAN_DEVICE_IDOffset) {
        builder.addFieldOffset(2, MAN_DEVICE_IDOffset, 0);
    }
    static addManPrevId(builder, MAN_PREV_IDOffset) {
        builder.addFieldOffset(3, MAN_PREV_IDOffset, 0);
    }
    static addManPurpose(builder, MAN_PURPOSEOffset) {
        builder.addFieldOffset(4, MAN_PURPOSEOffset, 0);
    }
    static addManRefFrame(builder, MAN_REF_FRAMEOffset) {
        builder.addFieldOffset(5, MAN_REF_FRAMEOffset, 0);
    }
    static addManFrameEpoch(builder, MAN_FRAME_EPOCHOffset) {
        builder.addFieldOffset(6, MAN_FRAME_EPOCHOffset, 0);
    }
    static addManType(builder, MAN_TYPEOffset) {
        builder.addFieldOffset(7, MAN_TYPEOffset, 0);
    }
    static addManEpochStart(builder, MAN_EPOCH_STARTOffset) {
        builder.addFieldOffset(8, MAN_EPOCH_STARTOffset, 0);
    }
    static addManDuration(builder, MAN_DURATION) {
        builder.addFieldFloat64(9, MAN_DURATION, 0.0);
    }
    static addManUnits(builder, MAN_UNITSOffset) {
        builder.addFieldOffset(10, MAN_UNITSOffset, 0);
    }
    static createManUnitsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startManUnitsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addData(builder, DATAOffset) {
        builder.addFieldOffset(11, DATAOffset, 0);
    }
    static createDataVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startDataVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addManComment(builder, MAN_COMMENTOffset) {
        builder.addFieldOffset(12, MAN_COMMENTOffset, 0);
    }
    static createManCommentVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startManCommentVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endManeuver(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createManeuver(builder, MAN_IDOffset, MAN_BASISOffset, MAN_DEVICE_IDOffset, MAN_PREV_IDOffset, MAN_PURPOSEOffset, MAN_REF_FRAMEOffset, MAN_FRAME_EPOCHOffset, MAN_TYPEOffset, MAN_EPOCH_STARTOffset, MAN_DURATION, MAN_UNITSOffset, DATAOffset, MAN_COMMENTOffset) {
        Maneuver.startManeuver(builder);
        Maneuver.addManId(builder, MAN_IDOffset);
        Maneuver.addManBasis(builder, MAN_BASISOffset);
        Maneuver.addManDeviceId(builder, MAN_DEVICE_IDOffset);
        Maneuver.addManPrevId(builder, MAN_PREV_IDOffset);
        Maneuver.addManPurpose(builder, MAN_PURPOSEOffset);
        Maneuver.addManRefFrame(builder, MAN_REF_FRAMEOffset);
        Maneuver.addManFrameEpoch(builder, MAN_FRAME_EPOCHOffset);
        Maneuver.addManType(builder, MAN_TYPEOffset);
        Maneuver.addManEpochStart(builder, MAN_EPOCH_STARTOffset);
        Maneuver.addManDuration(builder, MAN_DURATION);
        Maneuver.addManUnits(builder, MAN_UNITSOffset);
        Maneuver.addData(builder, DATAOffset);
        Maneuver.addManComment(builder, MAN_COMMENTOffset);
        return Maneuver.endManeuver(builder);
    }
    unpack() {
        return new ManeuverT(this.MAN_ID(), this.MAN_BASIS(), this.MAN_DEVICE_ID(), this.MAN_PREV_ID(), this.MAN_PURPOSE(), this.MAN_REF_FRAME(), this.MAN_FRAME_EPOCH(), this.MAN_TYPE(), this.MAN_EPOCH_START(), this.MAN_DURATION(), this.bb.createScalarList(this.MAN_UNITS.bind(this), this.manUnitsLength()), this.bb.createScalarList(this.DATA.bind(this), this.dataLength()), this.bb.createScalarList(this.MAN_COMMENT.bind(this), this.manCommentLength()));
    }
    unpackTo(_o) {
        _o.MAN_ID = this.MAN_ID();
        _o.MAN_BASIS = this.MAN_BASIS();
        _o.MAN_DEVICE_ID = this.MAN_DEVICE_ID();
        _o.MAN_PREV_ID = this.MAN_PREV_ID();
        _o.MAN_PURPOSE = this.MAN_PURPOSE();
        _o.MAN_REF_FRAME = this.MAN_REF_FRAME();
        _o.MAN_FRAME_EPOCH = this.MAN_FRAME_EPOCH();
        _o.MAN_TYPE = this.MAN_TYPE();
        _o.MAN_EPOCH_START = this.MAN_EPOCH_START();
        _o.MAN_DURATION = this.MAN_DURATION();
        _o.MAN_UNITS = this.bb.createScalarList(this.MAN_UNITS.bind(this), this.manUnitsLength());
        _o.DATA = this.bb.createScalarList(this.DATA.bind(this), this.dataLength());
        _o.MAN_COMMENT = this.bb.createScalarList(this.MAN_COMMENT.bind(this), this.manCommentLength());
    }
}
export class ManeuverT {
    constructor(MAN_ID = null, MAN_BASIS = null, MAN_DEVICE_ID = null, MAN_PREV_ID = null, MAN_PURPOSE = null, MAN_REF_FRAME = null, MAN_FRAME_EPOCH = null, MAN_TYPE = null, MAN_EPOCH_START = null, MAN_DURATION = 0.0, MAN_UNITS = [], DATA = [], MAN_COMMENT = []) {
        this.MAN_ID = MAN_ID;
        this.MAN_BASIS = MAN_BASIS;
        this.MAN_DEVICE_ID = MAN_DEVICE_ID;
        this.MAN_PREV_ID = MAN_PREV_ID;
        this.MAN_PURPOSE = MAN_PURPOSE;
        this.MAN_REF_FRAME = MAN_REF_FRAME;
        this.MAN_FRAME_EPOCH = MAN_FRAME_EPOCH;
        this.MAN_TYPE = MAN_TYPE;
        this.MAN_EPOCH_START = MAN_EPOCH_START;
        this.MAN_DURATION = MAN_DURATION;
        this.MAN_UNITS = MAN_UNITS;
        this.DATA = DATA;
        this.MAN_COMMENT = MAN_COMMENT;
    }
    pack(builder) {
        const MAN_ID = (this.MAN_ID !== null ? builder.createString(this.MAN_ID) : 0);
        const MAN_BASIS = (this.MAN_BASIS !== null ? builder.createString(this.MAN_BASIS) : 0);
        const MAN_DEVICE_ID = (this.MAN_DEVICE_ID !== null ? builder.createString(this.MAN_DEVICE_ID) : 0);
        const MAN_PREV_ID = (this.MAN_PREV_ID !== null ? builder.createString(this.MAN_PREV_ID) : 0);
        const MAN_PURPOSE = (this.MAN_PURPOSE !== null ? builder.createString(this.MAN_PURPOSE) : 0);
        const MAN_REF_FRAME = (this.MAN_REF_FRAME !== null ? builder.createString(this.MAN_REF_FRAME) : 0);
        const MAN_FRAME_EPOCH = (this.MAN_FRAME_EPOCH !== null ? builder.createString(this.MAN_FRAME_EPOCH) : 0);
        const MAN_TYPE = (this.MAN_TYPE !== null ? builder.createString(this.MAN_TYPE) : 0);
        const MAN_EPOCH_START = (this.MAN_EPOCH_START !== null ? builder.createString(this.MAN_EPOCH_START) : 0);
        const MAN_UNITS = Maneuver.createManUnitsVector(builder, builder.createObjectOffsetList(this.MAN_UNITS));
        const DATA = Maneuver.createDataVector(builder, builder.createObjectOffsetList(this.DATA));
        const MAN_COMMENT = Maneuver.createManCommentVector(builder, builder.createObjectOffsetList(this.MAN_COMMENT));
        return Maneuver.createManeuver(builder, MAN_ID, MAN_BASIS, MAN_DEVICE_ID, MAN_PREV_ID, MAN_PURPOSE, MAN_REF_FRAME, MAN_FRAME_EPOCH, MAN_TYPE, MAN_EPOCH_START, this.MAN_DURATION, MAN_UNITS, DATA, MAN_COMMENT);
    }
}
