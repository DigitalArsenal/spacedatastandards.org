// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { LDIFAttributeType } from './LDIFAttributeType.js';
/**
 * Represents a component of a Distinguished Name (DN) in LDAP
 */
export class DNComponent {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsDNComponent(bb, obj) {
        return (obj || new DNComponent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsDNComponent(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DNComponent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    /**
     * The type of the DN component
     */
    TYPE() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : LDIFAttributeType.CN;
    }
    VALUE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startDNComponent(builder) {
        builder.startObject(2);
    }
    static addType(builder, TYPE) {
        builder.addFieldInt8(0, TYPE, LDIFAttributeType.CN);
    }
    static addValue(builder, VALUEOffset) {
        builder.addFieldOffset(1, VALUEOffset, 0);
    }
    static endDNComponent(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createDNComponent(builder, TYPE, VALUEOffset) {
        DNComponent.startDNComponent(builder);
        DNComponent.addType(builder, TYPE);
        DNComponent.addValue(builder, VALUEOffset);
        return DNComponent.endDNComponent(builder);
    }
    unpack() {
        return new DNComponentT(this.TYPE(), this.VALUE());
    }
    unpackTo(_o) {
        _o.TYPE = this.TYPE();
        _o.VALUE = this.VALUE();
    }
}
export class DNComponentT {
    constructor(TYPE = LDIFAttributeType.CN, VALUE = null) {
        this.TYPE = TYPE;
        this.VALUE = VALUE;
    }
    pack(builder) {
        const VALUE = (this.VALUE !== null ? builder.createString(this.VALUE) : 0);
        return DNComponent.createDNComponent(builder, this.TYPE, VALUE);
    }
}
