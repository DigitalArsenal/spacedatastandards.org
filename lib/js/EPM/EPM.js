// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { CryptoKey } from './CryptoKey.js';
/**
 * Entity Profile Message
 */
export class EPM {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsEPM(bb, obj) {
        return (obj || new EPM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsEPM(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new EPM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$EPM');
    }
    DN(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    LEGAL_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    FAMILY_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    GIVEN_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ADDITIONAL_NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    HONORIFIC_PREFIX(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    HONORIFIC_SUFFIX(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    JOB_TITLE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    OCCUPATION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ALTERNATE_NAMES(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    alternateNamesLength() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    EMAIL(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    TELEPHONE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Cryptographic keys associated with the entity
     */
    KEYS(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? (obj || new CryptoKey()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    keysLength() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    MULTIFORMAT_ADDRESS(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    multiformatAddressLength() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startEPM(builder) {
        builder.startObject(14);
    }
    static addDn(builder, DNOffset) {
        builder.addFieldOffset(0, DNOffset, 0);
    }
    static addLegalName(builder, LEGAL_NAMEOffset) {
        builder.addFieldOffset(1, LEGAL_NAMEOffset, 0);
    }
    static addFamilyName(builder, FAMILY_NAMEOffset) {
        builder.addFieldOffset(2, FAMILY_NAMEOffset, 0);
    }
    static addGivenName(builder, GIVEN_NAMEOffset) {
        builder.addFieldOffset(3, GIVEN_NAMEOffset, 0);
    }
    static addAdditionalName(builder, ADDITIONAL_NAMEOffset) {
        builder.addFieldOffset(4, ADDITIONAL_NAMEOffset, 0);
    }
    static addHonorificPrefix(builder, HONORIFIC_PREFIXOffset) {
        builder.addFieldOffset(5, HONORIFIC_PREFIXOffset, 0);
    }
    static addHonorificSuffix(builder, HONORIFIC_SUFFIXOffset) {
        builder.addFieldOffset(6, HONORIFIC_SUFFIXOffset, 0);
    }
    static addJobTitle(builder, JOB_TITLEOffset) {
        builder.addFieldOffset(7, JOB_TITLEOffset, 0);
    }
    static addOccupation(builder, OCCUPATIONOffset) {
        builder.addFieldOffset(8, OCCUPATIONOffset, 0);
    }
    static addAlternateNames(builder, ALTERNATE_NAMESOffset) {
        builder.addFieldOffset(9, ALTERNATE_NAMESOffset, 0);
    }
    static createAlternateNamesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startAlternateNamesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addEmail(builder, EMAILOffset) {
        builder.addFieldOffset(10, EMAILOffset, 0);
    }
    static addTelephone(builder, TELEPHONEOffset) {
        builder.addFieldOffset(11, TELEPHONEOffset, 0);
    }
    static addKeys(builder, KEYSOffset) {
        builder.addFieldOffset(12, KEYSOffset, 0);
    }
    static createKeysVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startKeysVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addMultiformatAddress(builder, MULTIFORMAT_ADDRESSOffset) {
        builder.addFieldOffset(13, MULTIFORMAT_ADDRESSOffset, 0);
    }
    static createMultiformatAddressVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startMultiformatAddressVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endEPM(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishEPMBuffer(builder, offset) {
        builder.finish(offset, '$EPM');
    }
    static finishSizePrefixedEPMBuffer(builder, offset) {
        builder.finish(offset, '$EPM', true);
    }
    static createEPM(builder, DNOffset, LEGAL_NAMEOffset, FAMILY_NAMEOffset, GIVEN_NAMEOffset, ADDITIONAL_NAMEOffset, HONORIFIC_PREFIXOffset, HONORIFIC_SUFFIXOffset, JOB_TITLEOffset, OCCUPATIONOffset, ALTERNATE_NAMESOffset, EMAILOffset, TELEPHONEOffset, KEYSOffset, MULTIFORMAT_ADDRESSOffset) {
        EPM.startEPM(builder);
        EPM.addDn(builder, DNOffset);
        EPM.addLegalName(builder, LEGAL_NAMEOffset);
        EPM.addFamilyName(builder, FAMILY_NAMEOffset);
        EPM.addGivenName(builder, GIVEN_NAMEOffset);
        EPM.addAdditionalName(builder, ADDITIONAL_NAMEOffset);
        EPM.addHonorificPrefix(builder, HONORIFIC_PREFIXOffset);
        EPM.addHonorificSuffix(builder, HONORIFIC_SUFFIXOffset);
        EPM.addJobTitle(builder, JOB_TITLEOffset);
        EPM.addOccupation(builder, OCCUPATIONOffset);
        EPM.addAlternateNames(builder, ALTERNATE_NAMESOffset);
        EPM.addEmail(builder, EMAILOffset);
        EPM.addTelephone(builder, TELEPHONEOffset);
        EPM.addKeys(builder, KEYSOffset);
        EPM.addMultiformatAddress(builder, MULTIFORMAT_ADDRESSOffset);
        return EPM.endEPM(builder);
    }
    unpack() {
        return new EPMT(this.DN(), this.LEGAL_NAME(), this.FAMILY_NAME(), this.GIVEN_NAME(), this.ADDITIONAL_NAME(), this.HONORIFIC_PREFIX(), this.HONORIFIC_SUFFIX(), this.JOB_TITLE(), this.OCCUPATION(), this.bb.createScalarList(this.ALTERNATE_NAMES.bind(this), this.alternateNamesLength()), this.EMAIL(), this.TELEPHONE(), this.bb.createObjList(this.KEYS.bind(this), this.keysLength()), this.bb.createScalarList(this.MULTIFORMAT_ADDRESS.bind(this), this.multiformatAddressLength()));
    }
    unpackTo(_o) {
        _o.DN = this.DN();
        _o.LEGAL_NAME = this.LEGAL_NAME();
        _o.FAMILY_NAME = this.FAMILY_NAME();
        _o.GIVEN_NAME = this.GIVEN_NAME();
        _o.ADDITIONAL_NAME = this.ADDITIONAL_NAME();
        _o.HONORIFIC_PREFIX = this.HONORIFIC_PREFIX();
        _o.HONORIFIC_SUFFIX = this.HONORIFIC_SUFFIX();
        _o.JOB_TITLE = this.JOB_TITLE();
        _o.OCCUPATION = this.OCCUPATION();
        _o.ALTERNATE_NAMES = this.bb.createScalarList(this.ALTERNATE_NAMES.bind(this), this.alternateNamesLength());
        _o.EMAIL = this.EMAIL();
        _o.TELEPHONE = this.TELEPHONE();
        _o.KEYS = this.bb.createObjList(this.KEYS.bind(this), this.keysLength());
        _o.MULTIFORMAT_ADDRESS = this.bb.createScalarList(this.MULTIFORMAT_ADDRESS.bind(this), this.multiformatAddressLength());
    }
}
export class EPMT {
    constructor(DN = null, LEGAL_NAME = null, FAMILY_NAME = null, GIVEN_NAME = null, ADDITIONAL_NAME = null, HONORIFIC_PREFIX = null, HONORIFIC_SUFFIX = null, JOB_TITLE = null, OCCUPATION = null, ALTERNATE_NAMES = [], EMAIL = null, TELEPHONE = null, KEYS = [], MULTIFORMAT_ADDRESS = []) {
        this.DN = DN;
        this.LEGAL_NAME = LEGAL_NAME;
        this.FAMILY_NAME = FAMILY_NAME;
        this.GIVEN_NAME = GIVEN_NAME;
        this.ADDITIONAL_NAME = ADDITIONAL_NAME;
        this.HONORIFIC_PREFIX = HONORIFIC_PREFIX;
        this.HONORIFIC_SUFFIX = HONORIFIC_SUFFIX;
        this.JOB_TITLE = JOB_TITLE;
        this.OCCUPATION = OCCUPATION;
        this.ALTERNATE_NAMES = ALTERNATE_NAMES;
        this.EMAIL = EMAIL;
        this.TELEPHONE = TELEPHONE;
        this.KEYS = KEYS;
        this.MULTIFORMAT_ADDRESS = MULTIFORMAT_ADDRESS;
    }
    pack(builder) {
        const DN = (this.DN !== null ? builder.createString(this.DN) : 0);
        const LEGAL_NAME = (this.LEGAL_NAME !== null ? builder.createString(this.LEGAL_NAME) : 0);
        const FAMILY_NAME = (this.FAMILY_NAME !== null ? builder.createString(this.FAMILY_NAME) : 0);
        const GIVEN_NAME = (this.GIVEN_NAME !== null ? builder.createString(this.GIVEN_NAME) : 0);
        const ADDITIONAL_NAME = (this.ADDITIONAL_NAME !== null ? builder.createString(this.ADDITIONAL_NAME) : 0);
        const HONORIFIC_PREFIX = (this.HONORIFIC_PREFIX !== null ? builder.createString(this.HONORIFIC_PREFIX) : 0);
        const HONORIFIC_SUFFIX = (this.HONORIFIC_SUFFIX !== null ? builder.createString(this.HONORIFIC_SUFFIX) : 0);
        const JOB_TITLE = (this.JOB_TITLE !== null ? builder.createString(this.JOB_TITLE) : 0);
        const OCCUPATION = (this.OCCUPATION !== null ? builder.createString(this.OCCUPATION) : 0);
        const ALTERNATE_NAMES = EPM.createAlternateNamesVector(builder, builder.createObjectOffsetList(this.ALTERNATE_NAMES));
        const EMAIL = (this.EMAIL !== null ? builder.createString(this.EMAIL) : 0);
        const TELEPHONE = (this.TELEPHONE !== null ? builder.createString(this.TELEPHONE) : 0);
        const KEYS = EPM.createKeysVector(builder, builder.createObjectOffsetList(this.KEYS));
        const MULTIFORMAT_ADDRESS = EPM.createMultiformatAddressVector(builder, builder.createObjectOffsetList(this.MULTIFORMAT_ADDRESS));
        return EPM.createEPM(builder, DN, LEGAL_NAME, FAMILY_NAME, GIVEN_NAME, ADDITIONAL_NAME, HONORIFIC_PREFIX, HONORIFIC_SUFFIX, JOB_TITLE, OCCUPATION, ALTERNATE_NAMES, EMAIL, TELEPHONE, KEYS, MULTIFORMAT_ADDRESS);
    }
}
