// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { DNComponent } from './DNComponent.js';
/**
 * Represents a Distinguished Name composed of DNComponents
 */
export class DistinguishedName {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsDistinguishedName(bb, obj) {
        return (obj || new DistinguishedName()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsDistinguishedName(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DistinguishedName()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    /**
     * The sequence of components making up the DN
     */
    COMPONENTS(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new DNComponent()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    componentsLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startDistinguishedName(builder) {
        builder.startObject(1);
    }
    static addComponents(builder, COMPONENTSOffset) {
        builder.addFieldOffset(0, COMPONENTSOffset, 0);
    }
    static createComponentsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startComponentsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endDistinguishedName(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createDistinguishedName(builder, COMPONENTSOffset) {
        DistinguishedName.startDistinguishedName(builder);
        DistinguishedName.addComponents(builder, COMPONENTSOffset);
        return DistinguishedName.endDistinguishedName(builder);
    }
    unpack() {
        return new DistinguishedNameT(this.bb.createObjList(this.COMPONENTS.bind(this), this.componentsLength()));
    }
    unpackTo(_o) {
        _o.COMPONENTS = this.bb.createObjList(this.COMPONENTS.bind(this), this.componentsLength());
    }
}
export class DistinguishedNameT {
    constructor(COMPONENTS = []) {
        this.COMPONENTS = COMPONENTS;
    }
    pack(builder) {
        const COMPONENTS = DistinguishedName.createComponentsVector(builder, builder.createObjectOffsetList(this.COMPONENTS));
        return DistinguishedName.createDistinguishedName(builder, COMPONENTS);
    }
}
