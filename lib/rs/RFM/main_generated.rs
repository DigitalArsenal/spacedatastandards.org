// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_REF_FRAME: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_REF_FRAME: i8 = 88;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_REF_FRAME: [refFrame; 89] = [
  refFrame::ECEF,
  refFrame::ICRF,
  refFrame::TEME,
  refFrame::ENU,
  refFrame::NED,
  refFrame::NEU,
  refFrame::RIC,
  refFrame::J2000,
  refFrame::GCRF,
  refFrame::GRC,
  refFrame::ITRF2000,
  refFrame::ITRF93,
  refFrame::ITRF97,
  refFrame::TDR,
  refFrame::TOD,
  refFrame::RTN,
  refFrame::TVN,
  refFrame::VVLH,
  refFrame::QSW,
  refFrame::LTP,
  refFrame::LVLH,
  refFrame::PNE,
  refFrame::BRF,
  refFrame::RSW,
  refFrame::TNW,
  refFrame::UVW,
  refFrame::EQW_INERTIAL,
  refFrame::LVLH_INERTIAL,
  refFrame::LVLH_ROTATING,
  refFrame::NSW_INERTIAL,
  refFrame::NSW_ROTATING,
  refFrame::NTW_INERTIAL,
  refFrame::NTW_ROTATING,
  refFrame::PQW_INERTIAL,
  refFrame::RSW_INERTIAL,
  refFrame::RSW_ROTATING,
  refFrame::SEZ_INERTIAL,
  refFrame::SEZ_ROTATING,
  refFrame::TNW_INERTIAL,
  refFrame::TNW_ROTATING,
  refFrame::VNC_INERTIAL,
  refFrame::VNC_ROTATING,
  refFrame::ALIGN_CB,
  refFrame::ALIGN_EARTH,
  refFrame::B1950,
  refFrame::CIRS,
  refFrame::DTRFyyyy,
  refFrame::EFG,
  refFrame::EME2000,
  refFrame::FIXED_CB,
  refFrame::FIXED_EARTH,
  refFrame::GCRFn,
  refFrame::GTOD,
  refFrame::MOD_CB,
  refFrame::MOD_EARTH,
  refFrame::MOD_MOON,
  refFrame::MOE_CB,
  refFrame::MOE_EARTH,
  refFrame::MOON_ME,
  refFrame::MOON_MEIAUE,
  refFrame::MOON_PAxxx,
  refFrame::TEMEOFDATE,
  refFrame::TEMEOFEPOCH,
  refFrame::TIRS,
  refFrame::TOD_CB,
  refFrame::TOD_EARTH,
  refFrame::TOD_MOON,
  refFrame::TOE_CB,
  refFrame::TOE_EARTH,
  refFrame::TOE_MOON,
  refFrame::TRUE_ECLIPTIC,
  refFrame::UVW_GO_INERTIAL,
  refFrame::WGS84,
  refFrame::ACC_i,
  refFrame::ACTUATOR_i,
  refFrame::AST_i,
  refFrame::CSS_i,
  refFrame::DSS_i,
  refFrame::ESA_i,
  refFrame::GYRO_FRAME_i,
  refFrame::IMU_FRAME_i,
  refFrame::INSTRUMENT_i,
  refFrame::MTA_i,
  refFrame::RW_i,
  refFrame::SA_i,
  refFrame::SC_BODY_i,
  refFrame::SENSOR_i,
  refFrame::STARTRACKER_i,
  refFrame::TAM_i,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct refFrame(pub i8);
#[allow(non_upper_case_globals)]
impl refFrame {
  /// Earth-Centered-Earth-Fixed: Rotates with Earth. X-axis at prime meridian, Y eastward, Z towards North Pole.
  pub const ECEF: Self = Self(0);
  /// International Celestial Reference Frame: Fixed relative to distant stars. Used in astronomy.
  pub const ICRF: Self = Self(1);
  /// True Equator Mean Equinox: Dynamic frame for SGP4 satellite tracking.
  pub const TEME: Self = Self(2);
  /// East-North-Up: Local tangent plane for surface points. Suitable for stationary objects.
  pub const ENU: Self = Self(3);
  /// North-East-Down: Aviation/navigation frame aligned with gravity.
  pub const NED: Self = Self(4);
  /// North-East-Up: Similar to NED, with "Up" opposite gravity.
  pub const NEU: Self = Self(5);
  /// Radial-Intrack-Cross-track: Spacecraft orientation aligned with orbit.
  pub const RIC: Self = Self(6);
  /// Earth Mean Equator and Equinox of J2000: Fixed relative to stars, used for celestial mechanics.
  pub const J2000: Self = Self(7);
  /// Geocentric Celestial Reference Frame: Inertial Earth-centered frame.
  pub const GCRF: Self = Self(8);
  /// Greenwich Rotating Coordinates: Rotates with Earth's true equator.
  pub const GRC: Self = Self(9);
  /// International Terrestrial Reference Frame 2000: Rotating Earth-fixed frame.
  pub const ITRF2000: Self = Self(10);
  /// International Terrestrial Reference Frame 1993: Older ITRF realization.
  pub const ITRF93: Self = Self(11);
  /// International Terrestrial Reference Frame 1997: Intermediate ITRF realization.
  pub const ITRF97: Self = Self(12);
  /// True of Date, Rotating: Rotates with Earth's true equator.
  pub const TDR: Self = Self(13);
  /// True of Date: Similar to TDR, without rotation.
  pub const TOD: Self = Self(14);
  /// Radial, Transverse, Normal: Orbit frame for spacecraft dynamics.
  pub const RTN: Self = Self(15);
  /// Transverse, Velocity, Normal: Alternative orbit frame.
  pub const TVN: Self = Self(16);
  /// Vehicle-Body-Local-Horizontal: Orbit frame aligned with spacecraft.
  pub const VVLH: Self = Self(17);
  /// Radial, Tangential, Cross-track: Used for nadir- or velocity-aligned spacecraft; equivalent to LVLH in many formulations.
  pub const QSW: Self = Self(18);
  /// Local Tangent Plane: Surface-fixed frame for terrestrial uses.
  pub const LTP: Self = Self(19);
  /// Local Vertical-Local Horizontal: Orbit frame with Z towards Earth center.
  pub const LVLH: Self = Self(20);
  /// Polar-North-East: Polar coordinate frame.
  pub const PNE: Self = Self(21);
  /// Body-Fixed Reference Frame: Fixed to a spacecraft or celestial object.
  pub const BRF: Self = Self(22);
  /// Radial, Down-track, Cross-track: Alternate name for RTN.
  pub const RSW: Self = Self(23);
  /// Tangential, Normal, Cross-track: Local orbit frame.
  pub const TNW: Self = Self(24);
  /// Radial, Along-track, Cross-track: Satellite motion frame.
  pub const UVW: Self = Self(25);
  /// Equinoctial Inertial: Frame with axes aligned to orbital properties.
  pub const EQW_INERTIAL: Self = Self(26);
  /// Inertial version of LVLH.
  pub const LVLH_INERTIAL: Self = Self(27);
  /// Rotating LVLH frame.
  pub const LVLH_ROTATING: Self = Self(28);
  /// Inertial Nadir-Sun-Normal frame.
  pub const NSW_INERTIAL: Self = Self(29);
  /// Rotating Nadir-Sun-Normal frame.
  pub const NSW_ROTATING: Self = Self(30);
  /// Inertial Transverse-Velocity-Normal frame.
  pub const NTW_INERTIAL: Self = Self(31);
  /// Rotating Transverse-Velocity-Normal frame.
  pub const NTW_ROTATING: Self = Self(32);
  /// Perifocal Coordinate System: Inertial frame aligned to periapsis.
  pub const PQW_INERTIAL: Self = Self(33);
  /// Inertial Radial, Transverse, Normal frame.
  pub const RSW_INERTIAL: Self = Self(34);
  /// Rotating RSW frame: Aligned with orbit angular momentum.
  pub const RSW_ROTATING: Self = Self(35);
  /// South/East/Zenith inertial frame.
  pub const SEZ_INERTIAL: Self = Self(36);
  /// Rotating South/East/Zenith frame.
  pub const SEZ_ROTATING: Self = Self(37);
  /// Inertial Tangential, Normal, Cross-track frame.
  pub const TNW_INERTIAL: Self = Self(38);
  /// Rotating Tangential, Normal, Cross-track frame.
  pub const TNW_ROTATING: Self = Self(39);
  /// Velocity, Normal, Co-normal inertial frame.
  pub const VNC_INERTIAL: Self = Self(40);
  /// Rotating Velocity, Normal, Co-normal frame.
  pub const VNC_ROTATING: Self = Self(41);
  /// Central Body alignment inertial frame.
  pub const ALIGN_CB: Self = Self(42);
  /// Earth alignment inertial frame.
  pub const ALIGN_EARTH: Self = Self(43);
  /// Inertial realization of B1950 epoch.
  pub const B1950: Self = Self(44);
  /// Celestial Intermediate Reference System.
  pub const CIRS: Self = Self(45);
  /// DTRF Inertial frame with corrections.
  pub const DTRFyyyy: Self = Self(46);
  /// Earth-Fixed Greenwich rotating frame.
  pub const EFG: Self = Self(47);
  /// Earth Mean Equator and Equinox of 2000 epoch.
  pub const EME2000: Self = Self(48);
  /// Central Body fixed rotating frame.
  pub const FIXED_CB: Self = Self(49);
  /// Earth-fixed rotating frame.
  pub const FIXED_EARTH: Self = Self(50);
  /// Geocentric Celestial Reference Frame with versioning.
  pub const GCRFn: Self = Self(51);
  /// Greenwich True-of-Date rotating frame.
  pub const GTOD: Self = Self(52);
  /// Mean of Date for all central bodies except Earth and Moon.
  pub const MOD_CB: Self = Self(53);
  /// Mean of Date for Earth.
  pub const MOD_EARTH: Self = Self(54);
  /// Mean of Date for Moon.
  pub const MOD_MOON: Self = Self(55);
  /// Mean of Epoch for central bodies.
  pub const MOE_CB: Self = Self(56);
  /// Mean of Epoch for Earth.
  pub const MOE_EARTH: Self = Self(57);
  /// Lunar Moon Mean Earth reference frame.
  pub const MOON_ME: Self = Self(58);
  /// Lunar Mean Equator and IAU Node reference frame.
  pub const MOON_MEIAUE: Self = Self(59);
  /// Lunar Principal Axis rotating frame.
  pub const MOON_PAxxx: Self = Self(60);
  /// True Equator Mean Equinox of Date.
  pub const TEMEOFDATE: Self = Self(61);
  /// True Equator Mean Equinox of Epoch.
  pub const TEMEOFEPOCH: Self = Self(62);
  /// Terrestrial Intermediate Reference System.
  pub const TIRS: Self = Self(63);
  /// True of Date for central bodies.
  pub const TOD_CB: Self = Self(64);
  /// True of Date for Earth.
  pub const TOD_EARTH: Self = Self(65);
  /// True of Date for Moon.
  pub const TOD_MOON: Self = Self(66);
  /// True of Epoch for central bodies.
  pub const TOE_CB: Self = Self(67);
  /// True of Epoch for Earth.
  pub const TOE_EARTH: Self = Self(68);
  /// True of Epoch for Moon.
  pub const TOE_MOON: Self = Self(69);
  /// True Ecliptic reference frame.
  pub const TRUE_ECLIPTIC: Self = Self(70);
  /// Launch go-inertial reference frame.
  pub const UVW_GO_INERTIAL: Self = Self(71);
  /// WGS 84 Earth-fixed terrestrial system.
  pub const WGS84: Self = Self(72);
  /// Accelerometer reference frame.
  pub const ACC_i: Self = Self(73);
  /// Actuator reference frame.
  pub const ACTUATOR_i: Self = Self(74);
  /// Autonomous Star Tracker reference frame.
  pub const AST_i: Self = Self(75);
  /// Coarse Sun Sensor reference frame.
  pub const CSS_i: Self = Self(76);
  /// Digital Sun Sensor reference frame.
  pub const DSS_i: Self = Self(77);
  /// Earth Sensor Assembly reference frame.
  pub const ESA_i: Self = Self(78);
  /// Gyro reference frame.
  pub const GYRO_FRAME_i: Self = Self(79);
  /// Inertial Measurement Unit reference frame.
  pub const IMU_FRAME_i: Self = Self(80);
  /// Instrument reference frame.
  pub const INSTRUMENT_i: Self = Self(81);
  /// Magnetic Torque Assembly reference frame.
  pub const MTA_i: Self = Self(82);
  /// Reaction Wheel reference frame.
  pub const RW_i: Self = Self(83);
  /// Solar Array reference frame.
  pub const SA_i: Self = Self(84);
  /// Spacecraft Body reference frame.
  pub const SC_BODY_i: Self = Self(85);
  /// Sensor reference frame.
  pub const SENSOR_i: Self = Self(86);
  /// Star Tracker reference frame.
  pub const STARTRACKER_i: Self = Self(87);
  /// Three Axis Magnetometer reference frame.
  pub const TAM_i: Self = Self(88);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 88;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::ECEF,
    Self::ICRF,
    Self::TEME,
    Self::ENU,
    Self::NED,
    Self::NEU,
    Self::RIC,
    Self::J2000,
    Self::GCRF,
    Self::GRC,
    Self::ITRF2000,
    Self::ITRF93,
    Self::ITRF97,
    Self::TDR,
    Self::TOD,
    Self::RTN,
    Self::TVN,
    Self::VVLH,
    Self::QSW,
    Self::LTP,
    Self::LVLH,
    Self::PNE,
    Self::BRF,
    Self::RSW,
    Self::TNW,
    Self::UVW,
    Self::EQW_INERTIAL,
    Self::LVLH_INERTIAL,
    Self::LVLH_ROTATING,
    Self::NSW_INERTIAL,
    Self::NSW_ROTATING,
    Self::NTW_INERTIAL,
    Self::NTW_ROTATING,
    Self::PQW_INERTIAL,
    Self::RSW_INERTIAL,
    Self::RSW_ROTATING,
    Self::SEZ_INERTIAL,
    Self::SEZ_ROTATING,
    Self::TNW_INERTIAL,
    Self::TNW_ROTATING,
    Self::VNC_INERTIAL,
    Self::VNC_ROTATING,
    Self::ALIGN_CB,
    Self::ALIGN_EARTH,
    Self::B1950,
    Self::CIRS,
    Self::DTRFyyyy,
    Self::EFG,
    Self::EME2000,
    Self::FIXED_CB,
    Self::FIXED_EARTH,
    Self::GCRFn,
    Self::GTOD,
    Self::MOD_CB,
    Self::MOD_EARTH,
    Self::MOD_MOON,
    Self::MOE_CB,
    Self::MOE_EARTH,
    Self::MOON_ME,
    Self::MOON_MEIAUE,
    Self::MOON_PAxxx,
    Self::TEMEOFDATE,
    Self::TEMEOFEPOCH,
    Self::TIRS,
    Self::TOD_CB,
    Self::TOD_EARTH,
    Self::TOD_MOON,
    Self::TOE_CB,
    Self::TOE_EARTH,
    Self::TOE_MOON,
    Self::TRUE_ECLIPTIC,
    Self::UVW_GO_INERTIAL,
    Self::WGS84,
    Self::ACC_i,
    Self::ACTUATOR_i,
    Self::AST_i,
    Self::CSS_i,
    Self::DSS_i,
    Self::ESA_i,
    Self::GYRO_FRAME_i,
    Self::IMU_FRAME_i,
    Self::INSTRUMENT_i,
    Self::MTA_i,
    Self::RW_i,
    Self::SA_i,
    Self::SC_BODY_i,
    Self::SENSOR_i,
    Self::STARTRACKER_i,
    Self::TAM_i,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::ECEF => Some("ECEF"),
      Self::ICRF => Some("ICRF"),
      Self::TEME => Some("TEME"),
      Self::ENU => Some("ENU"),
      Self::NED => Some("NED"),
      Self::NEU => Some("NEU"),
      Self::RIC => Some("RIC"),
      Self::J2000 => Some("J2000"),
      Self::GCRF => Some("GCRF"),
      Self::GRC => Some("GRC"),
      Self::ITRF2000 => Some("ITRF2000"),
      Self::ITRF93 => Some("ITRF93"),
      Self::ITRF97 => Some("ITRF97"),
      Self::TDR => Some("TDR"),
      Self::TOD => Some("TOD"),
      Self::RTN => Some("RTN"),
      Self::TVN => Some("TVN"),
      Self::VVLH => Some("VVLH"),
      Self::QSW => Some("QSW"),
      Self::LTP => Some("LTP"),
      Self::LVLH => Some("LVLH"),
      Self::PNE => Some("PNE"),
      Self::BRF => Some("BRF"),
      Self::RSW => Some("RSW"),
      Self::TNW => Some("TNW"),
      Self::UVW => Some("UVW"),
      Self::EQW_INERTIAL => Some("EQW_INERTIAL"),
      Self::LVLH_INERTIAL => Some("LVLH_INERTIAL"),
      Self::LVLH_ROTATING => Some("LVLH_ROTATING"),
      Self::NSW_INERTIAL => Some("NSW_INERTIAL"),
      Self::NSW_ROTATING => Some("NSW_ROTATING"),
      Self::NTW_INERTIAL => Some("NTW_INERTIAL"),
      Self::NTW_ROTATING => Some("NTW_ROTATING"),
      Self::PQW_INERTIAL => Some("PQW_INERTIAL"),
      Self::RSW_INERTIAL => Some("RSW_INERTIAL"),
      Self::RSW_ROTATING => Some("RSW_ROTATING"),
      Self::SEZ_INERTIAL => Some("SEZ_INERTIAL"),
      Self::SEZ_ROTATING => Some("SEZ_ROTATING"),
      Self::TNW_INERTIAL => Some("TNW_INERTIAL"),
      Self::TNW_ROTATING => Some("TNW_ROTATING"),
      Self::VNC_INERTIAL => Some("VNC_INERTIAL"),
      Self::VNC_ROTATING => Some("VNC_ROTATING"),
      Self::ALIGN_CB => Some("ALIGN_CB"),
      Self::ALIGN_EARTH => Some("ALIGN_EARTH"),
      Self::B1950 => Some("B1950"),
      Self::CIRS => Some("CIRS"),
      Self::DTRFyyyy => Some("DTRFyyyy"),
      Self::EFG => Some("EFG"),
      Self::EME2000 => Some("EME2000"),
      Self::FIXED_CB => Some("FIXED_CB"),
      Self::FIXED_EARTH => Some("FIXED_EARTH"),
      Self::GCRFn => Some("GCRFn"),
      Self::GTOD => Some("GTOD"),
      Self::MOD_CB => Some("MOD_CB"),
      Self::MOD_EARTH => Some("MOD_EARTH"),
      Self::MOD_MOON => Some("MOD_MOON"),
      Self::MOE_CB => Some("MOE_CB"),
      Self::MOE_EARTH => Some("MOE_EARTH"),
      Self::MOON_ME => Some("MOON_ME"),
      Self::MOON_MEIAUE => Some("MOON_MEIAUE"),
      Self::MOON_PAxxx => Some("MOON_PAxxx"),
      Self::TEMEOFDATE => Some("TEMEOFDATE"),
      Self::TEMEOFEPOCH => Some("TEMEOFEPOCH"),
      Self::TIRS => Some("TIRS"),
      Self::TOD_CB => Some("TOD_CB"),
      Self::TOD_EARTH => Some("TOD_EARTH"),
      Self::TOD_MOON => Some("TOD_MOON"),
      Self::TOE_CB => Some("TOE_CB"),
      Self::TOE_EARTH => Some("TOE_EARTH"),
      Self::TOE_MOON => Some("TOE_MOON"),
      Self::TRUE_ECLIPTIC => Some("TRUE_ECLIPTIC"),
      Self::UVW_GO_INERTIAL => Some("UVW_GO_INERTIAL"),
      Self::WGS84 => Some("WGS84"),
      Self::ACC_i => Some("ACC_i"),
      Self::ACTUATOR_i => Some("ACTUATOR_i"),
      Self::AST_i => Some("AST_i"),
      Self::CSS_i => Some("CSS_i"),
      Self::DSS_i => Some("DSS_i"),
      Self::ESA_i => Some("ESA_i"),
      Self::GYRO_FRAME_i => Some("GYRO_FRAME_i"),
      Self::IMU_FRAME_i => Some("IMU_FRAME_i"),
      Self::INSTRUMENT_i => Some("INSTRUMENT_i"),
      Self::MTA_i => Some("MTA_i"),
      Self::RW_i => Some("RW_i"),
      Self::SA_i => Some("SA_i"),
      Self::SC_BODY_i => Some("SC_BODY_i"),
      Self::SENSOR_i => Some("SENSOR_i"),
      Self::STARTRACKER_i => Some("STARTRACKER_i"),
      Self::TAM_i => Some("TAM_i"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for refFrame {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for refFrame {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for refFrame {
    type Output = refFrame;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for refFrame {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for refFrame {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for refFrame {}
pub enum RFMOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Reference Frame Message
pub struct RFM<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RFM<'a> {
  type Inner = RFM<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RFM<'a> {
  pub const VT_REFERENCE_FRAME: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RFM { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RFMArgs
  ) -> flatbuffers::WIPOffset<RFM<'bldr>> {
    let mut builder = RFMBuilder::new(_fbb);
    builder.add_REFERENCE_FRAME(args.REFERENCE_FRAME);
    builder.finish()
  }

  pub fn unpack(&self) -> RFMT {
    let REFERENCE_FRAME = self.REFERENCE_FRAME();
    RFMT {
      REFERENCE_FRAME,
    }
  }

  #[inline]
  pub fn REFERENCE_FRAME(&self) -> refFrame {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<refFrame>(RFM::VT_REFERENCE_FRAME, Some(refFrame::ECEF)).unwrap()}
  }
}

impl flatbuffers::Verifiable for RFM<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<refFrame>("REFERENCE_FRAME", Self::VT_REFERENCE_FRAME, false)?
     .finish();
    Ok(())
  }
}
pub struct RFMArgs {
    pub REFERENCE_FRAME: refFrame,
}
impl<'a> Default for RFMArgs {
  #[inline]
  fn default() -> Self {
    RFMArgs {
      REFERENCE_FRAME: refFrame::ECEF,
    }
  }
}

pub struct RFMBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RFMBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_REFERENCE_FRAME(&mut self, REFERENCE_FRAME: refFrame) {
    self.fbb_.push_slot::<refFrame>(RFM::VT_REFERENCE_FRAME, REFERENCE_FRAME, refFrame::ECEF);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RFMBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RFMBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RFM<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RFM<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RFM");
      ds.field("REFERENCE_FRAME", &self.REFERENCE_FRAME());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct RFMT {
  pub REFERENCE_FRAME: refFrame,
}
impl Default for RFMT {
  fn default() -> Self {
    Self {
      REFERENCE_FRAME: refFrame::ECEF,
    }
  }
}
impl RFMT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<RFM<'b>> {
    let REFERENCE_FRAME = self.REFERENCE_FRAME;
    RFM::create(_fbb, &RFMArgs{
      REFERENCE_FRAME,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `RFM`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_RFM_unchecked`.
pub fn root_as_RFM(buf: &[u8]) -> Result<RFM, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<RFM>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `RFM` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_RFM_unchecked`.
pub fn size_prefixed_root_as_RFM(buf: &[u8]) -> Result<RFM, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<RFM>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `RFM` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_RFM_unchecked`.
pub fn root_as_RFM_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RFM<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<RFM<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `RFM` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_RFM_unchecked`.
pub fn size_prefixed_root_as_RFM_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RFM<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<RFM<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a RFM and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `RFM`.
pub unsafe fn root_as_RFM_unchecked(buf: &[u8]) -> RFM {
  flatbuffers::root_unchecked::<RFM>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed RFM and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `RFM`.
pub unsafe fn size_prefixed_root_as_RFM_unchecked(buf: &[u8]) -> RFM {
  flatbuffers::size_prefixed_root_unchecked::<RFM>(buf)
}
pub const RFM_IDENTIFIER: &str = "$RFM";

#[inline]
pub fn RFM_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, RFM_IDENTIFIER, false)
}

#[inline]
pub fn RFM_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, RFM_IDENTIFIER, true)
}

#[inline]
pub fn finish_RFM_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<RFM<'a>>) {
  fbb.finish(root, Some(RFM_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_RFM_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<RFM<'a>>) {
  fbb.finish_size_prefixed(root, Some(RFM_IDENTIFIER));
}
