// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum PRGOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Program Description Message
pub struct PRG<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PRG<'a> {
  type Inner = PRG<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PRG<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_HD_KEY_PATH: flatbuffers::VOffsetT = 6;
  pub const VT_MESSAGE_TYPES: flatbuffers::VOffsetT = 8;
  pub const VT_USERS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PRG { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PRGArgs<'args>
  ) -> flatbuffers::WIPOffset<PRG<'bldr>> {
    let mut builder = PRGBuilder::new(_fbb);
    if let Some(x) = args.USERS { builder.add_USERS(x); }
    if let Some(x) = args.MESSAGE_TYPES { builder.add_MESSAGE_TYPES(x); }
    if let Some(x) = args.HD_KEY_PATH { builder.add_HD_KEY_PATH(x); }
    if let Some(x) = args.NAME { builder.add_NAME(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> PRGT {
    let NAME = self.NAME().map(|x| {
      x.to_string()
    });
    let HD_KEY_PATH = self.HD_KEY_PATH().map(|x| {
      x.to_string()
    });
    let MESSAGE_TYPES = self.MESSAGE_TYPES().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let USERS = self.USERS().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    PRGT {
      NAME,
      HD_KEY_PATH,
      MESSAGE_TYPES,
      USERS,
    }
  }

  /// The name of the program
  #[inline]
  pub fn NAME(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PRG::VT_NAME, None)}
  }
  /// Hierarchical Deterministic (HD) derivation path for the program's key, used in cryptocurrency wallets
  #[inline]
  pub fn HD_KEY_PATH(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PRG::VT_HD_KEY_PATH, None)}
  }
  /// Vector of standard message types used by the program
  #[inline]
  pub fn MESSAGE_TYPES(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PRG::VT_MESSAGE_TYPES, None)}
  }
  /// Vector of users associated with the program, each user can have assigned message types
  #[inline]
  pub fn USERS(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<USR<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<USR>>>>(PRG::VT_USERS, None)}
  }
}

impl flatbuffers::Verifiable for PRG<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("NAME", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("HD_KEY_PATH", Self::VT_HD_KEY_PATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("MESSAGE_TYPES", Self::VT_MESSAGE_TYPES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<USR>>>>("USERS", Self::VT_USERS, false)?
     .finish();
    Ok(())
  }
}
pub struct PRGArgs<'a> {
    pub NAME: Option<flatbuffers::WIPOffset<&'a str>>,
    pub HD_KEY_PATH: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MESSAGE_TYPES: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub USERS: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<USR<'a>>>>>,
}
impl<'a> Default for PRGArgs<'a> {
  #[inline]
  fn default() -> Self {
    PRGArgs {
      NAME: None,
      HD_KEY_PATH: None,
      MESSAGE_TYPES: None,
      USERS: None,
    }
  }
}

pub struct PRGBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PRGBuilder<'a, 'b> {
  #[inline]
  pub fn add_NAME(&mut self, NAME: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PRG::VT_NAME, NAME);
  }
  #[inline]
  pub fn add_HD_KEY_PATH(&mut self, HD_KEY_PATH: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PRG::VT_HD_KEY_PATH, HD_KEY_PATH);
  }
  #[inline]
  pub fn add_MESSAGE_TYPES(&mut self, MESSAGE_TYPES: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PRG::VT_MESSAGE_TYPES, MESSAGE_TYPES);
  }
  #[inline]
  pub fn add_USERS(&mut self, USERS: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<USR<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PRG::VT_USERS, USERS);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PRGBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PRGBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PRG<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PRG<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PRG");
      ds.field("NAME", &self.NAME());
      ds.field("HD_KEY_PATH", &self.HD_KEY_PATH());
      ds.field("MESSAGE_TYPES", &self.MESSAGE_TYPES());
      ds.field("USERS", &self.USERS());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PRGT {
  pub NAME: Option<String>,
  pub HD_KEY_PATH: Option<String>,
  pub MESSAGE_TYPES: Option<Vec<String>>,
  pub USERS: Option<Vec<USRT>>,
}
impl Default for PRGT {
  fn default() -> Self {
    Self {
      NAME: None,
      HD_KEY_PATH: None,
      MESSAGE_TYPES: None,
      USERS: None,
    }
  }
}
impl PRGT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<PRG<'b>> {
    let NAME = self.NAME.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let HD_KEY_PATH = self.HD_KEY_PATH.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MESSAGE_TYPES = self.MESSAGE_TYPES.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let USERS = self.USERS.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    PRG::create(_fbb, &PRGArgs{
      NAME,
      HD_KEY_PATH,
      MESSAGE_TYPES,
      USERS,
    })
  }
}
pub enum USROffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct USR<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for USR<'a> {
  type Inner = USR<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> USR<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_MESSAGE_TYPES: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    USR { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args USRArgs<'args>
  ) -> flatbuffers::WIPOffset<USR<'bldr>> {
    let mut builder = USRBuilder::new(_fbb);
    if let Some(x) = args.MESSAGE_TYPES { builder.add_MESSAGE_TYPES(x); }
    if let Some(x) = args.ID { builder.add_ID(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> USRT {
    let ID = self.ID().map(|x| {
      x.to_string()
    });
    let MESSAGE_TYPES = self.MESSAGE_TYPES().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    USRT {
      ID,
      MESSAGE_TYPES,
    }
  }

  #[inline]
  pub fn ID(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(USR::VT_ID, None)}
  }
  #[inline]
  pub fn MESSAGE_TYPES(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(USR::VT_MESSAGE_TYPES, None)}
  }
}

impl flatbuffers::Verifiable for USR<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ID", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("MESSAGE_TYPES", Self::VT_MESSAGE_TYPES, false)?
     .finish();
    Ok(())
  }
}
pub struct USRArgs<'a> {
    pub ID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MESSAGE_TYPES: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for USRArgs<'a> {
  #[inline]
  fn default() -> Self {
    USRArgs {
      ID: None,
      MESSAGE_TYPES: None,
    }
  }
}

pub struct USRBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> USRBuilder<'a, 'b> {
  #[inline]
  pub fn add_ID(&mut self, ID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(USR::VT_ID, ID);
  }
  #[inline]
  pub fn add_MESSAGE_TYPES(&mut self, MESSAGE_TYPES: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(USR::VT_MESSAGE_TYPES, MESSAGE_TYPES);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> USRBuilder<'a, 'b> {
    let start = _fbb.start_table();
    USRBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<USR<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for USR<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("USR");
      ds.field("ID", &self.ID());
      ds.field("MESSAGE_TYPES", &self.MESSAGE_TYPES());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct USRT {
  pub ID: Option<String>,
  pub MESSAGE_TYPES: Option<Vec<String>>,
}
impl Default for USRT {
  fn default() -> Self {
    Self {
      ID: None,
      MESSAGE_TYPES: None,
    }
  }
}
impl USRT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<USR<'b>> {
    let ID = self.ID.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MESSAGE_TYPES = self.MESSAGE_TYPES.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    USR::create(_fbb, &USRArgs{
      ID,
      MESSAGE_TYPES,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `PRG`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_PRG_unchecked`.
pub fn root_as_PRG(buf: &[u8]) -> Result<PRG, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PRG>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PRG` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_PRG_unchecked`.
pub fn size_prefixed_root_as_PRG(buf: &[u8]) -> Result<PRG, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PRG>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PRG` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_PRG_unchecked`.
pub fn root_as_PRG_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PRG<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PRG<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PRG` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_PRG_unchecked`.
pub fn size_prefixed_root_as_PRG_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PRG<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PRG<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PRG and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PRG`.
pub unsafe fn root_as_PRG_unchecked(buf: &[u8]) -> PRG {
  flatbuffers::root_unchecked::<PRG>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PRG and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PRG`.
pub unsafe fn size_prefixed_root_as_PRG_unchecked(buf: &[u8]) -> PRG {
  flatbuffers::size_prefixed_root_unchecked::<PRG>(buf)
}
pub const PRG_IDENTIFIER: &str = "$PRG";

#[inline]
pub fn PRG_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PRG_IDENTIFIER, false)
}

#[inline]
pub fn PRG_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PRG_IDENTIFIER, true)
}

#[inline]
pub fn finish_PRG_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<PRG<'a>>) {
  fbb.finish(root, Some(PRG_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_PRG_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<PRG<'a>>) {
  fbb.finish_size_prefixed(root, Some(PRG_IDENTIFIER));
}
