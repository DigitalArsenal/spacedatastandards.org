// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum BOVOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Burn Out Vector Message
pub struct BOV<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BOV<'a> {
  type Inner = BOV<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BOV<'a> {
  pub const VT_E_COORDINATE: flatbuffers::VOffsetT = 4;
  pub const VT_F_COORDINATE: flatbuffers::VOffsetT = 6;
  pub const VT_G_COORDINATE: flatbuffers::VOffsetT = 8;
  pub const VT_E_DOT: flatbuffers::VOffsetT = 10;
  pub const VT_F_DOT: flatbuffers::VOffsetT = 12;
  pub const VT_G_DOT: flatbuffers::VOffsetT = 14;
  pub const VT_EPOCH_TIME: flatbuffers::VOffsetT = 16;
  pub const VT_TIME_FROM_LAUNCH: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BOV { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args BOVArgs<'args>
  ) -> flatbuffers::WIPOffset<BOV<'bldr>> {
    let mut builder = BOVBuilder::new(_fbb);
    builder.add_TIME_FROM_LAUNCH(args.TIME_FROM_LAUNCH);
    builder.add_G_DOT(args.G_DOT);
    builder.add_F_DOT(args.F_DOT);
    builder.add_E_DOT(args.E_DOT);
    builder.add_G_COORDINATE(args.G_COORDINATE);
    builder.add_F_COORDINATE(args.F_COORDINATE);
    builder.add_E_COORDINATE(args.E_COORDINATE);
    if let Some(x) = args.EPOCH_TIME { builder.add_EPOCH_TIME(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> BOVT {
    let E_COORDINATE = self.E_COORDINATE();
    let F_COORDINATE = self.F_COORDINATE();
    let G_COORDINATE = self.G_COORDINATE();
    let E_DOT = self.E_DOT();
    let F_DOT = self.F_DOT();
    let G_DOT = self.G_DOT();
    let EPOCH_TIME = self.EPOCH_TIME().map(|x| {
      x.to_string()
    });
    let TIME_FROM_LAUNCH = self.TIME_FROM_LAUNCH();
    BOVT {
      E_COORDINATE,
      F_COORDINATE,
      G_COORDINATE,
      E_DOT,
      F_DOT,
      G_DOT,
      EPOCH_TIME,
      TIME_FROM_LAUNCH,
    }
  }

  #[inline]
  pub fn E_COORDINATE(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(BOV::VT_E_COORDINATE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn F_COORDINATE(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(BOV::VT_F_COORDINATE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn G_COORDINATE(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(BOV::VT_G_COORDINATE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn E_DOT(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(BOV::VT_E_DOT, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn F_DOT(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(BOV::VT_F_DOT, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn G_DOT(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(BOV::VT_G_DOT, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn EPOCH_TIME(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BOV::VT_EPOCH_TIME, None)}
  }
  #[inline]
  pub fn TIME_FROM_LAUNCH(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(BOV::VT_TIME_FROM_LAUNCH, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for BOV<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f64>("E_COORDINATE", Self::VT_E_COORDINATE, false)?
     .visit_field::<f64>("F_COORDINATE", Self::VT_F_COORDINATE, false)?
     .visit_field::<f64>("G_COORDINATE", Self::VT_G_COORDINATE, false)?
     .visit_field::<f64>("E_DOT", Self::VT_E_DOT, false)?
     .visit_field::<f64>("F_DOT", Self::VT_F_DOT, false)?
     .visit_field::<f64>("G_DOT", Self::VT_G_DOT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EPOCH_TIME", Self::VT_EPOCH_TIME, false)?
     .visit_field::<f64>("TIME_FROM_LAUNCH", Self::VT_TIME_FROM_LAUNCH, false)?
     .finish();
    Ok(())
  }
}
pub struct BOVArgs<'a> {
    pub E_COORDINATE: f64,
    pub F_COORDINATE: f64,
    pub G_COORDINATE: f64,
    pub E_DOT: f64,
    pub F_DOT: f64,
    pub G_DOT: f64,
    pub EPOCH_TIME: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TIME_FROM_LAUNCH: f64,
}
impl<'a> Default for BOVArgs<'a> {
  #[inline]
  fn default() -> Self {
    BOVArgs {
      E_COORDINATE: 0.0,
      F_COORDINATE: 0.0,
      G_COORDINATE: 0.0,
      E_DOT: 0.0,
      F_DOT: 0.0,
      G_DOT: 0.0,
      EPOCH_TIME: None,
      TIME_FROM_LAUNCH: 0.0,
    }
  }
}

pub struct BOVBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BOVBuilder<'a, 'b> {
  #[inline]
  pub fn add_E_COORDINATE(&mut self, E_COORDINATE: f64) {
    self.fbb_.push_slot::<f64>(BOV::VT_E_COORDINATE, E_COORDINATE, 0.0);
  }
  #[inline]
  pub fn add_F_COORDINATE(&mut self, F_COORDINATE: f64) {
    self.fbb_.push_slot::<f64>(BOV::VT_F_COORDINATE, F_COORDINATE, 0.0);
  }
  #[inline]
  pub fn add_G_COORDINATE(&mut self, G_COORDINATE: f64) {
    self.fbb_.push_slot::<f64>(BOV::VT_G_COORDINATE, G_COORDINATE, 0.0);
  }
  #[inline]
  pub fn add_E_DOT(&mut self, E_DOT: f64) {
    self.fbb_.push_slot::<f64>(BOV::VT_E_DOT, E_DOT, 0.0);
  }
  #[inline]
  pub fn add_F_DOT(&mut self, F_DOT: f64) {
    self.fbb_.push_slot::<f64>(BOV::VT_F_DOT, F_DOT, 0.0);
  }
  #[inline]
  pub fn add_G_DOT(&mut self, G_DOT: f64) {
    self.fbb_.push_slot::<f64>(BOV::VT_G_DOT, G_DOT, 0.0);
  }
  #[inline]
  pub fn add_EPOCH_TIME(&mut self, EPOCH_TIME: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BOV::VT_EPOCH_TIME, EPOCH_TIME);
  }
  #[inline]
  pub fn add_TIME_FROM_LAUNCH(&mut self, TIME_FROM_LAUNCH: f64) {
    self.fbb_.push_slot::<f64>(BOV::VT_TIME_FROM_LAUNCH, TIME_FROM_LAUNCH, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BOVBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BOVBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BOV<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BOV<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BOV");
      ds.field("E_COORDINATE", &self.E_COORDINATE());
      ds.field("F_COORDINATE", &self.F_COORDINATE());
      ds.field("G_COORDINATE", &self.G_COORDINATE());
      ds.field("E_DOT", &self.E_DOT());
      ds.field("F_DOT", &self.F_DOT());
      ds.field("G_DOT", &self.G_DOT());
      ds.field("EPOCH_TIME", &self.EPOCH_TIME());
      ds.field("TIME_FROM_LAUNCH", &self.TIME_FROM_LAUNCH());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BOVT {
  pub E_COORDINATE: f64,
  pub F_COORDINATE: f64,
  pub G_COORDINATE: f64,
  pub E_DOT: f64,
  pub F_DOT: f64,
  pub G_DOT: f64,
  pub EPOCH_TIME: Option<String>,
  pub TIME_FROM_LAUNCH: f64,
}
impl Default for BOVT {
  fn default() -> Self {
    Self {
      E_COORDINATE: 0.0,
      F_COORDINATE: 0.0,
      G_COORDINATE: 0.0,
      E_DOT: 0.0,
      F_DOT: 0.0,
      G_DOT: 0.0,
      EPOCH_TIME: None,
      TIME_FROM_LAUNCH: 0.0,
    }
  }
}
impl BOVT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<BOV<'b>> {
    let E_COORDINATE = self.E_COORDINATE;
    let F_COORDINATE = self.F_COORDINATE;
    let G_COORDINATE = self.G_COORDINATE;
    let E_DOT = self.E_DOT;
    let F_DOT = self.F_DOT;
    let G_DOT = self.G_DOT;
    let EPOCH_TIME = self.EPOCH_TIME.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TIME_FROM_LAUNCH = self.TIME_FROM_LAUNCH;
    BOV::create(_fbb, &BOVArgs{
      E_COORDINATE,
      F_COORDINATE,
      G_COORDINATE,
      E_DOT,
      F_DOT,
      G_DOT,
      EPOCH_TIME,
      TIME_FROM_LAUNCH,
    })
  }
}
pub enum BOVCOLLECTIONOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BOVCOLLECTION<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BOVCOLLECTION<'a> {
  type Inner = BOVCOLLECTION<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BOVCOLLECTION<'a> {
  pub const VT_RECORDS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BOVCOLLECTION { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args BOVCOLLECTIONArgs<'args>
  ) -> flatbuffers::WIPOffset<BOVCOLLECTION<'bldr>> {
    let mut builder = BOVCOLLECTIONBuilder::new(_fbb);
    if let Some(x) = args.RECORDS { builder.add_RECORDS(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> BOVCOLLECTIONT {
    let RECORDS = self.RECORDS().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    BOVCOLLECTIONT {
      RECORDS,
    }
  }

  #[inline]
  pub fn RECORDS(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BOV<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BOV>>>>(BOVCOLLECTION::VT_RECORDS, None)}
  }
}

impl flatbuffers::Verifiable for BOVCOLLECTION<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<BOV>>>>("RECORDS", Self::VT_RECORDS, false)?
     .finish();
    Ok(())
  }
}
pub struct BOVCOLLECTIONArgs<'a> {
    pub RECORDS: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BOV<'a>>>>>,
}
impl<'a> Default for BOVCOLLECTIONArgs<'a> {
  #[inline]
  fn default() -> Self {
    BOVCOLLECTIONArgs {
      RECORDS: None,
    }
  }
}

pub struct BOVCOLLECTIONBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BOVCOLLECTIONBuilder<'a, 'b> {
  #[inline]
  pub fn add_RECORDS(&mut self, RECORDS: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<BOV<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BOVCOLLECTION::VT_RECORDS, RECORDS);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BOVCOLLECTIONBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BOVCOLLECTIONBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BOVCOLLECTION<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BOVCOLLECTION<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BOVCOLLECTION");
      ds.field("RECORDS", &self.RECORDS());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BOVCOLLECTIONT {
  pub RECORDS: Option<Vec<BOVT>>,
}
impl Default for BOVCOLLECTIONT {
  fn default() -> Self {
    Self {
      RECORDS: None,
    }
  }
}
impl BOVCOLLECTIONT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<BOVCOLLECTION<'b>> {
    let RECORDS = self.RECORDS.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    BOVCOLLECTION::create(_fbb, &BOVCOLLECTIONArgs{
      RECORDS,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `BOVCOLLECTION`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_BOVCOLLECTION_unchecked`.
pub fn root_as_BOVCOLLECTION(buf: &[u8]) -> Result<BOVCOLLECTION, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<BOVCOLLECTION>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `BOVCOLLECTION` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_BOVCOLLECTION_unchecked`.
pub fn size_prefixed_root_as_BOVCOLLECTION(buf: &[u8]) -> Result<BOVCOLLECTION, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<BOVCOLLECTION>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `BOVCOLLECTION` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_BOVCOLLECTION_unchecked`.
pub fn root_as_BOVCOLLECTION_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<BOVCOLLECTION<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<BOVCOLLECTION<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `BOVCOLLECTION` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_BOVCOLLECTION_unchecked`.
pub fn size_prefixed_root_as_BOVCOLLECTION_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<BOVCOLLECTION<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<BOVCOLLECTION<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a BOVCOLLECTION and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `BOVCOLLECTION`.
pub unsafe fn root_as_BOVCOLLECTION_unchecked(buf: &[u8]) -> BOVCOLLECTION {
  flatbuffers::root_unchecked::<BOVCOLLECTION>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed BOVCOLLECTION and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `BOVCOLLECTION`.
pub unsafe fn size_prefixed_root_as_BOVCOLLECTION_unchecked(buf: &[u8]) -> BOVCOLLECTION {
  flatbuffers::size_prefixed_root_unchecked::<BOVCOLLECTION>(buf)
}
pub const BOVCOLLECTION_IDENTIFIER: &str = "$BOV";

#[inline]
pub fn BOVCOLLECTION_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, BOVCOLLECTION_IDENTIFIER, false)
}

#[inline]
pub fn BOVCOLLECTION_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, BOVCOLLECTION_IDENTIFIER, true)
}

#[inline]
pub fn finish_BOVCOLLECTION_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<BOVCOLLECTION<'a>>) {
  fbb.finish(root, Some(BOVCOLLECTION_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_BOVCOLLECTION_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<BOVCOLLECTION<'a>>) {
  fbb.finish_size_prefixed(root, Some(BOVCOLLECTION_IDENTIFIER));
}
