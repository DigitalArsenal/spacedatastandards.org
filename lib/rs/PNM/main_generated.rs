// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum PNMOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Details of Published Message
pub struct PNM<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PNM<'a> {
  type Inner = PNM<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PNM<'a> {
  pub const VT_MULTIFORMAT_ADDRESS: flatbuffers::VOffsetT = 4;
  pub const VT_CID: flatbuffers::VOffsetT = 6;
  pub const VT_FID: flatbuffers::VOffsetT = 8;
  pub const VT_ETH_DIGITAL_SIGNATURE: flatbuffers::VOffsetT = 10;
  pub const VT_BTC_DIGITAL_SIGNATURE: flatbuffers::VOffsetT = 12;
  pub const VT_LTC_DIGITAL_SIGNATURE: flatbuffers::VOffsetT = 14;
  pub const VT_XRP_DIGITAL_SIGNATURE: flatbuffers::VOffsetT = 16;
  pub const VT_ADA_DIGITAL_SIGNATURE: flatbuffers::VOffsetT = 18;
  pub const VT_XLM_DIGITAL_SIGNATURE: flatbuffers::VOffsetT = 20;
  pub const VT_DOGE_DIGITAL_SIGNATURE: flatbuffers::VOffsetT = 22;
  pub const VT_XMR_DIGITAL_SIGNATURE: flatbuffers::VOffsetT = 24;
  pub const VT_DOT_DIGITAL_SIGNATURE: flatbuffers::VOffsetT = 26;
  pub const VT_FIL_DIGITAL_SIGNATURE: flatbuffers::VOffsetT = 28;
  pub const VT_XTZ_DIGITAL_SIGNATURE: flatbuffers::VOffsetT = 30;
  pub const VT_ATOM_DIGITAL_SIGNATURE: flatbuffers::VOffsetT = 32;
  pub const VT_TRX_DIGITAL_SIGNATURE: flatbuffers::VOffsetT = 34;
  pub const VT_BNB_DIGITAL_SIGNATURE: flatbuffers::VOffsetT = 36;
  pub const VT_AVAX_DIGITAL_SIGNATURE: flatbuffers::VOffsetT = 38;
  pub const VT_SOL_DIGITAL_SIGNATURE: flatbuffers::VOffsetT = 40;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PNM { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PNMArgs<'args>
  ) -> flatbuffers::WIPOffset<PNM<'bldr>> {
    let mut builder = PNMBuilder::new(_fbb);
    if let Some(x) = args.SOL_DIGITAL_SIGNATURE { builder.add_SOL_DIGITAL_SIGNATURE(x); }
    if let Some(x) = args.AVAX_DIGITAL_SIGNATURE { builder.add_AVAX_DIGITAL_SIGNATURE(x); }
    if let Some(x) = args.BNB_DIGITAL_SIGNATURE { builder.add_BNB_DIGITAL_SIGNATURE(x); }
    if let Some(x) = args.TRX_DIGITAL_SIGNATURE { builder.add_TRX_DIGITAL_SIGNATURE(x); }
    if let Some(x) = args.ATOM_DIGITAL_SIGNATURE { builder.add_ATOM_DIGITAL_SIGNATURE(x); }
    if let Some(x) = args.XTZ_DIGITAL_SIGNATURE { builder.add_XTZ_DIGITAL_SIGNATURE(x); }
    if let Some(x) = args.FIL_DIGITAL_SIGNATURE { builder.add_FIL_DIGITAL_SIGNATURE(x); }
    if let Some(x) = args.DOT_DIGITAL_SIGNATURE { builder.add_DOT_DIGITAL_SIGNATURE(x); }
    if let Some(x) = args.XMR_DIGITAL_SIGNATURE { builder.add_XMR_DIGITAL_SIGNATURE(x); }
    if let Some(x) = args.DOGE_DIGITAL_SIGNATURE { builder.add_DOGE_DIGITAL_SIGNATURE(x); }
    if let Some(x) = args.XLM_DIGITAL_SIGNATURE { builder.add_XLM_DIGITAL_SIGNATURE(x); }
    if let Some(x) = args.ADA_DIGITAL_SIGNATURE { builder.add_ADA_DIGITAL_SIGNATURE(x); }
    if let Some(x) = args.XRP_DIGITAL_SIGNATURE { builder.add_XRP_DIGITAL_SIGNATURE(x); }
    if let Some(x) = args.LTC_DIGITAL_SIGNATURE { builder.add_LTC_DIGITAL_SIGNATURE(x); }
    if let Some(x) = args.BTC_DIGITAL_SIGNATURE { builder.add_BTC_DIGITAL_SIGNATURE(x); }
    if let Some(x) = args.ETH_DIGITAL_SIGNATURE { builder.add_ETH_DIGITAL_SIGNATURE(x); }
    if let Some(x) = args.FID { builder.add_FID(x); }
    if let Some(x) = args.CID { builder.add_CID(x); }
    if let Some(x) = args.MULTIFORMAT_ADDRESS { builder.add_MULTIFORMAT_ADDRESS(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> PNMT {
    let MULTIFORMAT_ADDRESS = self.MULTIFORMAT_ADDRESS().map(|x| {
      x.to_string()
    });
    let CID = self.CID().map(|x| {
      x.to_string()
    });
    let FID = self.FID().map(|x| {
      x.to_string()
    });
    let ETH_DIGITAL_SIGNATURE = self.ETH_DIGITAL_SIGNATURE().map(|x| {
      x.to_string()
    });
    let BTC_DIGITAL_SIGNATURE = self.BTC_DIGITAL_SIGNATURE().map(|x| {
      x.to_string()
    });
    let LTC_DIGITAL_SIGNATURE = self.LTC_DIGITAL_SIGNATURE().map(|x| {
      x.to_string()
    });
    let XRP_DIGITAL_SIGNATURE = self.XRP_DIGITAL_SIGNATURE().map(|x| {
      x.to_string()
    });
    let ADA_DIGITAL_SIGNATURE = self.ADA_DIGITAL_SIGNATURE().map(|x| {
      x.to_string()
    });
    let XLM_DIGITAL_SIGNATURE = self.XLM_DIGITAL_SIGNATURE().map(|x| {
      x.to_string()
    });
    let DOGE_DIGITAL_SIGNATURE = self.DOGE_DIGITAL_SIGNATURE().map(|x| {
      x.to_string()
    });
    let XMR_DIGITAL_SIGNATURE = self.XMR_DIGITAL_SIGNATURE().map(|x| {
      x.to_string()
    });
    let DOT_DIGITAL_SIGNATURE = self.DOT_DIGITAL_SIGNATURE().map(|x| {
      x.to_string()
    });
    let FIL_DIGITAL_SIGNATURE = self.FIL_DIGITAL_SIGNATURE().map(|x| {
      x.to_string()
    });
    let XTZ_DIGITAL_SIGNATURE = self.XTZ_DIGITAL_SIGNATURE().map(|x| {
      x.to_string()
    });
    let ATOM_DIGITAL_SIGNATURE = self.ATOM_DIGITAL_SIGNATURE().map(|x| {
      x.to_string()
    });
    let TRX_DIGITAL_SIGNATURE = self.TRX_DIGITAL_SIGNATURE().map(|x| {
      x.to_string()
    });
    let BNB_DIGITAL_SIGNATURE = self.BNB_DIGITAL_SIGNATURE().map(|x| {
      x.to_string()
    });
    let AVAX_DIGITAL_SIGNATURE = self.AVAX_DIGITAL_SIGNATURE().map(|x| {
      x.to_string()
    });
    let SOL_DIGITAL_SIGNATURE = self.SOL_DIGITAL_SIGNATURE().map(|x| {
      x.to_string()
    });
    PNMT {
      MULTIFORMAT_ADDRESS,
      CID,
      FID,
      ETH_DIGITAL_SIGNATURE,
      BTC_DIGITAL_SIGNATURE,
      LTC_DIGITAL_SIGNATURE,
      XRP_DIGITAL_SIGNATURE,
      ADA_DIGITAL_SIGNATURE,
      XLM_DIGITAL_SIGNATURE,
      DOGE_DIGITAL_SIGNATURE,
      XMR_DIGITAL_SIGNATURE,
      DOT_DIGITAL_SIGNATURE,
      FIL_DIGITAL_SIGNATURE,
      XTZ_DIGITAL_SIGNATURE,
      ATOM_DIGITAL_SIGNATURE,
      TRX_DIGITAL_SIGNATURE,
      BNB_DIGITAL_SIGNATURE,
      AVAX_DIGITAL_SIGNATURE,
      SOL_DIGITAL_SIGNATURE,
    }
  }

  /// Multiformat Address
  /// https://multiformats.io/multiaddr/
  /// A universal address format for representing multiple network protocols. Examples include:
  /// - /ip4/192.168.1.1/tcp/80 for an IPv4 address with TCP protocol
  /// - /ip6zone/x/ip6/::1 for an IPv6 address with a zone
  /// - /dns4/example.com for a domain name resolvable only to IPv4 addresses
  /// - /ipfs/bafybeiccfclkdtucu6y4yc5cpr6y3yuinr67svmii46v5cfcrkp47ihehy/README.txt -IPFS address w/CID and path to `README.txt`.
  #[inline]
  pub fn MULTIFORMAT_ADDRESS(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_MULTIFORMAT_ADDRESS, None)}
  }
  /// Concatenated Content Identifier (CID)
  /// This field is a unique ID for distributed systems (CID).
  /// The CID provides a unique identifier within distributed systems, as detailed at https://github.com/multiformats/cid. 
  #[inline]
  pub fn CID(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_CID, None)}
  }
  /// File ID
  /// This field is the file ID / Name
  #[inline]
  pub fn FID(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_FID, None)}
  }
  /// Ethereum Digital Signature
  /// Digital signature of the CID using Ethereum's signing mechanism.
  /// Refer to the Ethereum Blockchain integration section for details.
  #[inline]
  pub fn ETH_DIGITAL_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_ETH_DIGITAL_SIGNATURE, None)}
  }
  /// Bitcoin Digital Signature
  /// Digital signature of the CID using Bitcoin's signing mechanism.
  /// Refer to the Bitcoin Blockchain integration section for details.
  #[inline]
  pub fn BTC_DIGITAL_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_BTC_DIGITAL_SIGNATURE, None)}
  }
  /// Litecoin Digital Signature
  /// Digital signature of the CID using Litecoin's signing mechanism.
  /// Refer to the Litecoin Blockchain integration section for details.
  #[inline]
  pub fn LTC_DIGITAL_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_LTC_DIGITAL_SIGNATURE, None)}
  }
  /// Ripple Digital Signature
  /// Digital signature of the CID using Ripple's signing mechanism.
  /// Refer to the Ripple Blockchain integration section for details.
  #[inline]
  pub fn XRP_DIGITAL_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_XRP_DIGITAL_SIGNATURE, None)}
  }
  /// Cardano Digital Signature
  /// Digital signature of the CID using Cardano's signing mechanism.
  /// Refer to the Cardano Blockchain integration section for details.
  #[inline]
  pub fn ADA_DIGITAL_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_ADA_DIGITAL_SIGNATURE, None)}
  }
  /// Stellar Digital Signature
  /// Digital signature of the CID using Stellar's signing mechanism.
  /// Refer to the Stellar Blockchain integration section for details.
  #[inline]
  pub fn XLM_DIGITAL_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_XLM_DIGITAL_SIGNATURE, None)}
  }
  /// Dogecoin Digital Signature
  /// Digital signature of the CID using Dogecoin's signing mechanism.
  /// Refer to the Dogecoin Blockchain integration section for details.
  #[inline]
  pub fn DOGE_DIGITAL_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_DOGE_DIGITAL_SIGNATURE, None)}
  }
  /// Monero Digital Signature
  /// Digital signature of the CID using Monero's signing mechanism.
  /// Refer to the Monero Blockchain integration section for details.
  #[inline]
  pub fn XMR_DIGITAL_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_XMR_DIGITAL_SIGNATURE, None)}
  }
  /// Polkadot Digital Signature
  /// Digital signature of the CID using Polkadot's signing mechanism.
  /// Refer to the Polkadot Blockchain integration section for details.
  #[inline]
  pub fn DOT_DIGITAL_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_DOT_DIGITAL_SIGNATURE, None)}
  }
  /// Filecoin Digital Signature
  /// Digital signature of the CID using Filecoin's signing mechanism.
  /// Refer to the Filecoin Blockchain integration section for details.
  #[inline]
  pub fn FIL_DIGITAL_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_FIL_DIGITAL_SIGNATURE, None)}
  }
  /// Tezos Digital Signature
  /// Digital signature of the CID using Tezos's signing mechanism.
  /// Refer to the Tezos Blockchain integration section for details.
  #[inline]
  pub fn XTZ_DIGITAL_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_XTZ_DIGITAL_SIGNATURE, None)}
  }
  /// Cosmos Digital Signature
  /// Digital signature of the CID using Cosmos's signing mechanism.
  /// Refer to the Cosmos Blockchain integration section for details.
  #[inline]
  pub fn ATOM_DIGITAL_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_ATOM_DIGITAL_SIGNATURE, None)}
  }
  /// Tron Digital Signature
  /// Digital signature of the CID using Tron's signing mechanism.
  /// Refer to the Tron Blockchain integration section for details.
  #[inline]
  pub fn TRX_DIGITAL_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_TRX_DIGITAL_SIGNATURE, None)}
  }
  /// Binance Coin Digital Signature
  /// Digital signature of the CID using Binance Coin's signing mechanism.
  /// Refer to the Binance Coin Blockchain integration section for details.
  #[inline]
  pub fn BNB_DIGITAL_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_BNB_DIGITAL_SIGNATURE, None)}
  }
  /// Avalanche Digital Signature
  /// Digital signature of the CID using Avalanche's signing mechanism.
  /// Refer to the Avalanche Blockchain integration section for details.
  #[inline]
  pub fn AVAX_DIGITAL_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_AVAX_DIGITAL_SIGNATURE, None)}
  }
  /// Solana Digital Signature
  /// Digital signature of the CID using Solana's signing mechanism.
  /// Refer to the Solana Blockchain integration section for details.
  #[inline]
  pub fn SOL_DIGITAL_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_SOL_DIGITAL_SIGNATURE, None)}
  }
}

impl flatbuffers::Verifiable for PNM<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MULTIFORMAT_ADDRESS", Self::VT_MULTIFORMAT_ADDRESS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CID", Self::VT_CID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FID", Self::VT_FID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ETH_DIGITAL_SIGNATURE", Self::VT_ETH_DIGITAL_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BTC_DIGITAL_SIGNATURE", Self::VT_BTC_DIGITAL_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LTC_DIGITAL_SIGNATURE", Self::VT_LTC_DIGITAL_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("XRP_DIGITAL_SIGNATURE", Self::VT_XRP_DIGITAL_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ADA_DIGITAL_SIGNATURE", Self::VT_ADA_DIGITAL_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("XLM_DIGITAL_SIGNATURE", Self::VT_XLM_DIGITAL_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DOGE_DIGITAL_SIGNATURE", Self::VT_DOGE_DIGITAL_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("XMR_DIGITAL_SIGNATURE", Self::VT_XMR_DIGITAL_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DOT_DIGITAL_SIGNATURE", Self::VT_DOT_DIGITAL_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FIL_DIGITAL_SIGNATURE", Self::VT_FIL_DIGITAL_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("XTZ_DIGITAL_SIGNATURE", Self::VT_XTZ_DIGITAL_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ATOM_DIGITAL_SIGNATURE", Self::VT_ATOM_DIGITAL_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TRX_DIGITAL_SIGNATURE", Self::VT_TRX_DIGITAL_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BNB_DIGITAL_SIGNATURE", Self::VT_BNB_DIGITAL_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AVAX_DIGITAL_SIGNATURE", Self::VT_AVAX_DIGITAL_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SOL_DIGITAL_SIGNATURE", Self::VT_SOL_DIGITAL_SIGNATURE, false)?
     .finish();
    Ok(())
  }
}
pub struct PNMArgs<'a> {
    pub MULTIFORMAT_ADDRESS: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ETH_DIGITAL_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BTC_DIGITAL_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LTC_DIGITAL_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub XRP_DIGITAL_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ADA_DIGITAL_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub XLM_DIGITAL_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DOGE_DIGITAL_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub XMR_DIGITAL_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DOT_DIGITAL_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FIL_DIGITAL_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub XTZ_DIGITAL_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ATOM_DIGITAL_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TRX_DIGITAL_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BNB_DIGITAL_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub AVAX_DIGITAL_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SOL_DIGITAL_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for PNMArgs<'a> {
  #[inline]
  fn default() -> Self {
    PNMArgs {
      MULTIFORMAT_ADDRESS: None,
      CID: None,
      FID: None,
      ETH_DIGITAL_SIGNATURE: None,
      BTC_DIGITAL_SIGNATURE: None,
      LTC_DIGITAL_SIGNATURE: None,
      XRP_DIGITAL_SIGNATURE: None,
      ADA_DIGITAL_SIGNATURE: None,
      XLM_DIGITAL_SIGNATURE: None,
      DOGE_DIGITAL_SIGNATURE: None,
      XMR_DIGITAL_SIGNATURE: None,
      DOT_DIGITAL_SIGNATURE: None,
      FIL_DIGITAL_SIGNATURE: None,
      XTZ_DIGITAL_SIGNATURE: None,
      ATOM_DIGITAL_SIGNATURE: None,
      TRX_DIGITAL_SIGNATURE: None,
      BNB_DIGITAL_SIGNATURE: None,
      AVAX_DIGITAL_SIGNATURE: None,
      SOL_DIGITAL_SIGNATURE: None,
    }
  }
}

pub struct PNMBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PNMBuilder<'a, 'b> {
  #[inline]
  pub fn add_MULTIFORMAT_ADDRESS(&mut self, MULTIFORMAT_ADDRESS: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_MULTIFORMAT_ADDRESS, MULTIFORMAT_ADDRESS);
  }
  #[inline]
  pub fn add_CID(&mut self, CID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_CID, CID);
  }
  #[inline]
  pub fn add_FID(&mut self, FID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_FID, FID);
  }
  #[inline]
  pub fn add_ETH_DIGITAL_SIGNATURE(&mut self, ETH_DIGITAL_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_ETH_DIGITAL_SIGNATURE, ETH_DIGITAL_SIGNATURE);
  }
  #[inline]
  pub fn add_BTC_DIGITAL_SIGNATURE(&mut self, BTC_DIGITAL_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_BTC_DIGITAL_SIGNATURE, BTC_DIGITAL_SIGNATURE);
  }
  #[inline]
  pub fn add_LTC_DIGITAL_SIGNATURE(&mut self, LTC_DIGITAL_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_LTC_DIGITAL_SIGNATURE, LTC_DIGITAL_SIGNATURE);
  }
  #[inline]
  pub fn add_XRP_DIGITAL_SIGNATURE(&mut self, XRP_DIGITAL_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_XRP_DIGITAL_SIGNATURE, XRP_DIGITAL_SIGNATURE);
  }
  #[inline]
  pub fn add_ADA_DIGITAL_SIGNATURE(&mut self, ADA_DIGITAL_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_ADA_DIGITAL_SIGNATURE, ADA_DIGITAL_SIGNATURE);
  }
  #[inline]
  pub fn add_XLM_DIGITAL_SIGNATURE(&mut self, XLM_DIGITAL_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_XLM_DIGITAL_SIGNATURE, XLM_DIGITAL_SIGNATURE);
  }
  #[inline]
  pub fn add_DOGE_DIGITAL_SIGNATURE(&mut self, DOGE_DIGITAL_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_DOGE_DIGITAL_SIGNATURE, DOGE_DIGITAL_SIGNATURE);
  }
  #[inline]
  pub fn add_XMR_DIGITAL_SIGNATURE(&mut self, XMR_DIGITAL_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_XMR_DIGITAL_SIGNATURE, XMR_DIGITAL_SIGNATURE);
  }
  #[inline]
  pub fn add_DOT_DIGITAL_SIGNATURE(&mut self, DOT_DIGITAL_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_DOT_DIGITAL_SIGNATURE, DOT_DIGITAL_SIGNATURE);
  }
  #[inline]
  pub fn add_FIL_DIGITAL_SIGNATURE(&mut self, FIL_DIGITAL_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_FIL_DIGITAL_SIGNATURE, FIL_DIGITAL_SIGNATURE);
  }
  #[inline]
  pub fn add_XTZ_DIGITAL_SIGNATURE(&mut self, XTZ_DIGITAL_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_XTZ_DIGITAL_SIGNATURE, XTZ_DIGITAL_SIGNATURE);
  }
  #[inline]
  pub fn add_ATOM_DIGITAL_SIGNATURE(&mut self, ATOM_DIGITAL_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_ATOM_DIGITAL_SIGNATURE, ATOM_DIGITAL_SIGNATURE);
  }
  #[inline]
  pub fn add_TRX_DIGITAL_SIGNATURE(&mut self, TRX_DIGITAL_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_TRX_DIGITAL_SIGNATURE, TRX_DIGITAL_SIGNATURE);
  }
  #[inline]
  pub fn add_BNB_DIGITAL_SIGNATURE(&mut self, BNB_DIGITAL_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_BNB_DIGITAL_SIGNATURE, BNB_DIGITAL_SIGNATURE);
  }
  #[inline]
  pub fn add_AVAX_DIGITAL_SIGNATURE(&mut self, AVAX_DIGITAL_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_AVAX_DIGITAL_SIGNATURE, AVAX_DIGITAL_SIGNATURE);
  }
  #[inline]
  pub fn add_SOL_DIGITAL_SIGNATURE(&mut self, SOL_DIGITAL_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_SOL_DIGITAL_SIGNATURE, SOL_DIGITAL_SIGNATURE);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PNMBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PNMBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PNM<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PNM<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PNM");
      ds.field("MULTIFORMAT_ADDRESS", &self.MULTIFORMAT_ADDRESS());
      ds.field("CID", &self.CID());
      ds.field("FID", &self.FID());
      ds.field("ETH_DIGITAL_SIGNATURE", &self.ETH_DIGITAL_SIGNATURE());
      ds.field("BTC_DIGITAL_SIGNATURE", &self.BTC_DIGITAL_SIGNATURE());
      ds.field("LTC_DIGITAL_SIGNATURE", &self.LTC_DIGITAL_SIGNATURE());
      ds.field("XRP_DIGITAL_SIGNATURE", &self.XRP_DIGITAL_SIGNATURE());
      ds.field("ADA_DIGITAL_SIGNATURE", &self.ADA_DIGITAL_SIGNATURE());
      ds.field("XLM_DIGITAL_SIGNATURE", &self.XLM_DIGITAL_SIGNATURE());
      ds.field("DOGE_DIGITAL_SIGNATURE", &self.DOGE_DIGITAL_SIGNATURE());
      ds.field("XMR_DIGITAL_SIGNATURE", &self.XMR_DIGITAL_SIGNATURE());
      ds.field("DOT_DIGITAL_SIGNATURE", &self.DOT_DIGITAL_SIGNATURE());
      ds.field("FIL_DIGITAL_SIGNATURE", &self.FIL_DIGITAL_SIGNATURE());
      ds.field("XTZ_DIGITAL_SIGNATURE", &self.XTZ_DIGITAL_SIGNATURE());
      ds.field("ATOM_DIGITAL_SIGNATURE", &self.ATOM_DIGITAL_SIGNATURE());
      ds.field("TRX_DIGITAL_SIGNATURE", &self.TRX_DIGITAL_SIGNATURE());
      ds.field("BNB_DIGITAL_SIGNATURE", &self.BNB_DIGITAL_SIGNATURE());
      ds.field("AVAX_DIGITAL_SIGNATURE", &self.AVAX_DIGITAL_SIGNATURE());
      ds.field("SOL_DIGITAL_SIGNATURE", &self.SOL_DIGITAL_SIGNATURE());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PNMT {
  pub MULTIFORMAT_ADDRESS: Option<String>,
  pub CID: Option<String>,
  pub FID: Option<String>,
  pub ETH_DIGITAL_SIGNATURE: Option<String>,
  pub BTC_DIGITAL_SIGNATURE: Option<String>,
  pub LTC_DIGITAL_SIGNATURE: Option<String>,
  pub XRP_DIGITAL_SIGNATURE: Option<String>,
  pub ADA_DIGITAL_SIGNATURE: Option<String>,
  pub XLM_DIGITAL_SIGNATURE: Option<String>,
  pub DOGE_DIGITAL_SIGNATURE: Option<String>,
  pub XMR_DIGITAL_SIGNATURE: Option<String>,
  pub DOT_DIGITAL_SIGNATURE: Option<String>,
  pub FIL_DIGITAL_SIGNATURE: Option<String>,
  pub XTZ_DIGITAL_SIGNATURE: Option<String>,
  pub ATOM_DIGITAL_SIGNATURE: Option<String>,
  pub TRX_DIGITAL_SIGNATURE: Option<String>,
  pub BNB_DIGITAL_SIGNATURE: Option<String>,
  pub AVAX_DIGITAL_SIGNATURE: Option<String>,
  pub SOL_DIGITAL_SIGNATURE: Option<String>,
}
impl Default for PNMT {
  fn default() -> Self {
    Self {
      MULTIFORMAT_ADDRESS: None,
      CID: None,
      FID: None,
      ETH_DIGITAL_SIGNATURE: None,
      BTC_DIGITAL_SIGNATURE: None,
      LTC_DIGITAL_SIGNATURE: None,
      XRP_DIGITAL_SIGNATURE: None,
      ADA_DIGITAL_SIGNATURE: None,
      XLM_DIGITAL_SIGNATURE: None,
      DOGE_DIGITAL_SIGNATURE: None,
      XMR_DIGITAL_SIGNATURE: None,
      DOT_DIGITAL_SIGNATURE: None,
      FIL_DIGITAL_SIGNATURE: None,
      XTZ_DIGITAL_SIGNATURE: None,
      ATOM_DIGITAL_SIGNATURE: None,
      TRX_DIGITAL_SIGNATURE: None,
      BNB_DIGITAL_SIGNATURE: None,
      AVAX_DIGITAL_SIGNATURE: None,
      SOL_DIGITAL_SIGNATURE: None,
    }
  }
}
impl PNMT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<PNM<'b>> {
    let MULTIFORMAT_ADDRESS = self.MULTIFORMAT_ADDRESS.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CID = self.CID.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FID = self.FID.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ETH_DIGITAL_SIGNATURE = self.ETH_DIGITAL_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BTC_DIGITAL_SIGNATURE = self.BTC_DIGITAL_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LTC_DIGITAL_SIGNATURE = self.LTC_DIGITAL_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let XRP_DIGITAL_SIGNATURE = self.XRP_DIGITAL_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ADA_DIGITAL_SIGNATURE = self.ADA_DIGITAL_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let XLM_DIGITAL_SIGNATURE = self.XLM_DIGITAL_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DOGE_DIGITAL_SIGNATURE = self.DOGE_DIGITAL_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let XMR_DIGITAL_SIGNATURE = self.XMR_DIGITAL_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DOT_DIGITAL_SIGNATURE = self.DOT_DIGITAL_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FIL_DIGITAL_SIGNATURE = self.FIL_DIGITAL_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let XTZ_DIGITAL_SIGNATURE = self.XTZ_DIGITAL_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ATOM_DIGITAL_SIGNATURE = self.ATOM_DIGITAL_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TRX_DIGITAL_SIGNATURE = self.TRX_DIGITAL_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BNB_DIGITAL_SIGNATURE = self.BNB_DIGITAL_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let AVAX_DIGITAL_SIGNATURE = self.AVAX_DIGITAL_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SOL_DIGITAL_SIGNATURE = self.SOL_DIGITAL_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    PNM::create(_fbb, &PNMArgs{
      MULTIFORMAT_ADDRESS,
      CID,
      FID,
      ETH_DIGITAL_SIGNATURE,
      BTC_DIGITAL_SIGNATURE,
      LTC_DIGITAL_SIGNATURE,
      XRP_DIGITAL_SIGNATURE,
      ADA_DIGITAL_SIGNATURE,
      XLM_DIGITAL_SIGNATURE,
      DOGE_DIGITAL_SIGNATURE,
      XMR_DIGITAL_SIGNATURE,
      DOT_DIGITAL_SIGNATURE,
      FIL_DIGITAL_SIGNATURE,
      XTZ_DIGITAL_SIGNATURE,
      ATOM_DIGITAL_SIGNATURE,
      TRX_DIGITAL_SIGNATURE,
      BNB_DIGITAL_SIGNATURE,
      AVAX_DIGITAL_SIGNATURE,
      SOL_DIGITAL_SIGNATURE,
    })
  }
}
pub enum PNMCOLLECTIONOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Collection of Publish Notification Messages
/// This table groups multiple PNM records for batch processing and management.
pub struct PNMCOLLECTION<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PNMCOLLECTION<'a> {
  type Inner = PNMCOLLECTION<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PNMCOLLECTION<'a> {
  pub const VT_RECORDS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PNMCOLLECTION { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PNMCOLLECTIONArgs<'args>
  ) -> flatbuffers::WIPOffset<PNMCOLLECTION<'bldr>> {
    let mut builder = PNMCOLLECTIONBuilder::new(_fbb);
    if let Some(x) = args.RECORDS { builder.add_RECORDS(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> PNMCOLLECTIONT {
    let RECORDS = self.RECORDS().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    PNMCOLLECTIONT {
      RECORDS,
    }
  }

  #[inline]
  pub fn RECORDS(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PNM<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PNM>>>>(PNMCOLLECTION::VT_RECORDS, None)}
  }
}

impl flatbuffers::Verifiable for PNMCOLLECTION<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PNM>>>>("RECORDS", Self::VT_RECORDS, false)?
     .finish();
    Ok(())
  }
}
pub struct PNMCOLLECTIONArgs<'a> {
    pub RECORDS: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PNM<'a>>>>>,
}
impl<'a> Default for PNMCOLLECTIONArgs<'a> {
  #[inline]
  fn default() -> Self {
    PNMCOLLECTIONArgs {
      RECORDS: None,
    }
  }
}

pub struct PNMCOLLECTIONBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PNMCOLLECTIONBuilder<'a, 'b> {
  #[inline]
  pub fn add_RECORDS(&mut self, RECORDS: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PNM<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNMCOLLECTION::VT_RECORDS, RECORDS);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PNMCOLLECTIONBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PNMCOLLECTIONBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PNMCOLLECTION<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PNMCOLLECTION<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PNMCOLLECTION");
      ds.field("RECORDS", &self.RECORDS());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PNMCOLLECTIONT {
  pub RECORDS: Option<Vec<PNMT>>,
}
impl Default for PNMCOLLECTIONT {
  fn default() -> Self {
    Self {
      RECORDS: None,
    }
  }
}
impl PNMCOLLECTIONT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<PNMCOLLECTION<'b>> {
    let RECORDS = self.RECORDS.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    PNMCOLLECTION::create(_fbb, &PNMCOLLECTIONArgs{
      RECORDS,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `PNMCOLLECTION`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_PNMCOLLECTION_unchecked`.
pub fn root_as_PNMCOLLECTION(buf: &[u8]) -> Result<PNMCOLLECTION, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PNMCOLLECTION>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PNMCOLLECTION` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_PNMCOLLECTION_unchecked`.
pub fn size_prefixed_root_as_PNMCOLLECTION(buf: &[u8]) -> Result<PNMCOLLECTION, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PNMCOLLECTION>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PNMCOLLECTION` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_PNMCOLLECTION_unchecked`.
pub fn root_as_PNMCOLLECTION_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PNMCOLLECTION<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PNMCOLLECTION<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PNMCOLLECTION` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_PNMCOLLECTION_unchecked`.
pub fn size_prefixed_root_as_PNMCOLLECTION_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PNMCOLLECTION<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PNMCOLLECTION<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PNMCOLLECTION and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PNMCOLLECTION`.
pub unsafe fn root_as_PNMCOLLECTION_unchecked(buf: &[u8]) -> PNMCOLLECTION {
  flatbuffers::root_unchecked::<PNMCOLLECTION>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PNMCOLLECTION and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PNMCOLLECTION`.
pub unsafe fn size_prefixed_root_as_PNMCOLLECTION_unchecked(buf: &[u8]) -> PNMCOLLECTION {
  flatbuffers::size_prefixed_root_unchecked::<PNMCOLLECTION>(buf)
}
pub const PNMCOLLECTION_IDENTIFIER: &str = "$PNM";

#[inline]
pub fn PNMCOLLECTION_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PNMCOLLECTION_IDENTIFIER, false)
}

#[inline]
pub fn PNMCOLLECTION_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PNMCOLLECTION_IDENTIFIER, true)
}

#[inline]
pub fn finish_PNMCOLLECTION_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<PNMCOLLECTION<'a>>) {
  fbb.finish(root, Some(PNMCOLLECTION_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_PNMCOLLECTION_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<PNMCOLLECTION<'a>>) {
  fbb.finish_size_prefixed(root, Some(PNMCOLLECTION_IDENTIFIER));
}
