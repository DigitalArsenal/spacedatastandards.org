// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum PNMOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Publish Notification Message
pub struct PNM<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PNM<'a> {
  type Inner = PNM<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PNM<'a> {
  pub const VT_IPFS_CID: flatbuffers::VOffsetT = 4;
  pub const VT_KEY_ADDRESS: flatbuffers::VOffsetT = 6;
  pub const VT_FILE_IDENTIFIER: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PNM { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PNMArgs<'args>
  ) -> flatbuffers::WIPOffset<PNM<'bldr>> {
    let mut builder = PNMBuilder::new(_fbb);
    if let Some(x) = args.FILE_IDENTIFIER { builder.add_FILE_IDENTIFIER(x); }
    if let Some(x) = args.KEY_ADDRESS { builder.add_KEY_ADDRESS(x); }
    if let Some(x) = args.IPFS_CID { builder.add_IPFS_CID(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> PNMT {
    let IPFS_CID = self.IPFS_CID().map(|x| {
      x.to_string()
    });
    let KEY_ADDRESS = self.KEY_ADDRESS().map(|x| {
      x.to_string()
    });
    let FILE_IDENTIFIER = self.FILE_IDENTIFIER().map(|x| {
      x.to_string()
    });
    PNMT {
      IPFS_CID,
      KEY_ADDRESS,
      FILE_IDENTIFIER,
    }
  }

  /// IPFS Content Identifier (CID)
  /// The hash of a file stored on the InterPlanetary File System (IPFS).
  /// Refer to the section on IPFS integration for details.
  #[inline]
  pub fn IPFS_CID(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_IPFS_CID, None)}
  }
  /// Unique identifier generated from the data provider's public key
  #[inline]
  pub fn KEY_ADDRESS(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_KEY_ADDRESS, None)}
  }
  /// SpaceDataStandards 4 Character File Identifier
  #[inline]
  pub fn FILE_IDENTIFIER(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_FILE_IDENTIFIER, None)}
  }
}

impl flatbuffers::Verifiable for PNM<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IPFS_CID", Self::VT_IPFS_CID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("KEY_ADDRESS", Self::VT_KEY_ADDRESS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FILE_IDENTIFIER", Self::VT_FILE_IDENTIFIER, false)?
     .finish();
    Ok(())
  }
}
pub struct PNMArgs<'a> {
    pub IPFS_CID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub KEY_ADDRESS: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FILE_IDENTIFIER: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for PNMArgs<'a> {
  #[inline]
  fn default() -> Self {
    PNMArgs {
      IPFS_CID: None,
      KEY_ADDRESS: None,
      FILE_IDENTIFIER: None,
    }
  }
}

pub struct PNMBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PNMBuilder<'a, 'b> {
  #[inline]
  pub fn add_IPFS_CID(&mut self, IPFS_CID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_IPFS_CID, IPFS_CID);
  }
  #[inline]
  pub fn add_KEY_ADDRESS(&mut self, KEY_ADDRESS: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_KEY_ADDRESS, KEY_ADDRESS);
  }
  #[inline]
  pub fn add_FILE_IDENTIFIER(&mut self, FILE_IDENTIFIER: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_FILE_IDENTIFIER, FILE_IDENTIFIER);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PNMBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PNMBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PNM<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PNM<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PNM");
      ds.field("IPFS_CID", &self.IPFS_CID());
      ds.field("KEY_ADDRESS", &self.KEY_ADDRESS());
      ds.field("FILE_IDENTIFIER", &self.FILE_IDENTIFIER());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PNMT {
  pub IPFS_CID: Option<String>,
  pub KEY_ADDRESS: Option<String>,
  pub FILE_IDENTIFIER: Option<String>,
}
impl Default for PNMT {
  fn default() -> Self {
    Self {
      IPFS_CID: None,
      KEY_ADDRESS: None,
      FILE_IDENTIFIER: None,
    }
  }
}
impl PNMT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<PNM<'b>> {
    let IPFS_CID = self.IPFS_CID.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let KEY_ADDRESS = self.KEY_ADDRESS.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FILE_IDENTIFIER = self.FILE_IDENTIFIER.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    PNM::create(_fbb, &PNMArgs{
      IPFS_CID,
      KEY_ADDRESS,
      FILE_IDENTIFIER,
    })
  }
}
pub enum PNMCOLLECTIONOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Collection of Publish Notification Messages
/// This table groups multiple PNM records for batch processing and management.
pub struct PNMCOLLECTION<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PNMCOLLECTION<'a> {
  type Inner = PNMCOLLECTION<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PNMCOLLECTION<'a> {
  pub const VT_RECORDS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PNMCOLLECTION { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PNMCOLLECTIONArgs<'args>
  ) -> flatbuffers::WIPOffset<PNMCOLLECTION<'bldr>> {
    let mut builder = PNMCOLLECTIONBuilder::new(_fbb);
    if let Some(x) = args.RECORDS { builder.add_RECORDS(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> PNMCOLLECTIONT {
    let RECORDS = self.RECORDS().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    PNMCOLLECTIONT {
      RECORDS,
    }
  }

  #[inline]
  pub fn RECORDS(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PNM<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PNM>>>>(PNMCOLLECTION::VT_RECORDS, None)}
  }
}

impl flatbuffers::Verifiable for PNMCOLLECTION<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PNM>>>>("RECORDS", Self::VT_RECORDS, false)?
     .finish();
    Ok(())
  }
}
pub struct PNMCOLLECTIONArgs<'a> {
    pub RECORDS: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PNM<'a>>>>>,
}
impl<'a> Default for PNMCOLLECTIONArgs<'a> {
  #[inline]
  fn default() -> Self {
    PNMCOLLECTIONArgs {
      RECORDS: None,
    }
  }
}

pub struct PNMCOLLECTIONBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PNMCOLLECTIONBuilder<'a, 'b> {
  #[inline]
  pub fn add_RECORDS(&mut self, RECORDS: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PNM<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNMCOLLECTION::VT_RECORDS, RECORDS);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PNMCOLLECTIONBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PNMCOLLECTIONBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PNMCOLLECTION<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PNMCOLLECTION<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PNMCOLLECTION");
      ds.field("RECORDS", &self.RECORDS());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PNMCOLLECTIONT {
  pub RECORDS: Option<Vec<PNMT>>,
}
impl Default for PNMCOLLECTIONT {
  fn default() -> Self {
    Self {
      RECORDS: None,
    }
  }
}
impl PNMCOLLECTIONT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<PNMCOLLECTION<'b>> {
    let RECORDS = self.RECORDS.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    PNMCOLLECTION::create(_fbb, &PNMCOLLECTIONArgs{
      RECORDS,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `PNM`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_PNM_unchecked`.
pub fn root_as_PNM(buf: &[u8]) -> Result<PNM, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PNM>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PNM` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_PNM_unchecked`.
pub fn size_prefixed_root_as_PNM(buf: &[u8]) -> Result<PNM, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PNM>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PNM` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_PNM_unchecked`.
pub fn root_as_PNM_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PNM<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PNM<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PNM` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_PNM_unchecked`.
pub fn size_prefixed_root_as_PNM_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PNM<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PNM<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PNM and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PNM`.
pub unsafe fn root_as_PNM_unchecked(buf: &[u8]) -> PNM {
  flatbuffers::root_unchecked::<PNM>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PNM and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PNM`.
pub unsafe fn size_prefixed_root_as_PNM_unchecked(buf: &[u8]) -> PNM {
  flatbuffers::size_prefixed_root_unchecked::<PNM>(buf)
}
pub const PNM_IDENTIFIER: &str = "$PNM";

#[inline]
pub fn PNM_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PNM_IDENTIFIER, false)
}

#[inline]
pub fn PNM_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PNM_IDENTIFIER, true)
}

#[inline]
pub fn finish_PNM_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<PNM<'a>>) {
  fbb.finish(root, Some(PNM_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_PNM_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<PNM<'a>>) {
  fbb.finish_size_prefixed(root, Some(PNM_IDENTIFIER));
}
