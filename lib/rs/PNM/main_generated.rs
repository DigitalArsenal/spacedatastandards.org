// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum PNMOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Details of Published Message
pub struct PNM<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PNM<'a> {
  type Inner = PNM<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PNM<'a> {
  pub const VT_MULTIFORMAT_ADDRESS: flatbuffers::VOffsetT = 4;
  pub const VT_PUBLISH_TIMESTAMP: flatbuffers::VOffsetT = 6;
  pub const VT_CID: flatbuffers::VOffsetT = 8;
  pub const VT_FID: flatbuffers::VOffsetT = 10;
  pub const VT_SIGNATURE: flatbuffers::VOffsetT = 12;
  pub const VT_TIMESTAMP_SIGNATURE: flatbuffers::VOffsetT = 14;
  pub const VT_SIGNATURE_TYPE: flatbuffers::VOffsetT = 16;
  pub const VT_TIMESTAMP_SIGNATURE_TYPE: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PNM { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PNMArgs<'args>
  ) -> flatbuffers::WIPOffset<PNM<'bldr>> {
    let mut builder = PNMBuilder::new(_fbb);
    if let Some(x) = args.TIMESTAMP_SIGNATURE_TYPE { builder.add_TIMESTAMP_SIGNATURE_TYPE(x); }
    if let Some(x) = args.SIGNATURE_TYPE { builder.add_SIGNATURE_TYPE(x); }
    if let Some(x) = args.TIMESTAMP_SIGNATURE { builder.add_TIMESTAMP_SIGNATURE(x); }
    if let Some(x) = args.SIGNATURE { builder.add_SIGNATURE(x); }
    if let Some(x) = args.FID { builder.add_FID(x); }
    if let Some(x) = args.CID { builder.add_CID(x); }
    if let Some(x) = args.PUBLISH_TIMESTAMP { builder.add_PUBLISH_TIMESTAMP(x); }
    if let Some(x) = args.MULTIFORMAT_ADDRESS { builder.add_MULTIFORMAT_ADDRESS(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> PNMT {
    let MULTIFORMAT_ADDRESS = self.MULTIFORMAT_ADDRESS().map(|x| {
      x.to_string()
    });
    let PUBLISH_TIMESTAMP = self.PUBLISH_TIMESTAMP().map(|x| {
      x.to_string()
    });
    let CID = self.CID().map(|x| {
      x.to_string()
    });
    let FID = self.FID().map(|x| {
      x.to_string()
    });
    let SIGNATURE = self.SIGNATURE().map(|x| {
      x.to_string()
    });
    let TIMESTAMP_SIGNATURE = self.TIMESTAMP_SIGNATURE().map(|x| {
      x.to_string()
    });
    let SIGNATURE_TYPE = self.SIGNATURE_TYPE().map(|x| {
      x.to_string()
    });
    let TIMESTAMP_SIGNATURE_TYPE = self.TIMESTAMP_SIGNATURE_TYPE().map(|x| {
      x.to_string()
    });
    PNMT {
      MULTIFORMAT_ADDRESS,
      PUBLISH_TIMESTAMP,
      CID,
      FID,
      SIGNATURE,
      TIMESTAMP_SIGNATURE,
      SIGNATURE_TYPE,
      TIMESTAMP_SIGNATURE_TYPE,
    }
  }

  /// Multiformat Address
  /// https://multiformats.io/multiaddr/
  /// A universal address format for representing multiple network protocols. Examples include:
  /// - /ip4/192.168.1.1/tcp/80 for an IPv4 address with TCP protocol
  /// - /ip6zone/x/ip6/::1 for an IPv6 address with a zone
  /// - /dns4/example.com for a domain name resolvable only to IPv4 addresses
  /// - /ipfs/bafybeiccfclkdtucu6y4yc5cpr6y3yuinr67svmii46v5cfcrkp47ihehy/README.txt -IPFS address w/CID and path to `README.txt`.
  #[inline]
  pub fn MULTIFORMAT_ADDRESS(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_MULTIFORMAT_ADDRESS, None)}
  }
  /// Publish Time OF THE Publish Notification Message
  #[inline]
  pub fn PUBLISH_TIMESTAMP(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_PUBLISH_TIMESTAMP, None)}
  }
  /// Concatenated Content Identifier (CID)
  /// This field is a unique ID for distributed systems (CID).
  /// The CID provides a unique identifier within distributed systems, as detailed at https://github.com/multiformats/cid. 
  #[inline]
  pub fn CID(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_CID, None)}
  }
  /// File ID
  /// This field is the file ID / Name
  #[inline]
  pub fn FID(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_FID, None)}
  }
  /// Digital Signature of the CID
  /// This is the digital signature of the CID, signed using the specified cryptographic method.
  #[inline]
  pub fn SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_SIGNATURE, None)}
  }
  /// Timestamp Signature
  /// Digital signature of the publish timestamp, using the specified cryptographic method for timestamp verification.
  #[inline]
  pub fn TIMESTAMP_SIGNATURE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_TIMESTAMP_SIGNATURE, None)}
  }
  /// Type of Cryptographic Signature Used
  /// Specifies the type of cryptographic signature used for the SIGNATURE field, indicating the specific blockchain technology, such as Ethereum or BTC.
  #[inline]
  pub fn SIGNATURE_TYPE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_SIGNATURE_TYPE, None)}
  }
  /// Type of Cryptographic Signature Used for Timestamp
  /// Specifies the type of cryptographic signature used for the TIMESTAMP_SIGNATURE field, indicating the specific blockchain technology, such as Ethereum or BTC.
  #[inline]
  pub fn TIMESTAMP_SIGNATURE_TYPE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PNM::VT_TIMESTAMP_SIGNATURE_TYPE, None)}
  }
}

impl flatbuffers::Verifiable for PNM<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MULTIFORMAT_ADDRESS", Self::VT_MULTIFORMAT_ADDRESS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PUBLISH_TIMESTAMP", Self::VT_PUBLISH_TIMESTAMP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CID", Self::VT_CID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FID", Self::VT_FID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SIGNATURE", Self::VT_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TIMESTAMP_SIGNATURE", Self::VT_TIMESTAMP_SIGNATURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SIGNATURE_TYPE", Self::VT_SIGNATURE_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TIMESTAMP_SIGNATURE_TYPE", Self::VT_TIMESTAMP_SIGNATURE_TYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct PNMArgs<'a> {
    pub MULTIFORMAT_ADDRESS: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PUBLISH_TIMESTAMP: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TIMESTAMP_SIGNATURE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SIGNATURE_TYPE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TIMESTAMP_SIGNATURE_TYPE: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for PNMArgs<'a> {
  #[inline]
  fn default() -> Self {
    PNMArgs {
      MULTIFORMAT_ADDRESS: None,
      PUBLISH_TIMESTAMP: None,
      CID: None,
      FID: None,
      SIGNATURE: None,
      TIMESTAMP_SIGNATURE: None,
      SIGNATURE_TYPE: None,
      TIMESTAMP_SIGNATURE_TYPE: None,
    }
  }
}

pub struct PNMBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PNMBuilder<'a, 'b> {
  #[inline]
  pub fn add_MULTIFORMAT_ADDRESS(&mut self, MULTIFORMAT_ADDRESS: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_MULTIFORMAT_ADDRESS, MULTIFORMAT_ADDRESS);
  }
  #[inline]
  pub fn add_PUBLISH_TIMESTAMP(&mut self, PUBLISH_TIMESTAMP: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_PUBLISH_TIMESTAMP, PUBLISH_TIMESTAMP);
  }
  #[inline]
  pub fn add_CID(&mut self, CID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_CID, CID);
  }
  #[inline]
  pub fn add_FID(&mut self, FID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_FID, FID);
  }
  #[inline]
  pub fn add_SIGNATURE(&mut self, SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_SIGNATURE, SIGNATURE);
  }
  #[inline]
  pub fn add_TIMESTAMP_SIGNATURE(&mut self, TIMESTAMP_SIGNATURE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_TIMESTAMP_SIGNATURE, TIMESTAMP_SIGNATURE);
  }
  #[inline]
  pub fn add_SIGNATURE_TYPE(&mut self, SIGNATURE_TYPE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_SIGNATURE_TYPE, SIGNATURE_TYPE);
  }
  #[inline]
  pub fn add_TIMESTAMP_SIGNATURE_TYPE(&mut self, TIMESTAMP_SIGNATURE_TYPE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PNM::VT_TIMESTAMP_SIGNATURE_TYPE, TIMESTAMP_SIGNATURE_TYPE);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PNMBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PNMBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PNM<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PNM<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PNM");
      ds.field("MULTIFORMAT_ADDRESS", &self.MULTIFORMAT_ADDRESS());
      ds.field("PUBLISH_TIMESTAMP", &self.PUBLISH_TIMESTAMP());
      ds.field("CID", &self.CID());
      ds.field("FID", &self.FID());
      ds.field("SIGNATURE", &self.SIGNATURE());
      ds.field("TIMESTAMP_SIGNATURE", &self.TIMESTAMP_SIGNATURE());
      ds.field("SIGNATURE_TYPE", &self.SIGNATURE_TYPE());
      ds.field("TIMESTAMP_SIGNATURE_TYPE", &self.TIMESTAMP_SIGNATURE_TYPE());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PNMT {
  pub MULTIFORMAT_ADDRESS: Option<String>,
  pub PUBLISH_TIMESTAMP: Option<String>,
  pub CID: Option<String>,
  pub FID: Option<String>,
  pub SIGNATURE: Option<String>,
  pub TIMESTAMP_SIGNATURE: Option<String>,
  pub SIGNATURE_TYPE: Option<String>,
  pub TIMESTAMP_SIGNATURE_TYPE: Option<String>,
}
impl Default for PNMT {
  fn default() -> Self {
    Self {
      MULTIFORMAT_ADDRESS: None,
      PUBLISH_TIMESTAMP: None,
      CID: None,
      FID: None,
      SIGNATURE: None,
      TIMESTAMP_SIGNATURE: None,
      SIGNATURE_TYPE: None,
      TIMESTAMP_SIGNATURE_TYPE: None,
    }
  }
}
impl PNMT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<PNM<'b>> {
    let MULTIFORMAT_ADDRESS = self.MULTIFORMAT_ADDRESS.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PUBLISH_TIMESTAMP = self.PUBLISH_TIMESTAMP.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CID = self.CID.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FID = self.FID.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SIGNATURE = self.SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TIMESTAMP_SIGNATURE = self.TIMESTAMP_SIGNATURE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SIGNATURE_TYPE = self.SIGNATURE_TYPE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TIMESTAMP_SIGNATURE_TYPE = self.TIMESTAMP_SIGNATURE_TYPE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    PNM::create(_fbb, &PNMArgs{
      MULTIFORMAT_ADDRESS,
      PUBLISH_TIMESTAMP,
      CID,
      FID,
      SIGNATURE,
      TIMESTAMP_SIGNATURE,
      SIGNATURE_TYPE,
      TIMESTAMP_SIGNATURE_TYPE,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `PNM`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_PNM_unchecked`.
pub fn root_as_PNM(buf: &[u8]) -> Result<PNM, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PNM>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PNM` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_PNM_unchecked`.
pub fn size_prefixed_root_as_PNM(buf: &[u8]) -> Result<PNM, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PNM>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PNM` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_PNM_unchecked`.
pub fn root_as_PNM_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PNM<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PNM<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PNM` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_PNM_unchecked`.
pub fn size_prefixed_root_as_PNM_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PNM<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PNM<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PNM and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PNM`.
pub unsafe fn root_as_PNM_unchecked(buf: &[u8]) -> PNM {
  flatbuffers::root_unchecked::<PNM>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PNM and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PNM`.
pub unsafe fn size_prefixed_root_as_PNM_unchecked(buf: &[u8]) -> PNM {
  flatbuffers::size_prefixed_root_unchecked::<PNM>(buf)
}
pub const PNM_IDENTIFIER: &str = "$PNM";

#[inline]
pub fn PNM_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PNM_IDENTIFIER, false)
}

#[inline]
pub fn PNM_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PNM_IDENTIFIER, true)
}

#[inline]
pub fn finish_PNM_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<PNM<'a>>) {
  fbb.finish(root, Some(PNM_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_PNM_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<PNM<'a>>) {
  fbb.finish_size_prefixed(root, Some(PNM_IDENTIFIER));
}
