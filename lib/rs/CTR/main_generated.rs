// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum CTROffset {}
#[derive(Copy, Clone, PartialEq)]

/// Country Identity Message
pub struct CTR<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CTR<'a> {
  type Inner = CTR<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CTR<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_GENC_CODE: flatbuffers::VOffsetT = 8;
  pub const VT_ALPHA_2_CODE: flatbuffers::VOffsetT = 10;
  pub const VT_ALPHA_3_CODE: flatbuffers::VOffsetT = 12;
  pub const VT_STANAG_CODE: flatbuffers::VOffsetT = 14;
  pub const VT_INTERNET_CCTLD: flatbuffers::VOffsetT = 16;
  pub const VT_COMMENT: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CTR { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CTRArgs<'args>
  ) -> flatbuffers::WIPOffset<CTR<'bldr>> {
    let mut builder = CTRBuilder::new(_fbb);
    if let Some(x) = args.COMMENT { builder.add_COMMENT(x); }
    if let Some(x) = args.INTERNET_CCTLD { builder.add_INTERNET_CCTLD(x); }
    if let Some(x) = args.STANAG_CODE { builder.add_STANAG_CODE(x); }
    if let Some(x) = args.ALPHA_3_CODE { builder.add_ALPHA_3_CODE(x); }
    if let Some(x) = args.ALPHA_2_CODE { builder.add_ALPHA_2_CODE(x); }
    if let Some(x) = args.GENC_CODE { builder.add_GENC_CODE(x); }
    if let Some(x) = args.NAME { builder.add_NAME(x); }
    if let Some(x) = args.ID { builder.add_ID(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> CTRT {
    let ID = self.ID().map(|x| {
      x.to_string()
    });
    let NAME = self.NAME().map(|x| {
      x.to_string()
    });
    let GENC_CODE = self.GENC_CODE().map(|x| {
      x.to_string()
    });
    let ALPHA_2_CODE = self.ALPHA_2_CODE().map(|x| {
      x.to_string()
    });
    let ALPHA_3_CODE = self.ALPHA_3_CODE().map(|x| {
      x.to_string()
    });
    let STANAG_CODE = self.STANAG_CODE().map(|x| {
      x.to_string()
    });
    let INTERNET_CCTLD = self.INTERNET_CCTLD().map(|x| {
      x.to_string()
    });
    let COMMENT = self.COMMENT().map(|x| {
      x.to_string()
    });
    CTRT {
      ID,
      NAME,
      GENC_CODE,
      ALPHA_2_CODE,
      ALPHA_3_CODE,
      STANAG_CODE,
      INTERNET_CCTLD,
      COMMENT,
    }
  }

  /// ISO 3166 Numeric code
  #[inline]
  pub fn ID(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CTR::VT_ID, None)}
  }
  /// Country name
  #[inline]
  pub fn NAME(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CTR::VT_NAME, None)}
  }
  /// GENC code
  #[inline]
  pub fn GENC_CODE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CTR::VT_GENC_CODE, None)}
  }
  /// ISO 3166 Alpha-2 code
  #[inline]
  pub fn ALPHA_2_CODE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CTR::VT_ALPHA_2_CODE, None)}
  }
  /// ISO 3166 Alpha-3 code
  #[inline]
  pub fn ALPHA_3_CODE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CTR::VT_ALPHA_3_CODE, None)}
  }
  /// Stanag code
  #[inline]
  pub fn STANAG_CODE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CTR::VT_STANAG_CODE, None)}
  }
  /// Internet country code top-level domain (ccTLD)
  #[inline]
  pub fn INTERNET_CCTLD(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CTR::VT_INTERNET_CCTLD, None)}
  }
  /// Additional comments
  #[inline]
  pub fn COMMENT(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CTR::VT_COMMENT, None)}
  }
}

impl flatbuffers::Verifiable for CTR<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ID", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("NAME", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GENC_CODE", Self::VT_GENC_CODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ALPHA_2_CODE", Self::VT_ALPHA_2_CODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ALPHA_3_CODE", Self::VT_ALPHA_3_CODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("STANAG_CODE", Self::VT_STANAG_CODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("INTERNET_CCTLD", Self::VT_INTERNET_CCTLD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("COMMENT", Self::VT_COMMENT, false)?
     .finish();
    Ok(())
  }
}
pub struct CTRArgs<'a> {
    pub ID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub NAME: Option<flatbuffers::WIPOffset<&'a str>>,
    pub GENC_CODE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ALPHA_2_CODE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ALPHA_3_CODE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub STANAG_CODE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub INTERNET_CCTLD: Option<flatbuffers::WIPOffset<&'a str>>,
    pub COMMENT: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for CTRArgs<'a> {
  #[inline]
  fn default() -> Self {
    CTRArgs {
      ID: None,
      NAME: None,
      GENC_CODE: None,
      ALPHA_2_CODE: None,
      ALPHA_3_CODE: None,
      STANAG_CODE: None,
      INTERNET_CCTLD: None,
      COMMENT: None,
    }
  }
}

pub struct CTRBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CTRBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ID(&mut self, ID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CTR::VT_ID, ID);
  }
  #[inline]
  pub fn add_NAME(&mut self, NAME: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CTR::VT_NAME, NAME);
  }
  #[inline]
  pub fn add_GENC_CODE(&mut self, GENC_CODE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CTR::VT_GENC_CODE, GENC_CODE);
  }
  #[inline]
  pub fn add_ALPHA_2_CODE(&mut self, ALPHA_2_CODE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CTR::VT_ALPHA_2_CODE, ALPHA_2_CODE);
  }
  #[inline]
  pub fn add_ALPHA_3_CODE(&mut self, ALPHA_3_CODE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CTR::VT_ALPHA_3_CODE, ALPHA_3_CODE);
  }
  #[inline]
  pub fn add_STANAG_CODE(&mut self, STANAG_CODE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CTR::VT_STANAG_CODE, STANAG_CODE);
  }
  #[inline]
  pub fn add_INTERNET_CCTLD(&mut self, INTERNET_CCTLD: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CTR::VT_INTERNET_CCTLD, INTERNET_CCTLD);
  }
  #[inline]
  pub fn add_COMMENT(&mut self, COMMENT: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CTR::VT_COMMENT, COMMENT);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CTRBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CTRBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CTR<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CTR<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CTR");
      ds.field("ID", &self.ID());
      ds.field("NAME", &self.NAME());
      ds.field("GENC_CODE", &self.GENC_CODE());
      ds.field("ALPHA_2_CODE", &self.ALPHA_2_CODE());
      ds.field("ALPHA_3_CODE", &self.ALPHA_3_CODE());
      ds.field("STANAG_CODE", &self.STANAG_CODE());
      ds.field("INTERNET_CCTLD", &self.INTERNET_CCTLD());
      ds.field("COMMENT", &self.COMMENT());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CTRT {
  pub ID: Option<String>,
  pub NAME: Option<String>,
  pub GENC_CODE: Option<String>,
  pub ALPHA_2_CODE: Option<String>,
  pub ALPHA_3_CODE: Option<String>,
  pub STANAG_CODE: Option<String>,
  pub INTERNET_CCTLD: Option<String>,
  pub COMMENT: Option<String>,
}
impl Default for CTRT {
  fn default() -> Self {
    Self {
      ID: None,
      NAME: None,
      GENC_CODE: None,
      ALPHA_2_CODE: None,
      ALPHA_3_CODE: None,
      STANAG_CODE: None,
      INTERNET_CCTLD: None,
      COMMENT: None,
    }
  }
}
impl CTRT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CTR<'b>> {
    let ID = self.ID.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let NAME = self.NAME.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let GENC_CODE = self.GENC_CODE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ALPHA_2_CODE = self.ALPHA_2_CODE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ALPHA_3_CODE = self.ALPHA_3_CODE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let STANAG_CODE = self.STANAG_CODE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let INTERNET_CCTLD = self.INTERNET_CCTLD.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let COMMENT = self.COMMENT.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    CTR::create(_fbb, &CTRArgs{
      ID,
      NAME,
      GENC_CODE,
      ALPHA_2_CODE,
      ALPHA_3_CODE,
      STANAG_CODE,
      INTERNET_CCTLD,
      COMMENT,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `CTR`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_CTR_unchecked`.
pub fn root_as_CTR(buf: &[u8]) -> Result<CTR, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<CTR>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `CTR` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_CTR_unchecked`.
pub fn size_prefixed_root_as_CTR(buf: &[u8]) -> Result<CTR, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<CTR>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `CTR` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_CTR_unchecked`.
pub fn root_as_CTR_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<CTR<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<CTR<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `CTR` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_CTR_unchecked`.
pub fn size_prefixed_root_as_CTR_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<CTR<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<CTR<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a CTR and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `CTR`.
pub unsafe fn root_as_CTR_unchecked(buf: &[u8]) -> CTR {
  flatbuffers::root_unchecked::<CTR>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed CTR and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `CTR`.
pub unsafe fn size_prefixed_root_as_CTR_unchecked(buf: &[u8]) -> CTR {
  flatbuffers::size_prefixed_root_unchecked::<CTR>(buf)
}
pub const CTR_IDENTIFIER: &str = "$CTR";

#[inline]
pub fn CTR_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, CTR_IDENTIFIER, false)
}

#[inline]
pub fn CTR_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, CTR_IDENTIFIER, true)
}

#[inline]
pub fn finish_CTR_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<CTR<'a>>) {
  fbb.finish(root, Some(CTR_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_CTR_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<CTR<'a>>) {
  fbb.finish_size_prefixed(root, Some(CTR_IDENTIFIER));
}
