// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_DATA_TYPE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_DATA_TYPE: i8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_DATA_TYPE: [DataType; 2] = [
  DataType::OBSERVED,
  DataType::PREDICTED,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct DataType(pub i8);
#[allow(non_upper_case_globals)]
impl DataType {
  pub const OBSERVED: Self = Self(0);
  pub const PREDICTED: Self = Self(1);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::OBSERVED,
    Self::PREDICTED,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::OBSERVED => Some("OBSERVED"),
      Self::PREDICTED => Some("PREDICTED"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for DataType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for DataType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for DataType {
    type Output = DataType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for DataType {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for DataType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for DataType {}
pub enum EOPOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Earth Orientation Parameters
pub struct EOP<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EOP<'a> {
  type Inner = EOP<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EOP<'a> {
  pub const VT_DATE: flatbuffers::VOffsetT = 4;
  pub const VT_MJD: flatbuffers::VOffsetT = 6;
  pub const VT_X_POLE_WANDER_RADIANS: flatbuffers::VOffsetT = 8;
  pub const VT_Y_POLE_WANDER_RADIANS: flatbuffers::VOffsetT = 10;
  pub const VT_X_CELESTIAL_POLE_OFFSET_RADIANS: flatbuffers::VOffsetT = 12;
  pub const VT_Y_CELESTIAL_POLE_OFFSET_RADIANS: flatbuffers::VOffsetT = 14;
  pub const VT_UT1_MINUS_UTC_SECONDS: flatbuffers::VOffsetT = 16;
  pub const VT_TAI_MINUS_UTC_SECONDS: flatbuffers::VOffsetT = 18;
  pub const VT_LENGTH_OF_DAY_CORRECTION_SECONDS: flatbuffers::VOffsetT = 20;
  pub const VT_DATA_TYPE: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EOP { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args EOPArgs<'args>
  ) -> flatbuffers::WIPOffset<EOP<'bldr>> {
    let mut builder = EOPBuilder::new(_fbb);
    builder.add_LENGTH_OF_DAY_CORRECTION_SECONDS(args.LENGTH_OF_DAY_CORRECTION_SECONDS);
    builder.add_UT1_MINUS_UTC_SECONDS(args.UT1_MINUS_UTC_SECONDS);
    builder.add_Y_CELESTIAL_POLE_OFFSET_RADIANS(args.Y_CELESTIAL_POLE_OFFSET_RADIANS);
    builder.add_X_CELESTIAL_POLE_OFFSET_RADIANS(args.X_CELESTIAL_POLE_OFFSET_RADIANS);
    builder.add_Y_POLE_WANDER_RADIANS(args.Y_POLE_WANDER_RADIANS);
    builder.add_X_POLE_WANDER_RADIANS(args.X_POLE_WANDER_RADIANS);
    builder.add_MJD(args.MJD);
    if let Some(x) = args.DATE { builder.add_DATE(x); }
    builder.add_TAI_MINUS_UTC_SECONDS(args.TAI_MINUS_UTC_SECONDS);
    builder.add_DATA_TYPE(args.DATA_TYPE);
    builder.finish()
  }

  pub fn unpack(&self) -> EOPT {
    let DATE = self.DATE().map(|x| {
      x.to_string()
    });
    let MJD = self.MJD();
    let X_POLE_WANDER_RADIANS = self.X_POLE_WANDER_RADIANS();
    let Y_POLE_WANDER_RADIANS = self.Y_POLE_WANDER_RADIANS();
    let X_CELESTIAL_POLE_OFFSET_RADIANS = self.X_CELESTIAL_POLE_OFFSET_RADIANS();
    let Y_CELESTIAL_POLE_OFFSET_RADIANS = self.Y_CELESTIAL_POLE_OFFSET_RADIANS();
    let UT1_MINUS_UTC_SECONDS = self.UT1_MINUS_UTC_SECONDS();
    let TAI_MINUS_UTC_SECONDS = self.TAI_MINUS_UTC_SECONDS();
    let LENGTH_OF_DAY_CORRECTION_SECONDS = self.LENGTH_OF_DAY_CORRECTION_SECONDS();
    let DATA_TYPE = self.DATA_TYPE();
    EOPT {
      DATE,
      MJD,
      X_POLE_WANDER_RADIANS,
      Y_POLE_WANDER_RADIANS,
      X_CELESTIAL_POLE_OFFSET_RADIANS,
      Y_CELESTIAL_POLE_OFFSET_RADIANS,
      UT1_MINUS_UTC_SECONDS,
      TAI_MINUS_UTC_SECONDS,
      LENGTH_OF_DAY_CORRECTION_SECONDS,
      DATA_TYPE,
    }
  }

  ///  Date in ISO 8601 format, e.g., "2018-01-01T00:00:00Z"
  #[inline]
  pub fn DATE(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOP::VT_DATE, None)}
  }
  ///  Modified Julian Date in UTC, e.g., 58119
  #[inline]
  pub fn MJD(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(EOP::VT_MJD, Some(0)).unwrap()}
  }
  ///  x component of Pole Wander in radians, e.g., 2.872908911518888E-7
  #[inline]
  pub fn X_POLE_WANDER_RADIANS(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EOP::VT_X_POLE_WANDER_RADIANS, Some(0.0)).unwrap()}
  }
  ///  y component of Pole Wander in radians, e.g., 1.2003259523750447E-6
  #[inline]
  pub fn Y_POLE_WANDER_RADIANS(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EOP::VT_Y_POLE_WANDER_RADIANS, Some(0.0)).unwrap()}
  }
  ///  x component of Celestial Pole Offset in radians, e.g., 5.720801437092525E-10
  #[inline]
  pub fn X_CELESTIAL_POLE_OFFSET_RADIANS(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EOP::VT_X_CELESTIAL_POLE_OFFSET_RADIANS, Some(0.0)).unwrap()}
  }
  ///  y component of Celestial Pole Offset in radians, e.g., -8.484239419416879E-10
  #[inline]
  pub fn Y_CELESTIAL_POLE_OFFSET_RADIANS(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EOP::VT_Y_CELESTIAL_POLE_OFFSET_RADIANS, Some(0.0)).unwrap()}
  }
  ///  UT1 minus UTC in seconds, e.g., 0.2163567
  #[inline]
  pub fn UT1_MINUS_UTC_SECONDS(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EOP::VT_UT1_MINUS_UTC_SECONDS, Some(0.0)).unwrap()}
  }
  ///  TAI minus UTC in seconds, e.g., 37
  #[inline]
  pub fn TAI_MINUS_UTC_SECONDS(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(EOP::VT_TAI_MINUS_UTC_SECONDS, Some(0)).unwrap()}
  }
  ///  Correction to Length of Day in seconds, e.g., 8.094E-4
  #[inline]
  pub fn LENGTH_OF_DAY_CORRECTION_SECONDS(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EOP::VT_LENGTH_OF_DAY_CORRECTION_SECONDS, Some(0.0)).unwrap()}
  }
  ///  Data type (O = Observed, P = Predicted)
  #[inline]
  pub fn DATA_TYPE(&self) -> DataType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DataType>(EOP::VT_DATA_TYPE, Some(DataType::OBSERVED)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EOP<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DATE", Self::VT_DATE, false)?
     .visit_field::<u32>("MJD", Self::VT_MJD, false)?
     .visit_field::<f32>("X_POLE_WANDER_RADIANS", Self::VT_X_POLE_WANDER_RADIANS, false)?
     .visit_field::<f32>("Y_POLE_WANDER_RADIANS", Self::VT_Y_POLE_WANDER_RADIANS, false)?
     .visit_field::<f32>("X_CELESTIAL_POLE_OFFSET_RADIANS", Self::VT_X_CELESTIAL_POLE_OFFSET_RADIANS, false)?
     .visit_field::<f32>("Y_CELESTIAL_POLE_OFFSET_RADIANS", Self::VT_Y_CELESTIAL_POLE_OFFSET_RADIANS, false)?
     .visit_field::<f32>("UT1_MINUS_UTC_SECONDS", Self::VT_UT1_MINUS_UTC_SECONDS, false)?
     .visit_field::<u16>("TAI_MINUS_UTC_SECONDS", Self::VT_TAI_MINUS_UTC_SECONDS, false)?
     .visit_field::<f32>("LENGTH_OF_DAY_CORRECTION_SECONDS", Self::VT_LENGTH_OF_DAY_CORRECTION_SECONDS, false)?
     .visit_field::<DataType>("DATA_TYPE", Self::VT_DATA_TYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct EOPArgs<'a> {
    pub DATE: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MJD: u32,
    pub X_POLE_WANDER_RADIANS: f32,
    pub Y_POLE_WANDER_RADIANS: f32,
    pub X_CELESTIAL_POLE_OFFSET_RADIANS: f32,
    pub Y_CELESTIAL_POLE_OFFSET_RADIANS: f32,
    pub UT1_MINUS_UTC_SECONDS: f32,
    pub TAI_MINUS_UTC_SECONDS: u16,
    pub LENGTH_OF_DAY_CORRECTION_SECONDS: f32,
    pub DATA_TYPE: DataType,
}
impl<'a> Default for EOPArgs<'a> {
  #[inline]
  fn default() -> Self {
    EOPArgs {
      DATE: None,
      MJD: 0,
      X_POLE_WANDER_RADIANS: 0.0,
      Y_POLE_WANDER_RADIANS: 0.0,
      X_CELESTIAL_POLE_OFFSET_RADIANS: 0.0,
      Y_CELESTIAL_POLE_OFFSET_RADIANS: 0.0,
      UT1_MINUS_UTC_SECONDS: 0.0,
      TAI_MINUS_UTC_SECONDS: 0,
      LENGTH_OF_DAY_CORRECTION_SECONDS: 0.0,
      DATA_TYPE: DataType::OBSERVED,
    }
  }
}

pub struct EOPBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> EOPBuilder<'a, 'b> {
  #[inline]
  pub fn add_DATE(&mut self, DATE: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOP::VT_DATE, DATE);
  }
  #[inline]
  pub fn add_MJD(&mut self, MJD: u32) {
    self.fbb_.push_slot::<u32>(EOP::VT_MJD, MJD, 0);
  }
  #[inline]
  pub fn add_X_POLE_WANDER_RADIANS(&mut self, X_POLE_WANDER_RADIANS: f32) {
    self.fbb_.push_slot::<f32>(EOP::VT_X_POLE_WANDER_RADIANS, X_POLE_WANDER_RADIANS, 0.0);
  }
  #[inline]
  pub fn add_Y_POLE_WANDER_RADIANS(&mut self, Y_POLE_WANDER_RADIANS: f32) {
    self.fbb_.push_slot::<f32>(EOP::VT_Y_POLE_WANDER_RADIANS, Y_POLE_WANDER_RADIANS, 0.0);
  }
  #[inline]
  pub fn add_X_CELESTIAL_POLE_OFFSET_RADIANS(&mut self, X_CELESTIAL_POLE_OFFSET_RADIANS: f32) {
    self.fbb_.push_slot::<f32>(EOP::VT_X_CELESTIAL_POLE_OFFSET_RADIANS, X_CELESTIAL_POLE_OFFSET_RADIANS, 0.0);
  }
  #[inline]
  pub fn add_Y_CELESTIAL_POLE_OFFSET_RADIANS(&mut self, Y_CELESTIAL_POLE_OFFSET_RADIANS: f32) {
    self.fbb_.push_slot::<f32>(EOP::VT_Y_CELESTIAL_POLE_OFFSET_RADIANS, Y_CELESTIAL_POLE_OFFSET_RADIANS, 0.0);
  }
  #[inline]
  pub fn add_UT1_MINUS_UTC_SECONDS(&mut self, UT1_MINUS_UTC_SECONDS: f32) {
    self.fbb_.push_slot::<f32>(EOP::VT_UT1_MINUS_UTC_SECONDS, UT1_MINUS_UTC_SECONDS, 0.0);
  }
  #[inline]
  pub fn add_TAI_MINUS_UTC_SECONDS(&mut self, TAI_MINUS_UTC_SECONDS: u16) {
    self.fbb_.push_slot::<u16>(EOP::VT_TAI_MINUS_UTC_SECONDS, TAI_MINUS_UTC_SECONDS, 0);
  }
  #[inline]
  pub fn add_LENGTH_OF_DAY_CORRECTION_SECONDS(&mut self, LENGTH_OF_DAY_CORRECTION_SECONDS: f32) {
    self.fbb_.push_slot::<f32>(EOP::VT_LENGTH_OF_DAY_CORRECTION_SECONDS, LENGTH_OF_DAY_CORRECTION_SECONDS, 0.0);
  }
  #[inline]
  pub fn add_DATA_TYPE(&mut self, DATA_TYPE: DataType) {
    self.fbb_.push_slot::<DataType>(EOP::VT_DATA_TYPE, DATA_TYPE, DataType::OBSERVED);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EOPBuilder<'a, 'b> {
    let start = _fbb.start_table();
    EOPBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EOP<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EOP<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EOP");
      ds.field("DATE", &self.DATE());
      ds.field("MJD", &self.MJD());
      ds.field("X_POLE_WANDER_RADIANS", &self.X_POLE_WANDER_RADIANS());
      ds.field("Y_POLE_WANDER_RADIANS", &self.Y_POLE_WANDER_RADIANS());
      ds.field("X_CELESTIAL_POLE_OFFSET_RADIANS", &self.X_CELESTIAL_POLE_OFFSET_RADIANS());
      ds.field("Y_CELESTIAL_POLE_OFFSET_RADIANS", &self.Y_CELESTIAL_POLE_OFFSET_RADIANS());
      ds.field("UT1_MINUS_UTC_SECONDS", &self.UT1_MINUS_UTC_SECONDS());
      ds.field("TAI_MINUS_UTC_SECONDS", &self.TAI_MINUS_UTC_SECONDS());
      ds.field("LENGTH_OF_DAY_CORRECTION_SECONDS", &self.LENGTH_OF_DAY_CORRECTION_SECONDS());
      ds.field("DATA_TYPE", &self.DATA_TYPE());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EOPT {
  pub DATE: Option<String>,
  pub MJD: u32,
  pub X_POLE_WANDER_RADIANS: f32,
  pub Y_POLE_WANDER_RADIANS: f32,
  pub X_CELESTIAL_POLE_OFFSET_RADIANS: f32,
  pub Y_CELESTIAL_POLE_OFFSET_RADIANS: f32,
  pub UT1_MINUS_UTC_SECONDS: f32,
  pub TAI_MINUS_UTC_SECONDS: u16,
  pub LENGTH_OF_DAY_CORRECTION_SECONDS: f32,
  pub DATA_TYPE: DataType,
}
impl Default for EOPT {
  fn default() -> Self {
    Self {
      DATE: None,
      MJD: 0,
      X_POLE_WANDER_RADIANS: 0.0,
      Y_POLE_WANDER_RADIANS: 0.0,
      X_CELESTIAL_POLE_OFFSET_RADIANS: 0.0,
      Y_CELESTIAL_POLE_OFFSET_RADIANS: 0.0,
      UT1_MINUS_UTC_SECONDS: 0.0,
      TAI_MINUS_UTC_SECONDS: 0,
      LENGTH_OF_DAY_CORRECTION_SECONDS: 0.0,
      DATA_TYPE: DataType::OBSERVED,
    }
  }
}
impl EOPT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<EOP<'b>> {
    let DATE = self.DATE.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MJD = self.MJD;
    let X_POLE_WANDER_RADIANS = self.X_POLE_WANDER_RADIANS;
    let Y_POLE_WANDER_RADIANS = self.Y_POLE_WANDER_RADIANS;
    let X_CELESTIAL_POLE_OFFSET_RADIANS = self.X_CELESTIAL_POLE_OFFSET_RADIANS;
    let Y_CELESTIAL_POLE_OFFSET_RADIANS = self.Y_CELESTIAL_POLE_OFFSET_RADIANS;
    let UT1_MINUS_UTC_SECONDS = self.UT1_MINUS_UTC_SECONDS;
    let TAI_MINUS_UTC_SECONDS = self.TAI_MINUS_UTC_SECONDS;
    let LENGTH_OF_DAY_CORRECTION_SECONDS = self.LENGTH_OF_DAY_CORRECTION_SECONDS;
    let DATA_TYPE = self.DATA_TYPE;
    EOP::create(_fbb, &EOPArgs{
      DATE,
      MJD,
      X_POLE_WANDER_RADIANS,
      Y_POLE_WANDER_RADIANS,
      X_CELESTIAL_POLE_OFFSET_RADIANS,
      Y_CELESTIAL_POLE_OFFSET_RADIANS,
      UT1_MINUS_UTC_SECONDS,
      TAI_MINUS_UTC_SECONDS,
      LENGTH_OF_DAY_CORRECTION_SECONDS,
      DATA_TYPE,
    })
  }
}
pub enum EOPCOLLECTIONOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EOPCOLLECTION<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EOPCOLLECTION<'a> {
  type Inner = EOPCOLLECTION<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EOPCOLLECTION<'a> {
  pub const VT_RECORDS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EOPCOLLECTION { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args EOPCOLLECTIONArgs<'args>
  ) -> flatbuffers::WIPOffset<EOPCOLLECTION<'bldr>> {
    let mut builder = EOPCOLLECTIONBuilder::new(_fbb);
    if let Some(x) = args.RECORDS { builder.add_RECORDS(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> EOPCOLLECTIONT {
    let RECORDS = self.RECORDS().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    EOPCOLLECTIONT {
      RECORDS,
    }
  }

  #[inline]
  pub fn RECORDS(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EOP<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EOP>>>>(EOPCOLLECTION::VT_RECORDS, None)}
  }
}

impl flatbuffers::Verifiable for EOPCOLLECTION<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<EOP>>>>("RECORDS", Self::VT_RECORDS, false)?
     .finish();
    Ok(())
  }
}
pub struct EOPCOLLECTIONArgs<'a> {
    pub RECORDS: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EOP<'a>>>>>,
}
impl<'a> Default for EOPCOLLECTIONArgs<'a> {
  #[inline]
  fn default() -> Self {
    EOPCOLLECTIONArgs {
      RECORDS: None,
    }
  }
}

pub struct EOPCOLLECTIONBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> EOPCOLLECTIONBuilder<'a, 'b> {
  #[inline]
  pub fn add_RECORDS(&mut self, RECORDS: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<EOP<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOPCOLLECTION::VT_RECORDS, RECORDS);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EOPCOLLECTIONBuilder<'a, 'b> {
    let start = _fbb.start_table();
    EOPCOLLECTIONBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EOPCOLLECTION<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EOPCOLLECTION<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EOPCOLLECTION");
      ds.field("RECORDS", &self.RECORDS());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EOPCOLLECTIONT {
  pub RECORDS: Option<Vec<EOPT>>,
}
impl Default for EOPCOLLECTIONT {
  fn default() -> Self {
    Self {
      RECORDS: None,
    }
  }
}
impl EOPCOLLECTIONT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<EOPCOLLECTION<'b>> {
    let RECORDS = self.RECORDS.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    EOPCOLLECTION::create(_fbb, &EOPCOLLECTIONArgs{
      RECORDS,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `EOP`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_EOP_unchecked`.
pub fn root_as_EOP(buf: &[u8]) -> Result<EOP, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<EOP>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `EOP` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_EOP_unchecked`.
pub fn size_prefixed_root_as_EOP(buf: &[u8]) -> Result<EOP, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<EOP>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `EOP` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_EOP_unchecked`.
pub fn root_as_EOP_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EOP<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<EOP<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `EOP` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_EOP_unchecked`.
pub fn size_prefixed_root_as_EOP_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EOP<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<EOP<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a EOP and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `EOP`.
pub unsafe fn root_as_EOP_unchecked(buf: &[u8]) -> EOP {
  flatbuffers::root_unchecked::<EOP>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed EOP and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `EOP`.
pub unsafe fn size_prefixed_root_as_EOP_unchecked(buf: &[u8]) -> EOP {
  flatbuffers::size_prefixed_root_unchecked::<EOP>(buf)
}
pub const EOP_IDENTIFIER: &str = "$EOP";

#[inline]
pub fn EOP_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EOP_IDENTIFIER, false)
}

#[inline]
pub fn EOP_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EOP_IDENTIFIER, true)
}

#[inline]
pub fn finish_EOP_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<EOP<'a>>) {
  fbb.finish(root, Some(EOP_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_EOP_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<EOP<'a>>) {
  fbb.finish_size_prefixed(root, Some(EOP_IDENTIFIER));
}
