// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum referenceFrame:
    /// Earth Mean Equator and Equinox of J2000
    referenceFrame_EME2000 = 0
    /// Geocentric Celestial Reference Frame
    referenceFrame_GCRF = 1
    /// Greenwich Rotating Coordinates
    referenceFrame_GRC = 2
    /// International Celestial Reference Frame
    referenceFrame_ICRF = 3
    /// International Terrestrial Reference Frame 2000
    referenceFrame_ITRF2000 = 4
    /// International Terrestrial Reference Frame 1993
    referenceFrame_ITRF93 = 5
    /// International Terrestrial Reference Frame 1997
    referenceFrame_ITRF97 = 6
    /// Mars Centered Inertial
    referenceFrame_MCI = 7
    /// True of Date, Rotating
    referenceFrame_TDR = 8
    /// True Equator Mean Equinox
    referenceFrame_TEME = 9
    /// True of Date
    referenceFrame_TOD = 10

enum timeSystem:
    /// Greenwich Mean Sidereal Time
    timeSystem_GMST = 0
    /// Global Positioning System
    timeSystem_GPS = 1
    /// Mission Elapsed Time
    timeSystem_MET = 2
    /// Mission Relative Time
    timeSystem_MRT = 3
    /// Spacecraft Clock (receiver) (requires rules for interpretation in ICD)
    timeSystem_SCLK = 4
    /// International Atomic Time
    timeSystem_TAI = 5
    /// Barycentric Coordinate Time
    timeSystem_TCB = 6
    /// Barycentric Dynamical Time
    timeSystem_TDB = 7
    /// Geocentric Coordinate Time
    timeSystem_TCG = 8
    /// Terrestrial Time
    timeSystem_TT = 9
    /// Universal Time
    timeSystem_UT1 = 10
    /// Coordinated Universal Time
    timeSystem_UTC = 11

enum meanElementTheory:
    /// Simplified General Perturbation Model 4
    meanElementTheory_SGP4 = 0
    /// Draper Semi-analytical Satellite Theory
    meanElementTheory_DSST = 1
    /// Universal Semianalytical Method
    meanElementTheory_USM = 2

class MPE

/// Minimum Propagatable Element Set
class MPE : flatbuffers_handle
    /// Unique ID as a String
    def ENTITY_ID() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Epoch of Mean Keplerian elements. (UNIX TimeStamp)
    def EPOCH() -> float:
        return buf_.flatbuffers_field_float64(pos_, 6, 0.0)
    /// Semi-major axis in km or mean motion in rev/day
    def MEAN_MOTION() -> float:
        return buf_.flatbuffers_field_float64(pos_, 8, 0.0)
    /// Eccentricity
    def ECCENTRICITY() -> float:
        return buf_.flatbuffers_field_float64(pos_, 10, 0.0)
    /// Inclination
    def INCLINATION() -> float:
        return buf_.flatbuffers_field_float64(pos_, 12, 0.0)
    /// Right ascension of ascending node
    def RA_OF_ASC_NODE() -> float:
        return buf_.flatbuffers_field_float64(pos_, 14, 0.0)
    /// Argument of pericenter
    def ARG_OF_PERICENTER() -> float:
        return buf_.flatbuffers_field_float64(pos_, 16, 0.0)
    /// Mean anomaly
    def MEAN_ANOMALY() -> float:
        return buf_.flatbuffers_field_float64(pos_, 18, 0.0)
    /// SGP/SGP4 drag-like coefficient (in units 1/[Earth radii])
    def BSTAR() -> float:
        return buf_.flatbuffers_field_float64(pos_, 20, 0.0)

def GetRootAsMPE(buf:string): return MPE { buf, buf.flatbuffers_indirect(0) }

struct MPEBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(9)
        return this
    def add_ENTITY_ID(ENTITY_ID:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, ENTITY_ID)
        return this
    def add_EPOCH(EPOCH:float):
        b_.PrependFloat64Slot(1, EPOCH, 0.0)
        return this
    def add_MEAN_MOTION(MEAN_MOTION:float):
        b_.PrependFloat64Slot(2, MEAN_MOTION, 0.0)
        return this
    def add_ECCENTRICITY(ECCENTRICITY:float):
        b_.PrependFloat64Slot(3, ECCENTRICITY, 0.0)
        return this
    def add_INCLINATION(INCLINATION:float):
        b_.PrependFloat64Slot(4, INCLINATION, 0.0)
        return this
    def add_RA_OF_ASC_NODE(RA_OF_ASC_NODE:float):
        b_.PrependFloat64Slot(5, RA_OF_ASC_NODE, 0.0)
        return this
    def add_ARG_OF_PERICENTER(ARG_OF_PERICENTER:float):
        b_.PrependFloat64Slot(6, ARG_OF_PERICENTER, 0.0)
        return this
    def add_MEAN_ANOMALY(MEAN_ANOMALY:float):
        b_.PrependFloat64Slot(7, MEAN_ANOMALY, 0.0)
        return this
    def add_BSTAR(BSTAR:float):
        b_.PrependFloat64Slot(8, BSTAR, 0.0)
        return this
    def end():
        return b_.EndObject()

