// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class OSM

/// Observation Stability Message
class OSM : flatbuffers.handle
    /// Indicates whether the observation is stable or not
    def IS_STABLE() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 4, 0))
    /// The number of observations
    def NUM_OBS() -> int:
        return flatbuffers.field_int32(buf_, pos_, 6, 0)
    /// Unique identifier for the object being observed
    def OBJECT_ID() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Identifier of the sensor
    def ID_SENSOR() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Timestamp of data creation
    def PASS_START() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Duration of the observation pass in seconds
    def PASS_DURATION() -> int:
        return flatbuffers.field_int32(buf_, pos_, 14, 0)

def GetRootAsOSM(buf:string): return OSM { buf, flatbuffers.indirect(buf, 0) }

struct OSMBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(6)
        return this
    def add_IS_STABLE(IS_STABLE:bool):
        b_.PrependBoolSlot(0, IS_STABLE, 0)
        return this
    def add_NUM_OBS(NUM_OBS:int):
        b_.PrependInt32Slot(1, NUM_OBS, 0)
        return this
    def add_OBJECT_ID(OBJECT_ID:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, OBJECT_ID)
        return this
    def add_ID_SENSOR(ID_SENSOR:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, ID_SENSOR)
        return this
    def add_PASS_START(PASS_START:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, PASS_START)
        return this
    def add_PASS_DURATION(PASS_DURATION:int):
        b_.PrependInt32Slot(5, PASS_DURATION, 0)
        return this
    def end():
        return b_.EndObject()

