// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum referenceFrame:
    /// Earth Mean Equator and Equinox of J2000
    referenceFrame_EME2000 = 0
    /// Geocentric Celestial Reference Frame
    referenceFrame_GCRF = 1
    /// International Terrestrial Reference Frame
    referenceFrame_ITRF = 2

enum objectCenteredReferenceFrame:
    /// Radial, Transverse, Normal
    objectCenteredReferenceFrame_RTN = 0
    /// Transverse, Velocity, Normal
    objectCenteredReferenceFrame_TVN = 1

enum screeningVolumeShape:
    screeningVolumeShape_ELLIPSOID = 0
    screeningVolumeShape_BOX = 1

enum objectNumber:
    objectNumber_OBJECT1 = 0
    objectNumber_OBJECT2 = 1

enum objectType:
    objectType_PAYLOAD = 0
    objectType_ROCKET_BODY = 1
    objectType_DEBRIS = 2
    objectType_UNKNOWN = 3
    objectType_OTHER = 4

enum covarianceMethod:
    covarianceMethod_CALCULATED = 0
    covarianceMethod_DEFAULT = 1

enum maneuverableType:
    maneuverableType_YES = 0
    maneuverableType_NO = 1
    maneuverableType_NA = 2

class CDMObject

class CDM

class CDMCOLLECTION

class CDMObject : flatbuffers_handle
    /// A comment
    def COMMENT() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Object number
    def OBJECT() -> objectNumber:
        return objectNumber(buf_.flatbuffers_field_int8(pos_, 6, 0))
    /// Object designator
    def OBJECT_DESIGNATOR() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// Catalog name
    def CATALOG_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 10)
    /// Object name
    def OBJECT_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 12)
    /// International designator
    def INTERNATIONAL_DESIGNATOR() -> string:
        return buf_.flatbuffers_field_string(pos_, 14)
    /// Object type
    def OBJECT_TYPE() -> objectType:
        return objectType(buf_.flatbuffers_field_int8(pos_, 16, 0))
    /// Operator contact position
    def OPERATOR_CONTACT_POSITION() -> string:
        return buf_.flatbuffers_field_string(pos_, 18)
    /// Operator organization
    def OPERATOR_ORGANIZATION() -> string:
        return buf_.flatbuffers_field_string(pos_, 20)
    /// Ephemeris name
    def EPHEMERIS_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 22)
    /// Covariance method
    def COVARIANCE_METHOD() -> covarianceMethod:
        return covarianceMethod(buf_.flatbuffers_field_int8(pos_, 24, 0))
    /// Maneuverable type
    def MANEUVERABLE() -> maneuverableType:
        return maneuverableType(buf_.flatbuffers_field_int8(pos_, 26, 0))
    /// Orbit center
    def ORBIT_CENTER() -> string:
        return buf_.flatbuffers_field_string(pos_, 28)
    /// Reference frame
    def REF_FRAME() -> referenceFrame:
        return referenceFrame(buf_.flatbuffers_field_int8(pos_, 30, 0))
    /// Gravity model
    def GRAVITY_MODEL() -> string:
        return buf_.flatbuffers_field_string(pos_, 32)
    /// Atmospheric model
    def ATMOSPHERIC_MODEL() -> string:
        return buf_.flatbuffers_field_string(pos_, 34)
    /// N-body perturbations
    def N_BODY_PERTURBATIONS() -> string:
        return buf_.flatbuffers_field_string(pos_, 36)
    /// Solar radiation pressure
    def SOLAR_RAD_PRESSURE() -> bool:
        return bool(buf_.flatbuffers_field_int8(pos_, 38, 0))
    /// Earth tides
    def EARTH_TIDES() -> bool:
        return bool(buf_.flatbuffers_field_int8(pos_, 40, 0))
    /// Intrack thrust
    def INTRACK_THRUST() -> bool:
        return bool(buf_.flatbuffers_field_int8(pos_, 42, 0))
    /// Time of last observation start
    def TIME_LASTOB_START() -> string:
        return buf_.flatbuffers_field_string(pos_, 44)
    /// Time of last observation end
    def TIME_LASTOB_END() -> string:
        return buf_.flatbuffers_field_string(pos_, 46)
    /// Recommended observation data span
    def RECOMMENDED_OD_SPAN() -> float:
        return buf_.flatbuffers_field_float64(pos_, 48, 0.0)
    /// Actual observation data span
    def ACTUAL_OD_SPAN() -> float:
        return buf_.flatbuffers_field_float64(pos_, 50, 0.0)
    /// Number of observations available
    def OBS_AVAILABLE() -> int:
        return buf_.flatbuffers_field_uint32(pos_, 52, 0)
    /// Number of observations used
    def OBS_USED() -> int:
        return buf_.flatbuffers_field_uint32(pos_, 54, 0)
    /// Number of tracks available
    def TRACKS_AVAILABLE() -> int:
        return buf_.flatbuffers_field_uint32(pos_, 56, 0)
    /// Number of tracks used
    def TRACKS_USED() -> int:
        return buf_.flatbuffers_field_uint32(pos_, 58, 0)
    /// Residuals accepted
    def RESIDUALS_ACCEPTED() -> float:
        return buf_.flatbuffers_field_float64(pos_, 60, 0.0)
    /// Weighted root mean square
    def WEIGHTED_RMS() -> float:
        return buf_.flatbuffers_field_float64(pos_, 62, 0.0)
    /// Area of the object
    def AREA_PC() -> float:
        return buf_.flatbuffers_field_float64(pos_, 64, 0.0)
    /// Area of the object drag
    def AREA_DRG() -> float:
        return buf_.flatbuffers_field_float64(pos_, 66, 0.0)
    /// Area of the object solar radiation pressure
    def AREA_SRP() -> float:
        return buf_.flatbuffers_field_float64(pos_, 68, 0.0)
    /// Mass of the object
    def MASS() -> float:
        return buf_.flatbuffers_field_float64(pos_, 70, 0.0)
    /// Object's area-to-mass ratio
    def CR_AREA_OVER_MASS() -> float:
        return buf_.flatbuffers_field_float64(pos_, 72, 0.0)
    /// Object's thrust acceleration
    def THRUST_ACCELERATION() -> float:
        return buf_.flatbuffers_field_float64(pos_, 74, 0.0)
    /// Object's solar flux
    def SEDR() -> float:
        return buf_.flatbuffers_field_float64(pos_, 76, 0.0)
    /// X-coordinate of the object's position in RTN coordinates
    def X() -> float:
        return buf_.flatbuffers_field_float64(pos_, 78, 0.0)
    /// Y-coordinate of the object's position in RTN
    def Y() -> float:
        return buf_.flatbuffers_field_float64(pos_, 80, 0.0)
    /// Z-coordinate of the object's position in RTN
    def Z() -> float:
        return buf_.flatbuffers_field_float64(pos_, 82, 0.0)
    /// X-coordinate of the object's position in RTN coordinates
    def X_DOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 84, 0.0)
    /// Y-coordinate of the object's position in RTN
    def Y_DOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 86, 0.0)
    /// Z-coordinate of the object's position in RTN
    def Z_DOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 88, 0.0)
    /// Covariance Matrix component
    def CR_R() -> float:
        return buf_.flatbuffers_field_float64(pos_, 90, 0.0)
    /// Covariance Matrix component
    def CT_R() -> float:
        return buf_.flatbuffers_field_float64(pos_, 92, 0.0)
    /// Covariance Matrix component
    def CT_T() -> float:
        return buf_.flatbuffers_field_float64(pos_, 94, 0.0)
    /// Covariance Matrix component
    def CN_R() -> float:
        return buf_.flatbuffers_field_float64(pos_, 96, 0.0)
    /// Covariance Matrix component
    def CN_T() -> float:
        return buf_.flatbuffers_field_float64(pos_, 98, 0.0)
    /// Covariance Matrix component
    def CN_N() -> float:
        return buf_.flatbuffers_field_float64(pos_, 100, 0.0)
    /// Covariance Matrix component
    def CRDOT_R() -> float:
        return buf_.flatbuffers_field_float64(pos_, 102, 0.0)
    /// Covariance Matrix component
    def CRDOT_T() -> float:
        return buf_.flatbuffers_field_float64(pos_, 104, 0.0)
    /// Covariance Matrix component
    def CRDOT_N() -> float:
        return buf_.flatbuffers_field_float64(pos_, 106, 0.0)
    /// Covariance Matrix component
    def CRDOT_RDOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 108, 0.0)
    /// Covariance Matrix component
    def CTDOT_R() -> float:
        return buf_.flatbuffers_field_float64(pos_, 110, 0.0)
    /// Covariance Matrix component
    def CTDOT_T() -> float:
        return buf_.flatbuffers_field_float64(pos_, 112, 0.0)
    /// Covariance Matrix component
    def CTDOT_N() -> float:
        return buf_.flatbuffers_field_float64(pos_, 114, 0.0)
    /// Covariance Matrix component
    def CTDOT_RDOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 116, 0.0)
    /// Covariance Matrix component
    def CTDOT_TDOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 118, 0.0)
    /// Covariance Matrix component
    def CNDOT_R() -> float:
        return buf_.flatbuffers_field_float64(pos_, 120, 0.0)
    /// Covariance Matrix component
    def CNDOT_T() -> float:
        return buf_.flatbuffers_field_float64(pos_, 122, 0.0)
    /// Covariance Matrix component
    def CNDOT_N() -> float:
        return buf_.flatbuffers_field_float64(pos_, 124, 0.0)
    /// Covariance Matrix component
    def CNDOT_RDOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 126, 0.0)
    /// Covariance Matrix component
    def CNDOT_TDOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 128, 0.0)
    /// Covariance Matrix component
    def CNDOT_NDOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 130, 0.0)
    /// Covariance Matrix component
    def CDRG_R() -> float:
        return buf_.flatbuffers_field_float64(pos_, 132, 0.0)
    /// Covariance Matrix component
    def CDRG_T() -> float:
        return buf_.flatbuffers_field_float64(pos_, 134, 0.0)
    /// Covariance Matrix component
    def CDRG_N() -> float:
        return buf_.flatbuffers_field_float64(pos_, 136, 0.0)
    /// Covariance Matrix component
    def CDRG_RDOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 138, 0.0)
    /// Covariance Matrix component
    def CDRG_TDOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 140, 0.0)
    /// Covariance Matrix component
    def CDRG_NDOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 142, 0.0)
    /// Covariance Matrix component
    def CDRG_DRG() -> float:
        return buf_.flatbuffers_field_float64(pos_, 144, 0.0)
    /// Covariance Matrix component
    def CSRP_R() -> float:
        return buf_.flatbuffers_field_float64(pos_, 146, 0.0)
    /// Covariance Matrix component
    def CSRP_T() -> float:
        return buf_.flatbuffers_field_float64(pos_, 148, 0.0)
    /// Covariance Matrix component
    def CSRP_N() -> float:
        return buf_.flatbuffers_field_float64(pos_, 150, 0.0)
    /// Covariance Matrix component
    def CSRP_RDOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 152, 0.0)
    /// Covariance Matrix component
    def CSRP_TDOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 154, 0.0)
    /// Covariance Matrix component
    def CSRP_NDOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 156, 0.0)
    /// Covariance Matrix component
    def CSRP_DRG() -> float:
        return buf_.flatbuffers_field_float64(pos_, 158, 0.0)
    /// Covariance Matrix component
    def CSRP_SRP() -> float:
        return buf_.flatbuffers_field_float64(pos_, 160, 0.0)
    /// Covariance Matrix component
    def CTHR_R() -> float:
        return buf_.flatbuffers_field_float64(pos_, 162, 0.0)
    /// Covariance Matrix component
    def CTHR_T() -> float:
        return buf_.flatbuffers_field_float64(pos_, 164, 0.0)
    /// Covariance Matrix component
    def CTHR_N() -> float:
        return buf_.flatbuffers_field_float64(pos_, 166, 0.0)
    /// Covariance Matrix component
    def CTHR_RDOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 168, 0.0)
    /// Covariance Matrix component
    def CTHR_TDOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 170, 0.0)
    /// Covariance Matrix component
    def CTHR_NDOT() -> float:
        return buf_.flatbuffers_field_float64(pos_, 172, 0.0)
    /// Covariance Matrix component
    def CTHR_DRG() -> float:
        return buf_.flatbuffers_field_float64(pos_, 174, 0.0)
    /// Covariance Matrix component
    def CTHR_SRP() -> float:
        return buf_.flatbuffers_field_float64(pos_, 176, 0.0)
    /// Covariance Matrix component
    def CTHR_THR() -> float:
        return buf_.flatbuffers_field_float64(pos_, 178, 0.0)

def GetRootAsCDMObject(buf:string): return CDMObject { buf, buf.flatbuffers_indirect(0) }

struct CDMObjectBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(88)
        return this
    def add_COMMENT(COMMENT:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, COMMENT)
        return this
    def add_OBJECT(OBJECT:objectNumber):
        b_.PrependInt8Slot(1, OBJECT, 0)
        return this
    def add_OBJECT_DESIGNATOR(OBJECT_DESIGNATOR:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, OBJECT_DESIGNATOR)
        return this
    def add_CATALOG_NAME(CATALOG_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, CATALOG_NAME)
        return this
    def add_OBJECT_NAME(OBJECT_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, OBJECT_NAME)
        return this
    def add_INTERNATIONAL_DESIGNATOR(INTERNATIONAL_DESIGNATOR:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, INTERNATIONAL_DESIGNATOR)
        return this
    def add_OBJECT_TYPE(OBJECT_TYPE:objectType):
        b_.PrependInt8Slot(6, OBJECT_TYPE, 0)
        return this
    def add_OPERATOR_CONTACT_POSITION(OPERATOR_CONTACT_POSITION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(7, OPERATOR_CONTACT_POSITION)
        return this
    def add_OPERATOR_ORGANIZATION(OPERATOR_ORGANIZATION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(8, OPERATOR_ORGANIZATION)
        return this
    def add_EPHEMERIS_NAME(EPHEMERIS_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(9, EPHEMERIS_NAME)
        return this
    def add_COVARIANCE_METHOD(COVARIANCE_METHOD:covarianceMethod):
        b_.PrependInt8Slot(10, COVARIANCE_METHOD, 0)
        return this
    def add_MANEUVERABLE(MANEUVERABLE:maneuverableType):
        b_.PrependInt8Slot(11, MANEUVERABLE, 0)
        return this
    def add_ORBIT_CENTER(ORBIT_CENTER:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(12, ORBIT_CENTER)
        return this
    def add_REF_FRAME(REF_FRAME:referenceFrame):
        b_.PrependInt8Slot(13, REF_FRAME, 0)
        return this
    def add_GRAVITY_MODEL(GRAVITY_MODEL:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(14, GRAVITY_MODEL)
        return this
    def add_ATMOSPHERIC_MODEL(ATMOSPHERIC_MODEL:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(15, ATMOSPHERIC_MODEL)
        return this
    def add_N_BODY_PERTURBATIONS(N_BODY_PERTURBATIONS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(16, N_BODY_PERTURBATIONS)
        return this
    def add_SOLAR_RAD_PRESSURE(SOLAR_RAD_PRESSURE:bool):
        b_.PrependBoolSlot(17, SOLAR_RAD_PRESSURE, 0)
        return this
    def add_EARTH_TIDES(EARTH_TIDES:bool):
        b_.PrependBoolSlot(18, EARTH_TIDES, 0)
        return this
    def add_INTRACK_THRUST(INTRACK_THRUST:bool):
        b_.PrependBoolSlot(19, INTRACK_THRUST, 0)
        return this
    def add_TIME_LASTOB_START(TIME_LASTOB_START:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(20, TIME_LASTOB_START)
        return this
    def add_TIME_LASTOB_END(TIME_LASTOB_END:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(21, TIME_LASTOB_END)
        return this
    def add_RECOMMENDED_OD_SPAN(RECOMMENDED_OD_SPAN:float):
        b_.PrependFloat64Slot(22, RECOMMENDED_OD_SPAN, 0.0)
        return this
    def add_ACTUAL_OD_SPAN(ACTUAL_OD_SPAN:float):
        b_.PrependFloat64Slot(23, ACTUAL_OD_SPAN, 0.0)
        return this
    def add_OBS_AVAILABLE(OBS_AVAILABLE:int):
        b_.PrependUint32Slot(24, OBS_AVAILABLE, 0)
        return this
    def add_OBS_USED(OBS_USED:int):
        b_.PrependUint32Slot(25, OBS_USED, 0)
        return this
    def add_TRACKS_AVAILABLE(TRACKS_AVAILABLE:int):
        b_.PrependUint32Slot(26, TRACKS_AVAILABLE, 0)
        return this
    def add_TRACKS_USED(TRACKS_USED:int):
        b_.PrependUint32Slot(27, TRACKS_USED, 0)
        return this
    def add_RESIDUALS_ACCEPTED(RESIDUALS_ACCEPTED:float):
        b_.PrependFloat64Slot(28, RESIDUALS_ACCEPTED, 0.0)
        return this
    def add_WEIGHTED_RMS(WEIGHTED_RMS:float):
        b_.PrependFloat64Slot(29, WEIGHTED_RMS, 0.0)
        return this
    def add_AREA_PC(AREA_PC:float):
        b_.PrependFloat64Slot(30, AREA_PC, 0.0)
        return this
    def add_AREA_DRG(AREA_DRG:float):
        b_.PrependFloat64Slot(31, AREA_DRG, 0.0)
        return this
    def add_AREA_SRP(AREA_SRP:float):
        b_.PrependFloat64Slot(32, AREA_SRP, 0.0)
        return this
    def add_MASS(MASS:float):
        b_.PrependFloat64Slot(33, MASS, 0.0)
        return this
    def add_CR_AREA_OVER_MASS(CR_AREA_OVER_MASS:float):
        b_.PrependFloat64Slot(34, CR_AREA_OVER_MASS, 0.0)
        return this
    def add_THRUST_ACCELERATION(THRUST_ACCELERATION:float):
        b_.PrependFloat64Slot(35, THRUST_ACCELERATION, 0.0)
        return this
    def add_SEDR(SEDR:float):
        b_.PrependFloat64Slot(36, SEDR, 0.0)
        return this
    def add_X(X:float):
        b_.PrependFloat64Slot(37, X, 0.0)
        return this
    def add_Y(Y:float):
        b_.PrependFloat64Slot(38, Y, 0.0)
        return this
    def add_Z(Z:float):
        b_.PrependFloat64Slot(39, Z, 0.0)
        return this
    def add_X_DOT(X_DOT:float):
        b_.PrependFloat64Slot(40, X_DOT, 0.0)
        return this
    def add_Y_DOT(Y_DOT:float):
        b_.PrependFloat64Slot(41, Y_DOT, 0.0)
        return this
    def add_Z_DOT(Z_DOT:float):
        b_.PrependFloat64Slot(42, Z_DOT, 0.0)
        return this
    def add_CR_R(CR_R:float):
        b_.PrependFloat64Slot(43, CR_R, 0.0)
        return this
    def add_CT_R(CT_R:float):
        b_.PrependFloat64Slot(44, CT_R, 0.0)
        return this
    def add_CT_T(CT_T:float):
        b_.PrependFloat64Slot(45, CT_T, 0.0)
        return this
    def add_CN_R(CN_R:float):
        b_.PrependFloat64Slot(46, CN_R, 0.0)
        return this
    def add_CN_T(CN_T:float):
        b_.PrependFloat64Slot(47, CN_T, 0.0)
        return this
    def add_CN_N(CN_N:float):
        b_.PrependFloat64Slot(48, CN_N, 0.0)
        return this
    def add_CRDOT_R(CRDOT_R:float):
        b_.PrependFloat64Slot(49, CRDOT_R, 0.0)
        return this
    def add_CRDOT_T(CRDOT_T:float):
        b_.PrependFloat64Slot(50, CRDOT_T, 0.0)
        return this
    def add_CRDOT_N(CRDOT_N:float):
        b_.PrependFloat64Slot(51, CRDOT_N, 0.0)
        return this
    def add_CRDOT_RDOT(CRDOT_RDOT:float):
        b_.PrependFloat64Slot(52, CRDOT_RDOT, 0.0)
        return this
    def add_CTDOT_R(CTDOT_R:float):
        b_.PrependFloat64Slot(53, CTDOT_R, 0.0)
        return this
    def add_CTDOT_T(CTDOT_T:float):
        b_.PrependFloat64Slot(54, CTDOT_T, 0.0)
        return this
    def add_CTDOT_N(CTDOT_N:float):
        b_.PrependFloat64Slot(55, CTDOT_N, 0.0)
        return this
    def add_CTDOT_RDOT(CTDOT_RDOT:float):
        b_.PrependFloat64Slot(56, CTDOT_RDOT, 0.0)
        return this
    def add_CTDOT_TDOT(CTDOT_TDOT:float):
        b_.PrependFloat64Slot(57, CTDOT_TDOT, 0.0)
        return this
    def add_CNDOT_R(CNDOT_R:float):
        b_.PrependFloat64Slot(58, CNDOT_R, 0.0)
        return this
    def add_CNDOT_T(CNDOT_T:float):
        b_.PrependFloat64Slot(59, CNDOT_T, 0.0)
        return this
    def add_CNDOT_N(CNDOT_N:float):
        b_.PrependFloat64Slot(60, CNDOT_N, 0.0)
        return this
    def add_CNDOT_RDOT(CNDOT_RDOT:float):
        b_.PrependFloat64Slot(61, CNDOT_RDOT, 0.0)
        return this
    def add_CNDOT_TDOT(CNDOT_TDOT:float):
        b_.PrependFloat64Slot(62, CNDOT_TDOT, 0.0)
        return this
    def add_CNDOT_NDOT(CNDOT_NDOT:float):
        b_.PrependFloat64Slot(63, CNDOT_NDOT, 0.0)
        return this
    def add_CDRG_R(CDRG_R:float):
        b_.PrependFloat64Slot(64, CDRG_R, 0.0)
        return this
    def add_CDRG_T(CDRG_T:float):
        b_.PrependFloat64Slot(65, CDRG_T, 0.0)
        return this
    def add_CDRG_N(CDRG_N:float):
        b_.PrependFloat64Slot(66, CDRG_N, 0.0)
        return this
    def add_CDRG_RDOT(CDRG_RDOT:float):
        b_.PrependFloat64Slot(67, CDRG_RDOT, 0.0)
        return this
    def add_CDRG_TDOT(CDRG_TDOT:float):
        b_.PrependFloat64Slot(68, CDRG_TDOT, 0.0)
        return this
    def add_CDRG_NDOT(CDRG_NDOT:float):
        b_.PrependFloat64Slot(69, CDRG_NDOT, 0.0)
        return this
    def add_CDRG_DRG(CDRG_DRG:float):
        b_.PrependFloat64Slot(70, CDRG_DRG, 0.0)
        return this
    def add_CSRP_R(CSRP_R:float):
        b_.PrependFloat64Slot(71, CSRP_R, 0.0)
        return this
    def add_CSRP_T(CSRP_T:float):
        b_.PrependFloat64Slot(72, CSRP_T, 0.0)
        return this
    def add_CSRP_N(CSRP_N:float):
        b_.PrependFloat64Slot(73, CSRP_N, 0.0)
        return this
    def add_CSRP_RDOT(CSRP_RDOT:float):
        b_.PrependFloat64Slot(74, CSRP_RDOT, 0.0)
        return this
    def add_CSRP_TDOT(CSRP_TDOT:float):
        b_.PrependFloat64Slot(75, CSRP_TDOT, 0.0)
        return this
    def add_CSRP_NDOT(CSRP_NDOT:float):
        b_.PrependFloat64Slot(76, CSRP_NDOT, 0.0)
        return this
    def add_CSRP_DRG(CSRP_DRG:float):
        b_.PrependFloat64Slot(77, CSRP_DRG, 0.0)
        return this
    def add_CSRP_SRP(CSRP_SRP:float):
        b_.PrependFloat64Slot(78, CSRP_SRP, 0.0)
        return this
    def add_CTHR_R(CTHR_R:float):
        b_.PrependFloat64Slot(79, CTHR_R, 0.0)
        return this
    def add_CTHR_T(CTHR_T:float):
        b_.PrependFloat64Slot(80, CTHR_T, 0.0)
        return this
    def add_CTHR_N(CTHR_N:float):
        b_.PrependFloat64Slot(81, CTHR_N, 0.0)
        return this
    def add_CTHR_RDOT(CTHR_RDOT:float):
        b_.PrependFloat64Slot(82, CTHR_RDOT, 0.0)
        return this
    def add_CTHR_TDOT(CTHR_TDOT:float):
        b_.PrependFloat64Slot(83, CTHR_TDOT, 0.0)
        return this
    def add_CTHR_NDOT(CTHR_NDOT:float):
        b_.PrependFloat64Slot(84, CTHR_NDOT, 0.0)
        return this
    def add_CTHR_DRG(CTHR_DRG:float):
        b_.PrependFloat64Slot(85, CTHR_DRG, 0.0)
        return this
    def add_CTHR_SRP(CTHR_SRP:float):
        b_.PrependFloat64Slot(86, CTHR_SRP, 0.0)
        return this
    def add_CTHR_THR(CTHR_THR:float):
        b_.PrependFloat64Slot(87, CTHR_THR, 0.0)
        return this
    def end():
        return b_.EndObject()

class CDM : flatbuffers_handle
    /// The version of the CCSDS CDM standard used
    def CCSDS_CDM_VERS() -> float:
        return buf_.flatbuffers_field_float64(pos_, 4, 0.0)
    /// The date the CDM message was created
    def CREATION_DATE() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// The originator of the CDM message
    def ORIGINATOR() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// The intended recipient of the CDM message
    def MESSAGE_FOR() -> string:
        return buf_.flatbuffers_field_string(pos_, 10)
    /// A unique identifier for the CDM message
    def MESSAGE_ID() -> string:
        return buf_.flatbuffers_field_string(pos_, 12)
    /// Time of closest approach
    def TCA() -> string:
        return buf_.flatbuffers_field_string(pos_, 14)
    /// The miss distance between the two objects
    def MISS_DISTANCE() -> float:
        return buf_.flatbuffers_field_float64(pos_, 16, 0.0)
    /// The relative speed between the two objects
    def RELATIVE_SPEED() -> float:
        return buf_.flatbuffers_field_float64(pos_, 18, 0.0)
    /// The relative position R component
    def RELATIVE_POSITION_R() -> float:
        return buf_.flatbuffers_field_float64(pos_, 20, 0.0)
    /// The relative position T component
    def RELATIVE_POSITION_T() -> float:
        return buf_.flatbuffers_field_float64(pos_, 22, 0.0)
    /// The relative position N component
    def RELATIVE_POSITION_N() -> float:
        return buf_.flatbuffers_field_float64(pos_, 24, 0.0)
    /// The relative velocity R component
    def RELATIVE_VELOCITY_R() -> float:
        return buf_.flatbuffers_field_float64(pos_, 26, 0.0)
    /// The relative velocity T component
    def RELATIVE_VELOCITY_T() -> float:
        return buf_.flatbuffers_field_float64(pos_, 28, 0.0)
    /// The relative velocity N component
    def RELATIVE_VELOCITY_N() -> float:
        return buf_.flatbuffers_field_float64(pos_, 30, 0.0)
    /// The start time of the screening period
    def START_SCREEN_PERIOD() -> string:
        return buf_.flatbuffers_field_string(pos_, 32)
    /// The end time of the screening period
    def STOP_SCREEN_PERIOD() -> string:
        return buf_.flatbuffers_field_string(pos_, 34)
    /// The reference frame for the screening volume
    def SCREEN_VOLUME_FRAME() -> objectCenteredReferenceFrame:
        return objectCenteredReferenceFrame(buf_.flatbuffers_field_int8(pos_, 36, 0))
    /// The shape of the screening volume
    def SCREEN_VOLUME_SHAPE() -> screeningVolumeShape:
        return screeningVolumeShape(buf_.flatbuffers_field_int8(pos_, 38, 0))
    /// The X dimension of the screening volume
    def SCREEN_VOLUME_X() -> float:
        return buf_.flatbuffers_field_float64(pos_, 40, 0.0)
    /// The Y dimension of the screening volume
    def SCREEN_VOLUME_Y() -> float:
        return buf_.flatbuffers_field_float64(pos_, 42, 0.0)
    /// The Z dimension of the screening volume
    def SCREEN_VOLUME_Z() -> float:
        return buf_.flatbuffers_field_float64(pos_, 44, 0.0)
    /// The time the objects entered the screening volume
    def SCREEN_ENTRY_TIME() -> string:
        return buf_.flatbuffers_field_string(pos_, 46)
    /// The time the objects exited the screening volume
    def SCREEN_EXIT_TIME() -> string:
        return buf_.flatbuffers_field_string(pos_, 48)
    /// The probability of collision between the two objects
    def COLLISION_PROBABILITY() -> float:
        return buf_.flatbuffers_field_float64(pos_, 50, 0.0)
    /// The method used to calculate the collision probability
    def COLLISION_PROBABILITY_METHOD() -> string:
        return buf_.flatbuffers_field_string(pos_, 52)
    /// The first object in the CDM message
    def OBJECT1() -> CDMObject?:
        let o = buf_.flatbuffers_field_table(pos_, 54)
        return if o: CDMObject { buf_, o } else: nil
    /// The second object in the CDM message
    def OBJECT2() -> CDMObject?:
        let o = buf_.flatbuffers_field_table(pos_, 56)
        return if o: CDMObject { buf_, o } else: nil

def GetRootAsCDM(buf:string): return CDM { buf, buf.flatbuffers_indirect(0) }

struct CDMBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(27)
        return this
    def add_CCSDS_CDM_VERS(CCSDS_CDM_VERS:float):
        b_.PrependFloat64Slot(0, CCSDS_CDM_VERS, 0.0)
        return this
    def add_CREATION_DATE(CREATION_DATE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, CREATION_DATE)
        return this
    def add_ORIGINATOR(ORIGINATOR:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, ORIGINATOR)
        return this
    def add_MESSAGE_FOR(MESSAGE_FOR:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, MESSAGE_FOR)
        return this
    def add_MESSAGE_ID(MESSAGE_ID:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, MESSAGE_ID)
        return this
    def add_TCA(TCA:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, TCA)
        return this
    def add_MISS_DISTANCE(MISS_DISTANCE:float):
        b_.PrependFloat64Slot(6, MISS_DISTANCE, 0.0)
        return this
    def add_RELATIVE_SPEED(RELATIVE_SPEED:float):
        b_.PrependFloat64Slot(7, RELATIVE_SPEED, 0.0)
        return this
    def add_RELATIVE_POSITION_R(RELATIVE_POSITION_R:float):
        b_.PrependFloat64Slot(8, RELATIVE_POSITION_R, 0.0)
        return this
    def add_RELATIVE_POSITION_T(RELATIVE_POSITION_T:float):
        b_.PrependFloat64Slot(9, RELATIVE_POSITION_T, 0.0)
        return this
    def add_RELATIVE_POSITION_N(RELATIVE_POSITION_N:float):
        b_.PrependFloat64Slot(10, RELATIVE_POSITION_N, 0.0)
        return this
    def add_RELATIVE_VELOCITY_R(RELATIVE_VELOCITY_R:float):
        b_.PrependFloat64Slot(11, RELATIVE_VELOCITY_R, 0.0)
        return this
    def add_RELATIVE_VELOCITY_T(RELATIVE_VELOCITY_T:float):
        b_.PrependFloat64Slot(12, RELATIVE_VELOCITY_T, 0.0)
        return this
    def add_RELATIVE_VELOCITY_N(RELATIVE_VELOCITY_N:float):
        b_.PrependFloat64Slot(13, RELATIVE_VELOCITY_N, 0.0)
        return this
    def add_START_SCREEN_PERIOD(START_SCREEN_PERIOD:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(14, START_SCREEN_PERIOD)
        return this
    def add_STOP_SCREEN_PERIOD(STOP_SCREEN_PERIOD:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(15, STOP_SCREEN_PERIOD)
        return this
    def add_SCREEN_VOLUME_FRAME(SCREEN_VOLUME_FRAME:objectCenteredReferenceFrame):
        b_.PrependInt8Slot(16, SCREEN_VOLUME_FRAME, 0)
        return this
    def add_SCREEN_VOLUME_SHAPE(SCREEN_VOLUME_SHAPE:screeningVolumeShape):
        b_.PrependInt8Slot(17, SCREEN_VOLUME_SHAPE, 0)
        return this
    def add_SCREEN_VOLUME_X(SCREEN_VOLUME_X:float):
        b_.PrependFloat64Slot(18, SCREEN_VOLUME_X, 0.0)
        return this
    def add_SCREEN_VOLUME_Y(SCREEN_VOLUME_Y:float):
        b_.PrependFloat64Slot(19, SCREEN_VOLUME_Y, 0.0)
        return this
    def add_SCREEN_VOLUME_Z(SCREEN_VOLUME_Z:float):
        b_.PrependFloat64Slot(20, SCREEN_VOLUME_Z, 0.0)
        return this
    def add_SCREEN_ENTRY_TIME(SCREEN_ENTRY_TIME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(21, SCREEN_ENTRY_TIME)
        return this
    def add_SCREEN_EXIT_TIME(SCREEN_EXIT_TIME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(22, SCREEN_EXIT_TIME)
        return this
    def add_COLLISION_PROBABILITY(COLLISION_PROBABILITY:float):
        b_.PrependFloat64Slot(23, COLLISION_PROBABILITY, 0.0)
        return this
    def add_COLLISION_PROBABILITY_METHOD(COLLISION_PROBABILITY_METHOD:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(24, COLLISION_PROBABILITY_METHOD)
        return this
    def add_OBJECT1(OBJECT1:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(25, OBJECT1)
        return this
    def add_OBJECT2(OBJECT2:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(26, OBJECT2)
        return this
    def end():
        return b_.EndObject()

class CDMCOLLECTION : flatbuffers_handle
    /// A vector of CDM records
    def RECORDS(i:int) -> CDM:
        return CDM { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 4) + i * 4) }
    def RECORDS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 4)

def GetRootAsCDMCOLLECTION(buf:string): return CDMCOLLECTION { buf, buf.flatbuffers_indirect(0) }

struct CDMCOLLECTIONBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(1)
        return this
    def add_RECORDS(RECORDS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, RECORDS)
        return this
    def end():
        return b_.EndObject()

def CDMCOLLECTIONStartRECORDSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def CDMCOLLECTIONCreateRECORDSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

