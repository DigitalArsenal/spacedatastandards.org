// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class EOO

/// Electro-Optical Observation
class EOO : flatbuffers_handle
    /// Unique identifier for Earth Observation Observation
    def EOBSERVATION_ID() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Classification marking of the data
    def CLASSIFICATION() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// Observation time in UTC
    def OB_TIME() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// Quality of the correlation
    def CORR_QUALITY() -> float:
        return buf_.flatbuffers_field_float32(pos_, 10, 0.0)
    /// Identifier for the satellite on orbit
    def ID_ON_ORBIT() -> string:
        return buf_.flatbuffers_field_string(pos_, 12)
    /// Identifier for the sensor
    def SENSOR_ID() -> string:
        return buf_.flatbuffers_field_string(pos_, 14)
    /// Method of data collection
    def COLLECT_METHOD() -> string:
        return buf_.flatbuffers_field_string(pos_, 16)
    /// NORAD catalog identifier for the satellite
    def NORAD_CAT_ID() -> int:
        return buf_.flatbuffers_field_int32(pos_, 18, 0)
    /// Identifier for the task
    def TASK_ID() -> string:
        return buf_.flatbuffers_field_string(pos_, 20)
    /// Identifier for the transaction
    def TRANSACTION_ID() -> string:
        return buf_.flatbuffers_field_string(pos_, 22)
    /// Identifier for the track
    def TRACK_ID() -> string:
        return buf_.flatbuffers_field_string(pos_, 24)
    /// Position of the observation
    def OB_POSITION() -> string:
        return buf_.flatbuffers_field_string(pos_, 26)
    /// Original object identifier
    def ORIG_OBJECT_ID() -> string:
        return buf_.flatbuffers_field_string(pos_, 28)
    /// Original sensor identifier
    def ORIG_SENSOR_ID() -> string:
        return buf_.flatbuffers_field_string(pos_, 30)
    /// Universal Coordinated Time flag
    def UCT() -> bool:
        return bool(buf_.flatbuffers_field_int8(pos_, 32, 0))
    /// Azimuth angle
    def AZIMUTH() -> float:
        return buf_.flatbuffers_field_float32(pos_, 34, 0.0)
    /// Uncertainty in azimuth angle
    def AZIMUTH_UNC() -> float:
        return buf_.flatbuffers_field_float32(pos_, 36, 0.0)
    /// Bias in azimuth angle
    def AZIMUTH_BIAS() -> float:
        return buf_.flatbuffers_field_float32(pos_, 38, 0.0)
    /// Rate of change in azimuth
    def AZIMUTH_RATE() -> float:
        return buf_.flatbuffers_field_float32(pos_, 40, 0.0)
    /// Elevation angle
    def ELEVATION() -> float:
        return buf_.flatbuffers_field_float32(pos_, 42, 0.0)
    /// Uncertainty in elevation angle
    def ELEVATION_UNC() -> float:
        return buf_.flatbuffers_field_float32(pos_, 44, 0.0)
    /// Bias in elevation angle
    def ELEVATION_BIAS() -> float:
        return buf_.flatbuffers_field_float32(pos_, 46, 0.0)
    /// Rate of change in elevation
    def ELEVATION_RATE() -> float:
        return buf_.flatbuffers_field_float32(pos_, 48, 0.0)
    /// Range to the target
    def RANGE() -> float:
        return buf_.flatbuffers_field_float32(pos_, 50, 0.0)
    /// Uncertainty in range
    def RANGE_UNC() -> float:
        return buf_.flatbuffers_field_float32(pos_, 52, 0.0)
    /// Bias in range measurement
    def RANGE_BIAS() -> float:
        return buf_.flatbuffers_field_float32(pos_, 54, 0.0)
    /// Rate of change in range
    def RANGE_RATE() -> float:
        return buf_.flatbuffers_field_float32(pos_, 56, 0.0)
    /// Uncertainty in range rate
    def RANGE_RATE_UNC() -> float:
        return buf_.flatbuffers_field_float32(pos_, 58, 0.0)
    /// Right ascension
    def RA() -> float:
        return buf_.flatbuffers_field_float32(pos_, 60, 0.0)
    /// Rate of change in right ascension
    def RA_RATE() -> float:
        return buf_.flatbuffers_field_float32(pos_, 62, 0.0)
    /// Uncertainty in right ascension
    def RA_UNC() -> float:
        return buf_.flatbuffers_field_float32(pos_, 64, 0.0)
    /// Bias in right ascension
    def RA_BIAS() -> float:
        return buf_.flatbuffers_field_float32(pos_, 66, 0.0)
    /// Declination angle
    def DECLINATION() -> float:
        return buf_.flatbuffers_field_float32(pos_, 68, 0.0)
    /// Rate of change in declination
    def DECLINATION_RATE() -> float:
        return buf_.flatbuffers_field_float32(pos_, 70, 0.0)
    /// Uncertainty in declination
    def DECLINATION_UNC() -> float:
        return buf_.flatbuffers_field_float32(pos_, 72, 0.0)
    /// Bias in declination
    def DECLINATION_BIAS() -> float:
        return buf_.flatbuffers_field_float32(pos_, 74, 0.0)
    /// X-component of line-of-sight vector
    def LOSX() -> float:
        return buf_.flatbuffers_field_float32(pos_, 76, 0.0)
    /// Y-component of line-of-sight vector
    def LOSY() -> float:
        return buf_.flatbuffers_field_float32(pos_, 78, 0.0)
    /// Z-component of line-of-sight vector
    def LOSZ() -> float:
        return buf_.flatbuffers_field_float32(pos_, 80, 0.0)
    /// Uncertainty in line-of-sight vector
    def LOS_UNC() -> float:
        return buf_.flatbuffers_field_float32(pos_, 82, 0.0)
    /// X-component of line-of-sight velocity
    def LOSXVEL() -> float:
        return buf_.flatbuffers_field_float32(pos_, 84, 0.0)
    /// Y-component of line-of-sight velocity
    def LOSYVEL() -> float:
        return buf_.flatbuffers_field_float32(pos_, 86, 0.0)
    /// Z-component of line-of-sight velocity
    def LOSZVEL() -> float:
        return buf_.flatbuffers_field_float32(pos_, 88, 0.0)
    /// Latitude of sensor
    def SENLAT() -> float:
        return buf_.flatbuffers_field_float32(pos_, 90, 0.0)
    /// Longitude of sensor
    def SENLON() -> float:
        return buf_.flatbuffers_field_float32(pos_, 92, 0.0)
    /// Altitude of sensor
    def SENALT() -> float:
        return buf_.flatbuffers_field_float32(pos_, 94, 0.0)
    /// X-coordinate of sensor position
    def SENX() -> float:
        return buf_.flatbuffers_field_float32(pos_, 96, 0.0)
    /// Y-coordinate of sensor position
    def SENY() -> float:
        return buf_.flatbuffers_field_float32(pos_, 98, 0.0)
    /// Z-coordinate of sensor position
    def SENZ() -> float:
        return buf_.flatbuffers_field_float32(pos_, 100, 0.0)
    /// Number of fields of view
    def FOV_COUNT() -> int:
        return buf_.flatbuffers_field_int32(pos_, 102, 0)
    /// Duration of the exposure
    def EXP_DURATION() -> float:
        return buf_.flatbuffers_field_float32(pos_, 104, 0.0)
    /// Zero-point displacement
    def ZEROPTD() -> float:
        return buf_.flatbuffers_field_float32(pos_, 106, 0.0)
    /// Net object signal
    def NET_OBJ_SIG() -> float:
        return buf_.flatbuffers_field_float32(pos_, 108, 0.0)
    /// Uncertainty in net object signal
    def NET_OBJ_SIG_UNC() -> float:
        return buf_.flatbuffers_field_float32(pos_, 110, 0.0)
    /// Magnitude of the observation
    def MAG() -> float:
        return buf_.flatbuffers_field_float32(pos_, 112, 0.0)
    /// Uncertainty in magnitude
    def MAG_UNC() -> float:
        return buf_.flatbuffers_field_float32(pos_, 114, 0.0)
    /// Normalized range for magnitude
    def MAG_NORM_RANGE() -> float:
        return buf_.flatbuffers_field_float32(pos_, 116, 0.0)
    /// Geocentric latitude
    def GEOLAT() -> float:
        return buf_.flatbuffers_field_float32(pos_, 118, 0.0)
    /// Geocentric longitude
    def GEOLON() -> float:
        return buf_.flatbuffers_field_float32(pos_, 120, 0.0)
    /// Geocentric altitude
    def GEOALT() -> float:
        return buf_.flatbuffers_field_float32(pos_, 122, 0.0)
    /// Geocentric range
    def GEORANGE() -> float:
        return buf_.flatbuffers_field_float32(pos_, 124, 0.0)
    /// Sky background level
    def SKY_BKGRND() -> float:
        return buf_.flatbuffers_field_float32(pos_, 126, 0.0)
    /// Primary extinction
    def PRIMARY_EXTINCTION() -> float:
        return buf_.flatbuffers_field_float32(pos_, 128, 0.0)
    /// Uncertainty in primary extinction
    def PRIMARY_EXTINCTION_UNC() -> float:
        return buf_.flatbuffers_field_float32(pos_, 130, 0.0)
    /// Solar phase angle
    def SOLAR_PHASE_ANGLE() -> float:
        return buf_.flatbuffers_field_float32(pos_, 132, 0.0)
    /// Solar equatorial phase angle
    def SOLAR_EQ_PHASE_ANGLE() -> float:
        return buf_.flatbuffers_field_float32(pos_, 134, 0.0)
    /// Solar declination angle
    def SOLAR_DEC_ANGLE() -> float:
        return buf_.flatbuffers_field_float32(pos_, 136, 0.0)
    /// Shutter delay
    def SHUTTER_DELAY() -> float:
        return buf_.flatbuffers_field_float32(pos_, 138, 0.0)
    /// Timing bias
    def TIMING_BIAS() -> float:
        return buf_.flatbuffers_field_float32(pos_, 140, 0.0)
    /// URI of the raw data file
    def RAW_FILE_URI() -> string:
        return buf_.flatbuffers_field_string(pos_, 142)
    /// Intensity of the observation
    def INTENSITY() -> float:
        return buf_.flatbuffers_field_float32(pos_, 144, 0.0)
    /// Background intensity
    def BG_INTENSITY() -> float:
        return buf_.flatbuffers_field_float32(pos_, 146, 0.0)
    /// Descriptor of the provided data
    def DESCRIPTOR() -> string:
        return buf_.flatbuffers_field_string(pos_, 148)
    /// Source of the data
    def SOURCE() -> string:
        return buf_.flatbuffers_field_string(pos_, 150)
    /// Origin of the data
    def ORIGIN() -> string:
        return buf_.flatbuffers_field_string(pos_, 152)
    /// Mode of the data
    def DATA_MODE() -> string:
        return buf_.flatbuffers_field_string(pos_, 154)
    /// Creation time of the record
    def CREATED_AT() -> string:
        return buf_.flatbuffers_field_string(pos_, 156)
    /// User who created the record
    def CREATED_BY() -> string:
        return buf_.flatbuffers_field_string(pos_, 158)
    /// Reference frame of the observation
    def REFERENCE_FRAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 160)
    /// Reference frame of the sensor
    def SEN_REFERENCE_FRAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 162)
    /// Flag for umbra (total eclipse)
    def UMBRA() -> bool:
        return bool(buf_.flatbuffers_field_int8(pos_, 164, 0))
    /// Flag for penumbra (partial eclipse)
    def PENUMBRA() -> bool:
        return bool(buf_.flatbuffers_field_int8(pos_, 166, 0))
    /// Original network identifier
    def ORIG_NETWORK() -> string:
        return buf_.flatbuffers_field_string(pos_, 168)
    /// Data link source
    def SOURCE_DL() -> string:
        return buf_.flatbuffers_field_string(pos_, 170)
    /// Type of the observation
    def TYPE() -> string:
        return buf_.flatbuffers_field_string(pos_, 172)

def GetRootAsEOO(buf:string): return EOO { buf, buf.flatbuffers_indirect(0) }

struct EOOBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(85)
        return this
    def add_EOBSERVATION_ID(EOBSERVATION_ID:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, EOBSERVATION_ID)
        return this
    def add_CLASSIFICATION(CLASSIFICATION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, CLASSIFICATION)
        return this
    def add_OB_TIME(OB_TIME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, OB_TIME)
        return this
    def add_CORR_QUALITY(CORR_QUALITY:float):
        b_.PrependFloat32Slot(3, CORR_QUALITY, 0.0)
        return this
    def add_ID_ON_ORBIT(ID_ON_ORBIT:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, ID_ON_ORBIT)
        return this
    def add_SENSOR_ID(SENSOR_ID:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, SENSOR_ID)
        return this
    def add_COLLECT_METHOD(COLLECT_METHOD:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(6, COLLECT_METHOD)
        return this
    def add_NORAD_CAT_ID(NORAD_CAT_ID:int):
        b_.PrependInt32Slot(7, NORAD_CAT_ID, 0)
        return this
    def add_TASK_ID(TASK_ID:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(8, TASK_ID)
        return this
    def add_TRANSACTION_ID(TRANSACTION_ID:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(9, TRANSACTION_ID)
        return this
    def add_TRACK_ID(TRACK_ID:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(10, TRACK_ID)
        return this
    def add_OB_POSITION(OB_POSITION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(11, OB_POSITION)
        return this
    def add_ORIG_OBJECT_ID(ORIG_OBJECT_ID:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(12, ORIG_OBJECT_ID)
        return this
    def add_ORIG_SENSOR_ID(ORIG_SENSOR_ID:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(13, ORIG_SENSOR_ID)
        return this
    def add_UCT(UCT:bool):
        b_.PrependBoolSlot(14, UCT, 0)
        return this
    def add_AZIMUTH(AZIMUTH:float):
        b_.PrependFloat32Slot(15, AZIMUTH, 0.0)
        return this
    def add_AZIMUTH_UNC(AZIMUTH_UNC:float):
        b_.PrependFloat32Slot(16, AZIMUTH_UNC, 0.0)
        return this
    def add_AZIMUTH_BIAS(AZIMUTH_BIAS:float):
        b_.PrependFloat32Slot(17, AZIMUTH_BIAS, 0.0)
        return this
    def add_AZIMUTH_RATE(AZIMUTH_RATE:float):
        b_.PrependFloat32Slot(18, AZIMUTH_RATE, 0.0)
        return this
    def add_ELEVATION(ELEVATION:float):
        b_.PrependFloat32Slot(19, ELEVATION, 0.0)
        return this
    def add_ELEVATION_UNC(ELEVATION_UNC:float):
        b_.PrependFloat32Slot(20, ELEVATION_UNC, 0.0)
        return this
    def add_ELEVATION_BIAS(ELEVATION_BIAS:float):
        b_.PrependFloat32Slot(21, ELEVATION_BIAS, 0.0)
        return this
    def add_ELEVATION_RATE(ELEVATION_RATE:float):
        b_.PrependFloat32Slot(22, ELEVATION_RATE, 0.0)
        return this
    def add_RANGE(RANGE:float):
        b_.PrependFloat32Slot(23, RANGE, 0.0)
        return this
    def add_RANGE_UNC(RANGE_UNC:float):
        b_.PrependFloat32Slot(24, RANGE_UNC, 0.0)
        return this
    def add_RANGE_BIAS(RANGE_BIAS:float):
        b_.PrependFloat32Slot(25, RANGE_BIAS, 0.0)
        return this
    def add_RANGE_RATE(RANGE_RATE:float):
        b_.PrependFloat32Slot(26, RANGE_RATE, 0.0)
        return this
    def add_RANGE_RATE_UNC(RANGE_RATE_UNC:float):
        b_.PrependFloat32Slot(27, RANGE_RATE_UNC, 0.0)
        return this
    def add_RA(RA:float):
        b_.PrependFloat32Slot(28, RA, 0.0)
        return this
    def add_RA_RATE(RA_RATE:float):
        b_.PrependFloat32Slot(29, RA_RATE, 0.0)
        return this
    def add_RA_UNC(RA_UNC:float):
        b_.PrependFloat32Slot(30, RA_UNC, 0.0)
        return this
    def add_RA_BIAS(RA_BIAS:float):
        b_.PrependFloat32Slot(31, RA_BIAS, 0.0)
        return this
    def add_DECLINATION(DECLINATION:float):
        b_.PrependFloat32Slot(32, DECLINATION, 0.0)
        return this
    def add_DECLINATION_RATE(DECLINATION_RATE:float):
        b_.PrependFloat32Slot(33, DECLINATION_RATE, 0.0)
        return this
    def add_DECLINATION_UNC(DECLINATION_UNC:float):
        b_.PrependFloat32Slot(34, DECLINATION_UNC, 0.0)
        return this
    def add_DECLINATION_BIAS(DECLINATION_BIAS:float):
        b_.PrependFloat32Slot(35, DECLINATION_BIAS, 0.0)
        return this
    def add_LOSX(LOSX:float):
        b_.PrependFloat32Slot(36, LOSX, 0.0)
        return this
    def add_LOSY(LOSY:float):
        b_.PrependFloat32Slot(37, LOSY, 0.0)
        return this
    def add_LOSZ(LOSZ:float):
        b_.PrependFloat32Slot(38, LOSZ, 0.0)
        return this
    def add_LOS_UNC(LOS_UNC:float):
        b_.PrependFloat32Slot(39, LOS_UNC, 0.0)
        return this
    def add_LOSXVEL(LOSXVEL:float):
        b_.PrependFloat32Slot(40, LOSXVEL, 0.0)
        return this
    def add_LOSYVEL(LOSYVEL:float):
        b_.PrependFloat32Slot(41, LOSYVEL, 0.0)
        return this
    def add_LOSZVEL(LOSZVEL:float):
        b_.PrependFloat32Slot(42, LOSZVEL, 0.0)
        return this
    def add_SENLAT(SENLAT:float):
        b_.PrependFloat32Slot(43, SENLAT, 0.0)
        return this
    def add_SENLON(SENLON:float):
        b_.PrependFloat32Slot(44, SENLON, 0.0)
        return this
    def add_SENALT(SENALT:float):
        b_.PrependFloat32Slot(45, SENALT, 0.0)
        return this
    def add_SENX(SENX:float):
        b_.PrependFloat32Slot(46, SENX, 0.0)
        return this
    def add_SENY(SENY:float):
        b_.PrependFloat32Slot(47, SENY, 0.0)
        return this
    def add_SENZ(SENZ:float):
        b_.PrependFloat32Slot(48, SENZ, 0.0)
        return this
    def add_FOV_COUNT(FOV_COUNT:int):
        b_.PrependInt32Slot(49, FOV_COUNT, 0)
        return this
    def add_EXP_DURATION(EXP_DURATION:float):
        b_.PrependFloat32Slot(50, EXP_DURATION, 0.0)
        return this
    def add_ZEROPTD(ZEROPTD:float):
        b_.PrependFloat32Slot(51, ZEROPTD, 0.0)
        return this
    def add_NET_OBJ_SIG(NET_OBJ_SIG:float):
        b_.PrependFloat32Slot(52, NET_OBJ_SIG, 0.0)
        return this
    def add_NET_OBJ_SIG_UNC(NET_OBJ_SIG_UNC:float):
        b_.PrependFloat32Slot(53, NET_OBJ_SIG_UNC, 0.0)
        return this
    def add_MAG(MAG:float):
        b_.PrependFloat32Slot(54, MAG, 0.0)
        return this
    def add_MAG_UNC(MAG_UNC:float):
        b_.PrependFloat32Slot(55, MAG_UNC, 0.0)
        return this
    def add_MAG_NORM_RANGE(MAG_NORM_RANGE:float):
        b_.PrependFloat32Slot(56, MAG_NORM_RANGE, 0.0)
        return this
    def add_GEOLAT(GEOLAT:float):
        b_.PrependFloat32Slot(57, GEOLAT, 0.0)
        return this
    def add_GEOLON(GEOLON:float):
        b_.PrependFloat32Slot(58, GEOLON, 0.0)
        return this
    def add_GEOALT(GEOALT:float):
        b_.PrependFloat32Slot(59, GEOALT, 0.0)
        return this
    def add_GEORANGE(GEORANGE:float):
        b_.PrependFloat32Slot(60, GEORANGE, 0.0)
        return this
    def add_SKY_BKGRND(SKY_BKGRND:float):
        b_.PrependFloat32Slot(61, SKY_BKGRND, 0.0)
        return this
    def add_PRIMARY_EXTINCTION(PRIMARY_EXTINCTION:float):
        b_.PrependFloat32Slot(62, PRIMARY_EXTINCTION, 0.0)
        return this
    def add_PRIMARY_EXTINCTION_UNC(PRIMARY_EXTINCTION_UNC:float):
        b_.PrependFloat32Slot(63, PRIMARY_EXTINCTION_UNC, 0.0)
        return this
    def add_SOLAR_PHASE_ANGLE(SOLAR_PHASE_ANGLE:float):
        b_.PrependFloat32Slot(64, SOLAR_PHASE_ANGLE, 0.0)
        return this
    def add_SOLAR_EQ_PHASE_ANGLE(SOLAR_EQ_PHASE_ANGLE:float):
        b_.PrependFloat32Slot(65, SOLAR_EQ_PHASE_ANGLE, 0.0)
        return this
    def add_SOLAR_DEC_ANGLE(SOLAR_DEC_ANGLE:float):
        b_.PrependFloat32Slot(66, SOLAR_DEC_ANGLE, 0.0)
        return this
    def add_SHUTTER_DELAY(SHUTTER_DELAY:float):
        b_.PrependFloat32Slot(67, SHUTTER_DELAY, 0.0)
        return this
    def add_TIMING_BIAS(TIMING_BIAS:float):
        b_.PrependFloat32Slot(68, TIMING_BIAS, 0.0)
        return this
    def add_RAW_FILE_URI(RAW_FILE_URI:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(69, RAW_FILE_URI)
        return this
    def add_INTENSITY(INTENSITY:float):
        b_.PrependFloat32Slot(70, INTENSITY, 0.0)
        return this
    def add_BG_INTENSITY(BG_INTENSITY:float):
        b_.PrependFloat32Slot(71, BG_INTENSITY, 0.0)
        return this
    def add_DESCRIPTOR(DESCRIPTOR:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(72, DESCRIPTOR)
        return this
    def add_SOURCE(SOURCE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(73, SOURCE)
        return this
    def add_ORIGIN(ORIGIN:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(74, ORIGIN)
        return this
    def add_DATA_MODE(DATA_MODE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(75, DATA_MODE)
        return this
    def add_CREATED_AT(CREATED_AT:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(76, CREATED_AT)
        return this
    def add_CREATED_BY(CREATED_BY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(77, CREATED_BY)
        return this
    def add_REFERENCE_FRAME(REFERENCE_FRAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(78, REFERENCE_FRAME)
        return this
    def add_SEN_REFERENCE_FRAME(SEN_REFERENCE_FRAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(79, SEN_REFERENCE_FRAME)
        return this
    def add_UMBRA(UMBRA:bool):
        b_.PrependBoolSlot(80, UMBRA, 0)
        return this
    def add_PENUMBRA(PENUMBRA:bool):
        b_.PrependBoolSlot(81, PENUMBRA, 0)
        return this
    def add_ORIG_NETWORK(ORIG_NETWORK:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(82, ORIG_NETWORK)
        return this
    def add_SOURCE_DL(SOURCE_DL:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(83, SOURCE_DL)
        return this
    def add_TYPE(TYPE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(84, TYPE)
        return this
    def end():
        return b_.EndObject()

