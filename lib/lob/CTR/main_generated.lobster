// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class CTR

class CTRCOLLECTION

/// Country Identity Message
class CTR : flatbuffers_handle
    /// ISO 3166 Numeric code
    def ID() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Country name
    def NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// GENC code
    def GENC_CODE() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// ISO 3166 Alpha-2 code
    def ALPHA_2_CODE() -> string:
        return buf_.flatbuffers_field_string(pos_, 10)
    /// ISO 3166 Alpha-3 code
    def ALPHA_3_CODE() -> string:
        return buf_.flatbuffers_field_string(pos_, 12)
    /// Stanag code
    def STANAG_CODE() -> string:
        return buf_.flatbuffers_field_string(pos_, 14)
    /// Internet country code top-level domain (ccTLD)
    def INTERNET_CCTLD() -> string:
        return buf_.flatbuffers_field_string(pos_, 16)
    /// Additional comments
    def COMMENT() -> string:
        return buf_.flatbuffers_field_string(pos_, 18)

def GetRootAsCTR(buf:string): return CTR { buf, buf.flatbuffers_indirect(0) }

struct CTRBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(8)
        return this
    def add_ID(ID:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, ID)
        return this
    def add_NAME(NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, NAME)
        return this
    def add_GENC_CODE(GENC_CODE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, GENC_CODE)
        return this
    def add_ALPHA_2_CODE(ALPHA_2_CODE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, ALPHA_2_CODE)
        return this
    def add_ALPHA_3_CODE(ALPHA_3_CODE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, ALPHA_3_CODE)
        return this
    def add_STANAG_CODE(STANAG_CODE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, STANAG_CODE)
        return this
    def add_INTERNET_CCTLD(INTERNET_CCTLD:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(6, INTERNET_CCTLD)
        return this
    def add_COMMENT(COMMENT:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(7, COMMENT)
        return this
    def end():
        return b_.EndObject()

class CTRCOLLECTION : flatbuffers_handle
    def RECORDS(i:int) -> CTR:
        return CTR { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 4) + i * 4) }
    def RECORDS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 4)

def GetRootAsCTRCOLLECTION(buf:string): return CTRCOLLECTION { buf, buf.flatbuffers_indirect(0) }

struct CTRCOLLECTIONBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(1)
        return this
    def add_RECORDS(RECORDS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, RECORDS)
        return this
    def end():
        return b_.EndObject()

def CTRCOLLECTIONStartRECORDSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def CTRCOLLECTIONCreateRECORDSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

