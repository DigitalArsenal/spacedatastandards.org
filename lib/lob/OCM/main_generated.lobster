// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class Header

class Metadata

class StateVector

class PhysicalProperties

class Perturbations

class Maneuver

class OrbitDetermination

class UserDefinedParameters

class OCM

class Header : flatbuffers.handle
    /// Format version in the form of 'x.y', where 'y' is incremented for minor changes, and 'x' for major changes.
    def CCSDS_OCM_VERS() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Comments (a contiguous set of one or more comment lines may be provided immediately after the version number).
    def COMMENT(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 6) + i * 4)
    def COMMENT_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 6)
    /// User-defined free-text message classification/caveats of this OCM.
    def CLASSIFICATION() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// File creation date/time in UTC.
    def CREATION_DATE() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Creating agency or operator.
    def ORIGINATOR() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Free-text field containing an ID that uniquely identifies a message from this originator.
    def MESSAGE_ID() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)

def GetRootAsHeader(buf:string): return Header { buf, flatbuffers.indirect(buf, 0) }

struct HeaderBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(6)
        return this
    def add_CCSDS_OCM_VERS(CCSDS_OCM_VERS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, CCSDS_OCM_VERS)
        return this
    def add_COMMENT(COMMENT:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, COMMENT)
        return this
    def add_CLASSIFICATION(CLASSIFICATION:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, CLASSIFICATION)
        return this
    def add_CREATION_DATE(CREATION_DATE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, CREATION_DATE)
        return this
    def add_ORIGINATOR(ORIGINATOR:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, ORIGINATOR)
        return this
    def add_MESSAGE_ID(MESSAGE_ID:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, MESSAGE_ID)
        return this
    def end():
        return b_.EndObject()

def HeaderStartCOMMENTVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def HeaderCreateCOMMENTVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

class Metadata : flatbuffers.handle
    /// Comments in the Metadata section.
    def COMMENT(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 4) + i * 4)
    def COMMENT_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 4)
    /// Free-text field containing the name of the object.
    def OBJECT_NAME() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// International designator for the object as assigned by COSPAR.
    def INTERNATIONAL_DESIGNATOR() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Satellite catalog source from which 'OBJECT_DESIGNATOR' was obtained.
    def CATALOG_NAME() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Unique satellite identification designator from the catalog.
    def OBJECT_DESIGNATOR() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Alternate names of this space object.
    def ALTERNATE_NAMES(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 14) + i * 4)
    def ALTERNATE_NAMES_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 14)
    /// Originator or programmatic Point-of-Contact (PoC) for OCM.
    def ORIGINATOR_POC() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Contact position of the originator PoC.
    def ORIGINATOR_POSITION() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Originator PoC phone number.
    def ORIGINATOR_PHONE() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Originator PoC email address.
    def ORIGINATOR_EMAIL() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Originator's physical address information.
    def ORIGINATOR_ADDRESS() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Creating agency or operator for technical contact.
    def TECH_ORG() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Technical Point-of-Contact (PoC) for OCM.
    def TECH_POC() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Contact position of the technical PoC.
    def TECH_POSITION() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Technical PoC phone number.
    def TECH_PHONE() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Technical PoC email address.
    def TECH_EMAIL() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Technical PoC physical address information.
    def TECH_ADDRESS() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// ID that uniquely identifies the previous message from this originator.
    def PREVIOUS_MESSAGE_ID() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// ID that uniquely identifies the next message from this originator.
    def NEXT_MESSAGE_ID() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Unique identifier of Attitude Data Messages linked to this OCM.
    def ADM_MSG_LINK() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Unique identifier of Conjunction Data Messages linked to this OCM.
    def CDM_MSG_LINK() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Unique identifier of Pointing Request Messages linked to this OCM.
    def PRM_MSG_LINK() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Unique identifier of Reentry Data Messages linked to this OCM.
    def RDM_MSG_LINK() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// List of Tracking Data Messages upon which this orbit determination is based.
    def TDM_MSG_LINK(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 50) + i * 4)
    def TDM_MSG_LINK_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 50)
    /// Operator of the space object.
    def OPERATOR() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Owner of the space object.
    def OWNER() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Country where the space object owner is based.
    def COUNTRY() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Name of the constellation to which this space object belongs.
    def CONSTELLATION() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Specification of the type of object (e.g., PAYLOAD, ROCKET BODY, DEBRIS).
    def OBJECT_TYPE() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Time system for all absolute time stamps in this OCM, including EPOCH_TZERO.
    def TIME_SYSTEM() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Default epoch to which all relative times are referenced in data blocks.
    def EPOCH_TZERO() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Specification of the operational status of the space object.
    def OPS_STATUS() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Specification of the type of orbit (e.g., GEO, LEO).
    def ORBIT_CATEGORY() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// List of elements of information data blocks included in this message.
    def OCM_DATA_ELEMENTS(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 70) + i * 4)
    def OCM_DATA_ELEMENTS_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 70)
    /// Number of spacecraft clock counts at EPOCH_TZERO (used if TIME_SYSTEM is SCLK).
    def SCLK_OFFSET_AT_EPOCH() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// Number of clock seconds occurring during one SI second (used if TIME_SYSTEM is SCLK).
    def SCLK_SEC_PER_SI_SEC() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// Creation epoch of the previous message from this originator.
    def PREVIOUS_MESSAGE_EPOCH() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Anticipated (or actual) epoch of the next message from this originator.
    def NEXT_MESSAGE_EPOCH() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// Time of the earliest data contained in the OCM.
    def START_TIME() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// Time of the latest data contained in the OCM.
    def STOP_TIME() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// Span of time that the OCM covers, measured in days.
    def TIME_SPAN() -> float:
        return flatbuffers.field_float64(buf_, pos_, 84, 0.0)
    /// Difference (TAI - UTC) in seconds at EPOCH_TZERO.
    def TAIMUTC_AT_TZERO() -> float:
        return flatbuffers.field_float64(buf_, pos_, 86, 0.0)
    /// Epoch of next leap second.
    def NEXT_LEAP_EPOCH() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// Difference (TAI - UTC) in seconds at NEXT_LEAP_EPOCH.
    def NEXT_LEAP_TAIMUTC() -> float:
        return flatbuffers.field_float64(buf_, pos_, 90, 0.0)
    /// Difference (UT1 - UTC) in seconds at EPOCH_TZERO.
    def UT1MUTC_AT_TZERO() -> float:
        return flatbuffers.field_float64(buf_, pos_, 92, 0.0)
    /// Source and version of Earth Orientation Parameters used.
    def EOP_SOURCE() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// Method used to select or interpolate sequential EOP data.
    def INTERP_METHOD_EOP() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// Source and version of celestial body ephemeris data used.
    def CELESTIAL_SOURCE() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)

def GetRootAsMetadata(buf:string): return Metadata { buf, flatbuffers.indirect(buf, 0) }

struct MetadataBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(48)
        return this
    def add_COMMENT(COMMENT:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, COMMENT)
        return this
    def add_OBJECT_NAME(OBJECT_NAME:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, OBJECT_NAME)
        return this
    def add_INTERNATIONAL_DESIGNATOR(INTERNATIONAL_DESIGNATOR:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, INTERNATIONAL_DESIGNATOR)
        return this
    def add_CATALOG_NAME(CATALOG_NAME:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, CATALOG_NAME)
        return this
    def add_OBJECT_DESIGNATOR(OBJECT_DESIGNATOR:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, OBJECT_DESIGNATOR)
        return this
    def add_ALTERNATE_NAMES(ALTERNATE_NAMES:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, ALTERNATE_NAMES)
        return this
    def add_ORIGINATOR_POC(ORIGINATOR_POC:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, ORIGINATOR_POC)
        return this
    def add_ORIGINATOR_POSITION(ORIGINATOR_POSITION:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, ORIGINATOR_POSITION)
        return this
    def add_ORIGINATOR_PHONE(ORIGINATOR_PHONE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, ORIGINATOR_PHONE)
        return this
    def add_ORIGINATOR_EMAIL(ORIGINATOR_EMAIL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, ORIGINATOR_EMAIL)
        return this
    def add_ORIGINATOR_ADDRESS(ORIGINATOR_ADDRESS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, ORIGINATOR_ADDRESS)
        return this
    def add_TECH_ORG(TECH_ORG:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, TECH_ORG)
        return this
    def add_TECH_POC(TECH_POC:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, TECH_POC)
        return this
    def add_TECH_POSITION(TECH_POSITION:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, TECH_POSITION)
        return this
    def add_TECH_PHONE(TECH_PHONE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, TECH_PHONE)
        return this
    def add_TECH_EMAIL(TECH_EMAIL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, TECH_EMAIL)
        return this
    def add_TECH_ADDRESS(TECH_ADDRESS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, TECH_ADDRESS)
        return this
    def add_PREVIOUS_MESSAGE_ID(PREVIOUS_MESSAGE_ID:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, PREVIOUS_MESSAGE_ID)
        return this
    def add_NEXT_MESSAGE_ID(NEXT_MESSAGE_ID:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, NEXT_MESSAGE_ID)
        return this
    def add_ADM_MSG_LINK(ADM_MSG_LINK:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, ADM_MSG_LINK)
        return this
    def add_CDM_MSG_LINK(CDM_MSG_LINK:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, CDM_MSG_LINK)
        return this
    def add_PRM_MSG_LINK(PRM_MSG_LINK:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, PRM_MSG_LINK)
        return this
    def add_RDM_MSG_LINK(RDM_MSG_LINK:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, RDM_MSG_LINK)
        return this
    def add_TDM_MSG_LINK(TDM_MSG_LINK:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, TDM_MSG_LINK)
        return this
    def add_OPERATOR(OPERATOR:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, OPERATOR)
        return this
    def add_OWNER(OWNER:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, OWNER)
        return this
    def add_COUNTRY(COUNTRY:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, COUNTRY)
        return this
    def add_CONSTELLATION(CONSTELLATION:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, CONSTELLATION)
        return this
    def add_OBJECT_TYPE(OBJECT_TYPE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, OBJECT_TYPE)
        return this
    def add_TIME_SYSTEM(TIME_SYSTEM:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, TIME_SYSTEM)
        return this
    def add_EPOCH_TZERO(EPOCH_TZERO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, EPOCH_TZERO)
        return this
    def add_OPS_STATUS(OPS_STATUS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, OPS_STATUS)
        return this
    def add_ORBIT_CATEGORY(ORBIT_CATEGORY:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, ORBIT_CATEGORY)
        return this
    def add_OCM_DATA_ELEMENTS(OCM_DATA_ELEMENTS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, OCM_DATA_ELEMENTS)
        return this
    def add_SCLK_OFFSET_AT_EPOCH(SCLK_OFFSET_AT_EPOCH:float):
        b_.PrependFloat64Slot(34, SCLK_OFFSET_AT_EPOCH, 0.0)
        return this
    def add_SCLK_SEC_PER_SI_SEC(SCLK_SEC_PER_SI_SEC:float):
        b_.PrependFloat64Slot(35, SCLK_SEC_PER_SI_SEC, 0.0)
        return this
    def add_PREVIOUS_MESSAGE_EPOCH(PREVIOUS_MESSAGE_EPOCH:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, PREVIOUS_MESSAGE_EPOCH)
        return this
    def add_NEXT_MESSAGE_EPOCH(NEXT_MESSAGE_EPOCH:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, NEXT_MESSAGE_EPOCH)
        return this
    def add_START_TIME(START_TIME:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, START_TIME)
        return this
    def add_STOP_TIME(STOP_TIME:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, STOP_TIME)
        return this
    def add_TIME_SPAN(TIME_SPAN:float):
        b_.PrependFloat64Slot(40, TIME_SPAN, 0.0)
        return this
    def add_TAIMUTC_AT_TZERO(TAIMUTC_AT_TZERO:float):
        b_.PrependFloat64Slot(41, TAIMUTC_AT_TZERO, 0.0)
        return this
    def add_NEXT_LEAP_EPOCH(NEXT_LEAP_EPOCH:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, NEXT_LEAP_EPOCH)
        return this
    def add_NEXT_LEAP_TAIMUTC(NEXT_LEAP_TAIMUTC:float):
        b_.PrependFloat64Slot(43, NEXT_LEAP_TAIMUTC, 0.0)
        return this
    def add_UT1MUTC_AT_TZERO(UT1MUTC_AT_TZERO:float):
        b_.PrependFloat64Slot(44, UT1MUTC_AT_TZERO, 0.0)
        return this
    def add_EOP_SOURCE(EOP_SOURCE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, EOP_SOURCE)
        return this
    def add_INTERP_METHOD_EOP(INTERP_METHOD_EOP:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, INTERP_METHOD_EOP)
        return this
    def add_CELESTIAL_SOURCE(CELESTIAL_SOURCE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, CELESTIAL_SOURCE)
        return this
    def end():
        return b_.EndObject()

def MetadataStartCOMMENTVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def MetadataCreateCOMMENTVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def MetadataStartALTERNATE_NAMESVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def MetadataCreateALTERNATE_NAMESVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def MetadataStartTDM_MSG_LINKVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def MetadataCreateTDM_MSG_LINKVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def MetadataStartOCM_DATA_ELEMENTSVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def MetadataCreateOCM_DATA_ELEMENTSVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

class StateVector : flatbuffers.handle
    /// Epoch of the state vector.
    def EPOCH() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// X component of position in the specified reference frame.
    def X() -> float:
        return flatbuffers.field_float64(buf_, pos_, 6, 0.0)
    /// Y component of position.
    def Y() -> float:
        return flatbuffers.field_float64(buf_, pos_, 8, 0.0)
    /// Z component of position.
    def Z() -> float:
        return flatbuffers.field_float64(buf_, pos_, 10, 0.0)
    /// X component of velocity.
    def X_DOT() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Y component of velocity.
    def Y_DOT() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Z component of velocity.
    def Z_DOT() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// X component of acceleration.
    def X_DDOT() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Y component of acceleration.
    def Y_DDOT() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Z component of acceleration.
    def Z_DDOT() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)

def GetRootAsStateVector(buf:string): return StateVector { buf, flatbuffers.indirect(buf, 0) }

struct StateVectorBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(10)
        return this
    def add_EPOCH(EPOCH:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, EPOCH)
        return this
    def add_X(X:float):
        b_.PrependFloat64Slot(1, X, 0.0)
        return this
    def add_Y(Y:float):
        b_.PrependFloat64Slot(2, Y, 0.0)
        return this
    def add_Z(Z:float):
        b_.PrependFloat64Slot(3, Z, 0.0)
        return this
    def add_X_DOT(X_DOT:float):
        b_.PrependFloat64Slot(4, X_DOT, 0.0)
        return this
    def add_Y_DOT(Y_DOT:float):
        b_.PrependFloat64Slot(5, Y_DOT, 0.0)
        return this
    def add_Z_DOT(Z_DOT:float):
        b_.PrependFloat64Slot(6, Z_DOT, 0.0)
        return this
    def add_X_DDOT(X_DDOT:float):
        b_.PrependFloat64Slot(7, X_DDOT, 0.0)
        return this
    def add_Y_DDOT(Y_DDOT:float):
        b_.PrependFloat64Slot(8, Y_DDOT, 0.0)
        return this
    def add_Z_DDOT(Z_DDOT:float):
        b_.PrependFloat64Slot(9, Z_DDOT, 0.0)
        return this
    def end():
        return b_.EndObject()

class PhysicalProperties : flatbuffers.handle
    /// Comments in the Physical Properties section.
    def COMMENT(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 4) + i * 4)
    def COMMENT_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 4)
    /// Wet mass of the space object.
    def WET_MASS() -> float:
        return flatbuffers.field_float64(buf_, pos_, 6, 0.0)
    /// Dry mass of the space object.
    def DRY_MASS() -> float:
        return flatbuffers.field_float64(buf_, pos_, 8, 0.0)
    /// Units for mass values.
    def MASS_UNITS() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Quaternion component q1 of orientation from OEB to EME2000.
    def OEB_Q1() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Quaternion component q2.
    def OEB_Q2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Quaternion component q3.
    def OEB_Q3() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Quaternion scalar component qc.
    def OEB_QC() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Maximum dimension of the object along OEB frame axes.
    def OEB_MAX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Intermediate dimension along OEB frame axes.
    def OEB_INT() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Minimum dimension of the object along OEB frame axes.
    def OEB_MIN() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Area along OEB_MAX axis.
    def AREA_ALONG_OEB_MAX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Area along OEB_INT axis.
    def AREA_ALONG_OEB_INT() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Area along OEB_MIN axis.
    def AREA_ALONG_OEB_MIN() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Units for area values.
    def AREA_UNITS() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Constant area for drag computations.
    def DRAG_CONST_AREA() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Nominal drag coefficient.
    def DRAG_COEFF_NOM() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Uncertainty in the drag coefficient.
    def DRAG_UNCERTAINTY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Constant area for solar radiation pressure computations.
    def SRP_CONST_AREA() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Nominal solar radiation pressure coefficient.
    def SOLAR_RAD_COEFF() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Uncertainty in the solar radiation pressure coefficient.
    def SRP_UNCERTAINTY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)

def GetRootAsPhysicalProperties(buf:string): return PhysicalProperties { buf, flatbuffers.indirect(buf, 0) }

struct PhysicalPropertiesBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(21)
        return this
    def add_COMMENT(COMMENT:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, COMMENT)
        return this
    def add_WET_MASS(WET_MASS:float):
        b_.PrependFloat64Slot(1, WET_MASS, 0.0)
        return this
    def add_DRY_MASS(DRY_MASS:float):
        b_.PrependFloat64Slot(2, DRY_MASS, 0.0)
        return this
    def add_MASS_UNITS(MASS_UNITS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, MASS_UNITS)
        return this
    def add_OEB_Q1(OEB_Q1:float):
        b_.PrependFloat64Slot(4, OEB_Q1, 0.0)
        return this
    def add_OEB_Q2(OEB_Q2:float):
        b_.PrependFloat64Slot(5, OEB_Q2, 0.0)
        return this
    def add_OEB_Q3(OEB_Q3:float):
        b_.PrependFloat64Slot(6, OEB_Q3, 0.0)
        return this
    def add_OEB_QC(OEB_QC:float):
        b_.PrependFloat64Slot(7, OEB_QC, 0.0)
        return this
    def add_OEB_MAX(OEB_MAX:float):
        b_.PrependFloat64Slot(8, OEB_MAX, 0.0)
        return this
    def add_OEB_INT(OEB_INT:float):
        b_.PrependFloat64Slot(9, OEB_INT, 0.0)
        return this
    def add_OEB_MIN(OEB_MIN:float):
        b_.PrependFloat64Slot(10, OEB_MIN, 0.0)
        return this
    def add_AREA_ALONG_OEB_MAX(AREA_ALONG_OEB_MAX:float):
        b_.PrependFloat64Slot(11, AREA_ALONG_OEB_MAX, 0.0)
        return this
    def add_AREA_ALONG_OEB_INT(AREA_ALONG_OEB_INT:float):
        b_.PrependFloat64Slot(12, AREA_ALONG_OEB_INT, 0.0)
        return this
    def add_AREA_ALONG_OEB_MIN(AREA_ALONG_OEB_MIN:float):
        b_.PrependFloat64Slot(13, AREA_ALONG_OEB_MIN, 0.0)
        return this
    def add_AREA_UNITS(AREA_UNITS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, AREA_UNITS)
        return this
    def add_DRAG_CONST_AREA(DRAG_CONST_AREA:float):
        b_.PrependFloat64Slot(15, DRAG_CONST_AREA, 0.0)
        return this
    def add_DRAG_COEFF_NOM(DRAG_COEFF_NOM:float):
        b_.PrependFloat64Slot(16, DRAG_COEFF_NOM, 0.0)
        return this
    def add_DRAG_UNCERTAINTY(DRAG_UNCERTAINTY:float):
        b_.PrependFloat64Slot(17, DRAG_UNCERTAINTY, 0.0)
        return this
    def add_SRP_CONST_AREA(SRP_CONST_AREA:float):
        b_.PrependFloat64Slot(18, SRP_CONST_AREA, 0.0)
        return this
    def add_SOLAR_RAD_COEFF(SOLAR_RAD_COEFF:float):
        b_.PrependFloat64Slot(19, SOLAR_RAD_COEFF, 0.0)
        return this
    def add_SRP_UNCERTAINTY(SRP_UNCERTAINTY:float):
        b_.PrependFloat64Slot(20, SRP_UNCERTAINTY, 0.0)
        return this
    def end():
        return b_.EndObject()

def PhysicalPropertiesStartCOMMENTVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def PhysicalPropertiesCreateCOMMENTVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

class Perturbations : flatbuffers.handle
    /// Comments in the Perturbations section.
    def COMMENT(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 4) + i * 4)
    def COMMENT_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 4)
    /// Atmospheric model used.
    def ATMOSPHERIC_MODEL() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Gravity model used.
    def GRAVITY_MODEL() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Degree of the gravity model.
    def GRAVITY_DEGREE() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// Order of the gravity model.
    def GRAVITY_ORDER() -> int:
        return flatbuffers.field_int32(buf_, pos_, 12, 0)
    /// Gravitational constant times the mass of the central body.
    def GM() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// List of celestial bodies included in n-body perturbations.
    def N_BODY_PERTURBATIONS(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 16) + i * 4)
    def N_BODY_PERTURBATIONS_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 16)
    /// Ocean tides model used.
    def OCEAN_TIDES_MODEL() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Solid tides model used.
    def SOLID_TIDES_MODEL() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Atmospheric tides model used.
    def ATMOSPHERIC_TIDES_MODEL() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Geopotential model used.
    def GEOPOTENTIAL_MODEL() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Solar radiation pressure model used.
    def SOLAR_RAD_PRESSURE() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Albedo model used.
    def ALBEDO() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Thermal model used.
    def THERMAL() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Relativity model used.
    def RELATIVITY() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Atmospheric drag model used.
    def ATMOSPHERIC_DRAG() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Fixed geomagnetic Kp index used.
    def FIXED_GEOMAG_KP() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Fixed F10.7 solar flux value used.
    def FIXED_F10P7() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Fixed mean F10.7 solar flux value used.
    def FIXED_F10P7_MEAN() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)

def GetRootAsPerturbations(buf:string): return Perturbations { buf, flatbuffers.indirect(buf, 0) }

struct PerturbationsBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(19)
        return this
    def add_COMMENT(COMMENT:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, COMMENT)
        return this
    def add_ATMOSPHERIC_MODEL(ATMOSPHERIC_MODEL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, ATMOSPHERIC_MODEL)
        return this
    def add_GRAVITY_MODEL(GRAVITY_MODEL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, GRAVITY_MODEL)
        return this
    def add_GRAVITY_DEGREE(GRAVITY_DEGREE:int):
        b_.PrependInt32Slot(3, GRAVITY_DEGREE, 0)
        return this
    def add_GRAVITY_ORDER(GRAVITY_ORDER:int):
        b_.PrependInt32Slot(4, GRAVITY_ORDER, 0)
        return this
    def add_GM(GM:float):
        b_.PrependFloat64Slot(5, GM, 0.0)
        return this
    def add_N_BODY_PERTURBATIONS(N_BODY_PERTURBATIONS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, N_BODY_PERTURBATIONS)
        return this
    def add_OCEAN_TIDES_MODEL(OCEAN_TIDES_MODEL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, OCEAN_TIDES_MODEL)
        return this
    def add_SOLID_TIDES_MODEL(SOLID_TIDES_MODEL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, SOLID_TIDES_MODEL)
        return this
    def add_ATMOSPHERIC_TIDES_MODEL(ATMOSPHERIC_TIDES_MODEL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, ATMOSPHERIC_TIDES_MODEL)
        return this
    def add_GEOPOTENTIAL_MODEL(GEOPOTENTIAL_MODEL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, GEOPOTENTIAL_MODEL)
        return this
    def add_SOLAR_RAD_PRESSURE(SOLAR_RAD_PRESSURE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, SOLAR_RAD_PRESSURE)
        return this
    def add_ALBEDO(ALBEDO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, ALBEDO)
        return this
    def add_THERMAL(THERMAL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, THERMAL)
        return this
    def add_RELATIVITY(RELATIVITY:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, RELATIVITY)
        return this
    def add_ATMOSPHERIC_DRAG(ATMOSPHERIC_DRAG:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, ATMOSPHERIC_DRAG)
        return this
    def add_FIXED_GEOMAG_KP(FIXED_GEOMAG_KP:float):
        b_.PrependFloat64Slot(16, FIXED_GEOMAG_KP, 0.0)
        return this
    def add_FIXED_F10P7(FIXED_F10P7:float):
        b_.PrependFloat64Slot(17, FIXED_F10P7, 0.0)
        return this
    def add_FIXED_F10P7_MEAN(FIXED_F10P7_MEAN:float):
        b_.PrependFloat64Slot(18, FIXED_F10P7_MEAN, 0.0)
        return this
    def end():
        return b_.EndObject()

def PerturbationsStartCOMMENTVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def PerturbationsCreateCOMMENTVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def PerturbationsStartN_BODY_PERTURBATIONSVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def PerturbationsCreateN_BODY_PERTURBATIONSVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

class Maneuver : flatbuffers.handle
    /// Unique identifier for the maneuver.
    def MAN_ID() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Basis of the maneuver plan (e.g., planned, predicted, estimated).
    def MAN_BASIS() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Identifier of the maneuver device.
    def MAN_DEVICE_ID() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Identifier of the previous maneuver.
    def MAN_PREV_ID() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Purpose of the maneuver.
    def MAN_PURPOSE() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Reference frame for the maneuver data.
    def MAN_REF_FRAME() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Epoch of the maneuver reference frame.
    def MAN_FRAME_EPOCH() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Type of maneuver (e.g., IMPULSIVE, FINITE).
    def MAN_TYPE() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Start epoch of the maneuver.
    def MAN_EPOCH_START() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Duration of the maneuver.
    def MAN_DURATION() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Units for the maneuver data values.
    def MAN_UNITS(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 24) + i * 4)
    def MAN_UNITS_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 24)
    /// Data associated with the maneuver.
    def DATA(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 26) + i * 4)
    def DATA_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 26)
    /// Comments related to the maneuver.
    def MAN_COMMENT(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 28) + i * 4)
    def MAN_COMMENT_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 28)

def GetRootAsManeuver(buf:string): return Maneuver { buf, flatbuffers.indirect(buf, 0) }

struct ManeuverBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(13)
        return this
    def add_MAN_ID(MAN_ID:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, MAN_ID)
        return this
    def add_MAN_BASIS(MAN_BASIS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, MAN_BASIS)
        return this
    def add_MAN_DEVICE_ID(MAN_DEVICE_ID:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, MAN_DEVICE_ID)
        return this
    def add_MAN_PREV_ID(MAN_PREV_ID:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, MAN_PREV_ID)
        return this
    def add_MAN_PURPOSE(MAN_PURPOSE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, MAN_PURPOSE)
        return this
    def add_MAN_REF_FRAME(MAN_REF_FRAME:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, MAN_REF_FRAME)
        return this
    def add_MAN_FRAME_EPOCH(MAN_FRAME_EPOCH:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, MAN_FRAME_EPOCH)
        return this
    def add_MAN_TYPE(MAN_TYPE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, MAN_TYPE)
        return this
    def add_MAN_EPOCH_START(MAN_EPOCH_START:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, MAN_EPOCH_START)
        return this
    def add_MAN_DURATION(MAN_DURATION:float):
        b_.PrependFloat64Slot(9, MAN_DURATION, 0.0)
        return this
    def add_MAN_UNITS(MAN_UNITS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, MAN_UNITS)
        return this
    def add_DATA(DATA:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, DATA)
        return this
    def add_MAN_COMMENT(MAN_COMMENT:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, MAN_COMMENT)
        return this
    def end():
        return b_.EndObject()

def ManeuverStartMAN_UNITSVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ManeuverCreateMAN_UNITSVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def ManeuverStartDATAVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ManeuverCreateDATAVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def ManeuverStartMAN_COMMENTVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ManeuverCreateMAN_COMMENTVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

class OrbitDetermination : flatbuffers.handle
    /// Unique identifier for the orbit determination.
    def OD_ID() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Identifier of the previous orbit determination.
    def OD_PREV_ID() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Algorithm used for orbit determination.
    def OD_ALGORITHM() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Method used for orbit determination.
    def OD_METHOD() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Epoch of the orbit determination.
    def OD_EPOCH() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Time tag of the orbit determination.
    def OD_TIME_TAG() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Process noise model used.
    def OD_PROCESS_NOISE() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Covariance reduction techniques used.
    def OD_COV_REDUCTION() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Noise models used.
    def OD_NOISE_MODELS() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Types of observations used (e.g., RANGE, DOPPLER).
    def OD_OBSERVATIONS_TYPE(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 22) + i * 4)
    def OD_OBSERVATIONS_TYPE_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 22)
    /// Number of observations used.
    def OD_OBSERVATIONS_USED() -> int:
        return flatbuffers.field_int32(buf_, pos_, 24, 0)
    /// Number of tracks used.
    def OD_TRACKS_USED() -> int:
        return flatbuffers.field_int32(buf_, pos_, 26, 0)
    /// Data weighting scheme used.
    def OD_DATA_WEIGHTING() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Convergence criteria used.
    def OD_CONVERGENCE_CRITERIA() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Parameters estimated during orbit determination.
    def OD_EST_PARAMETERS(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def OD_EST_PARAMETERS_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)
    /// A priori data used for orbit determination.
    def OD_APRIORI_DATA() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Residuals from the orbit determination.
    def OD_RESIDUALS() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)

def GetRootAsOrbitDetermination(buf:string): return OrbitDetermination { buf, flatbuffers.indirect(buf, 0) }

struct OrbitDeterminationBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(17)
        return this
    def add_OD_ID(OD_ID:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, OD_ID)
        return this
    def add_OD_PREV_ID(OD_PREV_ID:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, OD_PREV_ID)
        return this
    def add_OD_ALGORITHM(OD_ALGORITHM:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, OD_ALGORITHM)
        return this
    def add_OD_METHOD(OD_METHOD:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, OD_METHOD)
        return this
    def add_OD_EPOCH(OD_EPOCH:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, OD_EPOCH)
        return this
    def add_OD_TIME_TAG(OD_TIME_TAG:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, OD_TIME_TAG)
        return this
    def add_OD_PROCESS_NOISE(OD_PROCESS_NOISE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, OD_PROCESS_NOISE)
        return this
    def add_OD_COV_REDUCTION(OD_COV_REDUCTION:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, OD_COV_REDUCTION)
        return this
    def add_OD_NOISE_MODELS(OD_NOISE_MODELS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, OD_NOISE_MODELS)
        return this
    def add_OD_OBSERVATIONS_TYPE(OD_OBSERVATIONS_TYPE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, OD_OBSERVATIONS_TYPE)
        return this
    def add_OD_OBSERVATIONS_USED(OD_OBSERVATIONS_USED:int):
        b_.PrependInt32Slot(10, OD_OBSERVATIONS_USED, 0)
        return this
    def add_OD_TRACKS_USED(OD_TRACKS_USED:int):
        b_.PrependInt32Slot(11, OD_TRACKS_USED, 0)
        return this
    def add_OD_DATA_WEIGHTING(OD_DATA_WEIGHTING:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, OD_DATA_WEIGHTING)
        return this
    def add_OD_CONVERGENCE_CRITERIA(OD_CONVERGENCE_CRITERIA:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, OD_CONVERGENCE_CRITERIA)
        return this
    def add_OD_EST_PARAMETERS(OD_EST_PARAMETERS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, OD_EST_PARAMETERS)
        return this
    def add_OD_APRIORI_DATA(OD_APRIORI_DATA:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, OD_APRIORI_DATA)
        return this
    def add_OD_RESIDUALS(OD_RESIDUALS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, OD_RESIDUALS)
        return this
    def end():
        return b_.EndObject()

def OrbitDeterminationStartOD_OBSERVATIONS_TYPEVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OrbitDeterminationCreateOD_OBSERVATIONS_TYPEVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OrbitDeterminationStartOD_EST_PARAMETERSVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OrbitDeterminationCreateOD_EST_PARAMETERSVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

class UserDefinedParameters : flatbuffers.handle
    /// Name of the user-defined parameter.
    def PARAM_NAME() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Value of the user-defined parameter.
    def PARAM_VALUE() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)

def GetRootAsUserDefinedParameters(buf:string): return UserDefinedParameters { buf, flatbuffers.indirect(buf, 0) }

struct UserDefinedParametersBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(2)
        return this
    def add_PARAM_NAME(PARAM_NAME:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, PARAM_NAME)
        return this
    def add_PARAM_VALUE(PARAM_VALUE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, PARAM_VALUE)
        return this
    def end():
        return b_.EndObject()

/// Orbit Comprehensive Message
class OCM : flatbuffers.handle
    /// Header section of the OCM.
    def HEADER() -> Header?:
        let o = flatbuffers.field_table(buf_, pos_, 4)
        return if o: Header { buf_, o } else: nil
    /// Metadata section of the OCM.
    def METADATA() -> Metadata?:
        let o = flatbuffers.field_table(buf_, pos_, 6)
        return if o: Metadata { buf_, o } else: nil
    /// Trajectory type (e.g., PROPAGATED, ESTIMATED).
    def TRAJ_TYPE() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// State vector data.
    def STATE_DATA(i:int) -> StateVector:
        return StateVector { buf_, flatbuffers.indirect(buf_, flatbuffers.field_vector(buf_, pos_, 10) + i * 4) }
    def STATE_DATA_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 10)
    /// Physical properties of the space object.
    def PHYSICAL_PROPERTIES() -> PhysicalProperties?:
        let o = flatbuffers.field_table(buf_, pos_, 12)
        return if o: PhysicalProperties { buf_, o } else: nil
    /// Covariance data associated with the state vectors.
    def COVARIANCE_DATA(i:int) -> StateVector:
        return StateVector { buf_, flatbuffers.indirect(buf_, flatbuffers.field_vector(buf_, pos_, 14) + i * 4) }
    def COVARIANCE_DATA_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 14)
    /// Maneuver data.
    def MANEUVER_DATA(i:int) -> Maneuver:
        return Maneuver { buf_, flatbuffers.indirect(buf_, flatbuffers.field_vector(buf_, pos_, 16) + i * 4) }
    def MANEUVER_DATA_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 16)
    /// Perturbations parameters used.
    def PERTURBATIONS() -> Perturbations?:
        let o = flatbuffers.field_table(buf_, pos_, 18)
        return if o: Perturbations { buf_, o } else: nil
    /// Orbit determination data.
    def ORBIT_DETERMINATION() -> OrbitDetermination?:
        let o = flatbuffers.field_table(buf_, pos_, 20)
        return if o: OrbitDetermination { buf_, o } else: nil
    /// User-defined parameters and supplemental comments.
    def USER_DEFINED_PARAMETERS(i:int) -> UserDefinedParameters:
        return UserDefinedParameters { buf_, flatbuffers.indirect(buf_, flatbuffers.field_vector(buf_, pos_, 22) + i * 4) }
    def USER_DEFINED_PARAMETERS_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 22)

def GetRootAsOCM(buf:string): return OCM { buf, flatbuffers.indirect(buf, 0) }

struct OCMBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(10)
        return this
    def add_HEADER(HEADER:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, HEADER)
        return this
    def add_METADATA(METADATA:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, METADATA)
        return this
    def add_TRAJ_TYPE(TRAJ_TYPE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, TRAJ_TYPE)
        return this
    def add_STATE_DATA(STATE_DATA:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, STATE_DATA)
        return this
    def add_PHYSICAL_PROPERTIES(PHYSICAL_PROPERTIES:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, PHYSICAL_PROPERTIES)
        return this
    def add_COVARIANCE_DATA(COVARIANCE_DATA:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, COVARIANCE_DATA)
        return this
    def add_MANEUVER_DATA(MANEUVER_DATA:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, MANEUVER_DATA)
        return this
    def add_PERTURBATIONS(PERTURBATIONS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, PERTURBATIONS)
        return this
    def add_ORBIT_DETERMINATION(ORBIT_DETERMINATION:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, ORBIT_DETERMINATION)
        return this
    def add_USER_DEFINED_PARAMETERS(USER_DEFINED_PARAMETERS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, USER_DEFINED_PARAMETERS)
        return this
    def end():
        return b_.EndObject()

def OCMStartSTATE_DATAVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OCMCreateSTATE_DATAVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OCMStartCOVARIANCE_DATAVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OCMCreateCOVARIANCE_DATAVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OCMStartMANEUVER_DATAVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OCMCreateMANEUVER_DATAVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OCMStartUSER_DEFINED_PARAMETERSVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OCMCreateUSER_DEFINED_PARAMETERSVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

