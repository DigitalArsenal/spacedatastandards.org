// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

/// Enumeration of Engine Types
enum ENGINE_TYPE:
    ENGINE_TYPE_LIQUID = 0
    ENGINE_TYPE_SOLID = 1
    ENGINE_TYPE_HYBRID = 2
    ENGINE_TYPE_ION = 3
    ENGINE_TYPE_NUCLEAR_THERMAL = 4
    ENGINE_TYPE_OTHER = 5

class ROC

class STAGE

class SUSTAINER

class ENGINE

class ROCCOLLECTION

/// Rocket Configuration
class ROC : flatbuffers_handle
    /// Rocket Name
    def NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Rocket Family
    def FAMILY() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// Rocket Variant
    def VARIANT() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// Stages in the Rocket
    def STAGES(i:int) -> STAGE:
        return STAGE { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 10) + i * 4) }
    def STAGES_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 10)
    /// Sustainers in the Rocket
    def SUSTAINERS(i:int) -> SUSTAINER:
        return SUSTAINER { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 12) + i * 4) }
    def SUSTAINERS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 12)

def GetRootAsROC(buf:string): return ROC { buf, buf.flatbuffers_indirect(0) }

struct ROCBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(5)
        return this
    def add_NAME(NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, NAME)
        return this
    def add_FAMILY(FAMILY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, FAMILY)
        return this
    def add_VARIANT(VARIANT:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, VARIANT)
        return this
    def add_STAGES(STAGES:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, STAGES)
        return this
    def add_SUSTAINERS(SUSTAINERS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, SUSTAINERS)
        return this
    def end():
        return b_.EndObject()

def ROCStartSTAGESVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def ROCCreateSTAGESVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def ROCStartSUSTAINERSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def ROCCreateSUSTAINERSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

/// Stage Details
class STAGE : flatbuffers_handle
    /// Stage Number
    def STAGE_NUMBER() -> int:
        return buf_.flatbuffers_field_int32(pos_, 4, 0)
    /// Engines Used in This Stage
    def ENGINES(i:int) -> ENGINE:
        return ENGINE { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 6) + i * 4) }
    def ENGINES_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 6)
    /// Fuel Type Used in This Stage
    def FUEL_TYPE() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// Thrust Produced by This Stage (in Newtons)
    def THRUST() -> float:
        return buf_.flatbuffers_field_float64(pos_, 10, 0.0)
    /// Duration of the Burn (in Seconds)
    def BURN_DURATION() -> float:
        return buf_.flatbuffers_field_float64(pos_, 12, 0.0)

def GetRootAsSTAGE(buf:string): return STAGE { buf, buf.flatbuffers_indirect(0) }

struct STAGEBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(5)
        return this
    def add_STAGE_NUMBER(STAGE_NUMBER:int):
        b_.PrependInt32Slot(0, STAGE_NUMBER, 0)
        return this
    def add_ENGINES(ENGINES:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, ENGINES)
        return this
    def add_FUEL_TYPE(FUEL_TYPE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, FUEL_TYPE)
        return this
    def add_THRUST(THRUST:float):
        b_.PrependFloat64Slot(3, THRUST, 0.0)
        return this
    def add_BURN_DURATION(BURN_DURATION:float):
        b_.PrependFloat64Slot(4, BURN_DURATION, 0.0)
        return this
    def end():
        return b_.EndObject()

def STAGEStartENGINESVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def STAGECreateENGINESVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

/// Sustainer Details
class SUSTAINER : flatbuffers_handle
    /// Name of the Sustainer
    def SUSTAINER_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Thrust Produced by the Sustainer (in Newtons)
    def THRUST() -> float:
        return buf_.flatbuffers_field_float64(pos_, 6, 0.0)
    /// Duration of the Burn (in Seconds)
    def BURN_DURATION() -> float:
        return buf_.flatbuffers_field_float64(pos_, 8, 0.0)

def GetRootAsSUSTAINER(buf:string): return SUSTAINER { buf, buf.flatbuffers_indirect(0) }

struct SUSTAINERBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(3)
        return this
    def add_SUSTAINER_NAME(SUSTAINER_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, SUSTAINER_NAME)
        return this
    def add_THRUST(THRUST:float):
        b_.PrependFloat64Slot(1, THRUST, 0.0)
        return this
    def add_BURN_DURATION(BURN_DURATION:float):
        b_.PrependFloat64Slot(2, BURN_DURATION, 0.0)
        return this
    def end():
        return b_.EndObject()

/// Engine Details
class ENGINE : flatbuffers_handle
    /// Engine Name
    def ENGINE_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Type of Engine
    def TYPE() -> ENGINE_TYPE:
        return ENGINE_TYPE(buf_.flatbuffers_field_int8(pos_, 6, 0))
    /// Thrust Produced by the Engine (in Newtons)
    def THRUST() -> float:
        return buf_.flatbuffers_field_float64(pos_, 8, 0.0)

def GetRootAsENGINE(buf:string): return ENGINE { buf, buf.flatbuffers_indirect(0) }

struct ENGINEBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(3)
        return this
    def add_ENGINE_NAME(ENGINE_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, ENGINE_NAME)
        return this
    def add_TYPE(TYPE:ENGINE_TYPE):
        b_.PrependInt8Slot(1, TYPE, 0)
        return this
    def add_THRUST(THRUST:float):
        b_.PrependFloat64Slot(2, THRUST, 0.0)
        return this
    def end():
        return b_.EndObject()

/// Collection of Rocket Configurations
class ROCCOLLECTION : flatbuffers_handle
    /// Records of Rocket Configurations
    def RECORDS(i:int) -> ROC:
        return ROC { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 4) + i * 4) }
    def RECORDS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 4)

def GetRootAsROCCOLLECTION(buf:string): return ROCCOLLECTION { buf, buf.flatbuffers_indirect(0) }

struct ROCCOLLECTIONBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(1)
        return this
    def add_RECORDS(RECORDS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, RECORDS)
        return this
    def end():
        return b_.EndObject()

def ROCCOLLECTIONStartRECORDSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def ROCCOLLECTIONCreateRECORDSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

