// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum objectType:
    ///0
    objectType_PAYLOAD = 0
    ///1
    objectType_ROCKET_BODY = 1
    ///2
    objectType_DEBRIS = 2
    ///3
    objectType_UNKNOWN = 3

enum opsStatusCode:
    ///+
    opsStatusCode_OPERATIONAL = 0
    ///-
    opsStatusCode_NONOPERATIONAL = 1
    ///P
    opsStatusCode_PARTIALLY_OPERATIONAL = 2
    ///B
    opsStatusCode_BACKUP_STANDBY = 3
    ///S
    opsStatusCode_SPARE = 4
    ///X
    opsStatusCode_EXTENDED_MISSION = 5
    ///D
    opsStatusCode_DECAYED = 6
    ///?
    opsStatusCode_UNKNOWN = 7

enum dataStatusCode:
    ///NCE
    dataStatusCode_NO_CURRENT_ELEMENTS = 0
    ///NIE
    dataStatusCode_NO_INITIAL_ELEMENTS = 1
    ///NEA
    dataStatusCode_NO_ELEMENTS_AVAILABLE = 2
    ///OK
    dataStatusCode_OK = 3

enum orbitType:
    ///0
    orbitType_ORBIT = 0
    ///1
    orbitType_LANDING = 1
    ///2
    orbitType_IMPACT = 2
    ///3
    orbitType_DOCKED = 3
    ///4
    orbitType_ROUNDTRIP = 4

enum massType:
    massType_DRY = 0
    massType_WET = 1

class CAT

class CATCOLLECTION

/// Catalog Entity Message
class CAT : flatbuffers_handle
    /// Satellite Name(s)
    def OBJECT_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// International Designator (YYYY-NNNAAA)
    def OBJECT_ID() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// NORAD Catalog Number
    def NORAD_CAT_ID() -> int:
        return buf_.flatbuffers_field_uint32(pos_, 8, 0)
    /// Object type (Payload, Rocket body, Debris, Unknown)
    def OBJECT_TYPE() -> objectType:
        return objectType(buf_.flatbuffers_field_int8(pos_, 10, 3))
    /// Operational Status Code
    def OPS_STATUS_CODE() -> opsStatusCode:
        return opsStatusCode(buf_.flatbuffers_field_int8(pos_, 12, 7))
    /// Ownership, typically country or company
    def OWNER() -> string:
        return buf_.flatbuffers_field_string(pos_, 14)
    /// Launch Date [year-month-day] (ISO 8601)
    def LAUNCH_DATE() -> string:
        return buf_.flatbuffers_field_string(pos_, 16)
    /// Launch Site
    def LAUNCH_SITE() -> string:
        return buf_.flatbuffers_field_string(pos_, 18)
    /// Decay Date, if applicable [year-month-day] (ISO 8601)
    def DECAY_DATE() -> string:
        return buf_.flatbuffers_field_string(pos_, 20)
    /// Orbital period [minutes]
    def PERIOD() -> float:
        return buf_.flatbuffers_field_float64(pos_, 22, 0.0)
    /// Inclination [degrees]
    def INCLINATION() -> float:
        return buf_.flatbuffers_field_float64(pos_, 24, 0.0)
    /// Apogee Altitude [kilometers]
    def APOGEE() -> float:
        return buf_.flatbuffers_field_float64(pos_, 26, 0.0)
    /// Perigee Altitude [kilometers]
    def PERIGEE() -> float:
        return buf_.flatbuffers_field_float64(pos_, 28, 0.0)
    /// Radar Cross Section [meters2]; blank if no data available
    def RCS() -> float:
        return buf_.flatbuffers_field_float64(pos_, 30, 0.0)
    /// Data status code; blank otherwise
    def DATA_STATUS_CODE() -> dataStatusCode:
        return dataStatusCode(buf_.flatbuffers_field_int8(pos_, 32, 0))
    /// Orbit center
    def ORBIT_CENTER() -> string:
        return buf_.flatbuffers_field_string(pos_, 34)
    /// Orbit type (Orbit, Landing, Impact, Docked to RSO, roundtrip)
    def ORBIT_TYPE() -> orbitType:
        return orbitType(buf_.flatbuffers_field_int8(pos_, 36, 0))
    /// Deployment Date [year-month-day] (ISO 8601)
    def DEPLOYMENT_DATE() -> string:
        return buf_.flatbuffers_field_string(pos_, 38)
    /// Indicates if the object is maneuverable
    def MANEUVERABLE() -> bool:
        return bool(buf_.flatbuffers_field_int8(pos_, 40, 0))
    /// Size [meters]; blank if no data available
    def SIZE() -> float:
        return buf_.flatbuffers_field_float64(pos_, 42, 0.0)
    /// Mass [kilograms]; blank if no data available
    def MASS() -> float:
        return buf_.flatbuffers_field_float64(pos_, 44, 0.0)
    /// Mass type (Dry, Wet)
    def MASS_TYPE() -> massType:
        return massType(buf_.flatbuffers_field_int8(pos_, 46, 0))
    /// Vector of PAYLOADS
    def PAYLOADS(i:int) -> PLD:
        return PLD { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 48) + i * 4) }
    def PAYLOADS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 48)

def GetRootAsCAT(buf:string): return CAT { buf, buf.flatbuffers_indirect(0) }

struct CATBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(23)
        return this
    def add_OBJECT_NAME(OBJECT_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, OBJECT_NAME)
        return this
    def add_OBJECT_ID(OBJECT_ID:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, OBJECT_ID)
        return this
    def add_NORAD_CAT_ID(NORAD_CAT_ID:int):
        b_.PrependUint32Slot(2, NORAD_CAT_ID, 0)
        return this
    def add_OBJECT_TYPE(OBJECT_TYPE:objectType):
        b_.PrependInt8Slot(3, OBJECT_TYPE, 3)
        return this
    def add_OPS_STATUS_CODE(OPS_STATUS_CODE:opsStatusCode):
        b_.PrependInt8Slot(4, OPS_STATUS_CODE, 7)
        return this
    def add_OWNER(OWNER:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, OWNER)
        return this
    def add_LAUNCH_DATE(LAUNCH_DATE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(6, LAUNCH_DATE)
        return this
    def add_LAUNCH_SITE(LAUNCH_SITE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(7, LAUNCH_SITE)
        return this
    def add_DECAY_DATE(DECAY_DATE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(8, DECAY_DATE)
        return this
    def add_PERIOD(PERIOD:float):
        b_.PrependFloat64Slot(9, PERIOD, 0.0)
        return this
    def add_INCLINATION(INCLINATION:float):
        b_.PrependFloat64Slot(10, INCLINATION, 0.0)
        return this
    def add_APOGEE(APOGEE:float):
        b_.PrependFloat64Slot(11, APOGEE, 0.0)
        return this
    def add_PERIGEE(PERIGEE:float):
        b_.PrependFloat64Slot(12, PERIGEE, 0.0)
        return this
    def add_RCS(RCS:float):
        b_.PrependFloat64Slot(13, RCS, 0.0)
        return this
    def add_DATA_STATUS_CODE(DATA_STATUS_CODE:dataStatusCode):
        b_.PrependInt8Slot(14, DATA_STATUS_CODE, 0)
        return this
    def add_ORBIT_CENTER(ORBIT_CENTER:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(15, ORBIT_CENTER)
        return this
    def add_ORBIT_TYPE(ORBIT_TYPE:orbitType):
        b_.PrependInt8Slot(16, ORBIT_TYPE, 0)
        return this
    def add_DEPLOYMENT_DATE(DEPLOYMENT_DATE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(17, DEPLOYMENT_DATE)
        return this
    def add_MANEUVERABLE(MANEUVERABLE:bool):
        b_.PrependBoolSlot(18, MANEUVERABLE, 0)
        return this
    def add_SIZE(SIZE:float):
        b_.PrependFloat64Slot(19, SIZE, 0.0)
        return this
    def add_MASS(MASS:float):
        b_.PrependFloat64Slot(20, MASS, 0.0)
        return this
    def add_MASS_TYPE(MASS_TYPE:massType):
        b_.PrependInt8Slot(21, MASS_TYPE, 0)
        return this
    def add_PAYLOADS(PAYLOADS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(22, PAYLOADS)
        return this
    def end():
        return b_.EndObject()

def CATStartPAYLOADSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def CATCreatePAYLOADSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

class CATCOLLECTION : flatbuffers_handle
    def RECORDS(i:int) -> CAT:
        return CAT { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 4) + i * 4) }
    def RECORDS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 4)

def GetRootAsCATCOLLECTION(buf:string): return CATCOLLECTION { buf, buf.flatbuffers_indirect(0) }

struct CATCOLLECTIONBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(1)
        return this
    def add_RECORDS(RECORDS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, RECORDS)
        return this
    def end():
        return b_.EndObject()

def CATCOLLECTIONStartRECORDSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def CATCOLLECTIONCreateRECORDSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

