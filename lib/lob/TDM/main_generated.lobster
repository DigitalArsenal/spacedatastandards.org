// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum OBSERVERLocationReferenceFrame:
    /// Earth Mean Equator and Equinox of J2000
    OBSERVERLocationReferenceFrame_EME2000 = 0
    ///  Geocentric Celestial Reference Frame
    OBSERVERLocationReferenceFrame_GCRF = 1
    /// Greenwich Rotating Coordinates
    OBSERVERLocationReferenceFrame_GRC = 2
    /// International Celestial Reference Frame
    OBSERVERLocationReferenceFrame_ICRF = 3
    /// International Terrestrial Reference Frame 2000
    OBSERVERLocationReferenceFrame_ITRF2000 = 4
    /// International Terrestrial Reference Frame 1993
    OBSERVERLocationReferenceFrame_ITRF93 = 5
    /// International Terrestrial Reference Frame 1997
    OBSERVERLocationReferenceFrame_ITRF97 = 6
    /// Mars Centered Inertial
    OBSERVERLocationReferenceFrame_MCI = 7
    /// True of Date, Rotating
    OBSERVERLocationReferenceFrame_TDR = 8
    /// True Equator Mean Equinox
    OBSERVERLocationReferenceFrame_TEME = 9
    /// True of Date
    OBSERVERLocationReferenceFrame_TOD = 10
    /// Vehicle-Body-Local-Horizontal (VVLH): An orbit reference frame with X-axis pointing from the center of the central body to the vehicle, Z-axis oppoOBSERVER to the orbital angular momentum vector, and Y-axis completing the right-handed system.
    OBSERVERLocationReferenceFrame_VVLH = 11
    /// Radial-Intrack-Crosstrack (RIC): A local orbital reference frame with the radial axis pointing away from the central body, the intrack axis in the direction of motion, and the crosstrack axis completing the right-handed system.
    OBSERVERLocationReferenceFrame_RIC = 12
    /// Vehicle-Local-Vertical-Local-Horizontal (VLVH): An orbit reference frame similar to VVLH, often used in close proximity operations or surface-oriented missions.
    OBSERVERLocationReferenceFrame_VLVH = 13
    /// East-North-Up (ENU): A terrestrial reference frame where the X-axis points East, the Y-axis points North, and the Z-axis points Up (away from the center of the Earth).
    OBSERVERLocationReferenceFrame_ENU = 14
    /// North-East-Down (NED): Similar to ENU, but with axes oriented Northward, Eastward, and Downward towards the Earth's center.
    OBSERVERLocationReferenceFrame_NED = 15
    /// Local Tangent Plane (LTP): A local, surface-fixed reference frame often used for terrestrial applications, aligned with the local horizon.
    OBSERVERLocationReferenceFrame_LTP = 16
    /// Local Vertical-Local Horizontal (LVLH): An orbit reference frame with the Z-axis pointing towards the center of the central body (oppoOBSERVER to local vertical), the X-axis in the velocity direction (local horizontal), and the Y-axis completing the right-hand system.
    OBSERVERLocationReferenceFrame_LVLH = 17
    /// Polar-North-East (PNE): A variation of local coordinate systems typically used in polar regions, with axes aligned toward the geographic North Pole, Eastward, and perpendicular to the Earth's surface.
    OBSERVERLocationReferenceFrame_PNE = 18
    /// Body-Fixed Reference Frame (BRF): A reference frame fixed to the body of a spacecraft or celestial object, oriented according to the body's principal axes.
    OBSERVERLocationReferenceFrame_BRF = 19

class TDM

class TDMCOLLECTION

/// Tracking Data Message
class TDM : flatbuffers_handle
    /// Unique identifier for the observation OBSERVER -  [Specific CCSDS Document]
    def OBSERVER_ID() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Cartesian X coordinate of the OBSERVER location in chosen reference frame
    def OBSERVER_X() -> float:
        return buf_.flatbuffers_field_float64(pos_, 6, 0.0)
    /// Cartesian Y coordinate of the OBSERVER location in chosen reference frame 
    def OBSERVER_Y() -> float:
        return buf_.flatbuffers_field_float64(pos_, 8, 0.0)
    /// Cartesian Z coordinate of the OBSERVER location in chosen reference frame 
    def OBSERVER_Z() -> float:
        return buf_.flatbuffers_field_float64(pos_, 10, 0.0)
    /// Cartesian X coordinate of the OBSERVER velocity in chosen reference frame
    def OBSERVER_VX() -> float:
        return buf_.flatbuffers_field_float64(pos_, 12, 0.0)
    /// Cartesian Y coordinate of the OBSERVER velocity in chosen reference frame 
    def OBSERVER_VY() -> float:
        return buf_.flatbuffers_field_float64(pos_, 14, 0.0)
    /// Cartesian Z coordinate of the OBSERVER velocity in chosen reference frame 
    def OBSERVER_VZ() -> float:
        return buf_.flatbuffers_field_float64(pos_, 16, 0.0)
    /// Reference frame used for OBSERVER location Cartesian coordinates (e.g., ECEF, ECI)
    def OBSERVER_POSITION_REFERENCE_FRAME() -> OBSERVERLocationReferenceFrame:
        return OBSERVERLocationReferenceFrame(buf_.flatbuffers_field_int8(pos_, 18, 0))
    /// Reference frame used for obs location Cartesian coordinates (e.g., ECEF, ECI)
    def OBS_REFERENCE_FRAME() -> OBSERVERLocationReferenceFrame:
        return OBSERVERLocationReferenceFrame(buf_.flatbuffers_field_int8(pos_, 20, 0))
    /// Epoch or observation time -  CCSDS 503.0-B-1
    def EPOCH() -> string:
        return buf_.flatbuffers_field_string(pos_, 22)
    /// TDM version number -  CCSDS 503.0-B-1, Page D-9
    def CCSDS_TDM_VERS() -> string:
        return buf_.flatbuffers_field_string(pos_, 24)
    /// Comments regarding TDM -  various sections, e.g., Page D-9
    def COMMENT(i:int) -> string:
        return buf_.flatbuffers_string(buf_.flatbuffers_field_vector(pos_, 26) + i * 4)
    def COMMENT_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 26)
    /// Date of TDM creation -  CCSDS 503.0-B-1, Page D-9
    def CREATION_DATE() -> string:
        return buf_.flatbuffers_field_string(pos_, 28)
    /// Originator of the TDM -  CCSDS 503.0-B-1, Page D-9
    def ORIGINATOR() -> string:
        return buf_.flatbuffers_field_string(pos_, 30)
    /// Start of metadata section -  CCSDS 503.0-B-1, Page D-9
    def META_START() -> string:
        return buf_.flatbuffers_field_string(pos_, 32)
    /// Time system used -  CCSDS 503.0-B-1, Page D-9
    def TIME_SYSTEM() -> string:
        return buf_.flatbuffers_field_string(pos_, 34)
    /// Start time of the data -  CCSDS 503.0-B-1, Page D-9
    def START_TIME() -> string:
        return buf_.flatbuffers_field_string(pos_, 36)
    /// Stop time of the data -  CCSDS 503.0-B-1, Page D-9
    def STOP_TIME() -> string:
        return buf_.flatbuffers_field_string(pos_, 38)
    /// First participant in the TDM -  CCSDS 503.0-B-1, Page D-9
    def PARTICIPANT_1() -> string:
        return buf_.flatbuffers_field_string(pos_, 40)
    /// Second participant in the TDM -  CCSDS 503.0-B-1, Page D-9
    def PARTICIPANT_2() -> string:
        return buf_.flatbuffers_field_string(pos_, 42)
    /// Third participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
    def PARTICIPANT_3() -> string:
        return buf_.flatbuffers_field_string(pos_, 44)
    /// Mode of TDM -  CCSDS 503.0-B-1, Page D-9
    def MODE() -> string:
        return buf_.flatbuffers_field_string(pos_, 46)
    /// First path in TDM -  CCSDS 503.0-B-1, Page D-9
    def PATH_1() -> int:
        return buf_.flatbuffers_field_uint16(pos_, 48, 0)
    /// Second path in TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
    def PATH_2() -> int:
        return buf_.flatbuffers_field_uint16(pos_, 50, 0)
    /// Transmit band -  CCSDS 503.0-B-1, Page D-9
    def TRANSMIT_BAND() -> string:
        return buf_.flatbuffers_field_string(pos_, 52)
    /// Receive band -  CCSDS 503.0-B-1, Page D-9
    def RECEIVE_BAND() -> string:
        return buf_.flatbuffers_field_string(pos_, 54)
    /// Integration interval -  CCSDS 503.0-B-1, Page D-9
    def INTEGRATION_INTERVAL() -> float:
        return buf_.flatbuffers_field_float32(pos_, 56, 0.0)
    /// Integration reference -  CCSDS 503.0-B-1, Page D-9
    def INTEGRATION_REF() -> string:
        return buf_.flatbuffers_field_string(pos_, 58)
    /// Receive delay for second participant -  CCSDS 503.0-B-1, Page D-9
    def RECEIVE_DELAY_2() -> float:
        return buf_.flatbuffers_field_float64(pos_, 60, 0.0)
    /// Receive delay for third participant -  CCSDS 503.0-B-1, Page D-9
    def RECEIVE_DELAY_3() -> float:
        return buf_.flatbuffers_field_float64(pos_, 62, 0.0)
    /// Data quality -  CCSDS 503.0-B-1, Page D-9
    def DATA_QUALITY() -> string:
        return buf_.flatbuffers_field_string(pos_, 64)
    /// End of metadata section -  CCSDS 503.0-B-1, Page D-9
    def META_STOP() -> string:
        return buf_.flatbuffers_field_string(pos_, 66)
    /// Start of data section -  CCSDS 503.0-B-1, Page D-9
    def DATA_START() -> string:
        return buf_.flatbuffers_field_string(pos_, 68)
    /// Transmit frequency for first participant -  CCSDS 503.0-B-1, Page D-9
    def TRANSMIT_FREQ_1() -> float:
        return buf_.flatbuffers_field_float64(pos_, 70, 0.0)
    /// Receive frequency -  CCSDS 503.0-B-1, Page D-9
    def RECEIVE_FREQ(i:int) -> float:
        return buf_.read_float64_le(buf_.flatbuffers_field_vector(pos_, 72) + i * 8)
    def RECEIVE_FREQ_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 72)
    /// End of data section -  CCSDS 503.0-B-1, Page D-9
    def DATA_STOP() -> string:
        return buf_.flatbuffers_field_string(pos_, 74)
    /// Additional properties as required by the specific application of the TDM...
    /// Reference for time tagging -  CCSDS 503.0-B-1, Page D-10
    def TIMETAG_REF() -> string:
        return buf_.flatbuffers_field_string(pos_, 76)
    /// Type of angle data -  CCSDS 503.0-B-1, Page D-12
    /// Can be AZEL, RADEC, XEYN, XSYE, or another value with provided ICD
    def ANGLE_TYPE() -> string:
        return buf_.flatbuffers_field_string(pos_, 78)
    /// First angle value -  CCSDS 503.0-B-1, Page D-12
    def ANGLE_1(i:int) -> float:
        return buf_.read_float32_le(buf_.flatbuffers_field_vector(pos_, 80) + i * 4)
    def ANGLE_1_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 80)
    /// Second angle value -  CCSDS 503.0-B-1, Page D-12
    def ANGLE_2(i:int) -> float:
        return buf_.read_float32_le(buf_.flatbuffers_field_vector(pos_, 82) + i * 4)
    def ANGLE_2_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 82)
    /// Uncertainty of first angle -  CCSDS 503.0-B-1
    def ANGLE_UNCERTAINTY_1() -> float:
        return buf_.flatbuffers_field_float32(pos_, 84, 0.0)
    /// Uncertainty of second angle -  CCSDS 503.0-B-1
    def ANGLE_UNCERTAINTY_2() -> float:
        return buf_.flatbuffers_field_float32(pos_, 86, 0.0)
    /// Rate of change of range -  CCSDS 503.0-B-1
    def RANGE_RATE() -> float:
        return buf_.flatbuffers_field_float64(pos_, 88, 0.0)
    /// Uncertainty in range -  CCSDS 503.0-B-1
    def RANGE_UNCERTAINTY() -> float:
        return buf_.flatbuffers_field_float64(pos_, 90, 0.0)
    /// Mode of range data -  CCSDS 503.0-B-1, Page D-10
    def RANGE_MODE() -> string:
        return buf_.flatbuffers_field_string(pos_, 92)
    /// Modulus value for range data -  CCSDS 503.0-B-1, Page D-10
    def RANGE_MODULUS() -> float:
        return buf_.flatbuffers_field_float64(pos_, 94, 0.0)
    /// First correction angle -  CCSDS 503.0-B-1, Page D-12
    def CORRECTION_ANGLE_1() -> float:
        return buf_.flatbuffers_field_float32(pos_, 96, 0.0)
    /// Second correction angle -  CCSDS 503.0-B-1, Page D-12
    def CORRECTION_ANGLE_2() -> float:
        return buf_.flatbuffers_field_float32(pos_, 98, 0.0)
    /// Indicator of corrections applied -  CCSDS 503.0-B-1, Page D-12
    def CORRECTIONS_APPLIED() -> string:
        return buf_.flatbuffers_field_string(pos_, 100)
    /// Dry component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
    def TROPO_DRY(i:int) -> float:
        return buf_.read_float64_le(buf_.flatbuffers_field_vector(pos_, 102) + i * 8)
    def TROPO_DRY_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 102)
    /// Wet component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
    def TROPO_WET(i:int) -> float:
        return buf_.read_float64_le(buf_.flatbuffers_field_vector(pos_, 104) + i * 8)
    def TROPO_WET_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 104)
    /// Slant total electron content -  CCSDS 503.0-B-1, Page D-13
    def STEC(i:int) -> float:
        return buf_.read_float64_le(buf_.flatbuffers_field_vector(pos_, 106) + i * 8)
    def STEC_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 106)
    /// Atmospheric pressure -  CCSDS 503.0-B-1, Page D-14
    def PRESSURE(i:int) -> float:
        return buf_.read_float64_le(buf_.flatbuffers_field_vector(pos_, 108) + i * 8)
    def PRESSURE_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 108)
    /// Relative humidity -  CCSDS 503.0-B-1, Page D-14
    def RHUMIDITY(i:int) -> float:
        return buf_.read_float64_le(buf_.flatbuffers_field_vector(pos_, 110) + i * 8)
    def RHUMIDITY_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 110)
    /// Ambient temperature -  CCSDS 503.0-B-1, Page D-14
    def TEMPERATURE(i:int) -> float:
        return buf_.read_float64_le(buf_.flatbuffers_field_vector(pos_, 112) + i * 8)
    def TEMPERATURE_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 112)
    /// Clock bias values -  CCSDS 503.0-B-1, Page D-15
    def CLOCK_BIAS(i:int) -> float:
        return buf_.read_float64_le(buf_.flatbuffers_field_vector(pos_, 114) + i * 8)
    def CLOCK_BIAS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 114)
    /// Clock drift values -  CCSDS 503.0-B-1, Page D-15
    def CLOCK_DRIFT(i:int) -> float:
        return buf_.read_float64_le(buf_.flatbuffers_field_vector(pos_, 116) + i * 8)
    def CLOCK_DRIFT_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 116)

def GetRootAsTDM(buf:string): return TDM { buf, buf.flatbuffers_indirect(0) }

struct TDMBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(57)
        return this
    def add_OBSERVER_ID(OBSERVER_ID:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, OBSERVER_ID)
        return this
    def add_OBSERVER_X(OBSERVER_X:float):
        b_.PrependFloat64Slot(1, OBSERVER_X, 0.0)
        return this
    def add_OBSERVER_Y(OBSERVER_Y:float):
        b_.PrependFloat64Slot(2, OBSERVER_Y, 0.0)
        return this
    def add_OBSERVER_Z(OBSERVER_Z:float):
        b_.PrependFloat64Slot(3, OBSERVER_Z, 0.0)
        return this
    def add_OBSERVER_VX(OBSERVER_VX:float):
        b_.PrependFloat64Slot(4, OBSERVER_VX, 0.0)
        return this
    def add_OBSERVER_VY(OBSERVER_VY:float):
        b_.PrependFloat64Slot(5, OBSERVER_VY, 0.0)
        return this
    def add_OBSERVER_VZ(OBSERVER_VZ:float):
        b_.PrependFloat64Slot(6, OBSERVER_VZ, 0.0)
        return this
    def add_OBSERVER_POSITION_REFERENCE_FRAME(OBSERVER_POSITION_REFERENCE_FRAME:OBSERVERLocationReferenceFrame):
        b_.PrependInt8Slot(7, OBSERVER_POSITION_REFERENCE_FRAME, 0)
        return this
    def add_OBS_REFERENCE_FRAME(OBS_REFERENCE_FRAME:OBSERVERLocationReferenceFrame):
        b_.PrependInt8Slot(8, OBS_REFERENCE_FRAME, 0)
        return this
    def add_EPOCH(EPOCH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(9, EPOCH)
        return this
    def add_CCSDS_TDM_VERS(CCSDS_TDM_VERS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(10, CCSDS_TDM_VERS)
        return this
    def add_COMMENT(COMMENT:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(11, COMMENT)
        return this
    def add_CREATION_DATE(CREATION_DATE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(12, CREATION_DATE)
        return this
    def add_ORIGINATOR(ORIGINATOR:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(13, ORIGINATOR)
        return this
    def add_META_START(META_START:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(14, META_START)
        return this
    def add_TIME_SYSTEM(TIME_SYSTEM:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(15, TIME_SYSTEM)
        return this
    def add_START_TIME(START_TIME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(16, START_TIME)
        return this
    def add_STOP_TIME(STOP_TIME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(17, STOP_TIME)
        return this
    def add_PARTICIPANT_1(PARTICIPANT_1:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(18, PARTICIPANT_1)
        return this
    def add_PARTICIPANT_2(PARTICIPANT_2:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(19, PARTICIPANT_2)
        return this
    def add_PARTICIPANT_3(PARTICIPANT_3:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(20, PARTICIPANT_3)
        return this
    def add_MODE(MODE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(21, MODE)
        return this
    def add_PATH_1(PATH_1:int):
        b_.PrependUint16Slot(22, PATH_1, 0)
        return this
    def add_PATH_2(PATH_2:int):
        b_.PrependUint16Slot(23, PATH_2, 0)
        return this
    def add_TRANSMIT_BAND(TRANSMIT_BAND:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(24, TRANSMIT_BAND)
        return this
    def add_RECEIVE_BAND(RECEIVE_BAND:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(25, RECEIVE_BAND)
        return this
    def add_INTEGRATION_INTERVAL(INTEGRATION_INTERVAL:float):
        b_.PrependFloat32Slot(26, INTEGRATION_INTERVAL, 0.0)
        return this
    def add_INTEGRATION_REF(INTEGRATION_REF:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(27, INTEGRATION_REF)
        return this
    def add_RECEIVE_DELAY_2(RECEIVE_DELAY_2:float):
        b_.PrependFloat64Slot(28, RECEIVE_DELAY_2, 0.0)
        return this
    def add_RECEIVE_DELAY_3(RECEIVE_DELAY_3:float):
        b_.PrependFloat64Slot(29, RECEIVE_DELAY_3, 0.0)
        return this
    def add_DATA_QUALITY(DATA_QUALITY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(30, DATA_QUALITY)
        return this
    def add_META_STOP(META_STOP:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(31, META_STOP)
        return this
    def add_DATA_START(DATA_START:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(32, DATA_START)
        return this
    def add_TRANSMIT_FREQ_1(TRANSMIT_FREQ_1:float):
        b_.PrependFloat64Slot(33, TRANSMIT_FREQ_1, 0.0)
        return this
    def add_RECEIVE_FREQ(RECEIVE_FREQ:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(34, RECEIVE_FREQ)
        return this
    def add_DATA_STOP(DATA_STOP:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(35, DATA_STOP)
        return this
    def add_TIMETAG_REF(TIMETAG_REF:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(36, TIMETAG_REF)
        return this
    def add_ANGLE_TYPE(ANGLE_TYPE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(37, ANGLE_TYPE)
        return this
    def add_ANGLE_1(ANGLE_1:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(38, ANGLE_1)
        return this
    def add_ANGLE_2(ANGLE_2:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(39, ANGLE_2)
        return this
    def add_ANGLE_UNCERTAINTY_1(ANGLE_UNCERTAINTY_1:float):
        b_.PrependFloat32Slot(40, ANGLE_UNCERTAINTY_1, 0.0)
        return this
    def add_ANGLE_UNCERTAINTY_2(ANGLE_UNCERTAINTY_2:float):
        b_.PrependFloat32Slot(41, ANGLE_UNCERTAINTY_2, 0.0)
        return this
    def add_RANGE_RATE(RANGE_RATE:float):
        b_.PrependFloat64Slot(42, RANGE_RATE, 0.0)
        return this
    def add_RANGE_UNCERTAINTY(RANGE_UNCERTAINTY:float):
        b_.PrependFloat64Slot(43, RANGE_UNCERTAINTY, 0.0)
        return this
    def add_RANGE_MODE(RANGE_MODE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(44, RANGE_MODE)
        return this
    def add_RANGE_MODULUS(RANGE_MODULUS:float):
        b_.PrependFloat64Slot(45, RANGE_MODULUS, 0.0)
        return this
    def add_CORRECTION_ANGLE_1(CORRECTION_ANGLE_1:float):
        b_.PrependFloat32Slot(46, CORRECTION_ANGLE_1, 0.0)
        return this
    def add_CORRECTION_ANGLE_2(CORRECTION_ANGLE_2:float):
        b_.PrependFloat32Slot(47, CORRECTION_ANGLE_2, 0.0)
        return this
    def add_CORRECTIONS_APPLIED(CORRECTIONS_APPLIED:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(48, CORRECTIONS_APPLIED)
        return this
    def add_TROPO_DRY(TROPO_DRY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(49, TROPO_DRY)
        return this
    def add_TROPO_WET(TROPO_WET:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(50, TROPO_WET)
        return this
    def add_STEC(STEC:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(51, STEC)
        return this
    def add_PRESSURE(PRESSURE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(52, PRESSURE)
        return this
    def add_RHUMIDITY(RHUMIDITY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(53, RHUMIDITY)
        return this
    def add_TEMPERATURE(TEMPERATURE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(54, TEMPERATURE)
        return this
    def add_CLOCK_BIAS(CLOCK_BIAS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(55, CLOCK_BIAS)
        return this
    def add_CLOCK_DRIFT(CLOCK_DRIFT:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(56, CLOCK_DRIFT)
        return this
    def end():
        return b_.EndObject()

def TDMStartCOMMENTVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def TDMCreateCOMMENTVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def TDMStartRECEIVE_FREQVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(8, n_, 8)
def TDMCreateRECEIVE_FREQVector(b_:flatbuffers_builder, v_:[float]):
    b_.StartVector(8, v_.length, 8)
    reverse(v_) e_: b_.PrependFloat64(e_)
    return b_.EndVector(v_.length)

def TDMStartANGLE_1Vector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def TDMCreateANGLE_1Vector(b_:flatbuffers_builder, v_:[float]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependFloat32(e_)
    return b_.EndVector(v_.length)

def TDMStartANGLE_2Vector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def TDMCreateANGLE_2Vector(b_:flatbuffers_builder, v_:[float]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependFloat32(e_)
    return b_.EndVector(v_.length)

def TDMStartTROPO_DRYVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(8, n_, 8)
def TDMCreateTROPO_DRYVector(b_:flatbuffers_builder, v_:[float]):
    b_.StartVector(8, v_.length, 8)
    reverse(v_) e_: b_.PrependFloat64(e_)
    return b_.EndVector(v_.length)

def TDMStartTROPO_WETVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(8, n_, 8)
def TDMCreateTROPO_WETVector(b_:flatbuffers_builder, v_:[float]):
    b_.StartVector(8, v_.length, 8)
    reverse(v_) e_: b_.PrependFloat64(e_)
    return b_.EndVector(v_.length)

def TDMStartSTECVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(8, n_, 8)
def TDMCreateSTECVector(b_:flatbuffers_builder, v_:[float]):
    b_.StartVector(8, v_.length, 8)
    reverse(v_) e_: b_.PrependFloat64(e_)
    return b_.EndVector(v_.length)

def TDMStartPRESSUREVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(8, n_, 8)
def TDMCreatePRESSUREVector(b_:flatbuffers_builder, v_:[float]):
    b_.StartVector(8, v_.length, 8)
    reverse(v_) e_: b_.PrependFloat64(e_)
    return b_.EndVector(v_.length)

def TDMStartRHUMIDITYVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(8, n_, 8)
def TDMCreateRHUMIDITYVector(b_:flatbuffers_builder, v_:[float]):
    b_.StartVector(8, v_.length, 8)
    reverse(v_) e_: b_.PrependFloat64(e_)
    return b_.EndVector(v_.length)

def TDMStartTEMPERATUREVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(8, n_, 8)
def TDMCreateTEMPERATUREVector(b_:flatbuffers_builder, v_:[float]):
    b_.StartVector(8, v_.length, 8)
    reverse(v_) e_: b_.PrependFloat64(e_)
    return b_.EndVector(v_.length)

def TDMStartCLOCK_BIASVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(8, n_, 8)
def TDMCreateCLOCK_BIASVector(b_:flatbuffers_builder, v_:[float]):
    b_.StartVector(8, v_.length, 8)
    reverse(v_) e_: b_.PrependFloat64(e_)
    return b_.EndVector(v_.length)

def TDMStartCLOCK_DRIFTVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(8, n_, 8)
def TDMCreateCLOCK_DRIFTVector(b_:flatbuffers_builder, v_:[float]):
    b_.StartVector(8, v_.length, 8)
    reverse(v_) e_: b_.PrependFloat64(e_)
    return b_.EndVector(v_.length)

/// Collection of TDM records
class TDMCOLLECTION : flatbuffers_handle
    def RECORDS(i:int) -> TDM:
        return TDM { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 4) + i * 4) }
    def RECORDS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 4)

def GetRootAsTDMCOLLECTION(buf:string): return TDMCOLLECTION { buf, buf.flatbuffers_indirect(0) }

struct TDMCOLLECTIONBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(1)
        return this
    def add_RECORDS(RECORDS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, RECORDS)
        return this
    def end():
        return b_.EndObject()

def TDMCOLLECTIONStartRECORDSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def TDMCOLLECTIONCreateRECORDSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

