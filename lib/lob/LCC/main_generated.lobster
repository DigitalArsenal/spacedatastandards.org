// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum legacyCountryCode:
    /// Arab Satellite Communications Organization
    legacyCountryCode_AB = 0
    /// Asia Broadcast Satellite
    legacyCountryCode_ABS = 1
    /// Asia Satellite Telecommunications Company (ASIASAT)
    legacyCountryCode_AC = 2
    /// Algeria
    legacyCountryCode_ALG = 3
    /// Angola
    legacyCountryCode_ANG = 4
    /// Argentina
    legacyCountryCode_ARGN = 5
    /// Republic of Armenia
    legacyCountryCode_ARM = 6
    /// Austria
    legacyCountryCode_ASRA = 7
    /// Australia
    legacyCountryCode_AUS = 8
    /// Azerbaijan
    legacyCountryCode_AZER = 9
    /// Belgium
    legacyCountryCode_BEL = 10
    /// Belarus
    legacyCountryCode_BELA = 11
    /// Bermuda
    legacyCountryCode_BERM = 12
    /// People's Republic of Bangladesh
    legacyCountryCode_BGD = 13
    /// Kingdom of Bhutan
    legacyCountryCode_BHUT = 14
    /// Bolivia
    legacyCountryCode_BOL = 15
    /// Brazil
    legacyCountryCode_BRAZ = 16
    /// Bulgaria
    legacyCountryCode_BUL = 17
    /// Canada
    legacyCountryCode_CA = 18
    /// China/Brazil
    legacyCountryCode_CHBZ = 19
    /// China/Turkey
    legacyCountryCode_CHTU = 20
    /// Chile
    legacyCountryCode_CHLE = 21
    /// Commonwealth of Independent States (former USSR)
    legacyCountryCode_CIS = 22
    /// Colombia
    legacyCountryCode_COL = 23
    /// Republic of Costa Rica
    legacyCountryCode_CRI = 24
    /// Czech Republic (former Czechoslovakia)
    legacyCountryCode_CZCH = 25
    /// Denmark
    legacyCountryCode_DEN = 26
    /// Republic of Djibouti
    legacyCountryCode_DJI = 27
    /// Ecuador
    legacyCountryCode_ECU = 28
    /// Egypt
    legacyCountryCode_EGYP = 29
    /// European Space Agency
    legacyCountryCode_ESA = 30
    /// European Space Research Organization
    legacyCountryCode_ESRO = 31
    /// Estonia
    legacyCountryCode_EST = 32
    /// Ethiopia
    legacyCountryCode_ETH = 33
    /// European Organization for the Exploitation of Meteorological Satellites (EUMETSAT)
    legacyCountryCode_EUME = 34
    /// European Telecommunications Satellite Organization (EUTELSAT)
    legacyCountryCode_EUTE = 35
    /// France/Germany
    legacyCountryCode_FGER = 36
    /// Finland
    legacyCountryCode_FIN = 37
    /// France
    legacyCountryCode_FR = 38
    /// France/Italy
    legacyCountryCode_FRIT = 39
    /// Germany
    legacyCountryCode_GER = 40
    /// Republic of Ghana
    legacyCountryCode_GHA = 41
    /// Globalstar
    legacyCountryCode_GLOB = 42
    /// Greece
    legacyCountryCode_GREC = 43
    /// Greece/Saudi Arabia
    legacyCountryCode_GRSA = 44
    /// Guatemala
    legacyCountryCode_GUAT = 45
    /// Hungary
    legacyCountryCode_HUN = 46
    /// International Mobile Satellite Organization (INMARSAT)
    legacyCountryCode_IM = 47
    /// India
    legacyCountryCode_IND = 48
    /// Indonesia
    legacyCountryCode_INDO = 49
    /// Iran
    legacyCountryCode_IRAN = 50
    /// Iraq
    legacyCountryCode_IRAQ = 51
    /// Iridium
    legacyCountryCode_IRID = 52
    /// Ireland
    legacyCountryCode_IRL = 53
    /// Israel
    legacyCountryCode_ISRA = 54
    /// Indian Space Research Organisation
    legacyCountryCode_ISRO = 55
    /// International Space Station
    legacyCountryCode_ISS = 56
    /// Italy
    legacyCountryCode_IT = 57
    /// International Telecommunications Satellite Organization (INTELSAT)
    legacyCountryCode_ITSO = 58
    /// Japan
    legacyCountryCode_JPN = 59
    /// Kazakhstan
    legacyCountryCode_KAZ = 60
    /// Republic of Kenya
    legacyCountryCode_KEN = 61
    /// Laos
    legacyCountryCode_LAOS = 62
    /// Democratic Socialist Republic of Sri Lanka
    legacyCountryCode_LKA = 63
    /// Lithuania
    legacyCountryCode_LTU = 64
    /// Luxembourg
    legacyCountryCode_LUXE = 65
    /// Morocco
    legacyCountryCode_MA = 66
    /// Malaysia
    legacyCountryCode_MALA = 67
    /// Principality of Monaco
    legacyCountryCode_MCO = 68
    /// Republic of Moldova
    legacyCountryCode_MDA = 69
    /// Mexico
    legacyCountryCode_MEX = 70
    /// Republic of the Union of Myanmar
    legacyCountryCode_MMR = 71
    /// Mongolia
    legacyCountryCode_MNG = 72
    /// Mauritius
    legacyCountryCode_MUS = 73
    /// North Atlantic Treaty Organization
    legacyCountryCode_NATO = 74
    /// Netherlands
    legacyCountryCode_NETH = 75
    /// New ICO
    legacyCountryCode_NICO = 76
    /// Nigeria
    legacyCountryCode_NIG = 77
    /// Democratic People's Republic of Korea
    legacyCountryCode_NKOR = 78
    /// Norway
    legacyCountryCode_NOR = 79
    /// Federal Democratic Republic of Nepal
    legacyCountryCode_NPL = 80
    /// New Zealand
    legacyCountryCode_NZ = 81
    /// O3b Networks
    legacyCountryCode_O3B = 82
    /// ORBCOMM
    legacyCountryCode_ORB = 83
    /// Pakistan
    legacyCountryCode_PAKI = 84
    /// Peru
    legacyCountryCode_PERU = 85
    /// Poland
    legacyCountryCode_POL = 86
    /// Portugal
    legacyCountryCode_POR = 87
    /// People's Republic of China
    legacyCountryCode_PRC = 88
    /// Republic of Paraguay
    legacyCountryCode_PRY = 89
    /// People's Republic of China/European Space Agency
    legacyCountryCode_PRES = 90
    /// State of Qatar
    legacyCountryCode_QAT = 91
    /// RascomStar-QAF
    legacyCountryCode_RASC = 92
    /// Taiwan (Republic of China)
    legacyCountryCode_ROC = 93
    /// Romania
    legacyCountryCode_ROM = 94
    /// Philippines (Republic of the Philippines)
    legacyCountryCode_RP = 95
    /// Republic of Rwanda
    legacyCountryCode_RWA = 96
    /// South Africa
    legacyCountryCode_SAFR = 97
    /// Saudi Arabia
    legacyCountryCode_SAUD = 98
    /// Republic of Sudan
    legacyCountryCode_SDN = 99
    /// Sea Launch
    legacyCountryCode_SEAL = 100
    /// SES
    legacyCountryCode_SES = 101
    /// Singapore/Japan
    legacyCountryCode_SGJP = 102
    /// Singapore
    legacyCountryCode_SING = 103
    /// Republic of Korea
    legacyCountryCode_SKOR = 104
    /// Spain
    legacyCountryCode_SPN = 105
    /// Singapore/Taiwan
    legacyCountryCode_STCT = 106
    /// Slovenia
    legacyCountryCode_SVN = 107
    /// Sweden
    legacyCountryCode_SWED = 108
    /// Switzerland
    legacyCountryCode_SWTZ = 109
    /// To Be Determined
    legacyCountryCode_TBD = 110
    /// Thailand
    legacyCountryCode_THAI = 111
    /// Turkmenistan/Monaco
    legacyCountryCode_TMMC = 112
    /// Republic of Tunisia
    legacyCountryCode_TUN = 113
    /// Turkey
    legacyCountryCode_TURK = 114
    /// United Arab Emirates
    legacyCountryCode_UAE = 115
    /// United Kingdom
    legacyCountryCode_UK = 116
    /// Ukraine
    legacyCountryCode_UKR = 117
    /// Unknown
    legacyCountryCode_UNK = 118
    /// Uruguay
    legacyCountryCode_URY = 119
    /// United States
    legacyCountryCode_US = 120
    /// United States/Brazil
    legacyCountryCode_USBZ = 121
    /// Vatican City State
    legacyCountryCode_VAT = 122
    /// Venezuela
    legacyCountryCode_VENZ = 123
    /// Vietnam
    legacyCountryCode_VTNM = 124
    /// Republic of Zimbabwe
    legacyCountryCode_ZWE = 125

class LCC

class LCCCOLLECTION

/// Legacy Country Code
class LCC : flatbuffers.handle
    def OWNER() -> legacyCountryCode:
        return legacyCountryCode(flatbuffers.field_int8(buf_, pos_, 4, 0))

def GetRootAsLCC(buf:string): return LCC { buf, flatbuffers.indirect(buf, 0) }

struct LCCBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(1)
        return this
    def add_OWNER(OWNER:legacyCountryCode):
        b_.PrependInt8Slot(0, OWNER, 0)
        return this
    def end():
        return b_.EndObject()

class LCCCOLLECTION : flatbuffers.handle
    def RECORDS(i:int) -> LCC:
        return LCC { buf_, flatbuffers.indirect(buf_, flatbuffers.field_vector(buf_, pos_, 4) + i * 4) }
    def RECORDS_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 4)

def GetRootAsLCCCOLLECTION(buf:string): return LCCCOLLECTION { buf, flatbuffers.indirect(buf, 0) }

struct LCCCOLLECTIONBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(1)
        return this
    def add_RECORDS(RECORDS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, RECORDS)
        return this
    def end():
        return b_.EndObject()

def LCCCOLLECTIONStartRECORDSVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def LCCCOLLECTIONCreateRECORDSVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

