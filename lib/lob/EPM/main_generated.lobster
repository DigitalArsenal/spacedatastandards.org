// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum KeyType:
    KeyType_Signing = 0
    KeyType_Encryption = 1

class CryptoKey

class Address

class EPM

class EPMCOLLECTION

/// Represents cryptographic key information
class CryptoKey : flatbuffers_handle
    /// Public part of the cryptographic key, in hexidecimal format
    def PUBLIC_KEY() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Extended public key https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#extended-keys
    def XPUB() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// Private part of the cryptographic key in hexidecimal format, should be kept secret 
    def PRIVATE_KEY() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// Extended private key https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#extended-keys
    def XPRIV() -> string:
        return buf_.flatbuffers_field_string(pos_, 10)
    /// Address generated from the cryptographic key
    def KEY_ADDRESS() -> string:
        return buf_.flatbuffers_field_string(pos_, 12)
    /// Type of the address generated from the cryptographic key
    def ADDRESS_TYPE() -> string:
        return buf_.flatbuffers_field_string(pos_, 14)
    /// Type of the cryptographic key (signing or encryption)
    def KEY_TYPE() -> KeyType:
        return KeyType(buf_.flatbuffers_field_int8(pos_, 16, 0))

def GetRootAsCryptoKey(buf:string): return CryptoKey { buf, buf.flatbuffers_indirect(0) }

struct CryptoKeyBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(7)
        return this
    def add_PUBLIC_KEY(PUBLIC_KEY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, PUBLIC_KEY)
        return this
    def add_XPUB(XPUB:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, XPUB)
        return this
    def add_PRIVATE_KEY(PRIVATE_KEY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, PRIVATE_KEY)
        return this
    def add_XPRIV(XPRIV:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, XPRIV)
        return this
    def add_KEY_ADDRESS(KEY_ADDRESS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, KEY_ADDRESS)
        return this
    def add_ADDRESS_TYPE(ADDRESS_TYPE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, ADDRESS_TYPE)
        return this
    def add_KEY_TYPE(KEY_TYPE:KeyType):
        b_.PrependInt8Slot(6, KEY_TYPE, 0)
        return this
    def end():
        return b_.EndObject()

/// Represents a geographic address
class Address : flatbuffers_handle
    /// Country of the address
    def COUNTRY() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Region of the address (e.g., state or province)
    def REGION() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// Locality of the address (e.g., city or town)
    def LOCALITY() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// Postal code of the address
    def POSTAL_CODE() -> string:
        return buf_.flatbuffers_field_string(pos_, 10)
    /// Street address
    def STREET() -> string:
        return buf_.flatbuffers_field_string(pos_, 12)
    /// Post office box number
    def POST_OFFICE_BOX_NUMBER() -> string:
        return buf_.flatbuffers_field_string(pos_, 14)

def GetRootAsAddress(buf:string): return Address { buf, buf.flatbuffers_indirect(0) }

struct AddressBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(6)
        return this
    def add_COUNTRY(COUNTRY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, COUNTRY)
        return this
    def add_REGION(REGION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, REGION)
        return this
    def add_LOCALITY(LOCALITY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, LOCALITY)
        return this
    def add_POSTAL_CODE(POSTAL_CODE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, POSTAL_CODE)
        return this
    def add_STREET(STREET:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, STREET)
        return this
    def add_POST_OFFICE_BOX_NUMBER(POST_OFFICE_BOX_NUMBER:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, POST_OFFICE_BOX_NUMBER)
        return this
    def end():
        return b_.EndObject()

/// Entity Profile Message
class EPM : flatbuffers_handle
    /// Distinguished Name of the entity
    def DN() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Common name of the entity (person or organization)
    def LEGAL_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// Family name or surname of the person
    def FAMILY_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// Given name or first name of the person
    def GIVEN_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 10)
    /// Additional name or middle name of the person
    def ADDITIONAL_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 12)
    /// Honorific prefix preceding the person's name (e.g., Mr., Dr.)
    def HONORIFIC_PREFIX() -> string:
        return buf_.flatbuffers_field_string(pos_, 14)
    /// Honorific suffix following the person's name (e.g., Jr., Sr.)
    def HONORIFIC_SUFFIX() -> string:
        return buf_.flatbuffers_field_string(pos_, 16)
    /// Job title of the person
    def JOB_TITLE() -> string:
        return buf_.flatbuffers_field_string(pos_, 18)
    /// Occupation of the person
    def OCCUPATION() -> string:
        return buf_.flatbuffers_field_string(pos_, 20)
    /// Physical Address
    def ADDRESS() -> Address?:
        let o = buf_.flatbuffers_field_table(pos_, 22)
        return if o: Address { buf_, o } else: nil
    /// Alternate names for the entity
    def ALTERNATE_NAMES(i:int) -> string:
        return buf_.flatbuffers_string(buf_.flatbuffers_field_vector(pos_, 24) + i * 4)
    def ALTERNATE_NAMES_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 24)
    /// Email address of the entity
    def EMAIL() -> string:
        return buf_.flatbuffers_field_string(pos_, 26)
    /// Telephone number of the entity
    def TELEPHONE() -> string:
        return buf_.flatbuffers_field_string(pos_, 28)
    /// Cryptographic keys associated with the entity
    def KEYS(i:int) -> CryptoKey:
        return CryptoKey { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 30) + i * 4) }
    def KEYS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 30)
    /// Multiformat addresses associated with the entity
    def MULTIFORMAT_ADDRESS(i:int) -> string:
        return buf_.flatbuffers_string(buf_.flatbuffers_field_vector(pos_, 32) + i * 4)
    def MULTIFORMAT_ADDRESS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 32)

def GetRootAsEPM(buf:string): return EPM { buf, buf.flatbuffers_indirect(0) }

struct EPMBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(15)
        return this
    def add_DN(DN:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, DN)
        return this
    def add_LEGAL_NAME(LEGAL_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, LEGAL_NAME)
        return this
    def add_FAMILY_NAME(FAMILY_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, FAMILY_NAME)
        return this
    def add_GIVEN_NAME(GIVEN_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, GIVEN_NAME)
        return this
    def add_ADDITIONAL_NAME(ADDITIONAL_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, ADDITIONAL_NAME)
        return this
    def add_HONORIFIC_PREFIX(HONORIFIC_PREFIX:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, HONORIFIC_PREFIX)
        return this
    def add_HONORIFIC_SUFFIX(HONORIFIC_SUFFIX:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(6, HONORIFIC_SUFFIX)
        return this
    def add_JOB_TITLE(JOB_TITLE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(7, JOB_TITLE)
        return this
    def add_OCCUPATION(OCCUPATION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(8, OCCUPATION)
        return this
    def add_ADDRESS(ADDRESS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(9, ADDRESS)
        return this
    def add_ALTERNATE_NAMES(ALTERNATE_NAMES:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(10, ALTERNATE_NAMES)
        return this
    def add_EMAIL(EMAIL:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(11, EMAIL)
        return this
    def add_TELEPHONE(TELEPHONE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(12, TELEPHONE)
        return this
    def add_KEYS(KEYS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(13, KEYS)
        return this
    def add_MULTIFORMAT_ADDRESS(MULTIFORMAT_ADDRESS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(14, MULTIFORMAT_ADDRESS)
        return this
    def end():
        return b_.EndObject()

def EPMStartALTERNATE_NAMESVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def EPMCreateALTERNATE_NAMESVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EPMStartKEYSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def EPMCreateKEYSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EPMStartMULTIFORMAT_ADDRESSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def EPMCreateMULTIFORMAT_ADDRESSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

class EPMCOLLECTION : flatbuffers_handle
    def RECORDS(i:int) -> EPM:
        return EPM { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 4) + i * 4) }
    def RECORDS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 4)

def GetRootAsEPMCOLLECTION(buf:string): return EPMCOLLECTION { buf, buf.flatbuffers_indirect(0) }

struct EPMCOLLECTIONBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(1)
        return this
    def add_RECORDS(RECORDS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, RECORDS)
        return this
    def end():
        return b_.EndObject()

def EPMCOLLECTIONStartRECORDSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def EPMCOLLECTIONCreateRECORDSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

