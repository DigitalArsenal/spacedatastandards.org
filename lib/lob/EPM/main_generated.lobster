// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

/// Union type for Entity, which can be either a Person or an Organization
enum Entity:
    Entity_NONE = 0
    Entity_Person = 1
    Entity_Organization = 2

class CryptoKey

class ContactPoint

class Organization

class Occupation

class Person

class EPM

class EPMCOLLECTION

/// Crypto Key Information
class CryptoKey : flatbuffers_handle
    /// Public part of the cryptographic key
    def PUBLIC_KEY() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Extended public key
    def XPUB() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// Private part of the cryptographic key, should be kept secret
    def PRIVATE_KEY() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// Extended private key
    def XPRIV() -> string:
        return buf_.flatbuffers_field_string(pos_, 10)
    /// Address generated from the cryptographic key
    def KEY_ADDRESS() -> string:
        return buf_.flatbuffers_field_string(pos_, 12)
    /// Numerical type of the address generated from the cryptographic key
    def ADDRESS_TYPE() -> string:
        return buf_.flatbuffers_field_string(pos_, 14)

def GetRootAsCryptoKey(buf:string): return CryptoKey { buf, buf.flatbuffers_indirect(0) }

struct CryptoKeyBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(6)
        return this
    def add_PUBLIC_KEY(PUBLIC_KEY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, PUBLIC_KEY)
        return this
    def add_XPUB(XPUB:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, XPUB)
        return this
    def add_PRIVATE_KEY(PRIVATE_KEY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, PRIVATE_KEY)
        return this
    def add_XPRIV(XPRIV:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, XPRIV)
        return this
    def add_KEY_ADDRESS(KEY_ADDRESS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, KEY_ADDRESS)
        return this
    def add_ADDRESS_TYPE(ADDRESS_TYPE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, ADDRESS_TYPE)
        return this
    def end():
        return b_.EndObject()

/// Information about a contact point
class ContactPoint : flatbuffers_handle
    /// Name of the contact point or person
    def NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Type of contact (e.g., customer service, technical support)
    def CONTACT_TYPE() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// Email address
    def EMAIL() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// Telephone number
    def TELEPHONE() -> string:
        return buf_.flatbuffers_field_string(pos_, 10)
    /// Available contact options (e.g., HearingImpairedSupported)
    def CONTACT_OPTION() -> string:
        return buf_.flatbuffers_field_string(pos_, 12)
    /// Geographic area where the service is available
    def AREA_SERVED() -> string:
        return buf_.flatbuffers_field_string(pos_, 14)
    /// Language available for communication
    def AVAILABLE_LANGUAGE() -> string:
        return buf_.flatbuffers_field_string(pos_, 16)
    /// Country of the address
    def ADDRESS_COUNTRY() -> string:
        return buf_.flatbuffers_field_string(pos_, 18)
    /// Region of the address (e.g., state or province)
    def ADDRESS_REGION() -> string:
        return buf_.flatbuffers_field_string(pos_, 20)
    /// Locality of the address (e.g., city or town)
    def ADDRESS_LOCALITY() -> string:
        return buf_.flatbuffers_field_string(pos_, 22)
    /// Postal code of the address
    def POSTAL_CODE() -> string:
        return buf_.flatbuffers_field_string(pos_, 24)
    /// Street address
    def STREET_ADDRESS() -> string:
        return buf_.flatbuffers_field_string(pos_, 26)
    /// Post office box number
    def POST_OFFICE_BOX_NUMBER() -> string:
        return buf_.flatbuffers_field_string(pos_, 28)

def GetRootAsContactPoint(buf:string): return ContactPoint { buf, buf.flatbuffers_indirect(0) }

struct ContactPointBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(13)
        return this
    def add_NAME(NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, NAME)
        return this
    def add_CONTACT_TYPE(CONTACT_TYPE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, CONTACT_TYPE)
        return this
    def add_EMAIL(EMAIL:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, EMAIL)
        return this
    def add_TELEPHONE(TELEPHONE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, TELEPHONE)
        return this
    def add_CONTACT_OPTION(CONTACT_OPTION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, CONTACT_OPTION)
        return this
    def add_AREA_SERVED(AREA_SERVED:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, AREA_SERVED)
        return this
    def add_AVAILABLE_LANGUAGE(AVAILABLE_LANGUAGE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(6, AVAILABLE_LANGUAGE)
        return this
    def add_ADDRESS_COUNTRY(ADDRESS_COUNTRY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(7, ADDRESS_COUNTRY)
        return this
    def add_ADDRESS_REGION(ADDRESS_REGION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(8, ADDRESS_REGION)
        return this
    def add_ADDRESS_LOCALITY(ADDRESS_LOCALITY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(9, ADDRESS_LOCALITY)
        return this
    def add_POSTAL_CODE(POSTAL_CODE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(10, POSTAL_CODE)
        return this
    def add_STREET_ADDRESS(STREET_ADDRESS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(11, STREET_ADDRESS)
        return this
    def add_POST_OFFICE_BOX_NUMBER(POST_OFFICE_BOX_NUMBER:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(12, POST_OFFICE_BOX_NUMBER)
        return this
    def end():
        return b_.EndObject()

/// Basic information about an organization
class Organization : flatbuffers_handle
    /// Common name of the organization
    def NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Legal name of the organization
    def LEGAL_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)

def GetRootAsOrganization(buf:string): return Organization { buf, buf.flatbuffers_indirect(0) }

struct OrganizationBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(2)
        return this
    def add_NAME(NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, NAME)
        return this
    def add_LEGAL_NAME(LEGAL_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, LEGAL_NAME)
        return this
    def end():
        return b_.EndObject()

/// Information about a person's occupation
class Occupation : flatbuffers_handle
    /// Name of the occupation
    def NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)

def GetRootAsOccupation(buf:string): return Occupation { buf, buf.flatbuffers_indirect(0) }

struct OccupationBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(1)
        return this
    def add_NAME(NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, NAME)
        return this
    def end():
        return b_.EndObject()

/// Information about a person
class Person : flatbuffers_handle
    /// Family name or surname of the person
    def FAMILY_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Given name or first name of the person
    def GIVEN_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// Additional name or middle name of the person
    def ADDITIONAL_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// Honorific prefix preceding the person's name
    def HONORIFIC_PREFIX() -> string:
        return buf_.flatbuffers_field_string(pos_, 10)
    /// Honorific suffix following the person's name
    def HONORIFIC_SUFFIX() -> string:
        return buf_.flatbuffers_field_string(pos_, 12)

def GetRootAsPerson(buf:string): return Person { buf, buf.flatbuffers_indirect(0) }

struct PersonBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(5)
        return this
    def add_FAMILY_NAME(FAMILY_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, FAMILY_NAME)
        return this
    def add_GIVEN_NAME(GIVEN_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, GIVEN_NAME)
        return this
    def add_ADDITIONAL_NAME(ADDITIONAL_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, ADDITIONAL_NAME)
        return this
    def add_HONORIFIC_PREFIX(HONORIFIC_PREFIX:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, HONORIFIC_PREFIX)
        return this
    def add_HONORIFIC_SUFFIX(HONORIFIC_SUFFIX:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, HONORIFIC_SUFFIX)
        return this
    def end():
        return b_.EndObject()

/// Entity Profile Message
class EPM : flatbuffers_handle
    /// Common name of the entity (person or organization)
    def NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Alternate name for the entity
    def ALTERNATE_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// Description of the entity
    def DESCRIPTION() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// URL of an image representing the entity
    def IMAGE() -> string:
        return buf_.flatbuffers_field_string(pos_, 10)
    /// URL of a webpage that unambiguously indicates the entity's identity
    def SAME_AS() -> string:
        return buf_.flatbuffers_field_string(pos_, 12)
    /// URL of the entity's website
    def URL() -> string:
        return buf_.flatbuffers_field_string(pos_, 14)
    /// Telephone number for the entity
    def TELEPHONE() -> string:
        return buf_.flatbuffers_field_string(pos_, 16)
    /// Email address for the entity
    def EMAIL() -> string:
        return buf_.flatbuffers_field_string(pos_, 18)
    /// Cryptographic key information associated with the entity
    def KEY(i:int) -> CryptoKey:
        return CryptoKey { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 20) + i * 4) }
    def KEY_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 20)
    /// Contact points for the entity
    def CONTACT_POINT(i:int) -> ContactPoint:
        return ContactPoint { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 22) + i * 4) }
    def CONTACT_POINT_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 22)
    /// Address of the entity, using the ContactPoint structure
    def ADDRESS() -> ContactPoint?:
        let o = buf_.flatbuffers_field_table(pos_, 24)
        return if o: ContactPoint { buf_, o } else: nil
    /// Job title of the entity (applicable to persons)
    def JOB_TITLE() -> string:
        return buf_.flatbuffers_field_string(pos_, 26)
    def ENTITY_type() -> Entity:
        return Entity(buf_.flatbuffers_field_uint8(pos_, 28, 0))
    /// Union type to represent either a person or an organization
    def ENTITY_as_Person():
        return Person { buf_, buf_.flatbuffers_field_table(pos_, 30) }
    def ENTITY_as_Organization():
        return Organization { buf_, buf_.flatbuffers_field_table(pos_, 30) }
    /// Occupation of the entity (applicable to persons)
    def HAS_OCCUPATION() -> Occupation?:
        let o = buf_.flatbuffers_field_table(pos_, 32)
        return if o: Occupation { buf_, o } else: nil

def GetRootAsEPM(buf:string): return EPM { buf, buf.flatbuffers_indirect(0) }

struct EPMBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(15)
        return this
    def add_NAME(NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, NAME)
        return this
    def add_ALTERNATE_NAME(ALTERNATE_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, ALTERNATE_NAME)
        return this
    def add_DESCRIPTION(DESCRIPTION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, DESCRIPTION)
        return this
    def add_IMAGE(IMAGE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, IMAGE)
        return this
    def add_SAME_AS(SAME_AS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, SAME_AS)
        return this
    def add_URL(URL:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, URL)
        return this
    def add_TELEPHONE(TELEPHONE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(6, TELEPHONE)
        return this
    def add_EMAIL(EMAIL:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(7, EMAIL)
        return this
    def add_KEY(KEY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(8, KEY)
        return this
    def add_CONTACT_POINT(CONTACT_POINT:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(9, CONTACT_POINT)
        return this
    def add_ADDRESS(ADDRESS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(10, ADDRESS)
        return this
    def add_JOB_TITLE(JOB_TITLE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(11, JOB_TITLE)
        return this
    def add_ENTITY_type(ENTITY_type:Entity):
        b_.PrependUint8Slot(12, ENTITY_type, 0)
        return this
    def add_ENTITY(ENTITY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(13, ENTITY)
        return this
    def add_HAS_OCCUPATION(HAS_OCCUPATION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(14, HAS_OCCUPATION)
        return this
    def end():
        return b_.EndObject()

def EPMStartKEYVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def EPMCreateKEYVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EPMStartCONTACT_POINTVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def EPMCreateCONTACT_POINTVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

class EPMCOLLECTION : flatbuffers_handle
    /// Records of Entity Profile Messages
    def RECORDS(i:int) -> EPM:
        return EPM { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 4) + i * 4) }
    def RECORDS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 4)

def GetRootAsEPMCOLLECTION(buf:string): return EPMCOLLECTION { buf, buf.flatbuffers_indirect(0) }

struct EPMCOLLECTIONBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(1)
        return this
    def add_RECORDS(RECORDS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, RECORDS)
        return this
    def end():
        return b_.EndObject()

def EPMCOLLECTIONStartRECORDSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def EPMCOLLECTIONCreateRECORDSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

