// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

/// Enumeration for LDAP attribute types relevant to Distinguished Names
enum LDIFAttributeType:
    /// Common Name
    LDIFAttributeType_CN = 0
    /// Organizational Unit Name
    LDIFAttributeType_OU = 1
    /// Organization Name
    LDIFAttributeType_O = 2
    /// Domain Component
    LDIFAttributeType_DC = 3
    /// Country Name
    LDIFAttributeType_C = 4
    /// Surname
    LDIFAttributeType_SN = 5

/// Union for specific attributes, distinguishing between Person and Organization
enum SpecificAttributes:
    SpecificAttributes_NONE = 0
    SpecificAttributes_PersonAttributes = 1
    SpecificAttributes_OrganizationAttributes = 2

class DNComponent

class DistinguishedName

class CryptoKey

class Address

class PersonAttributes

class OrganizationAttributes

class EPM

class EPMCOLLECTION

/// Represents a component of a Distinguished Name (DN) in LDAP
class DNComponent : flatbuffers_handle
    /// The type of the DN component
    def TYPE() -> LDIFAttributeType:
        return LDIFAttributeType(buf_.flatbuffers_field_int8(pos_, 4, 0))
    /// The value of the DN component
    def VALUE() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)

def GetRootAsDNComponent(buf:string): return DNComponent { buf, buf.flatbuffers_indirect(0) }

struct DNComponentBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(2)
        return this
    def add_TYPE(TYPE:LDIFAttributeType):
        b_.PrependInt8Slot(0, TYPE, 0)
        return this
    def add_VALUE(VALUE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, VALUE)
        return this
    def end():
        return b_.EndObject()

/// Represents a Distinguished Name composed of DNComponents
class DistinguishedName : flatbuffers_handle
    /// The sequence of components making up the DN
    def COMPONENTS(i:int) -> DNComponent:
        return DNComponent { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 4) + i * 4) }
    def COMPONENTS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 4)

def GetRootAsDistinguishedName(buf:string): return DistinguishedName { buf, buf.flatbuffers_indirect(0) }

struct DistinguishedNameBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(1)
        return this
    def add_COMPONENTS(COMPONENTS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, COMPONENTS)
        return this
    def end():
        return b_.EndObject()

def DistinguishedNameStartCOMPONENTSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def DistinguishedNameCreateCOMPONENTSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

/// Represents cryptographic key information
class CryptoKey : flatbuffers_handle
    /// Public part of the cryptographic key
    def PUBLIC_KEY() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Extended public key
    def XPUB() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// Private part of the cryptographic key, should be kept secret
    def PRIVATE_KEY() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// Extended private key
    def XPRIV() -> string:
        return buf_.flatbuffers_field_string(pos_, 10)
    /// Address generated from the cryptographic key
    def KEY_ADDRESS() -> string:
        return buf_.flatbuffers_field_string(pos_, 12)
    /// Type of the address generated from the cryptographic key
    def ADDRESS_TYPE() -> string:
        return buf_.flatbuffers_field_string(pos_, 14)

def GetRootAsCryptoKey(buf:string): return CryptoKey { buf, buf.flatbuffers_indirect(0) }

struct CryptoKeyBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(6)
        return this
    def add_PUBLIC_KEY(PUBLIC_KEY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, PUBLIC_KEY)
        return this
    def add_XPUB(XPUB:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, XPUB)
        return this
    def add_PRIVATE_KEY(PRIVATE_KEY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, PRIVATE_KEY)
        return this
    def add_XPRIV(XPRIV:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, XPRIV)
        return this
    def add_KEY_ADDRESS(KEY_ADDRESS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, KEY_ADDRESS)
        return this
    def add_ADDRESS_TYPE(ADDRESS_TYPE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, ADDRESS_TYPE)
        return this
    def end():
        return b_.EndObject()

/// Represents a geographic address
class Address : flatbuffers_handle
    /// Country of the address
    def COUNTRY() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Region of the address (e.g., state or province)
    def REGION() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// Locality of the address (e.g., city or town)
    def LOCALITY() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// Postal code of the address
    def POSTAL_CODE() -> string:
        return buf_.flatbuffers_field_string(pos_, 10)
    /// Street address
    def STREET() -> string:
        return buf_.flatbuffers_field_string(pos_, 12)
    /// Post office box number
    def POST_OFFICE_BOX_NUMBER() -> string:
        return buf_.flatbuffers_field_string(pos_, 14)

def GetRootAsAddress(buf:string): return Address { buf, buf.flatbuffers_indirect(0) }

struct AddressBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(6)
        return this
    def add_COUNTRY(COUNTRY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, COUNTRY)
        return this
    def add_REGION(REGION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, REGION)
        return this
    def add_LOCALITY(LOCALITY:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, LOCALITY)
        return this
    def add_POSTAL_CODE(POSTAL_CODE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, POSTAL_CODE)
        return this
    def add_STREET(STREET:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, STREET)
        return this
    def add_POST_OFFICE_BOX_NUMBER(POST_OFFICE_BOX_NUMBER:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, POST_OFFICE_BOX_NUMBER)
        return this
    def end():
        return b_.EndObject()

/// Specific attributes for a Person
class PersonAttributes : flatbuffers_handle
    /// Family name or surname of the person
    def FAMILY_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Given name or first name of the person
    def GIVEN_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// Additional name or middle name of the person
    def ADDITIONAL_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// Honorific prefix preceding the person's name (e.g., Mr., Dr.)
    def HONORIFIC_PREFIX() -> string:
        return buf_.flatbuffers_field_string(pos_, 10)
    /// Honorific suffix following the person's name (e.g., Jr., Sr.)
    def HONORIFIC_SUFFIX() -> string:
        return buf_.flatbuffers_field_string(pos_, 12)
    /// Job title of the person
    def JOB_TITLE() -> string:
        return buf_.flatbuffers_field_string(pos_, 14)
    /// Occupation of the person
    def OCCUPATION() -> string:
        return buf_.flatbuffers_field_string(pos_, 16)

def GetRootAsPersonAttributes(buf:string): return PersonAttributes { buf, buf.flatbuffers_indirect(0) }

struct PersonAttributesBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(7)
        return this
    def add_FAMILY_NAME(FAMILY_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, FAMILY_NAME)
        return this
    def add_GIVEN_NAME(GIVEN_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, GIVEN_NAME)
        return this
    def add_ADDITIONAL_NAME(ADDITIONAL_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, ADDITIONAL_NAME)
        return this
    def add_HONORIFIC_PREFIX(HONORIFIC_PREFIX:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, HONORIFIC_PREFIX)
        return this
    def add_HONORIFIC_SUFFIX(HONORIFIC_SUFFIX:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, HONORIFIC_SUFFIX)
        return this
    def add_JOB_TITLE(JOB_TITLE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, JOB_TITLE)
        return this
    def add_OCCUPATION(OCCUPATION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(6, OCCUPATION)
        return this
    def end():
        return b_.EndObject()

/// Specific attributes for an Organization
class OrganizationAttributes : flatbuffers_handle
    /// Legal name of the organization
    def LEGAL_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)

def GetRootAsOrganizationAttributes(buf:string): return OrganizationAttributes { buf, buf.flatbuffers_indirect(0) }

struct OrganizationAttributesBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(1)
        return this
    def add_LEGAL_NAME(LEGAL_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, LEGAL_NAME)
        return this
    def end():
        return b_.EndObject()

/// Entity Profile Message
class EPM : flatbuffers_handle
    /// Common name of the entity (person or organization)
    def NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Alternate names for the entity
    def ALTERNATE_NAMES(i:int) -> string:
        return buf_.flatbuffers_string(buf_.flatbuffers_field_vector(pos_, 6) + i * 4)
    def ALTERNATE_NAMES_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 6)
    /// Email address of the entity
    def EMAIL() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// Telephone number of the entity
    def TELEPHONE() -> string:
        return buf_.flatbuffers_field_string(pos_, 10)
    /// Cryptographic keys associated with the entity
    def KEYS(i:int) -> CryptoKey:
        return CryptoKey { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 12) + i * 4) }
    def KEYS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 12)
    /// Multiformat addresses associated with the entity
    def MULTIFORMAT_ADDRESS(i:int) -> string:
        return buf_.flatbuffers_string(buf_.flatbuffers_field_vector(pos_, 14) + i * 4)
    def MULTIFORMAT_ADDRESS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 14)
    def ATTRIBUTES_type() -> SpecificAttributes:
        return SpecificAttributes(buf_.flatbuffers_field_uint8(pos_, 16, 0))
    /// Specific attributes for the entity, either Person or Organization
    def ATTRIBUTES_as_PersonAttributes():
        return PersonAttributes { buf_, buf_.flatbuffers_field_table(pos_, 18) }
    def ATTRIBUTES_as_OrganizationAttributes():
        return OrganizationAttributes { buf_, buf_.flatbuffers_field_table(pos_, 18) }

def GetRootAsEPM(buf:string): return EPM { buf, buf.flatbuffers_indirect(0) }

struct EPMBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(8)
        return this
    def add_NAME(NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, NAME)
        return this
    def add_ALTERNATE_NAMES(ALTERNATE_NAMES:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, ALTERNATE_NAMES)
        return this
    def add_EMAIL(EMAIL:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, EMAIL)
        return this
    def add_TELEPHONE(TELEPHONE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, TELEPHONE)
        return this
    def add_KEYS(KEYS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, KEYS)
        return this
    def add_MULTIFORMAT_ADDRESS(MULTIFORMAT_ADDRESS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, MULTIFORMAT_ADDRESS)
        return this
    def add_ATTRIBUTES_type(ATTRIBUTES_type:SpecificAttributes):
        b_.PrependUint8Slot(6, ATTRIBUTES_type, 0)
        return this
    def add_ATTRIBUTES(ATTRIBUTES:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(7, ATTRIBUTES)
        return this
    def end():
        return b_.EndObject()

def EPMStartALTERNATE_NAMESVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def EPMCreateALTERNATE_NAMESVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EPMStartKEYSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def EPMCreateKEYSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EPMStartMULTIFORMAT_ADDRESSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def EPMCreateMULTIFORMAT_ADDRESSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

/// Collection of Entity Profile Messages
class EPMCOLLECTION : flatbuffers_handle
    /// Records of Entity Profile Messages
    def RECORDS(i:int) -> EPM:
        return EPM { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 4) + i * 4) }
    def RECORDS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 4)

def GetRootAsEPMCOLLECTION(buf:string): return EPMCOLLECTION { buf, buf.flatbuffers_indirect(0) }

struct EPMCOLLECTIONBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(1)
        return this
    def add_RECORDS(RECORDS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, RECORDS)
        return this
    def end():
        return b_.EndObject()

def EPMCOLLECTIONStartRECORDSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def EPMCOLLECTIONCreateRECORDSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

