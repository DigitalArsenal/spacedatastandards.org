// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

/// https://www.sanaregistry.org/r/celestial_body_reference_frames/
/// Celestial Reference Frames (SANA registry 1.3.112.4.57.2)
enum CelestialFrame:
    /// OID: 1.3.112.4.57.2.9
    /// Inertial Earth-centered frame aligned with Earth's center of mass.
    CelestialFrame_GCRF = 0
    /// OID: 1.3.112.4.57.2.11
    /// International Celestial Reference Frame based on distant quasars.
    CelestialFrame_ICRF = 1
    /// OID: 1.3.112.4.57.2.14
    /// Classical J2000 inertial frame defined at epoch J2000.0.
    CelestialFrame_J2000 = 2
    /// OID: 1.3.112.4.57.2.15
    /// Updated J2000 frame using IAU2000A precession-nutation models.
    CelestialFrame_J2000A = 3
    /// OID: 1.3.112.4.57.2.7
    /// Earth Mean Equator frame at epoch J2000 used in orbit determination.
    CelestialFrame_EME2000 = 4
    /// OID: 1.3.112.4.57.2.25
    /// True Equator Mean Equinox of Date frame for satellite tracking.
    CelestialFrame_TEMEOFDATE = 5
    /// OID: 1.3.112.4.57.2.10
    /// Greenwich True of Date: Earth rotation relative to celestial reference.
    CelestialFrame_GTOD = 6
    /// OID: 1.3.112.4.57.2.4
    /// Celestial Intermediate Reference System based on CIP and CIO.
    CelestialFrame_CIRS = 7
    /// OID: 1.3.112.4.57.2.18
    /// Mean of Date (MOD) Earth frame using IAU1976 precession.
    CelestialFrame_MOD_EARTH = 8
    /// OID: 1.3.112.4.57.2.17
    /// Mean of Date (MOD) celestial body frame evaluated at each epoch.
    CelestialFrame_MOD_CB = 9
    /// OID: 1.3.112.4.57.2.19
    /// Mean of Date (MOD) Moon frame evaluated at each epoch.
    CelestialFrame_MOD_MOON = 10
    /// OID: 1.3.112.4.57.2.29
    /// True of Date (TOD) Earth frame with polar motion included.
    CelestialFrame_TOD_EARTH = 11
    /// OID: 1.3.112.4.57.2.28
    /// True of Date (TOD) celestial body frame.
    CelestialFrame_TOD_CB = 12
    /// OID: 1.3.112.4.57.2.30
    /// True of Date (TOD) Moon frame.
    CelestialFrame_TOD_MOON = 13
    /// OID: 1.3.112.4.57.2.32
    /// True of Epoch (TOE) Earth frame at specific epoch.
    CelestialFrame_TOE_EARTH = 14
    /// OID: 1.3.112.4.57.2.31
    /// True of Epoch (TOE) celestial body frame at specific epoch.
    CelestialFrame_TOE_CB = 15
    /// OID: 1.3.112.4.57.2.33
    /// True of Epoch (TOE) Moon frame at specific epoch.
    CelestialFrame_TOE_MOON = 16
    /// OID: 1.3.112.4.57.2.13
    /// International Terrestrial Reference Frame 2000 (Earth-fixed).
    CelestialFrame_ITRF2000 = 17
    /// OID: 1.3.112.4.57.2.13
    /// International Terrestrial Reference Frame 1993 (Earth-fixed).
    CelestialFrame_ITRF93 = 18
    /// OID: 1.3.112.4.57.2.13
    /// International Terrestrial Reference Frame 1997 (Earth-fixed).
    CelestialFrame_ITRF97 = 19
    /// OID: 1.3.112.4.57.2.6
    /// Earth-Fixed Geocentric frame using geodetic coordinates.
    CelestialFrame_EFG = 20
    /// OID: 1.3.112.4.57.2.8
    /// Fixed frame of a celestial body.
    CelestialFrame_FIXED_CB = 21
    /// OID: 1.3.112.4.57.2.39
    /// Fixed Earth frame aligned with WGS84 ellipsoid.
    CelestialFrame_FIXED_EARTH = 22
    /// WGS84 Earth-fixed terrestrial system.
    CelestialFrame_WGS84 = 23
    /// OID: 1.3.112.4.57.2.5
    /// Dynamic Terrestrial Reference Frame for a given year (DTRFYYYY).
    CelestialFrame_DTRFYYYY = 24
    /// OID: 1.3.112.4.57.2.2
    /// Mean Earth Equator and Equinox (ALIGN_EARTH) frame.
    CelestialFrame_ALIGN_EARTH = 25
    /// OID: 1.3.112.4.57.2.1
    /// Mean Central Body Equator and Equinox (ALIGN_CB) frame.
    CelestialFrame_ALIGN_CB = 26
    /// OID: 1.3.112.4.57.2.3
    /// Classical Besselian 1950 equator and equinox frame.
    CelestialFrame_B1950 = 27

/// https://sanaregistry.org/r/spacecraft_body_reference_frames/
/// Spacecraft Body Reference Frames (SANA registry 1.3.112.4.57.8)
enum SpacecraftFrame:
    /// OID: 1.3.112.4.57.8.1
    /// Accelerometer instrument frame.
    SpacecraftFrame_ACC_i = 0
    /// OID: 1.3.112.4.57.8.2
    /// Actuator system frame.
    SpacecraftFrame_ACTUATOR_i = 1
    /// OID: 1.3.112.4.57.8.3
    /// Attitude Sensor Target frame.
    SpacecraftFrame_AST_i = 2
    /// OID: 1.3.112.4.57.8.4
    /// Coarse Sun Sensor frame.
    SpacecraftFrame_CSS_i = 3
    /// OID: 1.3.112.4.57.8.5
    /// Digital Sun Sensor frame.
    SpacecraftFrame_DSS_i = 4
    /// OID: 1.3.112.4.57.8.6
    /// Earth Sensor Assembly frame.
    SpacecraftFrame_ESA_i = 5
    /// OID: 1.3.112.4.57.8.7
    /// Gyroscope instrument frame.
    SpacecraftFrame_GYRO_FRAME_i = 6
    /// OID: 1.3.112.4.57.8.8
    /// Inertial Measurement Unit frame.
    SpacecraftFrame_IMU_FRAME_i = 7
    /// OID: 1.3.112.4.57.8.9
    /// Generic instrument mounting frame.
    SpacecraftFrame_INSTRUMENT_i = 8
    /// OID: 1.3.112.4.57.8.10
    /// Magnetic Torquer Assembly frame.
    SpacecraftFrame_MTA_i = 9
    /// OID: 1.3.112.4.57.8.11
    /// Reaction Wheel assembly frame.
    SpacecraftFrame_RW_i = 10
    /// OID: 1.3.112.4.57.8.12
    /// Solar Array frame.
    SpacecraftFrame_SA_i = 11
    /// OID: 1.3.112.4.57.8.13
    /// Spacecraft body fixed frame.
    SpacecraftFrame_SC_BODY_i = 12
    /// OID: 1.3.112.4.57.8.14
    /// Generic sensor assembly frame.
    SpacecraftFrame_SENSOR_i = 13
    /// OID: 1.3.112.4.57.8.15
    /// Star Tracker instrument frame.
    SpacecraftFrame_STARTRACKER_i = 14
    /// OID: 1.3.112.4.57.8.16
    /// Thermal Assembly Module frame.
    SpacecraftFrame_TAM_i = 15

/// https://sanaregistry.org/r/orbit_relative_reference_frames/
/// Orbit-Relative Reference Frames (SANA registry 1.3.112.4.57.3)
enum OrbitFrame:
    /// OID: 1.3.112.4.57.3.1
    /// Earth Equatorial Inertial frame aligned with J2000 epoch.
    OrbitFrame_EQW_INERTIAL = 0
    /// OID: 1.3.112.4.57.3.3
    /// Local Vertical Local Horizontal inertial frame.
    OrbitFrame_LVLH_INERTIAL = 1
    /// OID: 1.3.112.4.57.3.2
    /// Local Vertical Local Horizontal rotating frame.
    OrbitFrame_LVLH_ROTATING = 2
    /// OID: 1.3.112.4.57.3.5
    /// Normal along-track cross-track inertial frame.
    OrbitFrame_NSW_INERTIAL = 3
    /// OID: 1.3.112.4.57.3.4
    /// Normal along-track cross-track rotating frame.
    OrbitFrame_NSW_ROTATING = 4
    /// OID: 1.3.112.4.57.3.7
    /// Orbit normal Tangential cross-track inertial frame.
    OrbitFrame_NTW_INERTIAL = 5
    /// OID: 1.3.112.4.57.3.6
    /// Orbit normal Tangential cross-track rotating frame.
    OrbitFrame_NTW_ROTATING = 6
    /// OID: 1.3.112.4.57.3.8
    /// Perifocal frame aligned with orbit's perigee.
    OrbitFrame_PQW_INERTIAL = 7
    /// OID: 1.3.112.4.57.3.10
    /// Radial along-track cross-track inertial frame.
    OrbitFrame_RSW_INERTIAL = 8
    /// OID: 1.3.112.4.57.3.9
    /// Radial along-track cross-track rotating frame.
    OrbitFrame_RSW_ROTATING = 9
    /// OID: 1.3.112.4.57.3.14
    /// South-East-Zenith inertial (topocentric) frame.
    OrbitFrame_SEZ_INERTIAL = 10
    /// OID: 1.3.112.4.57.3.13
    /// South-East-Zenith rotating (topocentric) frame.
    OrbitFrame_SEZ_ROTATING = 11
    /// OID: 1.3.112.4.57.3.12
    /// Transverse normal cross-track inertial frame.
    OrbitFrame_TNW_INERTIAL = 12
    /// OID: 1.3.112.4.57.3.11
    /// Transverse normal cross-track rotating frame.
    OrbitFrame_TNW_ROTATING = 13
    /// OID: 1.3.112.4.57.3.16
    /// Velocity-normal co-normal inertial frame.
    OrbitFrame_VNC_INERTIAL = 14
    /// OID: 1.3.112.4.57.3.15
    /// Velocity-normal co-normal rotating frame.
    OrbitFrame_VNC_ROTATING = 15

/// Non-registered or local use frames
enum CustomFrame:
    /// Earth-Centered-Earth-Fixed: Rotates with Earth. X-axis at prime meridian, Y eastward, Z towards North Pole.
    CustomFrame_ECEF = 0
    /// True Equator Mean Equinox of Date, same as TEMEOFDATE: Dynamic frame for SGP4 satellite tracking.
    CustomFrame_TEME = 1
    /// True Equator Mean Equinox of Epoch: Static version of TEMEOFDATE at a given epoch.
    CustomFrame_TEMEOFEPOCH = 2
    /// East-North-Up: Local tangent plane for surface points.
    CustomFrame_ENU = 3
    /// North-East-Down: Aviation/navigation frame aligned with gravity.
    CustomFrame_NED = 4
    /// North-East-Up: Local tangent plane variant with Up positive.
    CustomFrame_NEU = 5
    /// Radial-Intrack-Cross-track: Spacecraft orientation aligned with orbit.
    CustomFrame_RIC = 6
    /// Radial-Transverse-Normal: Orbit frame for spacecraft dynamics.
    CustomFrame_RTN = 7
    /// Transverse-Velocity-Normal: Alternative orbit frame.
    CustomFrame_TVN = 8
    /// Vehicle-Velocity-Local-Horizontal: Orbit frame aligned with velocity vector.
    CustomFrame_VVLH = 9
    /// Radial-Tangential-Cross-track: Equivalent to LVLH/QSW.
    CustomFrame_QSW = 10
    /// Local Tangent Plane: Surface-fixed frame centered on a point.
    CustomFrame_LTP = 11
    /// Local Vertical-Local Horizontal: Z axis towards Earth center, X along velocity.
    CustomFrame_LVLH = 12
    /// Polar-North-East: Surface coordinate frame.
    CustomFrame_PNE = 13
    /// Body-Fixed Reference Frame: Fixed to a spacecraft or celestial object.
    CustomFrame_BRF = 14
    /// Radial-Along-track-Cross-track: Same as RSW.
    CustomFrame_RSW = 15
    /// Tangential-Normal-Cross-track: Same as TNW.
    CustomFrame_TNW = 16
    /// Radial-UTF: Radial, Along-track, Cross-track variant.
    CustomFrame_UVW = 17

enum RFMUnion:
    RFMUnion_NONE = 0
    RFMUnion_CelestialFrameWrapper = 1
    RFMUnion_SpacecraftFrameWrapper = 2
    RFMUnion_OrbitFrameWrapper = 3
    RFMUnion_CustomFrameWrapper = 4

class CelestialFrameWrapper

class SpacecraftFrameWrapper

class OrbitFrameWrapper

class CustomFrameWrapper

class RFM

class CelestialFrameWrapper : flatbuffers.handle
    def frame() -> CelestialFrame:
        return CelestialFrame(flatbuffers.field_int8(buf_, pos_, 4, 0))

def GetRootAsCelestialFrameWrapper(buf:string): return CelestialFrameWrapper { buf, flatbuffers.indirect(buf, 0) }

struct CelestialFrameWrapperBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(1)
        return this
    def add_frame(frame:CelestialFrame):
        b_.PrependInt8Slot(0, frame, 0)
        return this
    def end():
        return b_.EndObject()

class SpacecraftFrameWrapper : flatbuffers.handle
    def frame() -> SpacecraftFrame:
        return SpacecraftFrame(flatbuffers.field_int8(buf_, pos_, 4, 0))

def GetRootAsSpacecraftFrameWrapper(buf:string): return SpacecraftFrameWrapper { buf, flatbuffers.indirect(buf, 0) }

struct SpacecraftFrameWrapperBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(1)
        return this
    def add_frame(frame:SpacecraftFrame):
        b_.PrependInt8Slot(0, frame, 0)
        return this
    def end():
        return b_.EndObject()

class OrbitFrameWrapper : flatbuffers.handle
    def frame() -> OrbitFrame:
        return OrbitFrame(flatbuffers.field_int8(buf_, pos_, 4, 0))

def GetRootAsOrbitFrameWrapper(buf:string): return OrbitFrameWrapper { buf, flatbuffers.indirect(buf, 0) }

struct OrbitFrameWrapperBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(1)
        return this
    def add_frame(frame:OrbitFrame):
        b_.PrependInt8Slot(0, frame, 0)
        return this
    def end():
        return b_.EndObject()

class CustomFrameWrapper : flatbuffers.handle
    def frame() -> CustomFrame:
        return CustomFrame(flatbuffers.field_int8(buf_, pos_, 4, 0))

def GetRootAsCustomFrameWrapper(buf:string): return CustomFrameWrapper { buf, flatbuffers.indirect(buf, 0) }

struct CustomFrameWrapperBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(1)
        return this
    def add_frame(frame:CustomFrame):
        b_.PrependInt8Slot(0, frame, 0)
        return this
    def end():
        return b_.EndObject()

class RFM : flatbuffers.handle
    def REFERENCE_FRAME_type() -> RFMUnion:
        return RFMUnion(flatbuffers.field_uint8(buf_, pos_, 4, 0))
    def REFERENCE_FRAME_as_CelestialFrameWrapper():
        return CelestialFrameWrapper { buf_, flatbuffers.field_table(buf_, pos_, 6) }
    def REFERENCE_FRAME_as_SpacecraftFrameWrapper():
        return SpacecraftFrameWrapper { buf_, flatbuffers.field_table(buf_, pos_, 6) }
    def REFERENCE_FRAME_as_OrbitFrameWrapper():
        return OrbitFrameWrapper { buf_, flatbuffers.field_table(buf_, pos_, 6) }
    def REFERENCE_FRAME_as_CustomFrameWrapper():
        return CustomFrameWrapper { buf_, flatbuffers.field_table(buf_, pos_, 6) }
    def INDEX() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)

def GetRootAsRFM(buf:string): return RFM { buf, flatbuffers.indirect(buf, 0) }

struct RFMBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(3)
        return this
    def add_REFERENCE_FRAME_type(REFERENCE_FRAME_type:RFMUnion):
        b_.PrependUint8Slot(0, REFERENCE_FRAME_type, 0)
        return this
    def add_REFERENCE_FRAME(REFERENCE_FRAME:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, REFERENCE_FRAME)
        return this
    def add_INDEX(INDEX:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, INDEX)
        return this
    def end():
        return b_.EndObject()

