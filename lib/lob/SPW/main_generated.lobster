// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum FluxQualifier:
    FluxQualifier_OBSERVED = 0
    FluxQualifier_BURST_ADJUSTED = 1
    FluxQualifier_INTERPOLATED_EXTRAPOLATED = 2
    FluxQualifier_NO_OBSERVATION = 3
    FluxQualifier_CELESTRAK_INTERPOLATED = 4

enum F107DataType:
    F107DataType_OBS = 0
    F107DataType_INT = 1
    F107DataType_PRD = 2
    F107DataType_PRM = 3

class SPW

class SPWCOLLECTION

/// Space Weather Data Record
class SPW : flatbuffers.handle
    /// Date in ISO 8601 format
    def DATE() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Bartels Solar Rotation Number
    def BSRN() -> int:
        return flatbuffers.field_int32(buf_, pos_, 6, 0)
    /// Day within Bartels cycle (1-27)
    def ND() -> int:
        return flatbuffers.field_int32(buf_, pos_, 8, 0)
    /// Planetary 3-hour Range Index (Kp) for 0000-0300 UT, multiplied by 10
    def KP1() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// Planetary 3-hour Range Index (Kp) for 0300-0600 UT, multiplied by 10
    def KP2() -> int:
        return flatbuffers.field_int32(buf_, pos_, 12, 0)
    /// Planetary 3-hour Range Index (Kp) for 0600-0900 UT, multiplied by 10
    def KP3() -> int:
        return flatbuffers.field_int32(buf_, pos_, 14, 0)
    /// Planetary 3-hour Range Index (Kp) for 0900-1200 UT, multiplied by 10
    def KP4() -> int:
        return flatbuffers.field_int32(buf_, pos_, 16, 0)
    /// Planetary 3-hour Range Index (Kp) for 1200-1500 UT, multiplied by 10
    def KP5() -> int:
        return flatbuffers.field_int32(buf_, pos_, 18, 0)
    /// Planetary 3-hour Range Index (Kp) for 1500-1800 UT, multiplied by 10
    def KP6() -> int:
        return flatbuffers.field_int32(buf_, pos_, 20, 0)
    /// Planetary 3-hour Range Index (Kp) for 1800-2100 UT, multiplied by 10
    def KP7() -> int:
        return flatbuffers.field_int32(buf_, pos_, 22, 0)
    /// Planetary 3-hour Range Index (Kp) for 2100-0000 UT, multiplied by 10
    def KP8() -> int:
        return flatbuffers.field_int32(buf_, pos_, 24, 0)
    /// Sum of the 8 Kp indices for the day
    def KP_SUM() -> int:
        return flatbuffers.field_int32(buf_, pos_, 26, 0)
    /// Planetary Equivalent Amplitude (Ap) for 0000-0300 UT
    def AP1() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// Planetary Equivalent Amplitude (Ap) for 0300-0600 UT
    def AP2() -> int:
        return flatbuffers.field_int32(buf_, pos_, 30, 0)
    /// Planetary Equivalent Amplitude (Ap) for 0600-0900 UT
    def AP3() -> int:
        return flatbuffers.field_int32(buf_, pos_, 32, 0)
    /// Planetary Equivalent Amplitude (Ap) for 0900-1200 UT
    def AP4() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// Planetary Equivalent Amplitude (Ap) for 1200-1500 UT
    def AP5() -> int:
        return flatbuffers.field_int32(buf_, pos_, 36, 0)
    /// Planetary Equivalent Amplitude (Ap) for 1500-1800 UT
    def AP6() -> int:
        return flatbuffers.field_int32(buf_, pos_, 38, 0)
    /// Planetary Equivalent Amplitude (Ap) for 1800-2100 UT
    def AP7() -> int:
        return flatbuffers.field_int32(buf_, pos_, 40, 0)
    /// Planetary Equivalent Amplitude (Ap) for 2100-0000 UT
    def AP8() -> int:
        return flatbuffers.field_int32(buf_, pos_, 42, 0)
    /// Arithmetic average of the 8 Ap indices for the day
    def AP_AVG() -> int:
        return flatbuffers.field_int32(buf_, pos_, 44, 0)
    /// Planetary Daily Character Figure (0.0 to 2.5)
    def CP() -> float:
        return flatbuffers.field_float32(buf_, pos_, 46, 0.0)
    /// C9 index (0-9)
    def C9() -> int:
        return flatbuffers.field_int32(buf_, pos_, 48, 0)
    /// International Sunspot Number
    def ISN() -> int:
        return flatbuffers.field_int32(buf_, pos_, 50, 0)
    /// Observed 10.7cm Solar Radio Flux
    def F107_OBS() -> float:
        return flatbuffers.field_float32(buf_, pos_, 52, 0.0)
    /// Adjusted 10.7cm Solar Radio Flux (to 1 AU)
    def F107_ADJ() -> float:
        return flatbuffers.field_float32(buf_, pos_, 54, 0.0)
    /// F10.7 Data Type
    def F107_DATA_TYPE() -> F107DataType:
        return F107DataType(flatbuffers.field_int8(buf_, pos_, 56, 0))
    /// 81-day centered average of observed F10.7
    def F107_OBS_CENTER81() -> float:
        return flatbuffers.field_float32(buf_, pos_, 58, 0.0)
    /// 81-day trailing average of observed F10.7
    def F107_OBS_LAST81() -> float:
        return flatbuffers.field_float32(buf_, pos_, 60, 0.0)
    /// 81-day centered average of adjusted F10.7
    def F107_ADJ_CENTER81() -> float:
        return flatbuffers.field_float32(buf_, pos_, 62, 0.0)
    /// 81-day trailing average of adjusted F10.7
    def F107_ADJ_LAST81() -> float:
        return flatbuffers.field_float32(buf_, pos_, 64, 0.0)

def GetRootAsSPW(buf:string): return SPW { buf, flatbuffers.indirect(buf, 0) }

struct SPWBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(31)
        return this
    def add_DATE(DATE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, DATE)
        return this
    def add_BSRN(BSRN:int):
        b_.PrependInt32Slot(1, BSRN, 0)
        return this
    def add_ND(ND:int):
        b_.PrependInt32Slot(2, ND, 0)
        return this
    def add_KP1(KP1:int):
        b_.PrependInt32Slot(3, KP1, 0)
        return this
    def add_KP2(KP2:int):
        b_.PrependInt32Slot(4, KP2, 0)
        return this
    def add_KP3(KP3:int):
        b_.PrependInt32Slot(5, KP3, 0)
        return this
    def add_KP4(KP4:int):
        b_.PrependInt32Slot(6, KP4, 0)
        return this
    def add_KP5(KP5:int):
        b_.PrependInt32Slot(7, KP5, 0)
        return this
    def add_KP6(KP6:int):
        b_.PrependInt32Slot(8, KP6, 0)
        return this
    def add_KP7(KP7:int):
        b_.PrependInt32Slot(9, KP7, 0)
        return this
    def add_KP8(KP8:int):
        b_.PrependInt32Slot(10, KP8, 0)
        return this
    def add_KP_SUM(KP_SUM:int):
        b_.PrependInt32Slot(11, KP_SUM, 0)
        return this
    def add_AP1(AP1:int):
        b_.PrependInt32Slot(12, AP1, 0)
        return this
    def add_AP2(AP2:int):
        b_.PrependInt32Slot(13, AP2, 0)
        return this
    def add_AP3(AP3:int):
        b_.PrependInt32Slot(14, AP3, 0)
        return this
    def add_AP4(AP4:int):
        b_.PrependInt32Slot(15, AP4, 0)
        return this
    def add_AP5(AP5:int):
        b_.PrependInt32Slot(16, AP5, 0)
        return this
    def add_AP6(AP6:int):
        b_.PrependInt32Slot(17, AP6, 0)
        return this
    def add_AP7(AP7:int):
        b_.PrependInt32Slot(18, AP7, 0)
        return this
    def add_AP8(AP8:int):
        b_.PrependInt32Slot(19, AP8, 0)
        return this
    def add_AP_AVG(AP_AVG:int):
        b_.PrependInt32Slot(20, AP_AVG, 0)
        return this
    def add_CP(CP:float):
        b_.PrependFloat32Slot(21, CP, 0.0)
        return this
    def add_C9(C9:int):
        b_.PrependInt32Slot(22, C9, 0)
        return this
    def add_ISN(ISN:int):
        b_.PrependInt32Slot(23, ISN, 0)
        return this
    def add_F107_OBS(F107_OBS:float):
        b_.PrependFloat32Slot(24, F107_OBS, 0.0)
        return this
    def add_F107_ADJ(F107_ADJ:float):
        b_.PrependFloat32Slot(25, F107_ADJ, 0.0)
        return this
    def add_F107_DATA_TYPE(F107_DATA_TYPE:F107DataType):
        b_.PrependInt8Slot(26, F107_DATA_TYPE, 0)
        return this
    def add_F107_OBS_CENTER81(F107_OBS_CENTER81:float):
        b_.PrependFloat32Slot(27, F107_OBS_CENTER81, 0.0)
        return this
    def add_F107_OBS_LAST81(F107_OBS_LAST81:float):
        b_.PrependFloat32Slot(28, F107_OBS_LAST81, 0.0)
        return this
    def add_F107_ADJ_CENTER81(F107_ADJ_CENTER81:float):
        b_.PrependFloat32Slot(29, F107_ADJ_CENTER81, 0.0)
        return this
    def add_F107_ADJ_LAST81(F107_ADJ_LAST81:float):
        b_.PrependFloat32Slot(30, F107_ADJ_LAST81, 0.0)
        return this
    def end():
        return b_.EndObject()

class SPWCOLLECTION : flatbuffers.handle
    def RECORDS(i:int) -> SPW:
        return SPW { buf_, flatbuffers.indirect(buf_, flatbuffers.field_vector(buf_, pos_, 4) + i * 4) }
    def RECORDS_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 4)

def GetRootAsSPWCOLLECTION(buf:string): return SPWCOLLECTION { buf, flatbuffers.indirect(buf, 0) }

struct SPWCOLLECTIONBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(1)
        return this
    def add_RECORDS(RECORDS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, RECORDS)
        return this
    def end():
        return b_.EndObject()

def SPWCOLLECTIONStartRECORDSVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SPWCOLLECTIONCreateRECORDSVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

