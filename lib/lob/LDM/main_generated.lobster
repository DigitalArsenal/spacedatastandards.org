// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class LDM

/// Launch Data Message
class LDM : flatbuffers_handle
    /// Launch Site Information
    def SITE() -> SIT?:
        let o = buf_.flatbuffers_field_table(pos_, 4)
        return if o: SIT { buf_, o } else: nil
    /// Azimuth at Launch (in Degrees)
    def AZIMUTH() -> float:
        return buf_.flatbuffers_field_float32(pos_, 6, 0.0)
    /// References for Launch Data
    def REFERENCES() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// Launching Agency Name
    def AGENCY_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 10)
    /// Points of Contact for Launch
    def POINTS_OF_CONTACT(i:int) -> EPM:
        return EPM { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 12) + i * 4) }
    def POINTS_OF_CONTACT_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 12)
    /// Operations Points of Contact for Launch
    def OPERATIONS_POINTS_OF_CONTACT(i:int) -> EPM:
        return EPM { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 14) + i * 4) }
    def OPERATIONS_POINTS_OF_CONTACT_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 14)
    /// Net Launch Time (UTC Format)
    def NET() -> string:
        return buf_.flatbuffers_field_string(pos_, 16)
    /// Rocket Configuration Details
    def ROCKET_CONFIGURATION() -> ROC?:
        let o = buf_.flatbuffers_field_table(pos_, 18)
        return if o: ROC { buf_, o } else: nil
    /// Mission Name
    def MISSION_NAME() -> string:
        return buf_.flatbuffers_field_string(pos_, 20)
    /// Description of the Mission
    def MISSION_DESCRIPTION() -> string:
        return buf_.flatbuffers_field_string(pos_, 22)
    /// Type of the Mission (e.g., Test Flight, Satellite Deployment)
    def MISSION_TYPE() -> string:
        return buf_.flatbuffers_field_string(pos_, 24)
    /// Target Orbit Type (e.g., LEO, GEO)
    def ORBIT_TYPE() -> string:
        return buf_.flatbuffers_field_string(pos_, 26)
    /// Weather and Environmental Conditions at Launch
    def WEATHER_CONDITIONS() -> string:
        return buf_.flatbuffers_field_string(pos_, 28)
    /// Launch Outcome and Status (e.g., Successful, Failed)
    def LAUNCH_STATUS() -> string:
        return buf_.flatbuffers_field_string(pos_, 30)
    /// Webcast URL for the Launch
    def WEBCAST_URL() -> string:
        return buf_.flatbuffers_field_string(pos_, 32)
    /// Media Links Related to the Launch
    def MEDIA_LINKS(i:int) -> string:
        return buf_.flatbuffers_string(buf_.flatbuffers_field_vector(pos_, 34) + i * 4)
    def MEDIA_LINKS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 34)
    /// Earliest Possible Launch Times
    def EARLIEST_LAUNCH_TIMES(i:int) -> string:
        return buf_.flatbuffers_string(buf_.flatbuffers_field_vector(pos_, 36) + i * 4)
    def EARLIEST_LAUNCH_TIMES_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 36)
    /// Latest Possible Launch Times
    def LATEST_LAUNCH_TIMES(i:int) -> string:
        return buf_.flatbuffers_string(buf_.flatbuffers_field_vector(pos_, 38) + i * 4)
    def LATEST_LAUNCH_TIMES_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 38)
    /// Launch Collision Avoidance Information
    def LCOLA_WINDOW_CLOSURES(i:int) -> string:
        return buf_.flatbuffers_string(buf_.flatbuffers_field_vector(pos_, 40) + i * 4)
    def LCOLA_WINDOW_CLOSURES_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 40)
    /// Payload Information (Catalog Entities)
    def OBJECTS(i:int) -> CAT:
        return CAT { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 42) + i * 4) }
    def OBJECTS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 42)
    /// Tracking and Collision Avoidance Requirements
    def TRACKING_REQUIREMENTS(i:int) -> string:
        return buf_.flatbuffers_string(buf_.flatbuffers_field_vector(pos_, 44) + i * 4)
    def TRACKING_REQUIREMENTS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 44)
    /// Duration of Collision Avoidance Screen (in Seconds)
    def COLA_SCREEN_DURATION() -> string:
        return buf_.flatbuffers_field_string(pos_, 46)
    /// Probability of Collision Threshold (Percentage)
    def PROBABILITY_OF_COLLISION_THRESHOLD() -> string:
        return buf_.flatbuffers_field_string(pos_, 48)
    /// Number of Required Collision Avoidance Runs
    def COLA_RUNS_REQUIRED() -> string:
        return buf_.flatbuffers_field_string(pos_, 50)
    /// Points of Contact for Collision Avoidance
    def COLA_POINTS_OF_CONTACT(i:int) -> EPM:
        return EPM { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 52) + i * 4) }
    def COLA_POINTS_OF_CONTACT_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 52)
    /// Orbital Parameters of the Launch
    def ORBITAL_PARAMETERS(i:int) -> string:
        return buf_.flatbuffers_string(buf_.flatbuffers_field_vector(pos_, 54) + i * 4)
    def ORBITAL_PARAMETERS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 54)
    /// Burn Out Vectors for the Launch
    def BURN_OUT_VECTORS(i:int) -> BOV:
        return BOV { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 56) + i * 4) }
    def BURN_OUT_VECTORS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 56)

def GetRootAsLDM(buf:string): return LDM { buf, buf.flatbuffers_indirect(0) }

struct LDMBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(27)
        return this
    def add_SITE(SITE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, SITE)
        return this
    def add_AZIMUTH(AZIMUTH:float):
        b_.PrependFloat32Slot(1, AZIMUTH, 0.0)
        return this
    def add_REFERENCES(REFERENCES:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, REFERENCES)
        return this
    def add_AGENCY_NAME(AGENCY_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, AGENCY_NAME)
        return this
    def add_POINTS_OF_CONTACT(POINTS_OF_CONTACT:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, POINTS_OF_CONTACT)
        return this
    def add_OPERATIONS_POINTS_OF_CONTACT(OPERATIONS_POINTS_OF_CONTACT:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, OPERATIONS_POINTS_OF_CONTACT)
        return this
    def add_NET(NET:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(6, NET)
        return this
    def add_ROCKET_CONFIGURATION(ROCKET_CONFIGURATION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(7, ROCKET_CONFIGURATION)
        return this
    def add_MISSION_NAME(MISSION_NAME:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(8, MISSION_NAME)
        return this
    def add_MISSION_DESCRIPTION(MISSION_DESCRIPTION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(9, MISSION_DESCRIPTION)
        return this
    def add_MISSION_TYPE(MISSION_TYPE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(10, MISSION_TYPE)
        return this
    def add_ORBIT_TYPE(ORBIT_TYPE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(11, ORBIT_TYPE)
        return this
    def add_WEATHER_CONDITIONS(WEATHER_CONDITIONS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(12, WEATHER_CONDITIONS)
        return this
    def add_LAUNCH_STATUS(LAUNCH_STATUS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(13, LAUNCH_STATUS)
        return this
    def add_WEBCAST_URL(WEBCAST_URL:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(14, WEBCAST_URL)
        return this
    def add_MEDIA_LINKS(MEDIA_LINKS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(15, MEDIA_LINKS)
        return this
    def add_EARLIEST_LAUNCH_TIMES(EARLIEST_LAUNCH_TIMES:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(16, EARLIEST_LAUNCH_TIMES)
        return this
    def add_LATEST_LAUNCH_TIMES(LATEST_LAUNCH_TIMES:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(17, LATEST_LAUNCH_TIMES)
        return this
    def add_LCOLA_WINDOW_CLOSURES(LCOLA_WINDOW_CLOSURES:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(18, LCOLA_WINDOW_CLOSURES)
        return this
    def add_OBJECTS(OBJECTS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(19, OBJECTS)
        return this
    def add_TRACKING_REQUIREMENTS(TRACKING_REQUIREMENTS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(20, TRACKING_REQUIREMENTS)
        return this
    def add_COLA_SCREEN_DURATION(COLA_SCREEN_DURATION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(21, COLA_SCREEN_DURATION)
        return this
    def add_PROBABILITY_OF_COLLISION_THRESHOLD(PROBABILITY_OF_COLLISION_THRESHOLD:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(22, PROBABILITY_OF_COLLISION_THRESHOLD)
        return this
    def add_COLA_RUNS_REQUIRED(COLA_RUNS_REQUIRED:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(23, COLA_RUNS_REQUIRED)
        return this
    def add_COLA_POINTS_OF_CONTACT(COLA_POINTS_OF_CONTACT:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(24, COLA_POINTS_OF_CONTACT)
        return this
    def add_ORBITAL_PARAMETERS(ORBITAL_PARAMETERS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(25, ORBITAL_PARAMETERS)
        return this
    def add_BURN_OUT_VECTORS(BURN_OUT_VECTORS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(26, BURN_OUT_VECTORS)
        return this
    def end():
        return b_.EndObject()

def LDMStartPOINTS_OF_CONTACTVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def LDMCreatePOINTS_OF_CONTACTVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LDMStartOPERATIONS_POINTS_OF_CONTACTVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def LDMCreateOPERATIONS_POINTS_OF_CONTACTVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LDMStartMEDIA_LINKSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def LDMCreateMEDIA_LINKSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LDMStartEARLIEST_LAUNCH_TIMESVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def LDMCreateEARLIEST_LAUNCH_TIMESVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LDMStartLATEST_LAUNCH_TIMESVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def LDMCreateLATEST_LAUNCH_TIMESVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LDMStartLCOLA_WINDOW_CLOSURESVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def LDMCreateLCOLA_WINDOW_CLOSURESVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LDMStartOBJECTSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def LDMCreateOBJECTSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LDMStartTRACKING_REQUIREMENTSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def LDMCreateTRACKING_REQUIREMENTSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LDMStartCOLA_POINTS_OF_CONTACTVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def LDMCreateCOLA_POINTS_OF_CONTACTVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LDMStartORBITAL_PARAMETERSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def LDMCreateORBITAL_PARAMETERSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LDMStartBURN_OUT_VECTORSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def LDMCreateBURN_OUT_VECTORSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

