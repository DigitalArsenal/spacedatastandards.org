// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class PNM

/// Publish Notification Message
class PNM : flatbuffers.handle
    /// Multiformat Address
    /// https://multiformats.io/multiaddr/
    /// A universal address format for representing multiple network protocols. Examples include:
    /// - /ip4/192.168.1.1/tcp/80 for an IPv4 address with TCP protocol
    /// - /ip6zone/x/ip6/::1 for an IPv6 address with a zone
    /// - /dns4/example.com for a domain name resolvable only to IPv4 addresses
    /// - /ipfs/bafybeiccfclkdtucu6y4yc5cpr6y3yuinr67svmii46v5cfcrkp47ihehy/README.txt -IPFS address w/CID and path to `README.txt`.
    def MULTIFORMAT_ADDRESS() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Publish Time OF THE Publish Notification Message
    def PUBLISH_TIMESTAMP() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Concatenated Content Identifier (CID)
    /// This field is a unique ID for distributed systems (CID).
    /// The CID provides a unique identifier within distributed systems, as detailed at https://github.com/multiformats/cid. 
    def CID() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// File ID
    /// This field is the Name
    def FILE_NAME() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// File ID
    /// This field is the file ID / Standard Type
    def FILE_ID() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Digital Signature of the CID
    /// This is the digital signature of the CID, signed using the specified cryptographic method.
    def SIGNATURE() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Timestamp Signature
    /// Digital signature of the publish timestamp, using the specified cryptographic method for timestamp verification.
    def TIMESTAMP_SIGNATURE() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Type of Cryptographic Signature Used
    /// Specifies the type of cryptographic signature used for the SIGNATURE field, indicating the specific blockchain technology, such as Ethereum or BTC.
    def SIGNATURE_TYPE() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Type of Cryptographic Signature Used for Timestamp
    /// Specifies the type of cryptographic signature used for the TIMESTAMP_SIGNATURE field, indicating the specific blockchain technology, such as Ethereum or BTC.
    def TIMESTAMP_SIGNATURE_TYPE() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)

def GetRootAsPNM(buf:string): return PNM { buf, flatbuffers.indirect(buf, 0) }

struct PNMBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(9)
        return this
    def add_MULTIFORMAT_ADDRESS(MULTIFORMAT_ADDRESS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, MULTIFORMAT_ADDRESS)
        return this
    def add_PUBLISH_TIMESTAMP(PUBLISH_TIMESTAMP:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, PUBLISH_TIMESTAMP)
        return this
    def add_CID(CID:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, CID)
        return this
    def add_FILE_NAME(FILE_NAME:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, FILE_NAME)
        return this
    def add_FILE_ID(FILE_ID:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, FILE_ID)
        return this
    def add_SIGNATURE(SIGNATURE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, SIGNATURE)
        return this
    def add_TIMESTAMP_SIGNATURE(TIMESTAMP_SIGNATURE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, TIMESTAMP_SIGNATURE)
        return this
    def add_SIGNATURE_TYPE(SIGNATURE_TYPE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, SIGNATURE_TYPE)
        return this
    def add_TIMESTAMP_SIGNATURE_TYPE(TIMESTAMP_SIGNATURE_TYPE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, TIMESTAMP_SIGNATURE_TYPE)
        return this
    def end():
        return b_.EndObject()

