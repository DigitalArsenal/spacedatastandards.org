// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class PNM

class PNMCOLLECTION

/// Publish Notification Message
class PNM : flatbuffers_handle
    /// IPFS Content Identifier (CID)
    /// The hash of a file stored on the InterPlanetary File System (IPFS).
    /// Refer to the section on IPFS integration for details.
    def IPFS_CID() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Unique identifier generated from the data provider's public key
    def KEY_ADDRESS() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// SpaceDataStandards 4 Character File Identifier
    def FILE_IDENTIFIER() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)

def GetRootAsPNM(buf:string): return PNM { buf, buf.flatbuffers_indirect(0) }

struct PNMBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(3)
        return this
    def add_IPFS_CID(IPFS_CID:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, IPFS_CID)
        return this
    def add_KEY_ADDRESS(KEY_ADDRESS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, KEY_ADDRESS)
        return this
    def add_FILE_IDENTIFIER(FILE_IDENTIFIER:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, FILE_IDENTIFIER)
        return this
    def end():
        return b_.EndObject()

/// Collection of Publish Notification Messages
/// This table groups multiple PNM records for batch processing and management.
class PNMCOLLECTION : flatbuffers_handle
    def RECORDS(i:int) -> PNM:
        return PNM { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 4) + i * 4) }
    def RECORDS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 4)

def GetRootAsPNMCOLLECTION(buf:string): return PNMCOLLECTION { buf, buf.flatbuffers_indirect(0) }

struct PNMCOLLECTIONBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(1)
        return this
    def add_RECORDS(RECORDS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, RECORDS)
        return this
    def end():
        return b_.EndObject()

def PNMCOLLECTIONStartRECORDSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def PNMCOLLECTIONCreateRECORDSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

