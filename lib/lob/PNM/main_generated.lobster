// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class PNM

class PNM_COLLECTION

/// Publish Notification Message
/// This table includes a comprehensive set of cryptographic hashes and a digital signature for file publication.
class PNM : flatbuffers_handle
    /// IPFS Content Identifier (CID)
    /// The hash of a file stored on the InterPlanetary File System (IPFS).
    /// Refer to the section on IPFS integration for details.
    def IPFS_CID() -> string:
        return buf_.flatbuffers_field_string(pos_, 4)
    /// Ethereum Digital Signature
    /// Digital signature of the IPFS file hash using Ethereum's signing mechanism.
    /// Refer to the Ethereum Blockchain integration section for details.
    def ETH_DIGITAL_SIGNATURE() -> string:
        return buf_.flatbuffers_field_string(pos_, 6)
    /// SHA-512 File Hash
    /// SHA-512 hash of the file for additional security verification.
    /// Detailed in the security features section of the document.
    def SHA_512_FILE_HASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 8)
    /// SHA-256 File Hash
    /// SHA-256 hash of the file for additional security verification.
    /// Detailed in the security features section of the document.
    def SHA_256_FILE_HASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 10)
    /// MD5 File Digest
    /// MD5 digest of the file for backward compatibility with older systems.
    /// Located in the legacy support section of the document.
    def MD5_FILE_DIGEST() -> string:
        return buf_.flatbuffers_field_string(pos_, 12)
    /// SHA-1 File Hash
    /// SHA-1 hash of the file, used in certain legacy systems for compatibility.
    /// Refer to the legacy systems integration section for more information.
    def SHA_1_FILE_HASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 14)
    /// Argon2 File Hash
    /// Argon2 hash of the file, providing state-of-the-art password hashing.
    /// This is mentioned in the advanced security measures section.
    def ARGON2_FILE_HASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 16)
    /// Blake2b File Hash
    /// Blake2b hash of the file, known for high-speed cryptographic hashing.
    /// Refer to the high-performance security solutions section.
    def BLAKE2B_FILE_HASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 18)
    /// SHA-3 File Hash
    /// SHA-3 hash of the file, offering a stronger alternative to SHA-2.
    /// Located in the modern cryptographic standards section.
    def SHA_3_FILE_HASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 20)
    /// RIPEMD-160 File Hash
    /// RIPEMD-160 hash of the file, often used in blockchain applications for address generation.
    /// Discussed in the blockchain compatibility section.
    def RIPEMD_160_FILE_HASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 22)
    /// Whirlpool File Hash
    /// Whirlpool hash of the file, designed for integrity protection and digital fingerprinting.
    /// Refer to the data integrity and authentication section.
    def WHIRLPOOL_FILE_HASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 24)
    /// Tiger File Hash
    /// Tiger hash of the file, optimized for fast hashing on 64-bit platforms.
    /// Detailed in the high-speed cryptographic operations section.
    def TIGER_FILE_HASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 26)
    /// Cyclic Redundancy Check (CRC) 32
    /// Cyclic redundancy check with a length of 32 bits.
    /// Refer to CRC section for more details.
    def CRC32() -> string:
        return buf_.flatbuffers_field_string(pos_, 28)
    /// Adler-32 Checksum
    /// Adler-32 checksum with a length of 32 bits.
    /// Refer to the checksum section for more details.
    def ADLER32_CHECKSUM() -> string:
        return buf_.flatbuffers_field_string(pos_, 30)
    /// Universal Hash Function Family - Rabin Fingerprint
    /// Variable-length hash function using Rabin fingerprinting.
    /// Refer to the Universal hash function families section for details.
    def RABIN_FINGERPRINT() -> string:
        return buf_.flatbuffers_field_string(pos_, 32)
    /// Non-Cryptographic Hash Function - Pearson Hashing
    /// Non-cryptographic hash function with a length of 8 bits or more, using XOR or table lookup.
    /// Refer to the Non-cryptographic hash functions section for details.
    def PEARSON_HASHING() -> string:
        return buf_.flatbuffers_field_string(pos_, 34)
    /// Keyed Cryptographic Hash Function - BLAKE2
    /// Keyed hash function (prefix-MAC) with variable length.
    /// Refer to the Keyed cryptographic hash functions section for details.
    def BLAKE2_KEYED_HASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 36)
    /// Unkeyed Cryptographic Hash Function - BLAKE-256
    /// Cryptographic hash function with a length of 256 bits, based on HAIFA structure.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def BLAKE_256() -> string:
        return buf_.flatbuffers_field_string(pos_, 38)
    /// CRC-8
    /// Cyclic redundancy check with a length of 8 bits.
    /// Refer to CRC section for more details.
    def CRC8() -> string:
        return buf_.flatbuffers_field_string(pos_, 40)
    /// CRC-16
    /// Cyclic redundancy check with a length of 16 bits.
    /// Refer to CRC section for more details.
    def CRC16() -> string:
        return buf_.flatbuffers_field_string(pos_, 42)
    /// CRC-64
    /// Cyclic redundancy check with a length of 64 bits.
    /// Refer to CRC section for more details.
    def CRC64() -> string:
        return buf_.flatbuffers_field_string(pos_, 44)
    /// BSD Checksum
    /// BSD checksum with a length of 16 bits.
    /// Refer to the checksum section for more details.
    def BSD_CHECKSUM() -> string:
        return buf_.flatbuffers_field_string(pos_, 46)
    /// SYSV Checksum
    /// SYSV checksum with a length of 16 bits.
    /// Refer to the checksum section for more details.
    def SYSV_CHECKSUM() -> string:
        return buf_.flatbuffers_field_string(pos_, 48)
    /// Sum8
    /// Sum with a length of 8 bits.
    /// Refer to the checksum section for more details.
    def SUM8() -> string:
        return buf_.flatbuffers_field_string(pos_, 50)
    /// Internet Checksum
    /// Internet checksum with a length of 16 bits.
    /// Refer to the checksum section for more details.
    def INTERNET_CHECKSUM() -> string:
        return buf_.flatbuffers_field_string(pos_, 52)
    /// Sum24
    /// Sum with a length of 24 bits.
    /// Refer to the checksum section for more details.
    def SUM24() -> string:
        return buf_.flatbuffers_field_string(pos_, 54)
    /// Sum32
    /// Sum with a length of 32 bits.
    /// Refer to the checksum section for more details.
    def SUM32() -> string:
        return buf_.flatbuffers_field_string(pos_, 56)
    /// Fletcher-4
    /// Sum with a length of 4 bits.
    /// Refer to the checksum section for more details.
    def FLETCHER_4() -> string:
        return buf_.flatbuffers_field_string(pos_, 58)
    /// Fletcher-8
    /// Sum with a length of 8 bits.
    /// Refer to the checksum section for more details.
    def FLETCHER_8() -> string:
        return buf_.flatbuffers_field_string(pos_, 60)
    /// Fletcher-16
    /// Sum with a length of 16 bits.
    /// Refer to the checksum section for more details.
    def FLETCHER_16() -> string:
        return buf_.flatbuffers_field_string(pos_, 62)
    /// Fletcher-32
    /// Sum with a length of 32 bits.
    /// Refer to the checksum section for more details.
    def FLETCHER_32() -> string:
        return buf_.flatbuffers_field_string(pos_, 64)
    /// Luhn Algorithm
    /// Luhn algorithm with a length of 1 decimal digit.
    /// Refer to the checksum section for more details.
    def LUNH_ALGORITHM() -> string:
        return buf_.flatbuffers_field_string(pos_, 66)
    /// Verhoeff Algorithm
    /// Verhoeff algorithm with a length of 1 decimal digit.
    /// Refer to the checksum section for more details.
    def VERHOEFF_ALGORITHM() -> string:
        return buf_.flatbuffers_field_string(pos_, 68)
    /// Damm Algorithm
    /// Damm algorithm with a length of 1 decimal digit.
    /// Refer to the checksum section for more details.
    def DAMM_ALGORITHM() -> string:
        return buf_.flatbuffers_field_string(pos_, 70)
    /// Universal Hash Function Family - Tabulation Hashing
    /// Variable-length hash function using tabulation hashing.
    /// Refer to the Universal hash function families section for details.
    def TABULATION_HASHING() -> string:
        return buf_.flatbuffers_field_string(pos_, 72)
    /// Universal Hash Function Family - Universal One-Way Hash Function
    /// Universal one-way hash function with arbitrary length.
    /// Refer to the Universal hash function families section for details.
    def UNIVERSAL_ONE_WAY_HASH_FUNCTION() -> string:
        return buf_.flatbuffers_field_string(pos_, 74)
    /// Universal Hash Function Family - Zobrist Hashing
    /// Variable-length hash function using Zobrist hashing.
    /// Refer to the Universal hash function families section for details.
    def ZOBRIST_HASHING() -> string:
        return buf_.flatbuffers_field_string(pos_, 76)
    /// Non-Cryptographic Hash Function - Paul Hsieh's SuperFastHash
    /// Non-cryptographic hash function with a length of 32 bits.
    /// Refer to the Non-cryptographic hash functions section for details.
    def PAUL_HSIEHS_SUPERFASTHASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 78)
    /// Non-Cryptographic Hash Function - Buzhash
    /// Non-cryptographic hash function with variable length.
    /// Refer to the Non-cryptographic hash functions section for details.
    def BUZHASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 80)
    /// Non-Cryptographic Hash Function - Fowler-Noll-Vo Hash Function (FNV Hash)
    /// Non-cryptographic hash function with variable length.
    /// Refer to the Non-cryptographic hash functions section for details.
    def FNV_HASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 82)
    /// Non-Cryptographic Hash Function - Jenkins Hash Function
    /// Non-cryptographic hash function with a length of 32 or 64 bits.
    /// Refer to the Non-cryptographic hash functions section for details.
    def JENKINS_HASH_FUNCTION() -> string:
        return buf_.flatbuffers_field_string(pos_, 84)
    /// Non-Cryptographic Hash Function - Bernstein's Hash (djb2)
    /// Non-cryptographic hash function with a length of 32 or 64 bits.
    /// Refer to the Non-cryptographic hash functions section for details.
    def BERNSTEINS_HASH_DJB2() -> string:
        return buf_.flatbuffers_field_string(pos_, 86)
    /// Non-Cryptographic Hash Function - PJW Hash / Elf Hash
    /// Non-cryptographic hash function with a length of 32 or 64 bits.
    /// Refer to the Non-cryptographic hash functions section for details.
    def PJW_HASH_ELF_HASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 88)
    /// Non-Cryptographic Hash Function - MurmurHash
    /// Non-cryptographic hash function with a length of 32, 64, or 128 bits.
    /// Refer to the Non-cryptographic hash functions section for details.
    def MURMURHASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 90)
    /// Non-Cryptographic Hash Function - Fast-Hash
    /// Non-cryptographic hash function with a length of 32 or 64 bits.
    /// Refer to the Non-cryptographic hash functions section for details.
    def FAST_HASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 92)
    /// Non-Cryptographic Hash Function - SpookyHash
    /// Non-cryptographic hash function with a length of 32, 64, or 128 bits.
    /// Refer to the Non-cryptographic hash functions section for details.
    def SPOOKYHASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 94)
    /// Non-Cryptographic Hash Function - CityHash
    /// Non-cryptographic hash function with a length of 32, 64, 128, or 256 bits.
    /// Refer to the Non-cryptographic hash functions section for details.
    def CITYHASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 96)
    /// Non-Cryptographic Hash Function - FarmHash
    /// Non-cryptographic hash function with a length of 32, 64, or 128 bits.
    /// Refer to the Non-cryptographic hash functions section for details.
    def FARMHASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 98)
    /// Non-Cryptographic Hash Function - MetroHash
    /// Non-cryptographic hash function with a length of 64 or 128 bits.
    /// Refer to the Non-cryptographic hash functions section for details.
    def METROHASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 100)
    /// Non-Cryptographic Hash Function - Numeric Hash (nhash)
    /// Non-cryptographic hash function with variable length.
    /// Refer to the Non-cryptographic hash functions section for details.
    def NUMERIC_HASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 102)
    /// Non-Cryptographic Hash Function - xxHash
    /// Non-cryptographic hash function with a length of 32, 64, or 128 bits.
    /// Refer to the Non-cryptographic hash functions section for details.
    def XXHASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 104)
    /// Non-Cryptographic Hash Function - t1ha (Fast Positive Hash)
    /// Non-cryptographic hash function with a length of 64 or 128 bits.
    /// Refer to the Non-cryptographic hash functions section for details.
    def T1HA() -> string:
        return buf_.flatbuffers_field_string(pos_, 106)
    /// Non-Cryptographic Hash Function - GxHash
    /// Non-cryptographic hash function with a length of 32, 64, or 128 bits.
    /// Refer to the Non-cryptographic hash functions section for details.
    def GXHASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 108)
    /// Non-Cryptographic Hash Function - pHash
    /// Non-cryptographic hash function with fixed or variable length.
    /// Refer to the Non-cryptographic hash functions section for details.
    def PHASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 110)
    /// Non-Cryptographic Hash Function - dhash
    /// Non-cryptographic hash function with a length of 128 bits.
    /// Refer to the Non-cryptographic hash functions section for details.
    def DHASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 112)
    /// Non-Cryptographic Hash Function - SDBM
    /// Non-cryptographic hash function with a length of 32 or 64 bits.
    /// Refer to the Non-cryptographic hash functions section for details.
    def SDBM() -> string:
        return buf_.flatbuffers_field_string(pos_, 114)
    /// Unkeyed Cryptographic Hash Function - OSDB Hash
    /// Cryptographic hash function with a length of 64 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def OSDB_HASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 116)
    /// Unkeyed Cryptographic Hash Function - komihash
    /// Cryptographic hash function with a length of 64 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def KOMIHASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 118)
    /// Keyed Cryptographic Hash Function - BLAKE3
    /// Keyed hash function with arbitrary length.
    /// Refer to the Keyed cryptographic hash functions section for details.
    def BLAKE3() -> string:
        return buf_.flatbuffers_field_string(pos_, 120)
    /// Unkeyed Cryptographic Hash Function - ECOH
    /// Cryptographic hash function with a length of 224 to 512 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def ECOH() -> string:
        return buf_.flatbuffers_field_string(pos_, 122)
    /// Unkeyed Cryptographic Hash Function - FSB
    /// Cryptographic hash function with a length of 160 to 512 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def FSB() -> string:
        return buf_.flatbuffers_field_string(pos_, 124)
    /// Unkeyed Cryptographic Hash Function - GOST
    /// Cryptographic hash function with a length of 256 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def GOST() -> string:
        return buf_.flatbuffers_field_string(pos_, 126)
    /// Unkeyed Cryptographic Hash Function - Grøstl
    /// Cryptographic hash function with a length of up to 512 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def GROSTL() -> string:
        return buf_.flatbuffers_field_string(pos_, 128)
    /// Unkeyed Cryptographic Hash Function - HAS-160
    /// Cryptographic hash function with a length of 160 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def HAS_160() -> string:
        return buf_.flatbuffers_field_string(pos_, 130)
    /// Unkeyed Cryptographic Hash Function - HAVAL
    /// Cryptographic hash function with a length of 128 to 256 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def HAVAL() -> string:
        return buf_.flatbuffers_field_string(pos_, 132)
    /// Unkeyed Cryptographic Hash Function - JH
    /// Cryptographic hash function with a length of 224 to 512 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def JH() -> string:
        return buf_.flatbuffers_field_string(pos_, 134)
    /// Unkeyed Cryptographic Hash Function - LSH
    /// Cryptographic hash function with a length of 256 to 512 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def LSH() -> string:
        return buf_.flatbuffers_field_string(pos_, 136)
    /// Unkeyed Cryptographic Hash Function - MD2
    /// Cryptographic hash function with a length of 128 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def MD2() -> string:
        return buf_.flatbuffers_field_string(pos_, 138)
    /// Unkeyed Cryptographic Hash Function - MD4
    /// Cryptographic hash function with a length of 128 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def MD4() -> string:
        return buf_.flatbuffers_field_string(pos_, 140)
    /// Unkeyed Cryptographic Hash Function - MD5
    /// Cryptographic hash function with a length of 128 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def MD5() -> string:
        return buf_.flatbuffers_field_string(pos_, 142)
    /// Unkeyed Cryptographic Hash Function - MD6
    /// Cryptographic hash function with a length of up to 512 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def MD6() -> string:
        return buf_.flatbuffers_field_string(pos_, 144)
    /// Unkeyed Cryptographic Hash Function - RadioGatún
    /// Cryptographic hash function with arbitrary length.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def RADIOGATUN() -> string:
        return buf_.flatbuffers_field_string(pos_, 146)
    /// Unkeyed Cryptographic Hash Function - RIPEMD
    /// Cryptographic hash function with a length of 128 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def RIPEMD() -> string:
        return buf_.flatbuffers_field_string(pos_, 148)
    /// Unkeyed Cryptographic Hash Function - RIPEMD-128
    /// Cryptographic hash function with a length of 128 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def RIPEMD_128() -> string:
        return buf_.flatbuffers_field_string(pos_, 150)
    /// Unkeyed Cryptographic Hash Function - RIPEMD-256
    /// Cryptographic hash function with a length of 256 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def RIPEMD_256() -> string:
        return buf_.flatbuffers_field_string(pos_, 152)
    /// Unkeyed Cryptographic Hash Function - RIPEMD-320
    /// Cryptographic hash function with a length of 320 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def RIPEMD_320() -> string:
        return buf_.flatbuffers_field_string(pos_, 154)
    /// Unkeyed Cryptographic Hash Function - SHA-1
    /// Cryptographic hash function with a length of 160 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def SHA_1() -> string:
        return buf_.flatbuffers_field_string(pos_, 156)
    /// Unkeyed Cryptographic Hash Function - SHA-224
    /// Cryptographic hash function with a length of 224 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def SHA_224() -> string:
        return buf_.flatbuffers_field_string(pos_, 158)
    /// Unkeyed Cryptographic Hash Function - SHA-256
    /// Cryptographic hash function with a length of 256 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def SHA_256() -> string:
        return buf_.flatbuffers_field_string(pos_, 160)
    /// Unkeyed Cryptographic Hash Function - SHA-384
    /// Cryptographic hash function with a length of 384 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def SHA_384() -> string:
        return buf_.flatbuffers_field_string(pos_, 162)
    /// Unkeyed Cryptographic Hash Function - SHA-512
    /// Cryptographic hash function with a length of 512 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def SHA_512() -> string:
        return buf_.flatbuffers_field_string(pos_, 164)
    /// Unkeyed Cryptographic Hash Function - SHA-3
    /// Cryptographic hash function with arbitrary length.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def SHA_3() -> string:
        return buf_.flatbuffers_field_string(pos_, 166)
    /// Unkeyed Cryptographic Hash Function - Skein
    /// Cryptographic hash function with arbitrary length.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def SKEIN() -> string:
        return buf_.flatbuffers_field_string(pos_, 168)
    /// Unkeyed Cryptographic Hash Function - Snefru
    /// Cryptographic hash function with a length of 128 or 256 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def SNEFRU() -> string:
        return buf_.flatbuffers_field_string(pos_, 170)
    /// Unkeyed Cryptographic Hash Function - Spectral Hash
    /// Cryptographic hash function with a length of 512 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def SPECTRAL_HASH() -> string:
        return buf_.flatbuffers_field_string(pos_, 172)
    /// Unkeyed Cryptographic Hash Function - Streebog
    /// Cryptographic hash function with a length of 256 or 512 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def STREEBOG() -> string:
        return buf_.flatbuffers_field_string(pos_, 174)
    /// Unkeyed Cryptographic Hash Function - SWIFFT
    /// Cryptographic hash function with a length of 512 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def SWIFFT() -> string:
        return buf_.flatbuffers_field_string(pos_, 176)
    /// Unkeyed Cryptographic Hash Function - Tiger
    /// Cryptographic hash function with a length of 192 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def TIGER() -> string:
        return buf_.flatbuffers_field_string(pos_, 178)
    /// Unkeyed Cryptographic Hash Function - Whirlpool
    /// Cryptographic hash function with a length of 512 bits.
    /// Refer to the Unkeyed cryptographic hash functions section for details.
    def WHIRLPOOL() -> string:
        return buf_.flatbuffers_field_string(pos_, 180)

def GetRootAsPNM(buf:string): return PNM { buf, buf.flatbuffers_indirect(0) }

struct PNMBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(89)
        return this
    def add_IPFS_CID(IPFS_CID:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, IPFS_CID)
        return this
    def add_ETH_DIGITAL_SIGNATURE(ETH_DIGITAL_SIGNATURE:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, ETH_DIGITAL_SIGNATURE)
        return this
    def add_SHA_512_FILE_HASH(SHA_512_FILE_HASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, SHA_512_FILE_HASH)
        return this
    def add_SHA_256_FILE_HASH(SHA_256_FILE_HASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, SHA_256_FILE_HASH)
        return this
    def add_MD5_FILE_DIGEST(MD5_FILE_DIGEST:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, MD5_FILE_DIGEST)
        return this
    def add_SHA_1_FILE_HASH(SHA_1_FILE_HASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, SHA_1_FILE_HASH)
        return this
    def add_ARGON2_FILE_HASH(ARGON2_FILE_HASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(6, ARGON2_FILE_HASH)
        return this
    def add_BLAKE2B_FILE_HASH(BLAKE2B_FILE_HASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(7, BLAKE2B_FILE_HASH)
        return this
    def add_SHA_3_FILE_HASH(SHA_3_FILE_HASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(8, SHA_3_FILE_HASH)
        return this
    def add_RIPEMD_160_FILE_HASH(RIPEMD_160_FILE_HASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(9, RIPEMD_160_FILE_HASH)
        return this
    def add_WHIRLPOOL_FILE_HASH(WHIRLPOOL_FILE_HASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(10, WHIRLPOOL_FILE_HASH)
        return this
    def add_TIGER_FILE_HASH(TIGER_FILE_HASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(11, TIGER_FILE_HASH)
        return this
    def add_CRC32(CRC32:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(12, CRC32)
        return this
    def add_ADLER32_CHECKSUM(ADLER32_CHECKSUM:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(13, ADLER32_CHECKSUM)
        return this
    def add_RABIN_FINGERPRINT(RABIN_FINGERPRINT:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(14, RABIN_FINGERPRINT)
        return this
    def add_PEARSON_HASHING(PEARSON_HASHING:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(15, PEARSON_HASHING)
        return this
    def add_BLAKE2_KEYED_HASH(BLAKE2_KEYED_HASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(16, BLAKE2_KEYED_HASH)
        return this
    def add_BLAKE_256(BLAKE_256:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(17, BLAKE_256)
        return this
    def add_CRC8(CRC8:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(18, CRC8)
        return this
    def add_CRC16(CRC16:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(19, CRC16)
        return this
    def add_CRC64(CRC64:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(20, CRC64)
        return this
    def add_BSD_CHECKSUM(BSD_CHECKSUM:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(21, BSD_CHECKSUM)
        return this
    def add_SYSV_CHECKSUM(SYSV_CHECKSUM:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(22, SYSV_CHECKSUM)
        return this
    def add_SUM8(SUM8:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(23, SUM8)
        return this
    def add_INTERNET_CHECKSUM(INTERNET_CHECKSUM:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(24, INTERNET_CHECKSUM)
        return this
    def add_SUM24(SUM24:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(25, SUM24)
        return this
    def add_SUM32(SUM32:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(26, SUM32)
        return this
    def add_FLETCHER_4(FLETCHER_4:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(27, FLETCHER_4)
        return this
    def add_FLETCHER_8(FLETCHER_8:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(28, FLETCHER_8)
        return this
    def add_FLETCHER_16(FLETCHER_16:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(29, FLETCHER_16)
        return this
    def add_FLETCHER_32(FLETCHER_32:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(30, FLETCHER_32)
        return this
    def add_LUNH_ALGORITHM(LUNH_ALGORITHM:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(31, LUNH_ALGORITHM)
        return this
    def add_VERHOEFF_ALGORITHM(VERHOEFF_ALGORITHM:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(32, VERHOEFF_ALGORITHM)
        return this
    def add_DAMM_ALGORITHM(DAMM_ALGORITHM:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(33, DAMM_ALGORITHM)
        return this
    def add_TABULATION_HASHING(TABULATION_HASHING:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(34, TABULATION_HASHING)
        return this
    def add_UNIVERSAL_ONE_WAY_HASH_FUNCTION(UNIVERSAL_ONE_WAY_HASH_FUNCTION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(35, UNIVERSAL_ONE_WAY_HASH_FUNCTION)
        return this
    def add_ZOBRIST_HASHING(ZOBRIST_HASHING:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(36, ZOBRIST_HASHING)
        return this
    def add_PAUL_HSIEHS_SUPERFASTHASH(PAUL_HSIEHS_SUPERFASTHASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(37, PAUL_HSIEHS_SUPERFASTHASH)
        return this
    def add_BUZHASH(BUZHASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(38, BUZHASH)
        return this
    def add_FNV_HASH(FNV_HASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(39, FNV_HASH)
        return this
    def add_JENKINS_HASH_FUNCTION(JENKINS_HASH_FUNCTION:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(40, JENKINS_HASH_FUNCTION)
        return this
    def add_BERNSTEINS_HASH_DJB2(BERNSTEINS_HASH_DJB2:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(41, BERNSTEINS_HASH_DJB2)
        return this
    def add_PJW_HASH_ELF_HASH(PJW_HASH_ELF_HASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(42, PJW_HASH_ELF_HASH)
        return this
    def add_MURMURHASH(MURMURHASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(43, MURMURHASH)
        return this
    def add_FAST_HASH(FAST_HASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(44, FAST_HASH)
        return this
    def add_SPOOKYHASH(SPOOKYHASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(45, SPOOKYHASH)
        return this
    def add_CITYHASH(CITYHASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(46, CITYHASH)
        return this
    def add_FARMHASH(FARMHASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(47, FARMHASH)
        return this
    def add_METROHASH(METROHASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(48, METROHASH)
        return this
    def add_NUMERIC_HASH(NUMERIC_HASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(49, NUMERIC_HASH)
        return this
    def add_XXHASH(XXHASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(50, XXHASH)
        return this
    def add_T1HA(T1HA:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(51, T1HA)
        return this
    def add_GXHASH(GXHASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(52, GXHASH)
        return this
    def add_PHASH(PHASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(53, PHASH)
        return this
    def add_DHASH(DHASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(54, DHASH)
        return this
    def add_SDBM(SDBM:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(55, SDBM)
        return this
    def add_OSDB_HASH(OSDB_HASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(56, OSDB_HASH)
        return this
    def add_KOMIHASH(KOMIHASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(57, KOMIHASH)
        return this
    def add_BLAKE3(BLAKE3:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(58, BLAKE3)
        return this
    def add_ECOH(ECOH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(59, ECOH)
        return this
    def add_FSB(FSB:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(60, FSB)
        return this
    def add_GOST(GOST:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(61, GOST)
        return this
    def add_GROSTL(GROSTL:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(62, GROSTL)
        return this
    def add_HAS_160(HAS_160:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(63, HAS_160)
        return this
    def add_HAVAL(HAVAL:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(64, HAVAL)
        return this
    def add_JH(JH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(65, JH)
        return this
    def add_LSH(LSH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(66, LSH)
        return this
    def add_MD2(MD2:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(67, MD2)
        return this
    def add_MD4(MD4:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(68, MD4)
        return this
    def add_MD5(MD5:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(69, MD5)
        return this
    def add_MD6(MD6:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(70, MD6)
        return this
    def add_RADIOGATUN(RADIOGATUN:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(71, RADIOGATUN)
        return this
    def add_RIPEMD(RIPEMD:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(72, RIPEMD)
        return this
    def add_RIPEMD_128(RIPEMD_128:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(73, RIPEMD_128)
        return this
    def add_RIPEMD_256(RIPEMD_256:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(74, RIPEMD_256)
        return this
    def add_RIPEMD_320(RIPEMD_320:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(75, RIPEMD_320)
        return this
    def add_SHA_1(SHA_1:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(76, SHA_1)
        return this
    def add_SHA_224(SHA_224:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(77, SHA_224)
        return this
    def add_SHA_256(SHA_256:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(78, SHA_256)
        return this
    def add_SHA_384(SHA_384:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(79, SHA_384)
        return this
    def add_SHA_512(SHA_512:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(80, SHA_512)
        return this
    def add_SHA_3(SHA_3:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(81, SHA_3)
        return this
    def add_SKEIN(SKEIN:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(82, SKEIN)
        return this
    def add_SNEFRU(SNEFRU:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(83, SNEFRU)
        return this
    def add_SPECTRAL_HASH(SPECTRAL_HASH:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(84, SPECTRAL_HASH)
        return this
    def add_STREEBOG(STREEBOG:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(85, STREEBOG)
        return this
    def add_SWIFFT(SWIFFT:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(86, SWIFFT)
        return this
    def add_TIGER(TIGER:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(87, TIGER)
        return this
    def add_WHIRLPOOL(WHIRLPOOL:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(88, WHIRLPOOL)
        return this
    def end():
        return b_.EndObject()

/// Collection of Publish Notification Messages
/// This table groups multiple PNM records for batch processing and management.
class PNM_COLLECTION : flatbuffers_handle
    def RECORDS(i:int) -> PNM:
        return PNM { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 4) + i * 4) }
    def RECORDS_length() -> int:
        return buf_.flatbuffers_field_vector_len(pos_, 4)

def GetRootAsPNM_COLLECTION(buf:string): return PNM_COLLECTION { buf, buf.flatbuffers_indirect(0) }

struct PNM_COLLECTIONBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(1)
        return this
    def add_RECORDS(RECORDS:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, RECORDS)
        return this
    def end():
        return b_.EndObject()

def PNM_COLLECTIONStartRECORDSVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def PNM_COLLECTIONCreateRECORDSVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

