// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  Electro-Optical Observation
class EOO {
  EOO._(this._bc, this._bcOffset);
  factory EOO(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EOO> reader = _EOOReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier for Earth Observation Observation
  String? get EOBSERVATION_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data
  String? get CLASSIFICATION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Observation time in UTC
  String? get OB_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Quality of the correlation
  double get CORR_QUALITY => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Identifier for the satellite on orbit
  String? get ID_ON_ORBIT => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Identifier for the sensor
  String? get SENSOR_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Method of data collection
  String? get COLLECT_METHOD => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  NORAD catalog identifier for the satellite
  int get NORAD_CAT_ID => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  Identifier for the task
  String? get TASK_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Identifier for the transaction
  String? get TRANSACTION_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Identifier for the track
  String? get TRACK_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Position of the observation
  String? get OB_POSITION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Original object identifier
  String? get ORIG_OBJECT_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Original sensor identifier
  String? get ORIG_SENSOR_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Universal Coordinated Time flag
  bool get UCT => const fb.BoolReader().vTableGet(_bc, _bcOffset, 32, false);
  ///  Azimuth angle
  double get AZIMUTH => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Uncertainty in azimuth angle
  double get AZIMUTH_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Bias in azimuth angle
  double get AZIMUTH_BIAS => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Rate of change in azimuth
  double get AZIMUTH_RATE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Elevation angle
  double get ELEVATION => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Uncertainty in elevation angle
  double get ELEVATION_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Bias in elevation angle
  double get ELEVATION_BIAS => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Rate of change in elevation
  double get ELEVATION_RATE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Range to the target
  double get RANGE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Uncertainty in range
  double get RANGE_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Bias in range measurement
  double get RANGE_BIAS => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Rate of change in range
  double get RANGE_RATE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  Uncertainty in range rate
  double get RANGE_RATE_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Right ascension
  double get RA => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Rate of change in right ascension
  double get RA_RATE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Uncertainty in right ascension
  double get RA_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Bias in right ascension
  double get RA_BIAS => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Declination angle
  double get DECLINATION => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Rate of change in declination
  double get DECLINATION_RATE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  Uncertainty in declination
  double get DECLINATION_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  Bias in declination
  double get DECLINATION_BIAS => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  X-component of line-of-sight vector
  double get LOSX => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  Y-component of line-of-sight vector
  double get LOSY => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  Z-component of line-of-sight vector
  double get LOSZ => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  Uncertainty in line-of-sight vector
  double get LOS_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  X-component of line-of-sight velocity
  double get LOSXVEL => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Y-component of line-of-sight velocity
  double get LOSYVEL => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  Z-component of line-of-sight velocity
  double get LOSZVEL => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  Latitude of sensor
  double get SENLAT => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  Longitude of sensor
  double get SENLON => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  Altitude of sensor
  double get SENALT => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 94, 0.0);
  ///  X-coordinate of sensor position
  double get SENX => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 96, 0.0);
  ///  Y-coordinate of sensor position
  double get SENY => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  Z-coordinate of sensor position
  double get SENZ => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 100, 0.0);
  ///  Number of fields of view
  int get FOV_COUNT => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 102, 0);
  ///  Duration of the exposure
  double get EXP_DURATION => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 104, 0.0);
  ///  Zero-point displacement
  double get ZEROPTD => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 106, 0.0);
  ///  Net object signal
  double get NET_OBJ_SIG => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 108, 0.0);
  ///  Uncertainty in net object signal
  double get NET_OBJ_SIG_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 110, 0.0);
  ///  Magnitude of the observation
  double get MAG => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 112, 0.0);
  ///  Uncertainty in magnitude
  double get MAG_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 114, 0.0);
  ///  Normalized range for magnitude
  double get MAG_NORM_RANGE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 116, 0.0);
  ///  Geocentric latitude
  double get GEOLAT => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 118, 0.0);
  ///  Geocentric longitude
  double get GEOLON => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 120, 0.0);
  ///  Geocentric altitude
  double get GEOALT => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 122, 0.0);
  ///  Geocentric range
  double get GEORANGE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 124, 0.0);
  ///  Sky background level
  double get SKY_BKGRND => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 126, 0.0);
  ///  Primary extinction
  double get PRIMARY_EXTINCTION => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 128, 0.0);
  ///  Uncertainty in primary extinction
  double get PRIMARY_EXTINCTION_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 130, 0.0);
  ///  Solar phase angle
  double get SOLAR_PHASE_ANGLE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 132, 0.0);
  ///  Solar equatorial phase angle
  double get SOLAR_EQ_PHASE_ANGLE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 134, 0.0);
  ///  Solar declination angle
  double get SOLAR_DEC_ANGLE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 136, 0.0);
  ///  Shutter delay
  double get SHUTTER_DELAY => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 138, 0.0);
  ///  Timing bias
  double get TIMING_BIAS => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 140, 0.0);
  ///  URI of the raw data file
  String? get RAW_FILE_URI => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 142);
  ///  Intensity of the observation
  double get INTENSITY => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 144, 0.0);
  ///  Background intensity
  double get BG_INTENSITY => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 146, 0.0);
  ///  Descriptor of the provided data
  String? get DESCRIPTOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 148);
  ///  Source of the data
  String? get SOURCE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 150);
  ///  Origin of the data
  String? get ORIGIN => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 152);
  ///  Mode of the data
  String? get DATA_MODE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 154);
  ///  Creation time of the record
  String? get CREATED_AT => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 156);
  ///  User who created the record
  String? get CREATED_BY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 158);
  ///  Reference frame of the observation
  String? get REFERENCE_FRAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 160);
  ///  Reference frame of the sensor
  String? get SEN_REFERENCE_FRAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 162);
  ///  Flag for umbra (total eclipse)
  bool get UMBRA => const fb.BoolReader().vTableGet(_bc, _bcOffset, 164, false);
  ///  Flag for penumbra (partial eclipse)
  bool get PENUMBRA => const fb.BoolReader().vTableGet(_bc, _bcOffset, 166, false);
  ///  Original network identifier
  String? get ORIG_NETWORK => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 168);
  ///  Data link source
  String? get SOURCE_DL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 170);
  ///  Type of the observation
  String? get TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 172);

  @override
  String toString() {
    return 'EOO{EOBSERVATION_ID: ${EOBSERVATION_ID}, CLASSIFICATION: ${CLASSIFICATION}, OB_TIME: ${OB_TIME}, CORR_QUALITY: ${CORR_QUALITY}, ID_ON_ORBIT: ${ID_ON_ORBIT}, SENSOR_ID: ${SENSOR_ID}, COLLECT_METHOD: ${COLLECT_METHOD}, NORAD_CAT_ID: ${NORAD_CAT_ID}, TASK_ID: ${TASK_ID}, TRANSACTION_ID: ${TRANSACTION_ID}, TRACK_ID: ${TRACK_ID}, OB_POSITION: ${OB_POSITION}, ORIG_OBJECT_ID: ${ORIG_OBJECT_ID}, ORIG_SENSOR_ID: ${ORIG_SENSOR_ID}, UCT: ${UCT}, AZIMUTH: ${AZIMUTH}, AZIMUTH_UNC: ${AZIMUTH_UNC}, AZIMUTH_BIAS: ${AZIMUTH_BIAS}, AZIMUTH_RATE: ${AZIMUTH_RATE}, ELEVATION: ${ELEVATION}, ELEVATION_UNC: ${ELEVATION_UNC}, ELEVATION_BIAS: ${ELEVATION_BIAS}, ELEVATION_RATE: ${ELEVATION_RATE}, RANGE: ${RANGE}, RANGE_UNC: ${RANGE_UNC}, RANGE_BIAS: ${RANGE_BIAS}, RANGE_RATE: ${RANGE_RATE}, RANGE_RATE_UNC: ${RANGE_RATE_UNC}, RA: ${RA}, RA_RATE: ${RA_RATE}, RA_UNC: ${RA_UNC}, RA_BIAS: ${RA_BIAS}, DECLINATION: ${DECLINATION}, DECLINATION_RATE: ${DECLINATION_RATE}, DECLINATION_UNC: ${DECLINATION_UNC}, DECLINATION_BIAS: ${DECLINATION_BIAS}, LOSX: ${LOSX}, LOSY: ${LOSY}, LOSZ: ${LOSZ}, LOS_UNC: ${LOS_UNC}, LOSXVEL: ${LOSXVEL}, LOSYVEL: ${LOSYVEL}, LOSZVEL: ${LOSZVEL}, SENLAT: ${SENLAT}, SENLON: ${SENLON}, SENALT: ${SENALT}, SENX: ${SENX}, SENY: ${SENY}, SENZ: ${SENZ}, FOV_COUNT: ${FOV_COUNT}, EXP_DURATION: ${EXP_DURATION}, ZEROPTD: ${ZEROPTD}, NET_OBJ_SIG: ${NET_OBJ_SIG}, NET_OBJ_SIG_UNC: ${NET_OBJ_SIG_UNC}, MAG: ${MAG}, MAG_UNC: ${MAG_UNC}, MAG_NORM_RANGE: ${MAG_NORM_RANGE}, GEOLAT: ${GEOLAT}, GEOLON: ${GEOLON}, GEOALT: ${GEOALT}, GEORANGE: ${GEORANGE}, SKY_BKGRND: ${SKY_BKGRND}, PRIMARY_EXTINCTION: ${PRIMARY_EXTINCTION}, PRIMARY_EXTINCTION_UNC: ${PRIMARY_EXTINCTION_UNC}, SOLAR_PHASE_ANGLE: ${SOLAR_PHASE_ANGLE}, SOLAR_EQ_PHASE_ANGLE: ${SOLAR_EQ_PHASE_ANGLE}, SOLAR_DEC_ANGLE: ${SOLAR_DEC_ANGLE}, SHUTTER_DELAY: ${SHUTTER_DELAY}, TIMING_BIAS: ${TIMING_BIAS}, RAW_FILE_URI: ${RAW_FILE_URI}, INTENSITY: ${INTENSITY}, BG_INTENSITY: ${BG_INTENSITY}, DESCRIPTOR: ${DESCRIPTOR}, SOURCE: ${SOURCE}, ORIGIN: ${ORIGIN}, DATA_MODE: ${DATA_MODE}, CREATED_AT: ${CREATED_AT}, CREATED_BY: ${CREATED_BY}, REFERENCE_FRAME: ${REFERENCE_FRAME}, SEN_REFERENCE_FRAME: ${SEN_REFERENCE_FRAME}, UMBRA: ${UMBRA}, PENUMBRA: ${PENUMBRA}, ORIG_NETWORK: ${ORIG_NETWORK}, SOURCE_DL: ${SOURCE_DL}, TYPE: ${TYPE}}';
  }
}

class _EOOReader extends fb.TableReader<EOO> {
  const _EOOReader();

  @override
  EOO createObject(fb.BufferContext bc, int offset) => 
    EOO._(bc, offset);
}

class EOOBuilder {
  EOOBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(85);
  }

  int addEobservationIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addObTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCorrQuality(double? CORR_QUALITY) {
    fbBuilder.addFloat32(3, CORR_QUALITY);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addSensorIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addCollectMethodOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addNoradCatId(int? NORAD_CAT_ID) {
    fbBuilder.addInt32(7, NORAD_CAT_ID);
    return fbBuilder.offset;
  }
  int addTaskIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addTrackIdOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addObPositionOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addUct(bool? UCT) {
    fbBuilder.addBool(14, UCT);
    return fbBuilder.offset;
  }
  int addAzimuth(double? AZIMUTH) {
    fbBuilder.addFloat32(15, AZIMUTH);
    return fbBuilder.offset;
  }
  int addAzimuthUnc(double? AZIMUTH_UNC) {
    fbBuilder.addFloat32(16, AZIMUTH_UNC);
    return fbBuilder.offset;
  }
  int addAzimuthBias(double? AZIMUTH_BIAS) {
    fbBuilder.addFloat32(17, AZIMUTH_BIAS);
    return fbBuilder.offset;
  }
  int addAzimuthRate(double? AZIMUTH_RATE) {
    fbBuilder.addFloat32(18, AZIMUTH_RATE);
    return fbBuilder.offset;
  }
  int addElevation(double? ELEVATION) {
    fbBuilder.addFloat32(19, ELEVATION);
    return fbBuilder.offset;
  }
  int addElevationUnc(double? ELEVATION_UNC) {
    fbBuilder.addFloat32(20, ELEVATION_UNC);
    return fbBuilder.offset;
  }
  int addElevationBias(double? ELEVATION_BIAS) {
    fbBuilder.addFloat32(21, ELEVATION_BIAS);
    return fbBuilder.offset;
  }
  int addElevationRate(double? ELEVATION_RATE) {
    fbBuilder.addFloat32(22, ELEVATION_RATE);
    return fbBuilder.offset;
  }
  int addRange(double? RANGE) {
    fbBuilder.addFloat32(23, RANGE);
    return fbBuilder.offset;
  }
  int addRangeUnc(double? RANGE_UNC) {
    fbBuilder.addFloat32(24, RANGE_UNC);
    return fbBuilder.offset;
  }
  int addRangeBias(double? RANGE_BIAS) {
    fbBuilder.addFloat32(25, RANGE_BIAS);
    return fbBuilder.offset;
  }
  int addRangeRate(double? RANGE_RATE) {
    fbBuilder.addFloat32(26, RANGE_RATE);
    return fbBuilder.offset;
  }
  int addRangeRateUnc(double? RANGE_RATE_UNC) {
    fbBuilder.addFloat32(27, RANGE_RATE_UNC);
    return fbBuilder.offset;
  }
  int addRa(double? RA) {
    fbBuilder.addFloat32(28, RA);
    return fbBuilder.offset;
  }
  int addRaRate(double? RA_RATE) {
    fbBuilder.addFloat32(29, RA_RATE);
    return fbBuilder.offset;
  }
  int addRaUnc(double? RA_UNC) {
    fbBuilder.addFloat32(30, RA_UNC);
    return fbBuilder.offset;
  }
  int addRaBias(double? RA_BIAS) {
    fbBuilder.addFloat32(31, RA_BIAS);
    return fbBuilder.offset;
  }
  int addDeclination(double? DECLINATION) {
    fbBuilder.addFloat32(32, DECLINATION);
    return fbBuilder.offset;
  }
  int addDeclinationRate(double? DECLINATION_RATE) {
    fbBuilder.addFloat32(33, DECLINATION_RATE);
    return fbBuilder.offset;
  }
  int addDeclinationUnc(double? DECLINATION_UNC) {
    fbBuilder.addFloat32(34, DECLINATION_UNC);
    return fbBuilder.offset;
  }
  int addDeclinationBias(double? DECLINATION_BIAS) {
    fbBuilder.addFloat32(35, DECLINATION_BIAS);
    return fbBuilder.offset;
  }
  int addLosx(double? LOSX) {
    fbBuilder.addFloat32(36, LOSX);
    return fbBuilder.offset;
  }
  int addLosy(double? LOSY) {
    fbBuilder.addFloat32(37, LOSY);
    return fbBuilder.offset;
  }
  int addLosz(double? LOSZ) {
    fbBuilder.addFloat32(38, LOSZ);
    return fbBuilder.offset;
  }
  int addLosUnc(double? LOS_UNC) {
    fbBuilder.addFloat32(39, LOS_UNC);
    return fbBuilder.offset;
  }
  int addLosxvel(double? LOSXVEL) {
    fbBuilder.addFloat32(40, LOSXVEL);
    return fbBuilder.offset;
  }
  int addLosyvel(double? LOSYVEL) {
    fbBuilder.addFloat32(41, LOSYVEL);
    return fbBuilder.offset;
  }
  int addLoszvel(double? LOSZVEL) {
    fbBuilder.addFloat32(42, LOSZVEL);
    return fbBuilder.offset;
  }
  int addSenlat(double? SENLAT) {
    fbBuilder.addFloat32(43, SENLAT);
    return fbBuilder.offset;
  }
  int addSenlon(double? SENLON) {
    fbBuilder.addFloat32(44, SENLON);
    return fbBuilder.offset;
  }
  int addSenalt(double? SENALT) {
    fbBuilder.addFloat32(45, SENALT);
    return fbBuilder.offset;
  }
  int addSenx(double? SENX) {
    fbBuilder.addFloat32(46, SENX);
    return fbBuilder.offset;
  }
  int addSeny(double? SENY) {
    fbBuilder.addFloat32(47, SENY);
    return fbBuilder.offset;
  }
  int addSenz(double? SENZ) {
    fbBuilder.addFloat32(48, SENZ);
    return fbBuilder.offset;
  }
  int addFovCount(int? FOV_COUNT) {
    fbBuilder.addInt32(49, FOV_COUNT);
    return fbBuilder.offset;
  }
  int addExpDuration(double? EXP_DURATION) {
    fbBuilder.addFloat32(50, EXP_DURATION);
    return fbBuilder.offset;
  }
  int addZeroptd(double? ZEROPTD) {
    fbBuilder.addFloat32(51, ZEROPTD);
    return fbBuilder.offset;
  }
  int addNetObjSig(double? NET_OBJ_SIG) {
    fbBuilder.addFloat32(52, NET_OBJ_SIG);
    return fbBuilder.offset;
  }
  int addNetObjSigUnc(double? NET_OBJ_SIG_UNC) {
    fbBuilder.addFloat32(53, NET_OBJ_SIG_UNC);
    return fbBuilder.offset;
  }
  int addMag(double? MAG) {
    fbBuilder.addFloat32(54, MAG);
    return fbBuilder.offset;
  }
  int addMagUnc(double? MAG_UNC) {
    fbBuilder.addFloat32(55, MAG_UNC);
    return fbBuilder.offset;
  }
  int addMagNormRange(double? MAG_NORM_RANGE) {
    fbBuilder.addFloat32(56, MAG_NORM_RANGE);
    return fbBuilder.offset;
  }
  int addGeolat(double? GEOLAT) {
    fbBuilder.addFloat32(57, GEOLAT);
    return fbBuilder.offset;
  }
  int addGeolon(double? GEOLON) {
    fbBuilder.addFloat32(58, GEOLON);
    return fbBuilder.offset;
  }
  int addGeoalt(double? GEOALT) {
    fbBuilder.addFloat32(59, GEOALT);
    return fbBuilder.offset;
  }
  int addGeorange(double? GEORANGE) {
    fbBuilder.addFloat32(60, GEORANGE);
    return fbBuilder.offset;
  }
  int addSkyBkgrnd(double? SKY_BKGRND) {
    fbBuilder.addFloat32(61, SKY_BKGRND);
    return fbBuilder.offset;
  }
  int addPrimaryExtinction(double? PRIMARY_EXTINCTION) {
    fbBuilder.addFloat32(62, PRIMARY_EXTINCTION);
    return fbBuilder.offset;
  }
  int addPrimaryExtinctionUnc(double? PRIMARY_EXTINCTION_UNC) {
    fbBuilder.addFloat32(63, PRIMARY_EXTINCTION_UNC);
    return fbBuilder.offset;
  }
  int addSolarPhaseAngle(double? SOLAR_PHASE_ANGLE) {
    fbBuilder.addFloat32(64, SOLAR_PHASE_ANGLE);
    return fbBuilder.offset;
  }
  int addSolarEqPhaseAngle(double? SOLAR_EQ_PHASE_ANGLE) {
    fbBuilder.addFloat32(65, SOLAR_EQ_PHASE_ANGLE);
    return fbBuilder.offset;
  }
  int addSolarDecAngle(double? SOLAR_DEC_ANGLE) {
    fbBuilder.addFloat32(66, SOLAR_DEC_ANGLE);
    return fbBuilder.offset;
  }
  int addShutterDelay(double? SHUTTER_DELAY) {
    fbBuilder.addFloat32(67, SHUTTER_DELAY);
    return fbBuilder.offset;
  }
  int addTimingBias(double? TIMING_BIAS) {
    fbBuilder.addFloat32(68, TIMING_BIAS);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(69, offset);
    return fbBuilder.offset;
  }
  int addIntensity(double? INTENSITY) {
    fbBuilder.addFloat32(70, INTENSITY);
    return fbBuilder.offset;
  }
  int addBgIntensity(double? BG_INTENSITY) {
    fbBuilder.addFloat32(71, BG_INTENSITY);
    return fbBuilder.offset;
  }
  int addDescriptorOffset(int? offset) {
    fbBuilder.addOffset(72, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(73, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(74, offset);
    return fbBuilder.offset;
  }
  int addDataModeOffset(int? offset) {
    fbBuilder.addOffset(75, offset);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(76, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(77, offset);
    return fbBuilder.offset;
  }
  int addReferenceFrameOffset(int? offset) {
    fbBuilder.addOffset(78, offset);
    return fbBuilder.offset;
  }
  int addSenReferenceFrameOffset(int? offset) {
    fbBuilder.addOffset(79, offset);
    return fbBuilder.offset;
  }
  int addUmbra(bool? UMBRA) {
    fbBuilder.addBool(80, UMBRA);
    return fbBuilder.offset;
  }
  int addPenumbra(bool? PENUMBRA) {
    fbBuilder.addBool(81, PENUMBRA);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(82, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(83, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(84, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EOOObjectBuilder extends fb.ObjectBuilder {
  final String? _EOBSERVATION_ID;
  final String? _CLASSIFICATION;
  final String? _OB_TIME;
  final double? _CORR_QUALITY;
  final String? _ID_ON_ORBIT;
  final String? _SENSOR_ID;
  final String? _COLLECT_METHOD;
  final int? _NORAD_CAT_ID;
  final String? _TASK_ID;
  final String? _TRANSACTION_ID;
  final String? _TRACK_ID;
  final String? _OB_POSITION;
  final String? _ORIG_OBJECT_ID;
  final String? _ORIG_SENSOR_ID;
  final bool? _UCT;
  final double? _AZIMUTH;
  final double? _AZIMUTH_UNC;
  final double? _AZIMUTH_BIAS;
  final double? _AZIMUTH_RATE;
  final double? _ELEVATION;
  final double? _ELEVATION_UNC;
  final double? _ELEVATION_BIAS;
  final double? _ELEVATION_RATE;
  final double? _RANGE;
  final double? _RANGE_UNC;
  final double? _RANGE_BIAS;
  final double? _RANGE_RATE;
  final double? _RANGE_RATE_UNC;
  final double? _RA;
  final double? _RA_RATE;
  final double? _RA_UNC;
  final double? _RA_BIAS;
  final double? _DECLINATION;
  final double? _DECLINATION_RATE;
  final double? _DECLINATION_UNC;
  final double? _DECLINATION_BIAS;
  final double? _LOSX;
  final double? _LOSY;
  final double? _LOSZ;
  final double? _LOS_UNC;
  final double? _LOSXVEL;
  final double? _LOSYVEL;
  final double? _LOSZVEL;
  final double? _SENLAT;
  final double? _SENLON;
  final double? _SENALT;
  final double? _SENX;
  final double? _SENY;
  final double? _SENZ;
  final int? _FOV_COUNT;
  final double? _EXP_DURATION;
  final double? _ZEROPTD;
  final double? _NET_OBJ_SIG;
  final double? _NET_OBJ_SIG_UNC;
  final double? _MAG;
  final double? _MAG_UNC;
  final double? _MAG_NORM_RANGE;
  final double? _GEOLAT;
  final double? _GEOLON;
  final double? _GEOALT;
  final double? _GEORANGE;
  final double? _SKY_BKGRND;
  final double? _PRIMARY_EXTINCTION;
  final double? _PRIMARY_EXTINCTION_UNC;
  final double? _SOLAR_PHASE_ANGLE;
  final double? _SOLAR_EQ_PHASE_ANGLE;
  final double? _SOLAR_DEC_ANGLE;
  final double? _SHUTTER_DELAY;
  final double? _TIMING_BIAS;
  final String? _RAW_FILE_URI;
  final double? _INTENSITY;
  final double? _BG_INTENSITY;
  final String? _DESCRIPTOR;
  final String? _SOURCE;
  final String? _ORIGIN;
  final String? _DATA_MODE;
  final String? _CREATED_AT;
  final String? _CREATED_BY;
  final String? _REFERENCE_FRAME;
  final String? _SEN_REFERENCE_FRAME;
  final bool? _UMBRA;
  final bool? _PENUMBRA;
  final String? _ORIG_NETWORK;
  final String? _SOURCE_DL;
  final String? _TYPE;

  EOOObjectBuilder({
    String? EOBSERVATION_ID,
    String? CLASSIFICATION,
    String? OB_TIME,
    double? CORR_QUALITY,
    String? ID_ON_ORBIT,
    String? SENSOR_ID,
    String? COLLECT_METHOD,
    int? NORAD_CAT_ID,
    String? TASK_ID,
    String? TRANSACTION_ID,
    String? TRACK_ID,
    String? OB_POSITION,
    String? ORIG_OBJECT_ID,
    String? ORIG_SENSOR_ID,
    bool? UCT,
    double? AZIMUTH,
    double? AZIMUTH_UNC,
    double? AZIMUTH_BIAS,
    double? AZIMUTH_RATE,
    double? ELEVATION,
    double? ELEVATION_UNC,
    double? ELEVATION_BIAS,
    double? ELEVATION_RATE,
    double? RANGE,
    double? RANGE_UNC,
    double? RANGE_BIAS,
    double? RANGE_RATE,
    double? RANGE_RATE_UNC,
    double? RA,
    double? RA_RATE,
    double? RA_UNC,
    double? RA_BIAS,
    double? DECLINATION,
    double? DECLINATION_RATE,
    double? DECLINATION_UNC,
    double? DECLINATION_BIAS,
    double? LOSX,
    double? LOSY,
    double? LOSZ,
    double? LOS_UNC,
    double? LOSXVEL,
    double? LOSYVEL,
    double? LOSZVEL,
    double? SENLAT,
    double? SENLON,
    double? SENALT,
    double? SENX,
    double? SENY,
    double? SENZ,
    int? FOV_COUNT,
    double? EXP_DURATION,
    double? ZEROPTD,
    double? NET_OBJ_SIG,
    double? NET_OBJ_SIG_UNC,
    double? MAG,
    double? MAG_UNC,
    double? MAG_NORM_RANGE,
    double? GEOLAT,
    double? GEOLON,
    double? GEOALT,
    double? GEORANGE,
    double? SKY_BKGRND,
    double? PRIMARY_EXTINCTION,
    double? PRIMARY_EXTINCTION_UNC,
    double? SOLAR_PHASE_ANGLE,
    double? SOLAR_EQ_PHASE_ANGLE,
    double? SOLAR_DEC_ANGLE,
    double? SHUTTER_DELAY,
    double? TIMING_BIAS,
    String? RAW_FILE_URI,
    double? INTENSITY,
    double? BG_INTENSITY,
    String? DESCRIPTOR,
    String? SOURCE,
    String? ORIGIN,
    String? DATA_MODE,
    String? CREATED_AT,
    String? CREATED_BY,
    String? REFERENCE_FRAME,
    String? SEN_REFERENCE_FRAME,
    bool? UMBRA,
    bool? PENUMBRA,
    String? ORIG_NETWORK,
    String? SOURCE_DL,
    String? TYPE,
  })
      : _EOBSERVATION_ID = EOBSERVATION_ID,
        _CLASSIFICATION = CLASSIFICATION,
        _OB_TIME = OB_TIME,
        _CORR_QUALITY = CORR_QUALITY,
        _ID_ON_ORBIT = ID_ON_ORBIT,
        _SENSOR_ID = SENSOR_ID,
        _COLLECT_METHOD = COLLECT_METHOD,
        _NORAD_CAT_ID = NORAD_CAT_ID,
        _TASK_ID = TASK_ID,
        _TRANSACTION_ID = TRANSACTION_ID,
        _TRACK_ID = TRACK_ID,
        _OB_POSITION = OB_POSITION,
        _ORIG_OBJECT_ID = ORIG_OBJECT_ID,
        _ORIG_SENSOR_ID = ORIG_SENSOR_ID,
        _UCT = UCT,
        _AZIMUTH = AZIMUTH,
        _AZIMUTH_UNC = AZIMUTH_UNC,
        _AZIMUTH_BIAS = AZIMUTH_BIAS,
        _AZIMUTH_RATE = AZIMUTH_RATE,
        _ELEVATION = ELEVATION,
        _ELEVATION_UNC = ELEVATION_UNC,
        _ELEVATION_BIAS = ELEVATION_BIAS,
        _ELEVATION_RATE = ELEVATION_RATE,
        _RANGE = RANGE,
        _RANGE_UNC = RANGE_UNC,
        _RANGE_BIAS = RANGE_BIAS,
        _RANGE_RATE = RANGE_RATE,
        _RANGE_RATE_UNC = RANGE_RATE_UNC,
        _RA = RA,
        _RA_RATE = RA_RATE,
        _RA_UNC = RA_UNC,
        _RA_BIAS = RA_BIAS,
        _DECLINATION = DECLINATION,
        _DECLINATION_RATE = DECLINATION_RATE,
        _DECLINATION_UNC = DECLINATION_UNC,
        _DECLINATION_BIAS = DECLINATION_BIAS,
        _LOSX = LOSX,
        _LOSY = LOSY,
        _LOSZ = LOSZ,
        _LOS_UNC = LOS_UNC,
        _LOSXVEL = LOSXVEL,
        _LOSYVEL = LOSYVEL,
        _LOSZVEL = LOSZVEL,
        _SENLAT = SENLAT,
        _SENLON = SENLON,
        _SENALT = SENALT,
        _SENX = SENX,
        _SENY = SENY,
        _SENZ = SENZ,
        _FOV_COUNT = FOV_COUNT,
        _EXP_DURATION = EXP_DURATION,
        _ZEROPTD = ZEROPTD,
        _NET_OBJ_SIG = NET_OBJ_SIG,
        _NET_OBJ_SIG_UNC = NET_OBJ_SIG_UNC,
        _MAG = MAG,
        _MAG_UNC = MAG_UNC,
        _MAG_NORM_RANGE = MAG_NORM_RANGE,
        _GEOLAT = GEOLAT,
        _GEOLON = GEOLON,
        _GEOALT = GEOALT,
        _GEORANGE = GEORANGE,
        _SKY_BKGRND = SKY_BKGRND,
        _PRIMARY_EXTINCTION = PRIMARY_EXTINCTION,
        _PRIMARY_EXTINCTION_UNC = PRIMARY_EXTINCTION_UNC,
        _SOLAR_PHASE_ANGLE = SOLAR_PHASE_ANGLE,
        _SOLAR_EQ_PHASE_ANGLE = SOLAR_EQ_PHASE_ANGLE,
        _SOLAR_DEC_ANGLE = SOLAR_DEC_ANGLE,
        _SHUTTER_DELAY = SHUTTER_DELAY,
        _TIMING_BIAS = TIMING_BIAS,
        _RAW_FILE_URI = RAW_FILE_URI,
        _INTENSITY = INTENSITY,
        _BG_INTENSITY = BG_INTENSITY,
        _DESCRIPTOR = DESCRIPTOR,
        _SOURCE = SOURCE,
        _ORIGIN = ORIGIN,
        _DATA_MODE = DATA_MODE,
        _CREATED_AT = CREATED_AT,
        _CREATED_BY = CREATED_BY,
        _REFERENCE_FRAME = REFERENCE_FRAME,
        _SEN_REFERENCE_FRAME = SEN_REFERENCE_FRAME,
        _UMBRA = UMBRA,
        _PENUMBRA = PENUMBRA,
        _ORIG_NETWORK = ORIG_NETWORK,
        _SOURCE_DL = SOURCE_DL,
        _TYPE = TYPE;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? EOBSERVATION_IDOffset = _EOBSERVATION_ID == null ? null
        : fbBuilder.writeString(_EOBSERVATION_ID!);
    final int? CLASSIFICATIONOffset = _CLASSIFICATION == null ? null
        : fbBuilder.writeString(_CLASSIFICATION!);
    final int? OB_TIMEOffset = _OB_TIME == null ? null
        : fbBuilder.writeString(_OB_TIME!);
    final int? ID_ON_ORBITOffset = _ID_ON_ORBIT == null ? null
        : fbBuilder.writeString(_ID_ON_ORBIT!);
    final int? SENSOR_IDOffset = _SENSOR_ID == null ? null
        : fbBuilder.writeString(_SENSOR_ID!);
    final int? COLLECT_METHODOffset = _COLLECT_METHOD == null ? null
        : fbBuilder.writeString(_COLLECT_METHOD!);
    final int? TASK_IDOffset = _TASK_ID == null ? null
        : fbBuilder.writeString(_TASK_ID!);
    final int? TRANSACTION_IDOffset = _TRANSACTION_ID == null ? null
        : fbBuilder.writeString(_TRANSACTION_ID!);
    final int? TRACK_IDOffset = _TRACK_ID == null ? null
        : fbBuilder.writeString(_TRACK_ID!);
    final int? OB_POSITIONOffset = _OB_POSITION == null ? null
        : fbBuilder.writeString(_OB_POSITION!);
    final int? ORIG_OBJECT_IDOffset = _ORIG_OBJECT_ID == null ? null
        : fbBuilder.writeString(_ORIG_OBJECT_ID!);
    final int? ORIG_SENSOR_IDOffset = _ORIG_SENSOR_ID == null ? null
        : fbBuilder.writeString(_ORIG_SENSOR_ID!);
    final int? RAW_FILE_URIOffset = _RAW_FILE_URI == null ? null
        : fbBuilder.writeString(_RAW_FILE_URI!);
    final int? DESCRIPTOROffset = _DESCRIPTOR == null ? null
        : fbBuilder.writeString(_DESCRIPTOR!);
    final int? SOURCEOffset = _SOURCE == null ? null
        : fbBuilder.writeString(_SOURCE!);
    final int? ORIGINOffset = _ORIGIN == null ? null
        : fbBuilder.writeString(_ORIGIN!);
    final int? DATA_MODEOffset = _DATA_MODE == null ? null
        : fbBuilder.writeString(_DATA_MODE!);
    final int? CREATED_ATOffset = _CREATED_AT == null ? null
        : fbBuilder.writeString(_CREATED_AT!);
    final int? CREATED_BYOffset = _CREATED_BY == null ? null
        : fbBuilder.writeString(_CREATED_BY!);
    final int? REFERENCE_FRAMEOffset = _REFERENCE_FRAME == null ? null
        : fbBuilder.writeString(_REFERENCE_FRAME!);
    final int? SEN_REFERENCE_FRAMEOffset = _SEN_REFERENCE_FRAME == null ? null
        : fbBuilder.writeString(_SEN_REFERENCE_FRAME!);
    final int? ORIG_NETWORKOffset = _ORIG_NETWORK == null ? null
        : fbBuilder.writeString(_ORIG_NETWORK!);
    final int? SOURCE_DLOffset = _SOURCE_DL == null ? null
        : fbBuilder.writeString(_SOURCE_DL!);
    final int? TYPEOffset = _TYPE == null ? null
        : fbBuilder.writeString(_TYPE!);
    fbBuilder.startTable(85);
    fbBuilder.addOffset(0, EOBSERVATION_IDOffset);
    fbBuilder.addOffset(1, CLASSIFICATIONOffset);
    fbBuilder.addOffset(2, OB_TIMEOffset);
    fbBuilder.addFloat32(3, _CORR_QUALITY);
    fbBuilder.addOffset(4, ID_ON_ORBITOffset);
    fbBuilder.addOffset(5, SENSOR_IDOffset);
    fbBuilder.addOffset(6, COLLECT_METHODOffset);
    fbBuilder.addInt32(7, _NORAD_CAT_ID);
    fbBuilder.addOffset(8, TASK_IDOffset);
    fbBuilder.addOffset(9, TRANSACTION_IDOffset);
    fbBuilder.addOffset(10, TRACK_IDOffset);
    fbBuilder.addOffset(11, OB_POSITIONOffset);
    fbBuilder.addOffset(12, ORIG_OBJECT_IDOffset);
    fbBuilder.addOffset(13, ORIG_SENSOR_IDOffset);
    fbBuilder.addBool(14, _UCT);
    fbBuilder.addFloat32(15, _AZIMUTH);
    fbBuilder.addFloat32(16, _AZIMUTH_UNC);
    fbBuilder.addFloat32(17, _AZIMUTH_BIAS);
    fbBuilder.addFloat32(18, _AZIMUTH_RATE);
    fbBuilder.addFloat32(19, _ELEVATION);
    fbBuilder.addFloat32(20, _ELEVATION_UNC);
    fbBuilder.addFloat32(21, _ELEVATION_BIAS);
    fbBuilder.addFloat32(22, _ELEVATION_RATE);
    fbBuilder.addFloat32(23, _RANGE);
    fbBuilder.addFloat32(24, _RANGE_UNC);
    fbBuilder.addFloat32(25, _RANGE_BIAS);
    fbBuilder.addFloat32(26, _RANGE_RATE);
    fbBuilder.addFloat32(27, _RANGE_RATE_UNC);
    fbBuilder.addFloat32(28, _RA);
    fbBuilder.addFloat32(29, _RA_RATE);
    fbBuilder.addFloat32(30, _RA_UNC);
    fbBuilder.addFloat32(31, _RA_BIAS);
    fbBuilder.addFloat32(32, _DECLINATION);
    fbBuilder.addFloat32(33, _DECLINATION_RATE);
    fbBuilder.addFloat32(34, _DECLINATION_UNC);
    fbBuilder.addFloat32(35, _DECLINATION_BIAS);
    fbBuilder.addFloat32(36, _LOSX);
    fbBuilder.addFloat32(37, _LOSY);
    fbBuilder.addFloat32(38, _LOSZ);
    fbBuilder.addFloat32(39, _LOS_UNC);
    fbBuilder.addFloat32(40, _LOSXVEL);
    fbBuilder.addFloat32(41, _LOSYVEL);
    fbBuilder.addFloat32(42, _LOSZVEL);
    fbBuilder.addFloat32(43, _SENLAT);
    fbBuilder.addFloat32(44, _SENLON);
    fbBuilder.addFloat32(45, _SENALT);
    fbBuilder.addFloat32(46, _SENX);
    fbBuilder.addFloat32(47, _SENY);
    fbBuilder.addFloat32(48, _SENZ);
    fbBuilder.addInt32(49, _FOV_COUNT);
    fbBuilder.addFloat32(50, _EXP_DURATION);
    fbBuilder.addFloat32(51, _ZEROPTD);
    fbBuilder.addFloat32(52, _NET_OBJ_SIG);
    fbBuilder.addFloat32(53, _NET_OBJ_SIG_UNC);
    fbBuilder.addFloat32(54, _MAG);
    fbBuilder.addFloat32(55, _MAG_UNC);
    fbBuilder.addFloat32(56, _MAG_NORM_RANGE);
    fbBuilder.addFloat32(57, _GEOLAT);
    fbBuilder.addFloat32(58, _GEOLON);
    fbBuilder.addFloat32(59, _GEOALT);
    fbBuilder.addFloat32(60, _GEORANGE);
    fbBuilder.addFloat32(61, _SKY_BKGRND);
    fbBuilder.addFloat32(62, _PRIMARY_EXTINCTION);
    fbBuilder.addFloat32(63, _PRIMARY_EXTINCTION_UNC);
    fbBuilder.addFloat32(64, _SOLAR_PHASE_ANGLE);
    fbBuilder.addFloat32(65, _SOLAR_EQ_PHASE_ANGLE);
    fbBuilder.addFloat32(66, _SOLAR_DEC_ANGLE);
    fbBuilder.addFloat32(67, _SHUTTER_DELAY);
    fbBuilder.addFloat32(68, _TIMING_BIAS);
    fbBuilder.addOffset(69, RAW_FILE_URIOffset);
    fbBuilder.addFloat32(70, _INTENSITY);
    fbBuilder.addFloat32(71, _BG_INTENSITY);
    fbBuilder.addOffset(72, DESCRIPTOROffset);
    fbBuilder.addOffset(73, SOURCEOffset);
    fbBuilder.addOffset(74, ORIGINOffset);
    fbBuilder.addOffset(75, DATA_MODEOffset);
    fbBuilder.addOffset(76, CREATED_ATOffset);
    fbBuilder.addOffset(77, CREATED_BYOffset);
    fbBuilder.addOffset(78, REFERENCE_FRAMEOffset);
    fbBuilder.addOffset(79, SEN_REFERENCE_FRAMEOffset);
    fbBuilder.addBool(80, _UMBRA);
    fbBuilder.addBool(81, _PENUMBRA);
    fbBuilder.addOffset(82, ORIG_NETWORKOffset);
    fbBuilder.addOffset(83, SOURCE_DLOffset);
    fbBuilder.addOffset(84, TYPEOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
