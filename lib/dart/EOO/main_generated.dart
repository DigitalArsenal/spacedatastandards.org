// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


import './main_generated.dart';

///  Enumeration for data collection methods
class CollectMethod {
  final int value;
  const CollectMethod._(this.value);

  factory CollectMethod.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum CollectMethod');
    }
    return result;
  }

  static CollectMethod? _createOrNull(int? value) => 
      value == null ? null : CollectMethod.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  static const CollectMethod SIDEREAL = CollectMethod._(0);
  static const CollectMethod RATE_TRACK = CollectMethod._(1);
  static const CollectMethod FIXED_STARE = CollectMethod._(2);
  static const CollectMethod OTHER = CollectMethod._(3);
  static const Map<int, CollectMethod> values = {
    0: SIDEREAL,
    1: RATE_TRACK,
    2: FIXED_STARE,
    3: OTHER};

  static const fb.Reader<CollectMethod> reader = _CollectMethodReader();

  @override
  String toString() {
    return 'CollectMethod{value: $value}';
  }
}

class _CollectMethodReader extends fb.Reader<CollectMethod> {
  const _CollectMethodReader();

  @override
  int get size => 1;

  @override
  CollectMethod read(fb.BufferContext bc, int offset) =>
      CollectMethod.fromValue(const fb.Int8Reader().read(bc, offset));
}

class ObservationPosition {
  final int value;
  const ObservationPosition._(this.value);

  factory ObservationPosition.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ObservationPosition');
    }
    return result;
  }

  static ObservationPosition? _createOrNull(int? value) => 
      value == null ? null : ObservationPosition.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  static const ObservationPosition FENCE = ObservationPosition._(0);
  static const ObservationPosition FIRST = ObservationPosition._(1);
  static const ObservationPosition IN = ObservationPosition._(2);
  static const ObservationPosition LAST = ObservationPosition._(3);
  static const ObservationPosition SINGLE = ObservationPosition._(4);
  static const Map<int, ObservationPosition> values = {
    0: FENCE,
    1: FIRST,
    2: IN,
    3: LAST,
    4: SINGLE};

  static const fb.Reader<ObservationPosition> reader = _ObservationPositionReader();

  @override
  String toString() {
    return 'ObservationPosition{value: $value}';
  }
}

class _ObservationPositionReader extends fb.Reader<ObservationPosition> {
  const _ObservationPositionReader();

  @override
  int get size => 1;

  @override
  ObservationPosition read(fb.BufferContext bc, int offset) =>
      ObservationPosition.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Electro-Optical Observation
class EOO {
  EOO._(this._bc, this._bcOffset);
  factory EOO(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EOO> reader = _EOOReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record.
  String? get ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  String? get CLASSIFICATION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Ob detection time in ISO 8601 UTC (YYYY-MM-DDTHH:MM:SS.ssssssZ), up to microsecond precision.
  String? get OB_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Correlation score of the observation when compared to a known orbit state.
  double get CORR_QUALITY => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Server will auto-populate with SAT_NO if available.
  String? get ID_ON_ORBIT => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Unique ID of the sensor. Must have a corresponding sensor record on the server.
  String? get SENSOR_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Accepted Collection Method
  CollectMethod get COLLECT_METHOD => CollectMethod.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 16, 0));
  ///  18SDS satellite number. Only list if correlated against the 18SDS catalog.
  int get NORAD_CAT_ID => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  Identifier for the collectRequest message if the collection was in response to tasking.
  String? get TASK_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Optional identifier to track a transaction.
  String? get TRANSACTION_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Identifier of the track to which this observation belongs, if applicable.
  String? get TRACK_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).
  ObservationPosition get OB_POSITION => ObservationPosition.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 26, 0));
  ///  Provider maintained ID. May not be consistent with 18SDS SAT_NO.
  String? get ORIG_OBJECT_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Sensor ID.
  String? get ORIG_SENSOR_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Required if correlation is attempted. Indicates whether correlation succeeded.
  bool get UCT => const fb.BoolReader().vTableGet(_bc, _bcOffset, 32, false);
  ///  Line of sight azimuth angle in degrees and topocentric frame.
  double get AZIMUTH => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  One sigma uncertainty in the line of sight azimuth angle, in degrees.
  double get AZIMUTH_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Sensor line of sight azimuth angle bias in degrees.
  double get AZIMUTH_BIAS => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Rate of change of the line of sight azimuth in degrees per second.
  double get AZIMUTH_RATE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Line of sight elevation in degrees and topocentric frame.
  double get ELEVATION => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  One sigma uncertainty in the line of sight elevation angle, in degrees.
  double get ELEVATION_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Sensor line of sight elevation bias in degrees.
  double get ELEVATION_BIAS => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Rate of change of the line of sight elevation in degrees per second.
  double get ELEVATION_RATE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Line of sight range in km. Reported value should include all applicable corrections.
  double get RANGE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  One sigma uncertainty in the line of sight range, in km.
  double get RANGE_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Sensor line of sight range bias in km.
  double get RANGE_BIAS => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  Range rate in km/s. Reported value should include all applicable corrections.
  double get RANGE_RATE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  One sigma uncertainty in the line of sight range rate, in km/sec.
  double get RANGE_RATE_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  Right ascension in degrees. Required metric reporting field for EO observations.
  double get RA => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Line of sight right ascension rate of change, in degrees/sec.
  double get RA_RATE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  One sigma uncertainty in the line of sight right ascension angle, in degrees.
  double get RA_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Sensor line of sight right ascension bias in degrees.
  double get RA_BIAS => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Declination in degrees. Required metric reporting field for EO observations.
  double get DECLINATION => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Line of sight declination rate of change, in degrees/sec.
  double get DECLINATION_RATE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  One sigma uncertainty in the line of sight declination angle, in degrees.
  double get DECLINATION_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  Sensor line of sight declination angle bias in degrees.
  double get DECLINATION_BIAS => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  X-component of the unit vector representing the line-of-sight direction in the observer's reference frame.
  double get LOSX => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  Y-component of the unit vector representing the line-of-sight direction in the observer's reference frame.
  double get LOSY => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  Z-component of the unit vector representing the line-of-sight direction in the observer's reference frame.
  double get LOSZ => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  One sigma uncertainty in the line-of-sight direction vector components.
  double get LOS_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  X-component of the velocity vector along the line of sight, in km/s.
  double get LOSXVEL => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Y-component of the velocity vector along the line of sight, in km/s.
  double get LOSYVEL => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  Z-component of the velocity vector along the line of sight, in km/s.
  double get LOSZVEL => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  WGS-84 latitude in decimal degrees at the time of the observation.
  double get SENLAT => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  WGS-84 longitude in decimal degrees at the time of the observation.
  double get SENLON => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  Sensor height in km relative to the WGS-84 ellipsoid at the time of the observation.
  double get SENALT => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 94, 0.0);
  ///  Cartesian X position in km at the time of the observation.
  double get SENX => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 96, 0.0);
  ///  Cartesian Y position in km at the time of the observation.
  double get SENY => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  Cartesian Z position in km at the time of the observation.
  double get SENZ => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 100, 0.0);
  ///  Total number of satellites in the field of view.
  int get FOV_COUNT => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 102, 0);
  ///  Number of uncorrelated satellites in the field of view (JCO).
  int get FOV_COUNT_UCTS => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 104, 0);
  ///  Image exposure duration in seconds. For observations performed using frame stacking or synthetic tracking methods, 
  ///  the exposure duration should be the total integration time. This field is highly recommended / required if the 
  ///  observations are going to be used for photometric processing.
  double get EXP_DURATION => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 106, 0.0);
  ///  Formula: 2.5 * log_10 (zero_mag_counts / EXP_DURATION).
  double get ZEROPTD => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 108, 0.0);
  ///  Net object signature = counts / EXP_DURATION.
  double get NET_OBJ_SIG => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 110, 0.0);
  ///  Net object signature uncertainty = counts uncertainty / EXP_DURATION.
  double get NET_OBJ_SIG_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 112, 0.0);
  ///  Measure of observed brightness calibrated against the Gaia G-band.
  double get MAG => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 114, 0.0);
  ///  Uncertainty of the observed brightness.
  double get MAG_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 116, 0.0);
  ///  [Definition needed].
  double get MAG_NORM_RANGE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 118, 0.0);
  ///  Computed estimate of the latitude, positive degrees north. It should be computed based on the assumed slant range 
  ///  and corresponding viewing geometry. It must NOT be computed from the orbit state.
  double get GEOLAT => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 120, 0.0);
  ///  Computed estimate of the longitude as +/- 180 degrees east. It should be computed based on the assumed slant range 
  ///  and viewing geometry. It must NOT be computed from the orbit state.
  double get GEOLON => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 122, 0.0);
  ///  Computed estimate of satellite altitude in km at the reported location. It must NOT be computed from the orbit state.
  double get GEOALT => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 124, 0.0);
  ///  Computed estimate of the slant range in km. It must NOT be computed from the orbit state.
  double get GEORANGE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 126, 0.0);
  ///  Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently 
  ///  empty part of the night sky.
  double get SKY_BKGRND => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 128, 0.0);
  ///  Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass 
  ///  to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, 
  ///  describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical 
  ///  object and the observer.
  double get PRIMARY_EXTINCTION => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 130, 0.0);
  ///  Primary Extinction Coefficient Uncertainty, in Magnitudes.
  double get PRIMARY_EXTINCTION_UNC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 132, 0.0);
  ///  The angle, in degrees, between the target-to-observer vector and the target-to-sun vector. Recommend using the 
  ///  calculation listed in the EOSSA documentation, pg 106 of the EOSSA spec.
  double get SOLAR_PHASE_ANGLE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 134, 0.0);
  ///  The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector 
  ///  onto the equatorial plane. The convention used is negative when closing (i.e., before the opposition) 
  ///  and positive when opening (after the opposition).
  double get SOLAR_EQ_PHASE_ANGLE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 136, 0.0);
  ///  Angle from the sun to the equatorial plane.
  double get SOLAR_DEC_ANGLE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 138, 0.0);
  ///  Shutter delay in seconds.
  double get SHUTTER_DELAY => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 140, 0.0);
  ///  Sensor timing bias in seconds.
  double get TIMING_BIAS => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 142, 0.0);
  ///  Optional URI location in the document repository of the raw file parsed by the system to produce this record. 
  String? get RAW_FILE_URI => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 144);
  ///  Intensity of the target for IR observations, in kw/sr/em.
  double get INTENSITY => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 146, 0.0);
  ///  Background intensity for IR observations, in kw/sr/um.
  double get BG_INTENSITY => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 148, 0.0);
  ///  Optional source-provided and searchable metadata or descriptor of the data.
  String? get DESCRIPTOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 150);
  ///  Source of the data.
  String? get SOURCE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 152);
  ///  Originating system or organization which produced the data, if different from the source.
  ///  The origin may be different than the source if the source was a mediating system which forwarded 
  ///  the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  String? get ORIGIN => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 154);
  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST.
  DataMode get DATA_MODE => DataMode.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 156, 0));
  ///  Time the row was created in the database, auto-populated by the system.
  String? get CREATED_AT => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 158);
  ///  Application user who created the row in the database, auto-populated by the system.
  String? get CREATED_BY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 160);
  ///  EO observations are assumed to be topocentric J2000 coordinates ('J2000') as defined by the IAU, unless otherwise specified.
  RefFrame get REFERENCE_FRAME => RefFrame.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 162, 0));
  ///  The sensor reference frame is assumed to be the International Terrestrial Reference Frame (ITRF), 
  ///  unless otherwise specified. (ITRF is equivalent to Earth-Centered Earth-Fixed (ECEF) for this purpose). 
  ///  Lat / long / height values should be reported using the WGS-84 ellipsoid, where applicable.
  RefFrame get SEN_REFERENCE_FRAME => RefFrame.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 164, 0));
  ///  Boolean indicating that the target object was in umbral eclipse at the time of this observation.
  bool get UMBRA => const fb.BoolReader().vTableGet(_bc, _bcOffset, 166, false);
  ///  Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
  ///  This field is highly recommended if the observations will be used for photometric processing.
  bool get PENUMBRA => const fb.BoolReader().vTableGet(_bc, _bcOffset, 168, false);
  ///  The originating source network on which this record was created, auto-populated by the system.
  String? get ORIG_NETWORK => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 170);
  ///  The source from which this record was received.
  String? get SOURCE_DL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 172);
  ///  Device Type
  DeviceType get TYPE => DeviceType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 174, 0));
  ///  True if measured, false if computed. Required if azimuth is reported.
  bool get AZIMUTH_MEASURED => const fb.BoolReader().vTableGet(_bc, _bcOffset, 176, false);
  ///  True if measured, false if computed. Required if elevation is reported.
  bool get ELEVATION_MEASURED => const fb.BoolReader().vTableGet(_bc, _bcOffset, 178, false);
  ///  True if measured, false if computed. Required if range is reported.
  bool get RANGE_MEASURED => const fb.BoolReader().vTableGet(_bc, _bcOffset, 180, false);
  ///  True if measured, false if computed. Required if range-rate is reported.
  bool get RANGERATE_MEASURED => const fb.BoolReader().vTableGet(_bc, _bcOffset, 182, false);
  ///  True if measured, false if computed. Required if right ascension is reported.
  bool get RA_MEASURED => const fb.BoolReader().vTableGet(_bc, _bcOffset, 184, false);
  ///  True if measured, false if computed. Required if declination is reported.
  bool get DECLINATION_MEASURED => const fb.BoolReader().vTableGet(_bc, _bcOffset, 186, false);

  @override
  String toString() {
    return 'EOO{ID: ${ID}, CLASSIFICATION: ${CLASSIFICATION}, OB_TIME: ${OB_TIME}, CORR_QUALITY: ${CORR_QUALITY}, ID_ON_ORBIT: ${ID_ON_ORBIT}, SENSOR_ID: ${SENSOR_ID}, COLLECT_METHOD: ${COLLECT_METHOD}, NORAD_CAT_ID: ${NORAD_CAT_ID}, TASK_ID: ${TASK_ID}, TRANSACTION_ID: ${TRANSACTION_ID}, TRACK_ID: ${TRACK_ID}, OB_POSITION: ${OB_POSITION}, ORIG_OBJECT_ID: ${ORIG_OBJECT_ID}, ORIG_SENSOR_ID: ${ORIG_SENSOR_ID}, UCT: ${UCT}, AZIMUTH: ${AZIMUTH}, AZIMUTH_UNC: ${AZIMUTH_UNC}, AZIMUTH_BIAS: ${AZIMUTH_BIAS}, AZIMUTH_RATE: ${AZIMUTH_RATE}, ELEVATION: ${ELEVATION}, ELEVATION_UNC: ${ELEVATION_UNC}, ELEVATION_BIAS: ${ELEVATION_BIAS}, ELEVATION_RATE: ${ELEVATION_RATE}, RANGE: ${RANGE}, RANGE_UNC: ${RANGE_UNC}, RANGE_BIAS: ${RANGE_BIAS}, RANGE_RATE: ${RANGE_RATE}, RANGE_RATE_UNC: ${RANGE_RATE_UNC}, RA: ${RA}, RA_RATE: ${RA_RATE}, RA_UNC: ${RA_UNC}, RA_BIAS: ${RA_BIAS}, DECLINATION: ${DECLINATION}, DECLINATION_RATE: ${DECLINATION_RATE}, DECLINATION_UNC: ${DECLINATION_UNC}, DECLINATION_BIAS: ${DECLINATION_BIAS}, LOSX: ${LOSX}, LOSY: ${LOSY}, LOSZ: ${LOSZ}, LOS_UNC: ${LOS_UNC}, LOSXVEL: ${LOSXVEL}, LOSYVEL: ${LOSYVEL}, LOSZVEL: ${LOSZVEL}, SENLAT: ${SENLAT}, SENLON: ${SENLON}, SENALT: ${SENALT}, SENX: ${SENX}, SENY: ${SENY}, SENZ: ${SENZ}, FOV_COUNT: ${FOV_COUNT}, FOV_COUNT_UCTS: ${FOV_COUNT_UCTS}, EXP_DURATION: ${EXP_DURATION}, ZEROPTD: ${ZEROPTD}, NET_OBJ_SIG: ${NET_OBJ_SIG}, NET_OBJ_SIG_UNC: ${NET_OBJ_SIG_UNC}, MAG: ${MAG}, MAG_UNC: ${MAG_UNC}, MAG_NORM_RANGE: ${MAG_NORM_RANGE}, GEOLAT: ${GEOLAT}, GEOLON: ${GEOLON}, GEOALT: ${GEOALT}, GEORANGE: ${GEORANGE}, SKY_BKGRND: ${SKY_BKGRND}, PRIMARY_EXTINCTION: ${PRIMARY_EXTINCTION}, PRIMARY_EXTINCTION_UNC: ${PRIMARY_EXTINCTION_UNC}, SOLAR_PHASE_ANGLE: ${SOLAR_PHASE_ANGLE}, SOLAR_EQ_PHASE_ANGLE: ${SOLAR_EQ_PHASE_ANGLE}, SOLAR_DEC_ANGLE: ${SOLAR_DEC_ANGLE}, SHUTTER_DELAY: ${SHUTTER_DELAY}, TIMING_BIAS: ${TIMING_BIAS}, RAW_FILE_URI: ${RAW_FILE_URI}, INTENSITY: ${INTENSITY}, BG_INTENSITY: ${BG_INTENSITY}, DESCRIPTOR: ${DESCRIPTOR}, SOURCE: ${SOURCE}, ORIGIN: ${ORIGIN}, DATA_MODE: ${DATA_MODE}, CREATED_AT: ${CREATED_AT}, CREATED_BY: ${CREATED_BY}, REFERENCE_FRAME: ${REFERENCE_FRAME}, SEN_REFERENCE_FRAME: ${SEN_REFERENCE_FRAME}, UMBRA: ${UMBRA}, PENUMBRA: ${PENUMBRA}, ORIG_NETWORK: ${ORIG_NETWORK}, SOURCE_DL: ${SOURCE_DL}, TYPE: ${TYPE}, AZIMUTH_MEASURED: ${AZIMUTH_MEASURED}, ELEVATION_MEASURED: ${ELEVATION_MEASURED}, RANGE_MEASURED: ${RANGE_MEASURED}, RANGERATE_MEASURED: ${RANGERATE_MEASURED}, RA_MEASURED: ${RA_MEASURED}, DECLINATION_MEASURED: ${DECLINATION_MEASURED}}';
  }
}

class _EOOReader extends fb.TableReader<EOO> {
  const _EOOReader();

  @override
  EOO createObject(fb.BufferContext bc, int offset) => 
    EOO._(bc, offset);
}

class EOOBuilder {
  EOOBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(92);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addObTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCorrQuality(double? CORR_QUALITY) {
    fbBuilder.addFloat32(3, CORR_QUALITY);
    return fbBuilder.offset;
  }
  int addIdOnOrbitOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addSensorIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addCollectMethod(CollectMethod? COLLECT_METHOD) {
    fbBuilder.addInt8(6, COLLECT_METHOD?.value);
    return fbBuilder.offset;
  }
  int addNoradCatId(int? NORAD_CAT_ID) {
    fbBuilder.addInt32(7, NORAD_CAT_ID);
    return fbBuilder.offset;
  }
  int addTaskIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addTransactionIdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addTrackIdOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addObPosition(ObservationPosition? OB_POSITION) {
    fbBuilder.addInt8(11, OB_POSITION?.value);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addUct(bool? UCT) {
    fbBuilder.addBool(14, UCT);
    return fbBuilder.offset;
  }
  int addAzimuth(double? AZIMUTH) {
    fbBuilder.addFloat32(15, AZIMUTH);
    return fbBuilder.offset;
  }
  int addAzimuthUnc(double? AZIMUTH_UNC) {
    fbBuilder.addFloat32(16, AZIMUTH_UNC);
    return fbBuilder.offset;
  }
  int addAzimuthBias(double? AZIMUTH_BIAS) {
    fbBuilder.addFloat32(17, AZIMUTH_BIAS);
    return fbBuilder.offset;
  }
  int addAzimuthRate(double? AZIMUTH_RATE) {
    fbBuilder.addFloat32(18, AZIMUTH_RATE);
    return fbBuilder.offset;
  }
  int addElevation(double? ELEVATION) {
    fbBuilder.addFloat32(19, ELEVATION);
    return fbBuilder.offset;
  }
  int addElevationUnc(double? ELEVATION_UNC) {
    fbBuilder.addFloat32(20, ELEVATION_UNC);
    return fbBuilder.offset;
  }
  int addElevationBias(double? ELEVATION_BIAS) {
    fbBuilder.addFloat32(21, ELEVATION_BIAS);
    return fbBuilder.offset;
  }
  int addElevationRate(double? ELEVATION_RATE) {
    fbBuilder.addFloat32(22, ELEVATION_RATE);
    return fbBuilder.offset;
  }
  int addRange(double? RANGE) {
    fbBuilder.addFloat32(23, RANGE);
    return fbBuilder.offset;
  }
  int addRangeUnc(double? RANGE_UNC) {
    fbBuilder.addFloat32(24, RANGE_UNC);
    return fbBuilder.offset;
  }
  int addRangeBias(double? RANGE_BIAS) {
    fbBuilder.addFloat32(25, RANGE_BIAS);
    return fbBuilder.offset;
  }
  int addRangeRate(double? RANGE_RATE) {
    fbBuilder.addFloat32(26, RANGE_RATE);
    return fbBuilder.offset;
  }
  int addRangeRateUnc(double? RANGE_RATE_UNC) {
    fbBuilder.addFloat32(27, RANGE_RATE_UNC);
    return fbBuilder.offset;
  }
  int addRa(double? RA) {
    fbBuilder.addFloat32(28, RA);
    return fbBuilder.offset;
  }
  int addRaRate(double? RA_RATE) {
    fbBuilder.addFloat32(29, RA_RATE);
    return fbBuilder.offset;
  }
  int addRaUnc(double? RA_UNC) {
    fbBuilder.addFloat32(30, RA_UNC);
    return fbBuilder.offset;
  }
  int addRaBias(double? RA_BIAS) {
    fbBuilder.addFloat32(31, RA_BIAS);
    return fbBuilder.offset;
  }
  int addDeclination(double? DECLINATION) {
    fbBuilder.addFloat32(32, DECLINATION);
    return fbBuilder.offset;
  }
  int addDeclinationRate(double? DECLINATION_RATE) {
    fbBuilder.addFloat32(33, DECLINATION_RATE);
    return fbBuilder.offset;
  }
  int addDeclinationUnc(double? DECLINATION_UNC) {
    fbBuilder.addFloat32(34, DECLINATION_UNC);
    return fbBuilder.offset;
  }
  int addDeclinationBias(double? DECLINATION_BIAS) {
    fbBuilder.addFloat32(35, DECLINATION_BIAS);
    return fbBuilder.offset;
  }
  int addLosx(double? LOSX) {
    fbBuilder.addFloat32(36, LOSX);
    return fbBuilder.offset;
  }
  int addLosy(double? LOSY) {
    fbBuilder.addFloat32(37, LOSY);
    return fbBuilder.offset;
  }
  int addLosz(double? LOSZ) {
    fbBuilder.addFloat32(38, LOSZ);
    return fbBuilder.offset;
  }
  int addLosUnc(double? LOS_UNC) {
    fbBuilder.addFloat32(39, LOS_UNC);
    return fbBuilder.offset;
  }
  int addLosxvel(double? LOSXVEL) {
    fbBuilder.addFloat32(40, LOSXVEL);
    return fbBuilder.offset;
  }
  int addLosyvel(double? LOSYVEL) {
    fbBuilder.addFloat32(41, LOSYVEL);
    return fbBuilder.offset;
  }
  int addLoszvel(double? LOSZVEL) {
    fbBuilder.addFloat32(42, LOSZVEL);
    return fbBuilder.offset;
  }
  int addSenlat(double? SENLAT) {
    fbBuilder.addFloat32(43, SENLAT);
    return fbBuilder.offset;
  }
  int addSenlon(double? SENLON) {
    fbBuilder.addFloat32(44, SENLON);
    return fbBuilder.offset;
  }
  int addSenalt(double? SENALT) {
    fbBuilder.addFloat32(45, SENALT);
    return fbBuilder.offset;
  }
  int addSenx(double? SENX) {
    fbBuilder.addFloat32(46, SENX);
    return fbBuilder.offset;
  }
  int addSeny(double? SENY) {
    fbBuilder.addFloat32(47, SENY);
    return fbBuilder.offset;
  }
  int addSenz(double? SENZ) {
    fbBuilder.addFloat32(48, SENZ);
    return fbBuilder.offset;
  }
  int addFovCount(int? FOV_COUNT) {
    fbBuilder.addInt32(49, FOV_COUNT);
    return fbBuilder.offset;
  }
  int addFovCountUcts(int? FOV_COUNT_UCTS) {
    fbBuilder.addInt32(50, FOV_COUNT_UCTS);
    return fbBuilder.offset;
  }
  int addExpDuration(double? EXP_DURATION) {
    fbBuilder.addFloat32(51, EXP_DURATION);
    return fbBuilder.offset;
  }
  int addZeroptd(double? ZEROPTD) {
    fbBuilder.addFloat32(52, ZEROPTD);
    return fbBuilder.offset;
  }
  int addNetObjSig(double? NET_OBJ_SIG) {
    fbBuilder.addFloat32(53, NET_OBJ_SIG);
    return fbBuilder.offset;
  }
  int addNetObjSigUnc(double? NET_OBJ_SIG_UNC) {
    fbBuilder.addFloat32(54, NET_OBJ_SIG_UNC);
    return fbBuilder.offset;
  }
  int addMag(double? MAG) {
    fbBuilder.addFloat32(55, MAG);
    return fbBuilder.offset;
  }
  int addMagUnc(double? MAG_UNC) {
    fbBuilder.addFloat32(56, MAG_UNC);
    return fbBuilder.offset;
  }
  int addMagNormRange(double? MAG_NORM_RANGE) {
    fbBuilder.addFloat32(57, MAG_NORM_RANGE);
    return fbBuilder.offset;
  }
  int addGeolat(double? GEOLAT) {
    fbBuilder.addFloat32(58, GEOLAT);
    return fbBuilder.offset;
  }
  int addGeolon(double? GEOLON) {
    fbBuilder.addFloat32(59, GEOLON);
    return fbBuilder.offset;
  }
  int addGeoalt(double? GEOALT) {
    fbBuilder.addFloat32(60, GEOALT);
    return fbBuilder.offset;
  }
  int addGeorange(double? GEORANGE) {
    fbBuilder.addFloat32(61, GEORANGE);
    return fbBuilder.offset;
  }
  int addSkyBkgrnd(double? SKY_BKGRND) {
    fbBuilder.addFloat32(62, SKY_BKGRND);
    return fbBuilder.offset;
  }
  int addPrimaryExtinction(double? PRIMARY_EXTINCTION) {
    fbBuilder.addFloat32(63, PRIMARY_EXTINCTION);
    return fbBuilder.offset;
  }
  int addPrimaryExtinctionUnc(double? PRIMARY_EXTINCTION_UNC) {
    fbBuilder.addFloat32(64, PRIMARY_EXTINCTION_UNC);
    return fbBuilder.offset;
  }
  int addSolarPhaseAngle(double? SOLAR_PHASE_ANGLE) {
    fbBuilder.addFloat32(65, SOLAR_PHASE_ANGLE);
    return fbBuilder.offset;
  }
  int addSolarEqPhaseAngle(double? SOLAR_EQ_PHASE_ANGLE) {
    fbBuilder.addFloat32(66, SOLAR_EQ_PHASE_ANGLE);
    return fbBuilder.offset;
  }
  int addSolarDecAngle(double? SOLAR_DEC_ANGLE) {
    fbBuilder.addFloat32(67, SOLAR_DEC_ANGLE);
    return fbBuilder.offset;
  }
  int addShutterDelay(double? SHUTTER_DELAY) {
    fbBuilder.addFloat32(68, SHUTTER_DELAY);
    return fbBuilder.offset;
  }
  int addTimingBias(double? TIMING_BIAS) {
    fbBuilder.addFloat32(69, TIMING_BIAS);
    return fbBuilder.offset;
  }
  int addRawFileUriOffset(int? offset) {
    fbBuilder.addOffset(70, offset);
    return fbBuilder.offset;
  }
  int addIntensity(double? INTENSITY) {
    fbBuilder.addFloat32(71, INTENSITY);
    return fbBuilder.offset;
  }
  int addBgIntensity(double? BG_INTENSITY) {
    fbBuilder.addFloat32(72, BG_INTENSITY);
    return fbBuilder.offset;
  }
  int addDescriptorOffset(int? offset) {
    fbBuilder.addOffset(73, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(74, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(75, offset);
    return fbBuilder.offset;
  }
  int addDataMode(DataMode? DATA_MODE) {
    fbBuilder.addInt8(76, DATA_MODE?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(77, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(78, offset);
    return fbBuilder.offset;
  }
  int addReferenceFrame(RefFrame? REFERENCE_FRAME) {
    fbBuilder.addInt8(79, REFERENCE_FRAME?.value);
    return fbBuilder.offset;
  }
  int addSenReferenceFrame(RefFrame? SEN_REFERENCE_FRAME) {
    fbBuilder.addInt8(80, SEN_REFERENCE_FRAME?.value);
    return fbBuilder.offset;
  }
  int addUmbra(bool? UMBRA) {
    fbBuilder.addBool(81, UMBRA);
    return fbBuilder.offset;
  }
  int addPenumbra(bool? PENUMBRA) {
    fbBuilder.addBool(82, PENUMBRA);
    return fbBuilder.offset;
  }
  int addOrigNetworkOffset(int? offset) {
    fbBuilder.addOffset(83, offset);
    return fbBuilder.offset;
  }
  int addSourceDlOffset(int? offset) {
    fbBuilder.addOffset(84, offset);
    return fbBuilder.offset;
  }
  int addType(DeviceType? TYPE) {
    fbBuilder.addInt8(85, TYPE?.value);
    return fbBuilder.offset;
  }
  int addAzimuthMeasured(bool? AZIMUTH_MEASURED) {
    fbBuilder.addBool(86, AZIMUTH_MEASURED);
    return fbBuilder.offset;
  }
  int addElevationMeasured(bool? ELEVATION_MEASURED) {
    fbBuilder.addBool(87, ELEVATION_MEASURED);
    return fbBuilder.offset;
  }
  int addRangeMeasured(bool? RANGE_MEASURED) {
    fbBuilder.addBool(88, RANGE_MEASURED);
    return fbBuilder.offset;
  }
  int addRangerateMeasured(bool? RANGERATE_MEASURED) {
    fbBuilder.addBool(89, RANGERATE_MEASURED);
    return fbBuilder.offset;
  }
  int addRaMeasured(bool? RA_MEASURED) {
    fbBuilder.addBool(90, RA_MEASURED);
    return fbBuilder.offset;
  }
  int addDeclinationMeasured(bool? DECLINATION_MEASURED) {
    fbBuilder.addBool(91, DECLINATION_MEASURED);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EOOObjectBuilder extends fb.ObjectBuilder {
  final String? _ID;
  final String? _CLASSIFICATION;
  final String? _OB_TIME;
  final double? _CORR_QUALITY;
  final String? _ID_ON_ORBIT;
  final String? _SENSOR_ID;
  final CollectMethod? _COLLECT_METHOD;
  final int? _NORAD_CAT_ID;
  final String? _TASK_ID;
  final String? _TRANSACTION_ID;
  final String? _TRACK_ID;
  final ObservationPosition? _OB_POSITION;
  final String? _ORIG_OBJECT_ID;
  final String? _ORIG_SENSOR_ID;
  final bool? _UCT;
  final double? _AZIMUTH;
  final double? _AZIMUTH_UNC;
  final double? _AZIMUTH_BIAS;
  final double? _AZIMUTH_RATE;
  final double? _ELEVATION;
  final double? _ELEVATION_UNC;
  final double? _ELEVATION_BIAS;
  final double? _ELEVATION_RATE;
  final double? _RANGE;
  final double? _RANGE_UNC;
  final double? _RANGE_BIAS;
  final double? _RANGE_RATE;
  final double? _RANGE_RATE_UNC;
  final double? _RA;
  final double? _RA_RATE;
  final double? _RA_UNC;
  final double? _RA_BIAS;
  final double? _DECLINATION;
  final double? _DECLINATION_RATE;
  final double? _DECLINATION_UNC;
  final double? _DECLINATION_BIAS;
  final double? _LOSX;
  final double? _LOSY;
  final double? _LOSZ;
  final double? _LOS_UNC;
  final double? _LOSXVEL;
  final double? _LOSYVEL;
  final double? _LOSZVEL;
  final double? _SENLAT;
  final double? _SENLON;
  final double? _SENALT;
  final double? _SENX;
  final double? _SENY;
  final double? _SENZ;
  final int? _FOV_COUNT;
  final int? _FOV_COUNT_UCTS;
  final double? _EXP_DURATION;
  final double? _ZEROPTD;
  final double? _NET_OBJ_SIG;
  final double? _NET_OBJ_SIG_UNC;
  final double? _MAG;
  final double? _MAG_UNC;
  final double? _MAG_NORM_RANGE;
  final double? _GEOLAT;
  final double? _GEOLON;
  final double? _GEOALT;
  final double? _GEORANGE;
  final double? _SKY_BKGRND;
  final double? _PRIMARY_EXTINCTION;
  final double? _PRIMARY_EXTINCTION_UNC;
  final double? _SOLAR_PHASE_ANGLE;
  final double? _SOLAR_EQ_PHASE_ANGLE;
  final double? _SOLAR_DEC_ANGLE;
  final double? _SHUTTER_DELAY;
  final double? _TIMING_BIAS;
  final String? _RAW_FILE_URI;
  final double? _INTENSITY;
  final double? _BG_INTENSITY;
  final String? _DESCRIPTOR;
  final String? _SOURCE;
  final String? _ORIGIN;
  final DataMode? _DATA_MODE;
  final String? _CREATED_AT;
  final String? _CREATED_BY;
  final RefFrame? _REFERENCE_FRAME;
  final RefFrame? _SEN_REFERENCE_FRAME;
  final bool? _UMBRA;
  final bool? _PENUMBRA;
  final String? _ORIG_NETWORK;
  final String? _SOURCE_DL;
  final DeviceType? _TYPE;
  final bool? _AZIMUTH_MEASURED;
  final bool? _ELEVATION_MEASURED;
  final bool? _RANGE_MEASURED;
  final bool? _RANGERATE_MEASURED;
  final bool? _RA_MEASURED;
  final bool? _DECLINATION_MEASURED;

  EOOObjectBuilder({
    String? ID,
    String? CLASSIFICATION,
    String? OB_TIME,
    double? CORR_QUALITY,
    String? ID_ON_ORBIT,
    String? SENSOR_ID,
    CollectMethod? COLLECT_METHOD,
    int? NORAD_CAT_ID,
    String? TASK_ID,
    String? TRANSACTION_ID,
    String? TRACK_ID,
    ObservationPosition? OB_POSITION,
    String? ORIG_OBJECT_ID,
    String? ORIG_SENSOR_ID,
    bool? UCT,
    double? AZIMUTH,
    double? AZIMUTH_UNC,
    double? AZIMUTH_BIAS,
    double? AZIMUTH_RATE,
    double? ELEVATION,
    double? ELEVATION_UNC,
    double? ELEVATION_BIAS,
    double? ELEVATION_RATE,
    double? RANGE,
    double? RANGE_UNC,
    double? RANGE_BIAS,
    double? RANGE_RATE,
    double? RANGE_RATE_UNC,
    double? RA,
    double? RA_RATE,
    double? RA_UNC,
    double? RA_BIAS,
    double? DECLINATION,
    double? DECLINATION_RATE,
    double? DECLINATION_UNC,
    double? DECLINATION_BIAS,
    double? LOSX,
    double? LOSY,
    double? LOSZ,
    double? LOS_UNC,
    double? LOSXVEL,
    double? LOSYVEL,
    double? LOSZVEL,
    double? SENLAT,
    double? SENLON,
    double? SENALT,
    double? SENX,
    double? SENY,
    double? SENZ,
    int? FOV_COUNT,
    int? FOV_COUNT_UCTS,
    double? EXP_DURATION,
    double? ZEROPTD,
    double? NET_OBJ_SIG,
    double? NET_OBJ_SIG_UNC,
    double? MAG,
    double? MAG_UNC,
    double? MAG_NORM_RANGE,
    double? GEOLAT,
    double? GEOLON,
    double? GEOALT,
    double? GEORANGE,
    double? SKY_BKGRND,
    double? PRIMARY_EXTINCTION,
    double? PRIMARY_EXTINCTION_UNC,
    double? SOLAR_PHASE_ANGLE,
    double? SOLAR_EQ_PHASE_ANGLE,
    double? SOLAR_DEC_ANGLE,
    double? SHUTTER_DELAY,
    double? TIMING_BIAS,
    String? RAW_FILE_URI,
    double? INTENSITY,
    double? BG_INTENSITY,
    String? DESCRIPTOR,
    String? SOURCE,
    String? ORIGIN,
    DataMode? DATA_MODE,
    String? CREATED_AT,
    String? CREATED_BY,
    RefFrame? REFERENCE_FRAME,
    RefFrame? SEN_REFERENCE_FRAME,
    bool? UMBRA,
    bool? PENUMBRA,
    String? ORIG_NETWORK,
    String? SOURCE_DL,
    DeviceType? TYPE,
    bool? AZIMUTH_MEASURED,
    bool? ELEVATION_MEASURED,
    bool? RANGE_MEASURED,
    bool? RANGERATE_MEASURED,
    bool? RA_MEASURED,
    bool? DECLINATION_MEASURED,
  })
      : _ID = ID,
        _CLASSIFICATION = CLASSIFICATION,
        _OB_TIME = OB_TIME,
        _CORR_QUALITY = CORR_QUALITY,
        _ID_ON_ORBIT = ID_ON_ORBIT,
        _SENSOR_ID = SENSOR_ID,
        _COLLECT_METHOD = COLLECT_METHOD,
        _NORAD_CAT_ID = NORAD_CAT_ID,
        _TASK_ID = TASK_ID,
        _TRANSACTION_ID = TRANSACTION_ID,
        _TRACK_ID = TRACK_ID,
        _OB_POSITION = OB_POSITION,
        _ORIG_OBJECT_ID = ORIG_OBJECT_ID,
        _ORIG_SENSOR_ID = ORIG_SENSOR_ID,
        _UCT = UCT,
        _AZIMUTH = AZIMUTH,
        _AZIMUTH_UNC = AZIMUTH_UNC,
        _AZIMUTH_BIAS = AZIMUTH_BIAS,
        _AZIMUTH_RATE = AZIMUTH_RATE,
        _ELEVATION = ELEVATION,
        _ELEVATION_UNC = ELEVATION_UNC,
        _ELEVATION_BIAS = ELEVATION_BIAS,
        _ELEVATION_RATE = ELEVATION_RATE,
        _RANGE = RANGE,
        _RANGE_UNC = RANGE_UNC,
        _RANGE_BIAS = RANGE_BIAS,
        _RANGE_RATE = RANGE_RATE,
        _RANGE_RATE_UNC = RANGE_RATE_UNC,
        _RA = RA,
        _RA_RATE = RA_RATE,
        _RA_UNC = RA_UNC,
        _RA_BIAS = RA_BIAS,
        _DECLINATION = DECLINATION,
        _DECLINATION_RATE = DECLINATION_RATE,
        _DECLINATION_UNC = DECLINATION_UNC,
        _DECLINATION_BIAS = DECLINATION_BIAS,
        _LOSX = LOSX,
        _LOSY = LOSY,
        _LOSZ = LOSZ,
        _LOS_UNC = LOS_UNC,
        _LOSXVEL = LOSXVEL,
        _LOSYVEL = LOSYVEL,
        _LOSZVEL = LOSZVEL,
        _SENLAT = SENLAT,
        _SENLON = SENLON,
        _SENALT = SENALT,
        _SENX = SENX,
        _SENY = SENY,
        _SENZ = SENZ,
        _FOV_COUNT = FOV_COUNT,
        _FOV_COUNT_UCTS = FOV_COUNT_UCTS,
        _EXP_DURATION = EXP_DURATION,
        _ZEROPTD = ZEROPTD,
        _NET_OBJ_SIG = NET_OBJ_SIG,
        _NET_OBJ_SIG_UNC = NET_OBJ_SIG_UNC,
        _MAG = MAG,
        _MAG_UNC = MAG_UNC,
        _MAG_NORM_RANGE = MAG_NORM_RANGE,
        _GEOLAT = GEOLAT,
        _GEOLON = GEOLON,
        _GEOALT = GEOALT,
        _GEORANGE = GEORANGE,
        _SKY_BKGRND = SKY_BKGRND,
        _PRIMARY_EXTINCTION = PRIMARY_EXTINCTION,
        _PRIMARY_EXTINCTION_UNC = PRIMARY_EXTINCTION_UNC,
        _SOLAR_PHASE_ANGLE = SOLAR_PHASE_ANGLE,
        _SOLAR_EQ_PHASE_ANGLE = SOLAR_EQ_PHASE_ANGLE,
        _SOLAR_DEC_ANGLE = SOLAR_DEC_ANGLE,
        _SHUTTER_DELAY = SHUTTER_DELAY,
        _TIMING_BIAS = TIMING_BIAS,
        _RAW_FILE_URI = RAW_FILE_URI,
        _INTENSITY = INTENSITY,
        _BG_INTENSITY = BG_INTENSITY,
        _DESCRIPTOR = DESCRIPTOR,
        _SOURCE = SOURCE,
        _ORIGIN = ORIGIN,
        _DATA_MODE = DATA_MODE,
        _CREATED_AT = CREATED_AT,
        _CREATED_BY = CREATED_BY,
        _REFERENCE_FRAME = REFERENCE_FRAME,
        _SEN_REFERENCE_FRAME = SEN_REFERENCE_FRAME,
        _UMBRA = UMBRA,
        _PENUMBRA = PENUMBRA,
        _ORIG_NETWORK = ORIG_NETWORK,
        _SOURCE_DL = SOURCE_DL,
        _TYPE = TYPE,
        _AZIMUTH_MEASURED = AZIMUTH_MEASURED,
        _ELEVATION_MEASURED = ELEVATION_MEASURED,
        _RANGE_MEASURED = RANGE_MEASURED,
        _RANGERATE_MEASURED = RANGERATE_MEASURED,
        _RA_MEASURED = RA_MEASURED,
        _DECLINATION_MEASURED = DECLINATION_MEASURED;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? IDOffset = _ID == null ? null
        : fbBuilder.writeString(_ID!);
    final int? CLASSIFICATIONOffset = _CLASSIFICATION == null ? null
        : fbBuilder.writeString(_CLASSIFICATION!);
    final int? OB_TIMEOffset = _OB_TIME == null ? null
        : fbBuilder.writeString(_OB_TIME!);
    final int? ID_ON_ORBITOffset = _ID_ON_ORBIT == null ? null
        : fbBuilder.writeString(_ID_ON_ORBIT!);
    final int? SENSOR_IDOffset = _SENSOR_ID == null ? null
        : fbBuilder.writeString(_SENSOR_ID!);
    final int? TASK_IDOffset = _TASK_ID == null ? null
        : fbBuilder.writeString(_TASK_ID!);
    final int? TRANSACTION_IDOffset = _TRANSACTION_ID == null ? null
        : fbBuilder.writeString(_TRANSACTION_ID!);
    final int? TRACK_IDOffset = _TRACK_ID == null ? null
        : fbBuilder.writeString(_TRACK_ID!);
    final int? ORIG_OBJECT_IDOffset = _ORIG_OBJECT_ID == null ? null
        : fbBuilder.writeString(_ORIG_OBJECT_ID!);
    final int? ORIG_SENSOR_IDOffset = _ORIG_SENSOR_ID == null ? null
        : fbBuilder.writeString(_ORIG_SENSOR_ID!);
    final int? RAW_FILE_URIOffset = _RAW_FILE_URI == null ? null
        : fbBuilder.writeString(_RAW_FILE_URI!);
    final int? DESCRIPTOROffset = _DESCRIPTOR == null ? null
        : fbBuilder.writeString(_DESCRIPTOR!);
    final int? SOURCEOffset = _SOURCE == null ? null
        : fbBuilder.writeString(_SOURCE!);
    final int? ORIGINOffset = _ORIGIN == null ? null
        : fbBuilder.writeString(_ORIGIN!);
    final int? CREATED_ATOffset = _CREATED_AT == null ? null
        : fbBuilder.writeString(_CREATED_AT!);
    final int? CREATED_BYOffset = _CREATED_BY == null ? null
        : fbBuilder.writeString(_CREATED_BY!);
    final int? ORIG_NETWORKOffset = _ORIG_NETWORK == null ? null
        : fbBuilder.writeString(_ORIG_NETWORK!);
    final int? SOURCE_DLOffset = _SOURCE_DL == null ? null
        : fbBuilder.writeString(_SOURCE_DL!);
    fbBuilder.startTable(92);
    fbBuilder.addOffset(0, IDOffset);
    fbBuilder.addOffset(1, CLASSIFICATIONOffset);
    fbBuilder.addOffset(2, OB_TIMEOffset);
    fbBuilder.addFloat32(3, _CORR_QUALITY);
    fbBuilder.addOffset(4, ID_ON_ORBITOffset);
    fbBuilder.addOffset(5, SENSOR_IDOffset);
    fbBuilder.addInt8(6, _COLLECT_METHOD?.value);
    fbBuilder.addInt32(7, _NORAD_CAT_ID);
    fbBuilder.addOffset(8, TASK_IDOffset);
    fbBuilder.addOffset(9, TRANSACTION_IDOffset);
    fbBuilder.addOffset(10, TRACK_IDOffset);
    fbBuilder.addInt8(11, _OB_POSITION?.value);
    fbBuilder.addOffset(12, ORIG_OBJECT_IDOffset);
    fbBuilder.addOffset(13, ORIG_SENSOR_IDOffset);
    fbBuilder.addBool(14, _UCT);
    fbBuilder.addFloat32(15, _AZIMUTH);
    fbBuilder.addFloat32(16, _AZIMUTH_UNC);
    fbBuilder.addFloat32(17, _AZIMUTH_BIAS);
    fbBuilder.addFloat32(18, _AZIMUTH_RATE);
    fbBuilder.addFloat32(19, _ELEVATION);
    fbBuilder.addFloat32(20, _ELEVATION_UNC);
    fbBuilder.addFloat32(21, _ELEVATION_BIAS);
    fbBuilder.addFloat32(22, _ELEVATION_RATE);
    fbBuilder.addFloat32(23, _RANGE);
    fbBuilder.addFloat32(24, _RANGE_UNC);
    fbBuilder.addFloat32(25, _RANGE_BIAS);
    fbBuilder.addFloat32(26, _RANGE_RATE);
    fbBuilder.addFloat32(27, _RANGE_RATE_UNC);
    fbBuilder.addFloat32(28, _RA);
    fbBuilder.addFloat32(29, _RA_RATE);
    fbBuilder.addFloat32(30, _RA_UNC);
    fbBuilder.addFloat32(31, _RA_BIAS);
    fbBuilder.addFloat32(32, _DECLINATION);
    fbBuilder.addFloat32(33, _DECLINATION_RATE);
    fbBuilder.addFloat32(34, _DECLINATION_UNC);
    fbBuilder.addFloat32(35, _DECLINATION_BIAS);
    fbBuilder.addFloat32(36, _LOSX);
    fbBuilder.addFloat32(37, _LOSY);
    fbBuilder.addFloat32(38, _LOSZ);
    fbBuilder.addFloat32(39, _LOS_UNC);
    fbBuilder.addFloat32(40, _LOSXVEL);
    fbBuilder.addFloat32(41, _LOSYVEL);
    fbBuilder.addFloat32(42, _LOSZVEL);
    fbBuilder.addFloat32(43, _SENLAT);
    fbBuilder.addFloat32(44, _SENLON);
    fbBuilder.addFloat32(45, _SENALT);
    fbBuilder.addFloat32(46, _SENX);
    fbBuilder.addFloat32(47, _SENY);
    fbBuilder.addFloat32(48, _SENZ);
    fbBuilder.addInt32(49, _FOV_COUNT);
    fbBuilder.addInt32(50, _FOV_COUNT_UCTS);
    fbBuilder.addFloat32(51, _EXP_DURATION);
    fbBuilder.addFloat32(52, _ZEROPTD);
    fbBuilder.addFloat32(53, _NET_OBJ_SIG);
    fbBuilder.addFloat32(54, _NET_OBJ_SIG_UNC);
    fbBuilder.addFloat32(55, _MAG);
    fbBuilder.addFloat32(56, _MAG_UNC);
    fbBuilder.addFloat32(57, _MAG_NORM_RANGE);
    fbBuilder.addFloat32(58, _GEOLAT);
    fbBuilder.addFloat32(59, _GEOLON);
    fbBuilder.addFloat32(60, _GEOALT);
    fbBuilder.addFloat32(61, _GEORANGE);
    fbBuilder.addFloat32(62, _SKY_BKGRND);
    fbBuilder.addFloat32(63, _PRIMARY_EXTINCTION);
    fbBuilder.addFloat32(64, _PRIMARY_EXTINCTION_UNC);
    fbBuilder.addFloat32(65, _SOLAR_PHASE_ANGLE);
    fbBuilder.addFloat32(66, _SOLAR_EQ_PHASE_ANGLE);
    fbBuilder.addFloat32(67, _SOLAR_DEC_ANGLE);
    fbBuilder.addFloat32(68, _SHUTTER_DELAY);
    fbBuilder.addFloat32(69, _TIMING_BIAS);
    fbBuilder.addOffset(70, RAW_FILE_URIOffset);
    fbBuilder.addFloat32(71, _INTENSITY);
    fbBuilder.addFloat32(72, _BG_INTENSITY);
    fbBuilder.addOffset(73, DESCRIPTOROffset);
    fbBuilder.addOffset(74, SOURCEOffset);
    fbBuilder.addOffset(75, ORIGINOffset);
    fbBuilder.addInt8(76, _DATA_MODE?.value);
    fbBuilder.addOffset(77, CREATED_ATOffset);
    fbBuilder.addOffset(78, CREATED_BYOffset);
    fbBuilder.addInt8(79, _REFERENCE_FRAME?.value);
    fbBuilder.addInt8(80, _SEN_REFERENCE_FRAME?.value);
    fbBuilder.addBool(81, _UMBRA);
    fbBuilder.addBool(82, _PENUMBRA);
    fbBuilder.addOffset(83, ORIG_NETWORKOffset);
    fbBuilder.addOffset(84, SOURCE_DLOffset);
    fbBuilder.addInt8(85, _TYPE?.value);
    fbBuilder.addBool(86, _AZIMUTH_MEASURED);
    fbBuilder.addBool(87, _ELEVATION_MEASURED);
    fbBuilder.addBool(88, _RANGE_MEASURED);
    fbBuilder.addBool(89, _RANGERATE_MEASURED);
    fbBuilder.addBool(90, _RA_MEASURED);
    fbBuilder.addBool(91, _DECLINATION_MEASURED);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EOOCOLLECTION {
  EOOCOLLECTION._(this._bc, this._bcOffset);
  factory EOOCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EOOCOLLECTION> reader = _EOOCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<EOO>? get RECORDS => const fb.ListReader<EOO>(EOO.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'EOOCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _EOOCOLLECTIONReader extends fb.TableReader<EOOCOLLECTION> {
  const _EOOCOLLECTIONReader();

  @override
  EOOCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    EOOCOLLECTION._(bc, offset);
}

class EOOCOLLECTIONBuilder {
  EOOCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EOOCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<EOOObjectBuilder>? _RECORDS;

  EOOCOLLECTIONObjectBuilder({
    List<EOOObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
