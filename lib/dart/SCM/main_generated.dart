// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  Schema Standard Definition
class SCHEMA_STANDARD {
  SCHEMA_STANDARD._(this._bc, this._bcOffset);
  factory SCHEMA_STANDARD(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SCHEMA_STANDARD> reader = _SCHEMA_STANDARDReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier for the standard
  String? get key => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  IDL
  String? get idl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  List Of File Paths
  List<String>? get files => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'SCHEMA_STANDARD{key: ${key}, idl: ${idl}, files: ${files}}';
  }
}

class _SCHEMA_STANDARDReader extends fb.TableReader<SCHEMA_STANDARD> {
  const _SCHEMA_STANDARDReader();

  @override
  SCHEMA_STANDARD createObject(fb.BufferContext bc, int offset) => 
    SCHEMA_STANDARD._(bc, offset);
}

class SCHEMA_STANDARDBuilder {
  SCHEMA_STANDARDBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIdlOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFilesOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SCHEMA_STANDARDObjectBuilder extends fb.ObjectBuilder {
  final String? _key;
  final String? _idl;
  final List<String>? _files;

  SCHEMA_STANDARDObjectBuilder({
    String? key,
    String? idl,
    List<String>? files,
  })
      : _key = key,
        _idl = idl,
        _files = files;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? keyOffset = _key == null ? null
        : fbBuilder.writeString(_key!);
    final int? idlOffset = _idl == null ? null
        : fbBuilder.writeString(_idl!);
    final int? filesOffset = _files == null ? null
        : fbBuilder.writeList(_files!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, keyOffset);
    fbBuilder.addOffset(1, idlOffset);
    fbBuilder.addOffset(2, filesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Schema Manifest
class SCM {
  SCM._(this._bc, this._bcOffset);
  factory SCM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SCM> reader = _SCMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Version of Space Data Standards
  String? get version => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Standards Dictionary
  List<SCHEMA_STANDARD>? get RECORDS => const fb.ListReader<SCHEMA_STANDARD>(SCHEMA_STANDARD.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'SCM{version: ${version}, RECORDS: ${RECORDS}}';
  }
}

class _SCMReader extends fb.TableReader<SCM> {
  const _SCMReader();

  @override
  SCM createObject(fb.BufferContext bc, int offset) => 
    SCM._(bc, offset);
}

class SCMBuilder {
  SCMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addVersionOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SCMObjectBuilder extends fb.ObjectBuilder {
  final String? _version;
  final List<SCHEMA_STANDARDObjectBuilder>? _RECORDS;

  SCMObjectBuilder({
    String? version,
    List<SCHEMA_STANDARDObjectBuilder>? RECORDS,
  })
      : _version = version,
        _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? versionOffset = _version == null ? null
        : fbBuilder.writeString(_version!);
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, versionOffset);
    fbBuilder.addOffset(1, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Declaring the root type
class SCMCOLLECTION {
  SCMCOLLECTION._(this._bc, this._bcOffset);
  factory SCMCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SCMCOLLECTION> reader = _SCMCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<SCM>? get RECORDS => const fb.ListReader<SCM>(SCM.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'SCMCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _SCMCOLLECTIONReader extends fb.TableReader<SCMCOLLECTION> {
  const _SCMCOLLECTIONReader();

  @override
  SCMCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    SCMCOLLECTION._(bc, offset);
}

class SCMCOLLECTIONBuilder {
  SCMCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SCMCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<SCMObjectBuilder>? _RECORDS;

  SCMCOLLECTIONObjectBuilder({
    List<SCMObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
