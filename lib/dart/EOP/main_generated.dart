// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class DataType {
  final int value;
  const DataType._(this.value);

  factory DataType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum DataType');
    }
    return result;
  }

  static DataType? _createOrNull(int? value) => 
      value == null ? null : DataType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const DataType OBSERVED = DataType._(0);
  static const DataType PREDICTED = DataType._(1);
  static const Map<int, DataType> values = {
    0: OBSERVED,
    1: PREDICTED};

  static const fb.Reader<DataType> reader = _DataTypeReader();

  @override
  String toString() {
    return 'DataType{value: $value}';
  }
}

class _DataTypeReader extends fb.Reader<DataType> {
  const _DataTypeReader();

  @override
  int get size => 1;

  @override
  DataType read(fb.BufferContext bc, int offset) =>
      DataType.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Earth Orientation Parameters
class EOP {
  EOP._(this._bc, this._bcOffset);
  factory EOP(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EOP> reader = _EOPReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Date in ISO 8601 format
  String? get DATE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Modified Julian Date
  int get MJD => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  ///  x pole coordinate in arcseconds
  double get X => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  y pole coordinate in arcseconds
  double get Y => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  UT1-UTC in seconds
  double get UT1_MINUS_UTC => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Length of Day correction in seconds
  double get LOD => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Nutation correction in longitude (δΔψ) in arcseconds
  double get DPSI => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Nutation correction in obliquity (δΔε) in arcseconds
  double get DEPS => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Celestial pole offset in x (δX) in arcseconds
  double get DX => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Celestial pole offset in y (δY) in arcseconds
  double get DY => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Delta Atomic Time (TAI-UTC) in seconds
  int get DAT => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 24, 0);
  ///  Data type (O = Observed, P = Predicted)
  DataType get DATA_TYPE => DataType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 26, 0));

  @override
  String toString() {
    return 'EOP{DATE: ${DATE}, MJD: ${MJD}, X: ${X}, Y: ${Y}, UT1_MINUS_UTC: ${UT1_MINUS_UTC}, LOD: ${LOD}, DPSI: ${DPSI}, DEPS: ${DEPS}, DX: ${DX}, DY: ${DY}, DAT: ${DAT}, DATA_TYPE: ${DATA_TYPE}}';
  }
}

class _EOPReader extends fb.TableReader<EOP> {
  const _EOPReader();

  @override
  EOP createObject(fb.BufferContext bc, int offset) => 
    EOP._(bc, offset);
}

class EOPBuilder {
  EOPBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(12);
  }

  int addDateOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMjd(int? MJD) {
    fbBuilder.addUint32(1, MJD);
    return fbBuilder.offset;
  }
  int addX(double? X) {
    fbBuilder.addFloat32(2, X);
    return fbBuilder.offset;
  }
  int addY(double? Y) {
    fbBuilder.addFloat32(3, Y);
    return fbBuilder.offset;
  }
  int addUt1MinusUtc(double? UT1_MINUS_UTC) {
    fbBuilder.addFloat32(4, UT1_MINUS_UTC);
    return fbBuilder.offset;
  }
  int addLod(double? LOD) {
    fbBuilder.addFloat32(5, LOD);
    return fbBuilder.offset;
  }
  int addDpsi(double? DPSI) {
    fbBuilder.addFloat32(6, DPSI);
    return fbBuilder.offset;
  }
  int addDeps(double? DEPS) {
    fbBuilder.addFloat32(7, DEPS);
    return fbBuilder.offset;
  }
  int addDx(double? DX) {
    fbBuilder.addFloat32(8, DX);
    return fbBuilder.offset;
  }
  int addDy(double? DY) {
    fbBuilder.addFloat32(9, DY);
    return fbBuilder.offset;
  }
  int addDat(int? DAT) {
    fbBuilder.addUint16(10, DAT);
    return fbBuilder.offset;
  }
  int addDataType(DataType? DATA_TYPE) {
    fbBuilder.addInt8(11, DATA_TYPE?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EOPObjectBuilder extends fb.ObjectBuilder {
  final String? _DATE;
  final int? _MJD;
  final double? _X;
  final double? _Y;
  final double? _UT1_MINUS_UTC;
  final double? _LOD;
  final double? _DPSI;
  final double? _DEPS;
  final double? _DX;
  final double? _DY;
  final int? _DAT;
  final DataType? _DATA_TYPE;

  EOPObjectBuilder({
    String? DATE,
    int? MJD,
    double? X,
    double? Y,
    double? UT1_MINUS_UTC,
    double? LOD,
    double? DPSI,
    double? DEPS,
    double? DX,
    double? DY,
    int? DAT,
    DataType? DATA_TYPE,
  })
      : _DATE = DATE,
        _MJD = MJD,
        _X = X,
        _Y = Y,
        _UT1_MINUS_UTC = UT1_MINUS_UTC,
        _LOD = LOD,
        _DPSI = DPSI,
        _DEPS = DEPS,
        _DX = DX,
        _DY = DY,
        _DAT = DAT,
        _DATA_TYPE = DATA_TYPE;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? DATEOffset = _DATE == null ? null
        : fbBuilder.writeString(_DATE!);
    fbBuilder.startTable(12);
    fbBuilder.addOffset(0, DATEOffset);
    fbBuilder.addUint32(1, _MJD);
    fbBuilder.addFloat32(2, _X);
    fbBuilder.addFloat32(3, _Y);
    fbBuilder.addFloat32(4, _UT1_MINUS_UTC);
    fbBuilder.addFloat32(5, _LOD);
    fbBuilder.addFloat32(6, _DPSI);
    fbBuilder.addFloat32(7, _DEPS);
    fbBuilder.addFloat32(8, _DX);
    fbBuilder.addFloat32(9, _DY);
    fbBuilder.addUint16(10, _DAT);
    fbBuilder.addInt8(11, _DATA_TYPE?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Eopcollection {
  Eopcollection._(this._bc, this._bcOffset);
  factory Eopcollection(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Eopcollection> reader = _EopcollectionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<EOP>? get RECORDS => const fb.ListReader<EOP>(EOP.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'Eopcollection{RECORDS: ${RECORDS}}';
  }
}

class _EopcollectionReader extends fb.TableReader<Eopcollection> {
  const _EopcollectionReader();

  @override
  Eopcollection createObject(fb.BufferContext bc, int offset) => 
    Eopcollection._(bc, offset);
}

class EopcollectionBuilder {
  EopcollectionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EopcollectionObjectBuilder extends fb.ObjectBuilder {
  final List<EOPObjectBuilder>? _RECORDS;

  EopcollectionObjectBuilder({
    List<EOPObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
