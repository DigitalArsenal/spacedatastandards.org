// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


import './main_generated.dart';

class ReferenceFrame {
  final int value;
  const ReferenceFrame._(this.value);

  factory ReferenceFrame.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ReferenceFrame');
    }
    return result;
  }

  static ReferenceFrame? _createOrNull(int? value) => 
      value == null ? null : ReferenceFrame.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Earth Mean Equator and Equinox of J2000
  static const ReferenceFrame EME2000 = ReferenceFrame._(0);

  ///  Geocentric Celestial Reference Frame
  static const ReferenceFrame GCRF = ReferenceFrame._(1);

  ///  International Terrestrial Reference Frame
  static const ReferenceFrame ITRF = ReferenceFrame._(2);
  static const Map<int, ReferenceFrame> values = {
    0: EME2000,
    1: GCRF,
    2: ITRF};

  static const fb.Reader<ReferenceFrame> reader = _ReferenceFrameReader();

  @override
  String toString() {
    return 'ReferenceFrame{value: $value}';
  }
}

class _ReferenceFrameReader extends fb.Reader<ReferenceFrame> {
  const _ReferenceFrameReader();

  @override
  int get size => 1;

  @override
  ReferenceFrame read(fb.BufferContext bc, int offset) =>
      ReferenceFrame.fromValue(const fb.Int8Reader().read(bc, offset));
}

class ObjectCenteredReferenceFrame {
  final int value;
  const ObjectCenteredReferenceFrame._(this.value);

  factory ObjectCenteredReferenceFrame.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ObjectCenteredReferenceFrame');
    }
    return result;
  }

  static ObjectCenteredReferenceFrame? _createOrNull(int? value) => 
      value == null ? null : ObjectCenteredReferenceFrame.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Radial, Transverse, Normal
  static const ObjectCenteredReferenceFrame RTN = ObjectCenteredReferenceFrame._(0);

  ///  Transverse, Velocity, Normal
  static const ObjectCenteredReferenceFrame TVN = ObjectCenteredReferenceFrame._(1);
  static const Map<int, ObjectCenteredReferenceFrame> values = {
    0: RTN,
    1: TVN};

  static const fb.Reader<ObjectCenteredReferenceFrame> reader = _ObjectCenteredReferenceFrameReader();

  @override
  String toString() {
    return 'ObjectCenteredReferenceFrame{value: $value}';
  }
}

class _ObjectCenteredReferenceFrameReader extends fb.Reader<ObjectCenteredReferenceFrame> {
  const _ObjectCenteredReferenceFrameReader();

  @override
  int get size => 1;

  @override
  ObjectCenteredReferenceFrame read(fb.BufferContext bc, int offset) =>
      ObjectCenteredReferenceFrame.fromValue(const fb.Int8Reader().read(bc, offset));
}

class ScreeningVolumeShape {
  final int value;
  const ScreeningVolumeShape._(this.value);

  factory ScreeningVolumeShape.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ScreeningVolumeShape');
    }
    return result;
  }

  static ScreeningVolumeShape? _createOrNull(int? value) => 
      value == null ? null : ScreeningVolumeShape.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const ScreeningVolumeShape ELLIPSOID = ScreeningVolumeShape._(0);
  static const ScreeningVolumeShape BOX = ScreeningVolumeShape._(1);
  static const Map<int, ScreeningVolumeShape> values = {
    0: ELLIPSOID,
    1: BOX};

  static const fb.Reader<ScreeningVolumeShape> reader = _ScreeningVolumeShapeReader();

  @override
  String toString() {
    return 'ScreeningVolumeShape{value: $value}';
  }
}

class _ScreeningVolumeShapeReader extends fb.Reader<ScreeningVolumeShape> {
  const _ScreeningVolumeShapeReader();

  @override
  int get size => 1;

  @override
  ScreeningVolumeShape read(fb.BufferContext bc, int offset) =>
      ScreeningVolumeShape.fromValue(const fb.Int8Reader().read(bc, offset));
}

class ObjectNumber {
  final int value;
  const ObjectNumber._(this.value);

  factory ObjectNumber.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ObjectNumber');
    }
    return result;
  }

  static ObjectNumber? _createOrNull(int? value) => 
      value == null ? null : ObjectNumber.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const ObjectNumber OBJECT1 = ObjectNumber._(0);
  static const ObjectNumber OBJECT2 = ObjectNumber._(1);
  static const Map<int, ObjectNumber> values = {
    0: OBJECT1,
    1: OBJECT2};

  static const fb.Reader<ObjectNumber> reader = _ObjectNumberReader();

  @override
  String toString() {
    return 'ObjectNumber{value: $value}';
  }
}

class _ObjectNumberReader extends fb.Reader<ObjectNumber> {
  const _ObjectNumberReader();

  @override
  int get size => 1;

  @override
  ObjectNumber read(fb.BufferContext bc, int offset) =>
      ObjectNumber.fromValue(const fb.Int8Reader().read(bc, offset));
}

class ObjectType {
  final int value;
  const ObjectType._(this.value);

  factory ObjectType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ObjectType');
    }
    return result;
  }

  static ObjectType? _createOrNull(int? value) => 
      value == null ? null : ObjectType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  static const ObjectType PAYLOAD = ObjectType._(0);
  static const ObjectType ROCKET_BODY = ObjectType._(1);
  static const ObjectType DEBRIS = ObjectType._(2);
  static const ObjectType UNKNOWN = ObjectType._(3);
  static const ObjectType OTHER = ObjectType._(4);
  static const Map<int, ObjectType> values = {
    0: PAYLOAD,
    1: ROCKET_BODY,
    2: DEBRIS,
    3: UNKNOWN,
    4: OTHER};

  static const fb.Reader<ObjectType> reader = _ObjectTypeReader();

  @override
  String toString() {
    return 'ObjectType{value: $value}';
  }
}

class _ObjectTypeReader extends fb.Reader<ObjectType> {
  const _ObjectTypeReader();

  @override
  int get size => 1;

  @override
  ObjectType read(fb.BufferContext bc, int offset) =>
      ObjectType.fromValue(const fb.Int8Reader().read(bc, offset));
}

class CovarianceMethod {
  final int value;
  const CovarianceMethod._(this.value);

  factory CovarianceMethod.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum CovarianceMethod');
    }
    return result;
  }

  static CovarianceMethod? _createOrNull(int? value) => 
      value == null ? null : CovarianceMethod.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const CovarianceMethod CALCULATED = CovarianceMethod._(0);
  static const CovarianceMethod DEFAULT = CovarianceMethod._(1);
  static const Map<int, CovarianceMethod> values = {
    0: CALCULATED,
    1: DEFAULT};

  static const fb.Reader<CovarianceMethod> reader = _CovarianceMethodReader();

  @override
  String toString() {
    return 'CovarianceMethod{value: $value}';
  }
}

class _CovarianceMethodReader extends fb.Reader<CovarianceMethod> {
  const _CovarianceMethodReader();

  @override
  int get size => 1;

  @override
  CovarianceMethod read(fb.BufferContext bc, int offset) =>
      CovarianceMethod.fromValue(const fb.Int8Reader().read(bc, offset));
}

class ManeuverableType {
  final int value;
  const ManeuverableType._(this.value);

  factory ManeuverableType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ManeuverableType');
    }
    return result;
  }

  static ManeuverableType? _createOrNull(int? value) => 
      value == null ? null : ManeuverableType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  static const ManeuverableType YES = ManeuverableType._(0);
  static const ManeuverableType NO = ManeuverableType._(1);
  static const ManeuverableType NA = ManeuverableType._(2);
  static const Map<int, ManeuverableType> values = {
    0: YES,
    1: NO,
    2: NA};

  static const fb.Reader<ManeuverableType> reader = _ManeuverableTypeReader();

  @override
  String toString() {
    return 'ManeuverableType{value: $value}';
  }
}

class _ManeuverableTypeReader extends fb.Reader<ManeuverableType> {
  const _ManeuverableTypeReader();

  @override
  int get size => 1;

  @override
  ManeuverableType read(fb.BufferContext bc, int offset) =>
      ManeuverableType.fromValue(const fb.Int8Reader().read(bc, offset));
}

class Cdmobject {
  Cdmobject._(this._bc, this._bcOffset);
  factory Cdmobject(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Cdmobject> reader = _CdmobjectReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  A comment
  String? get COMMENT => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Object number
  ObjectNumber get OBJECT => ObjectNumber.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 6, 0));
  ///  Object designator
  String? get OBJECT_DESIGNATOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Catalog name
  String? get CATALOG_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Object name
  String? get OBJECT_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  International designator
  String? get INTERNATIONAL_DESIGNATOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Object type
  ObjectType get OBJECT_TYPE => ObjectType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 16, 0));
  ///  Operator contact position
  String? get OPERATOR_CONTACT_POSITION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Operator organization
  String? get OPERATOR_ORGANIZATION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Ephemeris name
  String? get EPHEMERIS_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Covariance method
  CovarianceMethod get COVARIANCE_METHOD => CovarianceMethod.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 24, 0));
  ///  Maneuverable type
  ManeuverableType get MANEUVERABLE => ManeuverableType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 26, 0));
  ///  Orbit center
  String? get ORBIT_CENTER => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Reference frame
  ReferenceFrame get REF_FRAME => ReferenceFrame.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 30, 0));
  ///  Gravity model
  String? get GRAVITY_MODEL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Atmospheric model
  String? get ATMOSPHERIC_MODEL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  N-body perturbations
  String? get N_BODY_PERTURBATIONS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Solar radiation pressure
  bool get SOLAR_RAD_PRESSURE => const fb.BoolReader().vTableGet(_bc, _bcOffset, 38, false);
  ///  Earth tides
  bool get EARTH_TIDES => const fb.BoolReader().vTableGet(_bc, _bcOffset, 40, false);
  ///  Intrack thrust
  bool get INTRACK_THRUST => const fb.BoolReader().vTableGet(_bc, _bcOffset, 42, false);
  ///  Time of last observation start
  String? get TIME_LASTOB_START => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Time of last observation end
  String? get TIME_LASTOB_END => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Recommended observation data span
  double get RECOMMENDED_OD_SPAN => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  Actual observation data span
  double get ACTUAL_OD_SPAN => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  Number of observations available
  int get OBS_AVAILABLE => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 52, 0);
  ///  Number of observations used
  int get OBS_USED => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 54, 0);
  ///  Number of tracks available
  int get TRACKS_AVAILABLE => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  ///  Number of tracks used
  int get TRACKS_USED => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 58, 0);
  ///  Residuals accepted
  double get RESIDUALS_ACCEPTED => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Weighted root mean square
  double get WEIGHTED_RMS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  Area of the object
  double get AREA_PC => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Area of the object drag
  double get AREA_DRG => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Area of the object solar radiation pressure
  double get AREA_SRP => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Mass of the object
  double get MASS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  ///  Object's area-to-mass ratio
  double get CR_AREA_OVER_MASS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  Object's thrust acceleration
  double get THRUST_ACCELERATION => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  Object's solar flux
  double get SEDR => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  X-coordinate of the object's position in RTN coordinates
  double get X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  Y-coordinate of the object's position in RTN
  double get Y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  Z-coordinate of the object's position in RTN
  double get Z => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  X-coordinate of the object's position in RTN coordinates
  double get X_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Y-coordinate of the object's position in RTN
  double get Y_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  Z-coordinate of the object's position in RTN
  double get Z_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  Covariance Matrix component
  double get CR_R => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  Covariance Matrix component
  double get CT_R => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  Covariance Matrix component
  double get CT_T => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 94, 0.0);
  ///  Covariance Matrix component
  double get CN_R => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 96, 0.0);
  ///  Covariance Matrix component
  double get CN_T => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  Covariance Matrix component
  double get CN_N => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 100, 0.0);
  ///  Covariance Matrix component
  double get CRDOT_R => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 102, 0.0);
  ///  Covariance Matrix component
  double get CRDOT_T => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 104, 0.0);
  ///  Covariance Matrix component
  double get CRDOT_N => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 106, 0.0);
  ///  Covariance Matrix component
  double get CRDOT_RDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 108, 0.0);
  ///  Covariance Matrix component
  double get CTDOT_R => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 110, 0.0);
  ///  Covariance Matrix component
  double get CTDOT_T => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 112, 0.0);
  ///  Covariance Matrix component
  double get CTDOT_N => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 114, 0.0);
  ///  Covariance Matrix component
  double get CTDOT_RDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 116, 0.0);
  ///  Covariance Matrix component
  double get CTDOT_TDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 118, 0.0);
  ///  Covariance Matrix component
  double get CNDOT_R => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 120, 0.0);
  ///  Covariance Matrix component
  double get CNDOT_T => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 122, 0.0);
  ///  Covariance Matrix component
  double get CNDOT_N => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 124, 0.0);
  ///  Covariance Matrix component
  double get CNDOT_RDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 126, 0.0);
  ///  Covariance Matrix component
  double get CNDOT_TDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 128, 0.0);
  ///  Covariance Matrix component
  double get CNDOT_NDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 130, 0.0);
  ///  Covariance Matrix component
  double get CDRG_R => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 132, 0.0);
  ///  Covariance Matrix component
  double get CDRG_T => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 134, 0.0);
  ///  Covariance Matrix component
  double get CDRG_N => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 136, 0.0);
  ///  Covariance Matrix component
  double get CDRG_RDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 138, 0.0);
  ///  Covariance Matrix component
  double get CDRG_TDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 140, 0.0);
  ///  Covariance Matrix component
  double get CDRG_NDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 142, 0.0);
  ///  Covariance Matrix component
  double get CDRG_DRG => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 144, 0.0);
  ///  Covariance Matrix component
  double get CSRP_R => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 146, 0.0);
  ///  Covariance Matrix component
  double get CSRP_T => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 148, 0.0);
  ///  Covariance Matrix component
  double get CSRP_N => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 150, 0.0);
  ///  Covariance Matrix component
  double get CSRP_RDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 152, 0.0);
  ///  Covariance Matrix component
  double get CSRP_TDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 154, 0.0);
  ///  Covariance Matrix component
  double get CSRP_NDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 156, 0.0);
  ///  Covariance Matrix component
  double get CSRP_DRG => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 158, 0.0);
  ///  Covariance Matrix component
  double get CSRP_SRP => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 160, 0.0);
  ///  Covariance Matrix component
  double get CTHR_R => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 162, 0.0);
  ///  Covariance Matrix component
  double get CTHR_T => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 164, 0.0);
  ///  Covariance Matrix component
  double get CTHR_N => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 166, 0.0);
  ///  Covariance Matrix component
  double get CTHR_RDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 168, 0.0);
  ///  Covariance Matrix component
  double get CTHR_TDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 170, 0.0);
  ///  Covariance Matrix component
  double get CTHR_NDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 172, 0.0);
  ///  Covariance Matrix component
  double get CTHR_DRG => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 174, 0.0);
  ///  Covariance Matrix component
  double get CTHR_SRP => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 176, 0.0);
  ///  Covariance Matrix component
  double get CTHR_THR => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 178, 0.0);

  @override
  String toString() {
    return 'Cdmobject{COMMENT: ${COMMENT}, OBJECT: ${OBJECT}, OBJECT_DESIGNATOR: ${OBJECT_DESIGNATOR}, CATALOG_NAME: ${CATALOG_NAME}, OBJECT_NAME: ${OBJECT_NAME}, INTERNATIONAL_DESIGNATOR: ${INTERNATIONAL_DESIGNATOR}, OBJECT_TYPE: ${OBJECT_TYPE}, OPERATOR_CONTACT_POSITION: ${OPERATOR_CONTACT_POSITION}, OPERATOR_ORGANIZATION: ${OPERATOR_ORGANIZATION}, EPHEMERIS_NAME: ${EPHEMERIS_NAME}, COVARIANCE_METHOD: ${COVARIANCE_METHOD}, MANEUVERABLE: ${MANEUVERABLE}, ORBIT_CENTER: ${ORBIT_CENTER}, REF_FRAME: ${REF_FRAME}, GRAVITY_MODEL: ${GRAVITY_MODEL}, ATMOSPHERIC_MODEL: ${ATMOSPHERIC_MODEL}, N_BODY_PERTURBATIONS: ${N_BODY_PERTURBATIONS}, SOLAR_RAD_PRESSURE: ${SOLAR_RAD_PRESSURE}, EARTH_TIDES: ${EARTH_TIDES}, INTRACK_THRUST: ${INTRACK_THRUST}, TIME_LASTOB_START: ${TIME_LASTOB_START}, TIME_LASTOB_END: ${TIME_LASTOB_END}, RECOMMENDED_OD_SPAN: ${RECOMMENDED_OD_SPAN}, ACTUAL_OD_SPAN: ${ACTUAL_OD_SPAN}, OBS_AVAILABLE: ${OBS_AVAILABLE}, OBS_USED: ${OBS_USED}, TRACKS_AVAILABLE: ${TRACKS_AVAILABLE}, TRACKS_USED: ${TRACKS_USED}, RESIDUALS_ACCEPTED: ${RESIDUALS_ACCEPTED}, WEIGHTED_RMS: ${WEIGHTED_RMS}, AREA_PC: ${AREA_PC}, AREA_DRG: ${AREA_DRG}, AREA_SRP: ${AREA_SRP}, MASS: ${MASS}, CR_AREA_OVER_MASS: ${CR_AREA_OVER_MASS}, THRUST_ACCELERATION: ${THRUST_ACCELERATION}, SEDR: ${SEDR}, X: ${X}, Y: ${Y}, Z: ${Z}, X_DOT: ${X_DOT}, Y_DOT: ${Y_DOT}, Z_DOT: ${Z_DOT}, CR_R: ${CR_R}, CT_R: ${CT_R}, CT_T: ${CT_T}, CN_R: ${CN_R}, CN_T: ${CN_T}, CN_N: ${CN_N}, CRDOT_R: ${CRDOT_R}, CRDOT_T: ${CRDOT_T}, CRDOT_N: ${CRDOT_N}, CRDOT_RDOT: ${CRDOT_RDOT}, CTDOT_R: ${CTDOT_R}, CTDOT_T: ${CTDOT_T}, CTDOT_N: ${CTDOT_N}, CTDOT_RDOT: ${CTDOT_RDOT}, CTDOT_TDOT: ${CTDOT_TDOT}, CNDOT_R: ${CNDOT_R}, CNDOT_T: ${CNDOT_T}, CNDOT_N: ${CNDOT_N}, CNDOT_RDOT: ${CNDOT_RDOT}, CNDOT_TDOT: ${CNDOT_TDOT}, CNDOT_NDOT: ${CNDOT_NDOT}, CDRG_R: ${CDRG_R}, CDRG_T: ${CDRG_T}, CDRG_N: ${CDRG_N}, CDRG_RDOT: ${CDRG_RDOT}, CDRG_TDOT: ${CDRG_TDOT}, CDRG_NDOT: ${CDRG_NDOT}, CDRG_DRG: ${CDRG_DRG}, CSRP_R: ${CSRP_R}, CSRP_T: ${CSRP_T}, CSRP_N: ${CSRP_N}, CSRP_RDOT: ${CSRP_RDOT}, CSRP_TDOT: ${CSRP_TDOT}, CSRP_NDOT: ${CSRP_NDOT}, CSRP_DRG: ${CSRP_DRG}, CSRP_SRP: ${CSRP_SRP}, CTHR_R: ${CTHR_R}, CTHR_T: ${CTHR_T}, CTHR_N: ${CTHR_N}, CTHR_RDOT: ${CTHR_RDOT}, CTHR_TDOT: ${CTHR_TDOT}, CTHR_NDOT: ${CTHR_NDOT}, CTHR_DRG: ${CTHR_DRG}, CTHR_SRP: ${CTHR_SRP}, CTHR_THR: ${CTHR_THR}}';
  }
}

class _CdmobjectReader extends fb.TableReader<Cdmobject> {
  const _CdmobjectReader();

  @override
  Cdmobject createObject(fb.BufferContext bc, int offset) => 
    Cdmobject._(bc, offset);
}

class CdmobjectBuilder {
  CdmobjectBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(88);
  }

  int addCommentOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addObject(ObjectNumber? OBJECT) {
    fbBuilder.addInt8(1, OBJECT?.value);
    return fbBuilder.offset;
  }
  int addObjectDesignatorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCatalogNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addObjectNameOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addInternationalDesignatorOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addObjectType(ObjectType? OBJECT_TYPE) {
    fbBuilder.addInt8(6, OBJECT_TYPE?.value);
    return fbBuilder.offset;
  }
  int addOperatorContactPositionOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOperatorOrganizationOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addEphemerisNameOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addCovarianceMethod(CovarianceMethod? COVARIANCE_METHOD) {
    fbBuilder.addInt8(10, COVARIANCE_METHOD?.value);
    return fbBuilder.offset;
  }
  int addManeuverable(ManeuverableType? MANEUVERABLE) {
    fbBuilder.addInt8(11, MANEUVERABLE?.value);
    return fbBuilder.offset;
  }
  int addOrbitCenterOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addRefFrame(ReferenceFrame? REF_FRAME) {
    fbBuilder.addInt8(13, REF_FRAME?.value);
    return fbBuilder.offset;
  }
  int addGravityModelOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addAtmosphericModelOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addNBodyPerturbationsOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addSolarRadPressure(bool? SOLAR_RAD_PRESSURE) {
    fbBuilder.addBool(17, SOLAR_RAD_PRESSURE);
    return fbBuilder.offset;
  }
  int addEarthTides(bool? EARTH_TIDES) {
    fbBuilder.addBool(18, EARTH_TIDES);
    return fbBuilder.offset;
  }
  int addIntrackThrust(bool? INTRACK_THRUST) {
    fbBuilder.addBool(19, INTRACK_THRUST);
    return fbBuilder.offset;
  }
  int addTimeLastobStartOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addTimeLastobEndOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addRecommendedOdSpan(double? RECOMMENDED_OD_SPAN) {
    fbBuilder.addFloat64(22, RECOMMENDED_OD_SPAN);
    return fbBuilder.offset;
  }
  int addActualOdSpan(double? ACTUAL_OD_SPAN) {
    fbBuilder.addFloat64(23, ACTUAL_OD_SPAN);
    return fbBuilder.offset;
  }
  int addObsAvailable(int? OBS_AVAILABLE) {
    fbBuilder.addUint32(24, OBS_AVAILABLE);
    return fbBuilder.offset;
  }
  int addObsUsed(int? OBS_USED) {
    fbBuilder.addUint32(25, OBS_USED);
    return fbBuilder.offset;
  }
  int addTracksAvailable(int? TRACKS_AVAILABLE) {
    fbBuilder.addUint32(26, TRACKS_AVAILABLE);
    return fbBuilder.offset;
  }
  int addTracksUsed(int? TRACKS_USED) {
    fbBuilder.addUint32(27, TRACKS_USED);
    return fbBuilder.offset;
  }
  int addResidualsAccepted(double? RESIDUALS_ACCEPTED) {
    fbBuilder.addFloat64(28, RESIDUALS_ACCEPTED);
    return fbBuilder.offset;
  }
  int addWeightedRms(double? WEIGHTED_RMS) {
    fbBuilder.addFloat64(29, WEIGHTED_RMS);
    return fbBuilder.offset;
  }
  int addAreaPc(double? AREA_PC) {
    fbBuilder.addFloat64(30, AREA_PC);
    return fbBuilder.offset;
  }
  int addAreaDrg(double? AREA_DRG) {
    fbBuilder.addFloat64(31, AREA_DRG);
    return fbBuilder.offset;
  }
  int addAreaSrp(double? AREA_SRP) {
    fbBuilder.addFloat64(32, AREA_SRP);
    return fbBuilder.offset;
  }
  int addMass(double? MASS) {
    fbBuilder.addFloat64(33, MASS);
    return fbBuilder.offset;
  }
  int addCrAreaOverMass(double? CR_AREA_OVER_MASS) {
    fbBuilder.addFloat64(34, CR_AREA_OVER_MASS);
    return fbBuilder.offset;
  }
  int addThrustAcceleration(double? THRUST_ACCELERATION) {
    fbBuilder.addFloat64(35, THRUST_ACCELERATION);
    return fbBuilder.offset;
  }
  int addSedr(double? SEDR) {
    fbBuilder.addFloat64(36, SEDR);
    return fbBuilder.offset;
  }
  int addX(double? X) {
    fbBuilder.addFloat64(37, X);
    return fbBuilder.offset;
  }
  int addY(double? Y) {
    fbBuilder.addFloat64(38, Y);
    return fbBuilder.offset;
  }
  int addZ(double? Z) {
    fbBuilder.addFloat64(39, Z);
    return fbBuilder.offset;
  }
  int addXDot(double? X_DOT) {
    fbBuilder.addFloat64(40, X_DOT);
    return fbBuilder.offset;
  }
  int addYDot(double? Y_DOT) {
    fbBuilder.addFloat64(41, Y_DOT);
    return fbBuilder.offset;
  }
  int addZDot(double? Z_DOT) {
    fbBuilder.addFloat64(42, Z_DOT);
    return fbBuilder.offset;
  }
  int addCrR(double? CR_R) {
    fbBuilder.addFloat64(43, CR_R);
    return fbBuilder.offset;
  }
  int addCtR(double? CT_R) {
    fbBuilder.addFloat64(44, CT_R);
    return fbBuilder.offset;
  }
  int addCtT(double? CT_T) {
    fbBuilder.addFloat64(45, CT_T);
    return fbBuilder.offset;
  }
  int addCnR(double? CN_R) {
    fbBuilder.addFloat64(46, CN_R);
    return fbBuilder.offset;
  }
  int addCnT(double? CN_T) {
    fbBuilder.addFloat64(47, CN_T);
    return fbBuilder.offset;
  }
  int addCnN(double? CN_N) {
    fbBuilder.addFloat64(48, CN_N);
    return fbBuilder.offset;
  }
  int addCrdotR(double? CRDOT_R) {
    fbBuilder.addFloat64(49, CRDOT_R);
    return fbBuilder.offset;
  }
  int addCrdotT(double? CRDOT_T) {
    fbBuilder.addFloat64(50, CRDOT_T);
    return fbBuilder.offset;
  }
  int addCrdotN(double? CRDOT_N) {
    fbBuilder.addFloat64(51, CRDOT_N);
    return fbBuilder.offset;
  }
  int addCrdotRdot(double? CRDOT_RDOT) {
    fbBuilder.addFloat64(52, CRDOT_RDOT);
    return fbBuilder.offset;
  }
  int addCtdotR(double? CTDOT_R) {
    fbBuilder.addFloat64(53, CTDOT_R);
    return fbBuilder.offset;
  }
  int addCtdotT(double? CTDOT_T) {
    fbBuilder.addFloat64(54, CTDOT_T);
    return fbBuilder.offset;
  }
  int addCtdotN(double? CTDOT_N) {
    fbBuilder.addFloat64(55, CTDOT_N);
    return fbBuilder.offset;
  }
  int addCtdotRdot(double? CTDOT_RDOT) {
    fbBuilder.addFloat64(56, CTDOT_RDOT);
    return fbBuilder.offset;
  }
  int addCtdotTdot(double? CTDOT_TDOT) {
    fbBuilder.addFloat64(57, CTDOT_TDOT);
    return fbBuilder.offset;
  }
  int addCndotR(double? CNDOT_R) {
    fbBuilder.addFloat64(58, CNDOT_R);
    return fbBuilder.offset;
  }
  int addCndotT(double? CNDOT_T) {
    fbBuilder.addFloat64(59, CNDOT_T);
    return fbBuilder.offset;
  }
  int addCndotN(double? CNDOT_N) {
    fbBuilder.addFloat64(60, CNDOT_N);
    return fbBuilder.offset;
  }
  int addCndotRdot(double? CNDOT_RDOT) {
    fbBuilder.addFloat64(61, CNDOT_RDOT);
    return fbBuilder.offset;
  }
  int addCndotTdot(double? CNDOT_TDOT) {
    fbBuilder.addFloat64(62, CNDOT_TDOT);
    return fbBuilder.offset;
  }
  int addCndotNdot(double? CNDOT_NDOT) {
    fbBuilder.addFloat64(63, CNDOT_NDOT);
    return fbBuilder.offset;
  }
  int addCdrgR(double? CDRG_R) {
    fbBuilder.addFloat64(64, CDRG_R);
    return fbBuilder.offset;
  }
  int addCdrgT(double? CDRG_T) {
    fbBuilder.addFloat64(65, CDRG_T);
    return fbBuilder.offset;
  }
  int addCdrgN(double? CDRG_N) {
    fbBuilder.addFloat64(66, CDRG_N);
    return fbBuilder.offset;
  }
  int addCdrgRdot(double? CDRG_RDOT) {
    fbBuilder.addFloat64(67, CDRG_RDOT);
    return fbBuilder.offset;
  }
  int addCdrgTdot(double? CDRG_TDOT) {
    fbBuilder.addFloat64(68, CDRG_TDOT);
    return fbBuilder.offset;
  }
  int addCdrgNdot(double? CDRG_NDOT) {
    fbBuilder.addFloat64(69, CDRG_NDOT);
    return fbBuilder.offset;
  }
  int addCdrgDrg(double? CDRG_DRG) {
    fbBuilder.addFloat64(70, CDRG_DRG);
    return fbBuilder.offset;
  }
  int addCsrpR(double? CSRP_R) {
    fbBuilder.addFloat64(71, CSRP_R);
    return fbBuilder.offset;
  }
  int addCsrpT(double? CSRP_T) {
    fbBuilder.addFloat64(72, CSRP_T);
    return fbBuilder.offset;
  }
  int addCsrpN(double? CSRP_N) {
    fbBuilder.addFloat64(73, CSRP_N);
    return fbBuilder.offset;
  }
  int addCsrpRdot(double? CSRP_RDOT) {
    fbBuilder.addFloat64(74, CSRP_RDOT);
    return fbBuilder.offset;
  }
  int addCsrpTdot(double? CSRP_TDOT) {
    fbBuilder.addFloat64(75, CSRP_TDOT);
    return fbBuilder.offset;
  }
  int addCsrpNdot(double? CSRP_NDOT) {
    fbBuilder.addFloat64(76, CSRP_NDOT);
    return fbBuilder.offset;
  }
  int addCsrpDrg(double? CSRP_DRG) {
    fbBuilder.addFloat64(77, CSRP_DRG);
    return fbBuilder.offset;
  }
  int addCsrpSrp(double? CSRP_SRP) {
    fbBuilder.addFloat64(78, CSRP_SRP);
    return fbBuilder.offset;
  }
  int addCthrR(double? CTHR_R) {
    fbBuilder.addFloat64(79, CTHR_R);
    return fbBuilder.offset;
  }
  int addCthrT(double? CTHR_T) {
    fbBuilder.addFloat64(80, CTHR_T);
    return fbBuilder.offset;
  }
  int addCthrN(double? CTHR_N) {
    fbBuilder.addFloat64(81, CTHR_N);
    return fbBuilder.offset;
  }
  int addCthrRdot(double? CTHR_RDOT) {
    fbBuilder.addFloat64(82, CTHR_RDOT);
    return fbBuilder.offset;
  }
  int addCthrTdot(double? CTHR_TDOT) {
    fbBuilder.addFloat64(83, CTHR_TDOT);
    return fbBuilder.offset;
  }
  int addCthrNdot(double? CTHR_NDOT) {
    fbBuilder.addFloat64(84, CTHR_NDOT);
    return fbBuilder.offset;
  }
  int addCthrDrg(double? CTHR_DRG) {
    fbBuilder.addFloat64(85, CTHR_DRG);
    return fbBuilder.offset;
  }
  int addCthrSrp(double? CTHR_SRP) {
    fbBuilder.addFloat64(86, CTHR_SRP);
    return fbBuilder.offset;
  }
  int addCthrThr(double? CTHR_THR) {
    fbBuilder.addFloat64(87, CTHR_THR);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CdmobjectObjectBuilder extends fb.ObjectBuilder {
  final String? _COMMENT;
  final ObjectNumber? _OBJECT;
  final String? _OBJECT_DESIGNATOR;
  final String? _CATALOG_NAME;
  final String? _OBJECT_NAME;
  final String? _INTERNATIONAL_DESIGNATOR;
  final ObjectType? _OBJECT_TYPE;
  final String? _OPERATOR_CONTACT_POSITION;
  final String? _OPERATOR_ORGANIZATION;
  final String? _EPHEMERIS_NAME;
  final CovarianceMethod? _COVARIANCE_METHOD;
  final ManeuverableType? _MANEUVERABLE;
  final String? _ORBIT_CENTER;
  final ReferenceFrame? _REF_FRAME;
  final String? _GRAVITY_MODEL;
  final String? _ATMOSPHERIC_MODEL;
  final String? _N_BODY_PERTURBATIONS;
  final bool? _SOLAR_RAD_PRESSURE;
  final bool? _EARTH_TIDES;
  final bool? _INTRACK_THRUST;
  final String? _TIME_LASTOB_START;
  final String? _TIME_LASTOB_END;
  final double? _RECOMMENDED_OD_SPAN;
  final double? _ACTUAL_OD_SPAN;
  final int? _OBS_AVAILABLE;
  final int? _OBS_USED;
  final int? _TRACKS_AVAILABLE;
  final int? _TRACKS_USED;
  final double? _RESIDUALS_ACCEPTED;
  final double? _WEIGHTED_RMS;
  final double? _AREA_PC;
  final double? _AREA_DRG;
  final double? _AREA_SRP;
  final double? _MASS;
  final double? _CR_AREA_OVER_MASS;
  final double? _THRUST_ACCELERATION;
  final double? _SEDR;
  final double? _X;
  final double? _Y;
  final double? _Z;
  final double? _X_DOT;
  final double? _Y_DOT;
  final double? _Z_DOT;
  final double? _CR_R;
  final double? _CT_R;
  final double? _CT_T;
  final double? _CN_R;
  final double? _CN_T;
  final double? _CN_N;
  final double? _CRDOT_R;
  final double? _CRDOT_T;
  final double? _CRDOT_N;
  final double? _CRDOT_RDOT;
  final double? _CTDOT_R;
  final double? _CTDOT_T;
  final double? _CTDOT_N;
  final double? _CTDOT_RDOT;
  final double? _CTDOT_TDOT;
  final double? _CNDOT_R;
  final double? _CNDOT_T;
  final double? _CNDOT_N;
  final double? _CNDOT_RDOT;
  final double? _CNDOT_TDOT;
  final double? _CNDOT_NDOT;
  final double? _CDRG_R;
  final double? _CDRG_T;
  final double? _CDRG_N;
  final double? _CDRG_RDOT;
  final double? _CDRG_TDOT;
  final double? _CDRG_NDOT;
  final double? _CDRG_DRG;
  final double? _CSRP_R;
  final double? _CSRP_T;
  final double? _CSRP_N;
  final double? _CSRP_RDOT;
  final double? _CSRP_TDOT;
  final double? _CSRP_NDOT;
  final double? _CSRP_DRG;
  final double? _CSRP_SRP;
  final double? _CTHR_R;
  final double? _CTHR_T;
  final double? _CTHR_N;
  final double? _CTHR_RDOT;
  final double? _CTHR_TDOT;
  final double? _CTHR_NDOT;
  final double? _CTHR_DRG;
  final double? _CTHR_SRP;
  final double? _CTHR_THR;

  CdmobjectObjectBuilder({
    String? COMMENT,
    ObjectNumber? OBJECT,
    String? OBJECT_DESIGNATOR,
    String? CATALOG_NAME,
    String? OBJECT_NAME,
    String? INTERNATIONAL_DESIGNATOR,
    ObjectType? OBJECT_TYPE,
    String? OPERATOR_CONTACT_POSITION,
    String? OPERATOR_ORGANIZATION,
    String? EPHEMERIS_NAME,
    CovarianceMethod? COVARIANCE_METHOD,
    ManeuverableType? MANEUVERABLE,
    String? ORBIT_CENTER,
    ReferenceFrame? REF_FRAME,
    String? GRAVITY_MODEL,
    String? ATMOSPHERIC_MODEL,
    String? N_BODY_PERTURBATIONS,
    bool? SOLAR_RAD_PRESSURE,
    bool? EARTH_TIDES,
    bool? INTRACK_THRUST,
    String? TIME_LASTOB_START,
    String? TIME_LASTOB_END,
    double? RECOMMENDED_OD_SPAN,
    double? ACTUAL_OD_SPAN,
    int? OBS_AVAILABLE,
    int? OBS_USED,
    int? TRACKS_AVAILABLE,
    int? TRACKS_USED,
    double? RESIDUALS_ACCEPTED,
    double? WEIGHTED_RMS,
    double? AREA_PC,
    double? AREA_DRG,
    double? AREA_SRP,
    double? MASS,
    double? CR_AREA_OVER_MASS,
    double? THRUST_ACCELERATION,
    double? SEDR,
    double? X,
    double? Y,
    double? Z,
    double? X_DOT,
    double? Y_DOT,
    double? Z_DOT,
    double? CR_R,
    double? CT_R,
    double? CT_T,
    double? CN_R,
    double? CN_T,
    double? CN_N,
    double? CRDOT_R,
    double? CRDOT_T,
    double? CRDOT_N,
    double? CRDOT_RDOT,
    double? CTDOT_R,
    double? CTDOT_T,
    double? CTDOT_N,
    double? CTDOT_RDOT,
    double? CTDOT_TDOT,
    double? CNDOT_R,
    double? CNDOT_T,
    double? CNDOT_N,
    double? CNDOT_RDOT,
    double? CNDOT_TDOT,
    double? CNDOT_NDOT,
    double? CDRG_R,
    double? CDRG_T,
    double? CDRG_N,
    double? CDRG_RDOT,
    double? CDRG_TDOT,
    double? CDRG_NDOT,
    double? CDRG_DRG,
    double? CSRP_R,
    double? CSRP_T,
    double? CSRP_N,
    double? CSRP_RDOT,
    double? CSRP_TDOT,
    double? CSRP_NDOT,
    double? CSRP_DRG,
    double? CSRP_SRP,
    double? CTHR_R,
    double? CTHR_T,
    double? CTHR_N,
    double? CTHR_RDOT,
    double? CTHR_TDOT,
    double? CTHR_NDOT,
    double? CTHR_DRG,
    double? CTHR_SRP,
    double? CTHR_THR,
  })
      : _COMMENT = COMMENT,
        _OBJECT = OBJECT,
        _OBJECT_DESIGNATOR = OBJECT_DESIGNATOR,
        _CATALOG_NAME = CATALOG_NAME,
        _OBJECT_NAME = OBJECT_NAME,
        _INTERNATIONAL_DESIGNATOR = INTERNATIONAL_DESIGNATOR,
        _OBJECT_TYPE = OBJECT_TYPE,
        _OPERATOR_CONTACT_POSITION = OPERATOR_CONTACT_POSITION,
        _OPERATOR_ORGANIZATION = OPERATOR_ORGANIZATION,
        _EPHEMERIS_NAME = EPHEMERIS_NAME,
        _COVARIANCE_METHOD = COVARIANCE_METHOD,
        _MANEUVERABLE = MANEUVERABLE,
        _ORBIT_CENTER = ORBIT_CENTER,
        _REF_FRAME = REF_FRAME,
        _GRAVITY_MODEL = GRAVITY_MODEL,
        _ATMOSPHERIC_MODEL = ATMOSPHERIC_MODEL,
        _N_BODY_PERTURBATIONS = N_BODY_PERTURBATIONS,
        _SOLAR_RAD_PRESSURE = SOLAR_RAD_PRESSURE,
        _EARTH_TIDES = EARTH_TIDES,
        _INTRACK_THRUST = INTRACK_THRUST,
        _TIME_LASTOB_START = TIME_LASTOB_START,
        _TIME_LASTOB_END = TIME_LASTOB_END,
        _RECOMMENDED_OD_SPAN = RECOMMENDED_OD_SPAN,
        _ACTUAL_OD_SPAN = ACTUAL_OD_SPAN,
        _OBS_AVAILABLE = OBS_AVAILABLE,
        _OBS_USED = OBS_USED,
        _TRACKS_AVAILABLE = TRACKS_AVAILABLE,
        _TRACKS_USED = TRACKS_USED,
        _RESIDUALS_ACCEPTED = RESIDUALS_ACCEPTED,
        _WEIGHTED_RMS = WEIGHTED_RMS,
        _AREA_PC = AREA_PC,
        _AREA_DRG = AREA_DRG,
        _AREA_SRP = AREA_SRP,
        _MASS = MASS,
        _CR_AREA_OVER_MASS = CR_AREA_OVER_MASS,
        _THRUST_ACCELERATION = THRUST_ACCELERATION,
        _SEDR = SEDR,
        _X = X,
        _Y = Y,
        _Z = Z,
        _X_DOT = X_DOT,
        _Y_DOT = Y_DOT,
        _Z_DOT = Z_DOT,
        _CR_R = CR_R,
        _CT_R = CT_R,
        _CT_T = CT_T,
        _CN_R = CN_R,
        _CN_T = CN_T,
        _CN_N = CN_N,
        _CRDOT_R = CRDOT_R,
        _CRDOT_T = CRDOT_T,
        _CRDOT_N = CRDOT_N,
        _CRDOT_RDOT = CRDOT_RDOT,
        _CTDOT_R = CTDOT_R,
        _CTDOT_T = CTDOT_T,
        _CTDOT_N = CTDOT_N,
        _CTDOT_RDOT = CTDOT_RDOT,
        _CTDOT_TDOT = CTDOT_TDOT,
        _CNDOT_R = CNDOT_R,
        _CNDOT_T = CNDOT_T,
        _CNDOT_N = CNDOT_N,
        _CNDOT_RDOT = CNDOT_RDOT,
        _CNDOT_TDOT = CNDOT_TDOT,
        _CNDOT_NDOT = CNDOT_NDOT,
        _CDRG_R = CDRG_R,
        _CDRG_T = CDRG_T,
        _CDRG_N = CDRG_N,
        _CDRG_RDOT = CDRG_RDOT,
        _CDRG_TDOT = CDRG_TDOT,
        _CDRG_NDOT = CDRG_NDOT,
        _CDRG_DRG = CDRG_DRG,
        _CSRP_R = CSRP_R,
        _CSRP_T = CSRP_T,
        _CSRP_N = CSRP_N,
        _CSRP_RDOT = CSRP_RDOT,
        _CSRP_TDOT = CSRP_TDOT,
        _CSRP_NDOT = CSRP_NDOT,
        _CSRP_DRG = CSRP_DRG,
        _CSRP_SRP = CSRP_SRP,
        _CTHR_R = CTHR_R,
        _CTHR_T = CTHR_T,
        _CTHR_N = CTHR_N,
        _CTHR_RDOT = CTHR_RDOT,
        _CTHR_TDOT = CTHR_TDOT,
        _CTHR_NDOT = CTHR_NDOT,
        _CTHR_DRG = CTHR_DRG,
        _CTHR_SRP = CTHR_SRP,
        _CTHR_THR = CTHR_THR;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? COMMENTOffset = _COMMENT == null ? null
        : fbBuilder.writeString(_COMMENT!);
    final int? OBJECT_DESIGNATOROffset = _OBJECT_DESIGNATOR == null ? null
        : fbBuilder.writeString(_OBJECT_DESIGNATOR!);
    final int? CATALOG_NAMEOffset = _CATALOG_NAME == null ? null
        : fbBuilder.writeString(_CATALOG_NAME!);
    final int? OBJECT_NAMEOffset = _OBJECT_NAME == null ? null
        : fbBuilder.writeString(_OBJECT_NAME!);
    final int? INTERNATIONAL_DESIGNATOROffset = _INTERNATIONAL_DESIGNATOR == null ? null
        : fbBuilder.writeString(_INTERNATIONAL_DESIGNATOR!);
    final int? OPERATOR_CONTACT_POSITIONOffset = _OPERATOR_CONTACT_POSITION == null ? null
        : fbBuilder.writeString(_OPERATOR_CONTACT_POSITION!);
    final int? OPERATOR_ORGANIZATIONOffset = _OPERATOR_ORGANIZATION == null ? null
        : fbBuilder.writeString(_OPERATOR_ORGANIZATION!);
    final int? EPHEMERIS_NAMEOffset = _EPHEMERIS_NAME == null ? null
        : fbBuilder.writeString(_EPHEMERIS_NAME!);
    final int? ORBIT_CENTEROffset = _ORBIT_CENTER == null ? null
        : fbBuilder.writeString(_ORBIT_CENTER!);
    final int? GRAVITY_MODELOffset = _GRAVITY_MODEL == null ? null
        : fbBuilder.writeString(_GRAVITY_MODEL!);
    final int? ATMOSPHERIC_MODELOffset = _ATMOSPHERIC_MODEL == null ? null
        : fbBuilder.writeString(_ATMOSPHERIC_MODEL!);
    final int? N_BODY_PERTURBATIONSOffset = _N_BODY_PERTURBATIONS == null ? null
        : fbBuilder.writeString(_N_BODY_PERTURBATIONS!);
    final int? TIME_LASTOB_STARTOffset = _TIME_LASTOB_START == null ? null
        : fbBuilder.writeString(_TIME_LASTOB_START!);
    final int? TIME_LASTOB_ENDOffset = _TIME_LASTOB_END == null ? null
        : fbBuilder.writeString(_TIME_LASTOB_END!);
    fbBuilder.startTable(88);
    fbBuilder.addOffset(0, COMMENTOffset);
    fbBuilder.addInt8(1, _OBJECT?.value);
    fbBuilder.addOffset(2, OBJECT_DESIGNATOROffset);
    fbBuilder.addOffset(3, CATALOG_NAMEOffset);
    fbBuilder.addOffset(4, OBJECT_NAMEOffset);
    fbBuilder.addOffset(5, INTERNATIONAL_DESIGNATOROffset);
    fbBuilder.addInt8(6, _OBJECT_TYPE?.value);
    fbBuilder.addOffset(7, OPERATOR_CONTACT_POSITIONOffset);
    fbBuilder.addOffset(8, OPERATOR_ORGANIZATIONOffset);
    fbBuilder.addOffset(9, EPHEMERIS_NAMEOffset);
    fbBuilder.addInt8(10, _COVARIANCE_METHOD?.value);
    fbBuilder.addInt8(11, _MANEUVERABLE?.value);
    fbBuilder.addOffset(12, ORBIT_CENTEROffset);
    fbBuilder.addInt8(13, _REF_FRAME?.value);
    fbBuilder.addOffset(14, GRAVITY_MODELOffset);
    fbBuilder.addOffset(15, ATMOSPHERIC_MODELOffset);
    fbBuilder.addOffset(16, N_BODY_PERTURBATIONSOffset);
    fbBuilder.addBool(17, _SOLAR_RAD_PRESSURE);
    fbBuilder.addBool(18, _EARTH_TIDES);
    fbBuilder.addBool(19, _INTRACK_THRUST);
    fbBuilder.addOffset(20, TIME_LASTOB_STARTOffset);
    fbBuilder.addOffset(21, TIME_LASTOB_ENDOffset);
    fbBuilder.addFloat64(22, _RECOMMENDED_OD_SPAN);
    fbBuilder.addFloat64(23, _ACTUAL_OD_SPAN);
    fbBuilder.addUint32(24, _OBS_AVAILABLE);
    fbBuilder.addUint32(25, _OBS_USED);
    fbBuilder.addUint32(26, _TRACKS_AVAILABLE);
    fbBuilder.addUint32(27, _TRACKS_USED);
    fbBuilder.addFloat64(28, _RESIDUALS_ACCEPTED);
    fbBuilder.addFloat64(29, _WEIGHTED_RMS);
    fbBuilder.addFloat64(30, _AREA_PC);
    fbBuilder.addFloat64(31, _AREA_DRG);
    fbBuilder.addFloat64(32, _AREA_SRP);
    fbBuilder.addFloat64(33, _MASS);
    fbBuilder.addFloat64(34, _CR_AREA_OVER_MASS);
    fbBuilder.addFloat64(35, _THRUST_ACCELERATION);
    fbBuilder.addFloat64(36, _SEDR);
    fbBuilder.addFloat64(37, _X);
    fbBuilder.addFloat64(38, _Y);
    fbBuilder.addFloat64(39, _Z);
    fbBuilder.addFloat64(40, _X_DOT);
    fbBuilder.addFloat64(41, _Y_DOT);
    fbBuilder.addFloat64(42, _Z_DOT);
    fbBuilder.addFloat64(43, _CR_R);
    fbBuilder.addFloat64(44, _CT_R);
    fbBuilder.addFloat64(45, _CT_T);
    fbBuilder.addFloat64(46, _CN_R);
    fbBuilder.addFloat64(47, _CN_T);
    fbBuilder.addFloat64(48, _CN_N);
    fbBuilder.addFloat64(49, _CRDOT_R);
    fbBuilder.addFloat64(50, _CRDOT_T);
    fbBuilder.addFloat64(51, _CRDOT_N);
    fbBuilder.addFloat64(52, _CRDOT_RDOT);
    fbBuilder.addFloat64(53, _CTDOT_R);
    fbBuilder.addFloat64(54, _CTDOT_T);
    fbBuilder.addFloat64(55, _CTDOT_N);
    fbBuilder.addFloat64(56, _CTDOT_RDOT);
    fbBuilder.addFloat64(57, _CTDOT_TDOT);
    fbBuilder.addFloat64(58, _CNDOT_R);
    fbBuilder.addFloat64(59, _CNDOT_T);
    fbBuilder.addFloat64(60, _CNDOT_N);
    fbBuilder.addFloat64(61, _CNDOT_RDOT);
    fbBuilder.addFloat64(62, _CNDOT_TDOT);
    fbBuilder.addFloat64(63, _CNDOT_NDOT);
    fbBuilder.addFloat64(64, _CDRG_R);
    fbBuilder.addFloat64(65, _CDRG_T);
    fbBuilder.addFloat64(66, _CDRG_N);
    fbBuilder.addFloat64(67, _CDRG_RDOT);
    fbBuilder.addFloat64(68, _CDRG_TDOT);
    fbBuilder.addFloat64(69, _CDRG_NDOT);
    fbBuilder.addFloat64(70, _CDRG_DRG);
    fbBuilder.addFloat64(71, _CSRP_R);
    fbBuilder.addFloat64(72, _CSRP_T);
    fbBuilder.addFloat64(73, _CSRP_N);
    fbBuilder.addFloat64(74, _CSRP_RDOT);
    fbBuilder.addFloat64(75, _CSRP_TDOT);
    fbBuilder.addFloat64(76, _CSRP_NDOT);
    fbBuilder.addFloat64(77, _CSRP_DRG);
    fbBuilder.addFloat64(78, _CSRP_SRP);
    fbBuilder.addFloat64(79, _CTHR_R);
    fbBuilder.addFloat64(80, _CTHR_T);
    fbBuilder.addFloat64(81, _CTHR_N);
    fbBuilder.addFloat64(82, _CTHR_RDOT);
    fbBuilder.addFloat64(83, _CTHR_TDOT);
    fbBuilder.addFloat64(84, _CTHR_NDOT);
    fbBuilder.addFloat64(85, _CTHR_DRG);
    fbBuilder.addFloat64(86, _CTHR_SRP);
    fbBuilder.addFloat64(87, _CTHR_THR);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Conjunction Data Message
class CDM {
  CDM._(this._bc, this._bcOffset);
  factory CDM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CDM> reader = _CDMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The version of the CCSDS CDM standard used
  double get CCSDS_CDM_VERS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 4, 0.0);
  ///  The date the CDM message was created
  String? get CREATION_DATE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The originator of the CDM message
  String? get ORIGINATOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  The intended recipient of the CDM message
  String? get MESSAGE_FOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  A unique identifier for the CDM message
  String? get MESSAGE_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Time of closest approach
  String? get TCA => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The miss distance between the two objects
  double get MISS_DISTANCE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  The relative speed between the two objects
  double get RELATIVE_SPEED => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  The relative position R component
  double get RELATIVE_POSITION_R => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  The relative position T component
  double get RELATIVE_POSITION_T => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  The relative position N component
  double get RELATIVE_POSITION_N => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  The relative velocity R component
  double get RELATIVE_VELOCITY_R => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  The relative velocity T component
  double get RELATIVE_VELOCITY_T => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  The relative velocity N component
  double get RELATIVE_VELOCITY_N => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  The start time of the screening period
  String? get START_SCREEN_PERIOD => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  The end time of the screening period
  String? get STOP_SCREEN_PERIOD => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The reference frame for the screening volume
  ObjectCenteredReferenceFrame get SCREEN_VOLUME_FRAME => ObjectCenteredReferenceFrame.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 36, 0));
  ///  The shape of the screening volume
  ScreeningVolumeShape get SCREEN_VOLUME_SHAPE => ScreeningVolumeShape.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 38, 0));
  ///  The X dimension of the screening volume
  double get SCREEN_VOLUME_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  The Y dimension of the screening volume
  double get SCREEN_VOLUME_Y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  The Z dimension of the screening volume
  double get SCREEN_VOLUME_Z => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  The time the objects entered the screening volume
  String? get SCREEN_ENTRY_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  The time the objects exited the screening volume
  String? get SCREEN_EXIT_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  The probability of collision between the two objects
  double get COLLISION_PROBABILITY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  The method used to calculate the collision probability
  String? get COLLISION_PROBABILITY_METHOD => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  The first object in the CDM message
  Cdmobject? get OBJECT1 => Cdmobject.reader.vTableGetNullable(_bc, _bcOffset, 54);
  ///  The second object in the CDM message
  Cdmobject? get OBJECT2 => Cdmobject.reader.vTableGetNullable(_bc, _bcOffset, 56);
  ///  Data Source for the positional information for Object 1
  PNM? get OBJECT1_DATASOURCE => PNM.reader.vTableGetNullable(_bc, _bcOffset, 58);
  ///  Data Source for the positional information for Object 2
  PNM? get OBJECT2_DATASOURCE => PNM.reader.vTableGetNullable(_bc, _bcOffset, 60);

  @override
  String toString() {
    return 'CDM{CCSDS_CDM_VERS: ${CCSDS_CDM_VERS}, CREATION_DATE: ${CREATION_DATE}, ORIGINATOR: ${ORIGINATOR}, MESSAGE_FOR: ${MESSAGE_FOR}, MESSAGE_ID: ${MESSAGE_ID}, TCA: ${TCA}, MISS_DISTANCE: ${MISS_DISTANCE}, RELATIVE_SPEED: ${RELATIVE_SPEED}, RELATIVE_POSITION_R: ${RELATIVE_POSITION_R}, RELATIVE_POSITION_T: ${RELATIVE_POSITION_T}, RELATIVE_POSITION_N: ${RELATIVE_POSITION_N}, RELATIVE_VELOCITY_R: ${RELATIVE_VELOCITY_R}, RELATIVE_VELOCITY_T: ${RELATIVE_VELOCITY_T}, RELATIVE_VELOCITY_N: ${RELATIVE_VELOCITY_N}, START_SCREEN_PERIOD: ${START_SCREEN_PERIOD}, STOP_SCREEN_PERIOD: ${STOP_SCREEN_PERIOD}, SCREEN_VOLUME_FRAME: ${SCREEN_VOLUME_FRAME}, SCREEN_VOLUME_SHAPE: ${SCREEN_VOLUME_SHAPE}, SCREEN_VOLUME_X: ${SCREEN_VOLUME_X}, SCREEN_VOLUME_Y: ${SCREEN_VOLUME_Y}, SCREEN_VOLUME_Z: ${SCREEN_VOLUME_Z}, SCREEN_ENTRY_TIME: ${SCREEN_ENTRY_TIME}, SCREEN_EXIT_TIME: ${SCREEN_EXIT_TIME}, COLLISION_PROBABILITY: ${COLLISION_PROBABILITY}, COLLISION_PROBABILITY_METHOD: ${COLLISION_PROBABILITY_METHOD}, OBJECT1: ${OBJECT1}, OBJECT2: ${OBJECT2}, OBJECT1_DATASOURCE: ${OBJECT1_DATASOURCE}, OBJECT2_DATASOURCE: ${OBJECT2_DATASOURCE}}';
  }
}

class _CDMReader extends fb.TableReader<CDM> {
  const _CDMReader();

  @override
  CDM createObject(fb.BufferContext bc, int offset) => 
    CDM._(bc, offset);
}

class CDMBuilder {
  CDMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(29);
  }

  int addCcsdsCdmVers(double? CCSDS_CDM_VERS) {
    fbBuilder.addFloat64(0, CCSDS_CDM_VERS);
    return fbBuilder.offset;
  }
  int addCreationDateOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOriginatorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMessageForOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMessageIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTcaOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addMissDistance(double? MISS_DISTANCE) {
    fbBuilder.addFloat64(6, MISS_DISTANCE);
    return fbBuilder.offset;
  }
  int addRelativeSpeed(double? RELATIVE_SPEED) {
    fbBuilder.addFloat64(7, RELATIVE_SPEED);
    return fbBuilder.offset;
  }
  int addRelativePositionR(double? RELATIVE_POSITION_R) {
    fbBuilder.addFloat64(8, RELATIVE_POSITION_R);
    return fbBuilder.offset;
  }
  int addRelativePositionT(double? RELATIVE_POSITION_T) {
    fbBuilder.addFloat64(9, RELATIVE_POSITION_T);
    return fbBuilder.offset;
  }
  int addRelativePositionN(double? RELATIVE_POSITION_N) {
    fbBuilder.addFloat64(10, RELATIVE_POSITION_N);
    return fbBuilder.offset;
  }
  int addRelativeVelocityR(double? RELATIVE_VELOCITY_R) {
    fbBuilder.addFloat64(11, RELATIVE_VELOCITY_R);
    return fbBuilder.offset;
  }
  int addRelativeVelocityT(double? RELATIVE_VELOCITY_T) {
    fbBuilder.addFloat64(12, RELATIVE_VELOCITY_T);
    return fbBuilder.offset;
  }
  int addRelativeVelocityN(double? RELATIVE_VELOCITY_N) {
    fbBuilder.addFloat64(13, RELATIVE_VELOCITY_N);
    return fbBuilder.offset;
  }
  int addStartScreenPeriodOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addStopScreenPeriodOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addScreenVolumeFrame(ObjectCenteredReferenceFrame? SCREEN_VOLUME_FRAME) {
    fbBuilder.addInt8(16, SCREEN_VOLUME_FRAME?.value);
    return fbBuilder.offset;
  }
  int addScreenVolumeShape(ScreeningVolumeShape? SCREEN_VOLUME_SHAPE) {
    fbBuilder.addInt8(17, SCREEN_VOLUME_SHAPE?.value);
    return fbBuilder.offset;
  }
  int addScreenVolumeX(double? SCREEN_VOLUME_X) {
    fbBuilder.addFloat64(18, SCREEN_VOLUME_X);
    return fbBuilder.offset;
  }
  int addScreenVolumeY(double? SCREEN_VOLUME_Y) {
    fbBuilder.addFloat64(19, SCREEN_VOLUME_Y);
    return fbBuilder.offset;
  }
  int addScreenVolumeZ(double? SCREEN_VOLUME_Z) {
    fbBuilder.addFloat64(20, SCREEN_VOLUME_Z);
    return fbBuilder.offset;
  }
  int addScreenEntryTimeOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addScreenExitTimeOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addCollisionProbability(double? COLLISION_PROBABILITY) {
    fbBuilder.addFloat64(23, COLLISION_PROBABILITY);
    return fbBuilder.offset;
  }
  int addCollisionProbabilityMethodOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addObject1Offset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addObject2Offset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addObject1DatasourceOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addObject2DatasourceOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CDMObjectBuilder extends fb.ObjectBuilder {
  final double? _CCSDS_CDM_VERS;
  final String? _CREATION_DATE;
  final String? _ORIGINATOR;
  final String? _MESSAGE_FOR;
  final String? _MESSAGE_ID;
  final String? _TCA;
  final double? _MISS_DISTANCE;
  final double? _RELATIVE_SPEED;
  final double? _RELATIVE_POSITION_R;
  final double? _RELATIVE_POSITION_T;
  final double? _RELATIVE_POSITION_N;
  final double? _RELATIVE_VELOCITY_R;
  final double? _RELATIVE_VELOCITY_T;
  final double? _RELATIVE_VELOCITY_N;
  final String? _START_SCREEN_PERIOD;
  final String? _STOP_SCREEN_PERIOD;
  final ObjectCenteredReferenceFrame? _SCREEN_VOLUME_FRAME;
  final ScreeningVolumeShape? _SCREEN_VOLUME_SHAPE;
  final double? _SCREEN_VOLUME_X;
  final double? _SCREEN_VOLUME_Y;
  final double? _SCREEN_VOLUME_Z;
  final String? _SCREEN_ENTRY_TIME;
  final String? _SCREEN_EXIT_TIME;
  final double? _COLLISION_PROBABILITY;
  final String? _COLLISION_PROBABILITY_METHOD;
  final CdmobjectObjectBuilder? _OBJECT1;
  final CdmobjectObjectBuilder? _OBJECT2;
  final PNMObjectBuilder? _OBJECT1_DATASOURCE;
  final PNMObjectBuilder? _OBJECT2_DATASOURCE;

  CDMObjectBuilder({
    double? CCSDS_CDM_VERS,
    String? CREATION_DATE,
    String? ORIGINATOR,
    String? MESSAGE_FOR,
    String? MESSAGE_ID,
    String? TCA,
    double? MISS_DISTANCE,
    double? RELATIVE_SPEED,
    double? RELATIVE_POSITION_R,
    double? RELATIVE_POSITION_T,
    double? RELATIVE_POSITION_N,
    double? RELATIVE_VELOCITY_R,
    double? RELATIVE_VELOCITY_T,
    double? RELATIVE_VELOCITY_N,
    String? START_SCREEN_PERIOD,
    String? STOP_SCREEN_PERIOD,
    ObjectCenteredReferenceFrame? SCREEN_VOLUME_FRAME,
    ScreeningVolumeShape? SCREEN_VOLUME_SHAPE,
    double? SCREEN_VOLUME_X,
    double? SCREEN_VOLUME_Y,
    double? SCREEN_VOLUME_Z,
    String? SCREEN_ENTRY_TIME,
    String? SCREEN_EXIT_TIME,
    double? COLLISION_PROBABILITY,
    String? COLLISION_PROBABILITY_METHOD,
    CdmobjectObjectBuilder? OBJECT1,
    CdmobjectObjectBuilder? OBJECT2,
    PNMObjectBuilder? OBJECT1_DATASOURCE,
    PNMObjectBuilder? OBJECT2_DATASOURCE,
  })
      : _CCSDS_CDM_VERS = CCSDS_CDM_VERS,
        _CREATION_DATE = CREATION_DATE,
        _ORIGINATOR = ORIGINATOR,
        _MESSAGE_FOR = MESSAGE_FOR,
        _MESSAGE_ID = MESSAGE_ID,
        _TCA = TCA,
        _MISS_DISTANCE = MISS_DISTANCE,
        _RELATIVE_SPEED = RELATIVE_SPEED,
        _RELATIVE_POSITION_R = RELATIVE_POSITION_R,
        _RELATIVE_POSITION_T = RELATIVE_POSITION_T,
        _RELATIVE_POSITION_N = RELATIVE_POSITION_N,
        _RELATIVE_VELOCITY_R = RELATIVE_VELOCITY_R,
        _RELATIVE_VELOCITY_T = RELATIVE_VELOCITY_T,
        _RELATIVE_VELOCITY_N = RELATIVE_VELOCITY_N,
        _START_SCREEN_PERIOD = START_SCREEN_PERIOD,
        _STOP_SCREEN_PERIOD = STOP_SCREEN_PERIOD,
        _SCREEN_VOLUME_FRAME = SCREEN_VOLUME_FRAME,
        _SCREEN_VOLUME_SHAPE = SCREEN_VOLUME_SHAPE,
        _SCREEN_VOLUME_X = SCREEN_VOLUME_X,
        _SCREEN_VOLUME_Y = SCREEN_VOLUME_Y,
        _SCREEN_VOLUME_Z = SCREEN_VOLUME_Z,
        _SCREEN_ENTRY_TIME = SCREEN_ENTRY_TIME,
        _SCREEN_EXIT_TIME = SCREEN_EXIT_TIME,
        _COLLISION_PROBABILITY = COLLISION_PROBABILITY,
        _COLLISION_PROBABILITY_METHOD = COLLISION_PROBABILITY_METHOD,
        _OBJECT1 = OBJECT1,
        _OBJECT2 = OBJECT2,
        _OBJECT1_DATASOURCE = OBJECT1_DATASOURCE,
        _OBJECT2_DATASOURCE = OBJECT2_DATASOURCE;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? CREATION_DATEOffset = _CREATION_DATE == null ? null
        : fbBuilder.writeString(_CREATION_DATE!);
    final int? ORIGINATOROffset = _ORIGINATOR == null ? null
        : fbBuilder.writeString(_ORIGINATOR!);
    final int? MESSAGE_FOROffset = _MESSAGE_FOR == null ? null
        : fbBuilder.writeString(_MESSAGE_FOR!);
    final int? MESSAGE_IDOffset = _MESSAGE_ID == null ? null
        : fbBuilder.writeString(_MESSAGE_ID!);
    final int? TCAOffset = _TCA == null ? null
        : fbBuilder.writeString(_TCA!);
    final int? START_SCREEN_PERIODOffset = _START_SCREEN_PERIOD == null ? null
        : fbBuilder.writeString(_START_SCREEN_PERIOD!);
    final int? STOP_SCREEN_PERIODOffset = _STOP_SCREEN_PERIOD == null ? null
        : fbBuilder.writeString(_STOP_SCREEN_PERIOD!);
    final int? SCREEN_ENTRY_TIMEOffset = _SCREEN_ENTRY_TIME == null ? null
        : fbBuilder.writeString(_SCREEN_ENTRY_TIME!);
    final int? SCREEN_EXIT_TIMEOffset = _SCREEN_EXIT_TIME == null ? null
        : fbBuilder.writeString(_SCREEN_EXIT_TIME!);
    final int? COLLISION_PROBABILITY_METHODOffset = _COLLISION_PROBABILITY_METHOD == null ? null
        : fbBuilder.writeString(_COLLISION_PROBABILITY_METHOD!);
    final int? OBJECT1Offset = _OBJECT1?.getOrCreateOffset(fbBuilder);
    final int? OBJECT2Offset = _OBJECT2?.getOrCreateOffset(fbBuilder);
    final int? OBJECT1_DATASOURCEOffset = _OBJECT1_DATASOURCE?.getOrCreateOffset(fbBuilder);
    final int? OBJECT2_DATASOURCEOffset = _OBJECT2_DATASOURCE?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(29);
    fbBuilder.addFloat64(0, _CCSDS_CDM_VERS);
    fbBuilder.addOffset(1, CREATION_DATEOffset);
    fbBuilder.addOffset(2, ORIGINATOROffset);
    fbBuilder.addOffset(3, MESSAGE_FOROffset);
    fbBuilder.addOffset(4, MESSAGE_IDOffset);
    fbBuilder.addOffset(5, TCAOffset);
    fbBuilder.addFloat64(6, _MISS_DISTANCE);
    fbBuilder.addFloat64(7, _RELATIVE_SPEED);
    fbBuilder.addFloat64(8, _RELATIVE_POSITION_R);
    fbBuilder.addFloat64(9, _RELATIVE_POSITION_T);
    fbBuilder.addFloat64(10, _RELATIVE_POSITION_N);
    fbBuilder.addFloat64(11, _RELATIVE_VELOCITY_R);
    fbBuilder.addFloat64(12, _RELATIVE_VELOCITY_T);
    fbBuilder.addFloat64(13, _RELATIVE_VELOCITY_N);
    fbBuilder.addOffset(14, START_SCREEN_PERIODOffset);
    fbBuilder.addOffset(15, STOP_SCREEN_PERIODOffset);
    fbBuilder.addInt8(16, _SCREEN_VOLUME_FRAME?.value);
    fbBuilder.addInt8(17, _SCREEN_VOLUME_SHAPE?.value);
    fbBuilder.addFloat64(18, _SCREEN_VOLUME_X);
    fbBuilder.addFloat64(19, _SCREEN_VOLUME_Y);
    fbBuilder.addFloat64(20, _SCREEN_VOLUME_Z);
    fbBuilder.addOffset(21, SCREEN_ENTRY_TIMEOffset);
    fbBuilder.addOffset(22, SCREEN_EXIT_TIMEOffset);
    fbBuilder.addFloat64(23, _COLLISION_PROBABILITY);
    fbBuilder.addOffset(24, COLLISION_PROBABILITY_METHODOffset);
    fbBuilder.addOffset(25, OBJECT1Offset);
    fbBuilder.addOffset(26, OBJECT2Offset);
    fbBuilder.addOffset(27, OBJECT1_DATASOURCEOffset);
    fbBuilder.addOffset(28, OBJECT2_DATASOURCEOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CDMCOLLECTION {
  CDMCOLLECTION._(this._bc, this._bcOffset);
  factory CDMCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CDMCOLLECTION> reader = _CDMCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  A vector of CDM records
  List<CDM>? get RECORDS => const fb.ListReader<CDM>(CDM.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'CDMCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _CDMCOLLECTIONReader extends fb.TableReader<CDMCOLLECTION> {
  const _CDMCOLLECTIONReader();

  @override
  CDMCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    CDMCOLLECTION._(bc, offset);
}

class CDMCOLLECTIONBuilder {
  CDMCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CDMCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<CDMObjectBuilder>? _RECORDS;

  CDMCOLLECTIONObjectBuilder({
    List<CDMObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
