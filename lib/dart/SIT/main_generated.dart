// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


import './main_generated.dart';

///  Enum for the type of site
class SiteType {
  final int value;
  const SiteType._(this.value);

  factory SiteType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SiteType');
    }
    return result;
  }

  static SiteType? _createOrNull(int? value) => 
      value == null ? null : SiteType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 17;
  static bool containsValue(int value) => values.containsKey(value);

  static const SiteType LAUNCH_SITE = SiteType._(0);
  static const SiteType OBSERVATION_STATION = SiteType._(1);
  static const SiteType HOBBYIST_OBSERVER = SiteType._(2);
  static const SiteType RESEARCH_FACILITY = SiteType._(3);
  static const SiteType SATELLITE_GROUND_STATION = SiteType._(4);
  static const SiteType SPACEPORT = SiteType._(5);
  static const SiteType MILITARY_BASE = SiteType._(6);
  static const SiteType WEATHER_STATION = SiteType._(7);
  static const SiteType ASTRONOMICAL_OBSERVATORY = SiteType._(8);
  static const SiteType EDUCATIONAL_INSTITUTE = SiteType._(9);
  static const SiteType COMMUNICATION_HUB = SiteType._(10);
  static const SiteType POWER_PLANT = SiteType._(11);
  static const SiteType INDUSTRIAL_COMPLEX = SiteType._(12);
  static const SiteType TRANSPORTATION_HUB = SiteType._(13);
  static const SiteType URBAN_AREA = SiteType._(14);
  static const SiteType NATIONAL_PARK = SiteType._(15);
  static const SiteType HISTORICAL_SITE = SiteType._(16);
  static const SiteType OTHER = SiteType._(17);
  static const Map<int, SiteType> values = {
    0: LAUNCH_SITE,
    1: OBSERVATION_STATION,
    2: HOBBYIST_OBSERVER,
    3: RESEARCH_FACILITY,
    4: SATELLITE_GROUND_STATION,
    5: SPACEPORT,
    6: MILITARY_BASE,
    7: WEATHER_STATION,
    8: ASTRONOMICAL_OBSERVATORY,
    9: EDUCATIONAL_INSTITUTE,
    10: COMMUNICATION_HUB,
    11: POWER_PLANT,
    12: INDUSTRIAL_COMPLEX,
    13: TRANSPORTATION_HUB,
    14: URBAN_AREA,
    15: NATIONAL_PARK,
    16: HISTORICAL_SITE,
    17: OTHER};

  static const fb.Reader<SiteType> reader = _SiteTypeReader();

  @override
  String toString() {
    return 'SiteType{value: $value}';
  }
}

class _SiteTypeReader extends fb.Reader<SiteType> {
  const _SiteTypeReader();

  @override
  int get size => 1;

  @override
  SiteType read(fb.BufferContext bc, int offset) =>
      SiteType.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Geometry table with information about geometric properties
class Geometry {
  Geometry._(this._bc, this._bcOffset);
  factory Geometry(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Geometry> reader = _GeometryReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Type of geometry
  String? get GEOMETRY_TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Coordinates of the geometry
  List<double>? get COORDINATES => const fb.ListReader<double>(fb.Float32Reader()).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Geometry{GEOMETRY_TYPE: ${GEOMETRY_TYPE}, COORDINATES: ${COORDINATES}}';
  }
}

class _GeometryReader extends fb.TableReader<Geometry> {
  const _GeometryReader();

  @override
  Geometry createObject(fb.BufferContext bc, int offset) => 
    Geometry._(bc, offset);
}

class GeometryBuilder {
  GeometryBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addGeometryTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addCoordinatesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GeometryObjectBuilder extends fb.ObjectBuilder {
  final String? _GEOMETRY_TYPE;
  final List<double>? _COORDINATES;

  GeometryObjectBuilder({
    String? GEOMETRY_TYPE,
    List<double>? COORDINATES,
  })
      : _GEOMETRY_TYPE = GEOMETRY_TYPE,
        _COORDINATES = COORDINATES;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? GEOMETRY_TYPEOffset = _GEOMETRY_TYPE == null ? null
        : fbBuilder.writeString(_GEOMETRY_TYPE!);
    final int? COORDINATESOffset = _COORDINATES == null ? null
        : fbBuilder.writeListFloat32(_COORDINATES!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, GEOMETRY_TYPEOffset);
    fbBuilder.addOffset(1, COORDINATESOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Site Information Message
class SIT {
  SIT._(this._bc, this._bcOffset);
  factory SIT(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SIT> reader = _SITReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier for the site, BE_NUMBER
  String? get ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Name of the site
  String? get NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Abbreviation
  String? get ABBREVIATION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Site type as defined in SiteType enum
  SiteType get SITE_TYPE => SiteType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 10, 0));
  ///  Site type CATCODE
  String? get CATCODE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Network identifier
  String? get NETWORK => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Latitude of the site
  double get LATITUDE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Longitude of the site
  double get LONGITUDE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Altitude of the site
  double get ALTITUDE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Geometry of the site
  Geometry? get GEOMETRY => Geometry.reader.vTableGetNullable(_bc, _bcOffset, 22);
  ///  Center point geometry coordinates
  List<double>? get CENTER_POINT_GEOMETRY => const fb.ListReader<double>(fb.Float32Reader()).vTableGetNullable(_bc, _bcOffset, 24);
  ///  Classification marking of the site
  String? get CLASSIFICATION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  CTR ISO 3166 Numeric code as string
  String? get CTR_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Identifier of the user who created the site data
  String? get CREATED_BY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Description of the site
  String? get DESCRIPTION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  URL for the 3D model of the site
  String? get MODEL_URL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Source of the site data
  String? get SOURCE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Indicates if the site is taskable
  bool get TASKABLE => const fb.BoolReader().vTableGet(_bc, _bcOffset, 38, false);
  ///  Operational status of the site (e.g., active, inactive, under construction)
  String? get OPERATIONAL_STATUS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Date of establishment
  String? get ESTABLISHMENT_DATE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Contact information for the site
  String? get CONTACT_INFO => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Environmental impact or considerations
  String? get ENVIRONMENTAL_IMPACT => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Accessibility and infrastructure details
  String? get ACCESSIBILITY_INFRA => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Vector of Integrated Devices (IDM)
  List<IDM>? get INTEGRATED_DEVICES => const fb.ListReader<IDM>(IDM.reader).vTableGetNullable(_bc, _bcOffset, 50);

  @override
  String toString() {
    return 'SIT{ID: ${ID}, NAME: ${NAME}, ABBREVIATION: ${ABBREVIATION}, SITE_TYPE: ${SITE_TYPE}, CATCODE: ${CATCODE}, NETWORK: ${NETWORK}, LATITUDE: ${LATITUDE}, LONGITUDE: ${LONGITUDE}, ALTITUDE: ${ALTITUDE}, GEOMETRY: ${GEOMETRY}, CENTER_POINT_GEOMETRY: ${CENTER_POINT_GEOMETRY}, CLASSIFICATION: ${CLASSIFICATION}, CTR_ID: ${CTR_ID}, CREATED_BY: ${CREATED_BY}, DESCRIPTION: ${DESCRIPTION}, MODEL_URL: ${MODEL_URL}, SOURCE: ${SOURCE}, TASKABLE: ${TASKABLE}, OPERATIONAL_STATUS: ${OPERATIONAL_STATUS}, ESTABLISHMENT_DATE: ${ESTABLISHMENT_DATE}, CONTACT_INFO: ${CONTACT_INFO}, ENVIRONMENTAL_IMPACT: ${ENVIRONMENTAL_IMPACT}, ACCESSIBILITY_INFRA: ${ACCESSIBILITY_INFRA}, INTEGRATED_DEVICES: ${INTEGRATED_DEVICES}}';
  }
}

class _SITReader extends fb.TableReader<SIT> {
  const _SITReader();

  @override
  SIT createObject(fb.BufferContext bc, int offset) => 
    SIT._(bc, offset);
}

class SITBuilder {
  SITBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(24);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAbbreviationOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSiteType(SiteType? SITE_TYPE) {
    fbBuilder.addInt8(3, SITE_TYPE?.value);
    return fbBuilder.offset;
  }
  int addCatcodeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addNetworkOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addLatitude(double? LATITUDE) {
    fbBuilder.addFloat32(6, LATITUDE);
    return fbBuilder.offset;
  }
  int addLongitude(double? LONGITUDE) {
    fbBuilder.addFloat32(7, LONGITUDE);
    return fbBuilder.offset;
  }
  int addAltitude(double? ALTITUDE) {
    fbBuilder.addFloat32(8, ALTITUDE);
    return fbBuilder.offset;
  }
  int addGeometryOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addCenterPointGeometryOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addClassificationOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addCtrIdOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addCreatedByOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addModelUrlOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addTaskable(bool? TASKABLE) {
    fbBuilder.addBool(17, TASKABLE);
    return fbBuilder.offset;
  }
  int addOperationalStatusOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addEstablishmentDateOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addContactInfoOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addEnvironmentalImpactOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addAccessibilityInfraOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addIntegratedDevicesOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SITObjectBuilder extends fb.ObjectBuilder {
  final String? _ID;
  final String? _NAME;
  final String? _ABBREVIATION;
  final SiteType? _SITE_TYPE;
  final String? _CATCODE;
  final String? _NETWORK;
  final double? _LATITUDE;
  final double? _LONGITUDE;
  final double? _ALTITUDE;
  final GeometryObjectBuilder? _GEOMETRY;
  final List<double>? _CENTER_POINT_GEOMETRY;
  final String? _CLASSIFICATION;
  final String? _CTR_ID;
  final String? _CREATED_BY;
  final String? _DESCRIPTION;
  final String? _MODEL_URL;
  final String? _SOURCE;
  final bool? _TASKABLE;
  final String? _OPERATIONAL_STATUS;
  final String? _ESTABLISHMENT_DATE;
  final String? _CONTACT_INFO;
  final String? _ENVIRONMENTAL_IMPACT;
  final String? _ACCESSIBILITY_INFRA;
  final List<IDMObjectBuilder>? _INTEGRATED_DEVICES;

  SITObjectBuilder({
    String? ID,
    String? NAME,
    String? ABBREVIATION,
    SiteType? SITE_TYPE,
    String? CATCODE,
    String? NETWORK,
    double? LATITUDE,
    double? LONGITUDE,
    double? ALTITUDE,
    GeometryObjectBuilder? GEOMETRY,
    List<double>? CENTER_POINT_GEOMETRY,
    String? CLASSIFICATION,
    String? CTR_ID,
    String? CREATED_BY,
    String? DESCRIPTION,
    String? MODEL_URL,
    String? SOURCE,
    bool? TASKABLE,
    String? OPERATIONAL_STATUS,
    String? ESTABLISHMENT_DATE,
    String? CONTACT_INFO,
    String? ENVIRONMENTAL_IMPACT,
    String? ACCESSIBILITY_INFRA,
    List<IDMObjectBuilder>? INTEGRATED_DEVICES,
  })
      : _ID = ID,
        _NAME = NAME,
        _ABBREVIATION = ABBREVIATION,
        _SITE_TYPE = SITE_TYPE,
        _CATCODE = CATCODE,
        _NETWORK = NETWORK,
        _LATITUDE = LATITUDE,
        _LONGITUDE = LONGITUDE,
        _ALTITUDE = ALTITUDE,
        _GEOMETRY = GEOMETRY,
        _CENTER_POINT_GEOMETRY = CENTER_POINT_GEOMETRY,
        _CLASSIFICATION = CLASSIFICATION,
        _CTR_ID = CTR_ID,
        _CREATED_BY = CREATED_BY,
        _DESCRIPTION = DESCRIPTION,
        _MODEL_URL = MODEL_URL,
        _SOURCE = SOURCE,
        _TASKABLE = TASKABLE,
        _OPERATIONAL_STATUS = OPERATIONAL_STATUS,
        _ESTABLISHMENT_DATE = ESTABLISHMENT_DATE,
        _CONTACT_INFO = CONTACT_INFO,
        _ENVIRONMENTAL_IMPACT = ENVIRONMENTAL_IMPACT,
        _ACCESSIBILITY_INFRA = ACCESSIBILITY_INFRA,
        _INTEGRATED_DEVICES = INTEGRATED_DEVICES;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? IDOffset = _ID == null ? null
        : fbBuilder.writeString(_ID!);
    final int? NAMEOffset = _NAME == null ? null
        : fbBuilder.writeString(_NAME!);
    final int? ABBREVIATIONOffset = _ABBREVIATION == null ? null
        : fbBuilder.writeString(_ABBREVIATION!);
    final int? CATCODEOffset = _CATCODE == null ? null
        : fbBuilder.writeString(_CATCODE!);
    final int? NETWORKOffset = _NETWORK == null ? null
        : fbBuilder.writeString(_NETWORK!);
    final int? GEOMETRYOffset = _GEOMETRY?.getOrCreateOffset(fbBuilder);
    final int? CENTER_POINT_GEOMETRYOffset = _CENTER_POINT_GEOMETRY == null ? null
        : fbBuilder.writeListFloat32(_CENTER_POINT_GEOMETRY!);
    final int? CLASSIFICATIONOffset = _CLASSIFICATION == null ? null
        : fbBuilder.writeString(_CLASSIFICATION!);
    final int? CTR_IDOffset = _CTR_ID == null ? null
        : fbBuilder.writeString(_CTR_ID!);
    final int? CREATED_BYOffset = _CREATED_BY == null ? null
        : fbBuilder.writeString(_CREATED_BY!);
    final int? DESCRIPTIONOffset = _DESCRIPTION == null ? null
        : fbBuilder.writeString(_DESCRIPTION!);
    final int? MODEL_URLOffset = _MODEL_URL == null ? null
        : fbBuilder.writeString(_MODEL_URL!);
    final int? SOURCEOffset = _SOURCE == null ? null
        : fbBuilder.writeString(_SOURCE!);
    final int? OPERATIONAL_STATUSOffset = _OPERATIONAL_STATUS == null ? null
        : fbBuilder.writeString(_OPERATIONAL_STATUS!);
    final int? ESTABLISHMENT_DATEOffset = _ESTABLISHMENT_DATE == null ? null
        : fbBuilder.writeString(_ESTABLISHMENT_DATE!);
    final int? CONTACT_INFOOffset = _CONTACT_INFO == null ? null
        : fbBuilder.writeString(_CONTACT_INFO!);
    final int? ENVIRONMENTAL_IMPACTOffset = _ENVIRONMENTAL_IMPACT == null ? null
        : fbBuilder.writeString(_ENVIRONMENTAL_IMPACT!);
    final int? ACCESSIBILITY_INFRAOffset = _ACCESSIBILITY_INFRA == null ? null
        : fbBuilder.writeString(_ACCESSIBILITY_INFRA!);
    final int? INTEGRATED_DEVICESOffset = _INTEGRATED_DEVICES == null ? null
        : fbBuilder.writeList(_INTEGRATED_DEVICES!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(24);
    fbBuilder.addOffset(0, IDOffset);
    fbBuilder.addOffset(1, NAMEOffset);
    fbBuilder.addOffset(2, ABBREVIATIONOffset);
    fbBuilder.addInt8(3, _SITE_TYPE?.value);
    fbBuilder.addOffset(4, CATCODEOffset);
    fbBuilder.addOffset(5, NETWORKOffset);
    fbBuilder.addFloat32(6, _LATITUDE);
    fbBuilder.addFloat32(7, _LONGITUDE);
    fbBuilder.addFloat32(8, _ALTITUDE);
    fbBuilder.addOffset(9, GEOMETRYOffset);
    fbBuilder.addOffset(10, CENTER_POINT_GEOMETRYOffset);
    fbBuilder.addOffset(11, CLASSIFICATIONOffset);
    fbBuilder.addOffset(12, CTR_IDOffset);
    fbBuilder.addOffset(13, CREATED_BYOffset);
    fbBuilder.addOffset(14, DESCRIPTIONOffset);
    fbBuilder.addOffset(15, MODEL_URLOffset);
    fbBuilder.addOffset(16, SOURCEOffset);
    fbBuilder.addBool(17, _TASKABLE);
    fbBuilder.addOffset(18, OPERATIONAL_STATUSOffset);
    fbBuilder.addOffset(19, ESTABLISHMENT_DATEOffset);
    fbBuilder.addOffset(20, CONTACT_INFOOffset);
    fbBuilder.addOffset(21, ENVIRONMENTAL_IMPACTOffset);
    fbBuilder.addOffset(22, ACCESSIBILITY_INFRAOffset);
    fbBuilder.addOffset(23, INTEGRATED_DEVICESOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
