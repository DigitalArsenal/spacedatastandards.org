// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class LegacyCountryCode {
  final int value;
  const LegacyCountryCode._(this.value);

  factory LegacyCountryCode.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum LegacyCountryCode');
    }
    return result;
  }

  static LegacyCountryCode? _createOrNull(int? value) => 
      value == null ? null : LegacyCountryCode.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 125;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Arab Satellite Communications Organization
  static const LegacyCountryCode AB = LegacyCountryCode._(0);

  ///  Asia Broadcast Satellite
  static const LegacyCountryCode ABS = LegacyCountryCode._(1);

  ///  Asia Satellite Telecommunications Company (ASIASAT)
  static const LegacyCountryCode AC = LegacyCountryCode._(2);

  ///  Algeria
  static const LegacyCountryCode ALG = LegacyCountryCode._(3);

  ///  Angola
  static const LegacyCountryCode ANG = LegacyCountryCode._(4);

  ///  Argentina
  static const LegacyCountryCode ARGN = LegacyCountryCode._(5);

  ///  Republic of Armenia
  static const LegacyCountryCode ARM = LegacyCountryCode._(6);

  ///  Austria
  static const LegacyCountryCode ASRA = LegacyCountryCode._(7);

  ///  Australia
  static const LegacyCountryCode AUS = LegacyCountryCode._(8);

  ///  Azerbaijan
  static const LegacyCountryCode AZER = LegacyCountryCode._(9);

  ///  Belgium
  static const LegacyCountryCode BEL = LegacyCountryCode._(10);

  ///  Belarus
  static const LegacyCountryCode BELA = LegacyCountryCode._(11);

  ///  Bermuda
  static const LegacyCountryCode BERM = LegacyCountryCode._(12);

  ///  People's Republic of Bangladesh
  static const LegacyCountryCode BGD = LegacyCountryCode._(13);

  ///  Kingdom of Bhutan
  static const LegacyCountryCode BHUT = LegacyCountryCode._(14);

  ///  Bolivia
  static const LegacyCountryCode BOL = LegacyCountryCode._(15);

  ///  Brazil
  static const LegacyCountryCode BRAZ = LegacyCountryCode._(16);

  ///  Bulgaria
  static const LegacyCountryCode BUL = LegacyCountryCode._(17);

  ///  Canada
  static const LegacyCountryCode CA = LegacyCountryCode._(18);

  ///  China/Brazil
  static const LegacyCountryCode CHBZ = LegacyCountryCode._(19);

  ///  China/Turkey
  static const LegacyCountryCode CHTU = LegacyCountryCode._(20);

  ///  Chile
  static const LegacyCountryCode CHLE = LegacyCountryCode._(21);

  ///  Commonwealth of Independent States (former USSR)
  static const LegacyCountryCode CIS = LegacyCountryCode._(22);

  ///  Colombia
  static const LegacyCountryCode COL = LegacyCountryCode._(23);

  ///  Republic of Costa Rica
  static const LegacyCountryCode CRI = LegacyCountryCode._(24);

  ///  Czech Republic (former Czechoslovakia)
  static const LegacyCountryCode CZCH = LegacyCountryCode._(25);

  ///  Denmark
  static const LegacyCountryCode DEN = LegacyCountryCode._(26);

  ///  Republic of Djibouti
  static const LegacyCountryCode DJI = LegacyCountryCode._(27);

  ///  Ecuador
  static const LegacyCountryCode ECU = LegacyCountryCode._(28);

  ///  Egypt
  static const LegacyCountryCode EGYP = LegacyCountryCode._(29);

  ///  European Space Agency
  static const LegacyCountryCode ESA = LegacyCountryCode._(30);

  ///  European Space Research Organization
  static const LegacyCountryCode ESRO = LegacyCountryCode._(31);

  ///  Estonia
  static const LegacyCountryCode EST = LegacyCountryCode._(32);

  ///  Ethiopia
  static const LegacyCountryCode ETH = LegacyCountryCode._(33);

  ///  European Organization for the Exploitation of Meteorological Satellites (EUMETSAT)
  static const LegacyCountryCode EUME = LegacyCountryCode._(34);

  ///  European Telecommunications Satellite Organization (EUTELSAT)
  static const LegacyCountryCode EUTE = LegacyCountryCode._(35);

  ///  France/Germany
  static const LegacyCountryCode FGER = LegacyCountryCode._(36);

  ///  Finland
  static const LegacyCountryCode FIN = LegacyCountryCode._(37);

  ///  France
  static const LegacyCountryCode FR = LegacyCountryCode._(38);

  ///  France/Italy
  static const LegacyCountryCode FRIT = LegacyCountryCode._(39);

  ///  Germany
  static const LegacyCountryCode GER = LegacyCountryCode._(40);

  ///  Republic of Ghana
  static const LegacyCountryCode GHA = LegacyCountryCode._(41);

  ///  Globalstar
  static const LegacyCountryCode GLOB = LegacyCountryCode._(42);

  ///  Greece
  static const LegacyCountryCode GREC = LegacyCountryCode._(43);

  ///  Greece/Saudi Arabia
  static const LegacyCountryCode GRSA = LegacyCountryCode._(44);

  ///  Guatemala
  static const LegacyCountryCode GUAT = LegacyCountryCode._(45);

  ///  Hungary
  static const LegacyCountryCode HUN = LegacyCountryCode._(46);

  ///  International Mobile Satellite Organization (INMARSAT)
  static const LegacyCountryCode IM = LegacyCountryCode._(47);

  ///  India
  static const LegacyCountryCode IND = LegacyCountryCode._(48);

  ///  Indonesia
  static const LegacyCountryCode INDO = LegacyCountryCode._(49);

  ///  Iran
  static const LegacyCountryCode IRAN = LegacyCountryCode._(50);

  ///  Iraq
  static const LegacyCountryCode IRAQ = LegacyCountryCode._(51);

  ///  Iridium
  static const LegacyCountryCode IRID = LegacyCountryCode._(52);

  ///  Ireland
  static const LegacyCountryCode IRL = LegacyCountryCode._(53);

  ///  Israel
  static const LegacyCountryCode ISRA = LegacyCountryCode._(54);

  ///  Indian Space Research Organisation
  static const LegacyCountryCode ISRO = LegacyCountryCode._(55);

  ///  International Space Station
  static const LegacyCountryCode ISS = LegacyCountryCode._(56);

  ///  Italy
  static const LegacyCountryCode IT = LegacyCountryCode._(57);

  ///  International Telecommunications Satellite Organization (INTELSAT)
  static const LegacyCountryCode ITSO = LegacyCountryCode._(58);

  ///  Japan
  static const LegacyCountryCode JPN = LegacyCountryCode._(59);

  ///  Kazakhstan
  static const LegacyCountryCode KAZ = LegacyCountryCode._(60);

  ///  Republic of Kenya
  static const LegacyCountryCode KEN = LegacyCountryCode._(61);

  ///  Laos
  static const LegacyCountryCode LAOS = LegacyCountryCode._(62);

  ///  Democratic Socialist Republic of Sri Lanka
  static const LegacyCountryCode LKA = LegacyCountryCode._(63);

  ///  Lithuania
  static const LegacyCountryCode LTU = LegacyCountryCode._(64);

  ///  Luxembourg
  static const LegacyCountryCode LUXE = LegacyCountryCode._(65);

  ///  Morocco
  static const LegacyCountryCode MA = LegacyCountryCode._(66);

  ///  Malaysia
  static const LegacyCountryCode MALA = LegacyCountryCode._(67);

  ///  Principality of Monaco
  static const LegacyCountryCode MCO = LegacyCountryCode._(68);

  ///  Republic of Moldova
  static const LegacyCountryCode MDA = LegacyCountryCode._(69);

  ///  Mexico
  static const LegacyCountryCode MEX = LegacyCountryCode._(70);

  ///  Republic of the Union of Myanmar
  static const LegacyCountryCode MMR = LegacyCountryCode._(71);

  ///  Mongolia
  static const LegacyCountryCode MNG = LegacyCountryCode._(72);

  ///  Mauritius
  static const LegacyCountryCode MUS = LegacyCountryCode._(73);

  ///  North Atlantic Treaty Organization
  static const LegacyCountryCode NATO = LegacyCountryCode._(74);

  ///  Netherlands
  static const LegacyCountryCode NETH = LegacyCountryCode._(75);

  ///  New ICO
  static const LegacyCountryCode NICO = LegacyCountryCode._(76);

  ///  Nigeria
  static const LegacyCountryCode NIG = LegacyCountryCode._(77);

  ///  Democratic People's Republic of Korea
  static const LegacyCountryCode NKOR = LegacyCountryCode._(78);

  ///  Norway
  static const LegacyCountryCode NOR = LegacyCountryCode._(79);

  ///  Federal Democratic Republic of Nepal
  static const LegacyCountryCode NPL = LegacyCountryCode._(80);

  ///  New Zealand
  static const LegacyCountryCode NZ = LegacyCountryCode._(81);

  ///  O3b Networks
  static const LegacyCountryCode O3B = LegacyCountryCode._(82);

  ///  ORBCOMM
  static const LegacyCountryCode ORB = LegacyCountryCode._(83);

  ///  Pakistan
  static const LegacyCountryCode PAKI = LegacyCountryCode._(84);

  ///  Peru
  static const LegacyCountryCode PERU = LegacyCountryCode._(85);

  ///  Poland
  static const LegacyCountryCode POL = LegacyCountryCode._(86);

  ///  Portugal
  static const LegacyCountryCode POR = LegacyCountryCode._(87);

  ///  People's Republic of China
  static const LegacyCountryCode PRC = LegacyCountryCode._(88);

  ///  Republic of Paraguay
  static const LegacyCountryCode PRY = LegacyCountryCode._(89);

  ///  People's Republic of China/European Space Agency
  static const LegacyCountryCode PRES = LegacyCountryCode._(90);

  ///  State of Qatar
  static const LegacyCountryCode QAT = LegacyCountryCode._(91);

  ///  RascomStar-QAF
  static const LegacyCountryCode RASC = LegacyCountryCode._(92);

  ///  Taiwan (Republic of China)
  static const LegacyCountryCode ROC = LegacyCountryCode._(93);

  ///  Romania
  static const LegacyCountryCode ROM = LegacyCountryCode._(94);

  ///  Philippines (Republic of the Philippines)
  static const LegacyCountryCode RP = LegacyCountryCode._(95);

  ///  Republic of Rwanda
  static const LegacyCountryCode RWA = LegacyCountryCode._(96);

  ///  South Africa
  static const LegacyCountryCode SAFR = LegacyCountryCode._(97);

  ///  Saudi Arabia
  static const LegacyCountryCode SAUD = LegacyCountryCode._(98);

  ///  Republic of Sudan
  static const LegacyCountryCode SDN = LegacyCountryCode._(99);

  ///  Sea Launch
  static const LegacyCountryCode SEAL = LegacyCountryCode._(100);

  ///  SES
  static const LegacyCountryCode SES = LegacyCountryCode._(101);

  ///  Singapore/Japan
  static const LegacyCountryCode SGJP = LegacyCountryCode._(102);

  ///  Singapore
  static const LegacyCountryCode SING = LegacyCountryCode._(103);

  ///  Republic of Korea
  static const LegacyCountryCode SKOR = LegacyCountryCode._(104);

  ///  Spain
  static const LegacyCountryCode SPN = LegacyCountryCode._(105);

  ///  Singapore/Taiwan
  static const LegacyCountryCode STCT = LegacyCountryCode._(106);

  ///  Slovenia
  static const LegacyCountryCode SVN = LegacyCountryCode._(107);

  ///  Sweden
  static const LegacyCountryCode SWED = LegacyCountryCode._(108);

  ///  Switzerland
  static const LegacyCountryCode SWTZ = LegacyCountryCode._(109);

  ///  To Be Determined
  static const LegacyCountryCode TBD = LegacyCountryCode._(110);

  ///  Thailand
  static const LegacyCountryCode THAI = LegacyCountryCode._(111);

  ///  Turkmenistan/Monaco
  static const LegacyCountryCode TMMC = LegacyCountryCode._(112);

  ///  Republic of Tunisia
  static const LegacyCountryCode TUN = LegacyCountryCode._(113);

  ///  Turkey
  static const LegacyCountryCode TURK = LegacyCountryCode._(114);

  ///  United Arab Emirates
  static const LegacyCountryCode UAE = LegacyCountryCode._(115);

  ///  United Kingdom
  static const LegacyCountryCode UK = LegacyCountryCode._(116);

  ///  Ukraine
  static const LegacyCountryCode UKR = LegacyCountryCode._(117);

  ///  Unknown
  static const LegacyCountryCode UNK = LegacyCountryCode._(118);

  ///  Uruguay
  static const LegacyCountryCode URY = LegacyCountryCode._(119);

  ///  United States
  static const LegacyCountryCode US = LegacyCountryCode._(120);

  ///  United States/Brazil
  static const LegacyCountryCode USBZ = LegacyCountryCode._(121);

  ///  Vatican City State
  static const LegacyCountryCode VAT = LegacyCountryCode._(122);

  ///  Venezuela
  static const LegacyCountryCode VENZ = LegacyCountryCode._(123);

  ///  Vietnam
  static const LegacyCountryCode VTNM = LegacyCountryCode._(124);

  ///  Republic of Zimbabwe
  static const LegacyCountryCode ZWE = LegacyCountryCode._(125);
  static const Map<int, LegacyCountryCode> values = {
    0: AB,
    1: ABS,
    2: AC,
    3: ALG,
    4: ANG,
    5: ARGN,
    6: ARM,
    7: ASRA,
    8: AUS,
    9: AZER,
    10: BEL,
    11: BELA,
    12: BERM,
    13: BGD,
    14: BHUT,
    15: BOL,
    16: BRAZ,
    17: BUL,
    18: CA,
    19: CHBZ,
    20: CHTU,
    21: CHLE,
    22: CIS,
    23: COL,
    24: CRI,
    25: CZCH,
    26: DEN,
    27: DJI,
    28: ECU,
    29: EGYP,
    30: ESA,
    31: ESRO,
    32: EST,
    33: ETH,
    34: EUME,
    35: EUTE,
    36: FGER,
    37: FIN,
    38: FR,
    39: FRIT,
    40: GER,
    41: GHA,
    42: GLOB,
    43: GREC,
    44: GRSA,
    45: GUAT,
    46: HUN,
    47: IM,
    48: IND,
    49: INDO,
    50: IRAN,
    51: IRAQ,
    52: IRID,
    53: IRL,
    54: ISRA,
    55: ISRO,
    56: ISS,
    57: IT,
    58: ITSO,
    59: JPN,
    60: KAZ,
    61: KEN,
    62: LAOS,
    63: LKA,
    64: LTU,
    65: LUXE,
    66: MA,
    67: MALA,
    68: MCO,
    69: MDA,
    70: MEX,
    71: MMR,
    72: MNG,
    73: MUS,
    74: NATO,
    75: NETH,
    76: NICO,
    77: NIG,
    78: NKOR,
    79: NOR,
    80: NPL,
    81: NZ,
    82: O3B,
    83: ORB,
    84: PAKI,
    85: PERU,
    86: POL,
    87: POR,
    88: PRC,
    89: PRY,
    90: PRES,
    91: QAT,
    92: RASC,
    93: ROC,
    94: ROM,
    95: RP,
    96: RWA,
    97: SAFR,
    98: SAUD,
    99: SDN,
    100: SEAL,
    101: SES,
    102: SGJP,
    103: SING,
    104: SKOR,
    105: SPN,
    106: STCT,
    107: SVN,
    108: SWED,
    109: SWTZ,
    110: TBD,
    111: THAI,
    112: TMMC,
    113: TUN,
    114: TURK,
    115: UAE,
    116: UK,
    117: UKR,
    118: UNK,
    119: URY,
    120: US,
    121: USBZ,
    122: VAT,
    123: VENZ,
    124: VTNM,
    125: ZWE};

  static const fb.Reader<LegacyCountryCode> reader = _LegacyCountryCodeReader();

  @override
  String toString() {
    return 'LegacyCountryCode{value: $value}';
  }
}

class _LegacyCountryCodeReader extends fb.Reader<LegacyCountryCode> {
  const _LegacyCountryCodeReader();

  @override
  int get size => 1;

  @override
  LegacyCountryCode read(fb.BufferContext bc, int offset) =>
      LegacyCountryCode.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Legacy Country Code
class LCC {
  LCC._(this._bc, this._bcOffset);
  factory LCC(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LCC> reader = _LCCReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  LegacyCountryCode get OWNER => LegacyCountryCode.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0));

  @override
  String toString() {
    return 'LCC{OWNER: ${OWNER}}';
  }
}

class _LCCReader extends fb.TableReader<LCC> {
  const _LCCReader();

  @override
  LCC createObject(fb.BufferContext bc, int offset) => 
    LCC._(bc, offset);
}

class LCCBuilder {
  LCCBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addOwner(LegacyCountryCode? OWNER) {
    fbBuilder.addInt8(0, OWNER?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LCCObjectBuilder extends fb.ObjectBuilder {
  final LegacyCountryCode? _OWNER;

  LCCObjectBuilder({
    LegacyCountryCode? OWNER,
  })
      : _OWNER = OWNER;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addInt8(0, _OWNER?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LCCCOLLECTION {
  LCCCOLLECTION._(this._bc, this._bcOffset);
  factory LCCCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LCCCOLLECTION> reader = _LCCCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<LCC>? get RECORDS => const fb.ListReader<LCC>(LCC.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'LCCCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _LCCCOLLECTIONReader extends fb.TableReader<LCCCOLLECTION> {
  const _LCCCOLLECTIONReader();

  @override
  LCCCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    LCCCOLLECTION._(bc, offset);
}

class LCCCOLLECTIONBuilder {
  LCCCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LCCCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<LCCObjectBuilder>? _RECORDS;

  LCCCOLLECTIONObjectBuilder({
    List<LCCObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
