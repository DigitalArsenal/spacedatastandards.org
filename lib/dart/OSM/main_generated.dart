// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  Observation Stability Message
class OSM {
  OSM._(this._bc, this._bcOffset);
  factory OSM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OSM> reader = _OSMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Indicates whether the observation is stable or not
  bool get IS_STABLE => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  ///  The number of observations
  int get NUM_OBS => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  ///  Unique identifier for the object being observed
  String? get OBJECT_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Identifier of the sensor
  String? get ID_SENSOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Timestamp of data creation
  String? get PASS_START => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Duration of the observation pass in seconds
  int get PASS_DURATION => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);

  @override
  String toString() {
    return 'OSM{IS_STABLE: ${IS_STABLE}, NUM_OBS: ${NUM_OBS}, OBJECT_ID: ${OBJECT_ID}, ID_SENSOR: ${ID_SENSOR}, PASS_START: ${PASS_START}, PASS_DURATION: ${PASS_DURATION}}';
  }
}

class _OSMReader extends fb.TableReader<OSM> {
  const _OSMReader();

  @override
  OSM createObject(fb.BufferContext bc, int offset) => 
    OSM._(bc, offset);
}

class OSMBuilder {
  OSMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addIsStable(bool? IS_STABLE) {
    fbBuilder.addBool(0, IS_STABLE);
    return fbBuilder.offset;
  }
  int addNumObs(int? NUM_OBS) {
    fbBuilder.addInt32(1, NUM_OBS);
    return fbBuilder.offset;
  }
  int addObjectIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addPassStartOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addPassDuration(int? PASS_DURATION) {
    fbBuilder.addInt32(5, PASS_DURATION);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OSMObjectBuilder extends fb.ObjectBuilder {
  final bool? _IS_STABLE;
  final int? _NUM_OBS;
  final String? _OBJECT_ID;
  final String? _ID_SENSOR;
  final String? _PASS_START;
  final int? _PASS_DURATION;

  OSMObjectBuilder({
    bool? IS_STABLE,
    int? NUM_OBS,
    String? OBJECT_ID,
    String? ID_SENSOR,
    String? PASS_START,
    int? PASS_DURATION,
  })
      : _IS_STABLE = IS_STABLE,
        _NUM_OBS = NUM_OBS,
        _OBJECT_ID = OBJECT_ID,
        _ID_SENSOR = ID_SENSOR,
        _PASS_START = PASS_START,
        _PASS_DURATION = PASS_DURATION;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? OBJECT_IDOffset = _OBJECT_ID == null ? null
        : fbBuilder.writeString(_OBJECT_ID!);
    final int? ID_SENSOROffset = _ID_SENSOR == null ? null
        : fbBuilder.writeString(_ID_SENSOR!);
    final int? PASS_STARTOffset = _PASS_START == null ? null
        : fbBuilder.writeString(_PASS_START!);
    fbBuilder.startTable(6);
    fbBuilder.addBool(0, _IS_STABLE);
    fbBuilder.addInt32(1, _NUM_OBS);
    fbBuilder.addOffset(2, OBJECT_IDOffset);
    fbBuilder.addOffset(3, ID_SENSOROffset);
    fbBuilder.addOffset(4, PASS_STARTOffset);
    fbBuilder.addInt32(5, _PASS_DURATION);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
