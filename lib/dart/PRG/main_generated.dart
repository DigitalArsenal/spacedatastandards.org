// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  Program Description Message
class PRG {
  PRG._(this._bc, this._bcOffset);
  factory PRG(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PRG> reader = _PRGReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The name of the program
  String? get NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Hierarchical Deterministic (HD) derivation path for the program's key, used in cryptocurrency wallets
  String? get HD_KEY_PATH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Vector of standard message types used by the program
  List<String>? get MESSAGE_TYPES => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);
  ///  Vector of users associated with the program, each user can have assigned message types
  List<USR>? get USERS => const fb.ListReader<USR>(USR.reader).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'PRG{NAME: ${NAME}, HD_KEY_PATH: ${HD_KEY_PATH}, MESSAGE_TYPES: ${MESSAGE_TYPES}, USERS: ${USERS}}';
  }
}

class _PRGReader extends fb.TableReader<PRG> {
  const _PRGReader();

  @override
  PRG createObject(fb.BufferContext bc, int offset) => 
    PRG._(bc, offset);
}

class PRGBuilder {
  PRGBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHdKeyPathOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMessageTypesOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addUsersOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PRGObjectBuilder extends fb.ObjectBuilder {
  final String? _NAME;
  final String? _HD_KEY_PATH;
  final List<String>? _MESSAGE_TYPES;
  final List<USRObjectBuilder>? _USERS;

  PRGObjectBuilder({
    String? NAME,
    String? HD_KEY_PATH,
    List<String>? MESSAGE_TYPES,
    List<USRObjectBuilder>? USERS,
  })
      : _NAME = NAME,
        _HD_KEY_PATH = HD_KEY_PATH,
        _MESSAGE_TYPES = MESSAGE_TYPES,
        _USERS = USERS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? NAMEOffset = _NAME == null ? null
        : fbBuilder.writeString(_NAME!);
    final int? HD_KEY_PATHOffset = _HD_KEY_PATH == null ? null
        : fbBuilder.writeString(_HD_KEY_PATH!);
    final int? MESSAGE_TYPESOffset = _MESSAGE_TYPES == null ? null
        : fbBuilder.writeList(_MESSAGE_TYPES!.map(fbBuilder.writeString).toList());
    final int? USERSOffset = _USERS == null ? null
        : fbBuilder.writeList(_USERS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, NAMEOffset);
    fbBuilder.addOffset(1, HD_KEY_PATHOffset);
    fbBuilder.addOffset(2, MESSAGE_TYPESOffset);
    fbBuilder.addOffset(3, USERSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class USR {
  USR._(this._bc, this._bcOffset);
  factory USR(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<USR> reader = _USRReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get MESSAGE_TYPES => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'USR{ID: ${ID}, MESSAGE_TYPES: ${MESSAGE_TYPES}}';
  }
}

class _USRReader extends fb.TableReader<USR> {
  const _USRReader();

  @override
  USR createObject(fb.BufferContext bc, int offset) => 
    USR._(bc, offset);
}

class USRBuilder {
  USRBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMessageTypesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class USRObjectBuilder extends fb.ObjectBuilder {
  final String? _ID;
  final List<String>? _MESSAGE_TYPES;

  USRObjectBuilder({
    String? ID,
    List<String>? MESSAGE_TYPES,
  })
      : _ID = ID,
        _MESSAGE_TYPES = MESSAGE_TYPES;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? IDOffset = _ID == null ? null
        : fbBuilder.writeString(_ID!);
    final int? MESSAGE_TYPESOffset = _MESSAGE_TYPES == null ? null
        : fbBuilder.writeList(_MESSAGE_TYPES!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, IDOffset);
    fbBuilder.addOffset(1, MESSAGE_TYPESOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PRGCOLLECTION {
  PRGCOLLECTION._(this._bc, this._bcOffset);
  factory PRGCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PRGCOLLECTION> reader = _PRGCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<PRG>? get RECORDS => const fb.ListReader<PRG>(PRG.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PRGCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _PRGCOLLECTIONReader extends fb.TableReader<PRGCOLLECTION> {
  const _PRGCOLLECTIONReader();

  @override
  PRGCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    PRGCOLLECTION._(bc, offset);
}

class PRGCOLLECTIONBuilder {
  PRGCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PRGCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<PRGObjectBuilder>? _RECORDS;

  PRGCOLLECTIONObjectBuilder({
    List<PRGObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
