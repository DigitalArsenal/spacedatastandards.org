// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


import './main_generated.dart';

///  Launch Data Message
class LDM {
  LDM._(this._bc, this._bcOffset);
  factory LDM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LDM> reader = _LDMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Launch Site Information
  SIT? get SITE => SIT.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ///  Azimuth at Launch (in Degrees)
  double get AZIMUTH => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  References for Launch Data
  String? get REFERENCES => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Launching Agency Name
  String? get AGENCY_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Points of Contact for Launch
  List<EPM>? get POINTS_OF_CONTACT => const fb.ListReader<EPM>(EPM.reader).vTableGetNullable(_bc, _bcOffset, 12);
  ///  Operations Points of Contact for Launch
  List<EPM>? get OPERATIONS_POINTS_OF_CONTACT => const fb.ListReader<EPM>(EPM.reader).vTableGetNullable(_bc, _bcOffset, 14);
  ///  Net Launch Time (UTC Format)
  String? get NET => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Rocket Configuration Details
  ROC? get ROCKET_CONFIGURATION => ROC.reader.vTableGetNullable(_bc, _bcOffset, 18);
  ///  Mission Name
  String? get MISSION_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Description of the Mission
  String? get MISSION_DESCRIPTION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Type of the Mission (e.g., Test Flight, Satellite Deployment)
  String? get MISSION_TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Target Orbit Type (e.g., LEO, GEO)
  String? get ORBIT_TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Weather and Environmental Conditions at Launch
  String? get WEATHER_CONDITIONS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Launch Outcome and Status (e.g., Successful, Failed)
  String? get LAUNCH_STATUS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Webcast URL for the Launch
  String? get WEBCAST_URL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Media Links Related to the Launch
  List<String>? get MEDIA_LINKS => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 34);
  ///  Earliest Possible Launch Times
  List<String>? get EARLIEST_LAUNCH_TIMES => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 36);
  ///  Latest Possible Launch Times
  List<String>? get LATEST_LAUNCH_TIMES => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 38);
  ///  Launch Collision Avoidance Information
  List<String>? get LCOLA_WINDOW_CLOSURES => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 40);
  ///  Payload Information (Catalog Entities)
  List<CAT>? get OBJECTS => const fb.ListReader<CAT>(CAT.reader).vTableGetNullable(_bc, _bcOffset, 42);
  ///  Tracking and Collision Avoidance Requirements
  List<String>? get TRACKING_REQUIREMENTS => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 44);
  ///  Duration of Collision Avoidance Screen (in Seconds)
  String? get COLA_SCREEN_DURATION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Probability of Collision Threshold (Percentage)
  String? get PROBABILITY_OF_COLLISION_THRESHOLD => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Number of Required Collision Avoidance Runs
  String? get COLA_RUNS_REQUIRED => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Points of Contact for Collision Avoidance
  List<EPM>? get COLA_POINTS_OF_CONTACT => const fb.ListReader<EPM>(EPM.reader).vTableGetNullable(_bc, _bcOffset, 52);
  ///  Orbital Parameters of the Launch
  List<String>? get ORBITAL_PARAMETERS => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 54);
  ///  Burn Out Vectors for the Launch
  List<BOV>? get BURN_OUT_VECTORS => const fb.ListReader<BOV>(BOV.reader).vTableGetNullable(_bc, _bcOffset, 56);

  @override
  String toString() {
    return 'LDM{SITE: ${SITE}, AZIMUTH: ${AZIMUTH}, REFERENCES: ${REFERENCES}, AGENCY_NAME: ${AGENCY_NAME}, POINTS_OF_CONTACT: ${POINTS_OF_CONTACT}, OPERATIONS_POINTS_OF_CONTACT: ${OPERATIONS_POINTS_OF_CONTACT}, NET: ${NET}, ROCKET_CONFIGURATION: ${ROCKET_CONFIGURATION}, MISSION_NAME: ${MISSION_NAME}, MISSION_DESCRIPTION: ${MISSION_DESCRIPTION}, MISSION_TYPE: ${MISSION_TYPE}, ORBIT_TYPE: ${ORBIT_TYPE}, WEATHER_CONDITIONS: ${WEATHER_CONDITIONS}, LAUNCH_STATUS: ${LAUNCH_STATUS}, WEBCAST_URL: ${WEBCAST_URL}, MEDIA_LINKS: ${MEDIA_LINKS}, EARLIEST_LAUNCH_TIMES: ${EARLIEST_LAUNCH_TIMES}, LATEST_LAUNCH_TIMES: ${LATEST_LAUNCH_TIMES}, LCOLA_WINDOW_CLOSURES: ${LCOLA_WINDOW_CLOSURES}, OBJECTS: ${OBJECTS}, TRACKING_REQUIREMENTS: ${TRACKING_REQUIREMENTS}, COLA_SCREEN_DURATION: ${COLA_SCREEN_DURATION}, PROBABILITY_OF_COLLISION_THRESHOLD: ${PROBABILITY_OF_COLLISION_THRESHOLD}, COLA_RUNS_REQUIRED: ${COLA_RUNS_REQUIRED}, COLA_POINTS_OF_CONTACT: ${COLA_POINTS_OF_CONTACT}, ORBITAL_PARAMETERS: ${ORBITAL_PARAMETERS}, BURN_OUT_VECTORS: ${BURN_OUT_VECTORS}}';
  }
}

class _LDMReader extends fb.TableReader<LDM> {
  const _LDMReader();

  @override
  LDM createObject(fb.BufferContext bc, int offset) => 
    LDM._(bc, offset);
}

class LDMBuilder {
  LDMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(27);
  }

  int addSiteOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAzimuth(double? AZIMUTH) {
    fbBuilder.addFloat32(1, AZIMUTH);
    return fbBuilder.offset;
  }
  int addReferencesOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAgencyNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addPointsOfContactOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addOperationsPointsOfContactOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addNetOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addRocketConfigurationOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addMissionNameOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addMissionDescriptionOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addMissionTypeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addOrbitTypeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addWeatherConditionsOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addLaunchStatusOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addWebcastUrlOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addMediaLinksOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addEarliestLaunchTimesOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addLatestLaunchTimesOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addLcolaWindowClosuresOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addObjectsOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addTrackingRequirementsOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addColaScreenDurationOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addProbabilityOfCollisionThresholdOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addColaRunsRequiredOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addColaPointsOfContactOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addOrbitalParametersOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addBurnOutVectorsOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LDMObjectBuilder extends fb.ObjectBuilder {
  final SITObjectBuilder? _SITE;
  final double? _AZIMUTH;
  final String? _REFERENCES;
  final String? _AGENCY_NAME;
  final List<EPMObjectBuilder>? _POINTS_OF_CONTACT;
  final List<EPMObjectBuilder>? _OPERATIONS_POINTS_OF_CONTACT;
  final String? _NET;
  final ROCObjectBuilder? _ROCKET_CONFIGURATION;
  final String? _MISSION_NAME;
  final String? _MISSION_DESCRIPTION;
  final String? _MISSION_TYPE;
  final String? _ORBIT_TYPE;
  final String? _WEATHER_CONDITIONS;
  final String? _LAUNCH_STATUS;
  final String? _WEBCAST_URL;
  final List<String>? _MEDIA_LINKS;
  final List<String>? _EARLIEST_LAUNCH_TIMES;
  final List<String>? _LATEST_LAUNCH_TIMES;
  final List<String>? _LCOLA_WINDOW_CLOSURES;
  final List<CATObjectBuilder>? _OBJECTS;
  final List<String>? _TRACKING_REQUIREMENTS;
  final String? _COLA_SCREEN_DURATION;
  final String? _PROBABILITY_OF_COLLISION_THRESHOLD;
  final String? _COLA_RUNS_REQUIRED;
  final List<EPMObjectBuilder>? _COLA_POINTS_OF_CONTACT;
  final List<String>? _ORBITAL_PARAMETERS;
  final List<BOVObjectBuilder>? _BURN_OUT_VECTORS;

  LDMObjectBuilder({
    SITObjectBuilder? SITE,
    double? AZIMUTH,
    String? REFERENCES,
    String? AGENCY_NAME,
    List<EPMObjectBuilder>? POINTS_OF_CONTACT,
    List<EPMObjectBuilder>? OPERATIONS_POINTS_OF_CONTACT,
    String? NET,
    ROCObjectBuilder? ROCKET_CONFIGURATION,
    String? MISSION_NAME,
    String? MISSION_DESCRIPTION,
    String? MISSION_TYPE,
    String? ORBIT_TYPE,
    String? WEATHER_CONDITIONS,
    String? LAUNCH_STATUS,
    String? WEBCAST_URL,
    List<String>? MEDIA_LINKS,
    List<String>? EARLIEST_LAUNCH_TIMES,
    List<String>? LATEST_LAUNCH_TIMES,
    List<String>? LCOLA_WINDOW_CLOSURES,
    List<CATObjectBuilder>? OBJECTS,
    List<String>? TRACKING_REQUIREMENTS,
    String? COLA_SCREEN_DURATION,
    String? PROBABILITY_OF_COLLISION_THRESHOLD,
    String? COLA_RUNS_REQUIRED,
    List<EPMObjectBuilder>? COLA_POINTS_OF_CONTACT,
    List<String>? ORBITAL_PARAMETERS,
    List<BOVObjectBuilder>? BURN_OUT_VECTORS,
  })
      : _SITE = SITE,
        _AZIMUTH = AZIMUTH,
        _REFERENCES = REFERENCES,
        _AGENCY_NAME = AGENCY_NAME,
        _POINTS_OF_CONTACT = POINTS_OF_CONTACT,
        _OPERATIONS_POINTS_OF_CONTACT = OPERATIONS_POINTS_OF_CONTACT,
        _NET = NET,
        _ROCKET_CONFIGURATION = ROCKET_CONFIGURATION,
        _MISSION_NAME = MISSION_NAME,
        _MISSION_DESCRIPTION = MISSION_DESCRIPTION,
        _MISSION_TYPE = MISSION_TYPE,
        _ORBIT_TYPE = ORBIT_TYPE,
        _WEATHER_CONDITIONS = WEATHER_CONDITIONS,
        _LAUNCH_STATUS = LAUNCH_STATUS,
        _WEBCAST_URL = WEBCAST_URL,
        _MEDIA_LINKS = MEDIA_LINKS,
        _EARLIEST_LAUNCH_TIMES = EARLIEST_LAUNCH_TIMES,
        _LATEST_LAUNCH_TIMES = LATEST_LAUNCH_TIMES,
        _LCOLA_WINDOW_CLOSURES = LCOLA_WINDOW_CLOSURES,
        _OBJECTS = OBJECTS,
        _TRACKING_REQUIREMENTS = TRACKING_REQUIREMENTS,
        _COLA_SCREEN_DURATION = COLA_SCREEN_DURATION,
        _PROBABILITY_OF_COLLISION_THRESHOLD = PROBABILITY_OF_COLLISION_THRESHOLD,
        _COLA_RUNS_REQUIRED = COLA_RUNS_REQUIRED,
        _COLA_POINTS_OF_CONTACT = COLA_POINTS_OF_CONTACT,
        _ORBITAL_PARAMETERS = ORBITAL_PARAMETERS,
        _BURN_OUT_VECTORS = BURN_OUT_VECTORS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? SITEOffset = _SITE?.getOrCreateOffset(fbBuilder);
    final int? REFERENCESOffset = _REFERENCES == null ? null
        : fbBuilder.writeString(_REFERENCES!);
    final int? AGENCY_NAMEOffset = _AGENCY_NAME == null ? null
        : fbBuilder.writeString(_AGENCY_NAME!);
    final int? POINTS_OF_CONTACTOffset = _POINTS_OF_CONTACT == null ? null
        : fbBuilder.writeList(_POINTS_OF_CONTACT!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? OPERATIONS_POINTS_OF_CONTACTOffset = _OPERATIONS_POINTS_OF_CONTACT == null ? null
        : fbBuilder.writeList(_OPERATIONS_POINTS_OF_CONTACT!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? NETOffset = _NET == null ? null
        : fbBuilder.writeString(_NET!);
    final int? ROCKET_CONFIGURATIONOffset = _ROCKET_CONFIGURATION?.getOrCreateOffset(fbBuilder);
    final int? MISSION_NAMEOffset = _MISSION_NAME == null ? null
        : fbBuilder.writeString(_MISSION_NAME!);
    final int? MISSION_DESCRIPTIONOffset = _MISSION_DESCRIPTION == null ? null
        : fbBuilder.writeString(_MISSION_DESCRIPTION!);
    final int? MISSION_TYPEOffset = _MISSION_TYPE == null ? null
        : fbBuilder.writeString(_MISSION_TYPE!);
    final int? ORBIT_TYPEOffset = _ORBIT_TYPE == null ? null
        : fbBuilder.writeString(_ORBIT_TYPE!);
    final int? WEATHER_CONDITIONSOffset = _WEATHER_CONDITIONS == null ? null
        : fbBuilder.writeString(_WEATHER_CONDITIONS!);
    final int? LAUNCH_STATUSOffset = _LAUNCH_STATUS == null ? null
        : fbBuilder.writeString(_LAUNCH_STATUS!);
    final int? WEBCAST_URLOffset = _WEBCAST_URL == null ? null
        : fbBuilder.writeString(_WEBCAST_URL!);
    final int? MEDIA_LINKSOffset = _MEDIA_LINKS == null ? null
        : fbBuilder.writeList(_MEDIA_LINKS!.map(fbBuilder.writeString).toList());
    final int? EARLIEST_LAUNCH_TIMESOffset = _EARLIEST_LAUNCH_TIMES == null ? null
        : fbBuilder.writeList(_EARLIEST_LAUNCH_TIMES!.map(fbBuilder.writeString).toList());
    final int? LATEST_LAUNCH_TIMESOffset = _LATEST_LAUNCH_TIMES == null ? null
        : fbBuilder.writeList(_LATEST_LAUNCH_TIMES!.map(fbBuilder.writeString).toList());
    final int? LCOLA_WINDOW_CLOSURESOffset = _LCOLA_WINDOW_CLOSURES == null ? null
        : fbBuilder.writeList(_LCOLA_WINDOW_CLOSURES!.map(fbBuilder.writeString).toList());
    final int? OBJECTSOffset = _OBJECTS == null ? null
        : fbBuilder.writeList(_OBJECTS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? TRACKING_REQUIREMENTSOffset = _TRACKING_REQUIREMENTS == null ? null
        : fbBuilder.writeList(_TRACKING_REQUIREMENTS!.map(fbBuilder.writeString).toList());
    final int? COLA_SCREEN_DURATIONOffset = _COLA_SCREEN_DURATION == null ? null
        : fbBuilder.writeString(_COLA_SCREEN_DURATION!);
    final int? PROBABILITY_OF_COLLISION_THRESHOLDOffset = _PROBABILITY_OF_COLLISION_THRESHOLD == null ? null
        : fbBuilder.writeString(_PROBABILITY_OF_COLLISION_THRESHOLD!);
    final int? COLA_RUNS_REQUIREDOffset = _COLA_RUNS_REQUIRED == null ? null
        : fbBuilder.writeString(_COLA_RUNS_REQUIRED!);
    final int? COLA_POINTS_OF_CONTACTOffset = _COLA_POINTS_OF_CONTACT == null ? null
        : fbBuilder.writeList(_COLA_POINTS_OF_CONTACT!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? ORBITAL_PARAMETERSOffset = _ORBITAL_PARAMETERS == null ? null
        : fbBuilder.writeList(_ORBITAL_PARAMETERS!.map(fbBuilder.writeString).toList());
    final int? BURN_OUT_VECTORSOffset = _BURN_OUT_VECTORS == null ? null
        : fbBuilder.writeList(_BURN_OUT_VECTORS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(27);
    fbBuilder.addOffset(0, SITEOffset);
    fbBuilder.addFloat32(1, _AZIMUTH);
    fbBuilder.addOffset(2, REFERENCESOffset);
    fbBuilder.addOffset(3, AGENCY_NAMEOffset);
    fbBuilder.addOffset(4, POINTS_OF_CONTACTOffset);
    fbBuilder.addOffset(5, OPERATIONS_POINTS_OF_CONTACTOffset);
    fbBuilder.addOffset(6, NETOffset);
    fbBuilder.addOffset(7, ROCKET_CONFIGURATIONOffset);
    fbBuilder.addOffset(8, MISSION_NAMEOffset);
    fbBuilder.addOffset(9, MISSION_DESCRIPTIONOffset);
    fbBuilder.addOffset(10, MISSION_TYPEOffset);
    fbBuilder.addOffset(11, ORBIT_TYPEOffset);
    fbBuilder.addOffset(12, WEATHER_CONDITIONSOffset);
    fbBuilder.addOffset(13, LAUNCH_STATUSOffset);
    fbBuilder.addOffset(14, WEBCAST_URLOffset);
    fbBuilder.addOffset(15, MEDIA_LINKSOffset);
    fbBuilder.addOffset(16, EARLIEST_LAUNCH_TIMESOffset);
    fbBuilder.addOffset(17, LATEST_LAUNCH_TIMESOffset);
    fbBuilder.addOffset(18, LCOLA_WINDOW_CLOSURESOffset);
    fbBuilder.addOffset(19, OBJECTSOffset);
    fbBuilder.addOffset(20, TRACKING_REQUIREMENTSOffset);
    fbBuilder.addOffset(21, COLA_SCREEN_DURATIONOffset);
    fbBuilder.addOffset(22, PROBABILITY_OF_COLLISION_THRESHOLDOffset);
    fbBuilder.addOffset(23, COLA_RUNS_REQUIREDOffset);
    fbBuilder.addOffset(24, COLA_POINTS_OF_CONTACTOffset);
    fbBuilder.addOffset(25, ORBITAL_PARAMETERSOffset);
    fbBuilder.addOffset(26, BURN_OUT_VECTORSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
