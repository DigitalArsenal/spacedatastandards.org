// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  Country Identity Message
class CTR {
  CTR._(this._bc, this._bcOffset);
  factory CTR(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CTR> reader = _CTRReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  ISO 3166 Numeric code
  String? get ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Country name
  String? get NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  GENC code
  String? get GENC_CODE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  ISO 3166 Alpha-2 code
  String? get ALPHA_2_CODE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  ISO 3166 Alpha-3 code
  String? get ALPHA_3_CODE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Stanag code
  String? get STANAG_CODE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Internet country code top-level domain (ccTLD)
  String? get INTERNET_CCTLD => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Additional comments
  String? get COMMENT => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'CTR{ID: ${ID}, NAME: ${NAME}, GENC_CODE: ${GENC_CODE}, ALPHA_2_CODE: ${ALPHA_2_CODE}, ALPHA_3_CODE: ${ALPHA_3_CODE}, STANAG_CODE: ${STANAG_CODE}, INTERNET_CCTLD: ${INTERNET_CCTLD}, COMMENT: ${COMMENT}}';
  }
}

class _CTRReader extends fb.TableReader<CTR> {
  const _CTRReader();

  @override
  CTR createObject(fb.BufferContext bc, int offset) => 
    CTR._(bc, offset);
}

class CTRBuilder {
  CTRBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addGencCodeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAlpha2CodeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addAlpha3CodeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addStanagCodeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addInternetCctldOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addCommentOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CTRObjectBuilder extends fb.ObjectBuilder {
  final String? _ID;
  final String? _NAME;
  final String? _GENC_CODE;
  final String? _ALPHA_2_CODE;
  final String? _ALPHA_3_CODE;
  final String? _STANAG_CODE;
  final String? _INTERNET_CCTLD;
  final String? _COMMENT;

  CTRObjectBuilder({
    String? ID,
    String? NAME,
    String? GENC_CODE,
    String? ALPHA_2_CODE,
    String? ALPHA_3_CODE,
    String? STANAG_CODE,
    String? INTERNET_CCTLD,
    String? COMMENT,
  })
      : _ID = ID,
        _NAME = NAME,
        _GENC_CODE = GENC_CODE,
        _ALPHA_2_CODE = ALPHA_2_CODE,
        _ALPHA_3_CODE = ALPHA_3_CODE,
        _STANAG_CODE = STANAG_CODE,
        _INTERNET_CCTLD = INTERNET_CCTLD,
        _COMMENT = COMMENT;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? IDOffset = _ID == null ? null
        : fbBuilder.writeString(_ID!);
    final int? NAMEOffset = _NAME == null ? null
        : fbBuilder.writeString(_NAME!);
    final int? GENC_CODEOffset = _GENC_CODE == null ? null
        : fbBuilder.writeString(_GENC_CODE!);
    final int? ALPHA_2_CODEOffset = _ALPHA_2_CODE == null ? null
        : fbBuilder.writeString(_ALPHA_2_CODE!);
    final int? ALPHA_3_CODEOffset = _ALPHA_3_CODE == null ? null
        : fbBuilder.writeString(_ALPHA_3_CODE!);
    final int? STANAG_CODEOffset = _STANAG_CODE == null ? null
        : fbBuilder.writeString(_STANAG_CODE!);
    final int? INTERNET_CCTLDOffset = _INTERNET_CCTLD == null ? null
        : fbBuilder.writeString(_INTERNET_CCTLD!);
    final int? COMMENTOffset = _COMMENT == null ? null
        : fbBuilder.writeString(_COMMENT!);
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, IDOffset);
    fbBuilder.addOffset(1, NAMEOffset);
    fbBuilder.addOffset(2, GENC_CODEOffset);
    fbBuilder.addOffset(3, ALPHA_2_CODEOffset);
    fbBuilder.addOffset(4, ALPHA_3_CODEOffset);
    fbBuilder.addOffset(5, STANAG_CODEOffset);
    fbBuilder.addOffset(6, INTERNET_CCTLDOffset);
    fbBuilder.addOffset(7, COMMENTOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
