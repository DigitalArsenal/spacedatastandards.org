// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class KeyType {
  final int value;
  const KeyType._(this.value);

  factory KeyType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum KeyType');
    }
    return result;
  }

  static KeyType? _createOrNull(int? value) => 
      value == null ? null : KeyType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const KeyType signing = KeyType._(0);
  static const KeyType encryption = KeyType._(1);
  static const Map<int, KeyType> values = {
    0: signing,
    1: encryption};

  static const fb.Reader<KeyType> reader = _KeyTypeReader();

  @override
  String toString() {
    return 'KeyType{value: $value}';
  }
}

class _KeyTypeReader extends fb.Reader<KeyType> {
  const _KeyTypeReader();

  @override
  int get size => 1;

  @override
  KeyType read(fb.BufferContext bc, int offset) =>
      KeyType.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Represents cryptographic key information
class CryptoKey {
  CryptoKey._(this._bc, this._bcOffset);
  factory CryptoKey(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CryptoKey> reader = _CryptoKeyReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Public part of the cryptographic key
  String? get PUBLIC_KEY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Extended public key
  String? get XPUB => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Private part of the cryptographic key, should be kept secret
  String? get PRIVATE_KEY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Extended private key
  String? get XPRIV => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Address generated from the cryptographic key
  String? get KEY_ADDRESS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Type of the address generated from the cryptographic key
  String? get ADDRESS_TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Type of the cryptographic key (signing or encryption)
  KeyType get KEY_TYPE => KeyType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 16, 0));

  @override
  String toString() {
    return 'CryptoKey{PUBLIC_KEY: ${PUBLIC_KEY}, XPUB: ${XPUB}, PRIVATE_KEY: ${PRIVATE_KEY}, XPRIV: ${XPRIV}, KEY_ADDRESS: ${KEY_ADDRESS}, ADDRESS_TYPE: ${ADDRESS_TYPE}, KEY_TYPE: ${KEY_TYPE}}';
  }
}

class _CryptoKeyReader extends fb.TableReader<CryptoKey> {
  const _CryptoKeyReader();

  @override
  CryptoKey createObject(fb.BufferContext bc, int offset) => 
    CryptoKey._(bc, offset);
}

class CryptoKeyBuilder {
  CryptoKeyBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addXpubOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addXprivOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addKeyAddressOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addAddressTypeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addKeyType(KeyType? KEY_TYPE) {
    fbBuilder.addInt8(6, KEY_TYPE?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CryptoKeyObjectBuilder extends fb.ObjectBuilder {
  final String? _PUBLIC_KEY;
  final String? _XPUB;
  final String? _PRIVATE_KEY;
  final String? _XPRIV;
  final String? _KEY_ADDRESS;
  final String? _ADDRESS_TYPE;
  final KeyType? _KEY_TYPE;

  CryptoKeyObjectBuilder({
    String? PUBLIC_KEY,
    String? XPUB,
    String? PRIVATE_KEY,
    String? XPRIV,
    String? KEY_ADDRESS,
    String? ADDRESS_TYPE,
    KeyType? KEY_TYPE,
  })
      : _PUBLIC_KEY = PUBLIC_KEY,
        _XPUB = XPUB,
        _PRIVATE_KEY = PRIVATE_KEY,
        _XPRIV = XPRIV,
        _KEY_ADDRESS = KEY_ADDRESS,
        _ADDRESS_TYPE = ADDRESS_TYPE,
        _KEY_TYPE = KEY_TYPE;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? PUBLIC_KEYOffset = _PUBLIC_KEY == null ? null
        : fbBuilder.writeString(_PUBLIC_KEY!);
    final int? XPUBOffset = _XPUB == null ? null
        : fbBuilder.writeString(_XPUB!);
    final int? PRIVATE_KEYOffset = _PRIVATE_KEY == null ? null
        : fbBuilder.writeString(_PRIVATE_KEY!);
    final int? XPRIVOffset = _XPRIV == null ? null
        : fbBuilder.writeString(_XPRIV!);
    final int? KEY_ADDRESSOffset = _KEY_ADDRESS == null ? null
        : fbBuilder.writeString(_KEY_ADDRESS!);
    final int? ADDRESS_TYPEOffset = _ADDRESS_TYPE == null ? null
        : fbBuilder.writeString(_ADDRESS_TYPE!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, PUBLIC_KEYOffset);
    fbBuilder.addOffset(1, XPUBOffset);
    fbBuilder.addOffset(2, PRIVATE_KEYOffset);
    fbBuilder.addOffset(3, XPRIVOffset);
    fbBuilder.addOffset(4, KEY_ADDRESSOffset);
    fbBuilder.addOffset(5, ADDRESS_TYPEOffset);
    fbBuilder.addInt8(6, _KEY_TYPE?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Represents a geographic address
class Address {
  Address._(this._bc, this._bcOffset);
  factory Address(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Address> reader = _AddressReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Country of the address
  String? get COUNTRY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Region of the address (e.g., state or province)
  String? get REGION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Locality of the address (e.g., city or town)
  String? get LOCALITY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Postal code of the address
  String? get POSTAL_CODE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Street address
  String? get STREET => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Post office box number
  String? get POST_OFFICE_BOX_NUMBER => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'Address{COUNTRY: ${COUNTRY}, REGION: ${REGION}, LOCALITY: ${LOCALITY}, POSTAL_CODE: ${POSTAL_CODE}, STREET: ${STREET}, POST_OFFICE_BOX_NUMBER: ${POST_OFFICE_BOX_NUMBER}}';
  }
}

class _AddressReader extends fb.TableReader<Address> {
  const _AddressReader();

  @override
  Address createObject(fb.BufferContext bc, int offset) => 
    Address._(bc, offset);
}

class AddressBuilder {
  AddressBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addCountryOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRegionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLocalityOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPostalCodeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addStreetOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addPostOfficeBoxNumberOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AddressObjectBuilder extends fb.ObjectBuilder {
  final String? _COUNTRY;
  final String? _REGION;
  final String? _LOCALITY;
  final String? _POSTAL_CODE;
  final String? _STREET;
  final String? _POST_OFFICE_BOX_NUMBER;

  AddressObjectBuilder({
    String? COUNTRY,
    String? REGION,
    String? LOCALITY,
    String? POSTAL_CODE,
    String? STREET,
    String? POST_OFFICE_BOX_NUMBER,
  })
      : _COUNTRY = COUNTRY,
        _REGION = REGION,
        _LOCALITY = LOCALITY,
        _POSTAL_CODE = POSTAL_CODE,
        _STREET = STREET,
        _POST_OFFICE_BOX_NUMBER = POST_OFFICE_BOX_NUMBER;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? COUNTRYOffset = _COUNTRY == null ? null
        : fbBuilder.writeString(_COUNTRY!);
    final int? REGIONOffset = _REGION == null ? null
        : fbBuilder.writeString(_REGION!);
    final int? LOCALITYOffset = _LOCALITY == null ? null
        : fbBuilder.writeString(_LOCALITY!);
    final int? POSTAL_CODEOffset = _POSTAL_CODE == null ? null
        : fbBuilder.writeString(_POSTAL_CODE!);
    final int? STREETOffset = _STREET == null ? null
        : fbBuilder.writeString(_STREET!);
    final int? POST_OFFICE_BOX_NUMBEROffset = _POST_OFFICE_BOX_NUMBER == null ? null
        : fbBuilder.writeString(_POST_OFFICE_BOX_NUMBER!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, COUNTRYOffset);
    fbBuilder.addOffset(1, REGIONOffset);
    fbBuilder.addOffset(2, LOCALITYOffset);
    fbBuilder.addOffset(3, POSTAL_CODEOffset);
    fbBuilder.addOffset(4, STREETOffset);
    fbBuilder.addOffset(5, POST_OFFICE_BOX_NUMBEROffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Entity Profile Message
class EPM {
  EPM._(this._bc, this._bcOffset);
  factory EPM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EPM> reader = _EPMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Distinguished Name of the entity
  String? get DN => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Common name of the entity (person or organization)
  String? get LEGAL_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Family name or surname of the person
  String? get FAMILY_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Given name or first name of the person
  String? get GIVEN_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Additional name or middle name of the person
  String? get ADDITIONAL_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Honorific prefix preceding the person's name (e.g., Mr., Dr.)
  String? get HONORIFIC_PREFIX => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Honorific suffix following the person's name (e.g., Jr., Sr.)
  String? get HONORIFIC_SUFFIX => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Job title of the person
  String? get JOB_TITLE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Occupation of the person
  String? get OCCUPATION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Alternate names for the entity
  List<String>? get ALTERNATE_NAMES => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 22);
  ///  Email address of the entity
  String? get EMAIL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Telephone number of the entity
  String? get TELEPHONE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Cryptographic keys associated with the entity
  List<CryptoKey>? get KEYS => const fb.ListReader<CryptoKey>(CryptoKey.reader).vTableGetNullable(_bc, _bcOffset, 28);
  ///  Multiformat addresses associated with the entity
  List<String>? get MULTIFORMAT_ADDRESS => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);

  @override
  String toString() {
    return 'EPM{DN: ${DN}, LEGAL_NAME: ${LEGAL_NAME}, FAMILY_NAME: ${FAMILY_NAME}, GIVEN_NAME: ${GIVEN_NAME}, ADDITIONAL_NAME: ${ADDITIONAL_NAME}, HONORIFIC_PREFIX: ${HONORIFIC_PREFIX}, HONORIFIC_SUFFIX: ${HONORIFIC_SUFFIX}, JOB_TITLE: ${JOB_TITLE}, OCCUPATION: ${OCCUPATION}, ALTERNATE_NAMES: ${ALTERNATE_NAMES}, EMAIL: ${EMAIL}, TELEPHONE: ${TELEPHONE}, KEYS: ${KEYS}, MULTIFORMAT_ADDRESS: ${MULTIFORMAT_ADDRESS}}';
  }
}

class _EPMReader extends fb.TableReader<EPM> {
  const _EPMReader();

  @override
  EPM createObject(fb.BufferContext bc, int offset) => 
    EPM._(bc, offset);
}

class EPMBuilder {
  EPMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(14);
  }

  int addDnOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addLegalNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFamilyNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addGivenNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addAdditionalNameOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addHonorificPrefixOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addHonorificSuffixOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addJobTitleOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOccupationOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addAlternateNamesOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addEmailOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addTelephoneOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addKeysOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addMultiformatAddressOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EPMObjectBuilder extends fb.ObjectBuilder {
  final String? _DN;
  final String? _LEGAL_NAME;
  final String? _FAMILY_NAME;
  final String? _GIVEN_NAME;
  final String? _ADDITIONAL_NAME;
  final String? _HONORIFIC_PREFIX;
  final String? _HONORIFIC_SUFFIX;
  final String? _JOB_TITLE;
  final String? _OCCUPATION;
  final List<String>? _ALTERNATE_NAMES;
  final String? _EMAIL;
  final String? _TELEPHONE;
  final List<CryptoKeyObjectBuilder>? _KEYS;
  final List<String>? _MULTIFORMAT_ADDRESS;

  EPMObjectBuilder({
    String? DN,
    String? LEGAL_NAME,
    String? FAMILY_NAME,
    String? GIVEN_NAME,
    String? ADDITIONAL_NAME,
    String? HONORIFIC_PREFIX,
    String? HONORIFIC_SUFFIX,
    String? JOB_TITLE,
    String? OCCUPATION,
    List<String>? ALTERNATE_NAMES,
    String? EMAIL,
    String? TELEPHONE,
    List<CryptoKeyObjectBuilder>? KEYS,
    List<String>? MULTIFORMAT_ADDRESS,
  })
      : _DN = DN,
        _LEGAL_NAME = LEGAL_NAME,
        _FAMILY_NAME = FAMILY_NAME,
        _GIVEN_NAME = GIVEN_NAME,
        _ADDITIONAL_NAME = ADDITIONAL_NAME,
        _HONORIFIC_PREFIX = HONORIFIC_PREFIX,
        _HONORIFIC_SUFFIX = HONORIFIC_SUFFIX,
        _JOB_TITLE = JOB_TITLE,
        _OCCUPATION = OCCUPATION,
        _ALTERNATE_NAMES = ALTERNATE_NAMES,
        _EMAIL = EMAIL,
        _TELEPHONE = TELEPHONE,
        _KEYS = KEYS,
        _MULTIFORMAT_ADDRESS = MULTIFORMAT_ADDRESS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? DNOffset = _DN == null ? null
        : fbBuilder.writeString(_DN!);
    final int? LEGAL_NAMEOffset = _LEGAL_NAME == null ? null
        : fbBuilder.writeString(_LEGAL_NAME!);
    final int? FAMILY_NAMEOffset = _FAMILY_NAME == null ? null
        : fbBuilder.writeString(_FAMILY_NAME!);
    final int? GIVEN_NAMEOffset = _GIVEN_NAME == null ? null
        : fbBuilder.writeString(_GIVEN_NAME!);
    final int? ADDITIONAL_NAMEOffset = _ADDITIONAL_NAME == null ? null
        : fbBuilder.writeString(_ADDITIONAL_NAME!);
    final int? HONORIFIC_PREFIXOffset = _HONORIFIC_PREFIX == null ? null
        : fbBuilder.writeString(_HONORIFIC_PREFIX!);
    final int? HONORIFIC_SUFFIXOffset = _HONORIFIC_SUFFIX == null ? null
        : fbBuilder.writeString(_HONORIFIC_SUFFIX!);
    final int? JOB_TITLEOffset = _JOB_TITLE == null ? null
        : fbBuilder.writeString(_JOB_TITLE!);
    final int? OCCUPATIONOffset = _OCCUPATION == null ? null
        : fbBuilder.writeString(_OCCUPATION!);
    final int? ALTERNATE_NAMESOffset = _ALTERNATE_NAMES == null ? null
        : fbBuilder.writeList(_ALTERNATE_NAMES!.map(fbBuilder.writeString).toList());
    final int? EMAILOffset = _EMAIL == null ? null
        : fbBuilder.writeString(_EMAIL!);
    final int? TELEPHONEOffset = _TELEPHONE == null ? null
        : fbBuilder.writeString(_TELEPHONE!);
    final int? KEYSOffset = _KEYS == null ? null
        : fbBuilder.writeList(_KEYS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? MULTIFORMAT_ADDRESSOffset = _MULTIFORMAT_ADDRESS == null ? null
        : fbBuilder.writeList(_MULTIFORMAT_ADDRESS!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(14);
    fbBuilder.addOffset(0, DNOffset);
    fbBuilder.addOffset(1, LEGAL_NAMEOffset);
    fbBuilder.addOffset(2, FAMILY_NAMEOffset);
    fbBuilder.addOffset(3, GIVEN_NAMEOffset);
    fbBuilder.addOffset(4, ADDITIONAL_NAMEOffset);
    fbBuilder.addOffset(5, HONORIFIC_PREFIXOffset);
    fbBuilder.addOffset(6, HONORIFIC_SUFFIXOffset);
    fbBuilder.addOffset(7, JOB_TITLEOffset);
    fbBuilder.addOffset(8, OCCUPATIONOffset);
    fbBuilder.addOffset(9, ALTERNATE_NAMESOffset);
    fbBuilder.addOffset(10, EMAILOffset);
    fbBuilder.addOffset(11, TELEPHONEOffset);
    fbBuilder.addOffset(12, KEYSOffset);
    fbBuilder.addOffset(13, MULTIFORMAT_ADDRESSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Collection of Entity Profile Messages
class EPMCOLLECTION {
  EPMCOLLECTION._(this._bc, this._bcOffset);
  factory EPMCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EPMCOLLECTION> reader = _EPMCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Records of Entity Profile Messages
  List<EPM>? get RECORDS => const fb.ListReader<EPM>(EPM.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'EPMCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _EPMCOLLECTIONReader extends fb.TableReader<EPMCOLLECTION> {
  const _EPMCOLLECTIONReader();

  @override
  EPMCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    EPMCOLLECTION._(bc, offset);
}

class EPMCOLLECTIONBuilder {
  EPMCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EPMCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<EPMObjectBuilder>? _RECORDS;

  EPMCOLLECTIONObjectBuilder({
    List<EPMObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
