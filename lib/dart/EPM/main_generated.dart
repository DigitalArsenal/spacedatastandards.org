// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  Enumeration for LDAP attribute types relevant to Distinguished Names
class LdifattributeType {
  final int value;
  const LdifattributeType._(this.value);

  factory LdifattributeType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum LdifattributeType');
    }
    return result;
  }

  static LdifattributeType? _createOrNull(int? value) => 
      value == null ? null : LdifattributeType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Common Name
  static const LdifattributeType CN = LdifattributeType._(0);

  ///  Organizational Unit Name
  static const LdifattributeType OU = LdifattributeType._(1);

  ///  Organization Name
  static const LdifattributeType O = LdifattributeType._(2);

  ///  Domain Component
  static const LdifattributeType DC = LdifattributeType._(3);

  ///  Country Name
  static const LdifattributeType C = LdifattributeType._(4);

  ///  Surname
  static const LdifattributeType SN = LdifattributeType._(5);
  static const Map<int, LdifattributeType> values = {
    0: CN,
    1: OU,
    2: O,
    3: DC,
    4: C,
    5: SN};

  static const fb.Reader<LdifattributeType> reader = _LdifattributeTypeReader();

  @override
  String toString() {
    return 'LdifattributeType{value: $value}';
  }
}

class _LdifattributeTypeReader extends fb.Reader<LdifattributeType> {
  const _LdifattributeTypeReader();

  @override
  int get size => 1;

  @override
  LdifattributeType read(fb.BufferContext bc, int offset) =>
      LdifattributeType.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Union for specific attributes, distinguishing between Person and Organization
class SpecificAttributesTypeId {
  final int value;
  const SpecificAttributesTypeId._(this.value);

  factory SpecificAttributesTypeId.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SpecificAttributesTypeId');
    }
    return result;
  }

  static SpecificAttributesTypeId? _createOrNull(int? value) => 
      value == null ? null : SpecificAttributesTypeId.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  static const SpecificAttributesTypeId NONE = SpecificAttributesTypeId._(0);
  static const SpecificAttributesTypeId PersonAttributes = SpecificAttributesTypeId._(1);
  static const SpecificAttributesTypeId OrganizationAttributes = SpecificAttributesTypeId._(2);
  static const Map<int, SpecificAttributesTypeId> values = {
    0: NONE,
    1: PersonAttributes,
    2: OrganizationAttributes};

  static const fb.Reader<SpecificAttributesTypeId> reader = _SpecificAttributesTypeIdReader();

  @override
  String toString() {
    return 'SpecificAttributesTypeId{value: $value}';
  }
}

class _SpecificAttributesTypeIdReader extends fb.Reader<SpecificAttributesTypeId> {
  const _SpecificAttributesTypeIdReader();

  @override
  int get size => 1;

  @override
  SpecificAttributesTypeId read(fb.BufferContext bc, int offset) =>
      SpecificAttributesTypeId.fromValue(const fb.Uint8Reader().read(bc, offset));
}

///  Represents a component of a Distinguished Name (DN) in LDAP
class Dncomponent {
  Dncomponent._(this._bc, this._bcOffset);
  factory Dncomponent(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Dncomponent> reader = _DncomponentReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The type of the DN component
  LdifattributeType get TYPE => LdifattributeType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0));
  ///  The value of the DN component
  String? get VALUE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Dncomponent{TYPE: ${TYPE}, VALUE: ${VALUE}}';
  }
}

class _DncomponentReader extends fb.TableReader<Dncomponent> {
  const _DncomponentReader();

  @override
  Dncomponent createObject(fb.BufferContext bc, int offset) => 
    Dncomponent._(bc, offset);
}

class DncomponentBuilder {
  DncomponentBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addType(LdifattributeType? TYPE) {
    fbBuilder.addInt8(0, TYPE?.value);
    return fbBuilder.offset;
  }
  int addValueOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DncomponentObjectBuilder extends fb.ObjectBuilder {
  final LdifattributeType? _TYPE;
  final String? _VALUE;

  DncomponentObjectBuilder({
    LdifattributeType? TYPE,
    String? VALUE,
  })
      : _TYPE = TYPE,
        _VALUE = VALUE;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? VALUEOffset = _VALUE == null ? null
        : fbBuilder.writeString(_VALUE!);
    fbBuilder.startTable(2);
    fbBuilder.addInt8(0, _TYPE?.value);
    fbBuilder.addOffset(1, VALUEOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Represents a Distinguished Name composed of DNComponents
class DistinguishedName {
  DistinguishedName._(this._bc, this._bcOffset);
  factory DistinguishedName(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DistinguishedName> reader = _DistinguishedNameReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  The sequence of components making up the DN
  List<Dncomponent>? get COMPONENTS => const fb.ListReader<Dncomponent>(Dncomponent.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'DistinguishedName{COMPONENTS: ${COMPONENTS}}';
  }
}

class _DistinguishedNameReader extends fb.TableReader<DistinguishedName> {
  const _DistinguishedNameReader();

  @override
  DistinguishedName createObject(fb.BufferContext bc, int offset) => 
    DistinguishedName._(bc, offset);
}

class DistinguishedNameBuilder {
  DistinguishedNameBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addComponentsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DistinguishedNameObjectBuilder extends fb.ObjectBuilder {
  final List<DncomponentObjectBuilder>? _COMPONENTS;

  DistinguishedNameObjectBuilder({
    List<DncomponentObjectBuilder>? COMPONENTS,
  })
      : _COMPONENTS = COMPONENTS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? COMPONENTSOffset = _COMPONENTS == null ? null
        : fbBuilder.writeList(_COMPONENTS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, COMPONENTSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Represents cryptographic key information
class CryptoKey {
  CryptoKey._(this._bc, this._bcOffset);
  factory CryptoKey(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CryptoKey> reader = _CryptoKeyReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Public part of the cryptographic key
  String? get PUBLIC_KEY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Extended public key
  String? get XPUB => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Private part of the cryptographic key, should be kept secret
  String? get PRIVATE_KEY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Extended private key
  String? get XPRIV => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'CryptoKey{PUBLIC_KEY: ${PUBLIC_KEY}, XPUB: ${XPUB}, PRIVATE_KEY: ${PRIVATE_KEY}, XPRIV: ${XPRIV}}';
  }
}

class _CryptoKeyReader extends fb.TableReader<CryptoKey> {
  const _CryptoKeyReader();

  @override
  CryptoKey createObject(fb.BufferContext bc, int offset) => 
    CryptoKey._(bc, offset);
}

class CryptoKeyBuilder {
  CryptoKeyBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addXpubOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addXprivOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CryptoKeyObjectBuilder extends fb.ObjectBuilder {
  final String? _PUBLIC_KEY;
  final String? _XPUB;
  final String? _PRIVATE_KEY;
  final String? _XPRIV;

  CryptoKeyObjectBuilder({
    String? PUBLIC_KEY,
    String? XPUB,
    String? PRIVATE_KEY,
    String? XPRIV,
  })
      : _PUBLIC_KEY = PUBLIC_KEY,
        _XPUB = XPUB,
        _PRIVATE_KEY = PRIVATE_KEY,
        _XPRIV = XPRIV;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? PUBLIC_KEYOffset = _PUBLIC_KEY == null ? null
        : fbBuilder.writeString(_PUBLIC_KEY!);
    final int? XPUBOffset = _XPUB == null ? null
        : fbBuilder.writeString(_XPUB!);
    final int? PRIVATE_KEYOffset = _PRIVATE_KEY == null ? null
        : fbBuilder.writeString(_PRIVATE_KEY!);
    final int? XPRIVOffset = _XPRIV == null ? null
        : fbBuilder.writeString(_XPRIV!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, PUBLIC_KEYOffset);
    fbBuilder.addOffset(1, XPUBOffset);
    fbBuilder.addOffset(2, PRIVATE_KEYOffset);
    fbBuilder.addOffset(3, XPRIVOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Represents a geographic address
class Address {
  Address._(this._bc, this._bcOffset);
  factory Address(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Address> reader = _AddressReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Country of the address
  String? get COUNTRY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Region of the address (e.g., state or province)
  String? get REGION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Locality of the address (e.g., city or town)
  String? get LOCALITY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Postal code of the address
  String? get POSTAL_CODE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Street address
  String? get STREET => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Post office box number
  String? get POST_OFFICE_BOX_NUMBER => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'Address{COUNTRY: ${COUNTRY}, REGION: ${REGION}, LOCALITY: ${LOCALITY}, POSTAL_CODE: ${POSTAL_CODE}, STREET: ${STREET}, POST_OFFICE_BOX_NUMBER: ${POST_OFFICE_BOX_NUMBER}}';
  }
}

class _AddressReader extends fb.TableReader<Address> {
  const _AddressReader();

  @override
  Address createObject(fb.BufferContext bc, int offset) => 
    Address._(bc, offset);
}

class AddressBuilder {
  AddressBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addCountryOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRegionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLocalityOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPostalCodeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addStreetOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addPostOfficeBoxNumberOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AddressObjectBuilder extends fb.ObjectBuilder {
  final String? _COUNTRY;
  final String? _REGION;
  final String? _LOCALITY;
  final String? _POSTAL_CODE;
  final String? _STREET;
  final String? _POST_OFFICE_BOX_NUMBER;

  AddressObjectBuilder({
    String? COUNTRY,
    String? REGION,
    String? LOCALITY,
    String? POSTAL_CODE,
    String? STREET,
    String? POST_OFFICE_BOX_NUMBER,
  })
      : _COUNTRY = COUNTRY,
        _REGION = REGION,
        _LOCALITY = LOCALITY,
        _POSTAL_CODE = POSTAL_CODE,
        _STREET = STREET,
        _POST_OFFICE_BOX_NUMBER = POST_OFFICE_BOX_NUMBER;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? COUNTRYOffset = _COUNTRY == null ? null
        : fbBuilder.writeString(_COUNTRY!);
    final int? REGIONOffset = _REGION == null ? null
        : fbBuilder.writeString(_REGION!);
    final int? LOCALITYOffset = _LOCALITY == null ? null
        : fbBuilder.writeString(_LOCALITY!);
    final int? POSTAL_CODEOffset = _POSTAL_CODE == null ? null
        : fbBuilder.writeString(_POSTAL_CODE!);
    final int? STREETOffset = _STREET == null ? null
        : fbBuilder.writeString(_STREET!);
    final int? POST_OFFICE_BOX_NUMBEROffset = _POST_OFFICE_BOX_NUMBER == null ? null
        : fbBuilder.writeString(_POST_OFFICE_BOX_NUMBER!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, COUNTRYOffset);
    fbBuilder.addOffset(1, REGIONOffset);
    fbBuilder.addOffset(2, LOCALITYOffset);
    fbBuilder.addOffset(3, POSTAL_CODEOffset);
    fbBuilder.addOffset(4, STREETOffset);
    fbBuilder.addOffset(5, POST_OFFICE_BOX_NUMBEROffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Specific attributes for a Person
class PersonAttributes {
  PersonAttributes._(this._bc, this._bcOffset);
  factory PersonAttributes(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PersonAttributes> reader = _PersonAttributesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Family name or surname of the person
  String? get FAMILY_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Given name or first name of the person
  String? get GIVEN_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Additional name or middle name of the person
  String? get ADDITIONAL_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Honorific prefix preceding the person's name (e.g., Mr., Dr.)
  String? get HONORIFIC_PREFIX => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Honorific suffix following the person's name (e.g., Jr., Sr.)
  String? get HONORIFIC_SUFFIX => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Job title of the person
  String? get JOB_TITLE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Occupation of the person
  String? get OCCUPATION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'PersonAttributes{FAMILY_NAME: ${FAMILY_NAME}, GIVEN_NAME: ${GIVEN_NAME}, ADDITIONAL_NAME: ${ADDITIONAL_NAME}, HONORIFIC_PREFIX: ${HONORIFIC_PREFIX}, HONORIFIC_SUFFIX: ${HONORIFIC_SUFFIX}, JOB_TITLE: ${JOB_TITLE}, OCCUPATION: ${OCCUPATION}}';
  }
}

class _PersonAttributesReader extends fb.TableReader<PersonAttributes> {
  const _PersonAttributesReader();

  @override
  PersonAttributes createObject(fb.BufferContext bc, int offset) => 
    PersonAttributes._(bc, offset);
}

class PersonAttributesBuilder {
  PersonAttributesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addFamilyNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addGivenNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAdditionalNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addHonorificPrefixOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addHonorificSuffixOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addJobTitleOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addOccupationOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersonAttributesObjectBuilder extends fb.ObjectBuilder {
  final String? _FAMILY_NAME;
  final String? _GIVEN_NAME;
  final String? _ADDITIONAL_NAME;
  final String? _HONORIFIC_PREFIX;
  final String? _HONORIFIC_SUFFIX;
  final String? _JOB_TITLE;
  final String? _OCCUPATION;

  PersonAttributesObjectBuilder({
    String? FAMILY_NAME,
    String? GIVEN_NAME,
    String? ADDITIONAL_NAME,
    String? HONORIFIC_PREFIX,
    String? HONORIFIC_SUFFIX,
    String? JOB_TITLE,
    String? OCCUPATION,
  })
      : _FAMILY_NAME = FAMILY_NAME,
        _GIVEN_NAME = GIVEN_NAME,
        _ADDITIONAL_NAME = ADDITIONAL_NAME,
        _HONORIFIC_PREFIX = HONORIFIC_PREFIX,
        _HONORIFIC_SUFFIX = HONORIFIC_SUFFIX,
        _JOB_TITLE = JOB_TITLE,
        _OCCUPATION = OCCUPATION;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? FAMILY_NAMEOffset = _FAMILY_NAME == null ? null
        : fbBuilder.writeString(_FAMILY_NAME!);
    final int? GIVEN_NAMEOffset = _GIVEN_NAME == null ? null
        : fbBuilder.writeString(_GIVEN_NAME!);
    final int? ADDITIONAL_NAMEOffset = _ADDITIONAL_NAME == null ? null
        : fbBuilder.writeString(_ADDITIONAL_NAME!);
    final int? HONORIFIC_PREFIXOffset = _HONORIFIC_PREFIX == null ? null
        : fbBuilder.writeString(_HONORIFIC_PREFIX!);
    final int? HONORIFIC_SUFFIXOffset = _HONORIFIC_SUFFIX == null ? null
        : fbBuilder.writeString(_HONORIFIC_SUFFIX!);
    final int? JOB_TITLEOffset = _JOB_TITLE == null ? null
        : fbBuilder.writeString(_JOB_TITLE!);
    final int? OCCUPATIONOffset = _OCCUPATION == null ? null
        : fbBuilder.writeString(_OCCUPATION!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, FAMILY_NAMEOffset);
    fbBuilder.addOffset(1, GIVEN_NAMEOffset);
    fbBuilder.addOffset(2, ADDITIONAL_NAMEOffset);
    fbBuilder.addOffset(3, HONORIFIC_PREFIXOffset);
    fbBuilder.addOffset(4, HONORIFIC_SUFFIXOffset);
    fbBuilder.addOffset(5, JOB_TITLEOffset);
    fbBuilder.addOffset(6, OCCUPATIONOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Specific attributes for an Organization
class OrganizationAttributes {
  OrganizationAttributes._(this._bc, this._bcOffset);
  factory OrganizationAttributes(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OrganizationAttributes> reader = _OrganizationAttributesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Legal name of the organization
  String? get LEGAL_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'OrganizationAttributes{LEGAL_NAME: ${LEGAL_NAME}}';
  }
}

class _OrganizationAttributesReader extends fb.TableReader<OrganizationAttributes> {
  const _OrganizationAttributesReader();

  @override
  OrganizationAttributes createObject(fb.BufferContext bc, int offset) => 
    OrganizationAttributes._(bc, offset);
}

class OrganizationAttributesBuilder {
  OrganizationAttributesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addLegalNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OrganizationAttributesObjectBuilder extends fb.ObjectBuilder {
  final String? _LEGAL_NAME;

  OrganizationAttributesObjectBuilder({
    String? LEGAL_NAME,
  })
      : _LEGAL_NAME = LEGAL_NAME;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? LEGAL_NAMEOffset = _LEGAL_NAME == null ? null
        : fbBuilder.writeString(_LEGAL_NAME!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, LEGAL_NAMEOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Represents an entity with common fields and specific attributes for Person or Organization
class EPM {
  EPM._(this._bc, this._bcOffset);
  factory EPM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EPM> reader = _EPMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Common name of the entity (person or organization)
  String? get NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Alternate names for the entity
  List<String>? get ALTERNATE_NAMES => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  ///  Email address of the entity
  String? get EMAIL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Telephone number of the entity
  String? get TELEPHONE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Cryptographic keys associated with the entity
  List<CryptoKey>? get KEYS => const fb.ListReader<CryptoKey>(CryptoKey.reader).vTableGetNullable(_bc, _bcOffset, 12);
  ///  Multiformat addresses associated with the entity
  List<String>? get MULTIFORMAT_ADDRESS => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 14);
  SpecificAttributesTypeId? get attributesType => SpecificAttributesTypeId._createOrNull(const fb.Uint8Reader().vTableGetNullable(_bc, _bcOffset, 16));
  ///  Specific attributes for the entity, either Person or Organization
  dynamic get ATTRIBUTES {
    switch (ATTRIBUTESType?.value) {
      case 1: return PersonAttributes.reader.vTableGetNullable(_bc, _bcOffset, 18);
      case 2: return OrganizationAttributes.reader.vTableGetNullable(_bc, _bcOffset, 18);
      default: return null;
    }
  }

  @override
  String toString() {
    return 'EPM{NAME: ${NAME}, ALTERNATE_NAMES: ${ALTERNATE_NAMES}, EMAIL: ${EMAIL}, TELEPHONE: ${TELEPHONE}, KEYS: ${KEYS}, MULTIFORMAT_ADDRESS: ${MULTIFORMAT_ADDRESS}, attributesType: ${attributesType}, ATTRIBUTES: ${ATTRIBUTES}}';
  }
}

class _EPMReader extends fb.TableReader<EPM> {
  const _EPMReader();

  @override
  EPM createObject(fb.BufferContext bc, int offset) => 
    EPM._(bc, offset);
}

class EPMBuilder {
  EPMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAlternateNamesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addEmailOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTelephoneOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addKeysOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMultiformatAddressOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addAttributesType(SpecificAttributesTypeId? attributesType) {
    fbBuilder.addUint8(6, attributesType?.value);
    return fbBuilder.offset;
  }
  int addAttributesOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EPMObjectBuilder extends fb.ObjectBuilder {
  final String? _NAME;
  final List<String>? _ALTERNATE_NAMES;
  final String? _EMAIL;
  final String? _TELEPHONE;
  final List<CryptoKeyObjectBuilder>? _KEYS;
  final List<String>? _MULTIFORMAT_ADDRESS;
  final SpecificAttributesTypeId? _attributesType;
  final dynamic _ATTRIBUTES;

  EPMObjectBuilder({
    String? NAME,
    List<String>? ALTERNATE_NAMES,
    String? EMAIL,
    String? TELEPHONE,
    List<CryptoKeyObjectBuilder>? KEYS,
    List<String>? MULTIFORMAT_ADDRESS,
    SpecificAttributesTypeId? attributesType,
    dynamic ATTRIBUTES,
  })
      : _NAME = NAME,
        _ALTERNATE_NAMES = ALTERNATE_NAMES,
        _EMAIL = EMAIL,
        _TELEPHONE = TELEPHONE,
        _KEYS = KEYS,
        _MULTIFORMAT_ADDRESS = MULTIFORMAT_ADDRESS,
        _attributesType = attributesType,
        _ATTRIBUTES = ATTRIBUTES;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? NAMEOffset = _NAME == null ? null
        : fbBuilder.writeString(_NAME!);
    final int? ALTERNATE_NAMESOffset = _ALTERNATE_NAMES == null ? null
        : fbBuilder.writeList(_ALTERNATE_NAMES!.map(fbBuilder.writeString).toList());
    final int? EMAILOffset = _EMAIL == null ? null
        : fbBuilder.writeString(_EMAIL!);
    final int? TELEPHONEOffset = _TELEPHONE == null ? null
        : fbBuilder.writeString(_TELEPHONE!);
    final int? KEYSOffset = _KEYS == null ? null
        : fbBuilder.writeList(_KEYS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? MULTIFORMAT_ADDRESSOffset = _MULTIFORMAT_ADDRESS == null ? null
        : fbBuilder.writeList(_MULTIFORMAT_ADDRESS!.map(fbBuilder.writeString).toList());
    final int? ATTRIBUTESOffset = _ATTRIBUTES?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, NAMEOffset);
    fbBuilder.addOffset(1, ALTERNATE_NAMESOffset);
    fbBuilder.addOffset(2, EMAILOffset);
    fbBuilder.addOffset(3, TELEPHONEOffset);
    fbBuilder.addOffset(4, KEYSOffset);
    fbBuilder.addOffset(5, MULTIFORMAT_ADDRESSOffset);
    fbBuilder.addUint8(6, _attributesType?.value);
    fbBuilder.addOffset(7, ATTRIBUTESOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Collection of Entity Profile Messages
class EPMCOLLECTION {
  EPMCOLLECTION._(this._bc, this._bcOffset);
  factory EPMCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EPMCOLLECTION> reader = _EPMCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Records of Entity Profile Messages
  List<EPM>? get RECORDS => const fb.ListReader<EPM>(EPM.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'EPMCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _EPMCOLLECTIONReader extends fb.TableReader<EPMCOLLECTION> {
  const _EPMCOLLECTIONReader();

  @override
  EPMCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    EPMCOLLECTION._(bc, offset);
}

class EPMCOLLECTIONBuilder {
  EPMCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EPMCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<EPMObjectBuilder>? _RECORDS;

  EPMCOLLECTIONObjectBuilder({
    List<EPMObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
