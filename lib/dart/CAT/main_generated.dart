// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


import './main_generated.dart';

class ObjectType {
  final int value;
  const ObjectType._(this.value);

  factory ObjectType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ObjectType');
    }
    return result;
  }

  static ObjectType? _createOrNull(int? value) => 
      value == null ? null : ObjectType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  0
  static const ObjectType PAYLOAD = ObjectType._(0);

  ///  1
  static const ObjectType ROCKET_BODY = ObjectType._(1);

  ///  2
  static const ObjectType DEBRIS = ObjectType._(2);

  ///  3
  static const ObjectType UNKNOWN = ObjectType._(3);
  static const Map<int, ObjectType> values = {
    0: PAYLOAD,
    1: ROCKET_BODY,
    2: DEBRIS,
    3: UNKNOWN};

  static const fb.Reader<ObjectType> reader = _ObjectTypeReader();

  @override
  String toString() {
    return 'ObjectType{value: $value}';
  }
}

class _ObjectTypeReader extends fb.Reader<ObjectType> {
  const _ObjectTypeReader();

  @override
  int get size => 1;

  @override
  ObjectType read(fb.BufferContext bc, int offset) =>
      ObjectType.fromValue(const fb.Int8Reader().read(bc, offset));
}

class OpsStatusCode {
  final int value;
  const OpsStatusCode._(this.value);

  factory OpsStatusCode.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OpsStatusCode');
    }
    return result;
  }

  static OpsStatusCode? _createOrNull(int? value) => 
      value == null ? null : OpsStatusCode.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 7;
  static bool containsValue(int value) => values.containsKey(value);

  ///  +
  static const OpsStatusCode OPERATIONAL = OpsStatusCode._(0);

  ///  -
  static const OpsStatusCode NONOPERATIONAL = OpsStatusCode._(1);

  ///  P
  static const OpsStatusCode PARTIALLY_OPERATIONAL = OpsStatusCode._(2);

  ///  B
  static const OpsStatusCode BACKUP_STANDBY = OpsStatusCode._(3);

  ///  S
  static const OpsStatusCode SPARE = OpsStatusCode._(4);

  ///  X
  static const OpsStatusCode EXTENDED_MISSION = OpsStatusCode._(5);

  ///  D
  static const OpsStatusCode DECAYED = OpsStatusCode._(6);

  ///  ?
  static const OpsStatusCode UNKNOWN = OpsStatusCode._(7);
  static const Map<int, OpsStatusCode> values = {
    0: OPERATIONAL,
    1: NONOPERATIONAL,
    2: PARTIALLY_OPERATIONAL,
    3: BACKUP_STANDBY,
    4: SPARE,
    5: EXTENDED_MISSION,
    6: DECAYED,
    7: UNKNOWN};

  static const fb.Reader<OpsStatusCode> reader = _OpsStatusCodeReader();

  @override
  String toString() {
    return 'OpsStatusCode{value: $value}';
  }
}

class _OpsStatusCodeReader extends fb.Reader<OpsStatusCode> {
  const _OpsStatusCodeReader();

  @override
  int get size => 1;

  @override
  OpsStatusCode read(fb.BufferContext bc, int offset) =>
      OpsStatusCode.fromValue(const fb.Int8Reader().read(bc, offset));
}

class DataStatusCode {
  final int value;
  const DataStatusCode._(this.value);

  factory DataStatusCode.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum DataStatusCode');
    }
    return result;
  }

  static DataStatusCode? _createOrNull(int? value) => 
      value == null ? null : DataStatusCode.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  NCE
  static const DataStatusCode NO_CURRENT_ELEMENTS = DataStatusCode._(0);

  ///  NIE
  static const DataStatusCode NO_INITIAL_ELEMENTS = DataStatusCode._(1);

  ///  NEA
  static const DataStatusCode NO_ELEMENTS_AVAILABLE = DataStatusCode._(2);

  ///  OK
  static const DataStatusCode OK = DataStatusCode._(3);
  static const Map<int, DataStatusCode> values = {
    0: NO_CURRENT_ELEMENTS,
    1: NO_INITIAL_ELEMENTS,
    2: NO_ELEMENTS_AVAILABLE,
    3: OK};

  static const fb.Reader<DataStatusCode> reader = _DataStatusCodeReader();

  @override
  String toString() {
    return 'DataStatusCode{value: $value}';
  }
}

class _DataStatusCodeReader extends fb.Reader<DataStatusCode> {
  const _DataStatusCodeReader();

  @override
  int get size => 1;

  @override
  DataStatusCode read(fb.BufferContext bc, int offset) =>
      DataStatusCode.fromValue(const fb.Int8Reader().read(bc, offset));
}

class OrbitType {
  final int value;
  const OrbitType._(this.value);

  factory OrbitType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OrbitType');
    }
    return result;
  }

  static OrbitType? _createOrNull(int? value) => 
      value == null ? null : OrbitType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  0
  static const OrbitType ORBIT = OrbitType._(0);

  ///  1
  static const OrbitType LANDING = OrbitType._(1);

  ///  2
  static const OrbitType IMPACT = OrbitType._(2);

  ///  3
  static const OrbitType DOCKED = OrbitType._(3);

  ///  4
  static const OrbitType ROUNDTRIP = OrbitType._(4);
  static const Map<int, OrbitType> values = {
    0: ORBIT,
    1: LANDING,
    2: IMPACT,
    3: DOCKED,
    4: ROUNDTRIP};

  static const fb.Reader<OrbitType> reader = _OrbitTypeReader();

  @override
  String toString() {
    return 'OrbitType{value: $value}';
  }
}

class _OrbitTypeReader extends fb.Reader<OrbitType> {
  const _OrbitTypeReader();

  @override
  int get size => 1;

  @override
  OrbitType read(fb.BufferContext bc, int offset) =>
      OrbitType.fromValue(const fb.Int8Reader().read(bc, offset));
}

class MassType {
  final int value;
  const MassType._(this.value);

  factory MassType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum MassType');
    }
    return result;
  }

  static MassType? _createOrNull(int? value) => 
      value == null ? null : MassType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const MassType DRY = MassType._(0);
  static const MassType WET = MassType._(1);
  static const Map<int, MassType> values = {
    0: DRY,
    1: WET};

  static const fb.Reader<MassType> reader = _MassTypeReader();

  @override
  String toString() {
    return 'MassType{value: $value}';
  }
}

class _MassTypeReader extends fb.Reader<MassType> {
  const _MassTypeReader();

  @override
  int get size => 1;

  @override
  MassType read(fb.BufferContext bc, int offset) =>
      MassType.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Note: this is for legacy compatibility; all messages requiring use of CAT should have an associated EPM
class OwnerCode {
  final int value;
  const OwnerCode._(this.value);

  factory OwnerCode.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OwnerCode');
    }
    return result;
  }

  static OwnerCode? _createOrNull(int? value) => 
      value == null ? null : OwnerCode.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 125;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Arab Satellite Communications Organization
  static const OwnerCode AB = OwnerCode._(0);

  ///  Asia Broadcast Satellite
  static const OwnerCode ABS = OwnerCode._(1);

  ///  Asia Satellite Telecommunications Company (ASIASAT)
  static const OwnerCode AC = OwnerCode._(2);

  ///  Algeria
  static const OwnerCode ALG = OwnerCode._(3);

  ///  Angola
  static const OwnerCode ANG = OwnerCode._(4);

  ///  Argentina
  static const OwnerCode ARGN = OwnerCode._(5);

  ///  Republic of Armenia
  static const OwnerCode ARM = OwnerCode._(6);

  ///  Austria
  static const OwnerCode ASRA = OwnerCode._(7);

  ///  Australia
  static const OwnerCode AUS = OwnerCode._(8);

  ///  Azerbaijan
  static const OwnerCode AZER = OwnerCode._(9);

  ///  Belgium
  static const OwnerCode BEL = OwnerCode._(10);

  ///  Belarus
  static const OwnerCode BELA = OwnerCode._(11);

  ///  Bermuda
  static const OwnerCode BERM = OwnerCode._(12);

  ///  People's Republic of Bangladesh
  static const OwnerCode BGD = OwnerCode._(13);

  ///  Kingdom of Bhutan
  static const OwnerCode BHUT = OwnerCode._(14);

  ///  Bolivia
  static const OwnerCode BOL = OwnerCode._(15);

  ///  Brazil
  static const OwnerCode BRAZ = OwnerCode._(16);

  ///  Bulgaria
  static const OwnerCode BUL = OwnerCode._(17);

  ///  Canada
  static const OwnerCode CA = OwnerCode._(18);

  ///  China/Brazil
  static const OwnerCode CHBZ = OwnerCode._(19);

  ///  China/Turkey
  static const OwnerCode CHTU = OwnerCode._(20);

  ///  Chile
  static const OwnerCode CHLE = OwnerCode._(21);

  ///  Commonwealth of Independent States (former USSR)
  static const OwnerCode CIS = OwnerCode._(22);

  ///  Colombia
  static const OwnerCode COL = OwnerCode._(23);

  ///  Republic of Costa Rica
  static const OwnerCode CRI = OwnerCode._(24);

  ///  Czech Republic (former Czechoslovakia)
  static const OwnerCode CZCH = OwnerCode._(25);

  ///  Denmark
  static const OwnerCode DEN = OwnerCode._(26);

  ///  Republic of Djibouti
  static const OwnerCode DJI = OwnerCode._(27);

  ///  Ecuador
  static const OwnerCode ECU = OwnerCode._(28);

  ///  Egypt
  static const OwnerCode EGYP = OwnerCode._(29);

  ///  European Space Agency
  static const OwnerCode ESA = OwnerCode._(30);

  ///  European Space Research Organization
  static const OwnerCode ESRO = OwnerCode._(31);

  ///  Estonia
  static const OwnerCode EST = OwnerCode._(32);

  ///  Ethiopia
  static const OwnerCode ETH = OwnerCode._(33);

  ///  European Organization for the Exploitation of Meteorological Satellites (EUMETSAT)
  static const OwnerCode EUME = OwnerCode._(34);

  ///  European Telecommunications Satellite Organization (EUTELSAT)
  static const OwnerCode EUTE = OwnerCode._(35);

  ///  France/Germany
  static const OwnerCode FGER = OwnerCode._(36);

  ///  Finland
  static const OwnerCode FIN = OwnerCode._(37);

  ///  France
  static const OwnerCode FR = OwnerCode._(38);

  ///  France/Italy
  static const OwnerCode FRIT = OwnerCode._(39);

  ///  Germany
  static const OwnerCode GER = OwnerCode._(40);

  ///  Republic of Ghana
  static const OwnerCode GHA = OwnerCode._(41);

  ///  Globalstar
  static const OwnerCode GLOB = OwnerCode._(42);

  ///  Greece
  static const OwnerCode GREC = OwnerCode._(43);

  ///  Greece/Saudi Arabia
  static const OwnerCode GRSA = OwnerCode._(44);

  ///  Guatemala
  static const OwnerCode GUAT = OwnerCode._(45);

  ///  Hungary
  static const OwnerCode HUN = OwnerCode._(46);

  ///  International Mobile Satellite Organization (INMARSAT)
  static const OwnerCode IM = OwnerCode._(47);

  ///  India
  static const OwnerCode IND = OwnerCode._(48);

  ///  Indonesia
  static const OwnerCode INDO = OwnerCode._(49);

  ///  Iran
  static const OwnerCode IRAN = OwnerCode._(50);

  ///  Iraq
  static const OwnerCode IRAQ = OwnerCode._(51);

  ///  Iridium
  static const OwnerCode IRID = OwnerCode._(52);

  ///  Ireland
  static const OwnerCode IRL = OwnerCode._(53);

  ///  Israel
  static const OwnerCode ISRA = OwnerCode._(54);

  ///  Indian Space Research Organisation
  static const OwnerCode ISRO = OwnerCode._(55);

  ///  International Space Station
  static const OwnerCode ISS = OwnerCode._(56);

  ///  Italy
  static const OwnerCode IT = OwnerCode._(57);

  ///  International Telecommunications Satellite Organization (INTELSAT)
  static const OwnerCode ITSO = OwnerCode._(58);

  ///  Japan
  static const OwnerCode JPN = OwnerCode._(59);

  ///  Kazakhstan
  static const OwnerCode KAZ = OwnerCode._(60);

  ///  Republic of Kenya
  static const OwnerCode KEN = OwnerCode._(61);

  ///  Laos
  static const OwnerCode LAOS = OwnerCode._(62);

  ///  Democratic Socialist Republic of Sri Lanka
  static const OwnerCode LKA = OwnerCode._(63);

  ///  Lithuania
  static const OwnerCode LTU = OwnerCode._(64);

  ///  Luxembourg
  static const OwnerCode LUXE = OwnerCode._(65);

  ///  Morocco
  static const OwnerCode MA = OwnerCode._(66);

  ///  Malaysia
  static const OwnerCode MALA = OwnerCode._(67);

  ///  Principality of Monaco
  static const OwnerCode MCO = OwnerCode._(68);

  ///  Republic of Moldova
  static const OwnerCode MDA = OwnerCode._(69);

  ///  Mexico
  static const OwnerCode MEX = OwnerCode._(70);

  ///  Republic of the Union of Myanmar
  static const OwnerCode MMR = OwnerCode._(71);

  ///  Mongolia
  static const OwnerCode MNG = OwnerCode._(72);

  ///  Mauritius
  static const OwnerCode MUS = OwnerCode._(73);

  ///  North Atlantic Treaty Organization
  static const OwnerCode NATO = OwnerCode._(74);

  ///  Netherlands
  static const OwnerCode NETH = OwnerCode._(75);

  ///  New ICO
  static const OwnerCode NICO = OwnerCode._(76);

  ///  Nigeria
  static const OwnerCode NIG = OwnerCode._(77);

  ///  Democratic People's Republic of Korea
  static const OwnerCode NKOR = OwnerCode._(78);

  ///  Norway
  static const OwnerCode NOR = OwnerCode._(79);

  ///  Federal Democratic Republic of Nepal
  static const OwnerCode NPL = OwnerCode._(80);

  ///  New Zealand
  static const OwnerCode NZ = OwnerCode._(81);

  ///  O3b Networks
  static const OwnerCode O3B = OwnerCode._(82);

  ///  ORBCOMM
  static const OwnerCode ORB = OwnerCode._(83);

  ///  Pakistan
  static const OwnerCode PAKI = OwnerCode._(84);

  ///  Peru
  static const OwnerCode PERU = OwnerCode._(85);

  ///  Poland
  static const OwnerCode POL = OwnerCode._(86);

  ///  Portugal
  static const OwnerCode POR = OwnerCode._(87);

  ///  People's Republic of China
  static const OwnerCode PRC = OwnerCode._(88);

  ///  Republic of Paraguay
  static const OwnerCode PRY = OwnerCode._(89);

  ///  People's Republic of China/European Space Agency
  static const OwnerCode PRES = OwnerCode._(90);

  ///  State of Qatar
  static const OwnerCode QAT = OwnerCode._(91);

  ///  RascomStar-QAF
  static const OwnerCode RASC = OwnerCode._(92);

  ///  Taiwan (Republic of China)
  static const OwnerCode ROC = OwnerCode._(93);

  ///  Romania
  static const OwnerCode ROM = OwnerCode._(94);

  ///  Philippines (Republic of the Philippines)
  static const OwnerCode RP = OwnerCode._(95);

  ///  Republic of Rwanda
  static const OwnerCode RWA = OwnerCode._(96);

  ///  South Africa
  static const OwnerCode SAFR = OwnerCode._(97);

  ///  Saudi Arabia
  static const OwnerCode SAUD = OwnerCode._(98);

  ///  Republic of Sudan
  static const OwnerCode SDN = OwnerCode._(99);

  ///  Sea Launch
  static const OwnerCode SEAL = OwnerCode._(100);

  ///  SES
  static const OwnerCode SES = OwnerCode._(101);

  ///  Singapore/Japan
  static const OwnerCode SGJP = OwnerCode._(102);

  ///  Singapore
  static const OwnerCode SING = OwnerCode._(103);

  ///  Republic of Korea
  static const OwnerCode SKOR = OwnerCode._(104);

  ///  Spain
  static const OwnerCode SPN = OwnerCode._(105);

  ///  Singapore/Taiwan
  static const OwnerCode STCT = OwnerCode._(106);

  ///  Slovenia
  static const OwnerCode SVN = OwnerCode._(107);

  ///  Sweden
  static const OwnerCode SWED = OwnerCode._(108);

  ///  Switzerland
  static const OwnerCode SWTZ = OwnerCode._(109);

  ///  To Be Determined
  static const OwnerCode TBD = OwnerCode._(110);

  ///  Thailand
  static const OwnerCode THAI = OwnerCode._(111);

  ///  Turkmenistan/Monaco
  static const OwnerCode TMMC = OwnerCode._(112);

  ///  Republic of Tunisia
  static const OwnerCode TUN = OwnerCode._(113);

  ///  Turkey
  static const OwnerCode TURK = OwnerCode._(114);

  ///  United Arab Emirates
  static const OwnerCode UAE = OwnerCode._(115);

  ///  United Kingdom
  static const OwnerCode UK = OwnerCode._(116);

  ///  Ukraine
  static const OwnerCode UKR = OwnerCode._(117);

  ///  Unknown
  static const OwnerCode UNK = OwnerCode._(118);

  ///  Uruguay
  static const OwnerCode URY = OwnerCode._(119);

  ///  United States
  static const OwnerCode US = OwnerCode._(120);

  ///  United States/Brazil
  static const OwnerCode USBZ = OwnerCode._(121);

  ///  Vatican City State
  static const OwnerCode VAT = OwnerCode._(122);

  ///  Venezuela
  static const OwnerCode VENZ = OwnerCode._(123);

  ///  Vietnam
  static const OwnerCode VTNM = OwnerCode._(124);

  ///  Republic of Zimbabwe
  static const OwnerCode ZWE = OwnerCode._(125);
  static const Map<int, OwnerCode> values = {
    0: AB,
    1: ABS,
    2: AC,
    3: ALG,
    4: ANG,
    5: ARGN,
    6: ARM,
    7: ASRA,
    8: AUS,
    9: AZER,
    10: BEL,
    11: BELA,
    12: BERM,
    13: BGD,
    14: BHUT,
    15: BOL,
    16: BRAZ,
    17: BUL,
    18: CA,
    19: CHBZ,
    20: CHTU,
    21: CHLE,
    22: CIS,
    23: COL,
    24: CRI,
    25: CZCH,
    26: DEN,
    27: DJI,
    28: ECU,
    29: EGYP,
    30: ESA,
    31: ESRO,
    32: EST,
    33: ETH,
    34: EUME,
    35: EUTE,
    36: FGER,
    37: FIN,
    38: FR,
    39: FRIT,
    40: GER,
    41: GHA,
    42: GLOB,
    43: GREC,
    44: GRSA,
    45: GUAT,
    46: HUN,
    47: IM,
    48: IND,
    49: INDO,
    50: IRAN,
    51: IRAQ,
    52: IRID,
    53: IRL,
    54: ISRA,
    55: ISRO,
    56: ISS,
    57: IT,
    58: ITSO,
    59: JPN,
    60: KAZ,
    61: KEN,
    62: LAOS,
    63: LKA,
    64: LTU,
    65: LUXE,
    66: MA,
    67: MALA,
    68: MCO,
    69: MDA,
    70: MEX,
    71: MMR,
    72: MNG,
    73: MUS,
    74: NATO,
    75: NETH,
    76: NICO,
    77: NIG,
    78: NKOR,
    79: NOR,
    80: NPL,
    81: NZ,
    82: O3B,
    83: ORB,
    84: PAKI,
    85: PERU,
    86: POL,
    87: POR,
    88: PRC,
    89: PRY,
    90: PRES,
    91: QAT,
    92: RASC,
    93: ROC,
    94: ROM,
    95: RP,
    96: RWA,
    97: SAFR,
    98: SAUD,
    99: SDN,
    100: SEAL,
    101: SES,
    102: SGJP,
    103: SING,
    104: SKOR,
    105: SPN,
    106: STCT,
    107: SVN,
    108: SWED,
    109: SWTZ,
    110: TBD,
    111: THAI,
    112: TMMC,
    113: TUN,
    114: TURK,
    115: UAE,
    116: UK,
    117: UKR,
    118: UNK,
    119: URY,
    120: US,
    121: USBZ,
    122: VAT,
    123: VENZ,
    124: VTNM,
    125: ZWE};

  static const fb.Reader<OwnerCode> reader = _OwnerCodeReader();

  @override
  String toString() {
    return 'OwnerCode{value: $value}';
  }
}

class _OwnerCodeReader extends fb.Reader<OwnerCode> {
  const _OwnerCodeReader();

  @override
  int get size => 1;

  @override
  OwnerCode read(fb.BufferContext bc, int offset) =>
      OwnerCode.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Catalog Entity Message
class CAT {
  CAT._(this._bc, this._bcOffset);
  factory CAT(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CAT> reader = _CATReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Satellite Name(s)
  String? get OBJECT_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  International Designator (YYYY-NNNAAA)
  String? get OBJECT_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  NORAD Catalog Number
  int get NORAD_CAT_ID => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  ///  Object type (Payload, Rocket body, Debris, Unknown)
  ObjectType get OBJECT_TYPE => ObjectType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 10, 3));
  ///  Operational Status Code
  OpsStatusCode get OPS_STATUS_CODE => OpsStatusCode.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 12, 7));
  ///  Ownership, typically country or company
  OwnerCode get OWNER => OwnerCode.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 14, 0));
  ///  Launch Date [year-month-day] (ISO 8601)
  String? get LAUNCH_DATE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Launch Site
  String? get LAUNCH_SITE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Decay Date, if applicable [year-month-day] (ISO 8601)
  String? get DECAY_DATE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Orbital period [minutes]
  double get PERIOD => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Inclination [degrees]
  double get INCLINATION => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Apogee Altitude [kilometers]
  double get APOGEE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Perigee Altitude [kilometers]
  double get PERIGEE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Radar Cross Section [meters2]; blank if no data available
  double get RCS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Data status code; blank otherwise
  DataStatusCode get DATA_STATUS_CODE => DataStatusCode.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 32, 0));
  ///  Orbit center
  String? get ORBIT_CENTER => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Orbit type (Orbit, Landing, Impact, Docked to RSO, roundtrip)
  OrbitType get ORBIT_TYPE => OrbitType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 36, 0));
  ///  Deployment Date [year-month-day] (ISO 8601)
  String? get DEPLOYMENT_DATE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Indicates if the object is maneuverable
  bool get MANEUVERABLE => const fb.BoolReader().vTableGet(_bc, _bcOffset, 40, false);
  ///  Size [meters]; blank if no data available
  double get SIZE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Mass [kilograms]; blank if no data available
  double get MASS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Mass type (Dry, Wet)
  MassType get MASS_TYPE => MassType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 46, 0));
  ///  Vector of PAYLOADS
  List<PLD>? get PAYLOADS => const fb.ListReader<PLD>(PLD.reader).vTableGetNullable(_bc, _bcOffset, 48);

  @override
  String toString() {
    return 'CAT{OBJECT_NAME: ${OBJECT_NAME}, OBJECT_ID: ${OBJECT_ID}, NORAD_CAT_ID: ${NORAD_CAT_ID}, OBJECT_TYPE: ${OBJECT_TYPE}, OPS_STATUS_CODE: ${OPS_STATUS_CODE}, OWNER: ${OWNER}, LAUNCH_DATE: ${LAUNCH_DATE}, LAUNCH_SITE: ${LAUNCH_SITE}, DECAY_DATE: ${DECAY_DATE}, PERIOD: ${PERIOD}, INCLINATION: ${INCLINATION}, APOGEE: ${APOGEE}, PERIGEE: ${PERIGEE}, RCS: ${RCS}, DATA_STATUS_CODE: ${DATA_STATUS_CODE}, ORBIT_CENTER: ${ORBIT_CENTER}, ORBIT_TYPE: ${ORBIT_TYPE}, DEPLOYMENT_DATE: ${DEPLOYMENT_DATE}, MANEUVERABLE: ${MANEUVERABLE}, SIZE: ${SIZE}, MASS: ${MASS}, MASS_TYPE: ${MASS_TYPE}, PAYLOADS: ${PAYLOADS}}';
  }
}

class _CATReader extends fb.TableReader<CAT> {
  const _CATReader();

  @override
  CAT createObject(fb.BufferContext bc, int offset) => 
    CAT._(bc, offset);
}

class CATBuilder {
  CATBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(23);
  }

  int addObjectNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addObjectIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNoradCatId(int? NORAD_CAT_ID) {
    fbBuilder.addUint32(2, NORAD_CAT_ID);
    return fbBuilder.offset;
  }
  int addObjectType(ObjectType? OBJECT_TYPE) {
    fbBuilder.addInt8(3, OBJECT_TYPE?.value);
    return fbBuilder.offset;
  }
  int addOpsStatusCode(OpsStatusCode? OPS_STATUS_CODE) {
    fbBuilder.addInt8(4, OPS_STATUS_CODE?.value);
    return fbBuilder.offset;
  }
  int addOwner(OwnerCode? OWNER) {
    fbBuilder.addInt8(5, OWNER?.value);
    return fbBuilder.offset;
  }
  int addLaunchDateOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addLaunchSiteOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addDecayDateOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addPeriod(double? PERIOD) {
    fbBuilder.addFloat64(9, PERIOD);
    return fbBuilder.offset;
  }
  int addInclination(double? INCLINATION) {
    fbBuilder.addFloat64(10, INCLINATION);
    return fbBuilder.offset;
  }
  int addApogee(double? APOGEE) {
    fbBuilder.addFloat64(11, APOGEE);
    return fbBuilder.offset;
  }
  int addPerigee(double? PERIGEE) {
    fbBuilder.addFloat64(12, PERIGEE);
    return fbBuilder.offset;
  }
  int addRcs(double? RCS) {
    fbBuilder.addFloat64(13, RCS);
    return fbBuilder.offset;
  }
  int addDataStatusCode(DataStatusCode? DATA_STATUS_CODE) {
    fbBuilder.addInt8(14, DATA_STATUS_CODE?.value);
    return fbBuilder.offset;
  }
  int addOrbitCenterOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addOrbitType(OrbitType? ORBIT_TYPE) {
    fbBuilder.addInt8(16, ORBIT_TYPE?.value);
    return fbBuilder.offset;
  }
  int addDeploymentDateOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addManeuverable(bool? MANEUVERABLE) {
    fbBuilder.addBool(18, MANEUVERABLE);
    return fbBuilder.offset;
  }
  int addSize(double? SIZE) {
    fbBuilder.addFloat64(19, SIZE);
    return fbBuilder.offset;
  }
  int addMass(double? MASS) {
    fbBuilder.addFloat64(20, MASS);
    return fbBuilder.offset;
  }
  int addMassType(MassType? MASS_TYPE) {
    fbBuilder.addInt8(21, MASS_TYPE?.value);
    return fbBuilder.offset;
  }
  int addPayloadsOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CATObjectBuilder extends fb.ObjectBuilder {
  final String? _OBJECT_NAME;
  final String? _OBJECT_ID;
  final int? _NORAD_CAT_ID;
  final ObjectType? _OBJECT_TYPE;
  final OpsStatusCode? _OPS_STATUS_CODE;
  final OwnerCode? _OWNER;
  final String? _LAUNCH_DATE;
  final String? _LAUNCH_SITE;
  final String? _DECAY_DATE;
  final double? _PERIOD;
  final double? _INCLINATION;
  final double? _APOGEE;
  final double? _PERIGEE;
  final double? _RCS;
  final DataStatusCode? _DATA_STATUS_CODE;
  final String? _ORBIT_CENTER;
  final OrbitType? _ORBIT_TYPE;
  final String? _DEPLOYMENT_DATE;
  final bool? _MANEUVERABLE;
  final double? _SIZE;
  final double? _MASS;
  final MassType? _MASS_TYPE;
  final List<PLDObjectBuilder>? _PAYLOADS;

  CATObjectBuilder({
    String? OBJECT_NAME,
    String? OBJECT_ID,
    int? NORAD_CAT_ID,
    ObjectType? OBJECT_TYPE,
    OpsStatusCode? OPS_STATUS_CODE,
    OwnerCode? OWNER,
    String? LAUNCH_DATE,
    String? LAUNCH_SITE,
    String? DECAY_DATE,
    double? PERIOD,
    double? INCLINATION,
    double? APOGEE,
    double? PERIGEE,
    double? RCS,
    DataStatusCode? DATA_STATUS_CODE,
    String? ORBIT_CENTER,
    OrbitType? ORBIT_TYPE,
    String? DEPLOYMENT_DATE,
    bool? MANEUVERABLE,
    double? SIZE,
    double? MASS,
    MassType? MASS_TYPE,
    List<PLDObjectBuilder>? PAYLOADS,
  })
      : _OBJECT_NAME = OBJECT_NAME,
        _OBJECT_ID = OBJECT_ID,
        _NORAD_CAT_ID = NORAD_CAT_ID,
        _OBJECT_TYPE = OBJECT_TYPE,
        _OPS_STATUS_CODE = OPS_STATUS_CODE,
        _OWNER = OWNER,
        _LAUNCH_DATE = LAUNCH_DATE,
        _LAUNCH_SITE = LAUNCH_SITE,
        _DECAY_DATE = DECAY_DATE,
        _PERIOD = PERIOD,
        _INCLINATION = INCLINATION,
        _APOGEE = APOGEE,
        _PERIGEE = PERIGEE,
        _RCS = RCS,
        _DATA_STATUS_CODE = DATA_STATUS_CODE,
        _ORBIT_CENTER = ORBIT_CENTER,
        _ORBIT_TYPE = ORBIT_TYPE,
        _DEPLOYMENT_DATE = DEPLOYMENT_DATE,
        _MANEUVERABLE = MANEUVERABLE,
        _SIZE = SIZE,
        _MASS = MASS,
        _MASS_TYPE = MASS_TYPE,
        _PAYLOADS = PAYLOADS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? OBJECT_NAMEOffset = _OBJECT_NAME == null ? null
        : fbBuilder.writeString(_OBJECT_NAME!);
    final int? OBJECT_IDOffset = _OBJECT_ID == null ? null
        : fbBuilder.writeString(_OBJECT_ID!);
    final int? LAUNCH_DATEOffset = _LAUNCH_DATE == null ? null
        : fbBuilder.writeString(_LAUNCH_DATE!);
    final int? LAUNCH_SITEOffset = _LAUNCH_SITE == null ? null
        : fbBuilder.writeString(_LAUNCH_SITE!);
    final int? DECAY_DATEOffset = _DECAY_DATE == null ? null
        : fbBuilder.writeString(_DECAY_DATE!);
    final int? ORBIT_CENTEROffset = _ORBIT_CENTER == null ? null
        : fbBuilder.writeString(_ORBIT_CENTER!);
    final int? DEPLOYMENT_DATEOffset = _DEPLOYMENT_DATE == null ? null
        : fbBuilder.writeString(_DEPLOYMENT_DATE!);
    final int? PAYLOADSOffset = _PAYLOADS == null ? null
        : fbBuilder.writeList(_PAYLOADS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(23);
    fbBuilder.addOffset(0, OBJECT_NAMEOffset);
    fbBuilder.addOffset(1, OBJECT_IDOffset);
    fbBuilder.addUint32(2, _NORAD_CAT_ID);
    fbBuilder.addInt8(3, _OBJECT_TYPE?.value);
    fbBuilder.addInt8(4, _OPS_STATUS_CODE?.value);
    fbBuilder.addInt8(5, _OWNER?.value);
    fbBuilder.addOffset(6, LAUNCH_DATEOffset);
    fbBuilder.addOffset(7, LAUNCH_SITEOffset);
    fbBuilder.addOffset(8, DECAY_DATEOffset);
    fbBuilder.addFloat64(9, _PERIOD);
    fbBuilder.addFloat64(10, _INCLINATION);
    fbBuilder.addFloat64(11, _APOGEE);
    fbBuilder.addFloat64(12, _PERIGEE);
    fbBuilder.addFloat64(13, _RCS);
    fbBuilder.addInt8(14, _DATA_STATUS_CODE?.value);
    fbBuilder.addOffset(15, ORBIT_CENTEROffset);
    fbBuilder.addInt8(16, _ORBIT_TYPE?.value);
    fbBuilder.addOffset(17, DEPLOYMENT_DATEOffset);
    fbBuilder.addBool(18, _MANEUVERABLE);
    fbBuilder.addFloat64(19, _SIZE);
    fbBuilder.addFloat64(20, _MASS);
    fbBuilder.addInt8(21, _MASS_TYPE?.value);
    fbBuilder.addOffset(22, PAYLOADSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CATCOLLECTION {
  CATCOLLECTION._(this._bc, this._bcOffset);
  factory CATCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CATCOLLECTION> reader = _CATCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<CAT>? get RECORDS => const fb.ListReader<CAT>(CAT.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'CATCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _CATCOLLECTIONReader extends fb.TableReader<CATCOLLECTION> {
  const _CATCOLLECTIONReader();

  @override
  CATCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    CATCOLLECTION._(bc, offset);
}

class CATCOLLECTIONBuilder {
  CATCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CATCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<CATObjectBuilder>? _RECORDS;

  CATCOLLECTIONObjectBuilder({
    List<CATObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
