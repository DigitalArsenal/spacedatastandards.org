// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


import './main_generated.dart';

class ObjectType {
  final int value;
  const ObjectType._(this.value);

  factory ObjectType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ObjectType');
    }
    return result;
  }

  static ObjectType? _createOrNull(int? value) => 
      value == null ? null : ObjectType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  0
  static const ObjectType PAYLOAD = ObjectType._(0);

  ///  1
  static const ObjectType ROCKET_BODY = ObjectType._(1);

  ///  2
  static const ObjectType DEBRIS = ObjectType._(2);

  ///  3
  static const ObjectType UNKNOWN = ObjectType._(3);
  static const Map<int, ObjectType> values = {
    0: PAYLOAD,
    1: ROCKET_BODY,
    2: DEBRIS,
    3: UNKNOWN};

  static const fb.Reader<ObjectType> reader = _ObjectTypeReader();

  @override
  String toString() {
    return 'ObjectType{value: $value}';
  }
}

class _ObjectTypeReader extends fb.Reader<ObjectType> {
  const _ObjectTypeReader();

  @override
  int get size => 1;

  @override
  ObjectType read(fb.BufferContext bc, int offset) =>
      ObjectType.fromValue(const fb.Int8Reader().read(bc, offset));
}

class OpsStatusCode {
  final int value;
  const OpsStatusCode._(this.value);

  factory OpsStatusCode.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OpsStatusCode');
    }
    return result;
  }

  static OpsStatusCode? _createOrNull(int? value) => 
      value == null ? null : OpsStatusCode.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 7;
  static bool containsValue(int value) => values.containsKey(value);

  ///  +
  static const OpsStatusCode OPERATIONAL = OpsStatusCode._(0);

  ///  -
  static const OpsStatusCode NONOPERATIONAL = OpsStatusCode._(1);

  ///  P
  static const OpsStatusCode PARTIALLY_OPERATIONAL = OpsStatusCode._(2);

  ///  B
  static const OpsStatusCode BACKUP_STANDBY = OpsStatusCode._(3);

  ///  S
  static const OpsStatusCode SPARE = OpsStatusCode._(4);

  ///  X
  static const OpsStatusCode EXTENDED_MISSION = OpsStatusCode._(5);

  ///  D
  static const OpsStatusCode DECAYED = OpsStatusCode._(6);

  ///  ?
  static const OpsStatusCode UNKNOWN = OpsStatusCode._(7);
  static const Map<int, OpsStatusCode> values = {
    0: OPERATIONAL,
    1: NONOPERATIONAL,
    2: PARTIALLY_OPERATIONAL,
    3: BACKUP_STANDBY,
    4: SPARE,
    5: EXTENDED_MISSION,
    6: DECAYED,
    7: UNKNOWN};

  static const fb.Reader<OpsStatusCode> reader = _OpsStatusCodeReader();

  @override
  String toString() {
    return 'OpsStatusCode{value: $value}';
  }
}

class _OpsStatusCodeReader extends fb.Reader<OpsStatusCode> {
  const _OpsStatusCodeReader();

  @override
  int get size => 1;

  @override
  OpsStatusCode read(fb.BufferContext bc, int offset) =>
      OpsStatusCode.fromValue(const fb.Int8Reader().read(bc, offset));
}

class DataStatusCode {
  final int value;
  const DataStatusCode._(this.value);

  factory DataStatusCode.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum DataStatusCode');
    }
    return result;
  }

  static DataStatusCode? _createOrNull(int? value) => 
      value == null ? null : DataStatusCode.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  NCE
  static const DataStatusCode NO_CURRENT_ELEMENTS = DataStatusCode._(0);

  ///  NIE
  static const DataStatusCode NO_INITIAL_ELEMENTS = DataStatusCode._(1);

  ///  NEA
  static const DataStatusCode NO_ELEMENTS_AVAILABLE = DataStatusCode._(2);

  ///  OK
  static const DataStatusCode OK = DataStatusCode._(3);
  static const Map<int, DataStatusCode> values = {
    0: NO_CURRENT_ELEMENTS,
    1: NO_INITIAL_ELEMENTS,
    2: NO_ELEMENTS_AVAILABLE,
    3: OK};

  static const fb.Reader<DataStatusCode> reader = _DataStatusCodeReader();

  @override
  String toString() {
    return 'DataStatusCode{value: $value}';
  }
}

class _DataStatusCodeReader extends fb.Reader<DataStatusCode> {
  const _DataStatusCodeReader();

  @override
  int get size => 1;

  @override
  DataStatusCode read(fb.BufferContext bc, int offset) =>
      DataStatusCode.fromValue(const fb.Int8Reader().read(bc, offset));
}

class OrbitType {
  final int value;
  const OrbitType._(this.value);

  factory OrbitType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum OrbitType');
    }
    return result;
  }

  static OrbitType? _createOrNull(int? value) => 
      value == null ? null : OrbitType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  0
  static const OrbitType ORBIT = OrbitType._(0);

  ///  1
  static const OrbitType LANDING = OrbitType._(1);

  ///  2
  static const OrbitType IMPACT = OrbitType._(2);

  ///  3
  static const OrbitType DOCKED = OrbitType._(3);

  ///  4
  static const OrbitType ROUNDTRIP = OrbitType._(4);
  static const Map<int, OrbitType> values = {
    0: ORBIT,
    1: LANDING,
    2: IMPACT,
    3: DOCKED,
    4: ROUNDTRIP};

  static const fb.Reader<OrbitType> reader = _OrbitTypeReader();

  @override
  String toString() {
    return 'OrbitType{value: $value}';
  }
}

class _OrbitTypeReader extends fb.Reader<OrbitType> {
  const _OrbitTypeReader();

  @override
  int get size => 1;

  @override
  OrbitType read(fb.BufferContext bc, int offset) =>
      OrbitType.fromValue(const fb.Int8Reader().read(bc, offset));
}

class MassType {
  final int value;
  const MassType._(this.value);

  factory MassType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum MassType');
    }
    return result;
  }

  static MassType? _createOrNull(int? value) => 
      value == null ? null : MassType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const MassType DRY = MassType._(0);
  static const MassType WET = MassType._(1);
  static const Map<int, MassType> values = {
    0: DRY,
    1: WET};

  static const fb.Reader<MassType> reader = _MassTypeReader();

  @override
  String toString() {
    return 'MassType{value: $value}';
  }
}

class _MassTypeReader extends fb.Reader<MassType> {
  const _MassTypeReader();

  @override
  int get size => 1;

  @override
  MassType read(fb.BufferContext bc, int offset) =>
      MassType.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Catalog Entity Message
class CAT {
  CAT._(this._bc, this._bcOffset);
  factory CAT(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CAT> reader = _CATReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Satellite Name(s)
  String? get OBJECT_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  International Designator (YYYY-NNNAAA)
  String? get OBJECT_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  NORAD Catalog Number
  int get NORAD_CAT_ID => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  ///  Object type (Payload, Rocket body, Debris, Unknown)
  ObjectType get OBJECT_TYPE => ObjectType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 10, 3));
  ///  Operational Status Code
  OpsStatusCode get OPS_STATUS_CODE => OpsStatusCode.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 12, 7));
  ///  Ownership, typically country or company
  LegacyCountryCode get OWNER => LegacyCountryCode.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 14, 0));
  ///  Launch Date [year-month-day] (ISO 8601)
  String? get LAUNCH_DATE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Launch Site
  String? get LAUNCH_SITE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Decay Date, if applicable [year-month-day] (ISO 8601)
  String? get DECAY_DATE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Orbital period [minutes]
  double get PERIOD => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Inclination [degrees]
  double get INCLINATION => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Apogee Altitude [kilometers]
  double get APOGEE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Perigee Altitude [kilometers]
  double get PERIGEE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Radar Cross Section [meters2]; blank if no data available
  double get RCS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Data status code; blank otherwise
  DataStatusCode get DATA_STATUS_CODE => DataStatusCode.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 32, 0));
  ///  Orbit center
  String? get ORBIT_CENTER => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Orbit type (Orbit, Landing, Impact, Docked to RSO, roundtrip)
  OrbitType get ORBIT_TYPE => OrbitType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 36, 0));
  ///  Deployment Date [year-month-day] (ISO 8601)
  String? get DEPLOYMENT_DATE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  Indicates if the object is maneuverable
  bool get MANEUVERABLE => const fb.BoolReader().vTableGet(_bc, _bcOffset, 40, false);
  ///  Size [meters]; blank if no data available
  double get SIZE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Mass [kilograms]; blank if no data available
  double get MASS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Mass type (Dry, Wet)
  MassType get MASS_TYPE => MassType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 46, 0));
  ///  Vector of PAYLOADS
  List<PLD>? get PAYLOADS => const fb.ListReader<PLD>(PLD.reader).vTableGetNullable(_bc, _bcOffset, 48);

  @override
  String toString() {
    return 'CAT{OBJECT_NAME: ${OBJECT_NAME}, OBJECT_ID: ${OBJECT_ID}, NORAD_CAT_ID: ${NORAD_CAT_ID}, OBJECT_TYPE: ${OBJECT_TYPE}, OPS_STATUS_CODE: ${OPS_STATUS_CODE}, OWNER: ${OWNER}, LAUNCH_DATE: ${LAUNCH_DATE}, LAUNCH_SITE: ${LAUNCH_SITE}, DECAY_DATE: ${DECAY_DATE}, PERIOD: ${PERIOD}, INCLINATION: ${INCLINATION}, APOGEE: ${APOGEE}, PERIGEE: ${PERIGEE}, RCS: ${RCS}, DATA_STATUS_CODE: ${DATA_STATUS_CODE}, ORBIT_CENTER: ${ORBIT_CENTER}, ORBIT_TYPE: ${ORBIT_TYPE}, DEPLOYMENT_DATE: ${DEPLOYMENT_DATE}, MANEUVERABLE: ${MANEUVERABLE}, SIZE: ${SIZE}, MASS: ${MASS}, MASS_TYPE: ${MASS_TYPE}, PAYLOADS: ${PAYLOADS}}';
  }
}

class _CATReader extends fb.TableReader<CAT> {
  const _CATReader();

  @override
  CAT createObject(fb.BufferContext bc, int offset) => 
    CAT._(bc, offset);
}

class CATBuilder {
  CATBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(23);
  }

  int addObjectNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addObjectIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNoradCatId(int? NORAD_CAT_ID) {
    fbBuilder.addUint32(2, NORAD_CAT_ID);
    return fbBuilder.offset;
  }
  int addObjectType(ObjectType? OBJECT_TYPE) {
    fbBuilder.addInt8(3, OBJECT_TYPE?.value);
    return fbBuilder.offset;
  }
  int addOpsStatusCode(OpsStatusCode? OPS_STATUS_CODE) {
    fbBuilder.addInt8(4, OPS_STATUS_CODE?.value);
    return fbBuilder.offset;
  }
  int addOwner(LegacyCountryCode? OWNER) {
    fbBuilder.addInt8(5, OWNER?.value);
    return fbBuilder.offset;
  }
  int addLaunchDateOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addLaunchSiteOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addDecayDateOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addPeriod(double? PERIOD) {
    fbBuilder.addFloat64(9, PERIOD);
    return fbBuilder.offset;
  }
  int addInclination(double? INCLINATION) {
    fbBuilder.addFloat64(10, INCLINATION);
    return fbBuilder.offset;
  }
  int addApogee(double? APOGEE) {
    fbBuilder.addFloat64(11, APOGEE);
    return fbBuilder.offset;
  }
  int addPerigee(double? PERIGEE) {
    fbBuilder.addFloat64(12, PERIGEE);
    return fbBuilder.offset;
  }
  int addRcs(double? RCS) {
    fbBuilder.addFloat64(13, RCS);
    return fbBuilder.offset;
  }
  int addDataStatusCode(DataStatusCode? DATA_STATUS_CODE) {
    fbBuilder.addInt8(14, DATA_STATUS_CODE?.value);
    return fbBuilder.offset;
  }
  int addOrbitCenterOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addOrbitType(OrbitType? ORBIT_TYPE) {
    fbBuilder.addInt8(16, ORBIT_TYPE?.value);
    return fbBuilder.offset;
  }
  int addDeploymentDateOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addManeuverable(bool? MANEUVERABLE) {
    fbBuilder.addBool(18, MANEUVERABLE);
    return fbBuilder.offset;
  }
  int addSize(double? SIZE) {
    fbBuilder.addFloat64(19, SIZE);
    return fbBuilder.offset;
  }
  int addMass(double? MASS) {
    fbBuilder.addFloat64(20, MASS);
    return fbBuilder.offset;
  }
  int addMassType(MassType? MASS_TYPE) {
    fbBuilder.addInt8(21, MASS_TYPE?.value);
    return fbBuilder.offset;
  }
  int addPayloadsOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CATObjectBuilder extends fb.ObjectBuilder {
  final String? _OBJECT_NAME;
  final String? _OBJECT_ID;
  final int? _NORAD_CAT_ID;
  final ObjectType? _OBJECT_TYPE;
  final OpsStatusCode? _OPS_STATUS_CODE;
  final LegacyCountryCode? _OWNER;
  final String? _LAUNCH_DATE;
  final String? _LAUNCH_SITE;
  final String? _DECAY_DATE;
  final double? _PERIOD;
  final double? _INCLINATION;
  final double? _APOGEE;
  final double? _PERIGEE;
  final double? _RCS;
  final DataStatusCode? _DATA_STATUS_CODE;
  final String? _ORBIT_CENTER;
  final OrbitType? _ORBIT_TYPE;
  final String? _DEPLOYMENT_DATE;
  final bool? _MANEUVERABLE;
  final double? _SIZE;
  final double? _MASS;
  final MassType? _MASS_TYPE;
  final List<PLDObjectBuilder>? _PAYLOADS;

  CATObjectBuilder({
    String? OBJECT_NAME,
    String? OBJECT_ID,
    int? NORAD_CAT_ID,
    ObjectType? OBJECT_TYPE,
    OpsStatusCode? OPS_STATUS_CODE,
    LegacyCountryCode? OWNER,
    String? LAUNCH_DATE,
    String? LAUNCH_SITE,
    String? DECAY_DATE,
    double? PERIOD,
    double? INCLINATION,
    double? APOGEE,
    double? PERIGEE,
    double? RCS,
    DataStatusCode? DATA_STATUS_CODE,
    String? ORBIT_CENTER,
    OrbitType? ORBIT_TYPE,
    String? DEPLOYMENT_DATE,
    bool? MANEUVERABLE,
    double? SIZE,
    double? MASS,
    MassType? MASS_TYPE,
    List<PLDObjectBuilder>? PAYLOADS,
  })
      : _OBJECT_NAME = OBJECT_NAME,
        _OBJECT_ID = OBJECT_ID,
        _NORAD_CAT_ID = NORAD_CAT_ID,
        _OBJECT_TYPE = OBJECT_TYPE,
        _OPS_STATUS_CODE = OPS_STATUS_CODE,
        _OWNER = OWNER,
        _LAUNCH_DATE = LAUNCH_DATE,
        _LAUNCH_SITE = LAUNCH_SITE,
        _DECAY_DATE = DECAY_DATE,
        _PERIOD = PERIOD,
        _INCLINATION = INCLINATION,
        _APOGEE = APOGEE,
        _PERIGEE = PERIGEE,
        _RCS = RCS,
        _DATA_STATUS_CODE = DATA_STATUS_CODE,
        _ORBIT_CENTER = ORBIT_CENTER,
        _ORBIT_TYPE = ORBIT_TYPE,
        _DEPLOYMENT_DATE = DEPLOYMENT_DATE,
        _MANEUVERABLE = MANEUVERABLE,
        _SIZE = SIZE,
        _MASS = MASS,
        _MASS_TYPE = MASS_TYPE,
        _PAYLOADS = PAYLOADS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? OBJECT_NAMEOffset = _OBJECT_NAME == null ? null
        : fbBuilder.writeString(_OBJECT_NAME!);
    final int? OBJECT_IDOffset = _OBJECT_ID == null ? null
        : fbBuilder.writeString(_OBJECT_ID!);
    final int? LAUNCH_DATEOffset = _LAUNCH_DATE == null ? null
        : fbBuilder.writeString(_LAUNCH_DATE!);
    final int? LAUNCH_SITEOffset = _LAUNCH_SITE == null ? null
        : fbBuilder.writeString(_LAUNCH_SITE!);
    final int? DECAY_DATEOffset = _DECAY_DATE == null ? null
        : fbBuilder.writeString(_DECAY_DATE!);
    final int? ORBIT_CENTEROffset = _ORBIT_CENTER == null ? null
        : fbBuilder.writeString(_ORBIT_CENTER!);
    final int? DEPLOYMENT_DATEOffset = _DEPLOYMENT_DATE == null ? null
        : fbBuilder.writeString(_DEPLOYMENT_DATE!);
    final int? PAYLOADSOffset = _PAYLOADS == null ? null
        : fbBuilder.writeList(_PAYLOADS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(23);
    fbBuilder.addOffset(0, OBJECT_NAMEOffset);
    fbBuilder.addOffset(1, OBJECT_IDOffset);
    fbBuilder.addUint32(2, _NORAD_CAT_ID);
    fbBuilder.addInt8(3, _OBJECT_TYPE?.value);
    fbBuilder.addInt8(4, _OPS_STATUS_CODE?.value);
    fbBuilder.addInt8(5, _OWNER?.value);
    fbBuilder.addOffset(6, LAUNCH_DATEOffset);
    fbBuilder.addOffset(7, LAUNCH_SITEOffset);
    fbBuilder.addOffset(8, DECAY_DATEOffset);
    fbBuilder.addFloat64(9, _PERIOD);
    fbBuilder.addFloat64(10, _INCLINATION);
    fbBuilder.addFloat64(11, _APOGEE);
    fbBuilder.addFloat64(12, _PERIGEE);
    fbBuilder.addFloat64(13, _RCS);
    fbBuilder.addInt8(14, _DATA_STATUS_CODE?.value);
    fbBuilder.addOffset(15, ORBIT_CENTEROffset);
    fbBuilder.addInt8(16, _ORBIT_TYPE?.value);
    fbBuilder.addOffset(17, DEPLOYMENT_DATEOffset);
    fbBuilder.addBool(18, _MANEUVERABLE);
    fbBuilder.addFloat64(19, _SIZE);
    fbBuilder.addFloat64(20, _MASS);
    fbBuilder.addInt8(21, _MASS_TYPE?.value);
    fbBuilder.addOffset(22, PAYLOADSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CATCOLLECTION {
  CATCOLLECTION._(this._bc, this._bcOffset);
  factory CATCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CATCOLLECTION> reader = _CATCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<CAT>? get RECORDS => const fb.ListReader<CAT>(CAT.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'CATCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _CATCOLLECTIONReader extends fb.TableReader<CATCOLLECTION> {
  const _CATCOLLECTIONReader();

  @override
  CATCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    CATCOLLECTION._(bc, offset);
}

class CATCOLLECTIONBuilder {
  CATCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CATCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<CATObjectBuilder>? _RECORDS;

  CATCOLLECTIONObjectBuilder({
    List<CATObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
