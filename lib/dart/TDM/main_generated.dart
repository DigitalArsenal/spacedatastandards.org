// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


import './main_generated.dart';

///  Tracking Data Message
class TDM {
  TDM._(this._bc, this._bcOffset);
  factory TDM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TDM> reader = _TDMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier for the observation OBSERVER -  [Specific CCSDS Document]
  String? get OBSERVER_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Cartesian X coordinate of the OBSERVER location in chosen reference frame
  double get OBSERVER_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  Cartesian Y coordinate of the OBSERVER location in chosen reference frame 
  double get OBSERVER_Y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  Cartesian Z coordinate of the OBSERVER location in chosen reference frame 
  double get OBSERVER_Z => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Cartesian X coordinate of the OBSERVER velocity in chosen reference frame
  double get OBSERVER_VX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Cartesian Y coordinate of the OBSERVER velocity in chosen reference frame 
  double get OBSERVER_VY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Cartesian Z coordinate of the OBSERVER velocity in chosen reference frame 
  double get OBSERVER_VZ => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Reference frame used for OBSERVER location Cartesian coordinates (e.g., ECEF, ECI)
  RefFrame get OBSERVER_POSITION_REFERENCE_FRAME => RefFrame.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 18, 0));
  ///  Reference frame used for obs location Cartesian coordinates (e.g., ECEF, ECI)
  RefFrame get OBS_REFERENCE_FRAME => RefFrame.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 20, 0));
  ///  Epoch time or observation time, in ISO 8601 UTC format -  CCSDS 503.0-B-1
  String? get EPOCH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  TDM version number -  CCSDS 503.0-B-1, Page D-9
  String? get CCSDS_TDM_VERS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Comments regarding TDM -  various sections, e.g., Page D-9
  List<String>? get COMMENT => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 26);
  ///  Date of TDM creation -  CCSDS 503.0-B-1, Page D-9
  String? get CREATION_DATE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Originator of the TDM -  CCSDS 503.0-B-1, Page D-9
  String? get ORIGINATOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Start of metadata section -  CCSDS 503.0-B-1, Page D-9
  String? get META_START => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Time system used -  CCSDS 503.0-B-1, Page D-9
  String? get TIME_SYSTEM => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Start time of the data -  CCSDS 503.0-B-1, Page D-9
  String? get START_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Stop time of the data -  CCSDS 503.0-B-1, Page D-9
  String? get STOP_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  First participant in the TDM -  CCSDS 503.0-B-1, Page D-9
  String? get PARTICIPANT_1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Second participant in the TDM -  CCSDS 503.0-B-1, Page D-9
  String? get PARTICIPANT_2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Third participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
  String? get PARTICIPANT_3 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Fourth participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
  String? get PARTICIPANT_4 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Fifth participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9, max participants
  String? get PARTICIPANT_5 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Mode of TDM -  CCSDS 503.0-B-1, Page D-9
  String? get MODE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  First path in TDM -  CCSDS 503.0-B-1, Page D-9
  int get PATH_1 => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 52, 0);
  ///  Second path in TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
  int get PATH_2 => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 54, 0);
  ///  Transmit band -  CCSDS 503.0-B-1, Page D-9
  String? get TRANSMIT_BAND => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Receive band -  CCSDS 503.0-B-1, Page D-9
  String? get RECEIVE_BAND => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Integration interval -  CCSDS 503.0-B-1, Page D-9
  double get INTEGRATION_INTERVAL => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  Integration reference -  CCSDS 503.0-B-1, Page D-9
  String? get INTEGRATION_REF => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Receive delay for second participant -  CCSDS 503.0-B-1, Page D-9
  double get RECEIVE_DELAY_2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  Receive delay for third participant -  CCSDS 503.0-B-1, Page D-9
  double get RECEIVE_DELAY_3 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  Data quality -  CCSDS 503.0-B-1, Page D-9
  String? get DATA_QUALITY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  End of metadata section -  CCSDS 503.0-B-1, Page D-9
  String? get META_STOP => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Start of data section -  CCSDS 503.0-B-1, Page D-9
  String? get DATA_START => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Transmit frequency for first participant -  CCSDS 503.0-B-1, Page D-9
  double get TRANSMIT_FREQ_1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  Receive frequency -  CCSDS 503.0-B-1, Page D-9
  List<double>? get RECEIVE_FREQ => const fb.ListReader<double>(fb.Float64Reader()).vTableGetNullable(_bc, _bcOffset, 76);
  ///  End of data section -  CCSDS 503.0-B-1, Page D-9
  String? get DATA_STOP => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  Additional properties as required by the specific application of the TDM...
  ///  Reference for time tagging -  CCSDS 503.0-B-1, Page D-10
  String? get TIMETAG_REF => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  Type of angle data -  CCSDS 503.0-B-1, Page D-12
  ///  Can be AZEL, RADEC, XEYN, XSYE, or another value with provided ICD
  String? get ANGLE_TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  First angle value -  CCSDS 503.0-B-1, Page D-12
  List<double>? get ANGLE_1 => const fb.ListReader<double>(fb.Float32Reader()).vTableGetNullable(_bc, _bcOffset, 84);
  ///  Second angle value -  CCSDS 503.0-B-1, Page D-12
  List<double>? get ANGLE_2 => const fb.ListReader<double>(fb.Float32Reader()).vTableGetNullable(_bc, _bcOffset, 86);
  ///  Uncertainty of first angle -  CCSDS 503.0-B-1
  double get ANGLE_UNCERTAINTY_1 => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  Uncertainty of second angle -  CCSDS 503.0-B-1
  double get ANGLE_UNCERTAINTY_2 => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  Rate of change of range -  CCSDS 503.0-B-1
  double get RANGE_RATE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  Uncertainty in range -  CCSDS 503.0-B-1
  double get RANGE_UNCERTAINTY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 94, 0.0);
  ///  Mode of range data -  CCSDS 503.0-B-1, Page D-10
  String? get RANGE_MODE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Modulus value for range data -  CCSDS 503.0-B-1, Page D-10
  double get RANGE_MODULUS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  First correction angle -  CCSDS 503.0-B-1, Page D-12
  double get CORRECTION_ANGLE_1 => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 100, 0.0);
  ///  Second correction angle -  CCSDS 503.0-B-1, Page D-12
  double get CORRECTION_ANGLE_2 => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 102, 0.0);
  ///  Indicator of corrections applied -  CCSDS 503.0-B-1, Page D-12
  String? get CORRECTIONS_APPLIED => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Dry component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
  List<double>? get TROPO_DRY => const fb.ListReader<double>(fb.Float64Reader()).vTableGetNullable(_bc, _bcOffset, 106);
  ///  Wet component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
  List<double>? get TROPO_WET => const fb.ListReader<double>(fb.Float64Reader()).vTableGetNullable(_bc, _bcOffset, 108);
  ///  Slant total electron content -  CCSDS 503.0-B-1, Page D-13
  List<double>? get STEC => const fb.ListReader<double>(fb.Float64Reader()).vTableGetNullable(_bc, _bcOffset, 110);
  ///  Atmospheric pressure -  CCSDS 503.0-B-1, Page D-14
  List<double>? get PRESSURE => const fb.ListReader<double>(fb.Float64Reader()).vTableGetNullable(_bc, _bcOffset, 112);
  ///  Relative humidity -  CCSDS 503.0-B-1, Page D-14
  List<double>? get RHUMIDITY => const fb.ListReader<double>(fb.Float64Reader()).vTableGetNullable(_bc, _bcOffset, 114);
  ///  Ambient temperature -  CCSDS 503.0-B-1, Page D-14
  List<double>? get TEMPERATURE => const fb.ListReader<double>(fb.Float64Reader()).vTableGetNullable(_bc, _bcOffset, 116);
  ///  Clock bias values -  CCSDS 503.0-B-1, Page D-15
  List<double>? get CLOCK_BIAS => const fb.ListReader<double>(fb.Float64Reader()).vTableGetNullable(_bc, _bcOffset, 118);
  ///  Clock drift values -  CCSDS 503.0-B-1, Page D-15
  List<double>? get CLOCK_DRIFT => const fb.ListReader<double>(fb.Float64Reader()).vTableGetNullable(_bc, _bcOffset, 120);

  @override
  String toString() {
    return 'TDM{OBSERVER_ID: ${OBSERVER_ID}, OBSERVER_X: ${OBSERVER_X}, OBSERVER_Y: ${OBSERVER_Y}, OBSERVER_Z: ${OBSERVER_Z}, OBSERVER_VX: ${OBSERVER_VX}, OBSERVER_VY: ${OBSERVER_VY}, OBSERVER_VZ: ${OBSERVER_VZ}, OBSERVER_POSITION_REFERENCE_FRAME: ${OBSERVER_POSITION_REFERENCE_FRAME}, OBS_REFERENCE_FRAME: ${OBS_REFERENCE_FRAME}, EPOCH: ${EPOCH}, CCSDS_TDM_VERS: ${CCSDS_TDM_VERS}, COMMENT: ${COMMENT}, CREATION_DATE: ${CREATION_DATE}, ORIGINATOR: ${ORIGINATOR}, META_START: ${META_START}, TIME_SYSTEM: ${TIME_SYSTEM}, START_TIME: ${START_TIME}, STOP_TIME: ${STOP_TIME}, PARTICIPANT_1: ${PARTICIPANT_1}, PARTICIPANT_2: ${PARTICIPANT_2}, PARTICIPANT_3: ${PARTICIPANT_3}, PARTICIPANT_4: ${PARTICIPANT_4}, PARTICIPANT_5: ${PARTICIPANT_5}, MODE: ${MODE}, PATH_1: ${PATH_1}, PATH_2: ${PATH_2}, TRANSMIT_BAND: ${TRANSMIT_BAND}, RECEIVE_BAND: ${RECEIVE_BAND}, INTEGRATION_INTERVAL: ${INTEGRATION_INTERVAL}, INTEGRATION_REF: ${INTEGRATION_REF}, RECEIVE_DELAY_2: ${RECEIVE_DELAY_2}, RECEIVE_DELAY_3: ${RECEIVE_DELAY_3}, DATA_QUALITY: ${DATA_QUALITY}, META_STOP: ${META_STOP}, DATA_START: ${DATA_START}, TRANSMIT_FREQ_1: ${TRANSMIT_FREQ_1}, RECEIVE_FREQ: ${RECEIVE_FREQ}, DATA_STOP: ${DATA_STOP}, TIMETAG_REF: ${TIMETAG_REF}, ANGLE_TYPE: ${ANGLE_TYPE}, ANGLE_1: ${ANGLE_1}, ANGLE_2: ${ANGLE_2}, ANGLE_UNCERTAINTY_1: ${ANGLE_UNCERTAINTY_1}, ANGLE_UNCERTAINTY_2: ${ANGLE_UNCERTAINTY_2}, RANGE_RATE: ${RANGE_RATE}, RANGE_UNCERTAINTY: ${RANGE_UNCERTAINTY}, RANGE_MODE: ${RANGE_MODE}, RANGE_MODULUS: ${RANGE_MODULUS}, CORRECTION_ANGLE_1: ${CORRECTION_ANGLE_1}, CORRECTION_ANGLE_2: ${CORRECTION_ANGLE_2}, CORRECTIONS_APPLIED: ${CORRECTIONS_APPLIED}, TROPO_DRY: ${TROPO_DRY}, TROPO_WET: ${TROPO_WET}, STEC: ${STEC}, PRESSURE: ${PRESSURE}, RHUMIDITY: ${RHUMIDITY}, TEMPERATURE: ${TEMPERATURE}, CLOCK_BIAS: ${CLOCK_BIAS}, CLOCK_DRIFT: ${CLOCK_DRIFT}}';
  }
}

class _TDMReader extends fb.TableReader<TDM> {
  const _TDMReader();

  @override
  TDM createObject(fb.BufferContext bc, int offset) => 
    TDM._(bc, offset);
}

class TDMBuilder {
  TDMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(59);
  }

  int addObserverIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addObserverX(double? OBSERVER_X) {
    fbBuilder.addFloat64(1, OBSERVER_X);
    return fbBuilder.offset;
  }
  int addObserverY(double? OBSERVER_Y) {
    fbBuilder.addFloat64(2, OBSERVER_Y);
    return fbBuilder.offset;
  }
  int addObserverZ(double? OBSERVER_Z) {
    fbBuilder.addFloat64(3, OBSERVER_Z);
    return fbBuilder.offset;
  }
  int addObserverVx(double? OBSERVER_VX) {
    fbBuilder.addFloat64(4, OBSERVER_VX);
    return fbBuilder.offset;
  }
  int addObserverVy(double? OBSERVER_VY) {
    fbBuilder.addFloat64(5, OBSERVER_VY);
    return fbBuilder.offset;
  }
  int addObserverVz(double? OBSERVER_VZ) {
    fbBuilder.addFloat64(6, OBSERVER_VZ);
    return fbBuilder.offset;
  }
  int addObserverPositionReferenceFrame(RefFrame? OBSERVER_POSITION_REFERENCE_FRAME) {
    fbBuilder.addInt8(7, OBSERVER_POSITION_REFERENCE_FRAME?.value);
    return fbBuilder.offset;
  }
  int addObsReferenceFrame(RefFrame? OBS_REFERENCE_FRAME) {
    fbBuilder.addInt8(8, OBS_REFERENCE_FRAME?.value);
    return fbBuilder.offset;
  }
  int addEpochOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addCcsdsTdmVersOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addCommentOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addCreationDateOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addOriginatorOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addMetaStartOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addTimeSystemOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addStopTimeOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addParticipant1Offset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addParticipant2Offset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addParticipant3Offset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addParticipant4Offset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addParticipant5Offset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addModeOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addPath1(int? PATH_1) {
    fbBuilder.addUint16(24, PATH_1);
    return fbBuilder.offset;
  }
  int addPath2(int? PATH_2) {
    fbBuilder.addUint16(25, PATH_2);
    return fbBuilder.offset;
  }
  int addTransmitBandOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addReceiveBandOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addIntegrationInterval(double? INTEGRATION_INTERVAL) {
    fbBuilder.addFloat32(28, INTEGRATION_INTERVAL);
    return fbBuilder.offset;
  }
  int addIntegrationRefOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addReceiveDelay2(double? RECEIVE_DELAY_2) {
    fbBuilder.addFloat64(30, RECEIVE_DELAY_2);
    return fbBuilder.offset;
  }
  int addReceiveDelay3(double? RECEIVE_DELAY_3) {
    fbBuilder.addFloat64(31, RECEIVE_DELAY_3);
    return fbBuilder.offset;
  }
  int addDataQualityOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addMetaStopOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addDataStartOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addTransmitFreq1(double? TRANSMIT_FREQ_1) {
    fbBuilder.addFloat64(35, TRANSMIT_FREQ_1);
    return fbBuilder.offset;
  }
  int addReceiveFreqOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addDataStopOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addTimetagRefOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addAngleTypeOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addAngle1Offset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addAngle2Offset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addAngleUncertainty1(double? ANGLE_UNCERTAINTY_1) {
    fbBuilder.addFloat32(42, ANGLE_UNCERTAINTY_1);
    return fbBuilder.offset;
  }
  int addAngleUncertainty2(double? ANGLE_UNCERTAINTY_2) {
    fbBuilder.addFloat32(43, ANGLE_UNCERTAINTY_2);
    return fbBuilder.offset;
  }
  int addRangeRate(double? RANGE_RATE) {
    fbBuilder.addFloat64(44, RANGE_RATE);
    return fbBuilder.offset;
  }
  int addRangeUncertainty(double? RANGE_UNCERTAINTY) {
    fbBuilder.addFloat64(45, RANGE_UNCERTAINTY);
    return fbBuilder.offset;
  }
  int addRangeModeOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addRangeModulus(double? RANGE_MODULUS) {
    fbBuilder.addFloat64(47, RANGE_MODULUS);
    return fbBuilder.offset;
  }
  int addCorrectionAngle1(double? CORRECTION_ANGLE_1) {
    fbBuilder.addFloat32(48, CORRECTION_ANGLE_1);
    return fbBuilder.offset;
  }
  int addCorrectionAngle2(double? CORRECTION_ANGLE_2) {
    fbBuilder.addFloat32(49, CORRECTION_ANGLE_2);
    return fbBuilder.offset;
  }
  int addCorrectionsAppliedOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addTropoDryOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addTropoWetOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addStecOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }
  int addPressureOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addRhumidityOffset(int? offset) {
    fbBuilder.addOffset(55, offset);
    return fbBuilder.offset;
  }
  int addTemperatureOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }
  int addClockBiasOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }
  int addClockDriftOffset(int? offset) {
    fbBuilder.addOffset(58, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TDMObjectBuilder extends fb.ObjectBuilder {
  final String? _OBSERVER_ID;
  final double? _OBSERVER_X;
  final double? _OBSERVER_Y;
  final double? _OBSERVER_Z;
  final double? _OBSERVER_VX;
  final double? _OBSERVER_VY;
  final double? _OBSERVER_VZ;
  final RefFrame? _OBSERVER_POSITION_REFERENCE_FRAME;
  final RefFrame? _OBS_REFERENCE_FRAME;
  final String? _EPOCH;
  final String? _CCSDS_TDM_VERS;
  final List<String>? _COMMENT;
  final String? _CREATION_DATE;
  final String? _ORIGINATOR;
  final String? _META_START;
  final String? _TIME_SYSTEM;
  final String? _START_TIME;
  final String? _STOP_TIME;
  final String? _PARTICIPANT_1;
  final String? _PARTICIPANT_2;
  final String? _PARTICIPANT_3;
  final String? _PARTICIPANT_4;
  final String? _PARTICIPANT_5;
  final String? _MODE;
  final int? _PATH_1;
  final int? _PATH_2;
  final String? _TRANSMIT_BAND;
  final String? _RECEIVE_BAND;
  final double? _INTEGRATION_INTERVAL;
  final String? _INTEGRATION_REF;
  final double? _RECEIVE_DELAY_2;
  final double? _RECEIVE_DELAY_3;
  final String? _DATA_QUALITY;
  final String? _META_STOP;
  final String? _DATA_START;
  final double? _TRANSMIT_FREQ_1;
  final List<double>? _RECEIVE_FREQ;
  final String? _DATA_STOP;
  final String? _TIMETAG_REF;
  final String? _ANGLE_TYPE;
  final List<double>? _ANGLE_1;
  final List<double>? _ANGLE_2;
  final double? _ANGLE_UNCERTAINTY_1;
  final double? _ANGLE_UNCERTAINTY_2;
  final double? _RANGE_RATE;
  final double? _RANGE_UNCERTAINTY;
  final String? _RANGE_MODE;
  final double? _RANGE_MODULUS;
  final double? _CORRECTION_ANGLE_1;
  final double? _CORRECTION_ANGLE_2;
  final String? _CORRECTIONS_APPLIED;
  final List<double>? _TROPO_DRY;
  final List<double>? _TROPO_WET;
  final List<double>? _STEC;
  final List<double>? _PRESSURE;
  final List<double>? _RHUMIDITY;
  final List<double>? _TEMPERATURE;
  final List<double>? _CLOCK_BIAS;
  final List<double>? _CLOCK_DRIFT;

  TDMObjectBuilder({
    String? OBSERVER_ID,
    double? OBSERVER_X,
    double? OBSERVER_Y,
    double? OBSERVER_Z,
    double? OBSERVER_VX,
    double? OBSERVER_VY,
    double? OBSERVER_VZ,
    RefFrame? OBSERVER_POSITION_REFERENCE_FRAME,
    RefFrame? OBS_REFERENCE_FRAME,
    String? EPOCH,
    String? CCSDS_TDM_VERS,
    List<String>? COMMENT,
    String? CREATION_DATE,
    String? ORIGINATOR,
    String? META_START,
    String? TIME_SYSTEM,
    String? START_TIME,
    String? STOP_TIME,
    String? PARTICIPANT_1,
    String? PARTICIPANT_2,
    String? PARTICIPANT_3,
    String? PARTICIPANT_4,
    String? PARTICIPANT_5,
    String? MODE,
    int? PATH_1,
    int? PATH_2,
    String? TRANSMIT_BAND,
    String? RECEIVE_BAND,
    double? INTEGRATION_INTERVAL,
    String? INTEGRATION_REF,
    double? RECEIVE_DELAY_2,
    double? RECEIVE_DELAY_3,
    String? DATA_QUALITY,
    String? META_STOP,
    String? DATA_START,
    double? TRANSMIT_FREQ_1,
    List<double>? RECEIVE_FREQ,
    String? DATA_STOP,
    String? TIMETAG_REF,
    String? ANGLE_TYPE,
    List<double>? ANGLE_1,
    List<double>? ANGLE_2,
    double? ANGLE_UNCERTAINTY_1,
    double? ANGLE_UNCERTAINTY_2,
    double? RANGE_RATE,
    double? RANGE_UNCERTAINTY,
    String? RANGE_MODE,
    double? RANGE_MODULUS,
    double? CORRECTION_ANGLE_1,
    double? CORRECTION_ANGLE_2,
    String? CORRECTIONS_APPLIED,
    List<double>? TROPO_DRY,
    List<double>? TROPO_WET,
    List<double>? STEC,
    List<double>? PRESSURE,
    List<double>? RHUMIDITY,
    List<double>? TEMPERATURE,
    List<double>? CLOCK_BIAS,
    List<double>? CLOCK_DRIFT,
  })
      : _OBSERVER_ID = OBSERVER_ID,
        _OBSERVER_X = OBSERVER_X,
        _OBSERVER_Y = OBSERVER_Y,
        _OBSERVER_Z = OBSERVER_Z,
        _OBSERVER_VX = OBSERVER_VX,
        _OBSERVER_VY = OBSERVER_VY,
        _OBSERVER_VZ = OBSERVER_VZ,
        _OBSERVER_POSITION_REFERENCE_FRAME = OBSERVER_POSITION_REFERENCE_FRAME,
        _OBS_REFERENCE_FRAME = OBS_REFERENCE_FRAME,
        _EPOCH = EPOCH,
        _CCSDS_TDM_VERS = CCSDS_TDM_VERS,
        _COMMENT = COMMENT,
        _CREATION_DATE = CREATION_DATE,
        _ORIGINATOR = ORIGINATOR,
        _META_START = META_START,
        _TIME_SYSTEM = TIME_SYSTEM,
        _START_TIME = START_TIME,
        _STOP_TIME = STOP_TIME,
        _PARTICIPANT_1 = PARTICIPANT_1,
        _PARTICIPANT_2 = PARTICIPANT_2,
        _PARTICIPANT_3 = PARTICIPANT_3,
        _PARTICIPANT_4 = PARTICIPANT_4,
        _PARTICIPANT_5 = PARTICIPANT_5,
        _MODE = MODE,
        _PATH_1 = PATH_1,
        _PATH_2 = PATH_2,
        _TRANSMIT_BAND = TRANSMIT_BAND,
        _RECEIVE_BAND = RECEIVE_BAND,
        _INTEGRATION_INTERVAL = INTEGRATION_INTERVAL,
        _INTEGRATION_REF = INTEGRATION_REF,
        _RECEIVE_DELAY_2 = RECEIVE_DELAY_2,
        _RECEIVE_DELAY_3 = RECEIVE_DELAY_3,
        _DATA_QUALITY = DATA_QUALITY,
        _META_STOP = META_STOP,
        _DATA_START = DATA_START,
        _TRANSMIT_FREQ_1 = TRANSMIT_FREQ_1,
        _RECEIVE_FREQ = RECEIVE_FREQ,
        _DATA_STOP = DATA_STOP,
        _TIMETAG_REF = TIMETAG_REF,
        _ANGLE_TYPE = ANGLE_TYPE,
        _ANGLE_1 = ANGLE_1,
        _ANGLE_2 = ANGLE_2,
        _ANGLE_UNCERTAINTY_1 = ANGLE_UNCERTAINTY_1,
        _ANGLE_UNCERTAINTY_2 = ANGLE_UNCERTAINTY_2,
        _RANGE_RATE = RANGE_RATE,
        _RANGE_UNCERTAINTY = RANGE_UNCERTAINTY,
        _RANGE_MODE = RANGE_MODE,
        _RANGE_MODULUS = RANGE_MODULUS,
        _CORRECTION_ANGLE_1 = CORRECTION_ANGLE_1,
        _CORRECTION_ANGLE_2 = CORRECTION_ANGLE_2,
        _CORRECTIONS_APPLIED = CORRECTIONS_APPLIED,
        _TROPO_DRY = TROPO_DRY,
        _TROPO_WET = TROPO_WET,
        _STEC = STEC,
        _PRESSURE = PRESSURE,
        _RHUMIDITY = RHUMIDITY,
        _TEMPERATURE = TEMPERATURE,
        _CLOCK_BIAS = CLOCK_BIAS,
        _CLOCK_DRIFT = CLOCK_DRIFT;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? OBSERVER_IDOffset = _OBSERVER_ID == null ? null
        : fbBuilder.writeString(_OBSERVER_ID!);
    final int? EPOCHOffset = _EPOCH == null ? null
        : fbBuilder.writeString(_EPOCH!);
    final int? CCSDS_TDM_VERSOffset = _CCSDS_TDM_VERS == null ? null
        : fbBuilder.writeString(_CCSDS_TDM_VERS!);
    final int? COMMENTOffset = _COMMENT == null ? null
        : fbBuilder.writeList(_COMMENT!.map(fbBuilder.writeString).toList());
    final int? CREATION_DATEOffset = _CREATION_DATE == null ? null
        : fbBuilder.writeString(_CREATION_DATE!);
    final int? ORIGINATOROffset = _ORIGINATOR == null ? null
        : fbBuilder.writeString(_ORIGINATOR!);
    final int? META_STARTOffset = _META_START == null ? null
        : fbBuilder.writeString(_META_START!);
    final int? TIME_SYSTEMOffset = _TIME_SYSTEM == null ? null
        : fbBuilder.writeString(_TIME_SYSTEM!);
    final int? START_TIMEOffset = _START_TIME == null ? null
        : fbBuilder.writeString(_START_TIME!);
    final int? STOP_TIMEOffset = _STOP_TIME == null ? null
        : fbBuilder.writeString(_STOP_TIME!);
    final int? PARTICIPANT_1Offset = _PARTICIPANT_1 == null ? null
        : fbBuilder.writeString(_PARTICIPANT_1!);
    final int? PARTICIPANT_2Offset = _PARTICIPANT_2 == null ? null
        : fbBuilder.writeString(_PARTICIPANT_2!);
    final int? PARTICIPANT_3Offset = _PARTICIPANT_3 == null ? null
        : fbBuilder.writeString(_PARTICIPANT_3!);
    final int? PARTICIPANT_4Offset = _PARTICIPANT_4 == null ? null
        : fbBuilder.writeString(_PARTICIPANT_4!);
    final int? PARTICIPANT_5Offset = _PARTICIPANT_5 == null ? null
        : fbBuilder.writeString(_PARTICIPANT_5!);
    final int? MODEOffset = _MODE == null ? null
        : fbBuilder.writeString(_MODE!);
    final int? TRANSMIT_BANDOffset = _TRANSMIT_BAND == null ? null
        : fbBuilder.writeString(_TRANSMIT_BAND!);
    final int? RECEIVE_BANDOffset = _RECEIVE_BAND == null ? null
        : fbBuilder.writeString(_RECEIVE_BAND!);
    final int? INTEGRATION_REFOffset = _INTEGRATION_REF == null ? null
        : fbBuilder.writeString(_INTEGRATION_REF!);
    final int? DATA_QUALITYOffset = _DATA_QUALITY == null ? null
        : fbBuilder.writeString(_DATA_QUALITY!);
    final int? META_STOPOffset = _META_STOP == null ? null
        : fbBuilder.writeString(_META_STOP!);
    final int? DATA_STARTOffset = _DATA_START == null ? null
        : fbBuilder.writeString(_DATA_START!);
    final int? RECEIVE_FREQOffset = _RECEIVE_FREQ == null ? null
        : fbBuilder.writeListFloat64(_RECEIVE_FREQ!);
    final int? DATA_STOPOffset = _DATA_STOP == null ? null
        : fbBuilder.writeString(_DATA_STOP!);
    final int? TIMETAG_REFOffset = _TIMETAG_REF == null ? null
        : fbBuilder.writeString(_TIMETAG_REF!);
    final int? ANGLE_TYPEOffset = _ANGLE_TYPE == null ? null
        : fbBuilder.writeString(_ANGLE_TYPE!);
    final int? ANGLE_1Offset = _ANGLE_1 == null ? null
        : fbBuilder.writeListFloat32(_ANGLE_1!);
    final int? ANGLE_2Offset = _ANGLE_2 == null ? null
        : fbBuilder.writeListFloat32(_ANGLE_2!);
    final int? RANGE_MODEOffset = _RANGE_MODE == null ? null
        : fbBuilder.writeString(_RANGE_MODE!);
    final int? CORRECTIONS_APPLIEDOffset = _CORRECTIONS_APPLIED == null ? null
        : fbBuilder.writeString(_CORRECTIONS_APPLIED!);
    final int? TROPO_DRYOffset = _TROPO_DRY == null ? null
        : fbBuilder.writeListFloat64(_TROPO_DRY!);
    final int? TROPO_WETOffset = _TROPO_WET == null ? null
        : fbBuilder.writeListFloat64(_TROPO_WET!);
    final int? STECOffset = _STEC == null ? null
        : fbBuilder.writeListFloat64(_STEC!);
    final int? PRESSUREOffset = _PRESSURE == null ? null
        : fbBuilder.writeListFloat64(_PRESSURE!);
    final int? RHUMIDITYOffset = _RHUMIDITY == null ? null
        : fbBuilder.writeListFloat64(_RHUMIDITY!);
    final int? TEMPERATUREOffset = _TEMPERATURE == null ? null
        : fbBuilder.writeListFloat64(_TEMPERATURE!);
    final int? CLOCK_BIASOffset = _CLOCK_BIAS == null ? null
        : fbBuilder.writeListFloat64(_CLOCK_BIAS!);
    final int? CLOCK_DRIFTOffset = _CLOCK_DRIFT == null ? null
        : fbBuilder.writeListFloat64(_CLOCK_DRIFT!);
    fbBuilder.startTable(59);
    fbBuilder.addOffset(0, OBSERVER_IDOffset);
    fbBuilder.addFloat64(1, _OBSERVER_X);
    fbBuilder.addFloat64(2, _OBSERVER_Y);
    fbBuilder.addFloat64(3, _OBSERVER_Z);
    fbBuilder.addFloat64(4, _OBSERVER_VX);
    fbBuilder.addFloat64(5, _OBSERVER_VY);
    fbBuilder.addFloat64(6, _OBSERVER_VZ);
    fbBuilder.addInt8(7, _OBSERVER_POSITION_REFERENCE_FRAME?.value);
    fbBuilder.addInt8(8, _OBS_REFERENCE_FRAME?.value);
    fbBuilder.addOffset(9, EPOCHOffset);
    fbBuilder.addOffset(10, CCSDS_TDM_VERSOffset);
    fbBuilder.addOffset(11, COMMENTOffset);
    fbBuilder.addOffset(12, CREATION_DATEOffset);
    fbBuilder.addOffset(13, ORIGINATOROffset);
    fbBuilder.addOffset(14, META_STARTOffset);
    fbBuilder.addOffset(15, TIME_SYSTEMOffset);
    fbBuilder.addOffset(16, START_TIMEOffset);
    fbBuilder.addOffset(17, STOP_TIMEOffset);
    fbBuilder.addOffset(18, PARTICIPANT_1Offset);
    fbBuilder.addOffset(19, PARTICIPANT_2Offset);
    fbBuilder.addOffset(20, PARTICIPANT_3Offset);
    fbBuilder.addOffset(21, PARTICIPANT_4Offset);
    fbBuilder.addOffset(22, PARTICIPANT_5Offset);
    fbBuilder.addOffset(23, MODEOffset);
    fbBuilder.addUint16(24, _PATH_1);
    fbBuilder.addUint16(25, _PATH_2);
    fbBuilder.addOffset(26, TRANSMIT_BANDOffset);
    fbBuilder.addOffset(27, RECEIVE_BANDOffset);
    fbBuilder.addFloat32(28, _INTEGRATION_INTERVAL);
    fbBuilder.addOffset(29, INTEGRATION_REFOffset);
    fbBuilder.addFloat64(30, _RECEIVE_DELAY_2);
    fbBuilder.addFloat64(31, _RECEIVE_DELAY_3);
    fbBuilder.addOffset(32, DATA_QUALITYOffset);
    fbBuilder.addOffset(33, META_STOPOffset);
    fbBuilder.addOffset(34, DATA_STARTOffset);
    fbBuilder.addFloat64(35, _TRANSMIT_FREQ_1);
    fbBuilder.addOffset(36, RECEIVE_FREQOffset);
    fbBuilder.addOffset(37, DATA_STOPOffset);
    fbBuilder.addOffset(38, TIMETAG_REFOffset);
    fbBuilder.addOffset(39, ANGLE_TYPEOffset);
    fbBuilder.addOffset(40, ANGLE_1Offset);
    fbBuilder.addOffset(41, ANGLE_2Offset);
    fbBuilder.addFloat32(42, _ANGLE_UNCERTAINTY_1);
    fbBuilder.addFloat32(43, _ANGLE_UNCERTAINTY_2);
    fbBuilder.addFloat64(44, _RANGE_RATE);
    fbBuilder.addFloat64(45, _RANGE_UNCERTAINTY);
    fbBuilder.addOffset(46, RANGE_MODEOffset);
    fbBuilder.addFloat64(47, _RANGE_MODULUS);
    fbBuilder.addFloat32(48, _CORRECTION_ANGLE_1);
    fbBuilder.addFloat32(49, _CORRECTION_ANGLE_2);
    fbBuilder.addOffset(50, CORRECTIONS_APPLIEDOffset);
    fbBuilder.addOffset(51, TROPO_DRYOffset);
    fbBuilder.addOffset(52, TROPO_WETOffset);
    fbBuilder.addOffset(53, STECOffset);
    fbBuilder.addOffset(54, PRESSUREOffset);
    fbBuilder.addOffset(55, RHUMIDITYOffset);
    fbBuilder.addOffset(56, TEMPERATUREOffset);
    fbBuilder.addOffset(57, CLOCK_BIASOffset);
    fbBuilder.addOffset(58, CLOCK_DRIFTOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TDMCOLLECTION {
  TDMCOLLECTION._(this._bc, this._bcOffset);
  factory TDMCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TDMCOLLECTION> reader = _TDMCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<TDM>? get RECORDS => const fb.ListReader<TDM>(TDM.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'TDMCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _TDMCOLLECTIONReader extends fb.TableReader<TDMCOLLECTION> {
  const _TDMCOLLECTIONReader();

  @override
  TDMCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    TDMCOLLECTION._(bc, offset);
}

class TDMCOLLECTIONBuilder {
  TDMCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TDMCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<TDMObjectBuilder>? _RECORDS;

  TDMCOLLECTIONObjectBuilder({
    List<TDMObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
