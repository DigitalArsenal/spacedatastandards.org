// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  Collection Request Message
class CRM {
  CRM._(this._bc, this._bcOffset);
  factory CRM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CRM> reader = _CRMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier of the record, auto-generated by the system.
  String? get ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  String? get CLASSIFICATION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  The type of this collect or contact request.
  String? get TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique identifier of the parent plan or schedule associated with this request.
  String? get ID_PLAN => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Index number for records within a collection plan or schedule.
  int get PLAN_INDEX => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  Task ID associated with this request.
  String? get TASK_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  The dwell ID associated with this request.
  String? get DWELL_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Optional ID from external systems.
  String? get EXTERNAL_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Unique identifier of the requested/scheduled/planned sensor associated with this request.
  String? get ID_SENSOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request.
  String? get ORIG_SENSOR_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Optional type of observation requested.
  String? get OB_TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  The priority of the collect request.
  String? get PRIORITY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  The tasking category associated with this request.
  int get TASK_CATEGORY => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  The tasking suffix associated with this request.
  String? get SUFFIX => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Boolean indicating that this collect request is UCT follow-up.
  bool get UCT_FOLLOW_UP => const fb.BoolReader().vTableGet(_bc, _bcOffset, 32, false);
  ///  The start time of the collect or contact request window, in ISO 8601 UTC format.
  String? get START_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  The end time of the collect or contact request window, in ISO 8601 UTC format.
  String? get END_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Satellite/catalog number of the target on-orbit object for this request.
  int get NORAD_CAT_ID => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 38, 0);
  ///  Optional identifier provided by the data source to indicate the target object of this request.
  String? get ORIG_OBJECT_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  The tasking group to which the target object is assigned.
  String? get TASK_GROUP => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Inter-Range Operations Number.
  int get IRON => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 44, 0);
  ///  The orbit regime of the target.
  String? get ORBIT_REGIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  The minimum object (diameter) size, in meters, to be reported.
  double get TARGET_SIZE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  The minimum Radar Cross-Section of the target, in m^2.
  double get RCS_MIN => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  The Radar Cross-Section of the target, in m^2.
  double get RCS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  The maximum Radar Cross-Section of the target, in m^2.
  double get RCS_MAX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  The minimum frequency of interest, in MHz.
  double get FREQ_MIN => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  ///  The estimated or expected emission frequency of the target, in MHz.
  double get FREQ => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  The maximum frequency of interest, in MHz.
  double get FREQ_MAX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  The RF polarization.
  String? get POLARIZATION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).
  double get VIS_MAG_MIN => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  The estimated or expected visual magnitude of the target, in Magnitudes (M).
  double get VIS_MAG => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).
  double get VIS_MAG_MAX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  The spectral model used for the irradiance calculation.
  String? get SPECTRAL_MODEL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  The fraction of solar energy reflected from target.
  double get REFLECTANCE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  The target object irradiance value.
  double get IRRADIANCE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  For optical sensors, the requested number of frames to capture at each sensor step.
  int get NUM_FRAMES => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 76, 0);
  ///  For optical sensors, the frame rate of the camera, in Hz.
  double get FRAME_RATE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  For optical sensors, the integration time per camera frame, in milliseconds.
  double get INTEGRATION_TIME => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  The number of requested tracks on the target.
  int get NUM_TRACKS => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 82, 0);
  ///  The number of requested observations on the target.
  int get NUM_OBS => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 84, 0);
  ///  The duration of the collect request, in seconds.
  int get DURATION => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 86, 0);
  ///  The search pattern to be executed for this request.
  String? get SRCH_PATTERN => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.
  String? get SCENARIO => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  ID of the Elset of the object associated with this request.
  String? get ID_ELSET => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  ID of the Manifold Elset of the object associated with this request.
  String? get ID_MANIFOLD => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  ID of the State Vector of the object or central vector associated with this request.
  String? get ID_STATE_VECTOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  ID of the Ephemeris Set of the object associated with this request.
  String? get ES_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Epoch time, in ISO 8601 UTC format, of the orbital elements.
  String? get EPOCH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  The average of the periapsis and apoapsis distances, in kilometers.
  double get SEMI_MAJOR_AXIS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 102, 0.0);
  ///  The orbital eccentricity of an astronomical object.
  double get ECCENTRICITY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 104, 0.0);
  ///  The angle, in degrees, between the equator and the orbit plane.
  double get INCLINATION => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 106, 0.0);
  ///  Right ascension of the ascending node, in degrees.
  double get RAAN => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 108, 0.0);
  ///  The argument of perigee, in degrees.
  double get ARG_OF_PERIGEE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 110, 0.0);
  ///  The mean anomaly defines the angular position, in degrees, of the object on its orbital path.
  double get MEAN_ANOMALY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 112, 0.0);
  ///  The expected or directed right ascension angle, in degrees.
  double get RA => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 114, 0.0);
  ///  The expected or directed declination angle, in degrees.
  double get DEC => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 116, 0.0);
  ///  The expected or directed azimuth angle, in degrees.
  double get AZ => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 118, 0.0);
  ///  The expected or directed elevation angle, in degrees.
  double get EL => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 120, 0.0);
  ///  The expected acquisition range or defined center range, in km.
  double get RANGE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 122, 0.0);
  ///  The extent of the azimuth angle, in degrees, from center azimuth.
  double get EXTENT_AZ => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 124, 0.0);
  ///  The extent of the elevation angle, in degrees, from center elevation.
  double get EXTENT_EL => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 126, 0.0);
  ///  The extent of the range, in km, from center range.
  double get EXTENT_RANGE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 128, 0.0);
  ///  WGS-84 latitude, in degrees.
  double get LAT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 130, 0.0);
  ///  WGS-84 longitude, in degrees.
  double get LON => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 132, 0.0);
  ///  Height above WGS-84 ellipsoid (HAE), in kilometers.
  double get ALT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 134, 0.0);
  ///  The stopping WGS-84 latitude of a volume definition, in degrees.
  double get STOP_LAT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 136, 0.0);
  ///  The stopping WGS-84 longitude of a volume definition, in degrees.
  double get STOP_LON => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 138, 0.0);
  ///  The stopping HAE WGS-84 height above ellipsoid (HAE), in kilometers.
  double get STOP_ALT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 140, 0.0);
  ///  The maximum inclination, in degrees, to be used in search operations.
  double get SRCH_INC => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 142, 0.0);
  ///  The angular distance, in degrees, in the sensor-x direction from scan center.
  double get X_ANGLE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 144, 0.0);
  ///  The angular distance, in degrees, in the sensor-y direction from scan center.
  double get Y_ANGLE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 146, 0.0);
  ///  The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.
  double get ORIENT_ANGLE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 148, 0.0);
  ///  The customer for this request.
  String? get CUSTOMER => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 150);
  ///  Notes or comments associated with this request.
  String? get NOTES => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 152);
  ///   Source of the data.
  String? get SOURCE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 154);
  ///   Originating system or organization which produced the data, if different from the source.
  String? get ORIGIN => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 156);
  ///   Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data.
  String? get DATA_MODE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 158);

  @override
  String toString() {
    return 'CRM{ID: ${ID}, CLASSIFICATION: ${CLASSIFICATION}, TYPE: ${TYPE}, ID_PLAN: ${ID_PLAN}, PLAN_INDEX: ${PLAN_INDEX}, TASK_ID: ${TASK_ID}, DWELL_ID: ${DWELL_ID}, EXTERNAL_ID: ${EXTERNAL_ID}, ID_SENSOR: ${ID_SENSOR}, ORIG_SENSOR_ID: ${ORIG_SENSOR_ID}, OB_TYPE: ${OB_TYPE}, PRIORITY: ${PRIORITY}, TASK_CATEGORY: ${TASK_CATEGORY}, SUFFIX: ${SUFFIX}, UCT_FOLLOW_UP: ${UCT_FOLLOW_UP}, START_TIME: ${START_TIME}, END_TIME: ${END_TIME}, NORAD_CAT_ID: ${NORAD_CAT_ID}, ORIG_OBJECT_ID: ${ORIG_OBJECT_ID}, TASK_GROUP: ${TASK_GROUP}, IRON: ${IRON}, ORBIT_REGIME: ${ORBIT_REGIME}, TARGET_SIZE: ${TARGET_SIZE}, RCS_MIN: ${RCS_MIN}, RCS: ${RCS}, RCS_MAX: ${RCS_MAX}, FREQ_MIN: ${FREQ_MIN}, FREQ: ${FREQ}, FREQ_MAX: ${FREQ_MAX}, POLARIZATION: ${POLARIZATION}, VIS_MAG_MIN: ${VIS_MAG_MIN}, VIS_MAG: ${VIS_MAG}, VIS_MAG_MAX: ${VIS_MAG_MAX}, SPECTRAL_MODEL: ${SPECTRAL_MODEL}, REFLECTANCE: ${REFLECTANCE}, IRRADIANCE: ${IRRADIANCE}, NUM_FRAMES: ${NUM_FRAMES}, FRAME_RATE: ${FRAME_RATE}, INTEGRATION_TIME: ${INTEGRATION_TIME}, NUM_TRACKS: ${NUM_TRACKS}, NUM_OBS: ${NUM_OBS}, DURATION: ${DURATION}, SRCH_PATTERN: ${SRCH_PATTERN}, SCENARIO: ${SCENARIO}, ID_ELSET: ${ID_ELSET}, ID_MANIFOLD: ${ID_MANIFOLD}, ID_STATE_VECTOR: ${ID_STATE_VECTOR}, ES_ID: ${ES_ID}, EPOCH: ${EPOCH}, SEMI_MAJOR_AXIS: ${SEMI_MAJOR_AXIS}, ECCENTRICITY: ${ECCENTRICITY}, INCLINATION: ${INCLINATION}, RAAN: ${RAAN}, ARG_OF_PERIGEE: ${ARG_OF_PERIGEE}, MEAN_ANOMALY: ${MEAN_ANOMALY}, RA: ${RA}, DEC: ${DEC}, AZ: ${AZ}, EL: ${EL}, RANGE: ${RANGE}, EXTENT_AZ: ${EXTENT_AZ}, EXTENT_EL: ${EXTENT_EL}, EXTENT_RANGE: ${EXTENT_RANGE}, LAT: ${LAT}, LON: ${LON}, ALT: ${ALT}, STOP_LAT: ${STOP_LAT}, STOP_LON: ${STOP_LON}, STOP_ALT: ${STOP_ALT}, SRCH_INC: ${SRCH_INC}, X_ANGLE: ${X_ANGLE}, Y_ANGLE: ${Y_ANGLE}, ORIENT_ANGLE: ${ORIENT_ANGLE}, CUSTOMER: ${CUSTOMER}, NOTES: ${NOTES}, SOURCE: ${SOURCE}, ORIGIN: ${ORIGIN}, DATA_MODE: ${DATA_MODE}}';
  }
}

class _CRMReader extends fb.TableReader<CRM> {
  const _CRMReader();

  @override
  CRM createObject(fb.BufferContext bc, int offset) => 
    CRM._(bc, offset);
}

class CRMBuilder {
  CRMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(78);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addClassificationOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addIdPlanOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addPlanIndex(int? PLAN_INDEX) {
    fbBuilder.addInt32(4, PLAN_INDEX);
    return fbBuilder.offset;
  }
  int addTaskIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addDwellIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addExternalIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addIdSensorOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addOrigSensorIdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addObTypeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addPriorityOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addTaskCategory(int? TASK_CATEGORY) {
    fbBuilder.addInt32(12, TASK_CATEGORY);
    return fbBuilder.offset;
  }
  int addSuffixOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addUctFollowUp(bool? UCT_FOLLOW_UP) {
    fbBuilder.addBool(14, UCT_FOLLOW_UP);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addEndTimeOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addNoradCatId(int? NORAD_CAT_ID) {
    fbBuilder.addUint32(17, NORAD_CAT_ID);
    return fbBuilder.offset;
  }
  int addOrigObjectIdOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addTaskGroupOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addIron(int? IRON) {
    fbBuilder.addInt32(20, IRON);
    return fbBuilder.offset;
  }
  int addOrbitRegimeOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addTargetSize(double? TARGET_SIZE) {
    fbBuilder.addFloat64(22, TARGET_SIZE);
    return fbBuilder.offset;
  }
  int addRcsMin(double? RCS_MIN) {
    fbBuilder.addFloat64(23, RCS_MIN);
    return fbBuilder.offset;
  }
  int addRcs(double? RCS) {
    fbBuilder.addFloat64(24, RCS);
    return fbBuilder.offset;
  }
  int addRcsMax(double? RCS_MAX) {
    fbBuilder.addFloat64(25, RCS_MAX);
    return fbBuilder.offset;
  }
  int addFreqMin(double? FREQ_MIN) {
    fbBuilder.addFloat64(26, FREQ_MIN);
    return fbBuilder.offset;
  }
  int addFreq(double? FREQ) {
    fbBuilder.addFloat64(27, FREQ);
    return fbBuilder.offset;
  }
  int addFreqMax(double? FREQ_MAX) {
    fbBuilder.addFloat64(28, FREQ_MAX);
    return fbBuilder.offset;
  }
  int addPolarizationOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addVisMagMin(double? VIS_MAG_MIN) {
    fbBuilder.addFloat64(30, VIS_MAG_MIN);
    return fbBuilder.offset;
  }
  int addVisMag(double? VIS_MAG) {
    fbBuilder.addFloat64(31, VIS_MAG);
    return fbBuilder.offset;
  }
  int addVisMagMax(double? VIS_MAG_MAX) {
    fbBuilder.addFloat64(32, VIS_MAG_MAX);
    return fbBuilder.offset;
  }
  int addSpectralModelOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addReflectance(double? REFLECTANCE) {
    fbBuilder.addFloat64(34, REFLECTANCE);
    return fbBuilder.offset;
  }
  int addIrradiance(double? IRRADIANCE) {
    fbBuilder.addFloat64(35, IRRADIANCE);
    return fbBuilder.offset;
  }
  int addNumFrames(int? NUM_FRAMES) {
    fbBuilder.addInt32(36, NUM_FRAMES);
    return fbBuilder.offset;
  }
  int addFrameRate(double? FRAME_RATE) {
    fbBuilder.addFloat64(37, FRAME_RATE);
    return fbBuilder.offset;
  }
  int addIntegrationTime(double? INTEGRATION_TIME) {
    fbBuilder.addFloat64(38, INTEGRATION_TIME);
    return fbBuilder.offset;
  }
  int addNumTracks(int? NUM_TRACKS) {
    fbBuilder.addInt32(39, NUM_TRACKS);
    return fbBuilder.offset;
  }
  int addNumObs(int? NUM_OBS) {
    fbBuilder.addInt32(40, NUM_OBS);
    return fbBuilder.offset;
  }
  int addDuration(int? DURATION) {
    fbBuilder.addInt32(41, DURATION);
    return fbBuilder.offset;
  }
  int addSrchPatternOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addScenarioOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addIdElsetOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addIdManifoldOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addIdStateVectorOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addEsIdOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addEpochOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addSemiMajorAxis(double? SEMI_MAJOR_AXIS) {
    fbBuilder.addFloat64(49, SEMI_MAJOR_AXIS);
    return fbBuilder.offset;
  }
  int addEccentricity(double? ECCENTRICITY) {
    fbBuilder.addFloat64(50, ECCENTRICITY);
    return fbBuilder.offset;
  }
  int addInclination(double? INCLINATION) {
    fbBuilder.addFloat64(51, INCLINATION);
    return fbBuilder.offset;
  }
  int addRaan(double? RAAN) {
    fbBuilder.addFloat64(52, RAAN);
    return fbBuilder.offset;
  }
  int addArgOfPerigee(double? ARG_OF_PERIGEE) {
    fbBuilder.addFloat64(53, ARG_OF_PERIGEE);
    return fbBuilder.offset;
  }
  int addMeanAnomaly(double? MEAN_ANOMALY) {
    fbBuilder.addFloat64(54, MEAN_ANOMALY);
    return fbBuilder.offset;
  }
  int addRa(double? RA) {
    fbBuilder.addFloat64(55, RA);
    return fbBuilder.offset;
  }
  int addDec(double? DEC) {
    fbBuilder.addFloat64(56, DEC);
    return fbBuilder.offset;
  }
  int addAz(double? AZ) {
    fbBuilder.addFloat64(57, AZ);
    return fbBuilder.offset;
  }
  int addEl(double? EL) {
    fbBuilder.addFloat64(58, EL);
    return fbBuilder.offset;
  }
  int addRange(double? RANGE) {
    fbBuilder.addFloat64(59, RANGE);
    return fbBuilder.offset;
  }
  int addExtentAz(double? EXTENT_AZ) {
    fbBuilder.addFloat64(60, EXTENT_AZ);
    return fbBuilder.offset;
  }
  int addExtentEl(double? EXTENT_EL) {
    fbBuilder.addFloat64(61, EXTENT_EL);
    return fbBuilder.offset;
  }
  int addExtentRange(double? EXTENT_RANGE) {
    fbBuilder.addFloat64(62, EXTENT_RANGE);
    return fbBuilder.offset;
  }
  int addLat(double? LAT) {
    fbBuilder.addFloat64(63, LAT);
    return fbBuilder.offset;
  }
  int addLon(double? LON) {
    fbBuilder.addFloat64(64, LON);
    return fbBuilder.offset;
  }
  int addAlt(double? ALT) {
    fbBuilder.addFloat64(65, ALT);
    return fbBuilder.offset;
  }
  int addStopLat(double? STOP_LAT) {
    fbBuilder.addFloat64(66, STOP_LAT);
    return fbBuilder.offset;
  }
  int addStopLon(double? STOP_LON) {
    fbBuilder.addFloat64(67, STOP_LON);
    return fbBuilder.offset;
  }
  int addStopAlt(double? STOP_ALT) {
    fbBuilder.addFloat64(68, STOP_ALT);
    return fbBuilder.offset;
  }
  int addSrchInc(double? SRCH_INC) {
    fbBuilder.addFloat64(69, SRCH_INC);
    return fbBuilder.offset;
  }
  int addXAngle(double? X_ANGLE) {
    fbBuilder.addFloat64(70, X_ANGLE);
    return fbBuilder.offset;
  }
  int addYAngle(double? Y_ANGLE) {
    fbBuilder.addFloat64(71, Y_ANGLE);
    return fbBuilder.offset;
  }
  int addOrientAngle(double? ORIENT_ANGLE) {
    fbBuilder.addFloat64(72, ORIENT_ANGLE);
    return fbBuilder.offset;
  }
  int addCustomerOffset(int? offset) {
    fbBuilder.addOffset(73, offset);
    return fbBuilder.offset;
  }
  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(74, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(75, offset);
    return fbBuilder.offset;
  }
  int addOriginOffset(int? offset) {
    fbBuilder.addOffset(76, offset);
    return fbBuilder.offset;
  }
  int addDataModeOffset(int? offset) {
    fbBuilder.addOffset(77, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CRMObjectBuilder extends fb.ObjectBuilder {
  final String? _ID;
  final String? _CLASSIFICATION;
  final String? _TYPE;
  final String? _ID_PLAN;
  final int? _PLAN_INDEX;
  final String? _TASK_ID;
  final String? _DWELL_ID;
  final String? _EXTERNAL_ID;
  final String? _ID_SENSOR;
  final String? _ORIG_SENSOR_ID;
  final String? _OB_TYPE;
  final String? _PRIORITY;
  final int? _TASK_CATEGORY;
  final String? _SUFFIX;
  final bool? _UCT_FOLLOW_UP;
  final String? _START_TIME;
  final String? _END_TIME;
  final int? _NORAD_CAT_ID;
  final String? _ORIG_OBJECT_ID;
  final String? _TASK_GROUP;
  final int? _IRON;
  final String? _ORBIT_REGIME;
  final double? _TARGET_SIZE;
  final double? _RCS_MIN;
  final double? _RCS;
  final double? _RCS_MAX;
  final double? _FREQ_MIN;
  final double? _FREQ;
  final double? _FREQ_MAX;
  final String? _POLARIZATION;
  final double? _VIS_MAG_MIN;
  final double? _VIS_MAG;
  final double? _VIS_MAG_MAX;
  final String? _SPECTRAL_MODEL;
  final double? _REFLECTANCE;
  final double? _IRRADIANCE;
  final int? _NUM_FRAMES;
  final double? _FRAME_RATE;
  final double? _INTEGRATION_TIME;
  final int? _NUM_TRACKS;
  final int? _NUM_OBS;
  final int? _DURATION;
  final String? _SRCH_PATTERN;
  final String? _SCENARIO;
  final String? _ID_ELSET;
  final String? _ID_MANIFOLD;
  final String? _ID_STATE_VECTOR;
  final String? _ES_ID;
  final String? _EPOCH;
  final double? _SEMI_MAJOR_AXIS;
  final double? _ECCENTRICITY;
  final double? _INCLINATION;
  final double? _RAAN;
  final double? _ARG_OF_PERIGEE;
  final double? _MEAN_ANOMALY;
  final double? _RA;
  final double? _DEC;
  final double? _AZ;
  final double? _EL;
  final double? _RANGE;
  final double? _EXTENT_AZ;
  final double? _EXTENT_EL;
  final double? _EXTENT_RANGE;
  final double? _LAT;
  final double? _LON;
  final double? _ALT;
  final double? _STOP_LAT;
  final double? _STOP_LON;
  final double? _STOP_ALT;
  final double? _SRCH_INC;
  final double? _X_ANGLE;
  final double? _Y_ANGLE;
  final double? _ORIENT_ANGLE;
  final String? _CUSTOMER;
  final String? _NOTES;
  final String? _SOURCE;
  final String? _ORIGIN;
  final String? _DATA_MODE;

  CRMObjectBuilder({
    String? ID,
    String? CLASSIFICATION,
    String? TYPE,
    String? ID_PLAN,
    int? PLAN_INDEX,
    String? TASK_ID,
    String? DWELL_ID,
    String? EXTERNAL_ID,
    String? ID_SENSOR,
    String? ORIG_SENSOR_ID,
    String? OB_TYPE,
    String? PRIORITY,
    int? TASK_CATEGORY,
    String? SUFFIX,
    bool? UCT_FOLLOW_UP,
    String? START_TIME,
    String? END_TIME,
    int? NORAD_CAT_ID,
    String? ORIG_OBJECT_ID,
    String? TASK_GROUP,
    int? IRON,
    String? ORBIT_REGIME,
    double? TARGET_SIZE,
    double? RCS_MIN,
    double? RCS,
    double? RCS_MAX,
    double? FREQ_MIN,
    double? FREQ,
    double? FREQ_MAX,
    String? POLARIZATION,
    double? VIS_MAG_MIN,
    double? VIS_MAG,
    double? VIS_MAG_MAX,
    String? SPECTRAL_MODEL,
    double? REFLECTANCE,
    double? IRRADIANCE,
    int? NUM_FRAMES,
    double? FRAME_RATE,
    double? INTEGRATION_TIME,
    int? NUM_TRACKS,
    int? NUM_OBS,
    int? DURATION,
    String? SRCH_PATTERN,
    String? SCENARIO,
    String? ID_ELSET,
    String? ID_MANIFOLD,
    String? ID_STATE_VECTOR,
    String? ES_ID,
    String? EPOCH,
    double? SEMI_MAJOR_AXIS,
    double? ECCENTRICITY,
    double? INCLINATION,
    double? RAAN,
    double? ARG_OF_PERIGEE,
    double? MEAN_ANOMALY,
    double? RA,
    double? DEC,
    double? AZ,
    double? EL,
    double? RANGE,
    double? EXTENT_AZ,
    double? EXTENT_EL,
    double? EXTENT_RANGE,
    double? LAT,
    double? LON,
    double? ALT,
    double? STOP_LAT,
    double? STOP_LON,
    double? STOP_ALT,
    double? SRCH_INC,
    double? X_ANGLE,
    double? Y_ANGLE,
    double? ORIENT_ANGLE,
    String? CUSTOMER,
    String? NOTES,
    String? SOURCE,
    String? ORIGIN,
    String? DATA_MODE,
  })
      : _ID = ID,
        _CLASSIFICATION = CLASSIFICATION,
        _TYPE = TYPE,
        _ID_PLAN = ID_PLAN,
        _PLAN_INDEX = PLAN_INDEX,
        _TASK_ID = TASK_ID,
        _DWELL_ID = DWELL_ID,
        _EXTERNAL_ID = EXTERNAL_ID,
        _ID_SENSOR = ID_SENSOR,
        _ORIG_SENSOR_ID = ORIG_SENSOR_ID,
        _OB_TYPE = OB_TYPE,
        _PRIORITY = PRIORITY,
        _TASK_CATEGORY = TASK_CATEGORY,
        _SUFFIX = SUFFIX,
        _UCT_FOLLOW_UP = UCT_FOLLOW_UP,
        _START_TIME = START_TIME,
        _END_TIME = END_TIME,
        _NORAD_CAT_ID = NORAD_CAT_ID,
        _ORIG_OBJECT_ID = ORIG_OBJECT_ID,
        _TASK_GROUP = TASK_GROUP,
        _IRON = IRON,
        _ORBIT_REGIME = ORBIT_REGIME,
        _TARGET_SIZE = TARGET_SIZE,
        _RCS_MIN = RCS_MIN,
        _RCS = RCS,
        _RCS_MAX = RCS_MAX,
        _FREQ_MIN = FREQ_MIN,
        _FREQ = FREQ,
        _FREQ_MAX = FREQ_MAX,
        _POLARIZATION = POLARIZATION,
        _VIS_MAG_MIN = VIS_MAG_MIN,
        _VIS_MAG = VIS_MAG,
        _VIS_MAG_MAX = VIS_MAG_MAX,
        _SPECTRAL_MODEL = SPECTRAL_MODEL,
        _REFLECTANCE = REFLECTANCE,
        _IRRADIANCE = IRRADIANCE,
        _NUM_FRAMES = NUM_FRAMES,
        _FRAME_RATE = FRAME_RATE,
        _INTEGRATION_TIME = INTEGRATION_TIME,
        _NUM_TRACKS = NUM_TRACKS,
        _NUM_OBS = NUM_OBS,
        _DURATION = DURATION,
        _SRCH_PATTERN = SRCH_PATTERN,
        _SCENARIO = SCENARIO,
        _ID_ELSET = ID_ELSET,
        _ID_MANIFOLD = ID_MANIFOLD,
        _ID_STATE_VECTOR = ID_STATE_VECTOR,
        _ES_ID = ES_ID,
        _EPOCH = EPOCH,
        _SEMI_MAJOR_AXIS = SEMI_MAJOR_AXIS,
        _ECCENTRICITY = ECCENTRICITY,
        _INCLINATION = INCLINATION,
        _RAAN = RAAN,
        _ARG_OF_PERIGEE = ARG_OF_PERIGEE,
        _MEAN_ANOMALY = MEAN_ANOMALY,
        _RA = RA,
        _DEC = DEC,
        _AZ = AZ,
        _EL = EL,
        _RANGE = RANGE,
        _EXTENT_AZ = EXTENT_AZ,
        _EXTENT_EL = EXTENT_EL,
        _EXTENT_RANGE = EXTENT_RANGE,
        _LAT = LAT,
        _LON = LON,
        _ALT = ALT,
        _STOP_LAT = STOP_LAT,
        _STOP_LON = STOP_LON,
        _STOP_ALT = STOP_ALT,
        _SRCH_INC = SRCH_INC,
        _X_ANGLE = X_ANGLE,
        _Y_ANGLE = Y_ANGLE,
        _ORIENT_ANGLE = ORIENT_ANGLE,
        _CUSTOMER = CUSTOMER,
        _NOTES = NOTES,
        _SOURCE = SOURCE,
        _ORIGIN = ORIGIN,
        _DATA_MODE = DATA_MODE;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? IDOffset = _ID == null ? null
        : fbBuilder.writeString(_ID!);
    final int? CLASSIFICATIONOffset = _CLASSIFICATION == null ? null
        : fbBuilder.writeString(_CLASSIFICATION!);
    final int? TYPEOffset = _TYPE == null ? null
        : fbBuilder.writeString(_TYPE!);
    final int? ID_PLANOffset = _ID_PLAN == null ? null
        : fbBuilder.writeString(_ID_PLAN!);
    final int? TASK_IDOffset = _TASK_ID == null ? null
        : fbBuilder.writeString(_TASK_ID!);
    final int? DWELL_IDOffset = _DWELL_ID == null ? null
        : fbBuilder.writeString(_DWELL_ID!);
    final int? EXTERNAL_IDOffset = _EXTERNAL_ID == null ? null
        : fbBuilder.writeString(_EXTERNAL_ID!);
    final int? ID_SENSOROffset = _ID_SENSOR == null ? null
        : fbBuilder.writeString(_ID_SENSOR!);
    final int? ORIG_SENSOR_IDOffset = _ORIG_SENSOR_ID == null ? null
        : fbBuilder.writeString(_ORIG_SENSOR_ID!);
    final int? OB_TYPEOffset = _OB_TYPE == null ? null
        : fbBuilder.writeString(_OB_TYPE!);
    final int? PRIORITYOffset = _PRIORITY == null ? null
        : fbBuilder.writeString(_PRIORITY!);
    final int? SUFFIXOffset = _SUFFIX == null ? null
        : fbBuilder.writeString(_SUFFIX!);
    final int? START_TIMEOffset = _START_TIME == null ? null
        : fbBuilder.writeString(_START_TIME!);
    final int? END_TIMEOffset = _END_TIME == null ? null
        : fbBuilder.writeString(_END_TIME!);
    final int? ORIG_OBJECT_IDOffset = _ORIG_OBJECT_ID == null ? null
        : fbBuilder.writeString(_ORIG_OBJECT_ID!);
    final int? TASK_GROUPOffset = _TASK_GROUP == null ? null
        : fbBuilder.writeString(_TASK_GROUP!);
    final int? ORBIT_REGIMEOffset = _ORBIT_REGIME == null ? null
        : fbBuilder.writeString(_ORBIT_REGIME!);
    final int? POLARIZATIONOffset = _POLARIZATION == null ? null
        : fbBuilder.writeString(_POLARIZATION!);
    final int? SPECTRAL_MODELOffset = _SPECTRAL_MODEL == null ? null
        : fbBuilder.writeString(_SPECTRAL_MODEL!);
    final int? SRCH_PATTERNOffset = _SRCH_PATTERN == null ? null
        : fbBuilder.writeString(_SRCH_PATTERN!);
    final int? SCENARIOOffset = _SCENARIO == null ? null
        : fbBuilder.writeString(_SCENARIO!);
    final int? ID_ELSETOffset = _ID_ELSET == null ? null
        : fbBuilder.writeString(_ID_ELSET!);
    final int? ID_MANIFOLDOffset = _ID_MANIFOLD == null ? null
        : fbBuilder.writeString(_ID_MANIFOLD!);
    final int? ID_STATE_VECTOROffset = _ID_STATE_VECTOR == null ? null
        : fbBuilder.writeString(_ID_STATE_VECTOR!);
    final int? ES_IDOffset = _ES_ID == null ? null
        : fbBuilder.writeString(_ES_ID!);
    final int? EPOCHOffset = _EPOCH == null ? null
        : fbBuilder.writeString(_EPOCH!);
    final int? CUSTOMEROffset = _CUSTOMER == null ? null
        : fbBuilder.writeString(_CUSTOMER!);
    final int? NOTESOffset = _NOTES == null ? null
        : fbBuilder.writeString(_NOTES!);
    final int? SOURCEOffset = _SOURCE == null ? null
        : fbBuilder.writeString(_SOURCE!);
    final int? ORIGINOffset = _ORIGIN == null ? null
        : fbBuilder.writeString(_ORIGIN!);
    final int? DATA_MODEOffset = _DATA_MODE == null ? null
        : fbBuilder.writeString(_DATA_MODE!);
    fbBuilder.startTable(78);
    fbBuilder.addOffset(0, IDOffset);
    fbBuilder.addOffset(1, CLASSIFICATIONOffset);
    fbBuilder.addOffset(2, TYPEOffset);
    fbBuilder.addOffset(3, ID_PLANOffset);
    fbBuilder.addInt32(4, _PLAN_INDEX);
    fbBuilder.addOffset(5, TASK_IDOffset);
    fbBuilder.addOffset(6, DWELL_IDOffset);
    fbBuilder.addOffset(7, EXTERNAL_IDOffset);
    fbBuilder.addOffset(8, ID_SENSOROffset);
    fbBuilder.addOffset(9, ORIG_SENSOR_IDOffset);
    fbBuilder.addOffset(10, OB_TYPEOffset);
    fbBuilder.addOffset(11, PRIORITYOffset);
    fbBuilder.addInt32(12, _TASK_CATEGORY);
    fbBuilder.addOffset(13, SUFFIXOffset);
    fbBuilder.addBool(14, _UCT_FOLLOW_UP);
    fbBuilder.addOffset(15, START_TIMEOffset);
    fbBuilder.addOffset(16, END_TIMEOffset);
    fbBuilder.addUint32(17, _NORAD_CAT_ID);
    fbBuilder.addOffset(18, ORIG_OBJECT_IDOffset);
    fbBuilder.addOffset(19, TASK_GROUPOffset);
    fbBuilder.addInt32(20, _IRON);
    fbBuilder.addOffset(21, ORBIT_REGIMEOffset);
    fbBuilder.addFloat64(22, _TARGET_SIZE);
    fbBuilder.addFloat64(23, _RCS_MIN);
    fbBuilder.addFloat64(24, _RCS);
    fbBuilder.addFloat64(25, _RCS_MAX);
    fbBuilder.addFloat64(26, _FREQ_MIN);
    fbBuilder.addFloat64(27, _FREQ);
    fbBuilder.addFloat64(28, _FREQ_MAX);
    fbBuilder.addOffset(29, POLARIZATIONOffset);
    fbBuilder.addFloat64(30, _VIS_MAG_MIN);
    fbBuilder.addFloat64(31, _VIS_MAG);
    fbBuilder.addFloat64(32, _VIS_MAG_MAX);
    fbBuilder.addOffset(33, SPECTRAL_MODELOffset);
    fbBuilder.addFloat64(34, _REFLECTANCE);
    fbBuilder.addFloat64(35, _IRRADIANCE);
    fbBuilder.addInt32(36, _NUM_FRAMES);
    fbBuilder.addFloat64(37, _FRAME_RATE);
    fbBuilder.addFloat64(38, _INTEGRATION_TIME);
    fbBuilder.addInt32(39, _NUM_TRACKS);
    fbBuilder.addInt32(40, _NUM_OBS);
    fbBuilder.addInt32(41, _DURATION);
    fbBuilder.addOffset(42, SRCH_PATTERNOffset);
    fbBuilder.addOffset(43, SCENARIOOffset);
    fbBuilder.addOffset(44, ID_ELSETOffset);
    fbBuilder.addOffset(45, ID_MANIFOLDOffset);
    fbBuilder.addOffset(46, ID_STATE_VECTOROffset);
    fbBuilder.addOffset(47, ES_IDOffset);
    fbBuilder.addOffset(48, EPOCHOffset);
    fbBuilder.addFloat64(49, _SEMI_MAJOR_AXIS);
    fbBuilder.addFloat64(50, _ECCENTRICITY);
    fbBuilder.addFloat64(51, _INCLINATION);
    fbBuilder.addFloat64(52, _RAAN);
    fbBuilder.addFloat64(53, _ARG_OF_PERIGEE);
    fbBuilder.addFloat64(54, _MEAN_ANOMALY);
    fbBuilder.addFloat64(55, _RA);
    fbBuilder.addFloat64(56, _DEC);
    fbBuilder.addFloat64(57, _AZ);
    fbBuilder.addFloat64(58, _EL);
    fbBuilder.addFloat64(59, _RANGE);
    fbBuilder.addFloat64(60, _EXTENT_AZ);
    fbBuilder.addFloat64(61, _EXTENT_EL);
    fbBuilder.addFloat64(62, _EXTENT_RANGE);
    fbBuilder.addFloat64(63, _LAT);
    fbBuilder.addFloat64(64, _LON);
    fbBuilder.addFloat64(65, _ALT);
    fbBuilder.addFloat64(66, _STOP_LAT);
    fbBuilder.addFloat64(67, _STOP_LON);
    fbBuilder.addFloat64(68, _STOP_ALT);
    fbBuilder.addFloat64(69, _SRCH_INC);
    fbBuilder.addFloat64(70, _X_ANGLE);
    fbBuilder.addFloat64(71, _Y_ANGLE);
    fbBuilder.addFloat64(72, _ORIENT_ANGLE);
    fbBuilder.addOffset(73, CUSTOMEROffset);
    fbBuilder.addOffset(74, NOTESOffset);
    fbBuilder.addOffset(75, SOURCEOffset);
    fbBuilder.addOffset(76, ORIGINOffset);
    fbBuilder.addOffset(77, DATA_MODEOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
