// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


import './main_generated.dart';

class RecordTypeTypeId {
  final int value;
  const RecordTypeTypeId._(this.value);

  factory RecordTypeTypeId.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum RecordTypeTypeId');
    }
    return result;
  }

  static RecordTypeTypeId? _createOrNull(int? value) => 
      value == null ? null : RecordTypeTypeId.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 30;
  static bool containsValue(int value) => values.containsKey(value);

  static const RecordTypeTypeId NONE = RecordTypeTypeId._(0);
  static const RecordTypeTypeId CAT = RecordTypeTypeId._(1);
  static const RecordTypeTypeId VCM = RecordTypeTypeId._(2);
  static const RecordTypeTypeId CDM = RecordTypeTypeId._(3);
  static const RecordTypeTypeId IDM = RecordTypeTypeId._(4);
  static const RecordTypeTypeId PLD = RecordTypeTypeId._(5);
  static const RecordTypeTypeId BOV = RecordTypeTypeId._(6);
  static const RecordTypeTypeId EPM = RecordTypeTypeId._(7);
  static const RecordTypeTypeId OSM = RecordTypeTypeId._(8);
  static const RecordTypeTypeId PRG = RecordTypeTypeId._(9);
  static const RecordTypeTypeId CTR = RecordTypeTypeId._(10);
  static const RecordTypeTypeId SIT = RecordTypeTypeId._(11);
  static const RecordTypeTypeId CRM = RecordTypeTypeId._(12);
  static const RecordTypeTypeId EOP = RecordTypeTypeId._(13);
  static const RecordTypeTypeId MET = RecordTypeTypeId._(14);
  static const RecordTypeTypeId OEM = RecordTypeTypeId._(15);
  static const RecordTypeTypeId HYP = RecordTypeTypeId._(16);
  static const RecordTypeTypeId TIM = RecordTypeTypeId._(17);
  static const RecordTypeTypeId ROC = RecordTypeTypeId._(18);
  static const RecordTypeTypeId EME = RecordTypeTypeId._(19);
  static const RecordTypeTypeId RFM = RecordTypeTypeId._(20);
  static const RecordTypeTypeId OMM = RecordTypeTypeId._(21);
  static const RecordTypeTypeId CSM = RecordTypeTypeId._(22);
  static const RecordTypeTypeId LCC = RecordTypeTypeId._(23);
  static const RecordTypeTypeId MPE = RecordTypeTypeId._(24);
  static const RecordTypeTypeId LDM = RecordTypeTypeId._(25);
  static const RecordTypeTypeId SCM = RecordTypeTypeId._(26);
  static const RecordTypeTypeId EOO = RecordTypeTypeId._(27);
  static const RecordTypeTypeId TDM = RecordTypeTypeId._(28);
  static const RecordTypeTypeId OCM = RecordTypeTypeId._(29);
  static const RecordTypeTypeId PNM = RecordTypeTypeId._(30);
  static const Map<int, RecordTypeTypeId> values = {
    0: NONE,
    1: CAT,
    2: VCM,
    3: CDM,
    4: IDM,
    5: PLD,
    6: BOV,
    7: EPM,
    8: OSM,
    9: PRG,
    10: CTR,
    11: SIT,
    12: CRM,
    13: EOP,
    14: MET,
    15: OEM,
    16: HYP,
    17: TIM,
    18: ROC,
    19: EME,
    20: RFM,
    21: OMM,
    22: CSM,
    23: LCC,
    24: MPE,
    25: LDM,
    26: SCM,
    27: EOO,
    28: TDM,
    29: OCM,
    30: PNM};

  static const fb.Reader<RecordTypeTypeId> reader = _RecordTypeTypeIdReader();

  @override
  String toString() {
    return 'RecordTypeTypeId{value: $value}';
  }
}

class _RecordTypeTypeIdReader extends fb.Reader<RecordTypeTypeId> {
  const _RecordTypeTypeIdReader();

  @override
  int get size => 1;

  @override
  RecordTypeTypeId read(fb.BufferContext bc, int offset) =>
      RecordTypeTypeId.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class Record {
  Record._(this._bc, this._bcOffset);
  factory Record(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Record> reader = _RecordReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  RecordTypeTypeId? get valueType => RecordTypeTypeId._createOrNull(const fb.Uint8Reader().vTableGetNullable(_bc, _bcOffset, 4));
  dynamic get value {
    switch (valueType?.value) {
      case 1: return CAT.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 2: return VCM.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 3: return CDM.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 4: return IDM.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 5: return PLD.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 6: return BOV.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 7: return EPM.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 8: return OSM.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 9: return PRG.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 10: return CTR.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 11: return SIT.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 12: return CRM.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 13: return EOP.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 14: return MET.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 15: return OEM.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 16: return HYP.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 17: return TIM.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 18: return ROC.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 19: return EME.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 20: return RFM.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 21: return OMM.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 22: return CSM.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 23: return LCC.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 24: return MPE.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 25: return LDM.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 26: return SCM.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 27: return EOO.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 28: return TDM.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 29: return OCM.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 30: return PNM.reader.vTableGetNullable(_bc, _bcOffset, 6);
      default: return null;
    }
  }

  @override
  String toString() {
    return 'Record{valueType: ${valueType}, value: ${value}}';
  }
}

class _RecordReader extends fb.TableReader<Record> {
  const _RecordReader();

  @override
  Record createObject(fb.BufferContext bc, int offset) => 
    Record._(bc, offset);
}

class RecordBuilder {
  RecordBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addValueType(RecordTypeTypeId? valueType) {
    fbBuilder.addUint8(0, valueType?.value);
    return fbBuilder.offset;
  }
  int addValueOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RecordObjectBuilder extends fb.ObjectBuilder {
  final RecordTypeTypeId? _valueType;
  final dynamic _value;

  RecordObjectBuilder({
    RecordTypeTypeId? valueType,
    dynamic value,
  })
      : _valueType = valueType,
        _value = value;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valueOffset = _value?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addUint8(0, _valueType?.value);
    fbBuilder.addOffset(1, valueOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Collection of Standard Records
class REC {
  REC._(this._bc, this._bcOffset);
  factory REC(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<REC> reader = _RECReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get version => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get standard => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<Record>? get RECORDS => const fb.ListReader<Record>(Record.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'REC{version: ${version}, standard: ${standard}, RECORDS: ${RECORDS}}';
  }
}

class _RECReader extends fb.TableReader<REC> {
  const _RECReader();

  @override
  REC createObject(fb.BufferContext bc, int offset) => 
    REC._(bc, offset);
}

class RECBuilder {
  RECBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addVersionOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStandardOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RECObjectBuilder extends fb.ObjectBuilder {
  final String? _version;
  final String? _standard;
  final List<RecordObjectBuilder>? _RECORDS;

  RECObjectBuilder({
    String? version,
    String? standard,
    List<RecordObjectBuilder>? RECORDS,
  })
      : _version = version,
        _standard = standard,
        _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? versionOffset = _version == null ? null
        : fbBuilder.writeString(_version!);
    final int? standardOffset = _standard == null ? null
        : fbBuilder.writeString(_standard!);
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, versionOffset);
    fbBuilder.addOffset(1, standardOffset);
    fbBuilder.addOffset(2, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class RECCOLLECTION {
  RECCOLLECTION._(this._bc, this._bcOffset);
  factory RECCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RECCOLLECTION> reader = _RECCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<REC>? get RECORDS => const fb.ListReader<REC>(REC.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'RECCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _RECCOLLECTIONReader extends fb.TableReader<RECCOLLECTION> {
  const _RECCOLLECTIONReader();

  @override
  RECCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    RECCOLLECTION._(bc, offset);
}

class RECCOLLECTIONBuilder {
  RECCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RECCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<RECObjectBuilder>? _RECORDS;

  RECCOLLECTIONObjectBuilder({
    List<RECObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
