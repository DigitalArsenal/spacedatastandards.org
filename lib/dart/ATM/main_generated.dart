// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  Canonical list of atmosphere model families per CCSDS SANA registry.
///  Use the `YEAR` field in the ATM message to specify the variant implementation.
class AtmosphericModelFamily {
  final int value;
  const AtmosphericModelFamily._(this.value);

  factory AtmosphericModelFamily.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AtmosphericModelFamily');
    }
    return result;
  }

  static AtmosphericModelFamily? _createOrNull(int? value) => 
      value == null ? null : AtmosphericModelFamily.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 16;
  static bool containsValue(int value) => values.containsKey(value);

  ///  OID: 1.3.112.4.57.9.1
  ///  COSPAR International Reference Atmosphere
  ///  Known years: 1965, 1972, 1986, 1990
  static const AtmosphericModelFamily CIRA_XX = AtmosphericModelFamily._(0);

  ///  OID: 1.3.112.4.57.9.2
  ///  Drag Temperature Model
  ///  Known years: 1978, 1994, 2000, 2009, 2012, 2013, 2020
  static const AtmosphericModelFamily DTM_XX = AtmosphericModelFamily._(1);

  ///  OID: 1.3.112.4.57.9.3
  ///  Global Ionosphere-Thermosphere Model
  ///  GITM has no specific year versions defined
  static const AtmosphericModelFamily GITM = AtmosphericModelFamily._(2);

  ///  OID: 1.3.112.4.57.9.4
  ///  GOST atmospheric density model
  ///  Known version: 2004 (GOST R 25645.166-2004)
  static const AtmosphericModelFamily GOST = AtmosphericModelFamily._(3);

  ///  OID: 1.3.112.4.57.9.5
  ///  Global Reference Atmospheric Model
  ///  Known version: 2016
  static const AtmosphericModelFamily GRAM_XX = AtmosphericModelFamily._(4);

  ///  OID: 1.3.112.4.57.9.6
  ///  Harris-Priester empirical model
  ///  Known version: 1962
  static const AtmosphericModelFamily HP = AtmosphericModelFamily._(5);

  ///  OID: 1.3.112.4.57.9.7
  ///  Jacchia atmosphere model with HASDM correction overlay
  ///  Based on Jacchia 1970 with HASDM (DCA) overlay
  static const AtmosphericModelFamily JAC_HASDM = AtmosphericModelFamily._(6);

  ///  OID: 1.3.112.4.57.9.8
  ///  Jacchia-Gill bi-polynomial interpolation
  ///  Interpolates Jacchia 1971
  static const AtmosphericModelFamily JAC_GILL = AtmosphericModelFamily._(7);

  ///  OID: 1.3.112.4.57.9.9
  ///  Jacchia-Bowman empirical model
  ///  Known versions: 2006 (JB2006), 2008 (JB2008)
  static const AtmosphericModelFamily JB08 = AtmosphericModelFamily._(8);

  ///  OID: 1.3.112.4.57.9.10
  ///  Jacchia-Roberts analytic model
  ///  Known version: 1971
  static const AtmosphericModelFamily JR71 = AtmosphericModelFamily._(9);

  ///  OID: 1.3.112.4.57.9.11
  ///  Jacchia static diffusion models
  ///  Known years: 1970, 1971, 1977
  static const AtmosphericModelFamily JXX = AtmosphericModelFamily._(10);

  ///  OID: 1.3.112.4.57.9.12
  ///  Marshall Engineering Thermosphere
  ///  Known version: 2007
  static const AtmosphericModelFamily MET_XX = AtmosphericModelFamily._(11);

  ///  OID: 1.3.112.4.57.9.13
  ///  MSIS empirical model
  ///  Known version: 1986
  static const AtmosphericModelFamily MSIS_86 = AtmosphericModelFamily._(12);

  ///  OID: 1.3.112.4.57.9.14
  ///  MSISE empirical model with exosphere extension
  ///  Known version: 1990
  static const AtmosphericModelFamily MSISE_90 = AtmosphericModelFamily._(13);

  ///  OID: 1.3.112.4.57.9.15
  ///  NRLMSISE empirical model
  ///  Known version: 2000 (NRLMSISE-00E)
  static const AtmosphericModelFamily NRLMSIS00E = AtmosphericModelFamily._(14);

  ///  OID: 1.3.112.4.57.9.16
  ///  Thermosphere-Ionosphere Electrodynamic General Circulation Model
  ///  Based on TIME-GCM, no version specified
  static const AtmosphericModelFamily TIECGM = AtmosphericModelFamily._(15);

  ///  OID: 1.3.112.4.57.9.17
  ///  U.S. Standard Atmosphere
  ///  Known versions: 1962, 1976
  static const AtmosphericModelFamily USSA_XX = AtmosphericModelFamily._(16);
  static const Map<int, AtmosphericModelFamily> values = {
    0: CIRA_XX,
    1: DTM_XX,
    2: GITM,
    3: GOST,
    4: GRAM_XX,
    5: HP,
    6: JAC_HASDM,
    7: JAC_GILL,
    8: JB08,
    9: JR71,
    10: JXX,
    11: MET_XX,
    12: MSIS_86,
    13: MSISE_90,
    14: NRLMSIS00E,
    15: TIECGM,
    16: USSA_XX};

  static const fb.Reader<AtmosphericModelFamily> reader = _AtmosphericModelFamilyReader();

  @override
  String toString() {
    return 'AtmosphericModelFamily{value: $value}';
  }
}

class _AtmosphericModelFamilyReader extends fb.Reader<AtmosphericModelFamily> {
  const _AtmosphericModelFamilyReader();

  @override
  int get size => 1;

  @override
  AtmosphericModelFamily read(fb.BufferContext bc, int offset) =>
      AtmosphericModelFamily.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Atmospheric Model Message
class ATM {
  ATM._(this._bc, this._bcOffset);
  factory ATM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ATM> reader = _ATMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Canonical model family
  AtmosphericModelFamily get MODEL => AtmosphericModelFamily.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0));
  ///  Four-digit year identifying the model version (e.g., 1970, 2008, 2020)
  int get YEAR => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'ATM{MODEL: ${MODEL}, YEAR: ${YEAR}}';
  }
}

class _ATMReader extends fb.TableReader<ATM> {
  const _ATMReader();

  @override
  ATM createObject(fb.BufferContext bc, int offset) => 
    ATM._(bc, offset);
}

class ATMBuilder {
  ATMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addModel(AtmosphericModelFamily? MODEL) {
    fbBuilder.addInt8(0, MODEL?.value);
    return fbBuilder.offset;
  }
  int addYear(int? YEAR) {
    fbBuilder.addInt32(1, YEAR);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ATMObjectBuilder extends fb.ObjectBuilder {
  final AtmosphericModelFamily? _MODEL;
  final int? _YEAR;

  ATMObjectBuilder({
    AtmosphericModelFamily? MODEL,
    int? YEAR,
  })
      : _MODEL = MODEL,
        _YEAR = YEAR;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addInt8(0, _MODEL?.value);
    fbBuilder.addInt32(1, _YEAR);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
