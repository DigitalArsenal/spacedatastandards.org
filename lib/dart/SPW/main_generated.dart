// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class FluxQualifier {
  final int value;
  const FluxQualifier._(this.value);

  factory FluxQualifier.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum FluxQualifier');
    }
    return result;
  }

  static FluxQualifier? _createOrNull(int? value) => 
      value == null ? null : FluxQualifier.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  static const FluxQualifier OBSERVED = FluxQualifier._(0);
  static const FluxQualifier BURST_ADJUSTED = FluxQualifier._(1);
  static const FluxQualifier INTERPOLATED_EXTRAPOLATED = FluxQualifier._(2);
  static const FluxQualifier NO_OBSERVATION = FluxQualifier._(3);
  static const FluxQualifier CELESTRAK_INTERPOLATED = FluxQualifier._(4);
  static const Map<int, FluxQualifier> values = {
    0: OBSERVED,
    1: BURST_ADJUSTED,
    2: INTERPOLATED_EXTRAPOLATED,
    3: NO_OBSERVATION,
    4: CELESTRAK_INTERPOLATED};

  static const fb.Reader<FluxQualifier> reader = _FluxQualifierReader();

  @override
  String toString() {
    return 'FluxQualifier{value: $value}';
  }
}

class _FluxQualifierReader extends fb.Reader<FluxQualifier> {
  const _FluxQualifierReader();

  @override
  int get size => 1;

  @override
  FluxQualifier read(fb.BufferContext bc, int offset) =>
      FluxQualifier.fromValue(const fb.Int8Reader().read(bc, offset));
}

class F107DataType {
  final int value;
  const F107DataType._(this.value);

  factory F107DataType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum F107DataType');
    }
    return result;
  }

  static F107DataType? _createOrNull(int? value) => 
      value == null ? null : F107DataType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  static const F107DataType OBS = F107DataType._(0);
  static const F107DataType INT = F107DataType._(1);
  static const F107DataType PRD = F107DataType._(2);
  static const F107DataType PRM = F107DataType._(3);
  static const Map<int, F107DataType> values = {
    0: OBS,
    1: INT,
    2: PRD,
    3: PRM};

  static const fb.Reader<F107DataType> reader = _F107DataTypeReader();

  @override
  String toString() {
    return 'F107DataType{value: $value}';
  }
}

class _F107DataTypeReader extends fb.Reader<F107DataType> {
  const _F107DataTypeReader();

  @override
  int get size => 1;

  @override
  F107DataType read(fb.BufferContext bc, int offset) =>
      F107DataType.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Space Weather Data Record
class SPW {
  SPW._(this._bc, this._bcOffset);
  factory SPW(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SPW> reader = _SPWReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Date in ISO 8601 format
  String? get DATE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Bartels Solar Rotation Number
  int get BSRN => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  ///  Day within Bartels cycle (1-27)
  int get ND => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  ///  Planetary 3-hour Range Index (Kp) for 0000-0300 UT, multiplied by 10
  int get KP1 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Planetary 3-hour Range Index (Kp) for 0300-0600 UT, multiplied by 10
  int get KP2 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  Planetary 3-hour Range Index (Kp) for 0600-0900 UT, multiplied by 10
  int get KP3 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  ///  Planetary 3-hour Range Index (Kp) for 0900-1200 UT, multiplied by 10
  int get KP4 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  ///  Planetary 3-hour Range Index (Kp) for 1200-1500 UT, multiplied by 10
  int get KP5 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  ///  Planetary 3-hour Range Index (Kp) for 1500-1800 UT, multiplied by 10
  int get KP6 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  ///  Planetary 3-hour Range Index (Kp) for 1800-2100 UT, multiplied by 10
  int get KP7 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 22, 0);
  ///  Planetary 3-hour Range Index (Kp) for 2100-0000 UT, multiplied by 10
  int get KP8 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 24, 0);
  ///  Sum of the 8 Kp indices for the day
  int get KP_SUM => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  Planetary Equivalent Amplitude (Ap) for 0000-0300 UT
  int get AP1 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  Planetary Equivalent Amplitude (Ap) for 0300-0600 UT
  int get AP2 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 30, 0);
  ///  Planetary Equivalent Amplitude (Ap) for 0600-0900 UT
  int get AP3 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 32, 0);
  ///  Planetary Equivalent Amplitude (Ap) for 0900-1200 UT
  int get AP4 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 34, 0);
  ///  Planetary Equivalent Amplitude (Ap) for 1200-1500 UT
  int get AP5 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 36, 0);
  ///  Planetary Equivalent Amplitude (Ap) for 1500-1800 UT
  int get AP6 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 38, 0);
  ///  Planetary Equivalent Amplitude (Ap) for 1800-2100 UT
  int get AP7 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 40, 0);
  ///  Planetary Equivalent Amplitude (Ap) for 2100-0000 UT
  int get AP8 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 42, 0);
  ///  Arithmetic average of the 8 Ap indices for the day
  int get AP_AVG => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 44, 0);
  ///  Planetary Daily Character Figure (0.0 to 2.5)
  double get CP => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  C9 index (0-9)
  int get C9 => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 48, 0);
  ///  International Sunspot Number
  int get ISN => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 50, 0);
  ///  Observed 10.7cm Solar Radio Flux
  double get F107_OBS => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  Adjusted 10.7cm Solar Radio Flux (to 1 AU)
  double get F107_ADJ => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  ///  F10.7 Data Type
  F107DataType get F107_DATA_TYPE => F107DataType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 56, 0));
  ///  81-day centered average of observed F10.7
  double get F107_OBS_CENTER81 => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  ///  81-day trailing average of observed F10.7
  double get F107_OBS_LAST81 => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  ///  81-day centered average of adjusted F10.7
  double get F107_ADJ_CENTER81 => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  81-day trailing average of adjusted F10.7
  double get F107_ADJ_LAST81 => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 64, 0.0);

  @override
  String toString() {
    return 'SPW{DATE: ${DATE}, BSRN: ${BSRN}, ND: ${ND}, KP1: ${KP1}, KP2: ${KP2}, KP3: ${KP3}, KP4: ${KP4}, KP5: ${KP5}, KP6: ${KP6}, KP7: ${KP7}, KP8: ${KP8}, KP_SUM: ${KP_SUM}, AP1: ${AP1}, AP2: ${AP2}, AP3: ${AP3}, AP4: ${AP4}, AP5: ${AP5}, AP6: ${AP6}, AP7: ${AP7}, AP8: ${AP8}, AP_AVG: ${AP_AVG}, CP: ${CP}, C9: ${C9}, ISN: ${ISN}, F107_OBS: ${F107_OBS}, F107_ADJ: ${F107_ADJ}, F107_DATA_TYPE: ${F107_DATA_TYPE}, F107_OBS_CENTER81: ${F107_OBS_CENTER81}, F107_OBS_LAST81: ${F107_OBS_LAST81}, F107_ADJ_CENTER81: ${F107_ADJ_CENTER81}, F107_ADJ_LAST81: ${F107_ADJ_LAST81}}';
  }
}

class _SPWReader extends fb.TableReader<SPW> {
  const _SPWReader();

  @override
  SPW createObject(fb.BufferContext bc, int offset) => 
    SPW._(bc, offset);
}

class SPWBuilder {
  SPWBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(31);
  }

  int addDateOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addBsrn(int? BSRN) {
    fbBuilder.addInt32(1, BSRN);
    return fbBuilder.offset;
  }
  int addNd(int? ND) {
    fbBuilder.addInt32(2, ND);
    return fbBuilder.offset;
  }
  int addKp1(int? KP1) {
    fbBuilder.addInt32(3, KP1);
    return fbBuilder.offset;
  }
  int addKp2(int? KP2) {
    fbBuilder.addInt32(4, KP2);
    return fbBuilder.offset;
  }
  int addKp3(int? KP3) {
    fbBuilder.addInt32(5, KP3);
    return fbBuilder.offset;
  }
  int addKp4(int? KP4) {
    fbBuilder.addInt32(6, KP4);
    return fbBuilder.offset;
  }
  int addKp5(int? KP5) {
    fbBuilder.addInt32(7, KP5);
    return fbBuilder.offset;
  }
  int addKp6(int? KP6) {
    fbBuilder.addInt32(8, KP6);
    return fbBuilder.offset;
  }
  int addKp7(int? KP7) {
    fbBuilder.addInt32(9, KP7);
    return fbBuilder.offset;
  }
  int addKp8(int? KP8) {
    fbBuilder.addInt32(10, KP8);
    return fbBuilder.offset;
  }
  int addKpSum(int? KP_SUM) {
    fbBuilder.addInt32(11, KP_SUM);
    return fbBuilder.offset;
  }
  int addAp1(int? AP1) {
    fbBuilder.addInt32(12, AP1);
    return fbBuilder.offset;
  }
  int addAp2(int? AP2) {
    fbBuilder.addInt32(13, AP2);
    return fbBuilder.offset;
  }
  int addAp3(int? AP3) {
    fbBuilder.addInt32(14, AP3);
    return fbBuilder.offset;
  }
  int addAp4(int? AP4) {
    fbBuilder.addInt32(15, AP4);
    return fbBuilder.offset;
  }
  int addAp5(int? AP5) {
    fbBuilder.addInt32(16, AP5);
    return fbBuilder.offset;
  }
  int addAp6(int? AP6) {
    fbBuilder.addInt32(17, AP6);
    return fbBuilder.offset;
  }
  int addAp7(int? AP7) {
    fbBuilder.addInt32(18, AP7);
    return fbBuilder.offset;
  }
  int addAp8(int? AP8) {
    fbBuilder.addInt32(19, AP8);
    return fbBuilder.offset;
  }
  int addApAvg(int? AP_AVG) {
    fbBuilder.addInt32(20, AP_AVG);
    return fbBuilder.offset;
  }
  int addCp(double? CP) {
    fbBuilder.addFloat32(21, CP);
    return fbBuilder.offset;
  }
  int addC9(int? C9) {
    fbBuilder.addInt32(22, C9);
    return fbBuilder.offset;
  }
  int addIsn(int? ISN) {
    fbBuilder.addInt32(23, ISN);
    return fbBuilder.offset;
  }
  int addF107Obs(double? F107_OBS) {
    fbBuilder.addFloat32(24, F107_OBS);
    return fbBuilder.offset;
  }
  int addF107Adj(double? F107_ADJ) {
    fbBuilder.addFloat32(25, F107_ADJ);
    return fbBuilder.offset;
  }
  int addF107DataType(F107DataType? F107_DATA_TYPE) {
    fbBuilder.addInt8(26, F107_DATA_TYPE?.value);
    return fbBuilder.offset;
  }
  int addF107ObsCenter81(double? F107_OBS_CENTER81) {
    fbBuilder.addFloat32(27, F107_OBS_CENTER81);
    return fbBuilder.offset;
  }
  int addF107ObsLast81(double? F107_OBS_LAST81) {
    fbBuilder.addFloat32(28, F107_OBS_LAST81);
    return fbBuilder.offset;
  }
  int addF107AdjCenter81(double? F107_ADJ_CENTER81) {
    fbBuilder.addFloat32(29, F107_ADJ_CENTER81);
    return fbBuilder.offset;
  }
  int addF107AdjLast81(double? F107_ADJ_LAST81) {
    fbBuilder.addFloat32(30, F107_ADJ_LAST81);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SPWObjectBuilder extends fb.ObjectBuilder {
  final String? _DATE;
  final int? _BSRN;
  final int? _ND;
  final int? _KP1;
  final int? _KP2;
  final int? _KP3;
  final int? _KP4;
  final int? _KP5;
  final int? _KP6;
  final int? _KP7;
  final int? _KP8;
  final int? _KP_SUM;
  final int? _AP1;
  final int? _AP2;
  final int? _AP3;
  final int? _AP4;
  final int? _AP5;
  final int? _AP6;
  final int? _AP7;
  final int? _AP8;
  final int? _AP_AVG;
  final double? _CP;
  final int? _C9;
  final int? _ISN;
  final double? _F107_OBS;
  final double? _F107_ADJ;
  final F107DataType? _F107_DATA_TYPE;
  final double? _F107_OBS_CENTER81;
  final double? _F107_OBS_LAST81;
  final double? _F107_ADJ_CENTER81;
  final double? _F107_ADJ_LAST81;

  SPWObjectBuilder({
    String? DATE,
    int? BSRN,
    int? ND,
    int? KP1,
    int? KP2,
    int? KP3,
    int? KP4,
    int? KP5,
    int? KP6,
    int? KP7,
    int? KP8,
    int? KP_SUM,
    int? AP1,
    int? AP2,
    int? AP3,
    int? AP4,
    int? AP5,
    int? AP6,
    int? AP7,
    int? AP8,
    int? AP_AVG,
    double? CP,
    int? C9,
    int? ISN,
    double? F107_OBS,
    double? F107_ADJ,
    F107DataType? F107_DATA_TYPE,
    double? F107_OBS_CENTER81,
    double? F107_OBS_LAST81,
    double? F107_ADJ_CENTER81,
    double? F107_ADJ_LAST81,
  })
      : _DATE = DATE,
        _BSRN = BSRN,
        _ND = ND,
        _KP1 = KP1,
        _KP2 = KP2,
        _KP3 = KP3,
        _KP4 = KP4,
        _KP5 = KP5,
        _KP6 = KP6,
        _KP7 = KP7,
        _KP8 = KP8,
        _KP_SUM = KP_SUM,
        _AP1 = AP1,
        _AP2 = AP2,
        _AP3 = AP3,
        _AP4 = AP4,
        _AP5 = AP5,
        _AP6 = AP6,
        _AP7 = AP7,
        _AP8 = AP8,
        _AP_AVG = AP_AVG,
        _CP = CP,
        _C9 = C9,
        _ISN = ISN,
        _F107_OBS = F107_OBS,
        _F107_ADJ = F107_ADJ,
        _F107_DATA_TYPE = F107_DATA_TYPE,
        _F107_OBS_CENTER81 = F107_OBS_CENTER81,
        _F107_OBS_LAST81 = F107_OBS_LAST81,
        _F107_ADJ_CENTER81 = F107_ADJ_CENTER81,
        _F107_ADJ_LAST81 = F107_ADJ_LAST81;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? DATEOffset = _DATE == null ? null
        : fbBuilder.writeString(_DATE!);
    fbBuilder.startTable(31);
    fbBuilder.addOffset(0, DATEOffset);
    fbBuilder.addInt32(1, _BSRN);
    fbBuilder.addInt32(2, _ND);
    fbBuilder.addInt32(3, _KP1);
    fbBuilder.addInt32(4, _KP2);
    fbBuilder.addInt32(5, _KP3);
    fbBuilder.addInt32(6, _KP4);
    fbBuilder.addInt32(7, _KP5);
    fbBuilder.addInt32(8, _KP6);
    fbBuilder.addInt32(9, _KP7);
    fbBuilder.addInt32(10, _KP8);
    fbBuilder.addInt32(11, _KP_SUM);
    fbBuilder.addInt32(12, _AP1);
    fbBuilder.addInt32(13, _AP2);
    fbBuilder.addInt32(14, _AP3);
    fbBuilder.addInt32(15, _AP4);
    fbBuilder.addInt32(16, _AP5);
    fbBuilder.addInt32(17, _AP6);
    fbBuilder.addInt32(18, _AP7);
    fbBuilder.addInt32(19, _AP8);
    fbBuilder.addInt32(20, _AP_AVG);
    fbBuilder.addFloat32(21, _CP);
    fbBuilder.addInt32(22, _C9);
    fbBuilder.addInt32(23, _ISN);
    fbBuilder.addFloat32(24, _F107_OBS);
    fbBuilder.addFloat32(25, _F107_ADJ);
    fbBuilder.addInt8(26, _F107_DATA_TYPE?.value);
    fbBuilder.addFloat32(27, _F107_OBS_CENTER81);
    fbBuilder.addFloat32(28, _F107_OBS_LAST81);
    fbBuilder.addFloat32(29, _F107_ADJ_CENTER81);
    fbBuilder.addFloat32(30, _F107_ADJ_LAST81);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SPWCOLLECTION {
  SPWCOLLECTION._(this._bc, this._bcOffset);
  factory SPWCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SPWCOLLECTION> reader = _SPWCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<SPW>? get RECORDS => const fb.ListReader<SPW>(SPW.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'SPWCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _SPWCOLLECTIONReader extends fb.TableReader<SPWCOLLECTION> {
  const _SPWCOLLECTIONReader();

  @override
  SPWCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    SPWCOLLECTION._(bc, offset);
}

class SPWCOLLECTIONBuilder {
  SPWCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SPWCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<SPWObjectBuilder>? _RECORDS;

  SPWCOLLECTIONObjectBuilder({
    List<SPWObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
