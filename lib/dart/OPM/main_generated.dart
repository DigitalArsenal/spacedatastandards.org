// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


import './main_generated.dart';

class ElementType {
  final int value;
  const ElementType._(this.value);

  factory ElementType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ElementType');
    }
    return result;
  }

  static ElementType? _createOrNull(int? value) => 
      value == null ? null : ElementType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const ElementType OSCULATING = ElementType._(0);
  static const ElementType MEAN = ElementType._(1);
  static const Map<int, ElementType> values = {
    0: OSCULATING,
    1: MEAN};

  static const fb.Reader<ElementType> reader = _ElementTypeReader();

  @override
  String toString() {
    return 'ElementType{value: $value}';
  }
}

class _ElementTypeReader extends fb.Reader<ElementType> {
  const _ElementTypeReader();

  @override
  int get size => 1;

  @override
  ElementType read(fb.BufferContext bc, int offset) =>
      ElementType.fromValue(const fb.Int8Reader().read(bc, offset));
}

class AnomalyType {
  final int value;
  const AnomalyType._(this.value);

  factory AnomalyType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AnomalyType');
    }
    return result;
  }

  static AnomalyType? _createOrNull(int? value) => 
      value == null ? null : AnomalyType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const AnomalyType TRUE_ANOMALY = AnomalyType._(0);
  static const AnomalyType MEAN_ANOMALY = AnomalyType._(1);
  static const Map<int, AnomalyType> values = {
    0: TRUE_ANOMALY,
    1: MEAN_ANOMALY};

  static const fb.Reader<AnomalyType> reader = _AnomalyTypeReader();

  @override
  String toString() {
    return 'AnomalyType{value: $value}';
  }
}

class _AnomalyTypeReader extends fb.Reader<AnomalyType> {
  const _AnomalyTypeReader();

  @override
  int get size => 1;

  @override
  AnomalyType read(fb.BufferContext bc, int offset) =>
      AnomalyType.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Enum to represent common atmospheric models
class AtmosphericModel {
  final int value;
  const AtmosphericModel._(this.value);

  factory AtmosphericModel.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum AtmosphericModel');
    }
    return result;
  }

  static AtmosphericModel? _createOrNull(int? value) => 
      value == null ? null : AtmosphericModel.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 6;
  static bool containsValue(int value) => values.containsKey(value);

  static const AtmosphericModel NONE = AtmosphericModel._(0);
  static const AtmosphericModel JACCHIA_70 = AtmosphericModel._(1);
  static const AtmosphericModel JB2008 = AtmosphericModel._(2);
  static const AtmosphericModel NRLMSISE_00 = AtmosphericModel._(3);
  static const AtmosphericModel DTM_2000 = AtmosphericModel._(4);
  static const AtmosphericModel HWM14 = AtmosphericModel._(5);
  static const AtmosphericModel HASDM = AtmosphericModel._(6);
  static const Map<int, AtmosphericModel> values = {
    0: NONE,
    1: JACCHIA_70,
    2: JB2008,
    3: NRLMSISE_00,
    4: DTM_2000,
    5: HWM14,
    6: HASDM};

  static const fb.Reader<AtmosphericModel> reader = _AtmosphericModelReader();

  @override
  String toString() {
    return 'AtmosphericModel{value: $value}';
  }
}

class _AtmosphericModelReader extends fb.Reader<AtmosphericModel> {
  const _AtmosphericModelReader();

  @override
  int get size => 1;

  @override
  AtmosphericModel read(fb.BufferContext bc, int offset) =>
      AtmosphericModel.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Enum to represent common geopotential models
class GeopotentialModel {
  final int value;
  const GeopotentialModel._(this.value);

  factory GeopotentialModel.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum GeopotentialModel');
    }
    return result;
  }

  static GeopotentialModel? _createOrNull(int? value) => 
      value == null ? null : GeopotentialModel.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  static const GeopotentialModel NONE = GeopotentialModel._(0);
  static const GeopotentialModel EGM96 = GeopotentialModel._(1);
  static const GeopotentialModel WGS84 = GeopotentialModel._(2);
  static const GeopotentialModel JGM2 = GeopotentialModel._(3);
  static const GeopotentialModel GEMT3 = GeopotentialModel._(4);
  static const GeopotentialModel EGM96_J5 = GeopotentialModel._(5);
  static const Map<int, GeopotentialModel> values = {
    0: NONE,
    1: EGM96,
    2: WGS84,
    3: JGM2,
    4: GEMT3,
    5: EGM96_J5};

  static const fb.Reader<GeopotentialModel> reader = _GeopotentialModelReader();

  @override
  String toString() {
    return 'GeopotentialModel{value: $value}';
  }
}

class _GeopotentialModelReader extends fb.Reader<GeopotentialModel> {
  const _GeopotentialModelReader();

  @override
  int get size => 1;

  @override
  GeopotentialModel read(fb.BufferContext bc, int offset) =>
      GeopotentialModel.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Enum to represent zonal harmonics
class ZonalHarmonic {
  final int value;
  const ZonalHarmonic._(this.value);

  factory ZonalHarmonic.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ZonalHarmonic');
    }
    return result;
  }

  static ZonalHarmonic? _createOrNull(int? value) => 
      value == null ? null : ZonalHarmonic.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 11;
  static bool containsValue(int value) => values.containsKey(value);

  static const ZonalHarmonic NONE = ZonalHarmonic._(0);
  static const ZonalHarmonic J2 = ZonalHarmonic._(1);
  static const ZonalHarmonic J3 = ZonalHarmonic._(2);
  static const ZonalHarmonic J4 = ZonalHarmonic._(3);
  static const ZonalHarmonic J5 = ZonalHarmonic._(4);
  static const ZonalHarmonic J6 = ZonalHarmonic._(5);
  static const ZonalHarmonic J7 = ZonalHarmonic._(6);
  static const ZonalHarmonic J8 = ZonalHarmonic._(7);
  static const ZonalHarmonic J9 = ZonalHarmonic._(8);
  static const ZonalHarmonic J10 = ZonalHarmonic._(9);
  static const ZonalHarmonic J11 = ZonalHarmonic._(10);
  static const ZonalHarmonic J12 = ZonalHarmonic._(11);
  static const Map<int, ZonalHarmonic> values = {
    0: NONE,
    1: J2,
    2: J3,
    3: J4,
    4: J5,
    5: J6,
    6: J7,
    7: J8,
    8: J9,
    9: J10,
    10: J11,
    11: J12};

  static const fb.Reader<ZonalHarmonic> reader = _ZonalHarmonicReader();

  @override
  String toString() {
    return 'ZonalHarmonic{value: $value}';
  }
}

class _ZonalHarmonicReader extends fb.Reader<ZonalHarmonic> {
  const _ZonalHarmonicReader();

  @override
  int get size => 1;

  @override
  ZonalHarmonic read(fb.BufferContext bc, int offset) =>
      ZonalHarmonic.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Enum to represent solar radiation pressure models
class SolarRadiationPressureModel {
  final int value;
  const SolarRadiationPressureModel._(this.value);

  factory SolarRadiationPressureModel.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SolarRadiationPressureModel');
    }
    return result;
  }

  static SolarRadiationPressureModel? _createOrNull(int? value) => 
      value == null ? null : SolarRadiationPressureModel.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  static const SolarRadiationPressureModel NONE = SolarRadiationPressureModel._(0);
  static const SolarRadiationPressureModel SPHERICAL_MODEL = SolarRadiationPressureModel._(1);
  static const SolarRadiationPressureModel FLAT_PLATE_MODEL = SolarRadiationPressureModel._(2);
  static const Map<int, SolarRadiationPressureModel> values = {
    0: NONE,
    1: SPHERICAL_MODEL,
    2: FLAT_PLATE_MODEL};

  static const fb.Reader<SolarRadiationPressureModel> reader = _SolarRadiationPressureModelReader();

  @override
  String toString() {
    return 'SolarRadiationPressureModel{value: $value}';
  }
}

class _SolarRadiationPressureModelReader extends fb.Reader<SolarRadiationPressureModel> {
  const _SolarRadiationPressureModelReader();

  @override
  int get size => 1;

  @override
  SolarRadiationPressureModel read(fb.BufferContext bc, int offset) =>
      SolarRadiationPressureModel.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Enum to represent common lunar perturbation models
class LunarPerturbationModel {
  final int value;
  const LunarPerturbationModel._(this.value);

  factory LunarPerturbationModel.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum LunarPerturbationModel');
    }
    return result;
  }

  static LunarPerturbationModel? _createOrNull(int? value) => 
      value == null ? null : LunarPerturbationModel.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  static const LunarPerturbationModel NONE = LunarPerturbationModel._(0);
  static const LunarPerturbationModel DE430 = LunarPerturbationModel._(1);
  static const LunarPerturbationModel DE431 = LunarPerturbationModel._(2);
  static const LunarPerturbationModel LP150Q = LunarPerturbationModel._(3);
  static const Map<int, LunarPerturbationModel> values = {
    0: NONE,
    1: DE430,
    2: DE431,
    3: LP150Q};

  static const fb.Reader<LunarPerturbationModel> reader = _LunarPerturbationModelReader();

  @override
  String toString() {
    return 'LunarPerturbationModel{value: $value}';
  }
}

class _LunarPerturbationModelReader extends fb.Reader<LunarPerturbationModel> {
  const _LunarPerturbationModelReader();

  @override
  int get size => 1;

  @override
  LunarPerturbationModel read(fb.BufferContext bc, int offset) =>
      LunarPerturbationModel.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Enum to represent various solar perturbation models
class SolarPerturbationModel {
  final int value;
  const SolarPerturbationModel._(this.value);

  factory SolarPerturbationModel.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum SolarPerturbationModel');
    }
    return result;
  }

  static SolarPerturbationModel? _createOrNull(int? value) => 
      value == null ? null : SolarPerturbationModel.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  static const SolarPerturbationModel NONE = SolarPerturbationModel._(0);
  static const SolarPerturbationModel DE430 = SolarPerturbationModel._(1);
  static const SolarPerturbationModel DE431 = SolarPerturbationModel._(2);
  static const Map<int, SolarPerturbationModel> values = {
    0: NONE,
    1: DE430,
    2: DE431};

  static const fb.Reader<SolarPerturbationModel> reader = _SolarPerturbationModelReader();

  @override
  String toString() {
    return 'SolarPerturbationModel{value: $value}';
  }
}

class _SolarPerturbationModelReader extends fb.Reader<SolarPerturbationModel> {
  const _SolarPerturbationModelReader();

  @override
  int get size => 1;

  @override
  SolarPerturbationModel read(fb.BufferContext bc, int offset) =>
      SolarPerturbationModel.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Enum to represent resonance models
class ResonanceModel {
  final int value;
  const ResonanceModel._(this.value);

  factory ResonanceModel.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ResonanceModel');
    }
    return result;
  }

  static ResonanceModel? _createOrNull(int? value) => 
      value == null ? null : ResonanceModel.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  static const ResonanceModel NONE = ResonanceModel._(0);
  static const ResonanceModel HIGH_ALTITUDE_RESONANCE = ResonanceModel._(1);
  static const ResonanceModel LOW_ALTITUDE_RESONANCE = ResonanceModel._(2);
  static const ResonanceModel LUNAR_RESONANCE = ResonanceModel._(3);
  static const ResonanceModel SOLAR_RESONANCE = ResonanceModel._(4);
  static const Map<int, ResonanceModel> values = {
    0: NONE,
    1: HIGH_ALTITUDE_RESONANCE,
    2: LOW_ALTITUDE_RESONANCE,
    3: LUNAR_RESONANCE,
    4: SOLAR_RESONANCE};

  static const fb.Reader<ResonanceModel> reader = _ResonanceModelReader();

  @override
  String toString() {
    return 'ResonanceModel{value: $value}';
  }
}

class _ResonanceModelReader extends fb.Reader<ResonanceModel> {
  const _ResonanceModelReader();

  @override
  int get size => 1;

  @override
  ResonanceModel read(fb.BufferContext bc, int offset) =>
      ResonanceModel.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Enum to represent the status of various perturbations (ON/OFF)
class PerturbationStatus {
  final int value;
  const PerturbationStatus._(this.value);

  factory PerturbationStatus.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum PerturbationStatus');
    }
    return result;
  }

  static PerturbationStatus? _createOrNull(int? value) => 
      value == null ? null : PerturbationStatus.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const PerturbationStatus OFF = PerturbationStatus._(0);
  static const PerturbationStatus ON = PerturbationStatus._(1);
  static const Map<int, PerturbationStatus> values = {
    0: OFF,
    1: ON};

  static const fb.Reader<PerturbationStatus> reader = _PerturbationStatusReader();

  @override
  String toString() {
    return 'PerturbationStatus{value: $value}';
  }
}

class _PerturbationStatusReader extends fb.Reader<PerturbationStatus> {
  const _PerturbationStatusReader();

  @override
  int get size => 1;

  @override
  PerturbationStatus read(fb.BufferContext bc, int offset) =>
      PerturbationStatus.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Enum to represent propagator types
class PropagatorType {
  final int value;
  const PropagatorType._(this.value);

  factory PropagatorType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum PropagatorType');
    }
    return result;
  }

  static PropagatorType? _createOrNull(int? value) => 
      value == null ? null : PropagatorType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 12;
  static bool containsValue(int value) => values.containsKey(value);

  static const PropagatorType NONE = PropagatorType._(0);
  static const PropagatorType SEMI_ANALYTICAL = PropagatorType._(1);
  static const PropagatorType VINTI = PropagatorType._(2);
  static const PropagatorType SGP4 = PropagatorType._(3);
  static const PropagatorType COWELL = PropagatorType._(4);
  static const PropagatorType RK4 = PropagatorType._(5);
  static const PropagatorType NYX = PropagatorType._(6);
  static const PropagatorType GMAT = PropagatorType._(7);
  static const PropagatorType SPICE = PropagatorType._(8);
  static const PropagatorType SGP = PropagatorType._(9);
  static const PropagatorType SDP4 = PropagatorType._(10);
  static const PropagatorType SGP8 = PropagatorType._(11);
  static const PropagatorType SDP8 = PropagatorType._(12);
  static const Map<int, PropagatorType> values = {
    0: NONE,
    1: SEMI_ANALYTICAL,
    2: VINTI,
    3: SGP4,
    4: COWELL,
    5: RK4,
    6: NYX,
    7: GMAT,
    8: SPICE,
    9: SGP,
    10: SDP4,
    11: SGP8,
    12: SDP8};

  static const fb.Reader<PropagatorType> reader = _PropagatorTypeReader();

  @override
  String toString() {
    return 'PropagatorType{value: $value}';
  }
}

class _PropagatorTypeReader extends fb.Reader<PropagatorType> {
  const _PropagatorTypeReader();

  @override
  int get size => 1;

  @override
  PropagatorType read(fb.BufferContext bc, int offset) =>
      PropagatorType.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Propagator configuration structure to describe propagation settings
class PropagatorConfig {
  PropagatorConfig._(this._bc, this._bcOffset);
  factory PropagatorConfig(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PropagatorConfig> reader = _PropagatorConfigReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get PROPAGATOR_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  PropagatorType get PROPAGATOR_TYPE => PropagatorType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 6, 0));
  List<String>? get FORCE_MODELS => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);
  String? get EPOCH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  double get TIME_STEP => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  List<ZonalHarmonic>? get ZONAL_HARMONIC_TERMS => const fb.ListReader<ZonalHarmonic>(ZonalHarmonic.reader).vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'PropagatorConfig{PROPAGATOR_NAME: ${PROPAGATOR_NAME}, PROPAGATOR_TYPE: ${PROPAGATOR_TYPE}, FORCE_MODELS: ${FORCE_MODELS}, EPOCH: ${EPOCH}, TIME_STEP: ${TIME_STEP}, ZONAL_HARMONIC_TERMS: ${ZONAL_HARMONIC_TERMS}}';
  }
}

class _PropagatorConfigReader extends fb.TableReader<PropagatorConfig> {
  const _PropagatorConfigReader();

  @override
  PropagatorConfig createObject(fb.BufferContext bc, int offset) => 
    PropagatorConfig._(bc, offset);
}

class PropagatorConfigBuilder {
  PropagatorConfigBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addPropagatorNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPropagatorType(PropagatorType? PROPAGATOR_TYPE) {
    fbBuilder.addInt8(1, PROPAGATOR_TYPE?.value);
    return fbBuilder.offset;
  }
  int addForceModelsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addEpochOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTimeStep(double? TIME_STEP) {
    fbBuilder.addFloat64(4, TIME_STEP);
    return fbBuilder.offset;
  }
  int addZonalHarmonicTermsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PropagatorConfigObjectBuilder extends fb.ObjectBuilder {
  final String? _PROPAGATOR_NAME;
  final PropagatorType? _PROPAGATOR_TYPE;
  final List<String>? _FORCE_MODELS;
  final String? _EPOCH;
  final double? _TIME_STEP;
  final List<ZonalHarmonic>? _ZONAL_HARMONIC_TERMS;

  PropagatorConfigObjectBuilder({
    String? PROPAGATOR_NAME,
    PropagatorType? PROPAGATOR_TYPE,
    List<String>? FORCE_MODELS,
    String? EPOCH,
    double? TIME_STEP,
    List<ZonalHarmonic>? ZONAL_HARMONIC_TERMS,
  })
      : _PROPAGATOR_NAME = PROPAGATOR_NAME,
        _PROPAGATOR_TYPE = PROPAGATOR_TYPE,
        _FORCE_MODELS = FORCE_MODELS,
        _EPOCH = EPOCH,
        _TIME_STEP = TIME_STEP,
        _ZONAL_HARMONIC_TERMS = ZONAL_HARMONIC_TERMS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? PROPAGATOR_NAMEOffset = _PROPAGATOR_NAME == null ? null
        : fbBuilder.writeString(_PROPAGATOR_NAME!);
    final int? FORCE_MODELSOffset = _FORCE_MODELS == null ? null
        : fbBuilder.writeList(_FORCE_MODELS!.map(fbBuilder.writeString).toList());
    final int? EPOCHOffset = _EPOCH == null ? null
        : fbBuilder.writeString(_EPOCH!);
    final int? ZONAL_HARMONIC_TERMSOffset = _ZONAL_HARMONIC_TERMS == null ? null
        : fbBuilder.writeListInt8(_ZONAL_HARMONIC_TERMS!.map((f) => f.value).toList());
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, PROPAGATOR_NAMEOffset);
    fbBuilder.addInt8(1, _PROPAGATOR_TYPE?.value);
    fbBuilder.addOffset(2, FORCE_MODELSOffset);
    fbBuilder.addOffset(3, EPOCHOffset);
    fbBuilder.addFloat64(4, _TIME_STEP);
    fbBuilder.addOffset(5, ZONAL_HARMONIC_TERMSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  OPM State Vector (position and velocity)
class OpmStateVector {
  OpmStateVector._(this._bc, this._bcOffset);
  factory OpmStateVector(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OpmStateVector> reader = _OpmStateVectorReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get EPOCH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  double get X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  double get Y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  double get Z => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  double get X_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  double get Y_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  double get Z_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);

  @override
  String toString() {
    return 'OpmStateVector{EPOCH: ${EPOCH}, X: ${X}, Y: ${Y}, Z: ${Z}, X_DOT: ${X_DOT}, Y_DOT: ${Y_DOT}, Z_DOT: ${Z_DOT}}';
  }
}

class _OpmStateVectorReader extends fb.TableReader<OpmStateVector> {
  const _OpmStateVectorReader();

  @override
  OpmStateVector createObject(fb.BufferContext bc, int offset) => 
    OpmStateVector._(bc, offset);
}

class OpmStateVectorBuilder {
  OpmStateVectorBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addEpochOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addX(double? X) {
    fbBuilder.addFloat64(1, X);
    return fbBuilder.offset;
  }
  int addY(double? Y) {
    fbBuilder.addFloat64(2, Y);
    return fbBuilder.offset;
  }
  int addZ(double? Z) {
    fbBuilder.addFloat64(3, Z);
    return fbBuilder.offset;
  }
  int addXDot(double? X_DOT) {
    fbBuilder.addFloat64(4, X_DOT);
    return fbBuilder.offset;
  }
  int addYDot(double? Y_DOT) {
    fbBuilder.addFloat64(5, Y_DOT);
    return fbBuilder.offset;
  }
  int addZDot(double? Z_DOT) {
    fbBuilder.addFloat64(6, Z_DOT);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OpmStateVectorObjectBuilder extends fb.ObjectBuilder {
  final String? _EPOCH;
  final double? _X;
  final double? _Y;
  final double? _Z;
  final double? _X_DOT;
  final double? _Y_DOT;
  final double? _Z_DOT;

  OpmStateVectorObjectBuilder({
    String? EPOCH,
    double? X,
    double? Y,
    double? Z,
    double? X_DOT,
    double? Y_DOT,
    double? Z_DOT,
  })
      : _EPOCH = EPOCH,
        _X = X,
        _Y = Y,
        _Z = Z,
        _X_DOT = X_DOT,
        _Y_DOT = Y_DOT,
        _Z_DOT = Z_DOT;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? EPOCHOffset = _EPOCH == null ? null
        : fbBuilder.writeString(_EPOCH!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, EPOCHOffset);
    fbBuilder.addFloat64(1, _X);
    fbBuilder.addFloat64(2, _Y);
    fbBuilder.addFloat64(3, _Z);
    fbBuilder.addFloat64(4, _X_DOT);
    fbBuilder.addFloat64(5, _Y_DOT);
    fbBuilder.addFloat64(6, _Z_DOT);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  OPM Covariance Matrix Line
class OpmCovarianceMatrixLine {
  OpmCovarianceMatrixLine._(this._bc, this._bcOffset);
  factory OpmCovarianceMatrixLine(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OpmCovarianceMatrixLine> reader = _OpmCovarianceMatrixLineReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  double get CX_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 4, 0.0);
  double get CY_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  double get CZ_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  double get CX_DOT_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);

  @override
  String toString() {
    return 'OpmCovarianceMatrixLine{CX_X: ${CX_X}, CY_X: ${CY_X}, CZ_X: ${CZ_X}, CX_DOT_X: ${CX_DOT_X}}';
  }
}

class _OpmCovarianceMatrixLineReader extends fb.TableReader<OpmCovarianceMatrixLine> {
  const _OpmCovarianceMatrixLineReader();

  @override
  OpmCovarianceMatrixLine createObject(fb.BufferContext bc, int offset) => 
    OpmCovarianceMatrixLine._(bc, offset);
}

class OpmCovarianceMatrixLineBuilder {
  OpmCovarianceMatrixLineBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addCxX(double? CX_X) {
    fbBuilder.addFloat64(0, CX_X);
    return fbBuilder.offset;
  }
  int addCyX(double? CY_X) {
    fbBuilder.addFloat64(1, CY_X);
    return fbBuilder.offset;
  }
  int addCzX(double? CZ_X) {
    fbBuilder.addFloat64(2, CZ_X);
    return fbBuilder.offset;
  }
  int addCxDotX(double? CX_DOT_X) {
    fbBuilder.addFloat64(3, CX_DOT_X);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OpmCovarianceMatrixLineObjectBuilder extends fb.ObjectBuilder {
  final double? _CX_X;
  final double? _CY_X;
  final double? _CZ_X;
  final double? _CX_DOT_X;

  OpmCovarianceMatrixLineObjectBuilder({
    double? CX_X,
    double? CY_X,
    double? CZ_X,
    double? CX_DOT_X,
  })
      : _CX_X = CX_X,
        _CY_X = CY_X,
        _CZ_X = CZ_X,
        _CX_DOT_X = CX_DOT_X;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(4);
    fbBuilder.addFloat64(0, _CX_X);
    fbBuilder.addFloat64(1, _CY_X);
    fbBuilder.addFloat64(2, _CZ_X);
    fbBuilder.addFloat64(3, _CX_DOT_X);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Keplerian Elements
class KeplerianElements {
  KeplerianElements._(this._bc, this._bcOffset);
  factory KeplerianElements(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<KeplerianElements> reader = _KeplerianElementsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  double get SEMI_MAJOR_AXIS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 4, 0.0);
  double get ECCENTRICITY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  double get INCLINATION => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  double get RA_OF_ASC_NODE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  double get ARG_OF_PERICENTER => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  AnomalyType get ANOMALY_TYPE => AnomalyType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 14, 0));
  double get ANOMALY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);

  @override
  String toString() {
    return 'KeplerianElements{SEMI_MAJOR_AXIS: ${SEMI_MAJOR_AXIS}, ECCENTRICITY: ${ECCENTRICITY}, INCLINATION: ${INCLINATION}, RA_OF_ASC_NODE: ${RA_OF_ASC_NODE}, ARG_OF_PERICENTER: ${ARG_OF_PERICENTER}, ANOMALY_TYPE: ${ANOMALY_TYPE}, ANOMALY: ${ANOMALY}}';
  }
}

class _KeplerianElementsReader extends fb.TableReader<KeplerianElements> {
  const _KeplerianElementsReader();

  @override
  KeplerianElements createObject(fb.BufferContext bc, int offset) => 
    KeplerianElements._(bc, offset);
}

class KeplerianElementsBuilder {
  KeplerianElementsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addSemiMajorAxis(double? SEMI_MAJOR_AXIS) {
    fbBuilder.addFloat64(0, SEMI_MAJOR_AXIS);
    return fbBuilder.offset;
  }
  int addEccentricity(double? ECCENTRICITY) {
    fbBuilder.addFloat64(1, ECCENTRICITY);
    return fbBuilder.offset;
  }
  int addInclination(double? INCLINATION) {
    fbBuilder.addFloat64(2, INCLINATION);
    return fbBuilder.offset;
  }
  int addRaOfAscNode(double? RA_OF_ASC_NODE) {
    fbBuilder.addFloat64(3, RA_OF_ASC_NODE);
    return fbBuilder.offset;
  }
  int addArgOfPericenter(double? ARG_OF_PERICENTER) {
    fbBuilder.addFloat64(4, ARG_OF_PERICENTER);
    return fbBuilder.offset;
  }
  int addAnomalyType(AnomalyType? ANOMALY_TYPE) {
    fbBuilder.addInt8(5, ANOMALY_TYPE?.value);
    return fbBuilder.offset;
  }
  int addAnomaly(double? ANOMALY) {
    fbBuilder.addFloat64(6, ANOMALY);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class KeplerianElementsObjectBuilder extends fb.ObjectBuilder {
  final double? _SEMI_MAJOR_AXIS;
  final double? _ECCENTRICITY;
  final double? _INCLINATION;
  final double? _RA_OF_ASC_NODE;
  final double? _ARG_OF_PERICENTER;
  final AnomalyType? _ANOMALY_TYPE;
  final double? _ANOMALY;

  KeplerianElementsObjectBuilder({
    double? SEMI_MAJOR_AXIS,
    double? ECCENTRICITY,
    double? INCLINATION,
    double? RA_OF_ASC_NODE,
    double? ARG_OF_PERICENTER,
    AnomalyType? ANOMALY_TYPE,
    double? ANOMALY,
  })
      : _SEMI_MAJOR_AXIS = SEMI_MAJOR_AXIS,
        _ECCENTRICITY = ECCENTRICITY,
        _INCLINATION = INCLINATION,
        _RA_OF_ASC_NODE = RA_OF_ASC_NODE,
        _ARG_OF_PERICENTER = ARG_OF_PERICENTER,
        _ANOMALY_TYPE = ANOMALY_TYPE,
        _ANOMALY = ANOMALY;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(7);
    fbBuilder.addFloat64(0, _SEMI_MAJOR_AXIS);
    fbBuilder.addFloat64(1, _ECCENTRICITY);
    fbBuilder.addFloat64(2, _INCLINATION);
    fbBuilder.addFloat64(3, _RA_OF_ASC_NODE);
    fbBuilder.addFloat64(4, _ARG_OF_PERICENTER);
    fbBuilder.addInt8(5, _ANOMALY_TYPE?.value);
    fbBuilder.addFloat64(6, _ANOMALY);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Equinoctial Elements
class EquinoctialElements {
  EquinoctialElements._(this._bc, this._bcOffset);
  factory EquinoctialElements(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EquinoctialElements> reader = _EquinoctialElementsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  double get AF => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 4, 0.0);
  double get AG => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  double get L => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  double get N => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  double get CHI => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  double get PSI => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);

  @override
  String toString() {
    return 'EquinoctialElements{AF: ${AF}, AG: ${AG}, L: ${L}, N: ${N}, CHI: ${CHI}, PSI: ${PSI}}';
  }
}

class _EquinoctialElementsReader extends fb.TableReader<EquinoctialElements> {
  const _EquinoctialElementsReader();

  @override
  EquinoctialElements createObject(fb.BufferContext bc, int offset) => 
    EquinoctialElements._(bc, offset);
}

class EquinoctialElementsBuilder {
  EquinoctialElementsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addAf(double? AF) {
    fbBuilder.addFloat64(0, AF);
    return fbBuilder.offset;
  }
  int addAg(double? AG) {
    fbBuilder.addFloat64(1, AG);
    return fbBuilder.offset;
  }
  int addL(double? L) {
    fbBuilder.addFloat64(2, L);
    return fbBuilder.offset;
  }
  int addN(double? N) {
    fbBuilder.addFloat64(3, N);
    return fbBuilder.offset;
  }
  int addChi(double? CHI) {
    fbBuilder.addFloat64(4, CHI);
    return fbBuilder.offset;
  }
  int addPsi(double? PSI) {
    fbBuilder.addFloat64(5, PSI);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EquinoctialElementsObjectBuilder extends fb.ObjectBuilder {
  final double? _AF;
  final double? _AG;
  final double? _L;
  final double? _N;
  final double? _CHI;
  final double? _PSI;

  EquinoctialElementsObjectBuilder({
    double? AF,
    double? AG,
    double? L,
    double? N,
    double? CHI,
    double? PSI,
  })
      : _AF = AF,
        _AG = AG,
        _L = L,
        _N = N,
        _CHI = CHI,
        _PSI = PSI;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(6);
    fbBuilder.addFloat64(0, _AF);
    fbBuilder.addFloat64(1, _AG);
    fbBuilder.addFloat64(2, _L);
    fbBuilder.addFloat64(3, _N);
    fbBuilder.addFloat64(4, _CHI);
    fbBuilder.addFloat64(5, _PSI);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  UVW Sigmas (Covariance matrix in UVW frame)
class UvwSigmas {
  UvwSigmas._(this._bc, this._bcOffset);
  factory UvwSigmas(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UvwSigmas> reader = _UvwSigmasReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  double get U_SIGMA => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 4, 0.0);
  double get V_SIGMA => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  double get W_SIGMA => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  double get UD_SIGMA => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  double get VD_SIGMA => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  double get WD_SIGMA => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);

  @override
  String toString() {
    return 'UvwSigmas{U_SIGMA: ${U_SIGMA}, V_SIGMA: ${V_SIGMA}, W_SIGMA: ${W_SIGMA}, UD_SIGMA: ${UD_SIGMA}, VD_SIGMA: ${VD_SIGMA}, WD_SIGMA: ${WD_SIGMA}}';
  }
}

class _UvwSigmasReader extends fb.TableReader<UvwSigmas> {
  const _UvwSigmasReader();

  @override
  UvwSigmas createObject(fb.BufferContext bc, int offset) => 
    UvwSigmas._(bc, offset);
}

class UvwSigmasBuilder {
  UvwSigmasBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addUSigma(double? U_SIGMA) {
    fbBuilder.addFloat64(0, U_SIGMA);
    return fbBuilder.offset;
  }
  int addVSigma(double? V_SIGMA) {
    fbBuilder.addFloat64(1, V_SIGMA);
    return fbBuilder.offset;
  }
  int addWSigma(double? W_SIGMA) {
    fbBuilder.addFloat64(2, W_SIGMA);
    return fbBuilder.offset;
  }
  int addUdSigma(double? UD_SIGMA) {
    fbBuilder.addFloat64(3, UD_SIGMA);
    return fbBuilder.offset;
  }
  int addVdSigma(double? VD_SIGMA) {
    fbBuilder.addFloat64(4, VD_SIGMA);
    return fbBuilder.offset;
  }
  int addWdSigma(double? WD_SIGMA) {
    fbBuilder.addFloat64(5, WD_SIGMA);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UvwSigmasObjectBuilder extends fb.ObjectBuilder {
  final double? _U_SIGMA;
  final double? _V_SIGMA;
  final double? _W_SIGMA;
  final double? _UD_SIGMA;
  final double? _VD_SIGMA;
  final double? _WD_SIGMA;

  UvwSigmasObjectBuilder({
    double? U_SIGMA,
    double? V_SIGMA,
    double? W_SIGMA,
    double? UD_SIGMA,
    double? VD_SIGMA,
    double? WD_SIGMA,
  })
      : _U_SIGMA = U_SIGMA,
        _V_SIGMA = V_SIGMA,
        _W_SIGMA = W_SIGMA,
        _UD_SIGMA = UD_SIGMA,
        _VD_SIGMA = VD_SIGMA,
        _WD_SIGMA = WD_SIGMA;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(6);
    fbBuilder.addFloat64(0, _U_SIGMA);
    fbBuilder.addFloat64(1, _V_SIGMA);
    fbBuilder.addFloat64(2, _W_SIGMA);
    fbBuilder.addFloat64(3, _UD_SIGMA);
    fbBuilder.addFloat64(4, _VD_SIGMA);
    fbBuilder.addFloat64(5, _WD_SIGMA);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  OPM Atmospheric and Perturbation Model Data
class OpmAtmosphericModelData {
  OpmAtmosphericModelData._(this._bc, this._bcOffset);
  factory OpmAtmosphericModelData(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OpmAtmosphericModelData> reader = _OpmAtmosphericModelDataReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  AtmosphericModel get ATMOSPHERIC_MODEL => AtmosphericModel.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0));
  GeopotentialModel get GEOPOTENTIAL_MODEL => GeopotentialModel.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 6, 0));
  PerturbationStatus get LUNAR_SOLAR_PERTURBATION => PerturbationStatus.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 8, 0));
  LunarPerturbationModel get LUNAR_PERTURBATION_MODEL => LunarPerturbationModel.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 10, 0));
  SolarPerturbationModel get SOLAR_PERTURBATION_MODEL => SolarPerturbationModel.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 12, 0));
  PerturbationStatus get SOLAR_RADIATION_PRESSURE => PerturbationStatus.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 14, 0));
  SolarRadiationPressureModel get SRP_MODEL => SolarRadiationPressureModel.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 16, 0));
  ResonanceModel get RESONANCE_MODEL => ResonanceModel.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 18, 0));

  @override
  String toString() {
    return 'OpmAtmosphericModelData{ATMOSPHERIC_MODEL: ${ATMOSPHERIC_MODEL}, GEOPOTENTIAL_MODEL: ${GEOPOTENTIAL_MODEL}, LUNAR_SOLAR_PERTURBATION: ${LUNAR_SOLAR_PERTURBATION}, LUNAR_PERTURBATION_MODEL: ${LUNAR_PERTURBATION_MODEL}, SOLAR_PERTURBATION_MODEL: ${SOLAR_PERTURBATION_MODEL}, SOLAR_RADIATION_PRESSURE: ${SOLAR_RADIATION_PRESSURE}, SRP_MODEL: ${SRP_MODEL}, RESONANCE_MODEL: ${RESONANCE_MODEL}}';
  }
}

class _OpmAtmosphericModelDataReader extends fb.TableReader<OpmAtmosphericModelData> {
  const _OpmAtmosphericModelDataReader();

  @override
  OpmAtmosphericModelData createObject(fb.BufferContext bc, int offset) => 
    OpmAtmosphericModelData._(bc, offset);
}

class OpmAtmosphericModelDataBuilder {
  OpmAtmosphericModelDataBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addAtmosphericModel(AtmosphericModel? ATMOSPHERIC_MODEL) {
    fbBuilder.addInt8(0, ATMOSPHERIC_MODEL?.value);
    return fbBuilder.offset;
  }
  int addGeopotentialModel(GeopotentialModel? GEOPOTENTIAL_MODEL) {
    fbBuilder.addInt8(1, GEOPOTENTIAL_MODEL?.value);
    return fbBuilder.offset;
  }
  int addLunarSolarPerturbation(PerturbationStatus? LUNAR_SOLAR_PERTURBATION) {
    fbBuilder.addInt8(2, LUNAR_SOLAR_PERTURBATION?.value);
    return fbBuilder.offset;
  }
  int addLunarPerturbationModel(LunarPerturbationModel? LUNAR_PERTURBATION_MODEL) {
    fbBuilder.addInt8(3, LUNAR_PERTURBATION_MODEL?.value);
    return fbBuilder.offset;
  }
  int addSolarPerturbationModel(SolarPerturbationModel? SOLAR_PERTURBATION_MODEL) {
    fbBuilder.addInt8(4, SOLAR_PERTURBATION_MODEL?.value);
    return fbBuilder.offset;
  }
  int addSolarRadiationPressure(PerturbationStatus? SOLAR_RADIATION_PRESSURE) {
    fbBuilder.addInt8(5, SOLAR_RADIATION_PRESSURE?.value);
    return fbBuilder.offset;
  }
  int addSrpModel(SolarRadiationPressureModel? SRP_MODEL) {
    fbBuilder.addInt8(6, SRP_MODEL?.value);
    return fbBuilder.offset;
  }
  int addResonanceModel(ResonanceModel? RESONANCE_MODEL) {
    fbBuilder.addInt8(7, RESONANCE_MODEL?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OpmAtmosphericModelDataObjectBuilder extends fb.ObjectBuilder {
  final AtmosphericModel? _ATMOSPHERIC_MODEL;
  final GeopotentialModel? _GEOPOTENTIAL_MODEL;
  final PerturbationStatus? _LUNAR_SOLAR_PERTURBATION;
  final LunarPerturbationModel? _LUNAR_PERTURBATION_MODEL;
  final SolarPerturbationModel? _SOLAR_PERTURBATION_MODEL;
  final PerturbationStatus? _SOLAR_RADIATION_PRESSURE;
  final SolarRadiationPressureModel? _SRP_MODEL;
  final ResonanceModel? _RESONANCE_MODEL;

  OpmAtmosphericModelDataObjectBuilder({
    AtmosphericModel? ATMOSPHERIC_MODEL,
    GeopotentialModel? GEOPOTENTIAL_MODEL,
    PerturbationStatus? LUNAR_SOLAR_PERTURBATION,
    LunarPerturbationModel? LUNAR_PERTURBATION_MODEL,
    SolarPerturbationModel? SOLAR_PERTURBATION_MODEL,
    PerturbationStatus? SOLAR_RADIATION_PRESSURE,
    SolarRadiationPressureModel? SRP_MODEL,
    ResonanceModel? RESONANCE_MODEL,
  })
      : _ATMOSPHERIC_MODEL = ATMOSPHERIC_MODEL,
        _GEOPOTENTIAL_MODEL = GEOPOTENTIAL_MODEL,
        _LUNAR_SOLAR_PERTURBATION = LUNAR_SOLAR_PERTURBATION,
        _LUNAR_PERTURBATION_MODEL = LUNAR_PERTURBATION_MODEL,
        _SOLAR_PERTURBATION_MODEL = SOLAR_PERTURBATION_MODEL,
        _SOLAR_RADIATION_PRESSURE = SOLAR_RADIATION_PRESSURE,
        _SRP_MODEL = SRP_MODEL,
        _RESONANCE_MODEL = RESONANCE_MODEL;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(8);
    fbBuilder.addInt8(0, _ATMOSPHERIC_MODEL?.value);
    fbBuilder.addInt8(1, _GEOPOTENTIAL_MODEL?.value);
    fbBuilder.addInt8(2, _LUNAR_SOLAR_PERTURBATION?.value);
    fbBuilder.addInt8(3, _LUNAR_PERTURBATION_MODEL?.value);
    fbBuilder.addInt8(4, _SOLAR_PERTURBATION_MODEL?.value);
    fbBuilder.addInt8(5, _SOLAR_RADIATION_PRESSURE?.value);
    fbBuilder.addInt8(6, _SRP_MODEL?.value);
    fbBuilder.addInt8(7, _RESONANCE_MODEL?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Orbit Parameter Message (OPM)
class OPM {
  OPM._(this._bc, this._bcOffset);
  factory OPM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OPM> reader = _OPMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  double get CCSDS_OMM_VERS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 4, 0.0);
  String? get CREATION_DATE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get ORIGINATOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get OBJECT_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get OBJECT_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get CENTER_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get REF_FRAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  String? get TIME_SYSTEM => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  OpmStateVector? get STATE_VECTOR => OpmStateVector.reader.vTableGetNullable(_bc, _bcOffset, 20);
  KeplerianElements? get KEPLERIAN_ELEMENTS => KeplerianElements.reader.vTableGetNullable(_bc, _bcOffset, 22);
  EquinoctialElements? get EQUINOCTIAL_ELEMENTS => EquinoctialElements.reader.vTableGetNullable(_bc, _bcOffset, 24);
  double get GM => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  OpmAtmosphericModelData? get ATMOSPHERIC_MODEL_DATA => OpmAtmosphericModelData.reader.vTableGetNullable(_bc, _bcOffset, 28);
  PropagatorConfig? get PROPAGATOR_SETTINGS => PropagatorConfig.reader.vTableGetNullable(_bc, _bcOffset, 30);
  List<OpmCovarianceMatrixLine>? get COVARIANCE_MATRIX => const fb.ListReader<OpmCovarianceMatrixLine>(OpmCovarianceMatrixLine.reader).vTableGetNullable(_bc, _bcOffset, 32);
  UvwSigmas? get UVW_SIGMAS => UvwSigmas.reader.vTableGetNullable(_bc, _bcOffset, 34);
  double get MASS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  double get SOLAR_RAD_AREA => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  double get SOLAR_RAD_COEFF => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  double get DRAG_AREA => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  double get DRAG_COEFF => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  PerturbationStatus get SRP => PerturbationStatus.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 46, 0));
  String? get CLASSIFICATION_TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  int get NORAD_CAT_ID => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 50, 0);
  int get ELEMENT_SET_NO => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 52, 0);
  double get REV_AT_EPOCH => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 54, 0.0);
  double get BSTAR => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 56, 0.0);
  double get MEAN_MOTION_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 58, 0.0);
  double get MEAN_MOTION_DDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 60, 0.0);
  String? get COV_REFERENCE_FRAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  double get CX_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  double get CY_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  double get CZ_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  double get CX_DOT_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 70, 0.0);
  int get USER_DEFINED_BIP_0044_TYPE => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 72, 0);
  String? get USER_DEFINED_OBJECT_DESIGNATOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  String? get USER_DEFINED_EARTH_MODEL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  double get USER_DEFINED_EPOCH_TIMESTAMP => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  double get USER_DEFINED_MICROSECONDS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);

  @override
  String toString() {
    return 'OPM{CCSDS_OMM_VERS: ${CCSDS_OMM_VERS}, CREATION_DATE: ${CREATION_DATE}, ORIGINATOR: ${ORIGINATOR}, OBJECT_NAME: ${OBJECT_NAME}, OBJECT_ID: ${OBJECT_ID}, CENTER_NAME: ${CENTER_NAME}, REF_FRAME: ${REF_FRAME}, TIME_SYSTEM: ${TIME_SYSTEM}, STATE_VECTOR: ${STATE_VECTOR}, KEPLERIAN_ELEMENTS: ${KEPLERIAN_ELEMENTS}, EQUINOCTIAL_ELEMENTS: ${EQUINOCTIAL_ELEMENTS}, GM: ${GM}, ATMOSPHERIC_MODEL_DATA: ${ATMOSPHERIC_MODEL_DATA}, PROPAGATOR_SETTINGS: ${PROPAGATOR_SETTINGS}, COVARIANCE_MATRIX: ${COVARIANCE_MATRIX}, UVW_SIGMAS: ${UVW_SIGMAS}, MASS: ${MASS}, SOLAR_RAD_AREA: ${SOLAR_RAD_AREA}, SOLAR_RAD_COEFF: ${SOLAR_RAD_COEFF}, DRAG_AREA: ${DRAG_AREA}, DRAG_COEFF: ${DRAG_COEFF}, SRP: ${SRP}, CLASSIFICATION_TYPE: ${CLASSIFICATION_TYPE}, NORAD_CAT_ID: ${NORAD_CAT_ID}, ELEMENT_SET_NO: ${ELEMENT_SET_NO}, REV_AT_EPOCH: ${REV_AT_EPOCH}, BSTAR: ${BSTAR}, MEAN_MOTION_DOT: ${MEAN_MOTION_DOT}, MEAN_MOTION_DDOT: ${MEAN_MOTION_DDOT}, COV_REFERENCE_FRAME: ${COV_REFERENCE_FRAME}, CX_X: ${CX_X}, CY_X: ${CY_X}, CZ_X: ${CZ_X}, CX_DOT_X: ${CX_DOT_X}, USER_DEFINED_BIP_0044_TYPE: ${USER_DEFINED_BIP_0044_TYPE}, USER_DEFINED_OBJECT_DESIGNATOR: ${USER_DEFINED_OBJECT_DESIGNATOR}, USER_DEFINED_EARTH_MODEL: ${USER_DEFINED_EARTH_MODEL}, USER_DEFINED_EPOCH_TIMESTAMP: ${USER_DEFINED_EPOCH_TIMESTAMP}, USER_DEFINED_MICROSECONDS: ${USER_DEFINED_MICROSECONDS}}';
  }
}

class _OPMReader extends fb.TableReader<OPM> {
  const _OPMReader();

  @override
  OPM createObject(fb.BufferContext bc, int offset) => 
    OPM._(bc, offset);
}

class OPMBuilder {
  OPMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(39);
  }

  int addCcsdsOmmVers(double? CCSDS_OMM_VERS) {
    fbBuilder.addFloat64(0, CCSDS_OMM_VERS);
    return fbBuilder.offset;
  }
  int addCreationDateOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOriginatorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addObjectNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addObjectIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addCenterNameOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addRefFrameOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addTimeSystemOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addStateVectorOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addKeplerianElementsOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addEquinoctialElementsOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addGm(double? GM) {
    fbBuilder.addFloat64(11, GM);
    return fbBuilder.offset;
  }
  int addAtmosphericModelDataOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addPropagatorSettingsOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addCovarianceMatrixOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addUvwSigmasOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addMass(double? MASS) {
    fbBuilder.addFloat64(16, MASS);
    return fbBuilder.offset;
  }
  int addSolarRadArea(double? SOLAR_RAD_AREA) {
    fbBuilder.addFloat64(17, SOLAR_RAD_AREA);
    return fbBuilder.offset;
  }
  int addSolarRadCoeff(double? SOLAR_RAD_COEFF) {
    fbBuilder.addFloat64(18, SOLAR_RAD_COEFF);
    return fbBuilder.offset;
  }
  int addDragArea(double? DRAG_AREA) {
    fbBuilder.addFloat64(19, DRAG_AREA);
    return fbBuilder.offset;
  }
  int addDragCoeff(double? DRAG_COEFF) {
    fbBuilder.addFloat64(20, DRAG_COEFF);
    return fbBuilder.offset;
  }
  int addSrp(PerturbationStatus? SRP) {
    fbBuilder.addInt8(21, SRP?.value);
    return fbBuilder.offset;
  }
  int addClassificationTypeOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addNoradCatId(int? NORAD_CAT_ID) {
    fbBuilder.addUint32(23, NORAD_CAT_ID);
    return fbBuilder.offset;
  }
  int addElementSetNo(int? ELEMENT_SET_NO) {
    fbBuilder.addUint32(24, ELEMENT_SET_NO);
    return fbBuilder.offset;
  }
  int addRevAtEpoch(double? REV_AT_EPOCH) {
    fbBuilder.addFloat64(25, REV_AT_EPOCH);
    return fbBuilder.offset;
  }
  int addBstar(double? BSTAR) {
    fbBuilder.addFloat64(26, BSTAR);
    return fbBuilder.offset;
  }
  int addMeanMotionDot(double? MEAN_MOTION_DOT) {
    fbBuilder.addFloat64(27, MEAN_MOTION_DOT);
    return fbBuilder.offset;
  }
  int addMeanMotionDdot(double? MEAN_MOTION_DDOT) {
    fbBuilder.addFloat64(28, MEAN_MOTION_DDOT);
    return fbBuilder.offset;
  }
  int addCovReferenceFrameOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addCxX(double? CX_X) {
    fbBuilder.addFloat64(30, CX_X);
    return fbBuilder.offset;
  }
  int addCyX(double? CY_X) {
    fbBuilder.addFloat64(31, CY_X);
    return fbBuilder.offset;
  }
  int addCzX(double? CZ_X) {
    fbBuilder.addFloat64(32, CZ_X);
    return fbBuilder.offset;
  }
  int addCxDotX(double? CX_DOT_X) {
    fbBuilder.addFloat64(33, CX_DOT_X);
    return fbBuilder.offset;
  }
  int addUserDefinedBip0044Type(int? USER_DEFINED_BIP_0044_TYPE) {
    fbBuilder.addUint32(34, USER_DEFINED_BIP_0044_TYPE);
    return fbBuilder.offset;
  }
  int addUserDefinedObjectDesignatorOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addUserDefinedEarthModelOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addUserDefinedEpochTimestamp(double? USER_DEFINED_EPOCH_TIMESTAMP) {
    fbBuilder.addFloat64(37, USER_DEFINED_EPOCH_TIMESTAMP);
    return fbBuilder.offset;
  }
  int addUserDefinedMicroseconds(double? USER_DEFINED_MICROSECONDS) {
    fbBuilder.addFloat64(38, USER_DEFINED_MICROSECONDS);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OPMObjectBuilder extends fb.ObjectBuilder {
  final double? _CCSDS_OMM_VERS;
  final String? _CREATION_DATE;
  final String? _ORIGINATOR;
  final String? _OBJECT_NAME;
  final String? _OBJECT_ID;
  final String? _CENTER_NAME;
  final String? _REF_FRAME;
  final String? _TIME_SYSTEM;
  final OpmStateVectorObjectBuilder? _STATE_VECTOR;
  final KeplerianElementsObjectBuilder? _KEPLERIAN_ELEMENTS;
  final EquinoctialElementsObjectBuilder? _EQUINOCTIAL_ELEMENTS;
  final double? _GM;
  final OpmAtmosphericModelDataObjectBuilder? _ATMOSPHERIC_MODEL_DATA;
  final PropagatorConfigObjectBuilder? _PROPAGATOR_SETTINGS;
  final List<OpmCovarianceMatrixLineObjectBuilder>? _COVARIANCE_MATRIX;
  final UvwSigmasObjectBuilder? _UVW_SIGMAS;
  final double? _MASS;
  final double? _SOLAR_RAD_AREA;
  final double? _SOLAR_RAD_COEFF;
  final double? _DRAG_AREA;
  final double? _DRAG_COEFF;
  final PerturbationStatus? _SRP;
  final String? _CLASSIFICATION_TYPE;
  final int? _NORAD_CAT_ID;
  final int? _ELEMENT_SET_NO;
  final double? _REV_AT_EPOCH;
  final double? _BSTAR;
  final double? _MEAN_MOTION_DOT;
  final double? _MEAN_MOTION_DDOT;
  final String? _COV_REFERENCE_FRAME;
  final double? _CX_X;
  final double? _CY_X;
  final double? _CZ_X;
  final double? _CX_DOT_X;
  final int? _USER_DEFINED_BIP_0044_TYPE;
  final String? _USER_DEFINED_OBJECT_DESIGNATOR;
  final String? _USER_DEFINED_EARTH_MODEL;
  final double? _USER_DEFINED_EPOCH_TIMESTAMP;
  final double? _USER_DEFINED_MICROSECONDS;

  OPMObjectBuilder({
    double? CCSDS_OMM_VERS,
    String? CREATION_DATE,
    String? ORIGINATOR,
    String? OBJECT_NAME,
    String? OBJECT_ID,
    String? CENTER_NAME,
    String? REF_FRAME,
    String? TIME_SYSTEM,
    OpmStateVectorObjectBuilder? STATE_VECTOR,
    KeplerianElementsObjectBuilder? KEPLERIAN_ELEMENTS,
    EquinoctialElementsObjectBuilder? EQUINOCTIAL_ELEMENTS,
    double? GM,
    OpmAtmosphericModelDataObjectBuilder? ATMOSPHERIC_MODEL_DATA,
    PropagatorConfigObjectBuilder? PROPAGATOR_SETTINGS,
    List<OpmCovarianceMatrixLineObjectBuilder>? COVARIANCE_MATRIX,
    UvwSigmasObjectBuilder? UVW_SIGMAS,
    double? MASS,
    double? SOLAR_RAD_AREA,
    double? SOLAR_RAD_COEFF,
    double? DRAG_AREA,
    double? DRAG_COEFF,
    PerturbationStatus? SRP,
    String? CLASSIFICATION_TYPE,
    int? NORAD_CAT_ID,
    int? ELEMENT_SET_NO,
    double? REV_AT_EPOCH,
    double? BSTAR,
    double? MEAN_MOTION_DOT,
    double? MEAN_MOTION_DDOT,
    String? COV_REFERENCE_FRAME,
    double? CX_X,
    double? CY_X,
    double? CZ_X,
    double? CX_DOT_X,
    int? USER_DEFINED_BIP_0044_TYPE,
    String? USER_DEFINED_OBJECT_DESIGNATOR,
    String? USER_DEFINED_EARTH_MODEL,
    double? USER_DEFINED_EPOCH_TIMESTAMP,
    double? USER_DEFINED_MICROSECONDS,
  })
      : _CCSDS_OMM_VERS = CCSDS_OMM_VERS,
        _CREATION_DATE = CREATION_DATE,
        _ORIGINATOR = ORIGINATOR,
        _OBJECT_NAME = OBJECT_NAME,
        _OBJECT_ID = OBJECT_ID,
        _CENTER_NAME = CENTER_NAME,
        _REF_FRAME = REF_FRAME,
        _TIME_SYSTEM = TIME_SYSTEM,
        _STATE_VECTOR = STATE_VECTOR,
        _KEPLERIAN_ELEMENTS = KEPLERIAN_ELEMENTS,
        _EQUINOCTIAL_ELEMENTS = EQUINOCTIAL_ELEMENTS,
        _GM = GM,
        _ATMOSPHERIC_MODEL_DATA = ATMOSPHERIC_MODEL_DATA,
        _PROPAGATOR_SETTINGS = PROPAGATOR_SETTINGS,
        _COVARIANCE_MATRIX = COVARIANCE_MATRIX,
        _UVW_SIGMAS = UVW_SIGMAS,
        _MASS = MASS,
        _SOLAR_RAD_AREA = SOLAR_RAD_AREA,
        _SOLAR_RAD_COEFF = SOLAR_RAD_COEFF,
        _DRAG_AREA = DRAG_AREA,
        _DRAG_COEFF = DRAG_COEFF,
        _SRP = SRP,
        _CLASSIFICATION_TYPE = CLASSIFICATION_TYPE,
        _NORAD_CAT_ID = NORAD_CAT_ID,
        _ELEMENT_SET_NO = ELEMENT_SET_NO,
        _REV_AT_EPOCH = REV_AT_EPOCH,
        _BSTAR = BSTAR,
        _MEAN_MOTION_DOT = MEAN_MOTION_DOT,
        _MEAN_MOTION_DDOT = MEAN_MOTION_DDOT,
        _COV_REFERENCE_FRAME = COV_REFERENCE_FRAME,
        _CX_X = CX_X,
        _CY_X = CY_X,
        _CZ_X = CZ_X,
        _CX_DOT_X = CX_DOT_X,
        _USER_DEFINED_BIP_0044_TYPE = USER_DEFINED_BIP_0044_TYPE,
        _USER_DEFINED_OBJECT_DESIGNATOR = USER_DEFINED_OBJECT_DESIGNATOR,
        _USER_DEFINED_EARTH_MODEL = USER_DEFINED_EARTH_MODEL,
        _USER_DEFINED_EPOCH_TIMESTAMP = USER_DEFINED_EPOCH_TIMESTAMP,
        _USER_DEFINED_MICROSECONDS = USER_DEFINED_MICROSECONDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? CREATION_DATEOffset = _CREATION_DATE == null ? null
        : fbBuilder.writeString(_CREATION_DATE!);
    final int? ORIGINATOROffset = _ORIGINATOR == null ? null
        : fbBuilder.writeString(_ORIGINATOR!);
    final int? OBJECT_NAMEOffset = _OBJECT_NAME == null ? null
        : fbBuilder.writeString(_OBJECT_NAME!);
    final int? OBJECT_IDOffset = _OBJECT_ID == null ? null
        : fbBuilder.writeString(_OBJECT_ID!);
    final int? CENTER_NAMEOffset = _CENTER_NAME == null ? null
        : fbBuilder.writeString(_CENTER_NAME!);
    final int? REF_FRAMEOffset = _REF_FRAME == null ? null
        : fbBuilder.writeString(_REF_FRAME!);
    final int? TIME_SYSTEMOffset = _TIME_SYSTEM == null ? null
        : fbBuilder.writeString(_TIME_SYSTEM!);
    final int? STATE_VECTOROffset = _STATE_VECTOR?.getOrCreateOffset(fbBuilder);
    final int? KEPLERIAN_ELEMENTSOffset = _KEPLERIAN_ELEMENTS?.getOrCreateOffset(fbBuilder);
    final int? EQUINOCTIAL_ELEMENTSOffset = _EQUINOCTIAL_ELEMENTS?.getOrCreateOffset(fbBuilder);
    final int? ATMOSPHERIC_MODEL_DATAOffset = _ATMOSPHERIC_MODEL_DATA?.getOrCreateOffset(fbBuilder);
    final int? PROPAGATOR_SETTINGSOffset = _PROPAGATOR_SETTINGS?.getOrCreateOffset(fbBuilder);
    final int? COVARIANCE_MATRIXOffset = _COVARIANCE_MATRIX == null ? null
        : fbBuilder.writeList(_COVARIANCE_MATRIX!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? UVW_SIGMASOffset = _UVW_SIGMAS?.getOrCreateOffset(fbBuilder);
    final int? CLASSIFICATION_TYPEOffset = _CLASSIFICATION_TYPE == null ? null
        : fbBuilder.writeString(_CLASSIFICATION_TYPE!);
    final int? COV_REFERENCE_FRAMEOffset = _COV_REFERENCE_FRAME == null ? null
        : fbBuilder.writeString(_COV_REFERENCE_FRAME!);
    final int? USER_DEFINED_OBJECT_DESIGNATOROffset = _USER_DEFINED_OBJECT_DESIGNATOR == null ? null
        : fbBuilder.writeString(_USER_DEFINED_OBJECT_DESIGNATOR!);
    final int? USER_DEFINED_EARTH_MODELOffset = _USER_DEFINED_EARTH_MODEL == null ? null
        : fbBuilder.writeString(_USER_DEFINED_EARTH_MODEL!);
    fbBuilder.startTable(39);
    fbBuilder.addFloat64(0, _CCSDS_OMM_VERS);
    fbBuilder.addOffset(1, CREATION_DATEOffset);
    fbBuilder.addOffset(2, ORIGINATOROffset);
    fbBuilder.addOffset(3, OBJECT_NAMEOffset);
    fbBuilder.addOffset(4, OBJECT_IDOffset);
    fbBuilder.addOffset(5, CENTER_NAMEOffset);
    fbBuilder.addOffset(6, REF_FRAMEOffset);
    fbBuilder.addOffset(7, TIME_SYSTEMOffset);
    fbBuilder.addOffset(8, STATE_VECTOROffset);
    fbBuilder.addOffset(9, KEPLERIAN_ELEMENTSOffset);
    fbBuilder.addOffset(10, EQUINOCTIAL_ELEMENTSOffset);
    fbBuilder.addFloat64(11, _GM);
    fbBuilder.addOffset(12, ATMOSPHERIC_MODEL_DATAOffset);
    fbBuilder.addOffset(13, PROPAGATOR_SETTINGSOffset);
    fbBuilder.addOffset(14, COVARIANCE_MATRIXOffset);
    fbBuilder.addOffset(15, UVW_SIGMASOffset);
    fbBuilder.addFloat64(16, _MASS);
    fbBuilder.addFloat64(17, _SOLAR_RAD_AREA);
    fbBuilder.addFloat64(18, _SOLAR_RAD_COEFF);
    fbBuilder.addFloat64(19, _DRAG_AREA);
    fbBuilder.addFloat64(20, _DRAG_COEFF);
    fbBuilder.addInt8(21, _SRP?.value);
    fbBuilder.addOffset(22, CLASSIFICATION_TYPEOffset);
    fbBuilder.addUint32(23, _NORAD_CAT_ID);
    fbBuilder.addUint32(24, _ELEMENT_SET_NO);
    fbBuilder.addFloat64(25, _REV_AT_EPOCH);
    fbBuilder.addFloat64(26, _BSTAR);
    fbBuilder.addFloat64(27, _MEAN_MOTION_DOT);
    fbBuilder.addFloat64(28, _MEAN_MOTION_DDOT);
    fbBuilder.addOffset(29, COV_REFERENCE_FRAMEOffset);
    fbBuilder.addFloat64(30, _CX_X);
    fbBuilder.addFloat64(31, _CY_X);
    fbBuilder.addFloat64(32, _CZ_X);
    fbBuilder.addFloat64(33, _CX_DOT_X);
    fbBuilder.addUint32(34, _USER_DEFINED_BIP_0044_TYPE);
    fbBuilder.addOffset(35, USER_DEFINED_OBJECT_DESIGNATOROffset);
    fbBuilder.addOffset(36, USER_DEFINED_EARTH_MODELOffset);
    fbBuilder.addFloat64(37, _USER_DEFINED_EPOCH_TIMESTAMP);
    fbBuilder.addFloat64(38, _USER_DEFINED_MICROSECONDS);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Collection of OPM records
class OPM_COLLECTION {
  OPM_COLLECTION._(this._bc, this._bcOffset);
  factory OPM_COLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OPM_COLLECTION> reader = _OPM_COLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<OPM>? get RECORDS => const fb.ListReader<OPM>(OPM.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'OPM_COLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _OPM_COLLECTIONReader extends fb.TableReader<OPM_COLLECTION> {
  const _OPM_COLLECTIONReader();

  @override
  OPM_COLLECTION createObject(fb.BufferContext bc, int offset) => 
    OPM_COLLECTION._(bc, offset);
}

class OPM_COLLECTIONBuilder {
  OPM_COLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OPM_COLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<OPMObjectBuilder>? _RECORDS;

  OPM_COLLECTIONObjectBuilder({
    List<OPMObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
