// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class MeanElementTheory {
  final int value;
  const MeanElementTheory._(this.value);

  factory MeanElementTheory.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum MeanElementTheory');
    }
    return result;
  }

  static MeanElementTheory? _createOrNull(int? value) => 
      value == null ? null : MeanElementTheory.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Simplified General Perturbation Model 4
  static const MeanElementTheory SGP4 = MeanElementTheory._(0);

  ///  Simplified General Perturbation Model 4 eXtended Perturbations (https://amostech.com/TechnicalPapers/2022/Astrodynamics/Payne_2.pdf)
  static const MeanElementTheory SGP4XP = MeanElementTheory._(1);

  ///  Draper Semi-analytical Satellite Theory
  static const MeanElementTheory DSST = MeanElementTheory._(2);

  ///  Universal Semianalytical Method
  static const MeanElementTheory USM = MeanElementTheory._(3);
  static const Map<int, MeanElementTheory> values = {
    0: SGP4,
    1: SGP4XP,
    2: DSST,
    3: USM};

  static const fb.Reader<MeanElementTheory> reader = _MeanElementTheoryReader();

  @override
  String toString() {
    return 'MeanElementTheory{value: $value}';
  }
}

class _MeanElementTheoryReader extends fb.Reader<MeanElementTheory> {
  const _MeanElementTheoryReader();

  @override
  int get size => 1;

  @override
  MeanElementTheory read(fb.BufferContext bc, int offset) =>
      MeanElementTheory.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Mean Element Theory
class MET {
  MET._(this._bc, this._bcOffset);
  factory MET(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MET> reader = _METReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  MeanElementTheory get MEAN_ELEMENT_THEORY => MeanElementTheory.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0));

  @override
  String toString() {
    return 'MET{MEAN_ELEMENT_THEORY: ${MEAN_ELEMENT_THEORY}}';
  }
}

class _METReader extends fb.TableReader<MET> {
  const _METReader();

  @override
  MET createObject(fb.BufferContext bc, int offset) => 
    MET._(bc, offset);
}

class METBuilder {
  METBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addMeanElementTheory(MeanElementTheory? MEAN_ELEMENT_THEORY) {
    fbBuilder.addInt8(0, MEAN_ELEMENT_THEORY?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class METObjectBuilder extends fb.ObjectBuilder {
  final MeanElementTheory? _MEAN_ELEMENT_THEORY;

  METObjectBuilder({
    MeanElementTheory? MEAN_ELEMENT_THEORY,
  })
      : _MEAN_ELEMENT_THEORY = MEAN_ELEMENT_THEORY;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addInt8(0, _MEAN_ELEMENT_THEORY?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class METCOLLECTION {
  METCOLLECTION._(this._bc, this._bcOffset);
  factory METCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<METCOLLECTION> reader = _METCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<MET>? get RECORDS => const fb.ListReader<MET>(MET.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'METCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _METCOLLECTIONReader extends fb.TableReader<METCOLLECTION> {
  const _METCOLLECTIONReader();

  @override
  METCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    METCOLLECTION._(bc, offset);
}

class METCOLLECTIONBuilder {
  METCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class METCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<METObjectBuilder>? _RECORDS;

  METCOLLECTIONObjectBuilder({
    List<METObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
