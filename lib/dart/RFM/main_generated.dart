// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class ReferenceFrame {
  final int value;
  const ReferenceFrame._(this.value);

  factory ReferenceFrame.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ReferenceFrame');
    }
    return result;
  }

  static ReferenceFrame? _createOrNull(int? value) => 
      value == null ? null : ReferenceFrame.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 24;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Earth-Centered-Earth-Fixed (ECEF) frame: Rotates with Earth. Origin at Earth's center. X-axis towards prime meridian, Y-axis eastward, Z-axis towards North Pole. Ideal for terrestrial points.
  static const ReferenceFrame ECEF = ReferenceFrame._(0);

  ///  International Celestial Reference Frame (ICRF): An inertial frame fixed relative to distant stars. Based on quasars. Used for precision astronomy and unaffected by Earth's rotation.
  static const ReferenceFrame ICRF = ReferenceFrame._(1);

  ///  True Equator Mean Equinox (TEME): Used in SGP4 model for satellite tracking. Accounts for Earth's precession and nutation. Dynamic frame useful for orbit prediction.
  static const ReferenceFrame TEME = ReferenceFrame._(2);

  ///  East-North-Up (ENU): Local tangent plane system for surface points. "East" eastward, "North" northward, "Up" perpendicular to Earth's surface. Suited for stationary or slow-moving objects at low altitudes.
  static const ReferenceFrame ENU = ReferenceFrame._(3);

  ///  North-East-Down (NED): Common in aviation and navigation. "North" northward, "East" eastward, "Down" towards Earth's center. Aligns with gravity, intuitive for aircraft and vehicles.
  static const ReferenceFrame NED = ReferenceFrame._(4);

  ///  North-East-Up (NEU): Similar to NED but "Up" axis is opposite to gravity. Suited for applications preferring a conventional "Up" direction.
  static const ReferenceFrame NEU = ReferenceFrame._(5);

  ///  Radial-Intrack-Cross-track (RIC): Aligned with spacecraft's UVW system. "Radial" axis towards spacecraft, "In-track" perpendicular to radial and cross-track, "Cross-track" normal to orbit plane. Used for spacecraft orientation and tracking.
  static const ReferenceFrame RIC = ReferenceFrame._(6);

  ///  Earth Mean Equator and Equinox of J2000 (J2000): An Earth-Centered Inertial (ECI) frame defined by Earth's mean equator and equinox at the start of the year 2000. Fixed relative to distant stars, used for celestial mechanics and space navigation.
  static const ReferenceFrame J2000 = ReferenceFrame._(7);

  ///  Geocentric Celestial Reference Frame
  static const ReferenceFrame GCRF = ReferenceFrame._(8);

  ///  Greenwich Rotating Coordinates
  static const ReferenceFrame GRC = ReferenceFrame._(9);

  ///  International Terrestrial Reference Frame 2000
  static const ReferenceFrame ITRF2000 = ReferenceFrame._(10);

  ///  International Terrestrial Reference Frame 1993
  static const ReferenceFrame ITRF93 = ReferenceFrame._(11);

  ///  International Terrestrial Reference Frame 1997
  static const ReferenceFrame ITRF97 = ReferenceFrame._(12);

  ///  True of Date, Rotating
  static const ReferenceFrame TDR = ReferenceFrame._(13);

  ///  True of Date
  static const ReferenceFrame TOD = ReferenceFrame._(14);

  ///  Radial, Transverse, Normal
  static const ReferenceFrame RTN = ReferenceFrame._(15);

  ///  Transverse, Velocity, Normal
  static const ReferenceFrame TVN = ReferenceFrame._(16);

  ///  Vehicle-Body-Local-Horizontal (VVLH): An orbit reference frame with X-axis pointing from the center of the central body to the vehicle, Z-axis oppoOBSERVER to the orbital angular momentum vector, and Y-axis completing the right-handed system.
  static const ReferenceFrame VVLH = ReferenceFrame._(17);

  ///  Vehicle-Local-Vertical-Local-Horizontal (VLVH): An orbit reference frame similar to VVLH, often used in close proximity operations or surface-oriented missions.
  static const ReferenceFrame VLVH = ReferenceFrame._(18);

  ///  Local Tangent Plane (LTP): A local, surface-fixed reference frame often used for terrestrial applications, aligned with the local horizon.
  static const ReferenceFrame LTP = ReferenceFrame._(19);

  ///  Local Vertical-Local Horizontal (LVLH): An orbit reference frame with the Z-axis pointing towards the center of the central body (oppoOBSERVER to local vertical), the X-axis in the velocity direction (local horizontal), and the Y-axis completing the right-hand system.
  static const ReferenceFrame LVLH = ReferenceFrame._(20);

  ///  Polar-North-East (PNE): A variation of local coordinate systems typically used in polar regions, with axes aligned toward the geographic North Pole, Eastward, and perpendicular to the Earth's surface.
  static const ReferenceFrame PNE = ReferenceFrame._(21);

  ///  Body-Fixed Reference Frame (BRF): A reference frame fixed to the body of a spacecraft or celestial object, oriented according to the body's principal axes.
  static const ReferenceFrame BRF = ReferenceFrame._(22);

  ///  Another name for 'Radial, Transverse, Normal'
  static const ReferenceFrame RSW = ReferenceFrame._(23);

  ///  A local orbital coordinate frame
  static const ReferenceFrame TNW = ReferenceFrame._(24);
  static const Map<int, ReferenceFrame> values = {
    0: ECEF,
    1: ICRF,
    2: TEME,
    3: ENU,
    4: NED,
    5: NEU,
    6: RIC,
    7: J2000,
    8: GCRF,
    9: GRC,
    10: ITRF2000,
    11: ITRF93,
    12: ITRF97,
    13: TDR,
    14: TOD,
    15: RTN,
    16: TVN,
    17: VVLH,
    18: VLVH,
    19: LTP,
    20: LVLH,
    21: PNE,
    22: BRF,
    23: RSW,
    24: TNW};

  static const fb.Reader<ReferenceFrame> reader = _ReferenceFrameReader();

  @override
  String toString() {
    return 'ReferenceFrame{value: $value}';
  }
}

class _ReferenceFrameReader extends fb.Reader<ReferenceFrame> {
  const _ReferenceFrameReader();

  @override
  int get size => 1;

  @override
  ReferenceFrame read(fb.BufferContext bc, int offset) =>
      ReferenceFrame.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Reference Frame Message
class RFM {
  RFM._(this._bc, this._bcOffset);
  factory RFM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RFM> reader = _RFMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ReferenceFrame get REFERENCE_FRAME => ReferenceFrame.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0));

  @override
  String toString() {
    return 'RFM{REFERENCE_FRAME: ${REFERENCE_FRAME}}';
  }
}

class _RFMReader extends fb.TableReader<RFM> {
  const _RFMReader();

  @override
  RFM createObject(fb.BufferContext bc, int offset) => 
    RFM._(bc, offset);
}

class RFMBuilder {
  RFMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addReferenceFrame(ReferenceFrame? REFERENCE_FRAME) {
    fbBuilder.addInt8(0, REFERENCE_FRAME?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RFMObjectBuilder extends fb.ObjectBuilder {
  final ReferenceFrame? _REFERENCE_FRAME;

  RFMObjectBuilder({
    ReferenceFrame? REFERENCE_FRAME,
  })
      : _REFERENCE_FRAME = REFERENCE_FRAME;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addInt8(0, _REFERENCE_FRAME?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
