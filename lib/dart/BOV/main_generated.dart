// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  Burn Out Vector Message
class BOV {
  BOV._(this._bc, this._bcOffset);
  factory BOV(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<BOV> reader = _BOVReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  double get E_COORDINATE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 4, 0.0);
  double get F_COORDINATE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  double get G_COORDINATE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  double get E_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  double get F_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  double get G_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  String? get EPOCH_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  double get TIME_FROM_LAUNCH => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);

  @override
  String toString() {
    return 'BOV{E_COORDINATE: ${E_COORDINATE}, F_COORDINATE: ${F_COORDINATE}, G_COORDINATE: ${G_COORDINATE}, E_DOT: ${E_DOT}, F_DOT: ${F_DOT}, G_DOT: ${G_DOT}, EPOCH_TIME: ${EPOCH_TIME}, TIME_FROM_LAUNCH: ${TIME_FROM_LAUNCH}}';
  }
}

class _BOVReader extends fb.TableReader<BOV> {
  const _BOVReader();

  @override
  BOV createObject(fb.BufferContext bc, int offset) => 
    BOV._(bc, offset);
}

class BOVBuilder {
  BOVBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addECoordinate(double? E_COORDINATE) {
    fbBuilder.addFloat64(0, E_COORDINATE);
    return fbBuilder.offset;
  }
  int addFCoordinate(double? F_COORDINATE) {
    fbBuilder.addFloat64(1, F_COORDINATE);
    return fbBuilder.offset;
  }
  int addGCoordinate(double? G_COORDINATE) {
    fbBuilder.addFloat64(2, G_COORDINATE);
    return fbBuilder.offset;
  }
  int addEDot(double? E_DOT) {
    fbBuilder.addFloat64(3, E_DOT);
    return fbBuilder.offset;
  }
  int addFDot(double? F_DOT) {
    fbBuilder.addFloat64(4, F_DOT);
    return fbBuilder.offset;
  }
  int addGDot(double? G_DOT) {
    fbBuilder.addFloat64(5, G_DOT);
    return fbBuilder.offset;
  }
  int addEpochTimeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addTimeFromLaunch(double? TIME_FROM_LAUNCH) {
    fbBuilder.addFloat64(7, TIME_FROM_LAUNCH);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BOVObjectBuilder extends fb.ObjectBuilder {
  final double? _E_COORDINATE;
  final double? _F_COORDINATE;
  final double? _G_COORDINATE;
  final double? _E_DOT;
  final double? _F_DOT;
  final double? _G_DOT;
  final String? _EPOCH_TIME;
  final double? _TIME_FROM_LAUNCH;

  BOVObjectBuilder({
    double? E_COORDINATE,
    double? F_COORDINATE,
    double? G_COORDINATE,
    double? E_DOT,
    double? F_DOT,
    double? G_DOT,
    String? EPOCH_TIME,
    double? TIME_FROM_LAUNCH,
  })
      : _E_COORDINATE = E_COORDINATE,
        _F_COORDINATE = F_COORDINATE,
        _G_COORDINATE = G_COORDINATE,
        _E_DOT = E_DOT,
        _F_DOT = F_DOT,
        _G_DOT = G_DOT,
        _EPOCH_TIME = EPOCH_TIME,
        _TIME_FROM_LAUNCH = TIME_FROM_LAUNCH;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? EPOCH_TIMEOffset = _EPOCH_TIME == null ? null
        : fbBuilder.writeString(_EPOCH_TIME!);
    fbBuilder.startTable(8);
    fbBuilder.addFloat64(0, _E_COORDINATE);
    fbBuilder.addFloat64(1, _F_COORDINATE);
    fbBuilder.addFloat64(2, _G_COORDINATE);
    fbBuilder.addFloat64(3, _E_DOT);
    fbBuilder.addFloat64(4, _F_DOT);
    fbBuilder.addFloat64(5, _G_DOT);
    fbBuilder.addOffset(6, EPOCH_TIMEOffset);
    fbBuilder.addFloat64(7, _TIME_FROM_LAUNCH);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
