// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


import './main_generated.dart';

///  A single ephemeris data line
class EphemerisDataLine {
  EphemerisDataLine._(this._bc, this._bcOffset);
  factory EphemerisDataLine(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EphemerisDataLine> reader = _EphemerisDataLineReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Epoch time, in ISO 8601 UTC format
  String? get EPOCH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Position vector X-component km
  double get X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  Position vector Y-component km
  double get Y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  Position vector Z-component km
  double get Z => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Velocity vector X-component km/s
  double get X_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Velocity vector Y-component km/s
  double get Y_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Velocity vector Z-component km/s
  double get Z_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Optional: Acceleration vector X-component km/s/s
  double get X_DDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Optional: Acceleration vector Y-component km/s/s
  double get Y_DDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Optional: Acceleration vector Z-component km/s/s
  double get Z_DDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);

  @override
  String toString() {
    return 'EphemerisDataLine{EPOCH: ${EPOCH}, X: ${X}, Y: ${Y}, Z: ${Z}, X_DOT: ${X_DOT}, Y_DOT: ${Y_DOT}, Z_DOT: ${Z_DOT}, X_DDOT: ${X_DDOT}, Y_DDOT: ${Y_DDOT}, Z_DDOT: ${Z_DDOT}}';
  }
}

class _EphemerisDataLineReader extends fb.TableReader<EphemerisDataLine> {
  const _EphemerisDataLineReader();

  @override
  EphemerisDataLine createObject(fb.BufferContext bc, int offset) => 
    EphemerisDataLine._(bc, offset);
}

class EphemerisDataLineBuilder {
  EphemerisDataLineBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addEpochOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addX(double? X) {
    fbBuilder.addFloat64(1, X);
    return fbBuilder.offset;
  }
  int addY(double? Y) {
    fbBuilder.addFloat64(2, Y);
    return fbBuilder.offset;
  }
  int addZ(double? Z) {
    fbBuilder.addFloat64(3, Z);
    return fbBuilder.offset;
  }
  int addXDot(double? X_DOT) {
    fbBuilder.addFloat64(4, X_DOT);
    return fbBuilder.offset;
  }
  int addYDot(double? Y_DOT) {
    fbBuilder.addFloat64(5, Y_DOT);
    return fbBuilder.offset;
  }
  int addZDot(double? Z_DOT) {
    fbBuilder.addFloat64(6, Z_DOT);
    return fbBuilder.offset;
  }
  int addXDdot(double? X_DDOT) {
    fbBuilder.addFloat64(7, X_DDOT);
    return fbBuilder.offset;
  }
  int addYDdot(double? Y_DDOT) {
    fbBuilder.addFloat64(8, Y_DDOT);
    return fbBuilder.offset;
  }
  int addZDdot(double? Z_DDOT) {
    fbBuilder.addFloat64(9, Z_DDOT);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EphemerisDataLineObjectBuilder extends fb.ObjectBuilder {
  final String? _EPOCH;
  final double? _X;
  final double? _Y;
  final double? _Z;
  final double? _X_DOT;
  final double? _Y_DOT;
  final double? _Z_DOT;
  final double? _X_DDOT;
  final double? _Y_DDOT;
  final double? _Z_DDOT;

  EphemerisDataLineObjectBuilder({
    String? EPOCH,
    double? X,
    double? Y,
    double? Z,
    double? X_DOT,
    double? Y_DOT,
    double? Z_DOT,
    double? X_DDOT,
    double? Y_DDOT,
    double? Z_DDOT,
  })
      : _EPOCH = EPOCH,
        _X = X,
        _Y = Y,
        _Z = Z,
        _X_DOT = X_DOT,
        _Y_DOT = Y_DOT,
        _Z_DOT = Z_DOT,
        _X_DDOT = X_DDOT,
        _Y_DDOT = Y_DDOT,
        _Z_DDOT = Z_DDOT;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? EPOCHOffset = _EPOCH == null ? null
        : fbBuilder.writeString(_EPOCH!);
    fbBuilder.startTable(10);
    fbBuilder.addOffset(0, EPOCHOffset);
    fbBuilder.addFloat64(1, _X);
    fbBuilder.addFloat64(2, _Y);
    fbBuilder.addFloat64(3, _Z);
    fbBuilder.addFloat64(4, _X_DOT);
    fbBuilder.addFloat64(5, _Y_DOT);
    fbBuilder.addFloat64(6, _Z_DOT);
    fbBuilder.addFloat64(7, _X_DDOT);
    fbBuilder.addFloat64(8, _Y_DDOT);
    fbBuilder.addFloat64(9, _Z_DDOT);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Position/Velocity Covariance Matrix Line
class CovarianceMatrixLine {
  CovarianceMatrixLine._(this._bc, this._bcOffset);
  factory CovarianceMatrixLine(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CovarianceMatrixLine> reader = _CovarianceMatrixLineReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Epoch
  String? get EPOCH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Reference frame for the covariance matrix
  RefFrame get COV_REFERENCE_FRAME => RefFrame.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 6, 0));
  ///  Covariance matrix [1,1] km**2
  double get CX_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  Covariance matrix [2,1] km**2
  double get CY_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Covariance matrix [2,2] km**2
  double get CY_Y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Covariance matrix [3,1] km**2
  double get CZ_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Covariance matrix [3,2] km**2
  double get CZ_Y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Covariance matrix [3,3] km**2
  double get CZ_Z => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Covariance matrix [4,1] km**2/s
  double get CX_DOT_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Covariance matrix [4,2] km**2/s
  double get CX_DOT_Y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Covariance matrix [4,3] km**2/s
  double get CX_DOT_Z => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Covariance matrix [4,4] km**2/s**2
  double get CX_DOT_X_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Covariance matrix [5,1] km**2/s
  double get CY_DOT_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Covariance matrix [5,2] km**2/s
  double get CY_DOT_Y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Covariance matrix [5,3] km**2/s
  double get CY_DOT_Z => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Covariance matrix [5,4] km**2/s**2
  double get CY_DOT_X_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Covariance matrix [5,5] km**2/s**2
  double get CY_DOT_Y_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Covariance matrix [6,1] km**2/s
  double get CZ_DOT_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Covariance matrix [6,2] km**2/s
  double get CZ_DOT_Y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Covariance matrix [6,3] km**2/s
  double get CZ_DOT_Z => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Covariance matrix [6,4] km**2/s**2
  double get CZ_DOT_X_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  Covariance matrix [6,5] km**2/s**2
  double get CZ_DOT_Y_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  Covariance matrix [6,6] km**2/s**2
  double get CZ_DOT_Z_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);

  @override
  String toString() {
    return 'CovarianceMatrixLine{EPOCH: ${EPOCH}, COV_REFERENCE_FRAME: ${COV_REFERENCE_FRAME}, CX_X: ${CX_X}, CY_X: ${CY_X}, CY_Y: ${CY_Y}, CZ_X: ${CZ_X}, CZ_Y: ${CZ_Y}, CZ_Z: ${CZ_Z}, CX_DOT_X: ${CX_DOT_X}, CX_DOT_Y: ${CX_DOT_Y}, CX_DOT_Z: ${CX_DOT_Z}, CX_DOT_X_DOT: ${CX_DOT_X_DOT}, CY_DOT_X: ${CY_DOT_X}, CY_DOT_Y: ${CY_DOT_Y}, CY_DOT_Z: ${CY_DOT_Z}, CY_DOT_X_DOT: ${CY_DOT_X_DOT}, CY_DOT_Y_DOT: ${CY_DOT_Y_DOT}, CZ_DOT_X: ${CZ_DOT_X}, CZ_DOT_Y: ${CZ_DOT_Y}, CZ_DOT_Z: ${CZ_DOT_Z}, CZ_DOT_X_DOT: ${CZ_DOT_X_DOT}, CZ_DOT_Y_DOT: ${CZ_DOT_Y_DOT}, CZ_DOT_Z_DOT: ${CZ_DOT_Z_DOT}}';
  }
}

class _CovarianceMatrixLineReader extends fb.TableReader<CovarianceMatrixLine> {
  const _CovarianceMatrixLineReader();

  @override
  CovarianceMatrixLine createObject(fb.BufferContext bc, int offset) => 
    CovarianceMatrixLine._(bc, offset);
}

class CovarianceMatrixLineBuilder {
  CovarianceMatrixLineBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(23);
  }

  int addEpochOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addCovReferenceFrame(RefFrame? COV_REFERENCE_FRAME) {
    fbBuilder.addInt8(1, COV_REFERENCE_FRAME?.value);
    return fbBuilder.offset;
  }
  int addCxX(double? CX_X) {
    fbBuilder.addFloat64(2, CX_X);
    return fbBuilder.offset;
  }
  int addCyX(double? CY_X) {
    fbBuilder.addFloat64(3, CY_X);
    return fbBuilder.offset;
  }
  int addCyY(double? CY_Y) {
    fbBuilder.addFloat64(4, CY_Y);
    return fbBuilder.offset;
  }
  int addCzX(double? CZ_X) {
    fbBuilder.addFloat64(5, CZ_X);
    return fbBuilder.offset;
  }
  int addCzY(double? CZ_Y) {
    fbBuilder.addFloat64(6, CZ_Y);
    return fbBuilder.offset;
  }
  int addCzZ(double? CZ_Z) {
    fbBuilder.addFloat64(7, CZ_Z);
    return fbBuilder.offset;
  }
  int addCxDotX(double? CX_DOT_X) {
    fbBuilder.addFloat64(8, CX_DOT_X);
    return fbBuilder.offset;
  }
  int addCxDotY(double? CX_DOT_Y) {
    fbBuilder.addFloat64(9, CX_DOT_Y);
    return fbBuilder.offset;
  }
  int addCxDotZ(double? CX_DOT_Z) {
    fbBuilder.addFloat64(10, CX_DOT_Z);
    return fbBuilder.offset;
  }
  int addCxDotXDot(double? CX_DOT_X_DOT) {
    fbBuilder.addFloat64(11, CX_DOT_X_DOT);
    return fbBuilder.offset;
  }
  int addCyDotX(double? CY_DOT_X) {
    fbBuilder.addFloat64(12, CY_DOT_X);
    return fbBuilder.offset;
  }
  int addCyDotY(double? CY_DOT_Y) {
    fbBuilder.addFloat64(13, CY_DOT_Y);
    return fbBuilder.offset;
  }
  int addCyDotZ(double? CY_DOT_Z) {
    fbBuilder.addFloat64(14, CY_DOT_Z);
    return fbBuilder.offset;
  }
  int addCyDotXDot(double? CY_DOT_X_DOT) {
    fbBuilder.addFloat64(15, CY_DOT_X_DOT);
    return fbBuilder.offset;
  }
  int addCyDotYDot(double? CY_DOT_Y_DOT) {
    fbBuilder.addFloat64(16, CY_DOT_Y_DOT);
    return fbBuilder.offset;
  }
  int addCzDotX(double? CZ_DOT_X) {
    fbBuilder.addFloat64(17, CZ_DOT_X);
    return fbBuilder.offset;
  }
  int addCzDotY(double? CZ_DOT_Y) {
    fbBuilder.addFloat64(18, CZ_DOT_Y);
    return fbBuilder.offset;
  }
  int addCzDotZ(double? CZ_DOT_Z) {
    fbBuilder.addFloat64(19, CZ_DOT_Z);
    return fbBuilder.offset;
  }
  int addCzDotXDot(double? CZ_DOT_X_DOT) {
    fbBuilder.addFloat64(20, CZ_DOT_X_DOT);
    return fbBuilder.offset;
  }
  int addCzDotYDot(double? CZ_DOT_Y_DOT) {
    fbBuilder.addFloat64(21, CZ_DOT_Y_DOT);
    return fbBuilder.offset;
  }
  int addCzDotZDot(double? CZ_DOT_Z_DOT) {
    fbBuilder.addFloat64(22, CZ_DOT_Z_DOT);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CovarianceMatrixLineObjectBuilder extends fb.ObjectBuilder {
  final String? _EPOCH;
  final RefFrame? _COV_REFERENCE_FRAME;
  final double? _CX_X;
  final double? _CY_X;
  final double? _CY_Y;
  final double? _CZ_X;
  final double? _CZ_Y;
  final double? _CZ_Z;
  final double? _CX_DOT_X;
  final double? _CX_DOT_Y;
  final double? _CX_DOT_Z;
  final double? _CX_DOT_X_DOT;
  final double? _CY_DOT_X;
  final double? _CY_DOT_Y;
  final double? _CY_DOT_Z;
  final double? _CY_DOT_X_DOT;
  final double? _CY_DOT_Y_DOT;
  final double? _CZ_DOT_X;
  final double? _CZ_DOT_Y;
  final double? _CZ_DOT_Z;
  final double? _CZ_DOT_X_DOT;
  final double? _CZ_DOT_Y_DOT;
  final double? _CZ_DOT_Z_DOT;

  CovarianceMatrixLineObjectBuilder({
    String? EPOCH,
    RefFrame? COV_REFERENCE_FRAME,
    double? CX_X,
    double? CY_X,
    double? CY_Y,
    double? CZ_X,
    double? CZ_Y,
    double? CZ_Z,
    double? CX_DOT_X,
    double? CX_DOT_Y,
    double? CX_DOT_Z,
    double? CX_DOT_X_DOT,
    double? CY_DOT_X,
    double? CY_DOT_Y,
    double? CY_DOT_Z,
    double? CY_DOT_X_DOT,
    double? CY_DOT_Y_DOT,
    double? CZ_DOT_X,
    double? CZ_DOT_Y,
    double? CZ_DOT_Z,
    double? CZ_DOT_X_DOT,
    double? CZ_DOT_Y_DOT,
    double? CZ_DOT_Z_DOT,
  })
      : _EPOCH = EPOCH,
        _COV_REFERENCE_FRAME = COV_REFERENCE_FRAME,
        _CX_X = CX_X,
        _CY_X = CY_X,
        _CY_Y = CY_Y,
        _CZ_X = CZ_X,
        _CZ_Y = CZ_Y,
        _CZ_Z = CZ_Z,
        _CX_DOT_X = CX_DOT_X,
        _CX_DOT_Y = CX_DOT_Y,
        _CX_DOT_Z = CX_DOT_Z,
        _CX_DOT_X_DOT = CX_DOT_X_DOT,
        _CY_DOT_X = CY_DOT_X,
        _CY_DOT_Y = CY_DOT_Y,
        _CY_DOT_Z = CY_DOT_Z,
        _CY_DOT_X_DOT = CY_DOT_X_DOT,
        _CY_DOT_Y_DOT = CY_DOT_Y_DOT,
        _CZ_DOT_X = CZ_DOT_X,
        _CZ_DOT_Y = CZ_DOT_Y,
        _CZ_DOT_Z = CZ_DOT_Z,
        _CZ_DOT_X_DOT = CZ_DOT_X_DOT,
        _CZ_DOT_Y_DOT = CZ_DOT_Y_DOT,
        _CZ_DOT_Z_DOT = CZ_DOT_Z_DOT;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? EPOCHOffset = _EPOCH == null ? null
        : fbBuilder.writeString(_EPOCH!);
    fbBuilder.startTable(23);
    fbBuilder.addOffset(0, EPOCHOffset);
    fbBuilder.addInt8(1, _COV_REFERENCE_FRAME?.value);
    fbBuilder.addFloat64(2, _CX_X);
    fbBuilder.addFloat64(3, _CY_X);
    fbBuilder.addFloat64(4, _CY_Y);
    fbBuilder.addFloat64(5, _CZ_X);
    fbBuilder.addFloat64(6, _CZ_Y);
    fbBuilder.addFloat64(7, _CZ_Z);
    fbBuilder.addFloat64(8, _CX_DOT_X);
    fbBuilder.addFloat64(9, _CX_DOT_Y);
    fbBuilder.addFloat64(10, _CX_DOT_Z);
    fbBuilder.addFloat64(11, _CX_DOT_X_DOT);
    fbBuilder.addFloat64(12, _CY_DOT_X);
    fbBuilder.addFloat64(13, _CY_DOT_Y);
    fbBuilder.addFloat64(14, _CY_DOT_Z);
    fbBuilder.addFloat64(15, _CY_DOT_X_DOT);
    fbBuilder.addFloat64(16, _CY_DOT_Y_DOT);
    fbBuilder.addFloat64(17, _CZ_DOT_X);
    fbBuilder.addFloat64(18, _CZ_DOT_Y);
    fbBuilder.addFloat64(19, _CZ_DOT_Z);
    fbBuilder.addFloat64(20, _CZ_DOT_X_DOT);
    fbBuilder.addFloat64(21, _CZ_DOT_Y_DOT);
    fbBuilder.addFloat64(22, _CZ_DOT_Z_DOT);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  OEM Ephemeris Data Block
class EphemerisDataBlock {
  EphemerisDataBlock._(this._bc, this._bcOffset);
  factory EphemerisDataBlock(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EphemerisDataBlock> reader = _EphemerisDataBlockReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Plain-Text Comment
  String? get COMMENT => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Satellite name for the first object
  CAT? get OBJECT => CAT.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ///  Origin of reference frame (EARTH, MARS, MOON, etc.)
  String? get CENTER_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Name of the reference frame (TEME, EME2000, etc.)
  RefFrame get REFERENCE_FRAME => RefFrame.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 10, 0));
  ///  Epoch of reference frame, if not intrinsic to the definition of the reference frame
  String? get REFERENCE_FRAME_EPOCH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Time system used for the orbit state and covariance matrix. (UTC)
  TimeSystem get TIME_SYSTEM => TimeSystem.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 14, 0));
  ///  Start of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)
  String? get START_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Optional start USEABLE time span covered by ephemeris data (ISO 8601)
  String? get USEABLE_START_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Optional end of USEABLE time span covered by ephemeris data (ISO 8601)
  String? get USEABLE_STOP_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  End of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)
  String? get STOP_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Step size in seconds separating the epochs of each ephemeris data row
  double get STEP_SIZE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Recommended interpolation method for ephemeris data (Hermite, Linear, Lagrange, etc.)
  String? get INTERPOLATION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Recommended interpolation degree for ephemeris data
  int get INTERPOLATION_DEGREE => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 28, 0);
  ///  Array of ephemeris data lines
  List<EphemerisDataLine>? get EPHEMERIS_DATA_LINES => const fb.ListReader<EphemerisDataLine>(EphemerisDataLine.reader).vTableGetNullable(_bc, _bcOffset, 30);
  ///  Array of covariance matrix lines
  List<CovarianceMatrixLine>? get COVARIANCE_MATRIX_LINES => const fb.ListReader<CovarianceMatrixLine>(CovarianceMatrixLine.reader).vTableGetNullable(_bc, _bcOffset, 32);

  @override
  String toString() {
    return 'EphemerisDataBlock{COMMENT: ${COMMENT}, OBJECT: ${OBJECT}, CENTER_NAME: ${CENTER_NAME}, REFERENCE_FRAME: ${REFERENCE_FRAME}, REFERENCE_FRAME_EPOCH: ${REFERENCE_FRAME_EPOCH}, TIME_SYSTEM: ${TIME_SYSTEM}, START_TIME: ${START_TIME}, USEABLE_START_TIME: ${USEABLE_START_TIME}, USEABLE_STOP_TIME: ${USEABLE_STOP_TIME}, STOP_TIME: ${STOP_TIME}, STEP_SIZE: ${STEP_SIZE}, INTERPOLATION: ${INTERPOLATION}, INTERPOLATION_DEGREE: ${INTERPOLATION_DEGREE}, EPHEMERIS_DATA_LINES: ${EPHEMERIS_DATA_LINES}, COVARIANCE_MATRIX_LINES: ${COVARIANCE_MATRIX_LINES}}';
  }
}

class _EphemerisDataBlockReader extends fb.TableReader<EphemerisDataBlock> {
  const _EphemerisDataBlockReader();

  @override
  EphemerisDataBlock createObject(fb.BufferContext bc, int offset) => 
    EphemerisDataBlock._(bc, offset);
}

class EphemerisDataBlockBuilder {
  EphemerisDataBlockBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(15);
  }

  int addCommentOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addObjectOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCenterNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReferenceFrame(RefFrame? REFERENCE_FRAME) {
    fbBuilder.addInt8(3, REFERENCE_FRAME?.value);
    return fbBuilder.offset;
  }
  int addReferenceFrameEpochOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTimeSystem(TimeSystem? TIME_SYSTEM) {
    fbBuilder.addInt8(5, TIME_SYSTEM?.value);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addUseableStartTimeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addUseableStopTimeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addStopTimeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addStepSize(double? STEP_SIZE) {
    fbBuilder.addFloat64(10, STEP_SIZE);
    return fbBuilder.offset;
  }
  int addInterpolationOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addInterpolationDegree(int? INTERPOLATION_DEGREE) {
    fbBuilder.addUint32(12, INTERPOLATION_DEGREE);
    return fbBuilder.offset;
  }
  int addEphemerisDataLinesOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addCovarianceMatrixLinesOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EphemerisDataBlockObjectBuilder extends fb.ObjectBuilder {
  final String? _COMMENT;
  final CATObjectBuilder? _OBJECT;
  final String? _CENTER_NAME;
  final RefFrame? _REFERENCE_FRAME;
  final String? _REFERENCE_FRAME_EPOCH;
  final TimeSystem? _TIME_SYSTEM;
  final String? _START_TIME;
  final String? _USEABLE_START_TIME;
  final String? _USEABLE_STOP_TIME;
  final String? _STOP_TIME;
  final double? _STEP_SIZE;
  final String? _INTERPOLATION;
  final int? _INTERPOLATION_DEGREE;
  final List<EphemerisDataLineObjectBuilder>? _EPHEMERIS_DATA_LINES;
  final List<CovarianceMatrixLineObjectBuilder>? _COVARIANCE_MATRIX_LINES;

  EphemerisDataBlockObjectBuilder({
    String? COMMENT,
    CATObjectBuilder? OBJECT,
    String? CENTER_NAME,
    RefFrame? REFERENCE_FRAME,
    String? REFERENCE_FRAME_EPOCH,
    TimeSystem? TIME_SYSTEM,
    String? START_TIME,
    String? USEABLE_START_TIME,
    String? USEABLE_STOP_TIME,
    String? STOP_TIME,
    double? STEP_SIZE,
    String? INTERPOLATION,
    int? INTERPOLATION_DEGREE,
    List<EphemerisDataLineObjectBuilder>? EPHEMERIS_DATA_LINES,
    List<CovarianceMatrixLineObjectBuilder>? COVARIANCE_MATRIX_LINES,
  })
      : _COMMENT = COMMENT,
        _OBJECT = OBJECT,
        _CENTER_NAME = CENTER_NAME,
        _REFERENCE_FRAME = REFERENCE_FRAME,
        _REFERENCE_FRAME_EPOCH = REFERENCE_FRAME_EPOCH,
        _TIME_SYSTEM = TIME_SYSTEM,
        _START_TIME = START_TIME,
        _USEABLE_START_TIME = USEABLE_START_TIME,
        _USEABLE_STOP_TIME = USEABLE_STOP_TIME,
        _STOP_TIME = STOP_TIME,
        _STEP_SIZE = STEP_SIZE,
        _INTERPOLATION = INTERPOLATION,
        _INTERPOLATION_DEGREE = INTERPOLATION_DEGREE,
        _EPHEMERIS_DATA_LINES = EPHEMERIS_DATA_LINES,
        _COVARIANCE_MATRIX_LINES = COVARIANCE_MATRIX_LINES;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? COMMENTOffset = _COMMENT == null ? null
        : fbBuilder.writeString(_COMMENT!);
    final int? OBJECTOffset = _OBJECT?.getOrCreateOffset(fbBuilder);
    final int? CENTER_NAMEOffset = _CENTER_NAME == null ? null
        : fbBuilder.writeString(_CENTER_NAME!);
    final int? REFERENCE_FRAME_EPOCHOffset = _REFERENCE_FRAME_EPOCH == null ? null
        : fbBuilder.writeString(_REFERENCE_FRAME_EPOCH!);
    final int? START_TIMEOffset = _START_TIME == null ? null
        : fbBuilder.writeString(_START_TIME!);
    final int? USEABLE_START_TIMEOffset = _USEABLE_START_TIME == null ? null
        : fbBuilder.writeString(_USEABLE_START_TIME!);
    final int? USEABLE_STOP_TIMEOffset = _USEABLE_STOP_TIME == null ? null
        : fbBuilder.writeString(_USEABLE_STOP_TIME!);
    final int? STOP_TIMEOffset = _STOP_TIME == null ? null
        : fbBuilder.writeString(_STOP_TIME!);
    final int? INTERPOLATIONOffset = _INTERPOLATION == null ? null
        : fbBuilder.writeString(_INTERPOLATION!);
    final int? EPHEMERIS_DATA_LINESOffset = _EPHEMERIS_DATA_LINES == null ? null
        : fbBuilder.writeList(_EPHEMERIS_DATA_LINES!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? COVARIANCE_MATRIX_LINESOffset = _COVARIANCE_MATRIX_LINES == null ? null
        : fbBuilder.writeList(_COVARIANCE_MATRIX_LINES!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(15);
    fbBuilder.addOffset(0, COMMENTOffset);
    fbBuilder.addOffset(1, OBJECTOffset);
    fbBuilder.addOffset(2, CENTER_NAMEOffset);
    fbBuilder.addInt8(3, _REFERENCE_FRAME?.value);
    fbBuilder.addOffset(4, REFERENCE_FRAME_EPOCHOffset);
    fbBuilder.addInt8(5, _TIME_SYSTEM?.value);
    fbBuilder.addOffset(6, START_TIMEOffset);
    fbBuilder.addOffset(7, USEABLE_START_TIMEOffset);
    fbBuilder.addOffset(8, USEABLE_STOP_TIMEOffset);
    fbBuilder.addOffset(9, STOP_TIMEOffset);
    fbBuilder.addFloat64(10, _STEP_SIZE);
    fbBuilder.addOffset(11, INTERPOLATIONOffset);
    fbBuilder.addUint32(12, _INTERPOLATION_DEGREE);
    fbBuilder.addOffset(13, EPHEMERIS_DATA_LINESOffset);
    fbBuilder.addOffset(14, COVARIANCE_MATRIX_LINESOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Orbit Ephemeris Message
class OEM {
  OEM._(this._bc, this._bcOffset);
  factory OEM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OEM> reader = _OEMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  OEM Header
  ///  Classification marking of the data in IC/CAPCO Portion-marked format.
  String? get CLASSIFICATION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  OEM Version
  double get CCSDS_OEM_VERS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  Creation Date
  String? get CREATION_DATE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Originator
  String? get ORIGINATOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Array of ephemeris data blocks
  List<EphemerisDataBlock>? get EPHEMERIS_DATA_BLOCK => const fb.ListReader<EphemerisDataBlock>(EphemerisDataBlock.reader).vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'OEM{CLASSIFICATION: ${CLASSIFICATION}, CCSDS_OEM_VERS: ${CCSDS_OEM_VERS}, CREATION_DATE: ${CREATION_DATE}, ORIGINATOR: ${ORIGINATOR}, EPHEMERIS_DATA_BLOCK: ${EPHEMERIS_DATA_BLOCK}}';
  }
}

class _OEMReader extends fb.TableReader<OEM> {
  const _OEMReader();

  @override
  OEM createObject(fb.BufferContext bc, int offset) => 
    OEM._(bc, offset);
}

class OEMBuilder {
  OEMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addClassificationOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addCcsdsOemVers(double? CCSDS_OEM_VERS) {
    fbBuilder.addFloat64(1, CCSDS_OEM_VERS);
    return fbBuilder.offset;
  }
  int addCreationDateOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addOriginatorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addEphemerisDataBlockOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OEMObjectBuilder extends fb.ObjectBuilder {
  final String? _CLASSIFICATION;
  final double? _CCSDS_OEM_VERS;
  final String? _CREATION_DATE;
  final String? _ORIGINATOR;
  final List<EphemerisDataBlockObjectBuilder>? _EPHEMERIS_DATA_BLOCK;

  OEMObjectBuilder({
    String? CLASSIFICATION,
    double? CCSDS_OEM_VERS,
    String? CREATION_DATE,
    String? ORIGINATOR,
    List<EphemerisDataBlockObjectBuilder>? EPHEMERIS_DATA_BLOCK,
  })
      : _CLASSIFICATION = CLASSIFICATION,
        _CCSDS_OEM_VERS = CCSDS_OEM_VERS,
        _CREATION_DATE = CREATION_DATE,
        _ORIGINATOR = ORIGINATOR,
        _EPHEMERIS_DATA_BLOCK = EPHEMERIS_DATA_BLOCK;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? CLASSIFICATIONOffset = _CLASSIFICATION == null ? null
        : fbBuilder.writeString(_CLASSIFICATION!);
    final int? CREATION_DATEOffset = _CREATION_DATE == null ? null
        : fbBuilder.writeString(_CREATION_DATE!);
    final int? ORIGINATOROffset = _ORIGINATOR == null ? null
        : fbBuilder.writeString(_ORIGINATOR!);
    final int? EPHEMERIS_DATA_BLOCKOffset = _EPHEMERIS_DATA_BLOCK == null ? null
        : fbBuilder.writeList(_EPHEMERIS_DATA_BLOCK!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, CLASSIFICATIONOffset);
    fbBuilder.addFloat64(1, _CCSDS_OEM_VERS);
    fbBuilder.addOffset(2, CREATION_DATEOffset);
    fbBuilder.addOffset(3, ORIGINATOROffset);
    fbBuilder.addOffset(4, EPHEMERIS_DATA_BLOCKOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Collection of OEM messages
class OEMCOLLECTION {
  OEMCOLLECTION._(this._bc, this._bcOffset);
  factory OEMCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OEMCOLLECTION> reader = _OEMCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<OEM>? get RECORDS => const fb.ListReader<OEM>(OEM.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'OEMCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _OEMCOLLECTIONReader extends fb.TableReader<OEMCOLLECTION> {
  const _OEMCOLLECTIONReader();

  @override
  OEMCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    OEMCOLLECTION._(bc, offset);
}

class OEMCOLLECTIONBuilder {
  OEMCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OEMCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<OEMObjectBuilder>? _RECORDS;

  OEMCOLLECTIONObjectBuilder({
    List<OEMObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
