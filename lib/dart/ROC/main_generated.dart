// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  Enumeration of Engine Types
class ENGINE_TYPE {
  final int value;
  const ENGINE_TYPE._(this.value);

  factory ENGINE_TYPE.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ENGINE_TYPE');
    }
    return result;
  }

  static ENGINE_TYPE? _createOrNull(int? value) => 
      value == null ? null : ENGINE_TYPE.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static bool containsValue(int value) => values.containsKey(value);

  static const ENGINE_TYPE LIQUID = ENGINE_TYPE._(0);
  static const ENGINE_TYPE SOLID = ENGINE_TYPE._(1);
  static const ENGINE_TYPE HYBRID = ENGINE_TYPE._(2);
  static const ENGINE_TYPE ION = ENGINE_TYPE._(3);
  static const ENGINE_TYPE NUCLEAR_THERMAL = ENGINE_TYPE._(4);
  static const ENGINE_TYPE OTHER = ENGINE_TYPE._(5);
  static const Map<int, ENGINE_TYPE> values = {
    0: LIQUID,
    1: SOLID,
    2: HYBRID,
    3: ION,
    4: NUCLEAR_THERMAL,
    5: OTHER};

  static const fb.Reader<ENGINE_TYPE> reader = _ENGINE_TYPEReader();

  @override
  String toString() {
    return 'ENGINE_TYPE{value: $value}';
  }
}

class _ENGINE_TYPEReader extends fb.Reader<ENGINE_TYPE> {
  const _ENGINE_TYPEReader();

  @override
  int get size => 1;

  @override
  ENGINE_TYPE read(fb.BufferContext bc, int offset) =>
      ENGINE_TYPE.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Rocket Configuration
class ROC {
  ROC._(this._bc, this._bcOffset);
  factory ROC(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ROC> reader = _ROCReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Rocket Name
  String? get NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Rocket Family
  String? get FAMILY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Rocket Variant
  String? get VARIANT => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Stages in the Rocket
  List<STAGE>? get STAGES => const fb.ListReader<STAGE>(STAGE.reader).vTableGetNullable(_bc, _bcOffset, 10);
  ///  Sustainers in the Rocket
  List<SUSTAINER>? get SUSTAINERS => const fb.ListReader<SUSTAINER>(SUSTAINER.reader).vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'ROC{NAME: ${NAME}, FAMILY: ${FAMILY}, VARIANT: ${VARIANT}, STAGES: ${STAGES}, SUSTAINERS: ${SUSTAINERS}}';
  }
}

class _ROCReader extends fb.TableReader<ROC> {
  const _ROCReader();

  @override
  ROC createObject(fb.BufferContext bc, int offset) => 
    ROC._(bc, offset);
}

class ROCBuilder {
  ROCBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFamilyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addVariantOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addStagesOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSustainersOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ROCObjectBuilder extends fb.ObjectBuilder {
  final String? _NAME;
  final String? _FAMILY;
  final String? _VARIANT;
  final List<STAGEObjectBuilder>? _STAGES;
  final List<SUSTAINERObjectBuilder>? _SUSTAINERS;

  ROCObjectBuilder({
    String? NAME,
    String? FAMILY,
    String? VARIANT,
    List<STAGEObjectBuilder>? STAGES,
    List<SUSTAINERObjectBuilder>? SUSTAINERS,
  })
      : _NAME = NAME,
        _FAMILY = FAMILY,
        _VARIANT = VARIANT,
        _STAGES = STAGES,
        _SUSTAINERS = SUSTAINERS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? NAMEOffset = _NAME == null ? null
        : fbBuilder.writeString(_NAME!);
    final int? FAMILYOffset = _FAMILY == null ? null
        : fbBuilder.writeString(_FAMILY!);
    final int? VARIANTOffset = _VARIANT == null ? null
        : fbBuilder.writeString(_VARIANT!);
    final int? STAGESOffset = _STAGES == null ? null
        : fbBuilder.writeList(_STAGES!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? SUSTAINERSOffset = _SUSTAINERS == null ? null
        : fbBuilder.writeList(_SUSTAINERS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, NAMEOffset);
    fbBuilder.addOffset(1, FAMILYOffset);
    fbBuilder.addOffset(2, VARIANTOffset);
    fbBuilder.addOffset(3, STAGESOffset);
    fbBuilder.addOffset(4, SUSTAINERSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Stage Details
class STAGE {
  STAGE._(this._bc, this._bcOffset);
  factory STAGE(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<STAGE> reader = _STAGEReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Stage Number
  int get STAGE_NUMBER => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  ///  Engines Used in This Stage
  List<ENGINE>? get ENGINES => const fb.ListReader<ENGINE>(ENGINE.reader).vTableGetNullable(_bc, _bcOffset, 6);
  ///  Fuel Type Used in This Stage
  String? get FUEL_TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Thrust Produced by This Stage (in Newtons)
  double get THRUST => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Duration of the Burn (in Seconds)
  double get BURN_DURATION => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);

  @override
  String toString() {
    return 'STAGE{STAGE_NUMBER: ${STAGE_NUMBER}, ENGINES: ${ENGINES}, FUEL_TYPE: ${FUEL_TYPE}, THRUST: ${THRUST}, BURN_DURATION: ${BURN_DURATION}}';
  }
}

class _STAGEReader extends fb.TableReader<STAGE> {
  const _STAGEReader();

  @override
  STAGE createObject(fb.BufferContext bc, int offset) => 
    STAGE._(bc, offset);
}

class STAGEBuilder {
  STAGEBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addStageNumber(int? STAGE_NUMBER) {
    fbBuilder.addInt32(0, STAGE_NUMBER);
    return fbBuilder.offset;
  }
  int addEnginesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFuelTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addThrust(double? THRUST) {
    fbBuilder.addFloat64(3, THRUST);
    return fbBuilder.offset;
  }
  int addBurnDuration(double? BURN_DURATION) {
    fbBuilder.addFloat64(4, BURN_DURATION);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class STAGEObjectBuilder extends fb.ObjectBuilder {
  final int? _STAGE_NUMBER;
  final List<ENGINEObjectBuilder>? _ENGINES;
  final String? _FUEL_TYPE;
  final double? _THRUST;
  final double? _BURN_DURATION;

  STAGEObjectBuilder({
    int? STAGE_NUMBER,
    List<ENGINEObjectBuilder>? ENGINES,
    String? FUEL_TYPE,
    double? THRUST,
    double? BURN_DURATION,
  })
      : _STAGE_NUMBER = STAGE_NUMBER,
        _ENGINES = ENGINES,
        _FUEL_TYPE = FUEL_TYPE,
        _THRUST = THRUST,
        _BURN_DURATION = BURN_DURATION;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ENGINESOffset = _ENGINES == null ? null
        : fbBuilder.writeList(_ENGINES!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? FUEL_TYPEOffset = _FUEL_TYPE == null ? null
        : fbBuilder.writeString(_FUEL_TYPE!);
    fbBuilder.startTable(5);
    fbBuilder.addInt32(0, _STAGE_NUMBER);
    fbBuilder.addOffset(1, ENGINESOffset);
    fbBuilder.addOffset(2, FUEL_TYPEOffset);
    fbBuilder.addFloat64(3, _THRUST);
    fbBuilder.addFloat64(4, _BURN_DURATION);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Sustainer Details
class SUSTAINER {
  SUSTAINER._(this._bc, this._bcOffset);
  factory SUSTAINER(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SUSTAINER> reader = _SUSTAINERReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Name of the Sustainer
  String? get SUSTAINER_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Thrust Produced by the Sustainer (in Newtons)
  double get THRUST => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  Duration of the Burn (in Seconds)
  double get BURN_DURATION => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);

  @override
  String toString() {
    return 'SUSTAINER{SUSTAINER_NAME: ${SUSTAINER_NAME}, THRUST: ${THRUST}, BURN_DURATION: ${BURN_DURATION}}';
  }
}

class _SUSTAINERReader extends fb.TableReader<SUSTAINER> {
  const _SUSTAINERReader();

  @override
  SUSTAINER createObject(fb.BufferContext bc, int offset) => 
    SUSTAINER._(bc, offset);
}

class SUSTAINERBuilder {
  SUSTAINERBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addSustainerNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addThrust(double? THRUST) {
    fbBuilder.addFloat64(1, THRUST);
    return fbBuilder.offset;
  }
  int addBurnDuration(double? BURN_DURATION) {
    fbBuilder.addFloat64(2, BURN_DURATION);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SUSTAINERObjectBuilder extends fb.ObjectBuilder {
  final String? _SUSTAINER_NAME;
  final double? _THRUST;
  final double? _BURN_DURATION;

  SUSTAINERObjectBuilder({
    String? SUSTAINER_NAME,
    double? THRUST,
    double? BURN_DURATION,
  })
      : _SUSTAINER_NAME = SUSTAINER_NAME,
        _THRUST = THRUST,
        _BURN_DURATION = BURN_DURATION;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? SUSTAINER_NAMEOffset = _SUSTAINER_NAME == null ? null
        : fbBuilder.writeString(_SUSTAINER_NAME!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, SUSTAINER_NAMEOffset);
    fbBuilder.addFloat64(1, _THRUST);
    fbBuilder.addFloat64(2, _BURN_DURATION);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Engine Details
class ENGINE {
  ENGINE._(this._bc, this._bcOffset);
  factory ENGINE(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ENGINE> reader = _ENGINEReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Engine Name
  String? get ENGINE_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Type of Engine
  ENGINE_TYPE get TYPE => ENGINE_TYPE.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 6, 0));
  ///  Thrust Produced by the Engine (in Newtons)
  double get THRUST => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);

  @override
  String toString() {
    return 'ENGINE{ENGINE_NAME: ${ENGINE_NAME}, TYPE: ${TYPE}, THRUST: ${THRUST}}';
  }
}

class _ENGINEReader extends fb.TableReader<ENGINE> {
  const _ENGINEReader();

  @override
  ENGINE createObject(fb.BufferContext bc, int offset) => 
    ENGINE._(bc, offset);
}

class ENGINEBuilder {
  ENGINEBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addEngineNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addType(ENGINE_TYPE? TYPE) {
    fbBuilder.addInt8(1, TYPE?.value);
    return fbBuilder.offset;
  }
  int addThrust(double? THRUST) {
    fbBuilder.addFloat64(2, THRUST);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ENGINEObjectBuilder extends fb.ObjectBuilder {
  final String? _ENGINE_NAME;
  final ENGINE_TYPE? _TYPE;
  final double? _THRUST;

  ENGINEObjectBuilder({
    String? ENGINE_NAME,
    ENGINE_TYPE? TYPE,
    double? THRUST,
  })
      : _ENGINE_NAME = ENGINE_NAME,
        _TYPE = TYPE,
        _THRUST = THRUST;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ENGINE_NAMEOffset = _ENGINE_NAME == null ? null
        : fbBuilder.writeString(_ENGINE_NAME!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, ENGINE_NAMEOffset);
    fbBuilder.addInt8(1, _TYPE?.value);
    fbBuilder.addFloat64(2, _THRUST);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Collection of Rocket Configurations
class ROCCOLLECTION {
  ROCCOLLECTION._(this._bc, this._bcOffset);
  factory ROCCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ROCCOLLECTION> reader = _ROCCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ROC>? get RECORDS => const fb.ListReader<ROC>(ROC.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ROCCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _ROCCOLLECTIONReader extends fb.TableReader<ROCCOLLECTION> {
  const _ROCCOLLECTIONReader();

  @override
  ROCCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    ROCCOLLECTION._(bc, offset);
}

class ROCCOLLECTIONBuilder {
  ROCCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ROCCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<ROCObjectBuilder>? _RECORDS;

  ROCCOLLECTIONObjectBuilder({
    List<ROCObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
