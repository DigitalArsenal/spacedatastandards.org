// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class ScoreType {
  final int value;
  const ScoreType._(this.value);

  factory ScoreType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum ScoreType');
    }
    return result;
  }

  static ScoreType? _createOrNull(int? value) => 
      value == null ? null : ScoreType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 0;
  static bool containsValue(int value) => values.containsKey(value);

  static const ScoreType OUTLIER = ScoreType._(0);
  static const Map<int, ScoreType> values = {
    0: OUTLIER};

  static const fb.Reader<ScoreType> reader = _ScoreTypeReader();

  @override
  String toString() {
    return 'ScoreType{value: $value}';
  }
}

class _ScoreTypeReader extends fb.Reader<ScoreType> {
  const _ScoreTypeReader();

  @override
  int get size => 1;

  @override
  ScoreType read(fb.BufferContext bc, int offset) =>
      ScoreType.fromValue(const fb.Int8Reader().read(bc, offset));
}

class Score {
  Score._(this._bc, this._bcOffset);
  factory Score(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Score> reader = _ScoreReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get NORAD_CAT_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ScoreType get TYPE => ScoreType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 6, 0));
  String? get TAG => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  double get SCORE => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 10, 0.0);

  @override
  String toString() {
    return 'Score{NORAD_CAT_ID: ${NORAD_CAT_ID}, TYPE: ${TYPE}, TAG: ${TAG}, SCORE: ${SCORE}}';
  }
}

class _ScoreReader extends fb.TableReader<Score> {
  const _ScoreReader();

  @override
  Score createObject(fb.BufferContext bc, int offset) => 
    Score._(bc, offset);
}

class ScoreBuilder {
  ScoreBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addNoradCatIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addType(ScoreType? TYPE) {
    fbBuilder.addInt8(1, TYPE?.value);
    return fbBuilder.offset;
  }
  int addTagOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addScore(double? SCORE) {
    fbBuilder.addFloat32(3, SCORE);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ScoreObjectBuilder extends fb.ObjectBuilder {
  final String? _NORAD_CAT_ID;
  final ScoreType? _TYPE;
  final String? _TAG;
  final double? _SCORE;

  ScoreObjectBuilder({
    String? NORAD_CAT_ID,
    ScoreType? TYPE,
    String? TAG,
    double? SCORE,
  })
      : _NORAD_CAT_ID = NORAD_CAT_ID,
        _TYPE = TYPE,
        _TAG = TAG,
        _SCORE = SCORE;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? NORAD_CAT_IDOffset = _NORAD_CAT_ID == null ? null
        : fbBuilder.writeString(_NORAD_CAT_ID!);
    final int? TAGOffset = _TAG == null ? null
        : fbBuilder.writeString(_TAG!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, NORAD_CAT_IDOffset);
    fbBuilder.addInt8(1, _TYPE?.value);
    fbBuilder.addOffset(2, TAGOffset);
    fbBuilder.addFloat32(3, _SCORE);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Hypothesis Message
class HYP {
  HYP._(this._bc, this._bcOffset);
  factory HYP(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HYP> reader = _HYPReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Space Objects Involved
  List<String>? get CAT_IDS => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  ///  Space Objects Involved
  List<String>? get SIT_IDS => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  ///  Name of the hypothesis
  String? get NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Category of the hypothesis
  String? get CATEGORY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Row indicators for the hypothesis matrix
  List<String>? get ROW_INDICATORS => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 12);
  ///  Column indicators for the hypothesis matrix
  List<String>? get COL_INDICATORS => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 14);
  ///  Matrix data as a boolean array in row major format; if overflow, adds additional rows
  List<bool>? get MATRIX => const fb.ListReader<bool>(fb.BoolReader()).vTableGetNullable(_bc, _bcOffset, 16);
  ///  Scores for objects
  List<Score>? get SCORE => const fb.ListReader<Score>(Score.reader).vTableGetNullable(_bc, _bcOffset, 18);
  ///  Analysis methodology used to form the hypothesis
  String? get ANALYSIS_METHOD => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  String? get EVENT_START_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  String? get EVENT_END_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);

  @override
  String toString() {
    return 'HYP{CAT_IDS: ${CAT_IDS}, SIT_IDS: ${SIT_IDS}, NAME: ${NAME}, CATEGORY: ${CATEGORY}, ROW_INDICATORS: ${ROW_INDICATORS}, COL_INDICATORS: ${COL_INDICATORS}, MATRIX: ${MATRIX}, SCORE: ${SCORE}, ANALYSIS_METHOD: ${ANALYSIS_METHOD}, EVENT_START_TIME: ${EVENT_START_TIME}, EVENT_END_TIME: ${EVENT_END_TIME}}';
  }
}

class _HYPReader extends fb.TableReader<HYP> {
  const _HYPReader();

  @override
  HYP createObject(fb.BufferContext bc, int offset) => 
    HYP._(bc, offset);
}

class HYPBuilder {
  HYPBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addCatIdsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSitIdsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCategoryOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addRowIndicatorsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addColIndicatorsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addMatrixOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addScoreOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addAnalysisMethodOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addEventStartTimeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addEventEndTimeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HYPObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _CAT_IDS;
  final List<String>? _SIT_IDS;
  final String? _NAME;
  final String? _CATEGORY;
  final List<String>? _ROW_INDICATORS;
  final List<String>? _COL_INDICATORS;
  final List<bool>? _MATRIX;
  final List<ScoreObjectBuilder>? _SCORE;
  final String? _ANALYSIS_METHOD;
  final String? _EVENT_START_TIME;
  final String? _EVENT_END_TIME;

  HYPObjectBuilder({
    List<String>? CAT_IDS,
    List<String>? SIT_IDS,
    String? NAME,
    String? CATEGORY,
    List<String>? ROW_INDICATORS,
    List<String>? COL_INDICATORS,
    List<bool>? MATRIX,
    List<ScoreObjectBuilder>? SCORE,
    String? ANALYSIS_METHOD,
    String? EVENT_START_TIME,
    String? EVENT_END_TIME,
  })
      : _CAT_IDS = CAT_IDS,
        _SIT_IDS = SIT_IDS,
        _NAME = NAME,
        _CATEGORY = CATEGORY,
        _ROW_INDICATORS = ROW_INDICATORS,
        _COL_INDICATORS = COL_INDICATORS,
        _MATRIX = MATRIX,
        _SCORE = SCORE,
        _ANALYSIS_METHOD = ANALYSIS_METHOD,
        _EVENT_START_TIME = EVENT_START_TIME,
        _EVENT_END_TIME = EVENT_END_TIME;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? CAT_IDSOffset = _CAT_IDS == null ? null
        : fbBuilder.writeList(_CAT_IDS!.map(fbBuilder.writeString).toList());
    final int? SIT_IDSOffset = _SIT_IDS == null ? null
        : fbBuilder.writeList(_SIT_IDS!.map(fbBuilder.writeString).toList());
    final int? NAMEOffset = _NAME == null ? null
        : fbBuilder.writeString(_NAME!);
    final int? CATEGORYOffset = _CATEGORY == null ? null
        : fbBuilder.writeString(_CATEGORY!);
    final int? ROW_INDICATORSOffset = _ROW_INDICATORS == null ? null
        : fbBuilder.writeList(_ROW_INDICATORS!.map(fbBuilder.writeString).toList());
    final int? COL_INDICATORSOffset = _COL_INDICATORS == null ? null
        : fbBuilder.writeList(_COL_INDICATORS!.map(fbBuilder.writeString).toList());
    final int? MATRIXOffset = _MATRIX == null ? null
        : fbBuilder.writeListBool(_MATRIX!);
    final int? SCOREOffset = _SCORE == null ? null
        : fbBuilder.writeList(_SCORE!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? ANALYSIS_METHODOffset = _ANALYSIS_METHOD == null ? null
        : fbBuilder.writeString(_ANALYSIS_METHOD!);
    final int? EVENT_START_TIMEOffset = _EVENT_START_TIME == null ? null
        : fbBuilder.writeString(_EVENT_START_TIME!);
    final int? EVENT_END_TIMEOffset = _EVENT_END_TIME == null ? null
        : fbBuilder.writeString(_EVENT_END_TIME!);
    fbBuilder.startTable(11);
    fbBuilder.addOffset(0, CAT_IDSOffset);
    fbBuilder.addOffset(1, SIT_IDSOffset);
    fbBuilder.addOffset(2, NAMEOffset);
    fbBuilder.addOffset(3, CATEGORYOffset);
    fbBuilder.addOffset(4, ROW_INDICATORSOffset);
    fbBuilder.addOffset(5, COL_INDICATORSOffset);
    fbBuilder.addOffset(6, MATRIXOffset);
    fbBuilder.addOffset(7, SCOREOffset);
    fbBuilder.addOffset(8, ANALYSIS_METHODOffset);
    fbBuilder.addOffset(9, EVENT_START_TIMEOffset);
    fbBuilder.addOffset(10, EVENT_END_TIMEOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Collection of HYP records
class HYPCOLLECTION {
  HYPCOLLECTION._(this._bc, this._bcOffset);
  factory HYPCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HYPCOLLECTION> reader = _HYPCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<HYP>? get RECORDS => const fb.ListReader<HYP>(HYP.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'HYPCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _HYPCOLLECTIONReader extends fb.TableReader<HYPCOLLECTION> {
  const _HYPCOLLECTIONReader();

  @override
  HYPCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    HYPCOLLECTION._(bc, offset);
}

class HYPCOLLECTIONBuilder {
  HYPCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HYPCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<HYPObjectBuilder>? _RECORDS;

  HYPCOLLECTIONObjectBuilder({
    List<HYPObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
