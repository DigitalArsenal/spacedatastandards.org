// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


import './main_generated.dart';

///  Payload Information
class PLD {
  PLD._(this._bc, this._bcOffset);
  factory PLD(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PLD> reader = _PLDReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get PAYLOAD_DURATION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  double get MASS_AT_LAUNCH => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  String? get DIMENSIONS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  double get SOLAR_ARRAY_AREA => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  String? get SOLAR_ARRAY_DIMENSIONS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get NOMINAL_OPERATIONAL_LIFETIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  List<IDM>? get INSTRUMENTS => const fb.ListReader<IDM>(IDM.reader).vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'PLD{PAYLOAD_DURATION: ${PAYLOAD_DURATION}, MASS_AT_LAUNCH: ${MASS_AT_LAUNCH}, DIMENSIONS: ${DIMENSIONS}, SOLAR_ARRAY_AREA: ${SOLAR_ARRAY_AREA}, SOLAR_ARRAY_DIMENSIONS: ${SOLAR_ARRAY_DIMENSIONS}, NOMINAL_OPERATIONAL_LIFETIME: ${NOMINAL_OPERATIONAL_LIFETIME}, INSTRUMENTS: ${INSTRUMENTS}}';
  }
}

class _PLDReader extends fb.TableReader<PLD> {
  const _PLDReader();

  @override
  PLD createObject(fb.BufferContext bc, int offset) => 
    PLD._(bc, offset);
}

class PLDBuilder {
  PLDBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addPayloadDurationOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMassAtLaunch(double? MASS_AT_LAUNCH) {
    fbBuilder.addFloat32(1, MASS_AT_LAUNCH);
    return fbBuilder.offset;
  }
  int addDimensionsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSolarArrayArea(double? SOLAR_ARRAY_AREA) {
    fbBuilder.addFloat32(3, SOLAR_ARRAY_AREA);
    return fbBuilder.offset;
  }
  int addSolarArrayDimensionsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addNominalOperationalLifetimeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addInstrumentsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PLDObjectBuilder extends fb.ObjectBuilder {
  final String? _PAYLOAD_DURATION;
  final double? _MASS_AT_LAUNCH;
  final String? _DIMENSIONS;
  final double? _SOLAR_ARRAY_AREA;
  final String? _SOLAR_ARRAY_DIMENSIONS;
  final String? _NOMINAL_OPERATIONAL_LIFETIME;
  final List<IDMObjectBuilder>? _INSTRUMENTS;

  PLDObjectBuilder({
    String? PAYLOAD_DURATION,
    double? MASS_AT_LAUNCH,
    String? DIMENSIONS,
    double? SOLAR_ARRAY_AREA,
    String? SOLAR_ARRAY_DIMENSIONS,
    String? NOMINAL_OPERATIONAL_LIFETIME,
    List<IDMObjectBuilder>? INSTRUMENTS,
  })
      : _PAYLOAD_DURATION = PAYLOAD_DURATION,
        _MASS_AT_LAUNCH = MASS_AT_LAUNCH,
        _DIMENSIONS = DIMENSIONS,
        _SOLAR_ARRAY_AREA = SOLAR_ARRAY_AREA,
        _SOLAR_ARRAY_DIMENSIONS = SOLAR_ARRAY_DIMENSIONS,
        _NOMINAL_OPERATIONAL_LIFETIME = NOMINAL_OPERATIONAL_LIFETIME,
        _INSTRUMENTS = INSTRUMENTS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? PAYLOAD_DURATIONOffset = _PAYLOAD_DURATION == null ? null
        : fbBuilder.writeString(_PAYLOAD_DURATION!);
    final int? DIMENSIONSOffset = _DIMENSIONS == null ? null
        : fbBuilder.writeString(_DIMENSIONS!);
    final int? SOLAR_ARRAY_DIMENSIONSOffset = _SOLAR_ARRAY_DIMENSIONS == null ? null
        : fbBuilder.writeString(_SOLAR_ARRAY_DIMENSIONS!);
    final int? NOMINAL_OPERATIONAL_LIFETIMEOffset = _NOMINAL_OPERATIONAL_LIFETIME == null ? null
        : fbBuilder.writeString(_NOMINAL_OPERATIONAL_LIFETIME!);
    final int? INSTRUMENTSOffset = _INSTRUMENTS == null ? null
        : fbBuilder.writeList(_INSTRUMENTS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, PAYLOAD_DURATIONOffset);
    fbBuilder.addFloat32(1, _MASS_AT_LAUNCH);
    fbBuilder.addOffset(2, DIMENSIONSOffset);
    fbBuilder.addFloat32(3, _SOLAR_ARRAY_AREA);
    fbBuilder.addOffset(4, SOLAR_ARRAY_DIMENSIONSOffset);
    fbBuilder.addOffset(5, NOMINAL_OPERATIONAL_LIFETIMEOffset);
    fbBuilder.addOffset(6, INSTRUMENTSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PLDCOLLECTION {
  PLDCOLLECTION._(this._bc, this._bcOffset);
  factory PLDCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PLDCOLLECTION> reader = _PLDCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<PLD>? get RECORDS => const fb.ListReader<PLD>(PLD.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PLDCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _PLDCOLLECTIONReader extends fb.TableReader<PLDCOLLECTION> {
  const _PLDCOLLECTIONReader();

  @override
  PLDCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    PLDCOLLECTION._(bc, offset);
}

class PLDCOLLECTIONBuilder {
  PLDCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PLDCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<PLDObjectBuilder>? _RECORDS;

  PLDCOLLECTIONObjectBuilder({
    List<PLDObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
