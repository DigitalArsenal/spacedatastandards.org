// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Header {
  Header._(this._bc, this._bcOffset);
  factory Header(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Header> reader = _HeaderReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Format version in the form of 'x.y', where 'y' is incremented for minor changes, and 'x' for major changes.
  String? get CCSDS_OCM_VERS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Comments (a contiguous set of one or more comment lines may be provided immediately after the version number).
  List<String>? get COMMENT => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  ///  User-defined free-text message classification/caveats of this OCM.
  String? get CLASSIFICATION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  File creation date/time in UTC.
  String? get CREATION_DATE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Creating agency or operator.
  String? get ORIGINATOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Free-text field containing an ID that uniquely identifies a message from this originator.
  String? get MESSAGE_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'Header{CCSDS_OCM_VERS: ${CCSDS_OCM_VERS}, COMMENT: ${COMMENT}, CLASSIFICATION: ${CLASSIFICATION}, CREATION_DATE: ${CREATION_DATE}, ORIGINATOR: ${ORIGINATOR}, MESSAGE_ID: ${MESSAGE_ID}}';
  }
}

class _HeaderReader extends fb.TableReader<Header> {
  const _HeaderReader();

  @override
  Header createObject(fb.BufferContext bc, int offset) => 
    Header._(bc, offset);
}

class HeaderBuilder {
  HeaderBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addCcsdsOcmVersOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addCommentOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClassificationOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCreationDateOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addOriginatorOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMessageIdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HeaderObjectBuilder extends fb.ObjectBuilder {
  final String? _CCSDS_OCM_VERS;
  final List<String>? _COMMENT;
  final String? _CLASSIFICATION;
  final String? _CREATION_DATE;
  final String? _ORIGINATOR;
  final String? _MESSAGE_ID;

  HeaderObjectBuilder({
    String? CCSDS_OCM_VERS,
    List<String>? COMMENT,
    String? CLASSIFICATION,
    String? CREATION_DATE,
    String? ORIGINATOR,
    String? MESSAGE_ID,
  })
      : _CCSDS_OCM_VERS = CCSDS_OCM_VERS,
        _COMMENT = COMMENT,
        _CLASSIFICATION = CLASSIFICATION,
        _CREATION_DATE = CREATION_DATE,
        _ORIGINATOR = ORIGINATOR,
        _MESSAGE_ID = MESSAGE_ID;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? CCSDS_OCM_VERSOffset = _CCSDS_OCM_VERS == null ? null
        : fbBuilder.writeString(_CCSDS_OCM_VERS!);
    final int? COMMENTOffset = _COMMENT == null ? null
        : fbBuilder.writeList(_COMMENT!.map(fbBuilder.writeString).toList());
    final int? CLASSIFICATIONOffset = _CLASSIFICATION == null ? null
        : fbBuilder.writeString(_CLASSIFICATION!);
    final int? CREATION_DATEOffset = _CREATION_DATE == null ? null
        : fbBuilder.writeString(_CREATION_DATE!);
    final int? ORIGINATOROffset = _ORIGINATOR == null ? null
        : fbBuilder.writeString(_ORIGINATOR!);
    final int? MESSAGE_IDOffset = _MESSAGE_ID == null ? null
        : fbBuilder.writeString(_MESSAGE_ID!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, CCSDS_OCM_VERSOffset);
    fbBuilder.addOffset(1, COMMENTOffset);
    fbBuilder.addOffset(2, CLASSIFICATIONOffset);
    fbBuilder.addOffset(3, CREATION_DATEOffset);
    fbBuilder.addOffset(4, ORIGINATOROffset);
    fbBuilder.addOffset(5, MESSAGE_IDOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Metadata {
  Metadata._(this._bc, this._bcOffset);
  factory Metadata(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Metadata> reader = _MetadataReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Comments in the Metadata section.
  List<String>? get COMMENT => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  ///  Free-text field containing the name of the object.
  String? get OBJECT_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  International designator for the object as assigned by COSPAR.
  String? get INTERNATIONAL_DESIGNATOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Satellite catalog source from which 'OBJECT_DESIGNATOR' was obtained.
  String? get CATALOG_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Unique satellite identification designator from the catalog.
  String? get OBJECT_DESIGNATOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Alternate names of this space object.
  List<String>? get ALTERNATE_NAMES => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 14);
  ///  Originator or programmatic Point-of-Contact (PoC) for OCM.
  String? get ORIGINATOR_POC => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Contact position of the originator PoC.
  String? get ORIGINATOR_POSITION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Originator PoC phone number.
  String? get ORIGINATOR_PHONE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Originator PoC email address.
  String? get ORIGINATOR_EMAIL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Originator's physical address information.
  String? get ORIGINATOR_ADDRESS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Creating agency or operator for technical contact.
  String? get TECH_ORG => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Technical Point-of-Contact (PoC) for OCM.
  String? get TECH_POC => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Contact position of the technical PoC.
  String? get TECH_POSITION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Technical PoC phone number.
  String? get TECH_PHONE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Technical PoC email address.
  String? get TECH_EMAIL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Technical PoC physical address information.
  String? get TECH_ADDRESS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  ID that uniquely identifies the previous message from this originator.
  String? get PREVIOUS_MESSAGE_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  ID that uniquely identifies the next message from this originator.
  String? get NEXT_MESSAGE_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  Unique identifier of Attitude Data Messages linked to this OCM.
  String? get ADM_MSG_LINK => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  Unique identifier of Conjunction Data Messages linked to this OCM.
  String? get CDM_MSG_LINK => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  Unique identifier of Pointing Request Messages linked to this OCM.
  String? get PRM_MSG_LINK => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  Unique identifier of Reentry Data Messages linked to this OCM.
  String? get RDM_MSG_LINK => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  List of Tracking Data Messages upon which this orbit determination is based.
  List<String>? get TDM_MSG_LINK => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 50);
  ///  Operator of the space object.
  String? get OPERATOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Owner of the space object.
  String? get OWNER => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Country where the space object owner is based.
  String? get COUNTRY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Name of the constellation to which this space object belongs.
  String? get CONSTELLATION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Specification of the type of object (e.g., PAYLOAD, ROCKET BODY, DEBRIS).
  String? get OBJECT_TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Time system for all absolute time stamps in this OCM, including EPOCH_TZERO.
  String? get TIME_SYSTEM => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Default epoch to which all relative times are referenced in data blocks.
  String? get EPOCH_TZERO => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Specification of the operational status of the space object.
  String? get OPS_STATUS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Specification of the type of orbit (e.g., GEO, LEO).
  String? get ORBIT_CATEGORY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  List of elements of information data blocks included in this message.
  List<String>? get OCM_DATA_ELEMENTS => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 70);
  ///  Number of spacecraft clock counts at EPOCH_TZERO (used if TIME_SYSTEM is SCLK).
  double get SCLK_OFFSET_AT_EPOCH => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  Number of clock seconds occurring during one SI second (used if TIME_SYSTEM is SCLK).
  double get SCLK_SEC_PER_SI_SEC => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  Creation epoch of the previous message from this originator.
  String? get PREVIOUS_MESSAGE_EPOCH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Anticipated (or actual) epoch of the next message from this originator.
  String? get NEXT_MESSAGE_EPOCH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  Time of the earliest data contained in the OCM.
  String? get START_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  Time of the latest data contained in the OCM.
  String? get STOP_TIME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Span of time that the OCM covers, measured in days.
  double get TIME_SPAN => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  Difference (TAI - UTC) in seconds at EPOCH_TZERO.
  double get TAIMUTC_AT_TZERO => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  Epoch of next leap second.
  String? get NEXT_LEAP_EPOCH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Difference (TAI - UTC) in seconds at NEXT_LEAP_EPOCH.
  double get NEXT_LEAP_TAIMUTC => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  Difference (UT1 - UTC) in seconds at EPOCH_TZERO.
  double get UT1MUTC_AT_TZERO => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  Source and version of Earth Orientation Parameters used.
  String? get EOP_SOURCE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  Method used to select or interpolate sequential EOP data.
  String? get INTERP_METHOD_EOP => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Source and version of celestial body ephemeris data used.
  String? get CELESTIAL_SOURCE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);

  @override
  String toString() {
    return 'Metadata{COMMENT: ${COMMENT}, OBJECT_NAME: ${OBJECT_NAME}, INTERNATIONAL_DESIGNATOR: ${INTERNATIONAL_DESIGNATOR}, CATALOG_NAME: ${CATALOG_NAME}, OBJECT_DESIGNATOR: ${OBJECT_DESIGNATOR}, ALTERNATE_NAMES: ${ALTERNATE_NAMES}, ORIGINATOR_POC: ${ORIGINATOR_POC}, ORIGINATOR_POSITION: ${ORIGINATOR_POSITION}, ORIGINATOR_PHONE: ${ORIGINATOR_PHONE}, ORIGINATOR_EMAIL: ${ORIGINATOR_EMAIL}, ORIGINATOR_ADDRESS: ${ORIGINATOR_ADDRESS}, TECH_ORG: ${TECH_ORG}, TECH_POC: ${TECH_POC}, TECH_POSITION: ${TECH_POSITION}, TECH_PHONE: ${TECH_PHONE}, TECH_EMAIL: ${TECH_EMAIL}, TECH_ADDRESS: ${TECH_ADDRESS}, PREVIOUS_MESSAGE_ID: ${PREVIOUS_MESSAGE_ID}, NEXT_MESSAGE_ID: ${NEXT_MESSAGE_ID}, ADM_MSG_LINK: ${ADM_MSG_LINK}, CDM_MSG_LINK: ${CDM_MSG_LINK}, PRM_MSG_LINK: ${PRM_MSG_LINK}, RDM_MSG_LINK: ${RDM_MSG_LINK}, TDM_MSG_LINK: ${TDM_MSG_LINK}, OPERATOR: ${OPERATOR}, OWNER: ${OWNER}, COUNTRY: ${COUNTRY}, CONSTELLATION: ${CONSTELLATION}, OBJECT_TYPE: ${OBJECT_TYPE}, TIME_SYSTEM: ${TIME_SYSTEM}, EPOCH_TZERO: ${EPOCH_TZERO}, OPS_STATUS: ${OPS_STATUS}, ORBIT_CATEGORY: ${ORBIT_CATEGORY}, OCM_DATA_ELEMENTS: ${OCM_DATA_ELEMENTS}, SCLK_OFFSET_AT_EPOCH: ${SCLK_OFFSET_AT_EPOCH}, SCLK_SEC_PER_SI_SEC: ${SCLK_SEC_PER_SI_SEC}, PREVIOUS_MESSAGE_EPOCH: ${PREVIOUS_MESSAGE_EPOCH}, NEXT_MESSAGE_EPOCH: ${NEXT_MESSAGE_EPOCH}, START_TIME: ${START_TIME}, STOP_TIME: ${STOP_TIME}, TIME_SPAN: ${TIME_SPAN}, TAIMUTC_AT_TZERO: ${TAIMUTC_AT_TZERO}, NEXT_LEAP_EPOCH: ${NEXT_LEAP_EPOCH}, NEXT_LEAP_TAIMUTC: ${NEXT_LEAP_TAIMUTC}, UT1MUTC_AT_TZERO: ${UT1MUTC_AT_TZERO}, EOP_SOURCE: ${EOP_SOURCE}, INTERP_METHOD_EOP: ${INTERP_METHOD_EOP}, CELESTIAL_SOURCE: ${CELESTIAL_SOURCE}}';
  }
}

class _MetadataReader extends fb.TableReader<Metadata> {
  const _MetadataReader();

  @override
  Metadata createObject(fb.BufferContext bc, int offset) => 
    Metadata._(bc, offset);
}

class MetadataBuilder {
  MetadataBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(48);
  }

  int addCommentOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addObjectNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addInternationalDesignatorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCatalogNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addObjectDesignatorOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addAlternateNamesOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addOriginatorPocOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addOriginatorPositionOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOriginatorPhoneOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addOriginatorEmailOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addOriginatorAddressOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addTechOrgOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addTechPocOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addTechPositionOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addTechPhoneOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addTechEmailOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addTechAddressOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addPreviousMessageIdOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addNextMessageIdOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addAdmMsgLinkOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addCdmMsgLinkOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addPrmMsgLinkOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addRdmMsgLinkOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addTdmMsgLinkOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addOperatorOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addOwnerOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addCountryOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addConstellationOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addObjectTypeOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addTimeSystemOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addEpochTzeroOffset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addOpsStatusOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addOrbitCategoryOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addOcmDataElementsOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addSclkOffsetAtEpoch(double? SCLK_OFFSET_AT_EPOCH) {
    fbBuilder.addFloat64(34, SCLK_OFFSET_AT_EPOCH);
    return fbBuilder.offset;
  }
  int addSclkSecPerSiSec(double? SCLK_SEC_PER_SI_SEC) {
    fbBuilder.addFloat64(35, SCLK_SEC_PER_SI_SEC);
    return fbBuilder.offset;
  }
  int addPreviousMessageEpochOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addNextMessageEpochOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addStopTimeOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addTimeSpan(double? TIME_SPAN) {
    fbBuilder.addFloat64(40, TIME_SPAN);
    return fbBuilder.offset;
  }
  int addTaimutcAtTzero(double? TAIMUTC_AT_TZERO) {
    fbBuilder.addFloat64(41, TAIMUTC_AT_TZERO);
    return fbBuilder.offset;
  }
  int addNextLeapEpochOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addNextLeapTaimutc(double? NEXT_LEAP_TAIMUTC) {
    fbBuilder.addFloat64(43, NEXT_LEAP_TAIMUTC);
    return fbBuilder.offset;
  }
  int addUt1MutcAtTzero(double? UT1MUTC_AT_TZERO) {
    fbBuilder.addFloat64(44, UT1MUTC_AT_TZERO);
    return fbBuilder.offset;
  }
  int addEopSourceOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addInterpMethodEopOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addCelestialSourceOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MetadataObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _COMMENT;
  final String? _OBJECT_NAME;
  final String? _INTERNATIONAL_DESIGNATOR;
  final String? _CATALOG_NAME;
  final String? _OBJECT_DESIGNATOR;
  final List<String>? _ALTERNATE_NAMES;
  final String? _ORIGINATOR_POC;
  final String? _ORIGINATOR_POSITION;
  final String? _ORIGINATOR_PHONE;
  final String? _ORIGINATOR_EMAIL;
  final String? _ORIGINATOR_ADDRESS;
  final String? _TECH_ORG;
  final String? _TECH_POC;
  final String? _TECH_POSITION;
  final String? _TECH_PHONE;
  final String? _TECH_EMAIL;
  final String? _TECH_ADDRESS;
  final String? _PREVIOUS_MESSAGE_ID;
  final String? _NEXT_MESSAGE_ID;
  final String? _ADM_MSG_LINK;
  final String? _CDM_MSG_LINK;
  final String? _PRM_MSG_LINK;
  final String? _RDM_MSG_LINK;
  final List<String>? _TDM_MSG_LINK;
  final String? _OPERATOR;
  final String? _OWNER;
  final String? _COUNTRY;
  final String? _CONSTELLATION;
  final String? _OBJECT_TYPE;
  final String? _TIME_SYSTEM;
  final String? _EPOCH_TZERO;
  final String? _OPS_STATUS;
  final String? _ORBIT_CATEGORY;
  final List<String>? _OCM_DATA_ELEMENTS;
  final double? _SCLK_OFFSET_AT_EPOCH;
  final double? _SCLK_SEC_PER_SI_SEC;
  final String? _PREVIOUS_MESSAGE_EPOCH;
  final String? _NEXT_MESSAGE_EPOCH;
  final String? _START_TIME;
  final String? _STOP_TIME;
  final double? _TIME_SPAN;
  final double? _TAIMUTC_AT_TZERO;
  final String? _NEXT_LEAP_EPOCH;
  final double? _NEXT_LEAP_TAIMUTC;
  final double? _UT1MUTC_AT_TZERO;
  final String? _EOP_SOURCE;
  final String? _INTERP_METHOD_EOP;
  final String? _CELESTIAL_SOURCE;

  MetadataObjectBuilder({
    List<String>? COMMENT,
    String? OBJECT_NAME,
    String? INTERNATIONAL_DESIGNATOR,
    String? CATALOG_NAME,
    String? OBJECT_DESIGNATOR,
    List<String>? ALTERNATE_NAMES,
    String? ORIGINATOR_POC,
    String? ORIGINATOR_POSITION,
    String? ORIGINATOR_PHONE,
    String? ORIGINATOR_EMAIL,
    String? ORIGINATOR_ADDRESS,
    String? TECH_ORG,
    String? TECH_POC,
    String? TECH_POSITION,
    String? TECH_PHONE,
    String? TECH_EMAIL,
    String? TECH_ADDRESS,
    String? PREVIOUS_MESSAGE_ID,
    String? NEXT_MESSAGE_ID,
    String? ADM_MSG_LINK,
    String? CDM_MSG_LINK,
    String? PRM_MSG_LINK,
    String? RDM_MSG_LINK,
    List<String>? TDM_MSG_LINK,
    String? OPERATOR,
    String? OWNER,
    String? COUNTRY,
    String? CONSTELLATION,
    String? OBJECT_TYPE,
    String? TIME_SYSTEM,
    String? EPOCH_TZERO,
    String? OPS_STATUS,
    String? ORBIT_CATEGORY,
    List<String>? OCM_DATA_ELEMENTS,
    double? SCLK_OFFSET_AT_EPOCH,
    double? SCLK_SEC_PER_SI_SEC,
    String? PREVIOUS_MESSAGE_EPOCH,
    String? NEXT_MESSAGE_EPOCH,
    String? START_TIME,
    String? STOP_TIME,
    double? TIME_SPAN,
    double? TAIMUTC_AT_TZERO,
    String? NEXT_LEAP_EPOCH,
    double? NEXT_LEAP_TAIMUTC,
    double? UT1MUTC_AT_TZERO,
    String? EOP_SOURCE,
    String? INTERP_METHOD_EOP,
    String? CELESTIAL_SOURCE,
  })
      : _COMMENT = COMMENT,
        _OBJECT_NAME = OBJECT_NAME,
        _INTERNATIONAL_DESIGNATOR = INTERNATIONAL_DESIGNATOR,
        _CATALOG_NAME = CATALOG_NAME,
        _OBJECT_DESIGNATOR = OBJECT_DESIGNATOR,
        _ALTERNATE_NAMES = ALTERNATE_NAMES,
        _ORIGINATOR_POC = ORIGINATOR_POC,
        _ORIGINATOR_POSITION = ORIGINATOR_POSITION,
        _ORIGINATOR_PHONE = ORIGINATOR_PHONE,
        _ORIGINATOR_EMAIL = ORIGINATOR_EMAIL,
        _ORIGINATOR_ADDRESS = ORIGINATOR_ADDRESS,
        _TECH_ORG = TECH_ORG,
        _TECH_POC = TECH_POC,
        _TECH_POSITION = TECH_POSITION,
        _TECH_PHONE = TECH_PHONE,
        _TECH_EMAIL = TECH_EMAIL,
        _TECH_ADDRESS = TECH_ADDRESS,
        _PREVIOUS_MESSAGE_ID = PREVIOUS_MESSAGE_ID,
        _NEXT_MESSAGE_ID = NEXT_MESSAGE_ID,
        _ADM_MSG_LINK = ADM_MSG_LINK,
        _CDM_MSG_LINK = CDM_MSG_LINK,
        _PRM_MSG_LINK = PRM_MSG_LINK,
        _RDM_MSG_LINK = RDM_MSG_LINK,
        _TDM_MSG_LINK = TDM_MSG_LINK,
        _OPERATOR = OPERATOR,
        _OWNER = OWNER,
        _COUNTRY = COUNTRY,
        _CONSTELLATION = CONSTELLATION,
        _OBJECT_TYPE = OBJECT_TYPE,
        _TIME_SYSTEM = TIME_SYSTEM,
        _EPOCH_TZERO = EPOCH_TZERO,
        _OPS_STATUS = OPS_STATUS,
        _ORBIT_CATEGORY = ORBIT_CATEGORY,
        _OCM_DATA_ELEMENTS = OCM_DATA_ELEMENTS,
        _SCLK_OFFSET_AT_EPOCH = SCLK_OFFSET_AT_EPOCH,
        _SCLK_SEC_PER_SI_SEC = SCLK_SEC_PER_SI_SEC,
        _PREVIOUS_MESSAGE_EPOCH = PREVIOUS_MESSAGE_EPOCH,
        _NEXT_MESSAGE_EPOCH = NEXT_MESSAGE_EPOCH,
        _START_TIME = START_TIME,
        _STOP_TIME = STOP_TIME,
        _TIME_SPAN = TIME_SPAN,
        _TAIMUTC_AT_TZERO = TAIMUTC_AT_TZERO,
        _NEXT_LEAP_EPOCH = NEXT_LEAP_EPOCH,
        _NEXT_LEAP_TAIMUTC = NEXT_LEAP_TAIMUTC,
        _UT1MUTC_AT_TZERO = UT1MUTC_AT_TZERO,
        _EOP_SOURCE = EOP_SOURCE,
        _INTERP_METHOD_EOP = INTERP_METHOD_EOP,
        _CELESTIAL_SOURCE = CELESTIAL_SOURCE;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? COMMENTOffset = _COMMENT == null ? null
        : fbBuilder.writeList(_COMMENT!.map(fbBuilder.writeString).toList());
    final int? OBJECT_NAMEOffset = _OBJECT_NAME == null ? null
        : fbBuilder.writeString(_OBJECT_NAME!);
    final int? INTERNATIONAL_DESIGNATOROffset = _INTERNATIONAL_DESIGNATOR == null ? null
        : fbBuilder.writeString(_INTERNATIONAL_DESIGNATOR!);
    final int? CATALOG_NAMEOffset = _CATALOG_NAME == null ? null
        : fbBuilder.writeString(_CATALOG_NAME!);
    final int? OBJECT_DESIGNATOROffset = _OBJECT_DESIGNATOR == null ? null
        : fbBuilder.writeString(_OBJECT_DESIGNATOR!);
    final int? ALTERNATE_NAMESOffset = _ALTERNATE_NAMES == null ? null
        : fbBuilder.writeList(_ALTERNATE_NAMES!.map(fbBuilder.writeString).toList());
    final int? ORIGINATOR_POCOffset = _ORIGINATOR_POC == null ? null
        : fbBuilder.writeString(_ORIGINATOR_POC!);
    final int? ORIGINATOR_POSITIONOffset = _ORIGINATOR_POSITION == null ? null
        : fbBuilder.writeString(_ORIGINATOR_POSITION!);
    final int? ORIGINATOR_PHONEOffset = _ORIGINATOR_PHONE == null ? null
        : fbBuilder.writeString(_ORIGINATOR_PHONE!);
    final int? ORIGINATOR_EMAILOffset = _ORIGINATOR_EMAIL == null ? null
        : fbBuilder.writeString(_ORIGINATOR_EMAIL!);
    final int? ORIGINATOR_ADDRESSOffset = _ORIGINATOR_ADDRESS == null ? null
        : fbBuilder.writeString(_ORIGINATOR_ADDRESS!);
    final int? TECH_ORGOffset = _TECH_ORG == null ? null
        : fbBuilder.writeString(_TECH_ORG!);
    final int? TECH_POCOffset = _TECH_POC == null ? null
        : fbBuilder.writeString(_TECH_POC!);
    final int? TECH_POSITIONOffset = _TECH_POSITION == null ? null
        : fbBuilder.writeString(_TECH_POSITION!);
    final int? TECH_PHONEOffset = _TECH_PHONE == null ? null
        : fbBuilder.writeString(_TECH_PHONE!);
    final int? TECH_EMAILOffset = _TECH_EMAIL == null ? null
        : fbBuilder.writeString(_TECH_EMAIL!);
    final int? TECH_ADDRESSOffset = _TECH_ADDRESS == null ? null
        : fbBuilder.writeString(_TECH_ADDRESS!);
    final int? PREVIOUS_MESSAGE_IDOffset = _PREVIOUS_MESSAGE_ID == null ? null
        : fbBuilder.writeString(_PREVIOUS_MESSAGE_ID!);
    final int? NEXT_MESSAGE_IDOffset = _NEXT_MESSAGE_ID == null ? null
        : fbBuilder.writeString(_NEXT_MESSAGE_ID!);
    final int? ADM_MSG_LINKOffset = _ADM_MSG_LINK == null ? null
        : fbBuilder.writeString(_ADM_MSG_LINK!);
    final int? CDM_MSG_LINKOffset = _CDM_MSG_LINK == null ? null
        : fbBuilder.writeString(_CDM_MSG_LINK!);
    final int? PRM_MSG_LINKOffset = _PRM_MSG_LINK == null ? null
        : fbBuilder.writeString(_PRM_MSG_LINK!);
    final int? RDM_MSG_LINKOffset = _RDM_MSG_LINK == null ? null
        : fbBuilder.writeString(_RDM_MSG_LINK!);
    final int? TDM_MSG_LINKOffset = _TDM_MSG_LINK == null ? null
        : fbBuilder.writeList(_TDM_MSG_LINK!.map(fbBuilder.writeString).toList());
    final int? OPERATOROffset = _OPERATOR == null ? null
        : fbBuilder.writeString(_OPERATOR!);
    final int? OWNEROffset = _OWNER == null ? null
        : fbBuilder.writeString(_OWNER!);
    final int? COUNTRYOffset = _COUNTRY == null ? null
        : fbBuilder.writeString(_COUNTRY!);
    final int? CONSTELLATIONOffset = _CONSTELLATION == null ? null
        : fbBuilder.writeString(_CONSTELLATION!);
    final int? OBJECT_TYPEOffset = _OBJECT_TYPE == null ? null
        : fbBuilder.writeString(_OBJECT_TYPE!);
    final int? TIME_SYSTEMOffset = _TIME_SYSTEM == null ? null
        : fbBuilder.writeString(_TIME_SYSTEM!);
    final int? EPOCH_TZEROOffset = _EPOCH_TZERO == null ? null
        : fbBuilder.writeString(_EPOCH_TZERO!);
    final int? OPS_STATUSOffset = _OPS_STATUS == null ? null
        : fbBuilder.writeString(_OPS_STATUS!);
    final int? ORBIT_CATEGORYOffset = _ORBIT_CATEGORY == null ? null
        : fbBuilder.writeString(_ORBIT_CATEGORY!);
    final int? OCM_DATA_ELEMENTSOffset = _OCM_DATA_ELEMENTS == null ? null
        : fbBuilder.writeList(_OCM_DATA_ELEMENTS!.map(fbBuilder.writeString).toList());
    final int? PREVIOUS_MESSAGE_EPOCHOffset = _PREVIOUS_MESSAGE_EPOCH == null ? null
        : fbBuilder.writeString(_PREVIOUS_MESSAGE_EPOCH!);
    final int? NEXT_MESSAGE_EPOCHOffset = _NEXT_MESSAGE_EPOCH == null ? null
        : fbBuilder.writeString(_NEXT_MESSAGE_EPOCH!);
    final int? START_TIMEOffset = _START_TIME == null ? null
        : fbBuilder.writeString(_START_TIME!);
    final int? STOP_TIMEOffset = _STOP_TIME == null ? null
        : fbBuilder.writeString(_STOP_TIME!);
    final int? NEXT_LEAP_EPOCHOffset = _NEXT_LEAP_EPOCH == null ? null
        : fbBuilder.writeString(_NEXT_LEAP_EPOCH!);
    final int? EOP_SOURCEOffset = _EOP_SOURCE == null ? null
        : fbBuilder.writeString(_EOP_SOURCE!);
    final int? INTERP_METHOD_EOPOffset = _INTERP_METHOD_EOP == null ? null
        : fbBuilder.writeString(_INTERP_METHOD_EOP!);
    final int? CELESTIAL_SOURCEOffset = _CELESTIAL_SOURCE == null ? null
        : fbBuilder.writeString(_CELESTIAL_SOURCE!);
    fbBuilder.startTable(48);
    fbBuilder.addOffset(0, COMMENTOffset);
    fbBuilder.addOffset(1, OBJECT_NAMEOffset);
    fbBuilder.addOffset(2, INTERNATIONAL_DESIGNATOROffset);
    fbBuilder.addOffset(3, CATALOG_NAMEOffset);
    fbBuilder.addOffset(4, OBJECT_DESIGNATOROffset);
    fbBuilder.addOffset(5, ALTERNATE_NAMESOffset);
    fbBuilder.addOffset(6, ORIGINATOR_POCOffset);
    fbBuilder.addOffset(7, ORIGINATOR_POSITIONOffset);
    fbBuilder.addOffset(8, ORIGINATOR_PHONEOffset);
    fbBuilder.addOffset(9, ORIGINATOR_EMAILOffset);
    fbBuilder.addOffset(10, ORIGINATOR_ADDRESSOffset);
    fbBuilder.addOffset(11, TECH_ORGOffset);
    fbBuilder.addOffset(12, TECH_POCOffset);
    fbBuilder.addOffset(13, TECH_POSITIONOffset);
    fbBuilder.addOffset(14, TECH_PHONEOffset);
    fbBuilder.addOffset(15, TECH_EMAILOffset);
    fbBuilder.addOffset(16, TECH_ADDRESSOffset);
    fbBuilder.addOffset(17, PREVIOUS_MESSAGE_IDOffset);
    fbBuilder.addOffset(18, NEXT_MESSAGE_IDOffset);
    fbBuilder.addOffset(19, ADM_MSG_LINKOffset);
    fbBuilder.addOffset(20, CDM_MSG_LINKOffset);
    fbBuilder.addOffset(21, PRM_MSG_LINKOffset);
    fbBuilder.addOffset(22, RDM_MSG_LINKOffset);
    fbBuilder.addOffset(23, TDM_MSG_LINKOffset);
    fbBuilder.addOffset(24, OPERATOROffset);
    fbBuilder.addOffset(25, OWNEROffset);
    fbBuilder.addOffset(26, COUNTRYOffset);
    fbBuilder.addOffset(27, CONSTELLATIONOffset);
    fbBuilder.addOffset(28, OBJECT_TYPEOffset);
    fbBuilder.addOffset(29, TIME_SYSTEMOffset);
    fbBuilder.addOffset(30, EPOCH_TZEROOffset);
    fbBuilder.addOffset(31, OPS_STATUSOffset);
    fbBuilder.addOffset(32, ORBIT_CATEGORYOffset);
    fbBuilder.addOffset(33, OCM_DATA_ELEMENTSOffset);
    fbBuilder.addFloat64(34, _SCLK_OFFSET_AT_EPOCH);
    fbBuilder.addFloat64(35, _SCLK_SEC_PER_SI_SEC);
    fbBuilder.addOffset(36, PREVIOUS_MESSAGE_EPOCHOffset);
    fbBuilder.addOffset(37, NEXT_MESSAGE_EPOCHOffset);
    fbBuilder.addOffset(38, START_TIMEOffset);
    fbBuilder.addOffset(39, STOP_TIMEOffset);
    fbBuilder.addFloat64(40, _TIME_SPAN);
    fbBuilder.addFloat64(41, _TAIMUTC_AT_TZERO);
    fbBuilder.addOffset(42, NEXT_LEAP_EPOCHOffset);
    fbBuilder.addFloat64(43, _NEXT_LEAP_TAIMUTC);
    fbBuilder.addFloat64(44, _UT1MUTC_AT_TZERO);
    fbBuilder.addOffset(45, EOP_SOURCEOffset);
    fbBuilder.addOffset(46, INTERP_METHOD_EOPOffset);
    fbBuilder.addOffset(47, CELESTIAL_SOURCEOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StateVector {
  StateVector._(this._bc, this._bcOffset);
  factory StateVector(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StateVector> reader = _StateVectorReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Epoch of the state vector.
  String? get EPOCH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  X component of position in the specified reference frame.
  double get X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  Y component of position.
  double get Y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  Z component of position.
  double get Z => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  X component of velocity.
  double get X_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Y component of velocity.
  double get Y_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Z component of velocity.
  double get Z_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  X component of acceleration.
  double get X_DDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Y component of acceleration.
  double get Y_DDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Z component of acceleration.
  double get Z_DDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);

  @override
  String toString() {
    return 'StateVector{EPOCH: ${EPOCH}, X: ${X}, Y: ${Y}, Z: ${Z}, X_DOT: ${X_DOT}, Y_DOT: ${Y_DOT}, Z_DOT: ${Z_DOT}, X_DDOT: ${X_DDOT}, Y_DDOT: ${Y_DDOT}, Z_DDOT: ${Z_DDOT}}';
  }
}

class _StateVectorReader extends fb.TableReader<StateVector> {
  const _StateVectorReader();

  @override
  StateVector createObject(fb.BufferContext bc, int offset) => 
    StateVector._(bc, offset);
}

class StateVectorBuilder {
  StateVectorBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addEpochOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addX(double? X) {
    fbBuilder.addFloat64(1, X);
    return fbBuilder.offset;
  }
  int addY(double? Y) {
    fbBuilder.addFloat64(2, Y);
    return fbBuilder.offset;
  }
  int addZ(double? Z) {
    fbBuilder.addFloat64(3, Z);
    return fbBuilder.offset;
  }
  int addXDot(double? X_DOT) {
    fbBuilder.addFloat64(4, X_DOT);
    return fbBuilder.offset;
  }
  int addYDot(double? Y_DOT) {
    fbBuilder.addFloat64(5, Y_DOT);
    return fbBuilder.offset;
  }
  int addZDot(double? Z_DOT) {
    fbBuilder.addFloat64(6, Z_DOT);
    return fbBuilder.offset;
  }
  int addXDdot(double? X_DDOT) {
    fbBuilder.addFloat64(7, X_DDOT);
    return fbBuilder.offset;
  }
  int addYDdot(double? Y_DDOT) {
    fbBuilder.addFloat64(8, Y_DDOT);
    return fbBuilder.offset;
  }
  int addZDdot(double? Z_DDOT) {
    fbBuilder.addFloat64(9, Z_DDOT);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StateVectorObjectBuilder extends fb.ObjectBuilder {
  final String? _EPOCH;
  final double? _X;
  final double? _Y;
  final double? _Z;
  final double? _X_DOT;
  final double? _Y_DOT;
  final double? _Z_DOT;
  final double? _X_DDOT;
  final double? _Y_DDOT;
  final double? _Z_DDOT;

  StateVectorObjectBuilder({
    String? EPOCH,
    double? X,
    double? Y,
    double? Z,
    double? X_DOT,
    double? Y_DOT,
    double? Z_DOT,
    double? X_DDOT,
    double? Y_DDOT,
    double? Z_DDOT,
  })
      : _EPOCH = EPOCH,
        _X = X,
        _Y = Y,
        _Z = Z,
        _X_DOT = X_DOT,
        _Y_DOT = Y_DOT,
        _Z_DOT = Z_DOT,
        _X_DDOT = X_DDOT,
        _Y_DDOT = Y_DDOT,
        _Z_DDOT = Z_DDOT;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? EPOCHOffset = _EPOCH == null ? null
        : fbBuilder.writeString(_EPOCH!);
    fbBuilder.startTable(10);
    fbBuilder.addOffset(0, EPOCHOffset);
    fbBuilder.addFloat64(1, _X);
    fbBuilder.addFloat64(2, _Y);
    fbBuilder.addFloat64(3, _Z);
    fbBuilder.addFloat64(4, _X_DOT);
    fbBuilder.addFloat64(5, _Y_DOT);
    fbBuilder.addFloat64(6, _Z_DOT);
    fbBuilder.addFloat64(7, _X_DDOT);
    fbBuilder.addFloat64(8, _Y_DDOT);
    fbBuilder.addFloat64(9, _Z_DDOT);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PhysicalProperties {
  PhysicalProperties._(this._bc, this._bcOffset);
  factory PhysicalProperties(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PhysicalProperties> reader = _PhysicalPropertiesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Comments in the Physical Properties section.
  List<String>? get COMMENT => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  ///  Wet mass of the space object.
  double get WET_MASS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  Dry mass of the space object.
  double get DRY_MASS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  ///  Units for mass values.
  String? get MASS_UNITS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Quaternion component q1 of orientation from OEB to EME2000.
  double get OEB_Q1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  Quaternion component q2.
  double get OEB_Q2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  Quaternion component q3.
  double get OEB_Q3 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Quaternion scalar component qc.
  double get OEB_QC => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Maximum dimension of the object along OEB frame axes.
  double get OEB_MAX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);
  ///  Intermediate dimension along OEB frame axes.
  double get OEB_INT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Minimum dimension of the object along OEB frame axes.
  double get OEB_MIN => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 24, 0.0);
  ///  Area along OEB_MAX axis.
  double get AREA_ALONG_OEB_MAX => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 26, 0.0);
  ///  Area along OEB_INT axis.
  double get AREA_ALONG_OEB_INT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Area along OEB_MIN axis.
  double get AREA_ALONG_OEB_MIN => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Units for area values.
  String? get AREA_UNITS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Constant area for drag computations.
  double get DRAG_CONST_AREA => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  Nominal drag coefficient.
  double get DRAG_COEFF_NOM => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Uncertainty in the drag coefficient.
  double get DRAG_UNCERTAINTY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Constant area for solar radiation pressure computations.
  double get SRP_CONST_AREA => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  Nominal solar radiation pressure coefficient.
  double get SOLAR_RAD_COEFF => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  Uncertainty in the solar radiation pressure coefficient.
  double get SRP_UNCERTAINTY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);

  @override
  String toString() {
    return 'PhysicalProperties{COMMENT: ${COMMENT}, WET_MASS: ${WET_MASS}, DRY_MASS: ${DRY_MASS}, MASS_UNITS: ${MASS_UNITS}, OEB_Q1: ${OEB_Q1}, OEB_Q2: ${OEB_Q2}, OEB_Q3: ${OEB_Q3}, OEB_QC: ${OEB_QC}, OEB_MAX: ${OEB_MAX}, OEB_INT: ${OEB_INT}, OEB_MIN: ${OEB_MIN}, AREA_ALONG_OEB_MAX: ${AREA_ALONG_OEB_MAX}, AREA_ALONG_OEB_INT: ${AREA_ALONG_OEB_INT}, AREA_ALONG_OEB_MIN: ${AREA_ALONG_OEB_MIN}, AREA_UNITS: ${AREA_UNITS}, DRAG_CONST_AREA: ${DRAG_CONST_AREA}, DRAG_COEFF_NOM: ${DRAG_COEFF_NOM}, DRAG_UNCERTAINTY: ${DRAG_UNCERTAINTY}, SRP_CONST_AREA: ${SRP_CONST_AREA}, SOLAR_RAD_COEFF: ${SOLAR_RAD_COEFF}, SRP_UNCERTAINTY: ${SRP_UNCERTAINTY}}';
  }
}

class _PhysicalPropertiesReader extends fb.TableReader<PhysicalProperties> {
  const _PhysicalPropertiesReader();

  @override
  PhysicalProperties createObject(fb.BufferContext bc, int offset) => 
    PhysicalProperties._(bc, offset);
}

class PhysicalPropertiesBuilder {
  PhysicalPropertiesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(21);
  }

  int addCommentOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addWetMass(double? WET_MASS) {
    fbBuilder.addFloat64(1, WET_MASS);
    return fbBuilder.offset;
  }
  int addDryMass(double? DRY_MASS) {
    fbBuilder.addFloat64(2, DRY_MASS);
    return fbBuilder.offset;
  }
  int addMassUnitsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addOebQ1(double? OEB_Q1) {
    fbBuilder.addFloat64(4, OEB_Q1);
    return fbBuilder.offset;
  }
  int addOebQ2(double? OEB_Q2) {
    fbBuilder.addFloat64(5, OEB_Q2);
    return fbBuilder.offset;
  }
  int addOebQ3(double? OEB_Q3) {
    fbBuilder.addFloat64(6, OEB_Q3);
    return fbBuilder.offset;
  }
  int addOebQc(double? OEB_QC) {
    fbBuilder.addFloat64(7, OEB_QC);
    return fbBuilder.offset;
  }
  int addOebMax(double? OEB_MAX) {
    fbBuilder.addFloat64(8, OEB_MAX);
    return fbBuilder.offset;
  }
  int addOebInt(double? OEB_INT) {
    fbBuilder.addFloat64(9, OEB_INT);
    return fbBuilder.offset;
  }
  int addOebMin(double? OEB_MIN) {
    fbBuilder.addFloat64(10, OEB_MIN);
    return fbBuilder.offset;
  }
  int addAreaAlongOebMax(double? AREA_ALONG_OEB_MAX) {
    fbBuilder.addFloat64(11, AREA_ALONG_OEB_MAX);
    return fbBuilder.offset;
  }
  int addAreaAlongOebInt(double? AREA_ALONG_OEB_INT) {
    fbBuilder.addFloat64(12, AREA_ALONG_OEB_INT);
    return fbBuilder.offset;
  }
  int addAreaAlongOebMin(double? AREA_ALONG_OEB_MIN) {
    fbBuilder.addFloat64(13, AREA_ALONG_OEB_MIN);
    return fbBuilder.offset;
  }
  int addAreaUnitsOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addDragConstArea(double? DRAG_CONST_AREA) {
    fbBuilder.addFloat64(15, DRAG_CONST_AREA);
    return fbBuilder.offset;
  }
  int addDragCoeffNom(double? DRAG_COEFF_NOM) {
    fbBuilder.addFloat64(16, DRAG_COEFF_NOM);
    return fbBuilder.offset;
  }
  int addDragUncertainty(double? DRAG_UNCERTAINTY) {
    fbBuilder.addFloat64(17, DRAG_UNCERTAINTY);
    return fbBuilder.offset;
  }
  int addSrpConstArea(double? SRP_CONST_AREA) {
    fbBuilder.addFloat64(18, SRP_CONST_AREA);
    return fbBuilder.offset;
  }
  int addSolarRadCoeff(double? SOLAR_RAD_COEFF) {
    fbBuilder.addFloat64(19, SOLAR_RAD_COEFF);
    return fbBuilder.offset;
  }
  int addSrpUncertainty(double? SRP_UNCERTAINTY) {
    fbBuilder.addFloat64(20, SRP_UNCERTAINTY);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PhysicalPropertiesObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _COMMENT;
  final double? _WET_MASS;
  final double? _DRY_MASS;
  final String? _MASS_UNITS;
  final double? _OEB_Q1;
  final double? _OEB_Q2;
  final double? _OEB_Q3;
  final double? _OEB_QC;
  final double? _OEB_MAX;
  final double? _OEB_INT;
  final double? _OEB_MIN;
  final double? _AREA_ALONG_OEB_MAX;
  final double? _AREA_ALONG_OEB_INT;
  final double? _AREA_ALONG_OEB_MIN;
  final String? _AREA_UNITS;
  final double? _DRAG_CONST_AREA;
  final double? _DRAG_COEFF_NOM;
  final double? _DRAG_UNCERTAINTY;
  final double? _SRP_CONST_AREA;
  final double? _SOLAR_RAD_COEFF;
  final double? _SRP_UNCERTAINTY;

  PhysicalPropertiesObjectBuilder({
    List<String>? COMMENT,
    double? WET_MASS,
    double? DRY_MASS,
    String? MASS_UNITS,
    double? OEB_Q1,
    double? OEB_Q2,
    double? OEB_Q3,
    double? OEB_QC,
    double? OEB_MAX,
    double? OEB_INT,
    double? OEB_MIN,
    double? AREA_ALONG_OEB_MAX,
    double? AREA_ALONG_OEB_INT,
    double? AREA_ALONG_OEB_MIN,
    String? AREA_UNITS,
    double? DRAG_CONST_AREA,
    double? DRAG_COEFF_NOM,
    double? DRAG_UNCERTAINTY,
    double? SRP_CONST_AREA,
    double? SOLAR_RAD_COEFF,
    double? SRP_UNCERTAINTY,
  })
      : _COMMENT = COMMENT,
        _WET_MASS = WET_MASS,
        _DRY_MASS = DRY_MASS,
        _MASS_UNITS = MASS_UNITS,
        _OEB_Q1 = OEB_Q1,
        _OEB_Q2 = OEB_Q2,
        _OEB_Q3 = OEB_Q3,
        _OEB_QC = OEB_QC,
        _OEB_MAX = OEB_MAX,
        _OEB_INT = OEB_INT,
        _OEB_MIN = OEB_MIN,
        _AREA_ALONG_OEB_MAX = AREA_ALONG_OEB_MAX,
        _AREA_ALONG_OEB_INT = AREA_ALONG_OEB_INT,
        _AREA_ALONG_OEB_MIN = AREA_ALONG_OEB_MIN,
        _AREA_UNITS = AREA_UNITS,
        _DRAG_CONST_AREA = DRAG_CONST_AREA,
        _DRAG_COEFF_NOM = DRAG_COEFF_NOM,
        _DRAG_UNCERTAINTY = DRAG_UNCERTAINTY,
        _SRP_CONST_AREA = SRP_CONST_AREA,
        _SOLAR_RAD_COEFF = SOLAR_RAD_COEFF,
        _SRP_UNCERTAINTY = SRP_UNCERTAINTY;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? COMMENTOffset = _COMMENT == null ? null
        : fbBuilder.writeList(_COMMENT!.map(fbBuilder.writeString).toList());
    final int? MASS_UNITSOffset = _MASS_UNITS == null ? null
        : fbBuilder.writeString(_MASS_UNITS!);
    final int? AREA_UNITSOffset = _AREA_UNITS == null ? null
        : fbBuilder.writeString(_AREA_UNITS!);
    fbBuilder.startTable(21);
    fbBuilder.addOffset(0, COMMENTOffset);
    fbBuilder.addFloat64(1, _WET_MASS);
    fbBuilder.addFloat64(2, _DRY_MASS);
    fbBuilder.addOffset(3, MASS_UNITSOffset);
    fbBuilder.addFloat64(4, _OEB_Q1);
    fbBuilder.addFloat64(5, _OEB_Q2);
    fbBuilder.addFloat64(6, _OEB_Q3);
    fbBuilder.addFloat64(7, _OEB_QC);
    fbBuilder.addFloat64(8, _OEB_MAX);
    fbBuilder.addFloat64(9, _OEB_INT);
    fbBuilder.addFloat64(10, _OEB_MIN);
    fbBuilder.addFloat64(11, _AREA_ALONG_OEB_MAX);
    fbBuilder.addFloat64(12, _AREA_ALONG_OEB_INT);
    fbBuilder.addFloat64(13, _AREA_ALONG_OEB_MIN);
    fbBuilder.addOffset(14, AREA_UNITSOffset);
    fbBuilder.addFloat64(15, _DRAG_CONST_AREA);
    fbBuilder.addFloat64(16, _DRAG_COEFF_NOM);
    fbBuilder.addFloat64(17, _DRAG_UNCERTAINTY);
    fbBuilder.addFloat64(18, _SRP_CONST_AREA);
    fbBuilder.addFloat64(19, _SOLAR_RAD_COEFF);
    fbBuilder.addFloat64(20, _SRP_UNCERTAINTY);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Perturbations {
  Perturbations._(this._bc, this._bcOffset);
  factory Perturbations(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Perturbations> reader = _PerturbationsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Comments in the Perturbations section.
  List<String>? get COMMENT => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  ///  Atmospheric model used.
  String? get ATMOSPHERIC_MODEL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Gravity model used.
  String? get GRAVITY_MODEL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Degree of the gravity model.
  int get GRAVITY_DEGREE => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  ///  Order of the gravity model.
  int get GRAVITY_ORDER => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  ///  Gravitational constant times the mass of the central body.
  double get GM => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  List of celestial bodies included in n-body perturbations.
  List<String>? get N_BODY_PERTURBATIONS => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 16);
  ///  Ocean tides model used.
  String? get OCEAN_TIDES_MODEL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Solid tides model used.
  String? get SOLID_TIDES_MODEL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Atmospheric tides model used.
  String? get ATMOSPHERIC_TIDES_MODEL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Geopotential model used.
  String? get GEOPOTENTIAL_MODEL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Solar radiation pressure model used.
  String? get SOLAR_RAD_PRESSURE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Albedo model used.
  String? get ALBEDO => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Thermal model used.
  String? get THERMAL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Relativity model used.
  String? get RELATIVITY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Atmospheric drag model used.
  String? get ATMOSPHERIC_DRAG => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Fixed geomagnetic Kp index used.
  double get FIXED_GEOMAG_KP => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  Fixed F10.7 solar flux value used.
  double get FIXED_F10P7 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  Fixed mean F10.7 solar flux value used.
  double get FIXED_F10P7_MEAN => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);

  @override
  String toString() {
    return 'Perturbations{COMMENT: ${COMMENT}, ATMOSPHERIC_MODEL: ${ATMOSPHERIC_MODEL}, GRAVITY_MODEL: ${GRAVITY_MODEL}, GRAVITY_DEGREE: ${GRAVITY_DEGREE}, GRAVITY_ORDER: ${GRAVITY_ORDER}, GM: ${GM}, N_BODY_PERTURBATIONS: ${N_BODY_PERTURBATIONS}, OCEAN_TIDES_MODEL: ${OCEAN_TIDES_MODEL}, SOLID_TIDES_MODEL: ${SOLID_TIDES_MODEL}, ATMOSPHERIC_TIDES_MODEL: ${ATMOSPHERIC_TIDES_MODEL}, GEOPOTENTIAL_MODEL: ${GEOPOTENTIAL_MODEL}, SOLAR_RAD_PRESSURE: ${SOLAR_RAD_PRESSURE}, ALBEDO: ${ALBEDO}, THERMAL: ${THERMAL}, RELATIVITY: ${RELATIVITY}, ATMOSPHERIC_DRAG: ${ATMOSPHERIC_DRAG}, FIXED_GEOMAG_KP: ${FIXED_GEOMAG_KP}, FIXED_F10P7: ${FIXED_F10P7}, FIXED_F10P7_MEAN: ${FIXED_F10P7_MEAN}}';
  }
}

class _PerturbationsReader extends fb.TableReader<Perturbations> {
  const _PerturbationsReader();

  @override
  Perturbations createObject(fb.BufferContext bc, int offset) => 
    Perturbations._(bc, offset);
}

class PerturbationsBuilder {
  PerturbationsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(19);
  }

  int addCommentOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAtmosphericModelOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addGravityModelOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addGravityDegree(int? GRAVITY_DEGREE) {
    fbBuilder.addInt32(3, GRAVITY_DEGREE);
    return fbBuilder.offset;
  }
  int addGravityOrder(int? GRAVITY_ORDER) {
    fbBuilder.addInt32(4, GRAVITY_ORDER);
    return fbBuilder.offset;
  }
  int addGm(double? GM) {
    fbBuilder.addFloat64(5, GM);
    return fbBuilder.offset;
  }
  int addNBodyPerturbationsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addOceanTidesModelOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addSolidTidesModelOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addAtmosphericTidesModelOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addGeopotentialModelOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addSolarRadPressureOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addAlbedoOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addThermalOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addRelativityOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addAtmosphericDragOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addFixedGeomagKp(double? FIXED_GEOMAG_KP) {
    fbBuilder.addFloat64(16, FIXED_GEOMAG_KP);
    return fbBuilder.offset;
  }
  int addFixedF10P7(double? FIXED_F10P7) {
    fbBuilder.addFloat64(17, FIXED_F10P7);
    return fbBuilder.offset;
  }
  int addFixedF10P7Mean(double? FIXED_F10P7_MEAN) {
    fbBuilder.addFloat64(18, FIXED_F10P7_MEAN);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PerturbationsObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _COMMENT;
  final String? _ATMOSPHERIC_MODEL;
  final String? _GRAVITY_MODEL;
  final int? _GRAVITY_DEGREE;
  final int? _GRAVITY_ORDER;
  final double? _GM;
  final List<String>? _N_BODY_PERTURBATIONS;
  final String? _OCEAN_TIDES_MODEL;
  final String? _SOLID_TIDES_MODEL;
  final String? _ATMOSPHERIC_TIDES_MODEL;
  final String? _GEOPOTENTIAL_MODEL;
  final String? _SOLAR_RAD_PRESSURE;
  final String? _ALBEDO;
  final String? _THERMAL;
  final String? _RELATIVITY;
  final String? _ATMOSPHERIC_DRAG;
  final double? _FIXED_GEOMAG_KP;
  final double? _FIXED_F10P7;
  final double? _FIXED_F10P7_MEAN;

  PerturbationsObjectBuilder({
    List<String>? COMMENT,
    String? ATMOSPHERIC_MODEL,
    String? GRAVITY_MODEL,
    int? GRAVITY_DEGREE,
    int? GRAVITY_ORDER,
    double? GM,
    List<String>? N_BODY_PERTURBATIONS,
    String? OCEAN_TIDES_MODEL,
    String? SOLID_TIDES_MODEL,
    String? ATMOSPHERIC_TIDES_MODEL,
    String? GEOPOTENTIAL_MODEL,
    String? SOLAR_RAD_PRESSURE,
    String? ALBEDO,
    String? THERMAL,
    String? RELATIVITY,
    String? ATMOSPHERIC_DRAG,
    double? FIXED_GEOMAG_KP,
    double? FIXED_F10P7,
    double? FIXED_F10P7_MEAN,
  })
      : _COMMENT = COMMENT,
        _ATMOSPHERIC_MODEL = ATMOSPHERIC_MODEL,
        _GRAVITY_MODEL = GRAVITY_MODEL,
        _GRAVITY_DEGREE = GRAVITY_DEGREE,
        _GRAVITY_ORDER = GRAVITY_ORDER,
        _GM = GM,
        _N_BODY_PERTURBATIONS = N_BODY_PERTURBATIONS,
        _OCEAN_TIDES_MODEL = OCEAN_TIDES_MODEL,
        _SOLID_TIDES_MODEL = SOLID_TIDES_MODEL,
        _ATMOSPHERIC_TIDES_MODEL = ATMOSPHERIC_TIDES_MODEL,
        _GEOPOTENTIAL_MODEL = GEOPOTENTIAL_MODEL,
        _SOLAR_RAD_PRESSURE = SOLAR_RAD_PRESSURE,
        _ALBEDO = ALBEDO,
        _THERMAL = THERMAL,
        _RELATIVITY = RELATIVITY,
        _ATMOSPHERIC_DRAG = ATMOSPHERIC_DRAG,
        _FIXED_GEOMAG_KP = FIXED_GEOMAG_KP,
        _FIXED_F10P7 = FIXED_F10P7,
        _FIXED_F10P7_MEAN = FIXED_F10P7_MEAN;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? COMMENTOffset = _COMMENT == null ? null
        : fbBuilder.writeList(_COMMENT!.map(fbBuilder.writeString).toList());
    final int? ATMOSPHERIC_MODELOffset = _ATMOSPHERIC_MODEL == null ? null
        : fbBuilder.writeString(_ATMOSPHERIC_MODEL!);
    final int? GRAVITY_MODELOffset = _GRAVITY_MODEL == null ? null
        : fbBuilder.writeString(_GRAVITY_MODEL!);
    final int? N_BODY_PERTURBATIONSOffset = _N_BODY_PERTURBATIONS == null ? null
        : fbBuilder.writeList(_N_BODY_PERTURBATIONS!.map(fbBuilder.writeString).toList());
    final int? OCEAN_TIDES_MODELOffset = _OCEAN_TIDES_MODEL == null ? null
        : fbBuilder.writeString(_OCEAN_TIDES_MODEL!);
    final int? SOLID_TIDES_MODELOffset = _SOLID_TIDES_MODEL == null ? null
        : fbBuilder.writeString(_SOLID_TIDES_MODEL!);
    final int? ATMOSPHERIC_TIDES_MODELOffset = _ATMOSPHERIC_TIDES_MODEL == null ? null
        : fbBuilder.writeString(_ATMOSPHERIC_TIDES_MODEL!);
    final int? GEOPOTENTIAL_MODELOffset = _GEOPOTENTIAL_MODEL == null ? null
        : fbBuilder.writeString(_GEOPOTENTIAL_MODEL!);
    final int? SOLAR_RAD_PRESSUREOffset = _SOLAR_RAD_PRESSURE == null ? null
        : fbBuilder.writeString(_SOLAR_RAD_PRESSURE!);
    final int? ALBEDOOffset = _ALBEDO == null ? null
        : fbBuilder.writeString(_ALBEDO!);
    final int? THERMALOffset = _THERMAL == null ? null
        : fbBuilder.writeString(_THERMAL!);
    final int? RELATIVITYOffset = _RELATIVITY == null ? null
        : fbBuilder.writeString(_RELATIVITY!);
    final int? ATMOSPHERIC_DRAGOffset = _ATMOSPHERIC_DRAG == null ? null
        : fbBuilder.writeString(_ATMOSPHERIC_DRAG!);
    fbBuilder.startTable(19);
    fbBuilder.addOffset(0, COMMENTOffset);
    fbBuilder.addOffset(1, ATMOSPHERIC_MODELOffset);
    fbBuilder.addOffset(2, GRAVITY_MODELOffset);
    fbBuilder.addInt32(3, _GRAVITY_DEGREE);
    fbBuilder.addInt32(4, _GRAVITY_ORDER);
    fbBuilder.addFloat64(5, _GM);
    fbBuilder.addOffset(6, N_BODY_PERTURBATIONSOffset);
    fbBuilder.addOffset(7, OCEAN_TIDES_MODELOffset);
    fbBuilder.addOffset(8, SOLID_TIDES_MODELOffset);
    fbBuilder.addOffset(9, ATMOSPHERIC_TIDES_MODELOffset);
    fbBuilder.addOffset(10, GEOPOTENTIAL_MODELOffset);
    fbBuilder.addOffset(11, SOLAR_RAD_PRESSUREOffset);
    fbBuilder.addOffset(12, ALBEDOOffset);
    fbBuilder.addOffset(13, THERMALOffset);
    fbBuilder.addOffset(14, RELATIVITYOffset);
    fbBuilder.addOffset(15, ATMOSPHERIC_DRAGOffset);
    fbBuilder.addFloat64(16, _FIXED_GEOMAG_KP);
    fbBuilder.addFloat64(17, _FIXED_F10P7);
    fbBuilder.addFloat64(18, _FIXED_F10P7_MEAN);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Maneuver {
  Maneuver._(this._bc, this._bcOffset);
  factory Maneuver(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Maneuver> reader = _ManeuverReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier for the maneuver.
  String? get MAN_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Basis of the maneuver plan (e.g., planned, predicted, estimated).
  String? get MAN_BASIS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Identifier of the maneuver device.
  String? get MAN_DEVICE_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Identifier of the previous maneuver.
  String? get MAN_PREV_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Purpose of the maneuver.
  String? get MAN_PURPOSE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Reference frame for the maneuver data.
  String? get MAN_REF_FRAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Epoch of the maneuver reference frame.
  String? get MAN_FRAME_EPOCH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Type of maneuver (e.g., IMPULSIVE, FINITE).
  String? get MAN_TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Start epoch of the maneuver.
  String? get MAN_EPOCH_START => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Duration of the maneuver.
  double get MAN_DURATION => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 22, 0.0);
  ///  Units for the maneuver data values.
  List<String>? get MAN_UNITS => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 24);
  ///  Data associated with the maneuver.
  List<String>? get DATA => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 26);
  ///  Comments related to the maneuver.
  List<String>? get MAN_COMMENT => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 28);

  @override
  String toString() {
    return 'Maneuver{MAN_ID: ${MAN_ID}, MAN_BASIS: ${MAN_BASIS}, MAN_DEVICE_ID: ${MAN_DEVICE_ID}, MAN_PREV_ID: ${MAN_PREV_ID}, MAN_PURPOSE: ${MAN_PURPOSE}, MAN_REF_FRAME: ${MAN_REF_FRAME}, MAN_FRAME_EPOCH: ${MAN_FRAME_EPOCH}, MAN_TYPE: ${MAN_TYPE}, MAN_EPOCH_START: ${MAN_EPOCH_START}, MAN_DURATION: ${MAN_DURATION}, MAN_UNITS: ${MAN_UNITS}, DATA: ${DATA}, MAN_COMMENT: ${MAN_COMMENT}}';
  }
}

class _ManeuverReader extends fb.TableReader<Maneuver> {
  const _ManeuverReader();

  @override
  Maneuver createObject(fb.BufferContext bc, int offset) => 
    Maneuver._(bc, offset);
}

class ManeuverBuilder {
  ManeuverBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(13);
  }

  int addManIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addManBasisOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addManDeviceIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addManPrevIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addManPurposeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addManRefFrameOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addManFrameEpochOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addManTypeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addManEpochStartOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addManDuration(double? MAN_DURATION) {
    fbBuilder.addFloat64(9, MAN_DURATION);
    return fbBuilder.offset;
  }
  int addManUnitsOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addManCommentOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ManeuverObjectBuilder extends fb.ObjectBuilder {
  final String? _MAN_ID;
  final String? _MAN_BASIS;
  final String? _MAN_DEVICE_ID;
  final String? _MAN_PREV_ID;
  final String? _MAN_PURPOSE;
  final String? _MAN_REF_FRAME;
  final String? _MAN_FRAME_EPOCH;
  final String? _MAN_TYPE;
  final String? _MAN_EPOCH_START;
  final double? _MAN_DURATION;
  final List<String>? _MAN_UNITS;
  final List<String>? _DATA;
  final List<String>? _MAN_COMMENT;

  ManeuverObjectBuilder({
    String? MAN_ID,
    String? MAN_BASIS,
    String? MAN_DEVICE_ID,
    String? MAN_PREV_ID,
    String? MAN_PURPOSE,
    String? MAN_REF_FRAME,
    String? MAN_FRAME_EPOCH,
    String? MAN_TYPE,
    String? MAN_EPOCH_START,
    double? MAN_DURATION,
    List<String>? MAN_UNITS,
    List<String>? DATA,
    List<String>? MAN_COMMENT,
  })
      : _MAN_ID = MAN_ID,
        _MAN_BASIS = MAN_BASIS,
        _MAN_DEVICE_ID = MAN_DEVICE_ID,
        _MAN_PREV_ID = MAN_PREV_ID,
        _MAN_PURPOSE = MAN_PURPOSE,
        _MAN_REF_FRAME = MAN_REF_FRAME,
        _MAN_FRAME_EPOCH = MAN_FRAME_EPOCH,
        _MAN_TYPE = MAN_TYPE,
        _MAN_EPOCH_START = MAN_EPOCH_START,
        _MAN_DURATION = MAN_DURATION,
        _MAN_UNITS = MAN_UNITS,
        _DATA = DATA,
        _MAN_COMMENT = MAN_COMMENT;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? MAN_IDOffset = _MAN_ID == null ? null
        : fbBuilder.writeString(_MAN_ID!);
    final int? MAN_BASISOffset = _MAN_BASIS == null ? null
        : fbBuilder.writeString(_MAN_BASIS!);
    final int? MAN_DEVICE_IDOffset = _MAN_DEVICE_ID == null ? null
        : fbBuilder.writeString(_MAN_DEVICE_ID!);
    final int? MAN_PREV_IDOffset = _MAN_PREV_ID == null ? null
        : fbBuilder.writeString(_MAN_PREV_ID!);
    final int? MAN_PURPOSEOffset = _MAN_PURPOSE == null ? null
        : fbBuilder.writeString(_MAN_PURPOSE!);
    final int? MAN_REF_FRAMEOffset = _MAN_REF_FRAME == null ? null
        : fbBuilder.writeString(_MAN_REF_FRAME!);
    final int? MAN_FRAME_EPOCHOffset = _MAN_FRAME_EPOCH == null ? null
        : fbBuilder.writeString(_MAN_FRAME_EPOCH!);
    final int? MAN_TYPEOffset = _MAN_TYPE == null ? null
        : fbBuilder.writeString(_MAN_TYPE!);
    final int? MAN_EPOCH_STARTOffset = _MAN_EPOCH_START == null ? null
        : fbBuilder.writeString(_MAN_EPOCH_START!);
    final int? MAN_UNITSOffset = _MAN_UNITS == null ? null
        : fbBuilder.writeList(_MAN_UNITS!.map(fbBuilder.writeString).toList());
    final int? DATAOffset = _DATA == null ? null
        : fbBuilder.writeList(_DATA!.map(fbBuilder.writeString).toList());
    final int? MAN_COMMENTOffset = _MAN_COMMENT == null ? null
        : fbBuilder.writeList(_MAN_COMMENT!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(13);
    fbBuilder.addOffset(0, MAN_IDOffset);
    fbBuilder.addOffset(1, MAN_BASISOffset);
    fbBuilder.addOffset(2, MAN_DEVICE_IDOffset);
    fbBuilder.addOffset(3, MAN_PREV_IDOffset);
    fbBuilder.addOffset(4, MAN_PURPOSEOffset);
    fbBuilder.addOffset(5, MAN_REF_FRAMEOffset);
    fbBuilder.addOffset(6, MAN_FRAME_EPOCHOffset);
    fbBuilder.addOffset(7, MAN_TYPEOffset);
    fbBuilder.addOffset(8, MAN_EPOCH_STARTOffset);
    fbBuilder.addFloat64(9, _MAN_DURATION);
    fbBuilder.addOffset(10, MAN_UNITSOffset);
    fbBuilder.addOffset(11, DATAOffset);
    fbBuilder.addOffset(12, MAN_COMMENTOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OrbitDetermination {
  OrbitDetermination._(this._bc, this._bcOffset);
  factory OrbitDetermination(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OrbitDetermination> reader = _OrbitDeterminationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Unique identifier for the orbit determination.
  String? get OD_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Identifier of the previous orbit determination.
  String? get OD_PREV_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Algorithm used for orbit determination.
  String? get OD_ALGORITHM => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Method used for orbit determination.
  String? get OD_METHOD => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Epoch of the orbit determination.
  String? get OD_EPOCH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Time tag of the orbit determination.
  String? get OD_TIME_TAG => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Process noise model used.
  String? get OD_PROCESS_NOISE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Covariance reduction techniques used.
  String? get OD_COV_REDUCTION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Noise models used.
  String? get OD_NOISE_MODELS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Types of observations used (e.g., RANGE, DOPPLER).
  List<String>? get OD_OBSERVATIONS_TYPE => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 22);
  ///  Number of observations used.
  int get OD_OBSERVATIONS_USED => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 24, 0);
  ///  Number of tracks used.
  int get OD_TRACKS_USED => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  ///  Data weighting scheme used.
  String? get OD_DATA_WEIGHTING => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Convergence criteria used.
  String? get OD_CONVERGENCE_CRITERIA => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Parameters estimated during orbit determination.
  List<String>? get OD_EST_PARAMETERS => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  ///  A priori data used for orbit determination.
  String? get OD_APRIORI_DATA => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Residuals from the orbit determination.
  String? get OD_RESIDUALS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);

  @override
  String toString() {
    return 'OrbitDetermination{OD_ID: ${OD_ID}, OD_PREV_ID: ${OD_PREV_ID}, OD_ALGORITHM: ${OD_ALGORITHM}, OD_METHOD: ${OD_METHOD}, OD_EPOCH: ${OD_EPOCH}, OD_TIME_TAG: ${OD_TIME_TAG}, OD_PROCESS_NOISE: ${OD_PROCESS_NOISE}, OD_COV_REDUCTION: ${OD_COV_REDUCTION}, OD_NOISE_MODELS: ${OD_NOISE_MODELS}, OD_OBSERVATIONS_TYPE: ${OD_OBSERVATIONS_TYPE}, OD_OBSERVATIONS_USED: ${OD_OBSERVATIONS_USED}, OD_TRACKS_USED: ${OD_TRACKS_USED}, OD_DATA_WEIGHTING: ${OD_DATA_WEIGHTING}, OD_CONVERGENCE_CRITERIA: ${OD_CONVERGENCE_CRITERIA}, OD_EST_PARAMETERS: ${OD_EST_PARAMETERS}, OD_APRIORI_DATA: ${OD_APRIORI_DATA}, OD_RESIDUALS: ${OD_RESIDUALS}}';
  }
}

class _OrbitDeterminationReader extends fb.TableReader<OrbitDetermination> {
  const _OrbitDeterminationReader();

  @override
  OrbitDetermination createObject(fb.BufferContext bc, int offset) => 
    OrbitDetermination._(bc, offset);
}

class OrbitDeterminationBuilder {
  OrbitDeterminationBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(17);
  }

  int addOdIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addOdPrevIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOdAlgorithmOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addOdMethodOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addOdEpochOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addOdTimeTagOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addOdProcessNoiseOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addOdCovReductionOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOdNoiseModelsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addOdObservationsTypeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addOdObservationsUsed(int? OD_OBSERVATIONS_USED) {
    fbBuilder.addInt32(10, OD_OBSERVATIONS_USED);
    return fbBuilder.offset;
  }
  int addOdTracksUsed(int? OD_TRACKS_USED) {
    fbBuilder.addInt32(11, OD_TRACKS_USED);
    return fbBuilder.offset;
  }
  int addOdDataWeightingOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addOdConvergenceCriteriaOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addOdEstParametersOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addOdAprioriDataOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addOdResidualsOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OrbitDeterminationObjectBuilder extends fb.ObjectBuilder {
  final String? _OD_ID;
  final String? _OD_PREV_ID;
  final String? _OD_ALGORITHM;
  final String? _OD_METHOD;
  final String? _OD_EPOCH;
  final String? _OD_TIME_TAG;
  final String? _OD_PROCESS_NOISE;
  final String? _OD_COV_REDUCTION;
  final String? _OD_NOISE_MODELS;
  final List<String>? _OD_OBSERVATIONS_TYPE;
  final int? _OD_OBSERVATIONS_USED;
  final int? _OD_TRACKS_USED;
  final String? _OD_DATA_WEIGHTING;
  final String? _OD_CONVERGENCE_CRITERIA;
  final List<String>? _OD_EST_PARAMETERS;
  final String? _OD_APRIORI_DATA;
  final String? _OD_RESIDUALS;

  OrbitDeterminationObjectBuilder({
    String? OD_ID,
    String? OD_PREV_ID,
    String? OD_ALGORITHM,
    String? OD_METHOD,
    String? OD_EPOCH,
    String? OD_TIME_TAG,
    String? OD_PROCESS_NOISE,
    String? OD_COV_REDUCTION,
    String? OD_NOISE_MODELS,
    List<String>? OD_OBSERVATIONS_TYPE,
    int? OD_OBSERVATIONS_USED,
    int? OD_TRACKS_USED,
    String? OD_DATA_WEIGHTING,
    String? OD_CONVERGENCE_CRITERIA,
    List<String>? OD_EST_PARAMETERS,
    String? OD_APRIORI_DATA,
    String? OD_RESIDUALS,
  })
      : _OD_ID = OD_ID,
        _OD_PREV_ID = OD_PREV_ID,
        _OD_ALGORITHM = OD_ALGORITHM,
        _OD_METHOD = OD_METHOD,
        _OD_EPOCH = OD_EPOCH,
        _OD_TIME_TAG = OD_TIME_TAG,
        _OD_PROCESS_NOISE = OD_PROCESS_NOISE,
        _OD_COV_REDUCTION = OD_COV_REDUCTION,
        _OD_NOISE_MODELS = OD_NOISE_MODELS,
        _OD_OBSERVATIONS_TYPE = OD_OBSERVATIONS_TYPE,
        _OD_OBSERVATIONS_USED = OD_OBSERVATIONS_USED,
        _OD_TRACKS_USED = OD_TRACKS_USED,
        _OD_DATA_WEIGHTING = OD_DATA_WEIGHTING,
        _OD_CONVERGENCE_CRITERIA = OD_CONVERGENCE_CRITERIA,
        _OD_EST_PARAMETERS = OD_EST_PARAMETERS,
        _OD_APRIORI_DATA = OD_APRIORI_DATA,
        _OD_RESIDUALS = OD_RESIDUALS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? OD_IDOffset = _OD_ID == null ? null
        : fbBuilder.writeString(_OD_ID!);
    final int? OD_PREV_IDOffset = _OD_PREV_ID == null ? null
        : fbBuilder.writeString(_OD_PREV_ID!);
    final int? OD_ALGORITHMOffset = _OD_ALGORITHM == null ? null
        : fbBuilder.writeString(_OD_ALGORITHM!);
    final int? OD_METHODOffset = _OD_METHOD == null ? null
        : fbBuilder.writeString(_OD_METHOD!);
    final int? OD_EPOCHOffset = _OD_EPOCH == null ? null
        : fbBuilder.writeString(_OD_EPOCH!);
    final int? OD_TIME_TAGOffset = _OD_TIME_TAG == null ? null
        : fbBuilder.writeString(_OD_TIME_TAG!);
    final int? OD_PROCESS_NOISEOffset = _OD_PROCESS_NOISE == null ? null
        : fbBuilder.writeString(_OD_PROCESS_NOISE!);
    final int? OD_COV_REDUCTIONOffset = _OD_COV_REDUCTION == null ? null
        : fbBuilder.writeString(_OD_COV_REDUCTION!);
    final int? OD_NOISE_MODELSOffset = _OD_NOISE_MODELS == null ? null
        : fbBuilder.writeString(_OD_NOISE_MODELS!);
    final int? OD_OBSERVATIONS_TYPEOffset = _OD_OBSERVATIONS_TYPE == null ? null
        : fbBuilder.writeList(_OD_OBSERVATIONS_TYPE!.map(fbBuilder.writeString).toList());
    final int? OD_DATA_WEIGHTINGOffset = _OD_DATA_WEIGHTING == null ? null
        : fbBuilder.writeString(_OD_DATA_WEIGHTING!);
    final int? OD_CONVERGENCE_CRITERIAOffset = _OD_CONVERGENCE_CRITERIA == null ? null
        : fbBuilder.writeString(_OD_CONVERGENCE_CRITERIA!);
    final int? OD_EST_PARAMETERSOffset = _OD_EST_PARAMETERS == null ? null
        : fbBuilder.writeList(_OD_EST_PARAMETERS!.map(fbBuilder.writeString).toList());
    final int? OD_APRIORI_DATAOffset = _OD_APRIORI_DATA == null ? null
        : fbBuilder.writeString(_OD_APRIORI_DATA!);
    final int? OD_RESIDUALSOffset = _OD_RESIDUALS == null ? null
        : fbBuilder.writeString(_OD_RESIDUALS!);
    fbBuilder.startTable(17);
    fbBuilder.addOffset(0, OD_IDOffset);
    fbBuilder.addOffset(1, OD_PREV_IDOffset);
    fbBuilder.addOffset(2, OD_ALGORITHMOffset);
    fbBuilder.addOffset(3, OD_METHODOffset);
    fbBuilder.addOffset(4, OD_EPOCHOffset);
    fbBuilder.addOffset(5, OD_TIME_TAGOffset);
    fbBuilder.addOffset(6, OD_PROCESS_NOISEOffset);
    fbBuilder.addOffset(7, OD_COV_REDUCTIONOffset);
    fbBuilder.addOffset(8, OD_NOISE_MODELSOffset);
    fbBuilder.addOffset(9, OD_OBSERVATIONS_TYPEOffset);
    fbBuilder.addInt32(10, _OD_OBSERVATIONS_USED);
    fbBuilder.addInt32(11, _OD_TRACKS_USED);
    fbBuilder.addOffset(12, OD_DATA_WEIGHTINGOffset);
    fbBuilder.addOffset(13, OD_CONVERGENCE_CRITERIAOffset);
    fbBuilder.addOffset(14, OD_EST_PARAMETERSOffset);
    fbBuilder.addOffset(15, OD_APRIORI_DATAOffset);
    fbBuilder.addOffset(16, OD_RESIDUALSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class UserDefinedParameters {
  UserDefinedParameters._(this._bc, this._bcOffset);
  factory UserDefinedParameters(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UserDefinedParameters> reader = _UserDefinedParametersReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Name of the user-defined parameter.
  String? get PARAM_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Value of the user-defined parameter.
  String? get PARAM_VALUE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'UserDefinedParameters{PARAM_NAME: ${PARAM_NAME}, PARAM_VALUE: ${PARAM_VALUE}}';
  }
}

class _UserDefinedParametersReader extends fb.TableReader<UserDefinedParameters> {
  const _UserDefinedParametersReader();

  @override
  UserDefinedParameters createObject(fb.BufferContext bc, int offset) => 
    UserDefinedParameters._(bc, offset);
}

class UserDefinedParametersBuilder {
  UserDefinedParametersBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addParamNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addParamValueOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UserDefinedParametersObjectBuilder extends fb.ObjectBuilder {
  final String? _PARAM_NAME;
  final String? _PARAM_VALUE;

  UserDefinedParametersObjectBuilder({
    String? PARAM_NAME,
    String? PARAM_VALUE,
  })
      : _PARAM_NAME = PARAM_NAME,
        _PARAM_VALUE = PARAM_VALUE;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? PARAM_NAMEOffset = _PARAM_NAME == null ? null
        : fbBuilder.writeString(_PARAM_NAME!);
    final int? PARAM_VALUEOffset = _PARAM_VALUE == null ? null
        : fbBuilder.writeString(_PARAM_VALUE!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, PARAM_NAMEOffset);
    fbBuilder.addOffset(1, PARAM_VALUEOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OCM {
  OCM._(this._bc, this._bcOffset);
  factory OCM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OCM> reader = _OCMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Header section of the OCM.
  Header? get HEADER => Header.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ///  Metadata section of the OCM.
  Metadata? get METADATA => Metadata.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ///  Trajectory type (e.g., PROPAGATED, ESTIMATED).
  String? get TRAJ_TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  State vector data.
  List<StateVector>? get STATE_DATA => const fb.ListReader<StateVector>(StateVector.reader).vTableGetNullable(_bc, _bcOffset, 10);
  ///  Physical properties of the space object.
  PhysicalProperties? get PHYSICAL_PROPERTIES => PhysicalProperties.reader.vTableGetNullable(_bc, _bcOffset, 12);
  ///  Covariance data associated with the state vectors.
  List<StateVector>? get COVARIANCE_DATA => const fb.ListReader<StateVector>(StateVector.reader).vTableGetNullable(_bc, _bcOffset, 14);
  ///  Maneuver data.
  List<Maneuver>? get MANEUVER_DATA => const fb.ListReader<Maneuver>(Maneuver.reader).vTableGetNullable(_bc, _bcOffset, 16);
  ///  Perturbations parameters used.
  Perturbations? get PERTURBATIONS => Perturbations.reader.vTableGetNullable(_bc, _bcOffset, 18);
  ///  Orbit determination data.
  OrbitDetermination? get ORBIT_DETERMINATION => OrbitDetermination.reader.vTableGetNullable(_bc, _bcOffset, 20);
  ///  User-defined parameters and supplemental comments.
  List<UserDefinedParameters>? get USER_DEFINED_PARAMETERS => const fb.ListReader<UserDefinedParameters>(UserDefinedParameters.reader).vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'OCM{HEADER: ${HEADER}, METADATA: ${METADATA}, TRAJ_TYPE: ${TRAJ_TYPE}, STATE_DATA: ${STATE_DATA}, PHYSICAL_PROPERTIES: ${PHYSICAL_PROPERTIES}, COVARIANCE_DATA: ${COVARIANCE_DATA}, MANEUVER_DATA: ${MANEUVER_DATA}, PERTURBATIONS: ${PERTURBATIONS}, ORBIT_DETERMINATION: ${ORBIT_DETERMINATION}, USER_DEFINED_PARAMETERS: ${USER_DEFINED_PARAMETERS}}';
  }
}

class _OCMReader extends fb.TableReader<OCM> {
  const _OCMReader();

  @override
  OCM createObject(fb.BufferContext bc, int offset) => 
    OCM._(bc, offset);
}

class OCMBuilder {
  OCMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addHeaderOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTrajTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addStateDataOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addPhysicalPropertiesOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addCovarianceDataOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addManeuverDataOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addPerturbationsOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOrbitDeterminationOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addUserDefinedParametersOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OCMObjectBuilder extends fb.ObjectBuilder {
  final HeaderObjectBuilder? _HEADER;
  final MetadataObjectBuilder? _METADATA;
  final String? _TRAJ_TYPE;
  final List<StateVectorObjectBuilder>? _STATE_DATA;
  final PhysicalPropertiesObjectBuilder? _PHYSICAL_PROPERTIES;
  final List<StateVectorObjectBuilder>? _COVARIANCE_DATA;
  final List<ManeuverObjectBuilder>? _MANEUVER_DATA;
  final PerturbationsObjectBuilder? _PERTURBATIONS;
  final OrbitDeterminationObjectBuilder? _ORBIT_DETERMINATION;
  final List<UserDefinedParametersObjectBuilder>? _USER_DEFINED_PARAMETERS;

  OCMObjectBuilder({
    HeaderObjectBuilder? HEADER,
    MetadataObjectBuilder? METADATA,
    String? TRAJ_TYPE,
    List<StateVectorObjectBuilder>? STATE_DATA,
    PhysicalPropertiesObjectBuilder? PHYSICAL_PROPERTIES,
    List<StateVectorObjectBuilder>? COVARIANCE_DATA,
    List<ManeuverObjectBuilder>? MANEUVER_DATA,
    PerturbationsObjectBuilder? PERTURBATIONS,
    OrbitDeterminationObjectBuilder? ORBIT_DETERMINATION,
    List<UserDefinedParametersObjectBuilder>? USER_DEFINED_PARAMETERS,
  })
      : _HEADER = HEADER,
        _METADATA = METADATA,
        _TRAJ_TYPE = TRAJ_TYPE,
        _STATE_DATA = STATE_DATA,
        _PHYSICAL_PROPERTIES = PHYSICAL_PROPERTIES,
        _COVARIANCE_DATA = COVARIANCE_DATA,
        _MANEUVER_DATA = MANEUVER_DATA,
        _PERTURBATIONS = PERTURBATIONS,
        _ORBIT_DETERMINATION = ORBIT_DETERMINATION,
        _USER_DEFINED_PARAMETERS = USER_DEFINED_PARAMETERS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? HEADEROffset = _HEADER?.getOrCreateOffset(fbBuilder);
    final int? METADATAOffset = _METADATA?.getOrCreateOffset(fbBuilder);
    final int? TRAJ_TYPEOffset = _TRAJ_TYPE == null ? null
        : fbBuilder.writeString(_TRAJ_TYPE!);
    final int? STATE_DATAOffset = _STATE_DATA == null ? null
        : fbBuilder.writeList(_STATE_DATA!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? PHYSICAL_PROPERTIESOffset = _PHYSICAL_PROPERTIES?.getOrCreateOffset(fbBuilder);
    final int? COVARIANCE_DATAOffset = _COVARIANCE_DATA == null ? null
        : fbBuilder.writeList(_COVARIANCE_DATA!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? MANEUVER_DATAOffset = _MANEUVER_DATA == null ? null
        : fbBuilder.writeList(_MANEUVER_DATA!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? PERTURBATIONSOffset = _PERTURBATIONS?.getOrCreateOffset(fbBuilder);
    final int? ORBIT_DETERMINATIONOffset = _ORBIT_DETERMINATION?.getOrCreateOffset(fbBuilder);
    final int? USER_DEFINED_PARAMETERSOffset = _USER_DEFINED_PARAMETERS == null ? null
        : fbBuilder.writeList(_USER_DEFINED_PARAMETERS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(10);
    fbBuilder.addOffset(0, HEADEROffset);
    fbBuilder.addOffset(1, METADATAOffset);
    fbBuilder.addOffset(2, TRAJ_TYPEOffset);
    fbBuilder.addOffset(3, STATE_DATAOffset);
    fbBuilder.addOffset(4, PHYSICAL_PROPERTIESOffset);
    fbBuilder.addOffset(5, COVARIANCE_DATAOffset);
    fbBuilder.addOffset(6, MANEUVER_DATAOffset);
    fbBuilder.addOffset(7, PERTURBATIONSOffset);
    fbBuilder.addOffset(8, ORBIT_DETERMINATIONOffset);
    fbBuilder.addOffset(9, USER_DEFINED_PARAMETERSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OCMCOLLECTION {
  OCMCOLLECTION._(this._bc, this._bcOffset);
  factory OCMCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OCMCOLLECTION> reader = _OCMCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Collection of OCM records.
  List<OCM>? get RECORDS => const fb.ListReader<OCM>(OCM.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'OCMCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _OCMCOLLECTIONReader extends fb.TableReader<OCMCOLLECTION> {
  const _OCMCOLLECTIONReader();

  @override
  OCMCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    OCMCOLLECTION._(bc, offset);
}

class OCMCOLLECTIONBuilder {
  OCMCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OCMCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<OCMObjectBuilder>? _RECORDS;

  OCMCOLLECTIONObjectBuilder({
    List<OCMObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
