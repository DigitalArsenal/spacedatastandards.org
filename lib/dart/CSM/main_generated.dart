// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


import './main_generated.dart';

///  Conjunction Summary Message
class CSM {
  CSM._(this._bc, this._bcOffset);
  factory CSM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CSM> reader = _CSMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Satellite name for the first object
  CAT? get OBJECT_1 => CAT.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ///  Days since epoch for the first object
  double get DSE_1 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);
  ///  Satellite name for the second object
  CAT? get OBJECT_2 => CAT.reader.vTableGetNullable(_bc, _bcOffset, 8);
  ///  Days since epoch for the second object
  double get DSE_2 => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  ///  Time of closest approach as a Unix timestamp
  double get TCA => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  ///  The distance or range between the two objects at TCA
  double get TCA_RANGE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  ///  The magnitude of the relative velocity at TCA
  double get TCA_RELATIVE_SPEED => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 16, 0.0);
  ///  Maximum probability
  double get MAX_PROB => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 18, 0.0);
  ///  Standard deviation that produces the maximum probability
  double get DILUTION => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 20, 0.0);

  @override
  String toString() {
    return 'CSM{OBJECT_1: ${OBJECT_1}, DSE_1: ${DSE_1}, OBJECT_2: ${OBJECT_2}, DSE_2: ${DSE_2}, TCA: ${TCA}, TCA_RANGE: ${TCA_RANGE}, TCA_RELATIVE_SPEED: ${TCA_RELATIVE_SPEED}, MAX_PROB: ${MAX_PROB}, DILUTION: ${DILUTION}}';
  }
}

class _CSMReader extends fb.TableReader<CSM> {
  const _CSMReader();

  @override
  CSM createObject(fb.BufferContext bc, int offset) => 
    CSM._(bc, offset);
}

class CSMBuilder {
  CSMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(9);
  }

  int addObject1Offset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDse1(double? DSE_1) {
    fbBuilder.addFloat64(1, DSE_1);
    return fbBuilder.offset;
  }
  int addObject2Offset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addDse2(double? DSE_2) {
    fbBuilder.addFloat64(3, DSE_2);
    return fbBuilder.offset;
  }
  int addTca(double? TCA) {
    fbBuilder.addFloat64(4, TCA);
    return fbBuilder.offset;
  }
  int addTcaRange(double? TCA_RANGE) {
    fbBuilder.addFloat64(5, TCA_RANGE);
    return fbBuilder.offset;
  }
  int addTcaRelativeSpeed(double? TCA_RELATIVE_SPEED) {
    fbBuilder.addFloat64(6, TCA_RELATIVE_SPEED);
    return fbBuilder.offset;
  }
  int addMaxProb(double? MAX_PROB) {
    fbBuilder.addFloat64(7, MAX_PROB);
    return fbBuilder.offset;
  }
  int addDilution(double? DILUTION) {
    fbBuilder.addFloat64(8, DILUTION);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CSMObjectBuilder extends fb.ObjectBuilder {
  final CATObjectBuilder? _OBJECT_1;
  final double? _DSE_1;
  final CATObjectBuilder? _OBJECT_2;
  final double? _DSE_2;
  final double? _TCA;
  final double? _TCA_RANGE;
  final double? _TCA_RELATIVE_SPEED;
  final double? _MAX_PROB;
  final double? _DILUTION;

  CSMObjectBuilder({
    CATObjectBuilder? OBJECT_1,
    double? DSE_1,
    CATObjectBuilder? OBJECT_2,
    double? DSE_2,
    double? TCA,
    double? TCA_RANGE,
    double? TCA_RELATIVE_SPEED,
    double? MAX_PROB,
    double? DILUTION,
  })
      : _OBJECT_1 = OBJECT_1,
        _DSE_1 = DSE_1,
        _OBJECT_2 = OBJECT_2,
        _DSE_2 = DSE_2,
        _TCA = TCA,
        _TCA_RANGE = TCA_RANGE,
        _TCA_RELATIVE_SPEED = TCA_RELATIVE_SPEED,
        _MAX_PROB = MAX_PROB,
        _DILUTION = DILUTION;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? OBJECT_1Offset = _OBJECT_1?.getOrCreateOffset(fbBuilder);
    final int? OBJECT_2Offset = _OBJECT_2?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(9);
    fbBuilder.addOffset(0, OBJECT_1Offset);
    fbBuilder.addFloat64(1, _DSE_1);
    fbBuilder.addOffset(2, OBJECT_2Offset);
    fbBuilder.addFloat64(3, _DSE_2);
    fbBuilder.addFloat64(4, _TCA);
    fbBuilder.addFloat64(5, _TCA_RANGE);
    fbBuilder.addFloat64(6, _TCA_RELATIVE_SPEED);
    fbBuilder.addFloat64(7, _MAX_PROB);
    fbBuilder.addFloat64(8, _DILUTION);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
