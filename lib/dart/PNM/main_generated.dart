// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  Publish Notification Message
///  This table includes a comprehensive set of cryptographic hashes and a digital signature for file publication.
class PNM {
  PNM._(this._bc, this._bcOffset);
  factory PNM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PNM> reader = _PNMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  IPFS Content Identifier (CID)
  ///  The hash of a file stored on the InterPlanetary File System (IPFS).
  ///  Refer to the section on IPFS integration for details.
  String? get IPFS_CID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Ethereum Digital Signature
  ///  Digital signature of the IPFS file hash using Ethereum's signing mechanism.
  ///  Refer to the Ethereum Blockchain integration section for details.
  String? get ETH_DIGITAL_SIGNATURE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  SHA-512 File Hash
  ///  SHA-512 hash of the file for additional security verification.
  ///  Detailed in the security features section of the document.
  String? get SHA_512_FILE_HASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  SHA-256 File Hash
  ///  SHA-256 hash of the file for additional security verification.
  ///  Detailed in the security features section of the document.
  String? get SHA_256_FILE_HASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  MD5 File Digest
  ///  MD5 digest of the file for backward compatibility with older systems.
  ///  Located in the legacy support section of the document.
  String? get MD5_FILE_DIGEST => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  SHA-1 File Hash
  ///  SHA-1 hash of the file, used in certain legacy systems for compatibility.
  ///  Refer to the legacy systems integration section for more information.
  String? get SHA_1_FILE_HASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Argon2 File Hash
  ///  Argon2 hash of the file, providing state-of-the-art password hashing.
  ///  This is mentioned in the advanced security measures section.
  String? get ARGON2_FILE_HASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Blake2b File Hash
  ///  Blake2b hash of the file, known for high-speed cryptographic hashing.
  ///  Refer to the high-performance security solutions section.
  String? get BLAKE2B_FILE_HASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  SHA-3 File Hash
  ///  SHA-3 hash of the file, offering a stronger alternative to SHA-2.
  ///  Located in the modern cryptographic standards section.
  String? get SHA_3_FILE_HASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  RIPEMD-160 File Hash
  ///  RIPEMD-160 hash of the file, often used in blockchain applications for address generation.
  ///  Discussed in the blockchain compatibility section.
  String? get RIPEMD_160_FILE_HASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  ///  Whirlpool File Hash
  ///  Whirlpool hash of the file, designed for integrity protection and digital fingerprinting.
  ///  Refer to the data integrity and authentication section.
  String? get WHIRLPOOL_FILE_HASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  Tiger File Hash
  ///  Tiger hash of the file, optimized for fast hashing on 64-bit platforms.
  ///  Detailed in the high-speed cryptographic operations section.
  String? get TIGER_FILE_HASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Cyclic Redundancy Check (CRC) 32
  ///  Cyclic redundancy check with a length of 32 bits.
  ///  Refer to CRC section for more details.
  String? get CRC32 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  ///  Adler-32 Checksum
  ///  Adler-32 checksum with a length of 32 bits.
  ///  Refer to the checksum section for more details.
  String? get ADLER32_CHECKSUM => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  ///  Universal Hash Function Family - Rabin Fingerprint
  ///  Variable-length hash function using Rabin fingerprinting.
  ///  Refer to the Universal hash function families section for details.
  String? get RABIN_FINGERPRINT => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  ///  Non-Cryptographic Hash Function - Pearson Hashing
  ///  Non-cryptographic hash function with a length of 8 bits or more, using XOR or table lookup.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get PEARSON_HASHING => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  ///  Keyed Cryptographic Hash Function - BLAKE2
  ///  Keyed hash function (prefix-MAC) with variable length.
  ///  Refer to the Keyed cryptographic hash functions section for details.
  String? get BLAKE2_KEYED_HASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  ///  Unkeyed Cryptographic Hash Function - BLAKE-256
  ///  Cryptographic hash function with a length of 256 bits, based on HAIFA structure.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get BLAKE_256 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  ///  CRC-8
  ///  Cyclic redundancy check with a length of 8 bits.
  ///  Refer to CRC section for more details.
  String? get CRC8 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  ///  CRC-16
  ///  Cyclic redundancy check with a length of 16 bits.
  ///  Refer to CRC section for more details.
  String? get CRC16 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  ///  CRC-64
  ///  Cyclic redundancy check with a length of 64 bits.
  ///  Refer to CRC section for more details.
  String? get CRC64 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  ///  BSD Checksum
  ///  BSD checksum with a length of 16 bits.
  ///  Refer to the checksum section for more details.
  String? get BSD_CHECKSUM => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 46);
  ///  SYSV Checksum
  ///  SYSV checksum with a length of 16 bits.
  ///  Refer to the checksum section for more details.
  String? get SYSV_CHECKSUM => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  ///  Sum8
  ///  Sum with a length of 8 bits.
  ///  Refer to the checksum section for more details.
  String? get SUM8 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 50);
  ///  Internet Checksum
  ///  Internet checksum with a length of 16 bits.
  ///  Refer to the checksum section for more details.
  String? get INTERNET_CHECKSUM => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 52);
  ///  Sum24
  ///  Sum with a length of 24 bits.
  ///  Refer to the checksum section for more details.
  String? get SUM24 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  ///  Sum32
  ///  Sum with a length of 32 bits.
  ///  Refer to the checksum section for more details.
  String? get SUM32 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  Fletcher-4
  ///  Sum with a length of 4 bits.
  ///  Refer to the checksum section for more details.
  String? get FLETCHER_4 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 58);
  ///  Fletcher-8
  ///  Sum with a length of 8 bits.
  ///  Refer to the checksum section for more details.
  String? get FLETCHER_8 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 60);
  ///  Fletcher-16
  ///  Sum with a length of 16 bits.
  ///  Refer to the checksum section for more details.
  String? get FLETCHER_16 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  ///  Fletcher-32
  ///  Sum with a length of 32 bits.
  ///  Refer to the checksum section for more details.
  String? get FLETCHER_32 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 64);
  ///  Luhn Algorithm
  ///  Luhn algorithm with a length of 1 decimal digit.
  ///  Refer to the checksum section for more details.
  String? get LUNH_ALGORITHM => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  ///  Verhoeff Algorithm
  ///  Verhoeff algorithm with a length of 1 decimal digit.
  ///  Refer to the checksum section for more details.
  String? get VERHOEFF_ALGORITHM => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 68);
  ///  Damm Algorithm
  ///  Damm algorithm with a length of 1 decimal digit.
  ///  Refer to the checksum section for more details.
  String? get DAMM_ALGORITHM => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 70);
  ///  Universal Hash Function Family - Tabulation Hashing
  ///  Variable-length hash function using tabulation hashing.
  ///  Refer to the Universal hash function families section for details.
  String? get TABULATION_HASHING => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 72);
  ///  Universal Hash Function Family - Universal One-Way Hash Function
  ///  Universal one-way hash function with arbitrary length.
  ///  Refer to the Universal hash function families section for details.
  String? get UNIVERSAL_ONE_WAY_HASH_FUNCTION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 74);
  ///  Universal Hash Function Family - Zobrist Hashing
  ///  Variable-length hash function using Zobrist hashing.
  ///  Refer to the Universal hash function families section for details.
  String? get ZOBRIST_HASHING => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 76);
  ///  Non-Cryptographic Hash Function - Paul Hsieh's SuperFastHash
  ///  Non-cryptographic hash function with a length of 32 bits.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get PAUL_HSIEHS_SUPERFASTHASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 78);
  ///  Non-Cryptographic Hash Function - Buzhash
  ///  Non-cryptographic hash function with variable length.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get BUZHASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 80);
  ///  Non-Cryptographic Hash Function - Fowler-Noll-Vo Hash Function (FNV Hash)
  ///  Non-cryptographic hash function with variable length.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get FNV_HASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 82);
  ///  Non-Cryptographic Hash Function - Jenkins Hash Function
  ///  Non-cryptographic hash function with a length of 32 or 64 bits.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get JENKINS_HASH_FUNCTION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 84);
  ///  Non-Cryptographic Hash Function - Bernstein's Hash (djb2)
  ///  Non-cryptographic hash function with a length of 32 or 64 bits.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get BERNSTEINS_HASH_DJB2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 86);
  ///  Non-Cryptographic Hash Function - PJW Hash / Elf Hash
  ///  Non-cryptographic hash function with a length of 32 or 64 bits.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get PJW_HASH_ELF_HASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 88);
  ///  Non-Cryptographic Hash Function - MurmurHash
  ///  Non-cryptographic hash function with a length of 32, 64, or 128 bits.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get MURMURHASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 90);
  ///  Non-Cryptographic Hash Function - Fast-Hash
  ///  Non-cryptographic hash function with a length of 32 or 64 bits.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get FAST_HASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 92);
  ///  Non-Cryptographic Hash Function - SpookyHash
  ///  Non-cryptographic hash function with a length of 32, 64, or 128 bits.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get SPOOKYHASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 94);
  ///  Non-Cryptographic Hash Function - CityHash
  ///  Non-cryptographic hash function with a length of 32, 64, 128, or 256 bits.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get CITYHASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 96);
  ///  Non-Cryptographic Hash Function - FarmHash
  ///  Non-cryptographic hash function with a length of 32, 64, or 128 bits.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get FARMHASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 98);
  ///  Non-Cryptographic Hash Function - MetroHash
  ///  Non-cryptographic hash function with a length of 64 or 128 bits.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get METROHASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 100);
  ///  Non-Cryptographic Hash Function - Numeric Hash (nhash)
  ///  Non-cryptographic hash function with variable length.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get NUMERIC_HASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 102);
  ///  Non-Cryptographic Hash Function - xxHash
  ///  Non-cryptographic hash function with a length of 32, 64, or 128 bits.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get XXHASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 104);
  ///  Non-Cryptographic Hash Function - t1ha (Fast Positive Hash)
  ///  Non-cryptographic hash function with a length of 64 or 128 bits.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get T1HA => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 106);
  ///  Non-Cryptographic Hash Function - GxHash
  ///  Non-cryptographic hash function with a length of 32, 64, or 128 bits.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get GXHASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 108);
  ///  Non-Cryptographic Hash Function - pHash
  ///  Non-cryptographic hash function with fixed or variable length.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get PHASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 110);
  ///  Non-Cryptographic Hash Function - dhash
  ///  Non-cryptographic hash function with a length of 128 bits.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get DHASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 112);
  ///  Non-Cryptographic Hash Function - SDBM
  ///  Non-cryptographic hash function with a length of 32 or 64 bits.
  ///  Refer to the Non-cryptographic hash functions section for details.
  String? get SDBM => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 114);
  ///  Unkeyed Cryptographic Hash Function - OSDB Hash
  ///  Cryptographic hash function with a length of 64 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get OSDB_HASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 116);
  ///  Unkeyed Cryptographic Hash Function - komihash
  ///  Cryptographic hash function with a length of 64 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get KOMIHASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 118);
  ///  Keyed Cryptographic Hash Function - BLAKE3
  ///  Keyed hash function with arbitrary length.
  ///  Refer to the Keyed cryptographic hash functions section for details.
  String? get BLAKE3 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 120);
  ///  Unkeyed Cryptographic Hash Function - ECOH
  ///  Cryptographic hash function with a length of 224 to 512 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get ECOH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 122);
  ///  Unkeyed Cryptographic Hash Function - FSB
  ///  Cryptographic hash function with a length of 160 to 512 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get FSB => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 124);
  ///  Unkeyed Cryptographic Hash Function - GOST
  ///  Cryptographic hash function with a length of 256 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get GOST => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 126);
  ///  Unkeyed Cryptographic Hash Function - Grøstl
  ///  Cryptographic hash function with a length of up to 512 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get GROSTL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 128);
  ///  Unkeyed Cryptographic Hash Function - HAS-160
  ///  Cryptographic hash function with a length of 160 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get HAS_160 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 130);
  ///  Unkeyed Cryptographic Hash Function - HAVAL
  ///  Cryptographic hash function with a length of 128 to 256 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get HAVAL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 132);
  ///  Unkeyed Cryptographic Hash Function - JH
  ///  Cryptographic hash function with a length of 224 to 512 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get JH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 134);
  ///  Unkeyed Cryptographic Hash Function - LSH
  ///  Cryptographic hash function with a length of 256 to 512 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get LSH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 136);
  ///  Unkeyed Cryptographic Hash Function - MD2
  ///  Cryptographic hash function with a length of 128 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get MD2 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 138);
  ///  Unkeyed Cryptographic Hash Function - MD4
  ///  Cryptographic hash function with a length of 128 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get MD4 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 140);
  ///  Unkeyed Cryptographic Hash Function - MD5
  ///  Cryptographic hash function with a length of 128 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get MD5 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 142);
  ///  Unkeyed Cryptographic Hash Function - MD6
  ///  Cryptographic hash function with a length of up to 512 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get MD6 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 144);
  ///  Unkeyed Cryptographic Hash Function - RadioGatún
  ///  Cryptographic hash function with arbitrary length.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get RADIOGATUN => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 146);
  ///  Unkeyed Cryptographic Hash Function - RIPEMD
  ///  Cryptographic hash function with a length of 128 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get RIPEMD => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 148);
  ///  Unkeyed Cryptographic Hash Function - RIPEMD-128
  ///  Cryptographic hash function with a length of 128 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get RIPEMD_128 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 150);
  ///  Unkeyed Cryptographic Hash Function - RIPEMD-256
  ///  Cryptographic hash function with a length of 256 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get RIPEMD_256 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 152);
  ///  Unkeyed Cryptographic Hash Function - RIPEMD-320
  ///  Cryptographic hash function with a length of 320 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get RIPEMD_320 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 154);
  ///  Unkeyed Cryptographic Hash Function - SHA-1
  ///  Cryptographic hash function with a length of 160 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get SHA_1 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 156);
  ///  Unkeyed Cryptographic Hash Function - SHA-224
  ///  Cryptographic hash function with a length of 224 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get SHA_224 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 158);
  ///  Unkeyed Cryptographic Hash Function - SHA-256
  ///  Cryptographic hash function with a length of 256 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get SHA_256 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 160);
  ///  Unkeyed Cryptographic Hash Function - SHA-384
  ///  Cryptographic hash function with a length of 384 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get SHA_384 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 162);
  ///  Unkeyed Cryptographic Hash Function - SHA-512
  ///  Cryptographic hash function with a length of 512 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get SHA_512 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 164);
  ///  Unkeyed Cryptographic Hash Function - SHA-3
  ///  Cryptographic hash function with arbitrary length.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get SHA_3 => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 166);
  ///  Unkeyed Cryptographic Hash Function - Skein
  ///  Cryptographic hash function with arbitrary length.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get SKEIN => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 168);
  ///  Unkeyed Cryptographic Hash Function - Snefru
  ///  Cryptographic hash function with a length of 128 or 256 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get SNEFRU => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 170);
  ///  Unkeyed Cryptographic Hash Function - Spectral Hash
  ///  Cryptographic hash function with a length of 512 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get SPECTRAL_HASH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 172);
  ///  Unkeyed Cryptographic Hash Function - Streebog
  ///  Cryptographic hash function with a length of 256 or 512 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get STREEBOG => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 174);
  ///  Unkeyed Cryptographic Hash Function - SWIFFT
  ///  Cryptographic hash function with a length of 512 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get SWIFFT => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 176);
  ///  Unkeyed Cryptographic Hash Function - Tiger
  ///  Cryptographic hash function with a length of 192 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get TIGER => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 178);
  ///  Unkeyed Cryptographic Hash Function - Whirlpool
  ///  Cryptographic hash function with a length of 512 bits.
  ///  Refer to the Unkeyed cryptographic hash functions section for details.
  String? get WHIRLPOOL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 180);

  @override
  String toString() {
    return 'PNM{IPFS_CID: ${IPFS_CID}, ETH_DIGITAL_SIGNATURE: ${ETH_DIGITAL_SIGNATURE}, SHA_512_FILE_HASH: ${SHA_512_FILE_HASH}, SHA_256_FILE_HASH: ${SHA_256_FILE_HASH}, MD5_FILE_DIGEST: ${MD5_FILE_DIGEST}, SHA_1_FILE_HASH: ${SHA_1_FILE_HASH}, ARGON2_FILE_HASH: ${ARGON2_FILE_HASH}, BLAKE2B_FILE_HASH: ${BLAKE2B_FILE_HASH}, SHA_3_FILE_HASH: ${SHA_3_FILE_HASH}, RIPEMD_160_FILE_HASH: ${RIPEMD_160_FILE_HASH}, WHIRLPOOL_FILE_HASH: ${WHIRLPOOL_FILE_HASH}, TIGER_FILE_HASH: ${TIGER_FILE_HASH}, CRC32: ${CRC32}, ADLER32_CHECKSUM: ${ADLER32_CHECKSUM}, RABIN_FINGERPRINT: ${RABIN_FINGERPRINT}, PEARSON_HASHING: ${PEARSON_HASHING}, BLAKE2_KEYED_HASH: ${BLAKE2_KEYED_HASH}, BLAKE_256: ${BLAKE_256}, CRC8: ${CRC8}, CRC16: ${CRC16}, CRC64: ${CRC64}, BSD_CHECKSUM: ${BSD_CHECKSUM}, SYSV_CHECKSUM: ${SYSV_CHECKSUM}, SUM8: ${SUM8}, INTERNET_CHECKSUM: ${INTERNET_CHECKSUM}, SUM24: ${SUM24}, SUM32: ${SUM32}, FLETCHER_4: ${FLETCHER_4}, FLETCHER_8: ${FLETCHER_8}, FLETCHER_16: ${FLETCHER_16}, FLETCHER_32: ${FLETCHER_32}, LUNH_ALGORITHM: ${LUNH_ALGORITHM}, VERHOEFF_ALGORITHM: ${VERHOEFF_ALGORITHM}, DAMM_ALGORITHM: ${DAMM_ALGORITHM}, TABULATION_HASHING: ${TABULATION_HASHING}, UNIVERSAL_ONE_WAY_HASH_FUNCTION: ${UNIVERSAL_ONE_WAY_HASH_FUNCTION}, ZOBRIST_HASHING: ${ZOBRIST_HASHING}, PAUL_HSIEHS_SUPERFASTHASH: ${PAUL_HSIEHS_SUPERFASTHASH}, BUZHASH: ${BUZHASH}, FNV_HASH: ${FNV_HASH}, JENKINS_HASH_FUNCTION: ${JENKINS_HASH_FUNCTION}, BERNSTEINS_HASH_DJB2: ${BERNSTEINS_HASH_DJB2}, PJW_HASH_ELF_HASH: ${PJW_HASH_ELF_HASH}, MURMURHASH: ${MURMURHASH}, FAST_HASH: ${FAST_HASH}, SPOOKYHASH: ${SPOOKYHASH}, CITYHASH: ${CITYHASH}, FARMHASH: ${FARMHASH}, METROHASH: ${METROHASH}, NUMERIC_HASH: ${NUMERIC_HASH}, XXHASH: ${XXHASH}, T1HA: ${T1HA}, GXHASH: ${GXHASH}, PHASH: ${PHASH}, DHASH: ${DHASH}, SDBM: ${SDBM}, OSDB_HASH: ${OSDB_HASH}, KOMIHASH: ${KOMIHASH}, BLAKE3: ${BLAKE3}, ECOH: ${ECOH}, FSB: ${FSB}, GOST: ${GOST}, GROSTL: ${GROSTL}, HAS_160: ${HAS_160}, HAVAL: ${HAVAL}, JH: ${JH}, LSH: ${LSH}, MD2: ${MD2}, MD4: ${MD4}, MD5: ${MD5}, MD6: ${MD6}, RADIOGATUN: ${RADIOGATUN}, RIPEMD: ${RIPEMD}, RIPEMD_128: ${RIPEMD_128}, RIPEMD_256: ${RIPEMD_256}, RIPEMD_320: ${RIPEMD_320}, SHA_1: ${SHA_1}, SHA_224: ${SHA_224}, SHA_256: ${SHA_256}, SHA_384: ${SHA_384}, SHA_512: ${SHA_512}, SHA_3: ${SHA_3}, SKEIN: ${SKEIN}, SNEFRU: ${SNEFRU}, SPECTRAL_HASH: ${SPECTRAL_HASH}, STREEBOG: ${STREEBOG}, SWIFFT: ${SWIFFT}, TIGER: ${TIGER}, WHIRLPOOL: ${WHIRLPOOL}}';
  }
}

class _PNMReader extends fb.TableReader<PNM> {
  const _PNMReader();

  @override
  PNM createObject(fb.BufferContext bc, int offset) => 
    PNM._(bc, offset);
}

class PNMBuilder {
  PNMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(89);
  }

  int addIpfsCidOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addEthDigitalSignatureOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addSha512FileHashOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSha256FileHashOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMd5FileDigestOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addSha1FileHashOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addArgon2FileHashOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addBlake2BFileHashOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addSha3FileHashOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addRipemd160FileHashOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addWhirlpoolFileHashOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addTigerFileHashOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addCrc32Offset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addAdler32ChecksumOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addRabinFingerprintOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addPearsonHashingOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addBlake2KeyedHashOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addBlake256Offset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addCrc8Offset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addCrc16Offset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addCrc64Offset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addBsdChecksumOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addSysvChecksumOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addSum8Offset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addInternetChecksumOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addSum24Offset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addSum32Offset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addFletcher4Offset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addFletcher8Offset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addFletcher16Offset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addFletcher32Offset(int? offset) {
    fbBuilder.addOffset(30, offset);
    return fbBuilder.offset;
  }
  int addLunhAlgorithmOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addVerhoeffAlgorithmOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addDammAlgorithmOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addTabulationHashingOffset(int? offset) {
    fbBuilder.addOffset(34, offset);
    return fbBuilder.offset;
  }
  int addUniversalOneWayHashFunctionOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addZobristHashingOffset(int? offset) {
    fbBuilder.addOffset(36, offset);
    return fbBuilder.offset;
  }
  int addPaulHsiehsSuperfasthashOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addBuzhashOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }
  int addFnvHashOffset(int? offset) {
    fbBuilder.addOffset(39, offset);
    return fbBuilder.offset;
  }
  int addJenkinsHashFunctionOffset(int? offset) {
    fbBuilder.addOffset(40, offset);
    return fbBuilder.offset;
  }
  int addBernsteinsHashDjb2Offset(int? offset) {
    fbBuilder.addOffset(41, offset);
    return fbBuilder.offset;
  }
  int addPjwHashElfHashOffset(int? offset) {
    fbBuilder.addOffset(42, offset);
    return fbBuilder.offset;
  }
  int addMurmurhashOffset(int? offset) {
    fbBuilder.addOffset(43, offset);
    return fbBuilder.offset;
  }
  int addFastHashOffset(int? offset) {
    fbBuilder.addOffset(44, offset);
    return fbBuilder.offset;
  }
  int addSpookyhashOffset(int? offset) {
    fbBuilder.addOffset(45, offset);
    return fbBuilder.offset;
  }
  int addCityhashOffset(int? offset) {
    fbBuilder.addOffset(46, offset);
    return fbBuilder.offset;
  }
  int addFarmhashOffset(int? offset) {
    fbBuilder.addOffset(47, offset);
    return fbBuilder.offset;
  }
  int addMetrohashOffset(int? offset) {
    fbBuilder.addOffset(48, offset);
    return fbBuilder.offset;
  }
  int addNumericHashOffset(int? offset) {
    fbBuilder.addOffset(49, offset);
    return fbBuilder.offset;
  }
  int addXxhashOffset(int? offset) {
    fbBuilder.addOffset(50, offset);
    return fbBuilder.offset;
  }
  int addT1HaOffset(int? offset) {
    fbBuilder.addOffset(51, offset);
    return fbBuilder.offset;
  }
  int addGxhashOffset(int? offset) {
    fbBuilder.addOffset(52, offset);
    return fbBuilder.offset;
  }
  int addPhashOffset(int? offset) {
    fbBuilder.addOffset(53, offset);
    return fbBuilder.offset;
  }
  int addDhashOffset(int? offset) {
    fbBuilder.addOffset(54, offset);
    return fbBuilder.offset;
  }
  int addSdbmOffset(int? offset) {
    fbBuilder.addOffset(55, offset);
    return fbBuilder.offset;
  }
  int addOsdbHashOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }
  int addKomihashOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }
  int addBlake3Offset(int? offset) {
    fbBuilder.addOffset(58, offset);
    return fbBuilder.offset;
  }
  int addEcohOffset(int? offset) {
    fbBuilder.addOffset(59, offset);
    return fbBuilder.offset;
  }
  int addFsbOffset(int? offset) {
    fbBuilder.addOffset(60, offset);
    return fbBuilder.offset;
  }
  int addGostOffset(int? offset) {
    fbBuilder.addOffset(61, offset);
    return fbBuilder.offset;
  }
  int addGrostlOffset(int? offset) {
    fbBuilder.addOffset(62, offset);
    return fbBuilder.offset;
  }
  int addHas160Offset(int? offset) {
    fbBuilder.addOffset(63, offset);
    return fbBuilder.offset;
  }
  int addHavalOffset(int? offset) {
    fbBuilder.addOffset(64, offset);
    return fbBuilder.offset;
  }
  int addJhOffset(int? offset) {
    fbBuilder.addOffset(65, offset);
    return fbBuilder.offset;
  }
  int addLshOffset(int? offset) {
    fbBuilder.addOffset(66, offset);
    return fbBuilder.offset;
  }
  int addMd2Offset(int? offset) {
    fbBuilder.addOffset(67, offset);
    return fbBuilder.offset;
  }
  int addMd4Offset(int? offset) {
    fbBuilder.addOffset(68, offset);
    return fbBuilder.offset;
  }
  int addMd5Offset(int? offset) {
    fbBuilder.addOffset(69, offset);
    return fbBuilder.offset;
  }
  int addMd6Offset(int? offset) {
    fbBuilder.addOffset(70, offset);
    return fbBuilder.offset;
  }
  int addRadiogatunOffset(int? offset) {
    fbBuilder.addOffset(71, offset);
    return fbBuilder.offset;
  }
  int addRipemdOffset(int? offset) {
    fbBuilder.addOffset(72, offset);
    return fbBuilder.offset;
  }
  int addRipemd128Offset(int? offset) {
    fbBuilder.addOffset(73, offset);
    return fbBuilder.offset;
  }
  int addRipemd256Offset(int? offset) {
    fbBuilder.addOffset(74, offset);
    return fbBuilder.offset;
  }
  int addRipemd320Offset(int? offset) {
    fbBuilder.addOffset(75, offset);
    return fbBuilder.offset;
  }
  int addSha1Offset(int? offset) {
    fbBuilder.addOffset(76, offset);
    return fbBuilder.offset;
  }
  int addSha224Offset(int? offset) {
    fbBuilder.addOffset(77, offset);
    return fbBuilder.offset;
  }
  int addSha256Offset(int? offset) {
    fbBuilder.addOffset(78, offset);
    return fbBuilder.offset;
  }
  int addSha384Offset(int? offset) {
    fbBuilder.addOffset(79, offset);
    return fbBuilder.offset;
  }
  int addSha512Offset(int? offset) {
    fbBuilder.addOffset(80, offset);
    return fbBuilder.offset;
  }
  int addSha3Offset(int? offset) {
    fbBuilder.addOffset(81, offset);
    return fbBuilder.offset;
  }
  int addSkeinOffset(int? offset) {
    fbBuilder.addOffset(82, offset);
    return fbBuilder.offset;
  }
  int addSnefruOffset(int? offset) {
    fbBuilder.addOffset(83, offset);
    return fbBuilder.offset;
  }
  int addSpectralHashOffset(int? offset) {
    fbBuilder.addOffset(84, offset);
    return fbBuilder.offset;
  }
  int addStreebogOffset(int? offset) {
    fbBuilder.addOffset(85, offset);
    return fbBuilder.offset;
  }
  int addSwifftOffset(int? offset) {
    fbBuilder.addOffset(86, offset);
    return fbBuilder.offset;
  }
  int addTigerOffset(int? offset) {
    fbBuilder.addOffset(87, offset);
    return fbBuilder.offset;
  }
  int addWhirlpoolOffset(int? offset) {
    fbBuilder.addOffset(88, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PNMObjectBuilder extends fb.ObjectBuilder {
  final String? _IPFS_CID;
  final String? _ETH_DIGITAL_SIGNATURE;
  final String? _SHA_512_FILE_HASH;
  final String? _SHA_256_FILE_HASH;
  final String? _MD5_FILE_DIGEST;
  final String? _SHA_1_FILE_HASH;
  final String? _ARGON2_FILE_HASH;
  final String? _BLAKE2B_FILE_HASH;
  final String? _SHA_3_FILE_HASH;
  final String? _RIPEMD_160_FILE_HASH;
  final String? _WHIRLPOOL_FILE_HASH;
  final String? _TIGER_FILE_HASH;
  final String? _CRC32;
  final String? _ADLER32_CHECKSUM;
  final String? _RABIN_FINGERPRINT;
  final String? _PEARSON_HASHING;
  final String? _BLAKE2_KEYED_HASH;
  final String? _BLAKE_256;
  final String? _CRC8;
  final String? _CRC16;
  final String? _CRC64;
  final String? _BSD_CHECKSUM;
  final String? _SYSV_CHECKSUM;
  final String? _SUM8;
  final String? _INTERNET_CHECKSUM;
  final String? _SUM24;
  final String? _SUM32;
  final String? _FLETCHER_4;
  final String? _FLETCHER_8;
  final String? _FLETCHER_16;
  final String? _FLETCHER_32;
  final String? _LUNH_ALGORITHM;
  final String? _VERHOEFF_ALGORITHM;
  final String? _DAMM_ALGORITHM;
  final String? _TABULATION_HASHING;
  final String? _UNIVERSAL_ONE_WAY_HASH_FUNCTION;
  final String? _ZOBRIST_HASHING;
  final String? _PAUL_HSIEHS_SUPERFASTHASH;
  final String? _BUZHASH;
  final String? _FNV_HASH;
  final String? _JENKINS_HASH_FUNCTION;
  final String? _BERNSTEINS_HASH_DJB2;
  final String? _PJW_HASH_ELF_HASH;
  final String? _MURMURHASH;
  final String? _FAST_HASH;
  final String? _SPOOKYHASH;
  final String? _CITYHASH;
  final String? _FARMHASH;
  final String? _METROHASH;
  final String? _NUMERIC_HASH;
  final String? _XXHASH;
  final String? _T1HA;
  final String? _GXHASH;
  final String? _PHASH;
  final String? _DHASH;
  final String? _SDBM;
  final String? _OSDB_HASH;
  final String? _KOMIHASH;
  final String? _BLAKE3;
  final String? _ECOH;
  final String? _FSB;
  final String? _GOST;
  final String? _GROSTL;
  final String? _HAS_160;
  final String? _HAVAL;
  final String? _JH;
  final String? _LSH;
  final String? _MD2;
  final String? _MD4;
  final String? _MD5;
  final String? _MD6;
  final String? _RADIOGATUN;
  final String? _RIPEMD;
  final String? _RIPEMD_128;
  final String? _RIPEMD_256;
  final String? _RIPEMD_320;
  final String? _SHA_1;
  final String? _SHA_224;
  final String? _SHA_256;
  final String? _SHA_384;
  final String? _SHA_512;
  final String? _SHA_3;
  final String? _SKEIN;
  final String? _SNEFRU;
  final String? _SPECTRAL_HASH;
  final String? _STREEBOG;
  final String? _SWIFFT;
  final String? _TIGER;
  final String? _WHIRLPOOL;

  PNMObjectBuilder({
    String? IPFS_CID,
    String? ETH_DIGITAL_SIGNATURE,
    String? SHA_512_FILE_HASH,
    String? SHA_256_FILE_HASH,
    String? MD5_FILE_DIGEST,
    String? SHA_1_FILE_HASH,
    String? ARGON2_FILE_HASH,
    String? BLAKE2B_FILE_HASH,
    String? SHA_3_FILE_HASH,
    String? RIPEMD_160_FILE_HASH,
    String? WHIRLPOOL_FILE_HASH,
    String? TIGER_FILE_HASH,
    String? CRC32,
    String? ADLER32_CHECKSUM,
    String? RABIN_FINGERPRINT,
    String? PEARSON_HASHING,
    String? BLAKE2_KEYED_HASH,
    String? BLAKE_256,
    String? CRC8,
    String? CRC16,
    String? CRC64,
    String? BSD_CHECKSUM,
    String? SYSV_CHECKSUM,
    String? SUM8,
    String? INTERNET_CHECKSUM,
    String? SUM24,
    String? SUM32,
    String? FLETCHER_4,
    String? FLETCHER_8,
    String? FLETCHER_16,
    String? FLETCHER_32,
    String? LUNH_ALGORITHM,
    String? VERHOEFF_ALGORITHM,
    String? DAMM_ALGORITHM,
    String? TABULATION_HASHING,
    String? UNIVERSAL_ONE_WAY_HASH_FUNCTION,
    String? ZOBRIST_HASHING,
    String? PAUL_HSIEHS_SUPERFASTHASH,
    String? BUZHASH,
    String? FNV_HASH,
    String? JENKINS_HASH_FUNCTION,
    String? BERNSTEINS_HASH_DJB2,
    String? PJW_HASH_ELF_HASH,
    String? MURMURHASH,
    String? FAST_HASH,
    String? SPOOKYHASH,
    String? CITYHASH,
    String? FARMHASH,
    String? METROHASH,
    String? NUMERIC_HASH,
    String? XXHASH,
    String? T1HA,
    String? GXHASH,
    String? PHASH,
    String? DHASH,
    String? SDBM,
    String? OSDB_HASH,
    String? KOMIHASH,
    String? BLAKE3,
    String? ECOH,
    String? FSB,
    String? GOST,
    String? GROSTL,
    String? HAS_160,
    String? HAVAL,
    String? JH,
    String? LSH,
    String? MD2,
    String? MD4,
    String? MD5,
    String? MD6,
    String? RADIOGATUN,
    String? RIPEMD,
    String? RIPEMD_128,
    String? RIPEMD_256,
    String? RIPEMD_320,
    String? SHA_1,
    String? SHA_224,
    String? SHA_256,
    String? SHA_384,
    String? SHA_512,
    String? SHA_3,
    String? SKEIN,
    String? SNEFRU,
    String? SPECTRAL_HASH,
    String? STREEBOG,
    String? SWIFFT,
    String? TIGER,
    String? WHIRLPOOL,
  })
      : _IPFS_CID = IPFS_CID,
        _ETH_DIGITAL_SIGNATURE = ETH_DIGITAL_SIGNATURE,
        _SHA_512_FILE_HASH = SHA_512_FILE_HASH,
        _SHA_256_FILE_HASH = SHA_256_FILE_HASH,
        _MD5_FILE_DIGEST = MD5_FILE_DIGEST,
        _SHA_1_FILE_HASH = SHA_1_FILE_HASH,
        _ARGON2_FILE_HASH = ARGON2_FILE_HASH,
        _BLAKE2B_FILE_HASH = BLAKE2B_FILE_HASH,
        _SHA_3_FILE_HASH = SHA_3_FILE_HASH,
        _RIPEMD_160_FILE_HASH = RIPEMD_160_FILE_HASH,
        _WHIRLPOOL_FILE_HASH = WHIRLPOOL_FILE_HASH,
        _TIGER_FILE_HASH = TIGER_FILE_HASH,
        _CRC32 = CRC32,
        _ADLER32_CHECKSUM = ADLER32_CHECKSUM,
        _RABIN_FINGERPRINT = RABIN_FINGERPRINT,
        _PEARSON_HASHING = PEARSON_HASHING,
        _BLAKE2_KEYED_HASH = BLAKE2_KEYED_HASH,
        _BLAKE_256 = BLAKE_256,
        _CRC8 = CRC8,
        _CRC16 = CRC16,
        _CRC64 = CRC64,
        _BSD_CHECKSUM = BSD_CHECKSUM,
        _SYSV_CHECKSUM = SYSV_CHECKSUM,
        _SUM8 = SUM8,
        _INTERNET_CHECKSUM = INTERNET_CHECKSUM,
        _SUM24 = SUM24,
        _SUM32 = SUM32,
        _FLETCHER_4 = FLETCHER_4,
        _FLETCHER_8 = FLETCHER_8,
        _FLETCHER_16 = FLETCHER_16,
        _FLETCHER_32 = FLETCHER_32,
        _LUNH_ALGORITHM = LUNH_ALGORITHM,
        _VERHOEFF_ALGORITHM = VERHOEFF_ALGORITHM,
        _DAMM_ALGORITHM = DAMM_ALGORITHM,
        _TABULATION_HASHING = TABULATION_HASHING,
        _UNIVERSAL_ONE_WAY_HASH_FUNCTION = UNIVERSAL_ONE_WAY_HASH_FUNCTION,
        _ZOBRIST_HASHING = ZOBRIST_HASHING,
        _PAUL_HSIEHS_SUPERFASTHASH = PAUL_HSIEHS_SUPERFASTHASH,
        _BUZHASH = BUZHASH,
        _FNV_HASH = FNV_HASH,
        _JENKINS_HASH_FUNCTION = JENKINS_HASH_FUNCTION,
        _BERNSTEINS_HASH_DJB2 = BERNSTEINS_HASH_DJB2,
        _PJW_HASH_ELF_HASH = PJW_HASH_ELF_HASH,
        _MURMURHASH = MURMURHASH,
        _FAST_HASH = FAST_HASH,
        _SPOOKYHASH = SPOOKYHASH,
        _CITYHASH = CITYHASH,
        _FARMHASH = FARMHASH,
        _METROHASH = METROHASH,
        _NUMERIC_HASH = NUMERIC_HASH,
        _XXHASH = XXHASH,
        _T1HA = T1HA,
        _GXHASH = GXHASH,
        _PHASH = PHASH,
        _DHASH = DHASH,
        _SDBM = SDBM,
        _OSDB_HASH = OSDB_HASH,
        _KOMIHASH = KOMIHASH,
        _BLAKE3 = BLAKE3,
        _ECOH = ECOH,
        _FSB = FSB,
        _GOST = GOST,
        _GROSTL = GROSTL,
        _HAS_160 = HAS_160,
        _HAVAL = HAVAL,
        _JH = JH,
        _LSH = LSH,
        _MD2 = MD2,
        _MD4 = MD4,
        _MD5 = MD5,
        _MD6 = MD6,
        _RADIOGATUN = RADIOGATUN,
        _RIPEMD = RIPEMD,
        _RIPEMD_128 = RIPEMD_128,
        _RIPEMD_256 = RIPEMD_256,
        _RIPEMD_320 = RIPEMD_320,
        _SHA_1 = SHA_1,
        _SHA_224 = SHA_224,
        _SHA_256 = SHA_256,
        _SHA_384 = SHA_384,
        _SHA_512 = SHA_512,
        _SHA_3 = SHA_3,
        _SKEIN = SKEIN,
        _SNEFRU = SNEFRU,
        _SPECTRAL_HASH = SPECTRAL_HASH,
        _STREEBOG = STREEBOG,
        _SWIFFT = SWIFFT,
        _TIGER = TIGER,
        _WHIRLPOOL = WHIRLPOOL;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? IPFS_CIDOffset = _IPFS_CID == null ? null
        : fbBuilder.writeString(_IPFS_CID!);
    final int? ETH_DIGITAL_SIGNATUREOffset = _ETH_DIGITAL_SIGNATURE == null ? null
        : fbBuilder.writeString(_ETH_DIGITAL_SIGNATURE!);
    final int? SHA_512_FILE_HASHOffset = _SHA_512_FILE_HASH == null ? null
        : fbBuilder.writeString(_SHA_512_FILE_HASH!);
    final int? SHA_256_FILE_HASHOffset = _SHA_256_FILE_HASH == null ? null
        : fbBuilder.writeString(_SHA_256_FILE_HASH!);
    final int? MD5_FILE_DIGESTOffset = _MD5_FILE_DIGEST == null ? null
        : fbBuilder.writeString(_MD5_FILE_DIGEST!);
    final int? SHA_1_FILE_HASHOffset = _SHA_1_FILE_HASH == null ? null
        : fbBuilder.writeString(_SHA_1_FILE_HASH!);
    final int? ARGON2_FILE_HASHOffset = _ARGON2_FILE_HASH == null ? null
        : fbBuilder.writeString(_ARGON2_FILE_HASH!);
    final int? BLAKE2B_FILE_HASHOffset = _BLAKE2B_FILE_HASH == null ? null
        : fbBuilder.writeString(_BLAKE2B_FILE_HASH!);
    final int? SHA_3_FILE_HASHOffset = _SHA_3_FILE_HASH == null ? null
        : fbBuilder.writeString(_SHA_3_FILE_HASH!);
    final int? RIPEMD_160_FILE_HASHOffset = _RIPEMD_160_FILE_HASH == null ? null
        : fbBuilder.writeString(_RIPEMD_160_FILE_HASH!);
    final int? WHIRLPOOL_FILE_HASHOffset = _WHIRLPOOL_FILE_HASH == null ? null
        : fbBuilder.writeString(_WHIRLPOOL_FILE_HASH!);
    final int? TIGER_FILE_HASHOffset = _TIGER_FILE_HASH == null ? null
        : fbBuilder.writeString(_TIGER_FILE_HASH!);
    final int? CRC32Offset = _CRC32 == null ? null
        : fbBuilder.writeString(_CRC32!);
    final int? ADLER32_CHECKSUMOffset = _ADLER32_CHECKSUM == null ? null
        : fbBuilder.writeString(_ADLER32_CHECKSUM!);
    final int? RABIN_FINGERPRINTOffset = _RABIN_FINGERPRINT == null ? null
        : fbBuilder.writeString(_RABIN_FINGERPRINT!);
    final int? PEARSON_HASHINGOffset = _PEARSON_HASHING == null ? null
        : fbBuilder.writeString(_PEARSON_HASHING!);
    final int? BLAKE2_KEYED_HASHOffset = _BLAKE2_KEYED_HASH == null ? null
        : fbBuilder.writeString(_BLAKE2_KEYED_HASH!);
    final int? BLAKE_256Offset = _BLAKE_256 == null ? null
        : fbBuilder.writeString(_BLAKE_256!);
    final int? CRC8Offset = _CRC8 == null ? null
        : fbBuilder.writeString(_CRC8!);
    final int? CRC16Offset = _CRC16 == null ? null
        : fbBuilder.writeString(_CRC16!);
    final int? CRC64Offset = _CRC64 == null ? null
        : fbBuilder.writeString(_CRC64!);
    final int? BSD_CHECKSUMOffset = _BSD_CHECKSUM == null ? null
        : fbBuilder.writeString(_BSD_CHECKSUM!);
    final int? SYSV_CHECKSUMOffset = _SYSV_CHECKSUM == null ? null
        : fbBuilder.writeString(_SYSV_CHECKSUM!);
    final int? SUM8Offset = _SUM8 == null ? null
        : fbBuilder.writeString(_SUM8!);
    final int? INTERNET_CHECKSUMOffset = _INTERNET_CHECKSUM == null ? null
        : fbBuilder.writeString(_INTERNET_CHECKSUM!);
    final int? SUM24Offset = _SUM24 == null ? null
        : fbBuilder.writeString(_SUM24!);
    final int? SUM32Offset = _SUM32 == null ? null
        : fbBuilder.writeString(_SUM32!);
    final int? FLETCHER_4Offset = _FLETCHER_4 == null ? null
        : fbBuilder.writeString(_FLETCHER_4!);
    final int? FLETCHER_8Offset = _FLETCHER_8 == null ? null
        : fbBuilder.writeString(_FLETCHER_8!);
    final int? FLETCHER_16Offset = _FLETCHER_16 == null ? null
        : fbBuilder.writeString(_FLETCHER_16!);
    final int? FLETCHER_32Offset = _FLETCHER_32 == null ? null
        : fbBuilder.writeString(_FLETCHER_32!);
    final int? LUNH_ALGORITHMOffset = _LUNH_ALGORITHM == null ? null
        : fbBuilder.writeString(_LUNH_ALGORITHM!);
    final int? VERHOEFF_ALGORITHMOffset = _VERHOEFF_ALGORITHM == null ? null
        : fbBuilder.writeString(_VERHOEFF_ALGORITHM!);
    final int? DAMM_ALGORITHMOffset = _DAMM_ALGORITHM == null ? null
        : fbBuilder.writeString(_DAMM_ALGORITHM!);
    final int? TABULATION_HASHINGOffset = _TABULATION_HASHING == null ? null
        : fbBuilder.writeString(_TABULATION_HASHING!);
    final int? UNIVERSAL_ONE_WAY_HASH_FUNCTIONOffset = _UNIVERSAL_ONE_WAY_HASH_FUNCTION == null ? null
        : fbBuilder.writeString(_UNIVERSAL_ONE_WAY_HASH_FUNCTION!);
    final int? ZOBRIST_HASHINGOffset = _ZOBRIST_HASHING == null ? null
        : fbBuilder.writeString(_ZOBRIST_HASHING!);
    final int? PAUL_HSIEHS_SUPERFASTHASHOffset = _PAUL_HSIEHS_SUPERFASTHASH == null ? null
        : fbBuilder.writeString(_PAUL_HSIEHS_SUPERFASTHASH!);
    final int? BUZHASHOffset = _BUZHASH == null ? null
        : fbBuilder.writeString(_BUZHASH!);
    final int? FNV_HASHOffset = _FNV_HASH == null ? null
        : fbBuilder.writeString(_FNV_HASH!);
    final int? JENKINS_HASH_FUNCTIONOffset = _JENKINS_HASH_FUNCTION == null ? null
        : fbBuilder.writeString(_JENKINS_HASH_FUNCTION!);
    final int? BERNSTEINS_HASH_DJB2Offset = _BERNSTEINS_HASH_DJB2 == null ? null
        : fbBuilder.writeString(_BERNSTEINS_HASH_DJB2!);
    final int? PJW_HASH_ELF_HASHOffset = _PJW_HASH_ELF_HASH == null ? null
        : fbBuilder.writeString(_PJW_HASH_ELF_HASH!);
    final int? MURMURHASHOffset = _MURMURHASH == null ? null
        : fbBuilder.writeString(_MURMURHASH!);
    final int? FAST_HASHOffset = _FAST_HASH == null ? null
        : fbBuilder.writeString(_FAST_HASH!);
    final int? SPOOKYHASHOffset = _SPOOKYHASH == null ? null
        : fbBuilder.writeString(_SPOOKYHASH!);
    final int? CITYHASHOffset = _CITYHASH == null ? null
        : fbBuilder.writeString(_CITYHASH!);
    final int? FARMHASHOffset = _FARMHASH == null ? null
        : fbBuilder.writeString(_FARMHASH!);
    final int? METROHASHOffset = _METROHASH == null ? null
        : fbBuilder.writeString(_METROHASH!);
    final int? NUMERIC_HASHOffset = _NUMERIC_HASH == null ? null
        : fbBuilder.writeString(_NUMERIC_HASH!);
    final int? XXHASHOffset = _XXHASH == null ? null
        : fbBuilder.writeString(_XXHASH!);
    final int? T1HAOffset = _T1HA == null ? null
        : fbBuilder.writeString(_T1HA!);
    final int? GXHASHOffset = _GXHASH == null ? null
        : fbBuilder.writeString(_GXHASH!);
    final int? PHASHOffset = _PHASH == null ? null
        : fbBuilder.writeString(_PHASH!);
    final int? DHASHOffset = _DHASH == null ? null
        : fbBuilder.writeString(_DHASH!);
    final int? SDBMOffset = _SDBM == null ? null
        : fbBuilder.writeString(_SDBM!);
    final int? OSDB_HASHOffset = _OSDB_HASH == null ? null
        : fbBuilder.writeString(_OSDB_HASH!);
    final int? KOMIHASHOffset = _KOMIHASH == null ? null
        : fbBuilder.writeString(_KOMIHASH!);
    final int? BLAKE3Offset = _BLAKE3 == null ? null
        : fbBuilder.writeString(_BLAKE3!);
    final int? ECOHOffset = _ECOH == null ? null
        : fbBuilder.writeString(_ECOH!);
    final int? FSBOffset = _FSB == null ? null
        : fbBuilder.writeString(_FSB!);
    final int? GOSTOffset = _GOST == null ? null
        : fbBuilder.writeString(_GOST!);
    final int? GROSTLOffset = _GROSTL == null ? null
        : fbBuilder.writeString(_GROSTL!);
    final int? HAS_160Offset = _HAS_160 == null ? null
        : fbBuilder.writeString(_HAS_160!);
    final int? HAVALOffset = _HAVAL == null ? null
        : fbBuilder.writeString(_HAVAL!);
    final int? JHOffset = _JH == null ? null
        : fbBuilder.writeString(_JH!);
    final int? LSHOffset = _LSH == null ? null
        : fbBuilder.writeString(_LSH!);
    final int? MD2Offset = _MD2 == null ? null
        : fbBuilder.writeString(_MD2!);
    final int? MD4Offset = _MD4 == null ? null
        : fbBuilder.writeString(_MD4!);
    final int? MD5Offset = _MD5 == null ? null
        : fbBuilder.writeString(_MD5!);
    final int? MD6Offset = _MD6 == null ? null
        : fbBuilder.writeString(_MD6!);
    final int? RADIOGATUNOffset = _RADIOGATUN == null ? null
        : fbBuilder.writeString(_RADIOGATUN!);
    final int? RIPEMDOffset = _RIPEMD == null ? null
        : fbBuilder.writeString(_RIPEMD!);
    final int? RIPEMD_128Offset = _RIPEMD_128 == null ? null
        : fbBuilder.writeString(_RIPEMD_128!);
    final int? RIPEMD_256Offset = _RIPEMD_256 == null ? null
        : fbBuilder.writeString(_RIPEMD_256!);
    final int? RIPEMD_320Offset = _RIPEMD_320 == null ? null
        : fbBuilder.writeString(_RIPEMD_320!);
    final int? SHA_1Offset = _SHA_1 == null ? null
        : fbBuilder.writeString(_SHA_1!);
    final int? SHA_224Offset = _SHA_224 == null ? null
        : fbBuilder.writeString(_SHA_224!);
    final int? SHA_256Offset = _SHA_256 == null ? null
        : fbBuilder.writeString(_SHA_256!);
    final int? SHA_384Offset = _SHA_384 == null ? null
        : fbBuilder.writeString(_SHA_384!);
    final int? SHA_512Offset = _SHA_512 == null ? null
        : fbBuilder.writeString(_SHA_512!);
    final int? SHA_3Offset = _SHA_3 == null ? null
        : fbBuilder.writeString(_SHA_3!);
    final int? SKEINOffset = _SKEIN == null ? null
        : fbBuilder.writeString(_SKEIN!);
    final int? SNEFRUOffset = _SNEFRU == null ? null
        : fbBuilder.writeString(_SNEFRU!);
    final int? SPECTRAL_HASHOffset = _SPECTRAL_HASH == null ? null
        : fbBuilder.writeString(_SPECTRAL_HASH!);
    final int? STREEBOGOffset = _STREEBOG == null ? null
        : fbBuilder.writeString(_STREEBOG!);
    final int? SWIFFTOffset = _SWIFFT == null ? null
        : fbBuilder.writeString(_SWIFFT!);
    final int? TIGEROffset = _TIGER == null ? null
        : fbBuilder.writeString(_TIGER!);
    final int? WHIRLPOOLOffset = _WHIRLPOOL == null ? null
        : fbBuilder.writeString(_WHIRLPOOL!);
    fbBuilder.startTable(89);
    fbBuilder.addOffset(0, IPFS_CIDOffset);
    fbBuilder.addOffset(1, ETH_DIGITAL_SIGNATUREOffset);
    fbBuilder.addOffset(2, SHA_512_FILE_HASHOffset);
    fbBuilder.addOffset(3, SHA_256_FILE_HASHOffset);
    fbBuilder.addOffset(4, MD5_FILE_DIGESTOffset);
    fbBuilder.addOffset(5, SHA_1_FILE_HASHOffset);
    fbBuilder.addOffset(6, ARGON2_FILE_HASHOffset);
    fbBuilder.addOffset(7, BLAKE2B_FILE_HASHOffset);
    fbBuilder.addOffset(8, SHA_3_FILE_HASHOffset);
    fbBuilder.addOffset(9, RIPEMD_160_FILE_HASHOffset);
    fbBuilder.addOffset(10, WHIRLPOOL_FILE_HASHOffset);
    fbBuilder.addOffset(11, TIGER_FILE_HASHOffset);
    fbBuilder.addOffset(12, CRC32Offset);
    fbBuilder.addOffset(13, ADLER32_CHECKSUMOffset);
    fbBuilder.addOffset(14, RABIN_FINGERPRINTOffset);
    fbBuilder.addOffset(15, PEARSON_HASHINGOffset);
    fbBuilder.addOffset(16, BLAKE2_KEYED_HASHOffset);
    fbBuilder.addOffset(17, BLAKE_256Offset);
    fbBuilder.addOffset(18, CRC8Offset);
    fbBuilder.addOffset(19, CRC16Offset);
    fbBuilder.addOffset(20, CRC64Offset);
    fbBuilder.addOffset(21, BSD_CHECKSUMOffset);
    fbBuilder.addOffset(22, SYSV_CHECKSUMOffset);
    fbBuilder.addOffset(23, SUM8Offset);
    fbBuilder.addOffset(24, INTERNET_CHECKSUMOffset);
    fbBuilder.addOffset(25, SUM24Offset);
    fbBuilder.addOffset(26, SUM32Offset);
    fbBuilder.addOffset(27, FLETCHER_4Offset);
    fbBuilder.addOffset(28, FLETCHER_8Offset);
    fbBuilder.addOffset(29, FLETCHER_16Offset);
    fbBuilder.addOffset(30, FLETCHER_32Offset);
    fbBuilder.addOffset(31, LUNH_ALGORITHMOffset);
    fbBuilder.addOffset(32, VERHOEFF_ALGORITHMOffset);
    fbBuilder.addOffset(33, DAMM_ALGORITHMOffset);
    fbBuilder.addOffset(34, TABULATION_HASHINGOffset);
    fbBuilder.addOffset(35, UNIVERSAL_ONE_WAY_HASH_FUNCTIONOffset);
    fbBuilder.addOffset(36, ZOBRIST_HASHINGOffset);
    fbBuilder.addOffset(37, PAUL_HSIEHS_SUPERFASTHASHOffset);
    fbBuilder.addOffset(38, BUZHASHOffset);
    fbBuilder.addOffset(39, FNV_HASHOffset);
    fbBuilder.addOffset(40, JENKINS_HASH_FUNCTIONOffset);
    fbBuilder.addOffset(41, BERNSTEINS_HASH_DJB2Offset);
    fbBuilder.addOffset(42, PJW_HASH_ELF_HASHOffset);
    fbBuilder.addOffset(43, MURMURHASHOffset);
    fbBuilder.addOffset(44, FAST_HASHOffset);
    fbBuilder.addOffset(45, SPOOKYHASHOffset);
    fbBuilder.addOffset(46, CITYHASHOffset);
    fbBuilder.addOffset(47, FARMHASHOffset);
    fbBuilder.addOffset(48, METROHASHOffset);
    fbBuilder.addOffset(49, NUMERIC_HASHOffset);
    fbBuilder.addOffset(50, XXHASHOffset);
    fbBuilder.addOffset(51, T1HAOffset);
    fbBuilder.addOffset(52, GXHASHOffset);
    fbBuilder.addOffset(53, PHASHOffset);
    fbBuilder.addOffset(54, DHASHOffset);
    fbBuilder.addOffset(55, SDBMOffset);
    fbBuilder.addOffset(56, OSDB_HASHOffset);
    fbBuilder.addOffset(57, KOMIHASHOffset);
    fbBuilder.addOffset(58, BLAKE3Offset);
    fbBuilder.addOffset(59, ECOHOffset);
    fbBuilder.addOffset(60, FSBOffset);
    fbBuilder.addOffset(61, GOSTOffset);
    fbBuilder.addOffset(62, GROSTLOffset);
    fbBuilder.addOffset(63, HAS_160Offset);
    fbBuilder.addOffset(64, HAVALOffset);
    fbBuilder.addOffset(65, JHOffset);
    fbBuilder.addOffset(66, LSHOffset);
    fbBuilder.addOffset(67, MD2Offset);
    fbBuilder.addOffset(68, MD4Offset);
    fbBuilder.addOffset(69, MD5Offset);
    fbBuilder.addOffset(70, MD6Offset);
    fbBuilder.addOffset(71, RADIOGATUNOffset);
    fbBuilder.addOffset(72, RIPEMDOffset);
    fbBuilder.addOffset(73, RIPEMD_128Offset);
    fbBuilder.addOffset(74, RIPEMD_256Offset);
    fbBuilder.addOffset(75, RIPEMD_320Offset);
    fbBuilder.addOffset(76, SHA_1Offset);
    fbBuilder.addOffset(77, SHA_224Offset);
    fbBuilder.addOffset(78, SHA_256Offset);
    fbBuilder.addOffset(79, SHA_384Offset);
    fbBuilder.addOffset(80, SHA_512Offset);
    fbBuilder.addOffset(81, SHA_3Offset);
    fbBuilder.addOffset(82, SKEINOffset);
    fbBuilder.addOffset(83, SNEFRUOffset);
    fbBuilder.addOffset(84, SPECTRAL_HASHOffset);
    fbBuilder.addOffset(85, STREEBOGOffset);
    fbBuilder.addOffset(86, SWIFFTOffset);
    fbBuilder.addOffset(87, TIGEROffset);
    fbBuilder.addOffset(88, WHIRLPOOLOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Collection of Publish Notification Messages
///  This table groups multiple PNM records for batch processing and management.
class PNM_COLLECTION {
  PNM_COLLECTION._(this._bc, this._bcOffset);
  factory PNM_COLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PNM_COLLECTION> reader = _PNM_COLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<PNM>? get RECORDS => const fb.ListReader<PNM>(PNM.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PNM_COLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _PNM_COLLECTIONReader extends fb.TableReader<PNM_COLLECTION> {
  const _PNM_COLLECTIONReader();

  @override
  PNM_COLLECTION createObject(fb.BufferContext bc, int offset) => 
    PNM_COLLECTION._(bc, offset);
}

class PNM_COLLECTIONBuilder {
  PNM_COLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PNM_COLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<PNMObjectBuilder>? _RECORDS;

  PNM_COLLECTIONObjectBuilder({
    List<PNMObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
