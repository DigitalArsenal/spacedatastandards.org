// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  Publish Notification Message
class PNM {
  PNM._(this._bc, this._bcOffset);
  factory PNM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PNM> reader = _PNMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  IPFS Content Identifier (CID)
  ///  The hash of a file stored on the InterPlanetary File System (IPFS).
  ///  Refer to the section on IPFS integration for details.
  String? get IPFS_CID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Unique identifier generated from the data provider's public key
  String? get KEY_ADDRESS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  SpaceDataStandards 4 Character File Identifier
  String? get FILE_IDENTIFIER => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'PNM{IPFS_CID: ${IPFS_CID}, KEY_ADDRESS: ${KEY_ADDRESS}, FILE_IDENTIFIER: ${FILE_IDENTIFIER}}';
  }
}

class _PNMReader extends fb.TableReader<PNM> {
  const _PNMReader();

  @override
  PNM createObject(fb.BufferContext bc, int offset) => 
    PNM._(bc, offset);
}

class PNMBuilder {
  PNMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addIpfsCidOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addKeyAddressOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFileIdentifierOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PNMObjectBuilder extends fb.ObjectBuilder {
  final String? _IPFS_CID;
  final String? _KEY_ADDRESS;
  final String? _FILE_IDENTIFIER;

  PNMObjectBuilder({
    String? IPFS_CID,
    String? KEY_ADDRESS,
    String? FILE_IDENTIFIER,
  })
      : _IPFS_CID = IPFS_CID,
        _KEY_ADDRESS = KEY_ADDRESS,
        _FILE_IDENTIFIER = FILE_IDENTIFIER;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? IPFS_CIDOffset = _IPFS_CID == null ? null
        : fbBuilder.writeString(_IPFS_CID!);
    final int? KEY_ADDRESSOffset = _KEY_ADDRESS == null ? null
        : fbBuilder.writeString(_KEY_ADDRESS!);
    final int? FILE_IDENTIFIEROffset = _FILE_IDENTIFIER == null ? null
        : fbBuilder.writeString(_FILE_IDENTIFIER!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, IPFS_CIDOffset);
    fbBuilder.addOffset(1, KEY_ADDRESSOffset);
    fbBuilder.addOffset(2, FILE_IDENTIFIEROffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Collection of Publish Notification Messages
///  This table groups multiple PNM records for batch processing and management.
class PNMCOLLECTION {
  PNMCOLLECTION._(this._bc, this._bcOffset);
  factory PNMCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PNMCOLLECTION> reader = _PNMCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<PNM>? get RECORDS => const fb.ListReader<PNM>(PNM.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PNMCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _PNMCOLLECTIONReader extends fb.TableReader<PNMCOLLECTION> {
  const _PNMCOLLECTIONReader();

  @override
  PNMCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    PNMCOLLECTION._(bc, offset);
}

class PNMCOLLECTIONBuilder {
  PNMCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PNMCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<PNMObjectBuilder>? _RECORDS;

  PNMCOLLECTIONObjectBuilder({
    List<PNMObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
