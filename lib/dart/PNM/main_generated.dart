// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  Publish Notification Message
class PNM {
  PNM._(this._bc, this._bcOffset);
  factory PNM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PNM> reader = _PNMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Multiformat Address
  ///  https://multiformats.io/multiaddr/
  ///  A universal address format for representing multiple network protocols. Examples include:
  ///  - /ip4/192.168.1.1/tcp/80 for an IPv4 address with TCP protocol
  ///  - /ip6zone/x/ip6/::1 for an IPv6 address with a zone
  ///  - /dns4/example.com for a domain name resolvable only to IPv4 addresses
  ///  - /ipfs/bafybeiccfclkdtucu6y4yc5cpr6y3yuinr67svmii46v5cfcrkp47ihehy/README.txt -IPFS address w/CID and path to `README.txt`.
  String? get MULTIFORMAT_ADDRESS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Publish Time OF THE Publish Notification Message
  String? get PUBLISH_TIMESTAMP => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Concatenated Content Identifier (CID)
  ///  This field is a unique ID for distributed systems (CID).
  ///  The CID provides a unique identifier within distributed systems, as detailed at https://github.com/multiformats/cid. 
  String? get CID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  File ID
  ///  This field is the file ID / Name
  String? get FID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Digital Signature of the CID
  ///  This is the digital signature of the CID, signed using the specified cryptographic method.
  String? get SIGNATURE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Timestamp Signature
  ///  Digital signature of the publish timestamp, using the specified cryptographic method for timestamp verification.
  String? get TIMESTAMP_SIGNATURE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Type of Cryptographic Signature Used
  ///  Specifies the type of cryptographic signature used for the SIGNATURE field, indicating the specific blockchain technology, such as Ethereum or BTC.
  String? get SIGNATURE_TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Type of Cryptographic Signature Used for Timestamp
  ///  Specifies the type of cryptographic signature used for the TIMESTAMP_SIGNATURE field, indicating the specific blockchain technology, such as Ethereum or BTC.
  String? get TIMESTAMP_SIGNATURE_TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'PNM{MULTIFORMAT_ADDRESS: ${MULTIFORMAT_ADDRESS}, PUBLISH_TIMESTAMP: ${PUBLISH_TIMESTAMP}, CID: ${CID}, FID: ${FID}, SIGNATURE: ${SIGNATURE}, TIMESTAMP_SIGNATURE: ${TIMESTAMP_SIGNATURE}, SIGNATURE_TYPE: ${SIGNATURE_TYPE}, TIMESTAMP_SIGNATURE_TYPE: ${TIMESTAMP_SIGNATURE_TYPE}}';
  }
}

class _PNMReader extends fb.TableReader<PNM> {
  const _PNMReader();

  @override
  PNM createObject(fb.BufferContext bc, int offset) => 
    PNM._(bc, offset);
}

class PNMBuilder {
  PNMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addMultiformatAddressOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPublishTimestampOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCidOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addFidOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSignatureOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTimestampSignatureOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSignatureTypeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addTimestampSignatureTypeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PNMObjectBuilder extends fb.ObjectBuilder {
  final String? _MULTIFORMAT_ADDRESS;
  final String? _PUBLISH_TIMESTAMP;
  final String? _CID;
  final String? _FID;
  final String? _SIGNATURE;
  final String? _TIMESTAMP_SIGNATURE;
  final String? _SIGNATURE_TYPE;
  final String? _TIMESTAMP_SIGNATURE_TYPE;

  PNMObjectBuilder({
    String? MULTIFORMAT_ADDRESS,
    String? PUBLISH_TIMESTAMP,
    String? CID,
    String? FID,
    String? SIGNATURE,
    String? TIMESTAMP_SIGNATURE,
    String? SIGNATURE_TYPE,
    String? TIMESTAMP_SIGNATURE_TYPE,
  })
      : _MULTIFORMAT_ADDRESS = MULTIFORMAT_ADDRESS,
        _PUBLISH_TIMESTAMP = PUBLISH_TIMESTAMP,
        _CID = CID,
        _FID = FID,
        _SIGNATURE = SIGNATURE,
        _TIMESTAMP_SIGNATURE = TIMESTAMP_SIGNATURE,
        _SIGNATURE_TYPE = SIGNATURE_TYPE,
        _TIMESTAMP_SIGNATURE_TYPE = TIMESTAMP_SIGNATURE_TYPE;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? MULTIFORMAT_ADDRESSOffset = _MULTIFORMAT_ADDRESS == null ? null
        : fbBuilder.writeString(_MULTIFORMAT_ADDRESS!);
    final int? PUBLISH_TIMESTAMPOffset = _PUBLISH_TIMESTAMP == null ? null
        : fbBuilder.writeString(_PUBLISH_TIMESTAMP!);
    final int? CIDOffset = _CID == null ? null
        : fbBuilder.writeString(_CID!);
    final int? FIDOffset = _FID == null ? null
        : fbBuilder.writeString(_FID!);
    final int? SIGNATUREOffset = _SIGNATURE == null ? null
        : fbBuilder.writeString(_SIGNATURE!);
    final int? TIMESTAMP_SIGNATUREOffset = _TIMESTAMP_SIGNATURE == null ? null
        : fbBuilder.writeString(_TIMESTAMP_SIGNATURE!);
    final int? SIGNATURE_TYPEOffset = _SIGNATURE_TYPE == null ? null
        : fbBuilder.writeString(_SIGNATURE_TYPE!);
    final int? TIMESTAMP_SIGNATURE_TYPEOffset = _TIMESTAMP_SIGNATURE_TYPE == null ? null
        : fbBuilder.writeString(_TIMESTAMP_SIGNATURE_TYPE!);
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, MULTIFORMAT_ADDRESSOffset);
    fbBuilder.addOffset(1, PUBLISH_TIMESTAMPOffset);
    fbBuilder.addOffset(2, CIDOffset);
    fbBuilder.addOffset(3, FIDOffset);
    fbBuilder.addOffset(4, SIGNATUREOffset);
    fbBuilder.addOffset(5, TIMESTAMP_SIGNATUREOffset);
    fbBuilder.addOffset(6, SIGNATURE_TYPEOffset);
    fbBuilder.addOffset(7, TIMESTAMP_SIGNATURE_TYPEOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
