// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class TimeSystem {
  final int value;
  const TimeSystem._(this.value);

  factory TimeSystem.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum TimeSystem');
    }
    return result;
  }

  static TimeSystem? _createOrNull(int? value) => 
      value == null ? null : TimeSystem.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 11;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Greenwich Mean Sidereal Time
  static const TimeSystem GMST = TimeSystem._(0);

  ///  Global Positioning System
  static const TimeSystem GPS = TimeSystem._(1);

  ///  Mission Elapsed Time
  static const TimeSystem MET = TimeSystem._(2);

  ///  Mission Relative Time
  static const TimeSystem MRT = TimeSystem._(3);

  ///  Spacecraft Clock (receiver) (requires rules for interpretation in ICD)
  static const TimeSystem SCLK = TimeSystem._(4);

  ///  International Atomic Time
  static const TimeSystem TAI = TimeSystem._(5);

  ///  Barycentric Coordinate Time
  static const TimeSystem TCB = TimeSystem._(6);

  ///  Barycentric Dynamical Time
  static const TimeSystem TDB = TimeSystem._(7);

  ///  Geocentric Coordinate Time
  static const TimeSystem TCG = TimeSystem._(8);

  ///  Terrestrial Time
  static const TimeSystem TT = TimeSystem._(9);

  ///  Universal Time
  static const TimeSystem UT1 = TimeSystem._(10);

  ///  Coordinated Universal Time
  static const TimeSystem UTC = TimeSystem._(11);
  static const Map<int, TimeSystem> values = {
    0: GMST,
    1: GPS,
    2: MET,
    3: MRT,
    4: SCLK,
    5: TAI,
    6: TCB,
    7: TDB,
    8: TCG,
    9: TT,
    10: UT1,
    11: UTC};

  static const fb.Reader<TimeSystem> reader = _TimeSystemReader();

  @override
  String toString() {
    return 'TimeSystem{value: $value}';
  }
}

class _TimeSystemReader extends fb.Reader<TimeSystem> {
  const _TimeSystemReader();

  @override
  int get size => 1;

  @override
  TimeSystem read(fb.BufferContext bc, int offset) =>
      TimeSystem.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Time System
class TIM {
  TIM._(this._bc, this._bcOffset);
  factory TIM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TIM> reader = _TIMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  TimeSystem get TIME_SYSTEM => TimeSystem.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0));

  @override
  String toString() {
    return 'TIM{TIME_SYSTEM: ${TIME_SYSTEM}}';
  }
}

class _TIMReader extends fb.TableReader<TIM> {
  const _TIMReader();

  @override
  TIM createObject(fb.BufferContext bc, int offset) => 
    TIM._(bc, offset);
}

class TIMBuilder {
  TIMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addTimeSystem(TimeSystem? TIME_SYSTEM) {
    fbBuilder.addInt8(0, TIME_SYSTEM?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TIMObjectBuilder extends fb.ObjectBuilder {
  final TimeSystem? _TIME_SYSTEM;

  TIMObjectBuilder({
    TimeSystem? TIME_SYSTEM,
  })
      : _TIME_SYSTEM = TIME_SYSTEM;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addInt8(0, _TIME_SYSTEM?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TIMCOLLECTION {
  TIMCOLLECTION._(this._bc, this._bcOffset);
  factory TIMCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TIMCOLLECTION> reader = _TIMCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<TIM>? get RECORDS => const fb.ListReader<TIM>(TIM.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'TIMCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _TIMCOLLECTIONReader extends fb.TableReader<TIMCOLLECTION> {
  const _TIMCOLLECTIONReader();

  @override
  TIMCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    TIMCOLLECTION._(bc, offset);
}

class TIMCOLLECTIONBuilder {
  TIMCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TIMCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<TIMObjectBuilder>? _RECORDS;

  TIMCOLLECTIONObjectBuilder({
    List<TIMObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
