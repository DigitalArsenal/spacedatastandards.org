// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  Encrypted Message Envelope
class EME {
  EME._(this._bc, this._bcOffset);
  factory EME(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EME> reader = _EMEReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  Encrypted data blob, containing the ciphertext of the original plaintext message.
  List<int>? get ENCRYPTED_BLOB => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  ///  Temporary public key used for the encryption session, contributing to the derivation of the shared secret.
  String? get EPHEMERAL_PUBLIC_KEY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Message Authentication Code to verify the integrity and authenticity of the encrypted message.
  String? get MAC => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Unique value used to ensure that the same plaintext produces a different ciphertext for each encryption.
  String? get NONCE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  Additional authentication tag used in some encryption schemes for integrity and authenticity verification.
  String? get TAG => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Initialization vector used to introduce randomness in the encryption process, enhancing security.
  String? get IV => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Identifier for the public key used, aiding in recipient key management and message decryption.
  String? get PUBLIC_KEY_IDENTIFIER => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ///  Specifies the set of cryptographic algorithms used in the encryption process.
  String? get CIPHER_SUITE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Parameters for the Key Derivation Function, guiding the process of deriving keys from the shared secret.
  String? get KDF_PARAMETERS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  ///  Parameters defining specific settings for the encryption algorithm, such as block size or operation mode.
  String? get ENCRYPTION_ALGORITHM_PARAMETERS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'EME{ENCRYPTED_BLOB: ${ENCRYPTED_BLOB}, EPHEMERAL_PUBLIC_KEY: ${EPHEMERAL_PUBLIC_KEY}, MAC: ${MAC}, NONCE: ${NONCE}, TAG: ${TAG}, IV: ${IV}, PUBLIC_KEY_IDENTIFIER: ${PUBLIC_KEY_IDENTIFIER}, CIPHER_SUITE: ${CIPHER_SUITE}, KDF_PARAMETERS: ${KDF_PARAMETERS}, ENCRYPTION_ALGORITHM_PARAMETERS: ${ENCRYPTION_ALGORITHM_PARAMETERS}}';
  }
}

class _EMEReader extends fb.TableReader<EME> {
  const _EMEReader();

  @override
  EME createObject(fb.BufferContext bc, int offset) => 
    EME._(bc, offset);
}

class EMEBuilder {
  EMEBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addEncryptedBlobOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addEphemeralPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMacOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addNonceOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTagOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addIvOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addPublicKeyIdentifierOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addCipherSuiteOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addKdfParametersOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addEncryptionAlgorithmParametersOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EMEObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _ENCRYPTED_BLOB;
  final String? _EPHEMERAL_PUBLIC_KEY;
  final String? _MAC;
  final String? _NONCE;
  final String? _TAG;
  final String? _IV;
  final String? _PUBLIC_KEY_IDENTIFIER;
  final String? _CIPHER_SUITE;
  final String? _KDF_PARAMETERS;
  final String? _ENCRYPTION_ALGORITHM_PARAMETERS;

  EMEObjectBuilder({
    List<int>? ENCRYPTED_BLOB,
    String? EPHEMERAL_PUBLIC_KEY,
    String? MAC,
    String? NONCE,
    String? TAG,
    String? IV,
    String? PUBLIC_KEY_IDENTIFIER,
    String? CIPHER_SUITE,
    String? KDF_PARAMETERS,
    String? ENCRYPTION_ALGORITHM_PARAMETERS,
  })
      : _ENCRYPTED_BLOB = ENCRYPTED_BLOB,
        _EPHEMERAL_PUBLIC_KEY = EPHEMERAL_PUBLIC_KEY,
        _MAC = MAC,
        _NONCE = NONCE,
        _TAG = TAG,
        _IV = IV,
        _PUBLIC_KEY_IDENTIFIER = PUBLIC_KEY_IDENTIFIER,
        _CIPHER_SUITE = CIPHER_SUITE,
        _KDF_PARAMETERS = KDF_PARAMETERS,
        _ENCRYPTION_ALGORITHM_PARAMETERS = ENCRYPTION_ALGORITHM_PARAMETERS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ENCRYPTED_BLOBOffset = _ENCRYPTED_BLOB == null ? null
        : fbBuilder.writeListUint8(_ENCRYPTED_BLOB!);
    final int? EPHEMERAL_PUBLIC_KEYOffset = _EPHEMERAL_PUBLIC_KEY == null ? null
        : fbBuilder.writeString(_EPHEMERAL_PUBLIC_KEY!);
    final int? MACOffset = _MAC == null ? null
        : fbBuilder.writeString(_MAC!);
    final int? NONCEOffset = _NONCE == null ? null
        : fbBuilder.writeString(_NONCE!);
    final int? TAGOffset = _TAG == null ? null
        : fbBuilder.writeString(_TAG!);
    final int? IVOffset = _IV == null ? null
        : fbBuilder.writeString(_IV!);
    final int? PUBLIC_KEY_IDENTIFIEROffset = _PUBLIC_KEY_IDENTIFIER == null ? null
        : fbBuilder.writeString(_PUBLIC_KEY_IDENTIFIER!);
    final int? CIPHER_SUITEOffset = _CIPHER_SUITE == null ? null
        : fbBuilder.writeString(_CIPHER_SUITE!);
    final int? KDF_PARAMETERSOffset = _KDF_PARAMETERS == null ? null
        : fbBuilder.writeString(_KDF_PARAMETERS!);
    final int? ENCRYPTION_ALGORITHM_PARAMETERSOffset = _ENCRYPTION_ALGORITHM_PARAMETERS == null ? null
        : fbBuilder.writeString(_ENCRYPTION_ALGORITHM_PARAMETERS!);
    fbBuilder.startTable(10);
    fbBuilder.addOffset(0, ENCRYPTED_BLOBOffset);
    fbBuilder.addOffset(1, EPHEMERAL_PUBLIC_KEYOffset);
    fbBuilder.addOffset(2, MACOffset);
    fbBuilder.addOffset(3, NONCEOffset);
    fbBuilder.addOffset(4, TAGOffset);
    fbBuilder.addOffset(5, IVOffset);
    fbBuilder.addOffset(6, PUBLIC_KEY_IDENTIFIEROffset);
    fbBuilder.addOffset(7, CIPHER_SUITEOffset);
    fbBuilder.addOffset(8, KDF_PARAMETERSOffset);
    fbBuilder.addOffset(9, ENCRYPTION_ALGORITHM_PARAMETERSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EMECOLLECTION {
  EMECOLLECTION._(this._bc, this._bcOffset);
  factory EMECOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EMECOLLECTION> reader = _EMECOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<EME>? get RECORDS => const fb.ListReader<EME>(EME.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'EMECOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _EMECOLLECTIONReader extends fb.TableReader<EMECOLLECTION> {
  const _EMECOLLECTIONReader();

  @override
  EMECOLLECTION createObject(fb.BufferContext bc, int offset) => 
    EMECOLLECTION._(bc, offset);
}

class EMECOLLECTIONBuilder {
  EMECOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EMECOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<EMEObjectBuilder>? _RECORDS;

  EMECOLLECTIONObjectBuilder({
    List<EMEObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
