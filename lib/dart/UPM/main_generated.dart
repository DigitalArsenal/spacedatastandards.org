// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class CryptoKey {
  CryptoKey._(this._bc, this._bcOffset);
  factory CryptoKey(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CryptoKey> reader = _CryptoKeyReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get PUBLIC_KEY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get XPUB => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get PRIVATE_KEY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get XPRIV => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get KEY_ADDRESS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  int get ADDRESS_TYPE => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);

  @override
  String toString() {
    return 'CryptoKey{PUBLIC_KEY: ${PUBLIC_KEY}, XPUB: ${XPUB}, PRIVATE_KEY: ${PRIVATE_KEY}, XPRIV: ${XPRIV}, KEY_ADDRESS: ${KEY_ADDRESS}, ADDRESS_TYPE: ${ADDRESS_TYPE}}';
  }
}

class _CryptoKeyReader extends fb.TableReader<CryptoKey> {
  const _CryptoKeyReader();

  @override
  CryptoKey createObject(fb.BufferContext bc, int offset) => 
    CryptoKey._(bc, offset);
}

class CryptoKeyBuilder {
  CryptoKeyBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addXpubOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPrivateKeyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addXprivOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addKeyAddressOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addAddressType(int? ADDRESS_TYPE) {
    fbBuilder.addInt32(5, ADDRESS_TYPE);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CryptoKeyObjectBuilder extends fb.ObjectBuilder {
  final String? _PUBLIC_KEY;
  final String? _XPUB;
  final String? _PRIVATE_KEY;
  final String? _XPRIV;
  final String? _KEY_ADDRESS;
  final int? _ADDRESS_TYPE;

  CryptoKeyObjectBuilder({
    String? PUBLIC_KEY,
    String? XPUB,
    String? PRIVATE_KEY,
    String? XPRIV,
    String? KEY_ADDRESS,
    int? ADDRESS_TYPE,
  })
      : _PUBLIC_KEY = PUBLIC_KEY,
        _XPUB = XPUB,
        _PRIVATE_KEY = PRIVATE_KEY,
        _XPRIV = XPRIV,
        _KEY_ADDRESS = KEY_ADDRESS,
        _ADDRESS_TYPE = ADDRESS_TYPE;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? PUBLIC_KEYOffset = _PUBLIC_KEY == null ? null
        : fbBuilder.writeString(_PUBLIC_KEY!);
    final int? XPUBOffset = _XPUB == null ? null
        : fbBuilder.writeString(_XPUB!);
    final int? PRIVATE_KEYOffset = _PRIVATE_KEY == null ? null
        : fbBuilder.writeString(_PRIVATE_KEY!);
    final int? XPRIVOffset = _XPRIV == null ? null
        : fbBuilder.writeString(_XPRIV!);
    final int? KEY_ADDRESSOffset = _KEY_ADDRESS == null ? null
        : fbBuilder.writeString(_KEY_ADDRESS!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, PUBLIC_KEYOffset);
    fbBuilder.addOffset(1, XPUBOffset);
    fbBuilder.addOffset(2, PRIVATE_KEYOffset);
    fbBuilder.addOffset(3, XPRIVOffset);
    fbBuilder.addOffset(4, KEY_ADDRESSOffset);
    fbBuilder.addInt32(5, _ADDRESS_TYPE);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContactPoint {
  ContactPoint._(this._bc, this._bcOffset);
  factory ContactPoint(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContactPoint> reader = _ContactPointReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get CONTACT_TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get EMAIL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get TELEPHONE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get CONTACT_OPTION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get AREA_SERVED => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get AVAILABLE_LANGUAGE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  String? get ADDRESS_COUNTRY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  String? get ADDRESS_REGION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  String? get ADDRESS_LOCALITY => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  String? get POSTAL_CODE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  String? get STREET_ADDRESS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  String? get POST_OFFICE_BOX_NUMBER => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);

  @override
  String toString() {
    return 'ContactPoint{NAME: ${NAME}, CONTACT_TYPE: ${CONTACT_TYPE}, EMAIL: ${EMAIL}, TELEPHONE: ${TELEPHONE}, CONTACT_OPTION: ${CONTACT_OPTION}, AREA_SERVED: ${AREA_SERVED}, AVAILABLE_LANGUAGE: ${AVAILABLE_LANGUAGE}, ADDRESS_COUNTRY: ${ADDRESS_COUNTRY}, ADDRESS_REGION: ${ADDRESS_REGION}, ADDRESS_LOCALITY: ${ADDRESS_LOCALITY}, POSTAL_CODE: ${POSTAL_CODE}, STREET_ADDRESS: ${STREET_ADDRESS}, POST_OFFICE_BOX_NUMBER: ${POST_OFFICE_BOX_NUMBER}}';
  }
}

class _ContactPointReader extends fb.TableReader<ContactPoint> {
  const _ContactPointReader();

  @override
  ContactPoint createObject(fb.BufferContext bc, int offset) => 
    ContactPoint._(bc, offset);
}

class ContactPointBuilder {
  ContactPointBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(13);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addContactTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addEmailOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTelephoneOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addContactOptionOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addAreaServedOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addAvailableLanguageOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addAddressCountryOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addAddressRegionOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addAddressLocalityOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addPostalCodeOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addStreetAddressOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addPostOfficeBoxNumberOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContactPointObjectBuilder extends fb.ObjectBuilder {
  final String? _NAME;
  final String? _CONTACT_TYPE;
  final String? _EMAIL;
  final String? _TELEPHONE;
  final String? _CONTACT_OPTION;
  final String? _AREA_SERVED;
  final String? _AVAILABLE_LANGUAGE;
  final String? _ADDRESS_COUNTRY;
  final String? _ADDRESS_REGION;
  final String? _ADDRESS_LOCALITY;
  final String? _POSTAL_CODE;
  final String? _STREET_ADDRESS;
  final String? _POST_OFFICE_BOX_NUMBER;

  ContactPointObjectBuilder({
    String? NAME,
    String? CONTACT_TYPE,
    String? EMAIL,
    String? TELEPHONE,
    String? CONTACT_OPTION,
    String? AREA_SERVED,
    String? AVAILABLE_LANGUAGE,
    String? ADDRESS_COUNTRY,
    String? ADDRESS_REGION,
    String? ADDRESS_LOCALITY,
    String? POSTAL_CODE,
    String? STREET_ADDRESS,
    String? POST_OFFICE_BOX_NUMBER,
  })
      : _NAME = NAME,
        _CONTACT_TYPE = CONTACT_TYPE,
        _EMAIL = EMAIL,
        _TELEPHONE = TELEPHONE,
        _CONTACT_OPTION = CONTACT_OPTION,
        _AREA_SERVED = AREA_SERVED,
        _AVAILABLE_LANGUAGE = AVAILABLE_LANGUAGE,
        _ADDRESS_COUNTRY = ADDRESS_COUNTRY,
        _ADDRESS_REGION = ADDRESS_REGION,
        _ADDRESS_LOCALITY = ADDRESS_LOCALITY,
        _POSTAL_CODE = POSTAL_CODE,
        _STREET_ADDRESS = STREET_ADDRESS,
        _POST_OFFICE_BOX_NUMBER = POST_OFFICE_BOX_NUMBER;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? NAMEOffset = _NAME == null ? null
        : fbBuilder.writeString(_NAME!);
    final int? CONTACT_TYPEOffset = _CONTACT_TYPE == null ? null
        : fbBuilder.writeString(_CONTACT_TYPE!);
    final int? EMAILOffset = _EMAIL == null ? null
        : fbBuilder.writeString(_EMAIL!);
    final int? TELEPHONEOffset = _TELEPHONE == null ? null
        : fbBuilder.writeString(_TELEPHONE!);
    final int? CONTACT_OPTIONOffset = _CONTACT_OPTION == null ? null
        : fbBuilder.writeString(_CONTACT_OPTION!);
    final int? AREA_SERVEDOffset = _AREA_SERVED == null ? null
        : fbBuilder.writeString(_AREA_SERVED!);
    final int? AVAILABLE_LANGUAGEOffset = _AVAILABLE_LANGUAGE == null ? null
        : fbBuilder.writeString(_AVAILABLE_LANGUAGE!);
    final int? ADDRESS_COUNTRYOffset = _ADDRESS_COUNTRY == null ? null
        : fbBuilder.writeString(_ADDRESS_COUNTRY!);
    final int? ADDRESS_REGIONOffset = _ADDRESS_REGION == null ? null
        : fbBuilder.writeString(_ADDRESS_REGION!);
    final int? ADDRESS_LOCALITYOffset = _ADDRESS_LOCALITY == null ? null
        : fbBuilder.writeString(_ADDRESS_LOCALITY!);
    final int? POSTAL_CODEOffset = _POSTAL_CODE == null ? null
        : fbBuilder.writeString(_POSTAL_CODE!);
    final int? STREET_ADDRESSOffset = _STREET_ADDRESS == null ? null
        : fbBuilder.writeString(_STREET_ADDRESS!);
    final int? POST_OFFICE_BOX_NUMBEROffset = _POST_OFFICE_BOX_NUMBER == null ? null
        : fbBuilder.writeString(_POST_OFFICE_BOX_NUMBER!);
    fbBuilder.startTable(13);
    fbBuilder.addOffset(0, NAMEOffset);
    fbBuilder.addOffset(1, CONTACT_TYPEOffset);
    fbBuilder.addOffset(2, EMAILOffset);
    fbBuilder.addOffset(3, TELEPHONEOffset);
    fbBuilder.addOffset(4, CONTACT_OPTIONOffset);
    fbBuilder.addOffset(5, AREA_SERVEDOffset);
    fbBuilder.addOffset(6, AVAILABLE_LANGUAGEOffset);
    fbBuilder.addOffset(7, ADDRESS_COUNTRYOffset);
    fbBuilder.addOffset(8, ADDRESS_REGIONOffset);
    fbBuilder.addOffset(9, ADDRESS_LOCALITYOffset);
    fbBuilder.addOffset(10, POSTAL_CODEOffset);
    fbBuilder.addOffset(11, STREET_ADDRESSOffset);
    fbBuilder.addOffset(12, POST_OFFICE_BOX_NUMBEROffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Organization {
  Organization._(this._bc, this._bcOffset);
  factory Organization(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Organization> reader = _OrganizationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get LEGAL_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Organization{NAME: ${NAME}, LEGAL_NAME: ${LEGAL_NAME}}';
  }
}

class _OrganizationReader extends fb.TableReader<Organization> {
  const _OrganizationReader();

  @override
  Organization createObject(fb.BufferContext bc, int offset) => 
    Organization._(bc, offset);
}

class OrganizationBuilder {
  OrganizationBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addLegalNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OrganizationObjectBuilder extends fb.ObjectBuilder {
  final String? _NAME;
  final String? _LEGAL_NAME;

  OrganizationObjectBuilder({
    String? NAME,
    String? LEGAL_NAME,
  })
      : _NAME = NAME,
        _LEGAL_NAME = LEGAL_NAME;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? NAMEOffset = _NAME == null ? null
        : fbBuilder.writeString(_NAME!);
    final int? LEGAL_NAMEOffset = _LEGAL_NAME == null ? null
        : fbBuilder.writeString(_LEGAL_NAME!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, NAMEOffset);
    fbBuilder.addOffset(1, LEGAL_NAMEOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Occupation {
  Occupation._(this._bc, this._bcOffset);
  factory Occupation(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Occupation> reader = _OccupationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'Occupation{NAME: ${NAME}}';
  }
}

class _OccupationReader extends fb.TableReader<Occupation> {
  const _OccupationReader();

  @override
  Occupation createObject(fb.BufferContext bc, int offset) => 
    Occupation._(bc, offset);
}

class OccupationBuilder {
  OccupationBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OccupationObjectBuilder extends fb.ObjectBuilder {
  final String? _NAME;

  OccupationObjectBuilder({
    String? NAME,
  })
      : _NAME = NAME;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? NAMEOffset = _NAME == null ? null
        : fbBuilder.writeString(_NAME!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, NAMEOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  User Profile Message
class UPM {
  UPM._(this._bc, this._bcOffset);
  factory UPM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UPM> reader = _UPMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get ALTERNATE_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get DESCRIPTION => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get IMAGE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get SAME_AS => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get URL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get TELEPHONE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  String? get EMAIL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  List<CryptoKey>? get KEY => const fb.ListReader<CryptoKey>(CryptoKey.reader).vTableGetNullable(_bc, _bcOffset, 20);
  List<ContactPoint>? get CONTACT_POINT => const fb.ListReader<ContactPoint>(ContactPoint.reader).vTableGetNullable(_bc, _bcOffset, 22);
  ContactPoint? get ADDRESS => ContactPoint.reader.vTableGetNullable(_bc, _bcOffset, 24);
  String? get JOB_TITLE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  Organization? get AFFILIATION => Organization.reader.vTableGetNullable(_bc, _bcOffset, 28);
  Occupation? get HAS_OCCUPATION => Occupation.reader.vTableGetNullable(_bc, _bcOffset, 30);
  String? get FAMILY_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  String? get GIVEN_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  String? get ADDITIONAL_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  String? get HONORIFIC_PREFIX => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  String? get HONORIFIC_SUFFIX => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);

  @override
  String toString() {
    return 'UPM{NAME: ${NAME}, ALTERNATE_NAME: ${ALTERNATE_NAME}, DESCRIPTION: ${DESCRIPTION}, IMAGE: ${IMAGE}, SAME_AS: ${SAME_AS}, URL: ${URL}, TELEPHONE: ${TELEPHONE}, EMAIL: ${EMAIL}, KEY: ${KEY}, CONTACT_POINT: ${CONTACT_POINT}, ADDRESS: ${ADDRESS}, JOB_TITLE: ${JOB_TITLE}, AFFILIATION: ${AFFILIATION}, HAS_OCCUPATION: ${HAS_OCCUPATION}, FAMILY_NAME: ${FAMILY_NAME}, GIVEN_NAME: ${GIVEN_NAME}, ADDITIONAL_NAME: ${ADDITIONAL_NAME}, HONORIFIC_PREFIX: ${HONORIFIC_PREFIX}, HONORIFIC_SUFFIX: ${HONORIFIC_SUFFIX}}';
  }
}

class _UPMReader extends fb.TableReader<UPM> {
  const _UPMReader();

  @override
  UPM createObject(fb.BufferContext bc, int offset) => 
    UPM._(bc, offset);
}

class UPMBuilder {
  UPMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(19);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAlternateNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addImageOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSameAsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addUrlOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTelephoneOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addEmailOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addKeyOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addContactPointOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addJobTitleOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addAffiliationOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addHasOccupationOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addFamilyNameOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addGivenNameOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addAdditionalNameOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addHonorificPrefixOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addHonorificSuffixOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UPMObjectBuilder extends fb.ObjectBuilder {
  final String? _NAME;
  final String? _ALTERNATE_NAME;
  final String? _DESCRIPTION;
  final String? _IMAGE;
  final String? _SAME_AS;
  final String? _URL;
  final String? _TELEPHONE;
  final String? _EMAIL;
  final List<CryptoKeyObjectBuilder>? _KEY;
  final List<ContactPointObjectBuilder>? _CONTACT_POINT;
  final ContactPointObjectBuilder? _ADDRESS;
  final String? _JOB_TITLE;
  final OrganizationObjectBuilder? _AFFILIATION;
  final OccupationObjectBuilder? _HAS_OCCUPATION;
  final String? _FAMILY_NAME;
  final String? _GIVEN_NAME;
  final String? _ADDITIONAL_NAME;
  final String? _HONORIFIC_PREFIX;
  final String? _HONORIFIC_SUFFIX;

  UPMObjectBuilder({
    String? NAME,
    String? ALTERNATE_NAME,
    String? DESCRIPTION,
    String? IMAGE,
    String? SAME_AS,
    String? URL,
    String? TELEPHONE,
    String? EMAIL,
    List<CryptoKeyObjectBuilder>? KEY,
    List<ContactPointObjectBuilder>? CONTACT_POINT,
    ContactPointObjectBuilder? ADDRESS,
    String? JOB_TITLE,
    OrganizationObjectBuilder? AFFILIATION,
    OccupationObjectBuilder? HAS_OCCUPATION,
    String? FAMILY_NAME,
    String? GIVEN_NAME,
    String? ADDITIONAL_NAME,
    String? HONORIFIC_PREFIX,
    String? HONORIFIC_SUFFIX,
  })
      : _NAME = NAME,
        _ALTERNATE_NAME = ALTERNATE_NAME,
        _DESCRIPTION = DESCRIPTION,
        _IMAGE = IMAGE,
        _SAME_AS = SAME_AS,
        _URL = URL,
        _TELEPHONE = TELEPHONE,
        _EMAIL = EMAIL,
        _KEY = KEY,
        _CONTACT_POINT = CONTACT_POINT,
        _ADDRESS = ADDRESS,
        _JOB_TITLE = JOB_TITLE,
        _AFFILIATION = AFFILIATION,
        _HAS_OCCUPATION = HAS_OCCUPATION,
        _FAMILY_NAME = FAMILY_NAME,
        _GIVEN_NAME = GIVEN_NAME,
        _ADDITIONAL_NAME = ADDITIONAL_NAME,
        _HONORIFIC_PREFIX = HONORIFIC_PREFIX,
        _HONORIFIC_SUFFIX = HONORIFIC_SUFFIX;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? NAMEOffset = _NAME == null ? null
        : fbBuilder.writeString(_NAME!);
    final int? ALTERNATE_NAMEOffset = _ALTERNATE_NAME == null ? null
        : fbBuilder.writeString(_ALTERNATE_NAME!);
    final int? DESCRIPTIONOffset = _DESCRIPTION == null ? null
        : fbBuilder.writeString(_DESCRIPTION!);
    final int? IMAGEOffset = _IMAGE == null ? null
        : fbBuilder.writeString(_IMAGE!);
    final int? SAME_ASOffset = _SAME_AS == null ? null
        : fbBuilder.writeString(_SAME_AS!);
    final int? URLOffset = _URL == null ? null
        : fbBuilder.writeString(_URL!);
    final int? TELEPHONEOffset = _TELEPHONE == null ? null
        : fbBuilder.writeString(_TELEPHONE!);
    final int? EMAILOffset = _EMAIL == null ? null
        : fbBuilder.writeString(_EMAIL!);
    final int? KEYOffset = _KEY == null ? null
        : fbBuilder.writeList(_KEY!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? CONTACT_POINTOffset = _CONTACT_POINT == null ? null
        : fbBuilder.writeList(_CONTACT_POINT!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? ADDRESSOffset = _ADDRESS?.getOrCreateOffset(fbBuilder);
    final int? JOB_TITLEOffset = _JOB_TITLE == null ? null
        : fbBuilder.writeString(_JOB_TITLE!);
    final int? AFFILIATIONOffset = _AFFILIATION?.getOrCreateOffset(fbBuilder);
    final int? HAS_OCCUPATIONOffset = _HAS_OCCUPATION?.getOrCreateOffset(fbBuilder);
    final int? FAMILY_NAMEOffset = _FAMILY_NAME == null ? null
        : fbBuilder.writeString(_FAMILY_NAME!);
    final int? GIVEN_NAMEOffset = _GIVEN_NAME == null ? null
        : fbBuilder.writeString(_GIVEN_NAME!);
    final int? ADDITIONAL_NAMEOffset = _ADDITIONAL_NAME == null ? null
        : fbBuilder.writeString(_ADDITIONAL_NAME!);
    final int? HONORIFIC_PREFIXOffset = _HONORIFIC_PREFIX == null ? null
        : fbBuilder.writeString(_HONORIFIC_PREFIX!);
    final int? HONORIFIC_SUFFIXOffset = _HONORIFIC_SUFFIX == null ? null
        : fbBuilder.writeString(_HONORIFIC_SUFFIX!);
    fbBuilder.startTable(19);
    fbBuilder.addOffset(0, NAMEOffset);
    fbBuilder.addOffset(1, ALTERNATE_NAMEOffset);
    fbBuilder.addOffset(2, DESCRIPTIONOffset);
    fbBuilder.addOffset(3, IMAGEOffset);
    fbBuilder.addOffset(4, SAME_ASOffset);
    fbBuilder.addOffset(5, URLOffset);
    fbBuilder.addOffset(6, TELEPHONEOffset);
    fbBuilder.addOffset(7, EMAILOffset);
    fbBuilder.addOffset(8, KEYOffset);
    fbBuilder.addOffset(9, CONTACT_POINTOffset);
    fbBuilder.addOffset(10, ADDRESSOffset);
    fbBuilder.addOffset(11, JOB_TITLEOffset);
    fbBuilder.addOffset(12, AFFILIATIONOffset);
    fbBuilder.addOffset(13, HAS_OCCUPATIONOffset);
    fbBuilder.addOffset(14, FAMILY_NAMEOffset);
    fbBuilder.addOffset(15, GIVEN_NAMEOffset);
    fbBuilder.addOffset(16, ADDITIONAL_NAMEOffset);
    fbBuilder.addOffset(17, HONORIFIC_PREFIXOffset);
    fbBuilder.addOffset(18, HONORIFIC_SUFFIXOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class UPMCOLLECTION {
  UPMCOLLECTION._(this._bc, this._bcOffset);
  factory UPMCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UPMCOLLECTION> reader = _UPMCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<UPM>? get RECORDS => const fb.ListReader<UPM>(UPM.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'UPMCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _UPMCOLLECTIONReader extends fb.TableReader<UPMCOLLECTION> {
  const _UPMCOLLECTIONReader();

  @override
  UPMCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    UPMCOLLECTION._(bc, offset);
}

class UPMCOLLECTIONBuilder {
  UPMCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UPMCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<UPMObjectBuilder>? _RECORDS;

  UPMCOLLECTIONObjectBuilder({
    List<UPMObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
