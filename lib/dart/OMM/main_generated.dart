// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


import './main_generated.dart';

class EphemerisType {
  final int value;
  const EphemerisType._(this.value);

  factory EphemerisType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
        throw StateError('Invalid value $value for bit flag enum EphemerisType');
    }
    return result;
  }

  static EphemerisType? _createOrNull(int? value) => 
      value == null ? null : EphemerisType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  ///  Simplified General Perturbation Model
  static const EphemerisType SGP = EphemerisType._(0);

  ///  Simplified General Perturbation Model 4
  static const EphemerisType SGP4 = EphemerisType._(1);

  ///  Simplified Deep Space Perturbation Model 4
  static const EphemerisType SDP4 = EphemerisType._(2);

  ///  Simplified General Perturbation Model 8
  static const EphemerisType SGP8 = EphemerisType._(3);

  ///  Simplified Deep Space Perturbation Model 8
  static const EphemerisType SDP8 = EphemerisType._(4);
  static const Map<int, EphemerisType> values = {
    0: SGP,
    1: SGP4,
    2: SDP4,
    3: SGP8,
    4: SDP8};

  static const fb.Reader<EphemerisType> reader = _EphemerisTypeReader();

  @override
  String toString() {
    return 'EphemerisType{value: $value}';
  }
}

class _EphemerisTypeReader extends fb.Reader<EphemerisType> {
  const _EphemerisTypeReader();

  @override
  int get size => 1;

  @override
  EphemerisType read(fb.BufferContext bc, int offset) =>
      EphemerisType.fromValue(const fb.Int8Reader().read(bc, offset));
}

///  Orbit Mean Elements Message
class OMM {
  OMM._(this._bc, this._bcOffset);
  factory OMM(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OMM> reader = _OMMReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ///  CCSDS OMM Version 
  double get CCSDS_OMM_VERS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 4, 0.0);
  ///  Creation Date (ISO 8601 UTC format) 
  String? get CREATION_DATE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ///  Originator 
  String? get ORIGINATOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ///  Satellite Name(s)
  String? get OBJECT_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  ///  International Designator (YYYY-NNNAAA)
  String? get OBJECT_ID => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  ///  Center Name (e.g. EARTH, MARS)
  String? get CENTER_NAME => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  ///  Reference Frame
  RefFrame get REFERENCE_FRAME => RefFrame.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 16, 2));
  ///  Reference Frame Epoch (ISO 8601 UTC format)
  String? get REFERENCE_FRAME_EPOCH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  ///  Time System [M, UTC]
  TimeSystem get TIME_SYSTEM => TimeSystem.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 20, 11));
  ///  Mean Element Theory
  MeanElementTheory get MEAN_ELEMENT_THEORY => MeanElementTheory.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 22, 0));
  ///  COMMENT (O)
  String? get COMMENT => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  ///  EPOCH of Mean Keplerian elements (ISO 8601 UTC format)
  String? get EPOCH => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ///  Semi-major axis in km or Mean Motion in rev/day
  double get SEMI_MAJOR_AXIS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 28, 0.0);
  ///  Mean motion in rev/day if MEAN_ELEMENT_THEORY=SGP/SGP4 else unused
  double get MEAN_MOTION => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 30, 0.0);
  ///  Eccentricity (unitless)
  double get ECCENTRICITY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 32, 0.0);
  ///  Inclination in degrees
  double get INCLINATION => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 34, 0.0);
  ///  RA_OF_ASC_NODE in degrees
  double get RA_OF_ASC_NODE => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 36, 0.0);
  ///  ARG_OF_PERICENTER in degrees
  double get ARG_OF_PERICENTER => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 38, 0.0);
  ///  MEAN_ANOMALY in degrees
  double get MEAN_ANOMALY => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 40, 0.0);
  ///  GM in km**3/s**2
  double get GM => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 42, 0.0);
  ///  MASS in kg
  double get MASS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  ///  SOLAR_RAD_AREA in m**2
  double get SOLAR_RAD_AREA => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);
  ///  SOLAR_RAD_COEFF (unitless)
  double get SOLAR_RAD_COEFF => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 48, 0.0);
  ///  DRAG_AREA in m**2
  double get DRAG_AREA => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 50, 0.0);
  ///  DRAG_COEFF (unitless)
  double get DRAG_COEFF => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 52, 0.0);
  ///  TLE Related Parameters (Only if MEAN_ELEMENT_THEORY=SGP/SGP4)
  ///  EPHEMERIS_TYPE Default=0
  EphemerisType get EPHEMERIS_TYPE => EphemerisType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 54, 1));
  ///  CLASSIFICATION_TYPE Default=U
  String? get CLASSIFICATION_TYPE => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 56);
  ///  NORAD_CAT_ID (integer) [O if SGP/SGP4]
  int get NORAD_CAT_ID => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 58, 0);
  ///  ELEMENT_SET_NO [O if SGP/SGP4]
  int get ELEMENT_SET_NO => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 60, 0);
  ///  REV_AT_EPOCH [O if SGP/SGP4]
  double get REV_AT_EPOCH => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 62, 0.0);
  ///  BSTAR in 1/Earth radii or BTERM in m²/kg depending on MEAN_ELEMENT_THEORY [C]
  double get BSTAR => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 64, 0.0);
  ///  MEAN_MOTION_DOT in rev/day² [C if SGP or PPT3]
  double get MEAN_MOTION_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 66, 0.0);
  ///  MEAN_MOTION_DDOT in rev/day³ if SGP/PPT3 or AGOM in m²/kg if SGP4-XP [C]
  double get MEAN_MOTION_DDOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 68, 0.0);
  ///  Position/Velocity Covariance Matrix (6x6 Lower Triangular) [C if any covariance provided]
  ///  COV_REF_FRAME reference frame for covariance [C if covariance given]
  RefFrame get COV_REFERENCE_FRAME => RefFrame.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 70, 23));
  ///  CX_X [km**2]
  double get CX_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 72, 0.0);
  ///  CY_X [km**2]
  double get CY_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 74, 0.0);
  ///  CY_Y [km**2]
  double get CY_Y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 76, 0.0);
  ///  CZ_X [km**2]
  double get CZ_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 78, 0.0);
  ///  CZ_Y [km**2]
  double get CZ_Y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 80, 0.0);
  ///  CZ_Z [km**2]
  double get CZ_Z => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 82, 0.0);
  ///  CX_DOT_X [km**2/s]
  double get CX_DOT_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 84, 0.0);
  ///  CX_DOT_Y [km**2/s]
  double get CX_DOT_Y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 86, 0.0);
  ///  CX_DOT_Z [km**2/s]
  double get CX_DOT_Z => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 88, 0.0);
  ///  CX_DOT_X_DOT [km**2/s**2]
  double get CX_DOT_X_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 90, 0.0);
  ///  CY_DOT_X [km**2/s]
  double get CY_DOT_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 92, 0.0);
  ///  CY_DOT_Y [km**2/s]
  double get CY_DOT_Y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 94, 0.0);
  ///  CY_DOT_Z [km**2/s]
  double get CY_DOT_Z => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 96, 0.0);
  ///  CY_DOT_X_DOT [km**2/s**2]
  double get CY_DOT_X_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 98, 0.0);
  ///  CY_DOT_Y_DOT [km**2/s**2]
  double get CY_DOT_Y_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 100, 0.0);
  ///  CZ_DOT_X [km**2/s]
  double get CZ_DOT_X => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 102, 0.0);
  ///  CZ_DOT_Y [km**2/s]
  double get CZ_DOT_Y => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 104, 0.0);
  ///  CZ_DOT_Z [km**2/s]
  double get CZ_DOT_Z => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 106, 0.0);
  ///  CZ_DOT_X_DOT [km**2/s**2]
  double get CZ_DOT_X_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 108, 0.0);
  ///  CZ_DOT_Y_DOT [km**2/s**2]
  double get CZ_DOT_Y_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 110, 0.0);
  ///  CZ_DOT_Z_DOT [km**2/s**2]
  double get CZ_DOT_Z_DOT => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 112, 0.0);
  ///  USER_DEFINED_BIP_0044_TYPE [O, units per ICD]
  int get USER_DEFINED_BIP_0044_TYPE => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 114, 0);
  ///  USER_DEFINED_OBJECT_DESIGNATOR [O, units per ICD]
  String? get USER_DEFINED_OBJECT_DESIGNATOR => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 116);
  ///  USER_DEFINED_EARTH_MODEL [O, units per ICD]
  String? get USER_DEFINED_EARTH_MODEL => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 118);
  ///  USER_DEFINED_EPOCH_TIMESTAMP [O, units per ICD]
  double get USER_DEFINED_EPOCH_TIMESTAMP => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 120, 0.0);
  ///  USER_DEFINED_MICROSECONDS [O, units per ICD]
  double get USER_DEFINED_MICROSECONDS => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 122, 0.0);

  @override
  String toString() {
    return 'OMM{CCSDS_OMM_VERS: ${CCSDS_OMM_VERS}, CREATION_DATE: ${CREATION_DATE}, ORIGINATOR: ${ORIGINATOR}, OBJECT_NAME: ${OBJECT_NAME}, OBJECT_ID: ${OBJECT_ID}, CENTER_NAME: ${CENTER_NAME}, REFERENCE_FRAME: ${REFERENCE_FRAME}, REFERENCE_FRAME_EPOCH: ${REFERENCE_FRAME_EPOCH}, TIME_SYSTEM: ${TIME_SYSTEM}, MEAN_ELEMENT_THEORY: ${MEAN_ELEMENT_THEORY}, COMMENT: ${COMMENT}, EPOCH: ${EPOCH}, SEMI_MAJOR_AXIS: ${SEMI_MAJOR_AXIS}, MEAN_MOTION: ${MEAN_MOTION}, ECCENTRICITY: ${ECCENTRICITY}, INCLINATION: ${INCLINATION}, RA_OF_ASC_NODE: ${RA_OF_ASC_NODE}, ARG_OF_PERICENTER: ${ARG_OF_PERICENTER}, MEAN_ANOMALY: ${MEAN_ANOMALY}, GM: ${GM}, MASS: ${MASS}, SOLAR_RAD_AREA: ${SOLAR_RAD_AREA}, SOLAR_RAD_COEFF: ${SOLAR_RAD_COEFF}, DRAG_AREA: ${DRAG_AREA}, DRAG_COEFF: ${DRAG_COEFF}, EPHEMERIS_TYPE: ${EPHEMERIS_TYPE}, CLASSIFICATION_TYPE: ${CLASSIFICATION_TYPE}, NORAD_CAT_ID: ${NORAD_CAT_ID}, ELEMENT_SET_NO: ${ELEMENT_SET_NO}, REV_AT_EPOCH: ${REV_AT_EPOCH}, BSTAR: ${BSTAR}, MEAN_MOTION_DOT: ${MEAN_MOTION_DOT}, MEAN_MOTION_DDOT: ${MEAN_MOTION_DDOT}, COV_REFERENCE_FRAME: ${COV_REFERENCE_FRAME}, CX_X: ${CX_X}, CY_X: ${CY_X}, CY_Y: ${CY_Y}, CZ_X: ${CZ_X}, CZ_Y: ${CZ_Y}, CZ_Z: ${CZ_Z}, CX_DOT_X: ${CX_DOT_X}, CX_DOT_Y: ${CX_DOT_Y}, CX_DOT_Z: ${CX_DOT_Z}, CX_DOT_X_DOT: ${CX_DOT_X_DOT}, CY_DOT_X: ${CY_DOT_X}, CY_DOT_Y: ${CY_DOT_Y}, CY_DOT_Z: ${CY_DOT_Z}, CY_DOT_X_DOT: ${CY_DOT_X_DOT}, CY_DOT_Y_DOT: ${CY_DOT_Y_DOT}, CZ_DOT_X: ${CZ_DOT_X}, CZ_DOT_Y: ${CZ_DOT_Y}, CZ_DOT_Z: ${CZ_DOT_Z}, CZ_DOT_X_DOT: ${CZ_DOT_X_DOT}, CZ_DOT_Y_DOT: ${CZ_DOT_Y_DOT}, CZ_DOT_Z_DOT: ${CZ_DOT_Z_DOT}, USER_DEFINED_BIP_0044_TYPE: ${USER_DEFINED_BIP_0044_TYPE}, USER_DEFINED_OBJECT_DESIGNATOR: ${USER_DEFINED_OBJECT_DESIGNATOR}, USER_DEFINED_EARTH_MODEL: ${USER_DEFINED_EARTH_MODEL}, USER_DEFINED_EPOCH_TIMESTAMP: ${USER_DEFINED_EPOCH_TIMESTAMP}, USER_DEFINED_MICROSECONDS: ${USER_DEFINED_MICROSECONDS}}';
  }
}

class _OMMReader extends fb.TableReader<OMM> {
  const _OMMReader();

  @override
  OMM createObject(fb.BufferContext bc, int offset) => 
    OMM._(bc, offset);
}

class OMMBuilder {
  OMMBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(60);
  }

  int addCcsdsOmmVers(double? CCSDS_OMM_VERS) {
    fbBuilder.addFloat64(0, CCSDS_OMM_VERS);
    return fbBuilder.offset;
  }
  int addCreationDateOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOriginatorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addObjectNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addObjectIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addCenterNameOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addReferenceFrame(RefFrame? REFERENCE_FRAME) {
    fbBuilder.addInt8(6, REFERENCE_FRAME?.value);
    return fbBuilder.offset;
  }
  int addReferenceFrameEpochOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addTimeSystem(TimeSystem? TIME_SYSTEM) {
    fbBuilder.addInt8(8, TIME_SYSTEM?.value);
    return fbBuilder.offset;
  }
  int addMeanElementTheory(MeanElementTheory? MEAN_ELEMENT_THEORY) {
    fbBuilder.addInt8(9, MEAN_ELEMENT_THEORY?.value);
    return fbBuilder.offset;
  }
  int addCommentOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addEpochOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addSemiMajorAxis(double? SEMI_MAJOR_AXIS) {
    fbBuilder.addFloat64(12, SEMI_MAJOR_AXIS);
    return fbBuilder.offset;
  }
  int addMeanMotion(double? MEAN_MOTION) {
    fbBuilder.addFloat64(13, MEAN_MOTION);
    return fbBuilder.offset;
  }
  int addEccentricity(double? ECCENTRICITY) {
    fbBuilder.addFloat64(14, ECCENTRICITY);
    return fbBuilder.offset;
  }
  int addInclination(double? INCLINATION) {
    fbBuilder.addFloat64(15, INCLINATION);
    return fbBuilder.offset;
  }
  int addRaOfAscNode(double? RA_OF_ASC_NODE) {
    fbBuilder.addFloat64(16, RA_OF_ASC_NODE);
    return fbBuilder.offset;
  }
  int addArgOfPericenter(double? ARG_OF_PERICENTER) {
    fbBuilder.addFloat64(17, ARG_OF_PERICENTER);
    return fbBuilder.offset;
  }
  int addMeanAnomaly(double? MEAN_ANOMALY) {
    fbBuilder.addFloat64(18, MEAN_ANOMALY);
    return fbBuilder.offset;
  }
  int addGm(double? GM) {
    fbBuilder.addFloat64(19, GM);
    return fbBuilder.offset;
  }
  int addMass(double? MASS) {
    fbBuilder.addFloat64(20, MASS);
    return fbBuilder.offset;
  }
  int addSolarRadArea(double? SOLAR_RAD_AREA) {
    fbBuilder.addFloat64(21, SOLAR_RAD_AREA);
    return fbBuilder.offset;
  }
  int addSolarRadCoeff(double? SOLAR_RAD_COEFF) {
    fbBuilder.addFloat64(22, SOLAR_RAD_COEFF);
    return fbBuilder.offset;
  }
  int addDragArea(double? DRAG_AREA) {
    fbBuilder.addFloat64(23, DRAG_AREA);
    return fbBuilder.offset;
  }
  int addDragCoeff(double? DRAG_COEFF) {
    fbBuilder.addFloat64(24, DRAG_COEFF);
    return fbBuilder.offset;
  }
  int addEphemerisType(EphemerisType? EPHEMERIS_TYPE) {
    fbBuilder.addInt8(25, EPHEMERIS_TYPE?.value);
    return fbBuilder.offset;
  }
  int addClassificationTypeOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addNoradCatId(int? NORAD_CAT_ID) {
    fbBuilder.addUint32(27, NORAD_CAT_ID);
    return fbBuilder.offset;
  }
  int addElementSetNo(int? ELEMENT_SET_NO) {
    fbBuilder.addUint32(28, ELEMENT_SET_NO);
    return fbBuilder.offset;
  }
  int addRevAtEpoch(double? REV_AT_EPOCH) {
    fbBuilder.addFloat64(29, REV_AT_EPOCH);
    return fbBuilder.offset;
  }
  int addBstar(double? BSTAR) {
    fbBuilder.addFloat64(30, BSTAR);
    return fbBuilder.offset;
  }
  int addMeanMotionDot(double? MEAN_MOTION_DOT) {
    fbBuilder.addFloat64(31, MEAN_MOTION_DOT);
    return fbBuilder.offset;
  }
  int addMeanMotionDdot(double? MEAN_MOTION_DDOT) {
    fbBuilder.addFloat64(32, MEAN_MOTION_DDOT);
    return fbBuilder.offset;
  }
  int addCovReferenceFrame(RefFrame? COV_REFERENCE_FRAME) {
    fbBuilder.addInt8(33, COV_REFERENCE_FRAME?.value);
    return fbBuilder.offset;
  }
  int addCxX(double? CX_X) {
    fbBuilder.addFloat64(34, CX_X);
    return fbBuilder.offset;
  }
  int addCyX(double? CY_X) {
    fbBuilder.addFloat64(35, CY_X);
    return fbBuilder.offset;
  }
  int addCyY(double? CY_Y) {
    fbBuilder.addFloat64(36, CY_Y);
    return fbBuilder.offset;
  }
  int addCzX(double? CZ_X) {
    fbBuilder.addFloat64(37, CZ_X);
    return fbBuilder.offset;
  }
  int addCzY(double? CZ_Y) {
    fbBuilder.addFloat64(38, CZ_Y);
    return fbBuilder.offset;
  }
  int addCzZ(double? CZ_Z) {
    fbBuilder.addFloat64(39, CZ_Z);
    return fbBuilder.offset;
  }
  int addCxDotX(double? CX_DOT_X) {
    fbBuilder.addFloat64(40, CX_DOT_X);
    return fbBuilder.offset;
  }
  int addCxDotY(double? CX_DOT_Y) {
    fbBuilder.addFloat64(41, CX_DOT_Y);
    return fbBuilder.offset;
  }
  int addCxDotZ(double? CX_DOT_Z) {
    fbBuilder.addFloat64(42, CX_DOT_Z);
    return fbBuilder.offset;
  }
  int addCxDotXDot(double? CX_DOT_X_DOT) {
    fbBuilder.addFloat64(43, CX_DOT_X_DOT);
    return fbBuilder.offset;
  }
  int addCyDotX(double? CY_DOT_X) {
    fbBuilder.addFloat64(44, CY_DOT_X);
    return fbBuilder.offset;
  }
  int addCyDotY(double? CY_DOT_Y) {
    fbBuilder.addFloat64(45, CY_DOT_Y);
    return fbBuilder.offset;
  }
  int addCyDotZ(double? CY_DOT_Z) {
    fbBuilder.addFloat64(46, CY_DOT_Z);
    return fbBuilder.offset;
  }
  int addCyDotXDot(double? CY_DOT_X_DOT) {
    fbBuilder.addFloat64(47, CY_DOT_X_DOT);
    return fbBuilder.offset;
  }
  int addCyDotYDot(double? CY_DOT_Y_DOT) {
    fbBuilder.addFloat64(48, CY_DOT_Y_DOT);
    return fbBuilder.offset;
  }
  int addCzDotX(double? CZ_DOT_X) {
    fbBuilder.addFloat64(49, CZ_DOT_X);
    return fbBuilder.offset;
  }
  int addCzDotY(double? CZ_DOT_Y) {
    fbBuilder.addFloat64(50, CZ_DOT_Y);
    return fbBuilder.offset;
  }
  int addCzDotZ(double? CZ_DOT_Z) {
    fbBuilder.addFloat64(51, CZ_DOT_Z);
    return fbBuilder.offset;
  }
  int addCzDotXDot(double? CZ_DOT_X_DOT) {
    fbBuilder.addFloat64(52, CZ_DOT_X_DOT);
    return fbBuilder.offset;
  }
  int addCzDotYDot(double? CZ_DOT_Y_DOT) {
    fbBuilder.addFloat64(53, CZ_DOT_Y_DOT);
    return fbBuilder.offset;
  }
  int addCzDotZDot(double? CZ_DOT_Z_DOT) {
    fbBuilder.addFloat64(54, CZ_DOT_Z_DOT);
    return fbBuilder.offset;
  }
  int addUserDefinedBip0044Type(int? USER_DEFINED_BIP_0044_TYPE) {
    fbBuilder.addUint32(55, USER_DEFINED_BIP_0044_TYPE);
    return fbBuilder.offset;
  }
  int addUserDefinedObjectDesignatorOffset(int? offset) {
    fbBuilder.addOffset(56, offset);
    return fbBuilder.offset;
  }
  int addUserDefinedEarthModelOffset(int? offset) {
    fbBuilder.addOffset(57, offset);
    return fbBuilder.offset;
  }
  int addUserDefinedEpochTimestamp(double? USER_DEFINED_EPOCH_TIMESTAMP) {
    fbBuilder.addFloat64(58, USER_DEFINED_EPOCH_TIMESTAMP);
    return fbBuilder.offset;
  }
  int addUserDefinedMicroseconds(double? USER_DEFINED_MICROSECONDS) {
    fbBuilder.addFloat64(59, USER_DEFINED_MICROSECONDS);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OMMObjectBuilder extends fb.ObjectBuilder {
  final double? _CCSDS_OMM_VERS;
  final String? _CREATION_DATE;
  final String? _ORIGINATOR;
  final String? _OBJECT_NAME;
  final String? _OBJECT_ID;
  final String? _CENTER_NAME;
  final RefFrame? _REFERENCE_FRAME;
  final String? _REFERENCE_FRAME_EPOCH;
  final TimeSystem? _TIME_SYSTEM;
  final MeanElementTheory? _MEAN_ELEMENT_THEORY;
  final String? _COMMENT;
  final String? _EPOCH;
  final double? _SEMI_MAJOR_AXIS;
  final double? _MEAN_MOTION;
  final double? _ECCENTRICITY;
  final double? _INCLINATION;
  final double? _RA_OF_ASC_NODE;
  final double? _ARG_OF_PERICENTER;
  final double? _MEAN_ANOMALY;
  final double? _GM;
  final double? _MASS;
  final double? _SOLAR_RAD_AREA;
  final double? _SOLAR_RAD_COEFF;
  final double? _DRAG_AREA;
  final double? _DRAG_COEFF;
  final EphemerisType? _EPHEMERIS_TYPE;
  final String? _CLASSIFICATION_TYPE;
  final int? _NORAD_CAT_ID;
  final int? _ELEMENT_SET_NO;
  final double? _REV_AT_EPOCH;
  final double? _BSTAR;
  final double? _MEAN_MOTION_DOT;
  final double? _MEAN_MOTION_DDOT;
  final RefFrame? _COV_REFERENCE_FRAME;
  final double? _CX_X;
  final double? _CY_X;
  final double? _CY_Y;
  final double? _CZ_X;
  final double? _CZ_Y;
  final double? _CZ_Z;
  final double? _CX_DOT_X;
  final double? _CX_DOT_Y;
  final double? _CX_DOT_Z;
  final double? _CX_DOT_X_DOT;
  final double? _CY_DOT_X;
  final double? _CY_DOT_Y;
  final double? _CY_DOT_Z;
  final double? _CY_DOT_X_DOT;
  final double? _CY_DOT_Y_DOT;
  final double? _CZ_DOT_X;
  final double? _CZ_DOT_Y;
  final double? _CZ_DOT_Z;
  final double? _CZ_DOT_X_DOT;
  final double? _CZ_DOT_Y_DOT;
  final double? _CZ_DOT_Z_DOT;
  final int? _USER_DEFINED_BIP_0044_TYPE;
  final String? _USER_DEFINED_OBJECT_DESIGNATOR;
  final String? _USER_DEFINED_EARTH_MODEL;
  final double? _USER_DEFINED_EPOCH_TIMESTAMP;
  final double? _USER_DEFINED_MICROSECONDS;

  OMMObjectBuilder({
    double? CCSDS_OMM_VERS,
    String? CREATION_DATE,
    String? ORIGINATOR,
    String? OBJECT_NAME,
    String? OBJECT_ID,
    String? CENTER_NAME,
    RefFrame? REFERENCE_FRAME,
    String? REFERENCE_FRAME_EPOCH,
    TimeSystem? TIME_SYSTEM,
    MeanElementTheory? MEAN_ELEMENT_THEORY,
    String? COMMENT,
    String? EPOCH,
    double? SEMI_MAJOR_AXIS,
    double? MEAN_MOTION,
    double? ECCENTRICITY,
    double? INCLINATION,
    double? RA_OF_ASC_NODE,
    double? ARG_OF_PERICENTER,
    double? MEAN_ANOMALY,
    double? GM,
    double? MASS,
    double? SOLAR_RAD_AREA,
    double? SOLAR_RAD_COEFF,
    double? DRAG_AREA,
    double? DRAG_COEFF,
    EphemerisType? EPHEMERIS_TYPE,
    String? CLASSIFICATION_TYPE,
    int? NORAD_CAT_ID,
    int? ELEMENT_SET_NO,
    double? REV_AT_EPOCH,
    double? BSTAR,
    double? MEAN_MOTION_DOT,
    double? MEAN_MOTION_DDOT,
    RefFrame? COV_REFERENCE_FRAME,
    double? CX_X,
    double? CY_X,
    double? CY_Y,
    double? CZ_X,
    double? CZ_Y,
    double? CZ_Z,
    double? CX_DOT_X,
    double? CX_DOT_Y,
    double? CX_DOT_Z,
    double? CX_DOT_X_DOT,
    double? CY_DOT_X,
    double? CY_DOT_Y,
    double? CY_DOT_Z,
    double? CY_DOT_X_DOT,
    double? CY_DOT_Y_DOT,
    double? CZ_DOT_X,
    double? CZ_DOT_Y,
    double? CZ_DOT_Z,
    double? CZ_DOT_X_DOT,
    double? CZ_DOT_Y_DOT,
    double? CZ_DOT_Z_DOT,
    int? USER_DEFINED_BIP_0044_TYPE,
    String? USER_DEFINED_OBJECT_DESIGNATOR,
    String? USER_DEFINED_EARTH_MODEL,
    double? USER_DEFINED_EPOCH_TIMESTAMP,
    double? USER_DEFINED_MICROSECONDS,
  })
      : _CCSDS_OMM_VERS = CCSDS_OMM_VERS,
        _CREATION_DATE = CREATION_DATE,
        _ORIGINATOR = ORIGINATOR,
        _OBJECT_NAME = OBJECT_NAME,
        _OBJECT_ID = OBJECT_ID,
        _CENTER_NAME = CENTER_NAME,
        _REFERENCE_FRAME = REFERENCE_FRAME,
        _REFERENCE_FRAME_EPOCH = REFERENCE_FRAME_EPOCH,
        _TIME_SYSTEM = TIME_SYSTEM,
        _MEAN_ELEMENT_THEORY = MEAN_ELEMENT_THEORY,
        _COMMENT = COMMENT,
        _EPOCH = EPOCH,
        _SEMI_MAJOR_AXIS = SEMI_MAJOR_AXIS,
        _MEAN_MOTION = MEAN_MOTION,
        _ECCENTRICITY = ECCENTRICITY,
        _INCLINATION = INCLINATION,
        _RA_OF_ASC_NODE = RA_OF_ASC_NODE,
        _ARG_OF_PERICENTER = ARG_OF_PERICENTER,
        _MEAN_ANOMALY = MEAN_ANOMALY,
        _GM = GM,
        _MASS = MASS,
        _SOLAR_RAD_AREA = SOLAR_RAD_AREA,
        _SOLAR_RAD_COEFF = SOLAR_RAD_COEFF,
        _DRAG_AREA = DRAG_AREA,
        _DRAG_COEFF = DRAG_COEFF,
        _EPHEMERIS_TYPE = EPHEMERIS_TYPE,
        _CLASSIFICATION_TYPE = CLASSIFICATION_TYPE,
        _NORAD_CAT_ID = NORAD_CAT_ID,
        _ELEMENT_SET_NO = ELEMENT_SET_NO,
        _REV_AT_EPOCH = REV_AT_EPOCH,
        _BSTAR = BSTAR,
        _MEAN_MOTION_DOT = MEAN_MOTION_DOT,
        _MEAN_MOTION_DDOT = MEAN_MOTION_DDOT,
        _COV_REFERENCE_FRAME = COV_REFERENCE_FRAME,
        _CX_X = CX_X,
        _CY_X = CY_X,
        _CY_Y = CY_Y,
        _CZ_X = CZ_X,
        _CZ_Y = CZ_Y,
        _CZ_Z = CZ_Z,
        _CX_DOT_X = CX_DOT_X,
        _CX_DOT_Y = CX_DOT_Y,
        _CX_DOT_Z = CX_DOT_Z,
        _CX_DOT_X_DOT = CX_DOT_X_DOT,
        _CY_DOT_X = CY_DOT_X,
        _CY_DOT_Y = CY_DOT_Y,
        _CY_DOT_Z = CY_DOT_Z,
        _CY_DOT_X_DOT = CY_DOT_X_DOT,
        _CY_DOT_Y_DOT = CY_DOT_Y_DOT,
        _CZ_DOT_X = CZ_DOT_X,
        _CZ_DOT_Y = CZ_DOT_Y,
        _CZ_DOT_Z = CZ_DOT_Z,
        _CZ_DOT_X_DOT = CZ_DOT_X_DOT,
        _CZ_DOT_Y_DOT = CZ_DOT_Y_DOT,
        _CZ_DOT_Z_DOT = CZ_DOT_Z_DOT,
        _USER_DEFINED_BIP_0044_TYPE = USER_DEFINED_BIP_0044_TYPE,
        _USER_DEFINED_OBJECT_DESIGNATOR = USER_DEFINED_OBJECT_DESIGNATOR,
        _USER_DEFINED_EARTH_MODEL = USER_DEFINED_EARTH_MODEL,
        _USER_DEFINED_EPOCH_TIMESTAMP = USER_DEFINED_EPOCH_TIMESTAMP,
        _USER_DEFINED_MICROSECONDS = USER_DEFINED_MICROSECONDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? CREATION_DATEOffset = _CREATION_DATE == null ? null
        : fbBuilder.writeString(_CREATION_DATE!);
    final int? ORIGINATOROffset = _ORIGINATOR == null ? null
        : fbBuilder.writeString(_ORIGINATOR!);
    final int? OBJECT_NAMEOffset = _OBJECT_NAME == null ? null
        : fbBuilder.writeString(_OBJECT_NAME!);
    final int? OBJECT_IDOffset = _OBJECT_ID == null ? null
        : fbBuilder.writeString(_OBJECT_ID!);
    final int? CENTER_NAMEOffset = _CENTER_NAME == null ? null
        : fbBuilder.writeString(_CENTER_NAME!);
    final int? REFERENCE_FRAME_EPOCHOffset = _REFERENCE_FRAME_EPOCH == null ? null
        : fbBuilder.writeString(_REFERENCE_FRAME_EPOCH!);
    final int? COMMENTOffset = _COMMENT == null ? null
        : fbBuilder.writeString(_COMMENT!);
    final int? EPOCHOffset = _EPOCH == null ? null
        : fbBuilder.writeString(_EPOCH!);
    final int? CLASSIFICATION_TYPEOffset = _CLASSIFICATION_TYPE == null ? null
        : fbBuilder.writeString(_CLASSIFICATION_TYPE!);
    final int? USER_DEFINED_OBJECT_DESIGNATOROffset = _USER_DEFINED_OBJECT_DESIGNATOR == null ? null
        : fbBuilder.writeString(_USER_DEFINED_OBJECT_DESIGNATOR!);
    final int? USER_DEFINED_EARTH_MODELOffset = _USER_DEFINED_EARTH_MODEL == null ? null
        : fbBuilder.writeString(_USER_DEFINED_EARTH_MODEL!);
    fbBuilder.startTable(60);
    fbBuilder.addFloat64(0, _CCSDS_OMM_VERS);
    fbBuilder.addOffset(1, CREATION_DATEOffset);
    fbBuilder.addOffset(2, ORIGINATOROffset);
    fbBuilder.addOffset(3, OBJECT_NAMEOffset);
    fbBuilder.addOffset(4, OBJECT_IDOffset);
    fbBuilder.addOffset(5, CENTER_NAMEOffset);
    fbBuilder.addInt8(6, _REFERENCE_FRAME?.value);
    fbBuilder.addOffset(7, REFERENCE_FRAME_EPOCHOffset);
    fbBuilder.addInt8(8, _TIME_SYSTEM?.value);
    fbBuilder.addInt8(9, _MEAN_ELEMENT_THEORY?.value);
    fbBuilder.addOffset(10, COMMENTOffset);
    fbBuilder.addOffset(11, EPOCHOffset);
    fbBuilder.addFloat64(12, _SEMI_MAJOR_AXIS);
    fbBuilder.addFloat64(13, _MEAN_MOTION);
    fbBuilder.addFloat64(14, _ECCENTRICITY);
    fbBuilder.addFloat64(15, _INCLINATION);
    fbBuilder.addFloat64(16, _RA_OF_ASC_NODE);
    fbBuilder.addFloat64(17, _ARG_OF_PERICENTER);
    fbBuilder.addFloat64(18, _MEAN_ANOMALY);
    fbBuilder.addFloat64(19, _GM);
    fbBuilder.addFloat64(20, _MASS);
    fbBuilder.addFloat64(21, _SOLAR_RAD_AREA);
    fbBuilder.addFloat64(22, _SOLAR_RAD_COEFF);
    fbBuilder.addFloat64(23, _DRAG_AREA);
    fbBuilder.addFloat64(24, _DRAG_COEFF);
    fbBuilder.addInt8(25, _EPHEMERIS_TYPE?.value);
    fbBuilder.addOffset(26, CLASSIFICATION_TYPEOffset);
    fbBuilder.addUint32(27, _NORAD_CAT_ID);
    fbBuilder.addUint32(28, _ELEMENT_SET_NO);
    fbBuilder.addFloat64(29, _REV_AT_EPOCH);
    fbBuilder.addFloat64(30, _BSTAR);
    fbBuilder.addFloat64(31, _MEAN_MOTION_DOT);
    fbBuilder.addFloat64(32, _MEAN_MOTION_DDOT);
    fbBuilder.addInt8(33, _COV_REFERENCE_FRAME?.value);
    fbBuilder.addFloat64(34, _CX_X);
    fbBuilder.addFloat64(35, _CY_X);
    fbBuilder.addFloat64(36, _CY_Y);
    fbBuilder.addFloat64(37, _CZ_X);
    fbBuilder.addFloat64(38, _CZ_Y);
    fbBuilder.addFloat64(39, _CZ_Z);
    fbBuilder.addFloat64(40, _CX_DOT_X);
    fbBuilder.addFloat64(41, _CX_DOT_Y);
    fbBuilder.addFloat64(42, _CX_DOT_Z);
    fbBuilder.addFloat64(43, _CX_DOT_X_DOT);
    fbBuilder.addFloat64(44, _CY_DOT_X);
    fbBuilder.addFloat64(45, _CY_DOT_Y);
    fbBuilder.addFloat64(46, _CY_DOT_Z);
    fbBuilder.addFloat64(47, _CY_DOT_X_DOT);
    fbBuilder.addFloat64(48, _CY_DOT_Y_DOT);
    fbBuilder.addFloat64(49, _CZ_DOT_X);
    fbBuilder.addFloat64(50, _CZ_DOT_Y);
    fbBuilder.addFloat64(51, _CZ_DOT_Z);
    fbBuilder.addFloat64(52, _CZ_DOT_X_DOT);
    fbBuilder.addFloat64(53, _CZ_DOT_Y_DOT);
    fbBuilder.addFloat64(54, _CZ_DOT_Z_DOT);
    fbBuilder.addUint32(55, _USER_DEFINED_BIP_0044_TYPE);
    fbBuilder.addOffset(56, USER_DEFINED_OBJECT_DESIGNATOROffset);
    fbBuilder.addOffset(57, USER_DEFINED_EARTH_MODELOffset);
    fbBuilder.addFloat64(58, _USER_DEFINED_EPOCH_TIMESTAMP);
    fbBuilder.addFloat64(59, _USER_DEFINED_MICROSECONDS);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OMMCOLLECTION {
  OMMCOLLECTION._(this._bc, this._bcOffset);
  factory OMMCOLLECTION(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OMMCOLLECTION> reader = _OMMCOLLECTIONReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<OMM>? get RECORDS => const fb.ListReader<OMM>(OMM.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'OMMCOLLECTION{RECORDS: ${RECORDS}}';
  }
}

class _OMMCOLLECTIONReader extends fb.TableReader<OMMCOLLECTION> {
  const _OMMCOLLECTIONReader();

  @override
  OMMCOLLECTION createObject(fb.BufferContext bc, int offset) => 
    OMMCOLLECTION._(bc, offset);
}

class OMMCOLLECTIONBuilder {
  OMMCOLLECTIONBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecordsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OMMCOLLECTIONObjectBuilder extends fb.ObjectBuilder {
  final List<OMMObjectBuilder>? _RECORDS;

  OMMCOLLECTIONObjectBuilder({
    List<OMMObjectBuilder>? RECORDS,
  })
      : _RECORDS = RECORDS;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? RECORDSOffset = _RECORDS == null ? null
        : fbBuilder.writeList(_RECORDS!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, RECORDSOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
