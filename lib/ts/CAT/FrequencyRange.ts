// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * Frequency range with lower and upper limits
 */
export class FrequencyRange implements flatbuffers.IUnpackableObject<FrequencyRangeT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FrequencyRange {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFrequencyRange(bb:flatbuffers.ByteBuffer, obj?:FrequencyRange):FrequencyRange {
  return (obj || new FrequencyRange()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFrequencyRange(bb:flatbuffers.ByteBuffer, obj?:FrequencyRange):FrequencyRange {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FrequencyRange()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Lower frequency in MHz
 */
LOWER():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Upper frequency in MHz
 */
UPPER():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startFrequencyRange(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addLower(builder:flatbuffers.Builder, LOWER:number) {
  builder.addFieldFloat64(0, LOWER, 0.0);
}

static addUpper(builder:flatbuffers.Builder, UPPER:number) {
  builder.addFieldFloat64(1, UPPER, 0.0);
}

static endFrequencyRange(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFrequencyRange(builder:flatbuffers.Builder, LOWER:number, UPPER:number):flatbuffers.Offset {
  FrequencyRange.startFrequencyRange(builder);
  FrequencyRange.addLower(builder, LOWER);
  FrequencyRange.addUpper(builder, UPPER);
  return FrequencyRange.endFrequencyRange(builder);
}

unpack(): FrequencyRangeT {
  return new FrequencyRangeT(
    this.LOWER(),
    this.UPPER()
  );
}


unpackTo(_o: FrequencyRangeT): void {
  _o.LOWER = this.LOWER();
  _o.UPPER = this.UPPER();
}
}

export class FrequencyRangeT implements flatbuffers.IGeneratedObject {
constructor(
  public LOWER: number = 0.0,
  public UPPER: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return FrequencyRange.createFrequencyRange(builder,
    this.LOWER,
    this.UPPER
  );
}
}
