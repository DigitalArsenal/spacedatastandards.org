// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class OrbitDetermination implements flatbuffers.IUnpackableObject<OrbitDeterminationT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OrbitDetermination {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOrbitDetermination(bb:flatbuffers.ByteBuffer, obj?:OrbitDetermination):OrbitDetermination {
  return (obj || new OrbitDetermination()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOrbitDetermination(bb:flatbuffers.ByteBuffer, obj?:OrbitDetermination):OrbitDetermination {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OrbitDetermination()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Unique identifier for the orbit determination.
 */
odId():string|null
odId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
odId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the previous orbit determination.
 */
odPrevId():string|null
odPrevId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
odPrevId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Algorithm used for orbit determination.
 */
odAlgorithm():string|null
odAlgorithm(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
odAlgorithm(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Method used for orbit determination.
 */
odMethod():string|null
odMethod(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
odMethod(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Epoch of the orbit determination.
 */
odEpoch():string|null
odEpoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
odEpoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time tag of the orbit determination.
 */
odTimeTag():string|null
odTimeTag(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
odTimeTag(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Process noise model used.
 */
odProcessNoise():string|null
odProcessNoise(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
odProcessNoise(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Covariance reduction techniques used.
 */
odCovReduction():string|null
odCovReduction(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
odCovReduction(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Noise models used.
 */
odNoiseModels():string|null
odNoiseModels(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
odNoiseModels(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Types of observations used (e.g., RANGE, DOPPLER).
 */
odObservationsType(index: number):string
odObservationsType(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
odObservationsType(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

odObservationsTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Number of observations used.
 */
odObservationsUsed():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of tracks used.
 */
odTracksUsed():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Data weighting scheme used.
 */
odDataWeighting():string|null
odDataWeighting(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
odDataWeighting(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Convergence criteria used.
 */
odConvergenceCriteria():string|null
odConvergenceCriteria(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
odConvergenceCriteria(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Parameters estimated during orbit determination.
 */
odEstParameters(index: number):string
odEstParameters(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
odEstParameters(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

odEstParametersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * A priori data used for orbit determination.
 */
odAprioriData():string|null
odAprioriData(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
odAprioriData(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Residuals from the orbit determination.
 */
odResiduals():string|null
odResiduals(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
odResiduals(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startOrbitDetermination(builder:flatbuffers.Builder) {
  builder.startObject(17);
}

static addOdId(builder:flatbuffers.Builder, odIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, odIdOffset, 0);
}

static addOdPrevId(builder:flatbuffers.Builder, odPrevIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, odPrevIdOffset, 0);
}

static addOdAlgorithm(builder:flatbuffers.Builder, odAlgorithmOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, odAlgorithmOffset, 0);
}

static addOdMethod(builder:flatbuffers.Builder, odMethodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, odMethodOffset, 0);
}

static addOdEpoch(builder:flatbuffers.Builder, odEpochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, odEpochOffset, 0);
}

static addOdTimeTag(builder:flatbuffers.Builder, odTimeTagOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, odTimeTagOffset, 0);
}

static addOdProcessNoise(builder:flatbuffers.Builder, odProcessNoiseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, odProcessNoiseOffset, 0);
}

static addOdCovReduction(builder:flatbuffers.Builder, odCovReductionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, odCovReductionOffset, 0);
}

static addOdNoiseModels(builder:flatbuffers.Builder, odNoiseModelsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, odNoiseModelsOffset, 0);
}

static addOdObservationsType(builder:flatbuffers.Builder, odObservationsTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, odObservationsTypeOffset, 0);
}

static createOdObservationsTypeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOdObservationsTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOdObservationsUsed(builder:flatbuffers.Builder, odObservationsUsed:number) {
  builder.addFieldInt32(10, odObservationsUsed, 0);
}

static addOdTracksUsed(builder:flatbuffers.Builder, odTracksUsed:number) {
  builder.addFieldInt32(11, odTracksUsed, 0);
}

static addOdDataWeighting(builder:flatbuffers.Builder, odDataWeightingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, odDataWeightingOffset, 0);
}

static addOdConvergenceCriteria(builder:flatbuffers.Builder, odConvergenceCriteriaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, odConvergenceCriteriaOffset, 0);
}

static addOdEstParameters(builder:flatbuffers.Builder, odEstParametersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, odEstParametersOffset, 0);
}

static createOdEstParametersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOdEstParametersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOdAprioriData(builder:flatbuffers.Builder, odAprioriDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, odAprioriDataOffset, 0);
}

static addOdResiduals(builder:flatbuffers.Builder, odResidualsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, odResidualsOffset, 0);
}

static endOrbitDetermination(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOrbitDetermination(builder:flatbuffers.Builder, odIdOffset:flatbuffers.Offset, odPrevIdOffset:flatbuffers.Offset, odAlgorithmOffset:flatbuffers.Offset, odMethodOffset:flatbuffers.Offset, odEpochOffset:flatbuffers.Offset, odTimeTagOffset:flatbuffers.Offset, odProcessNoiseOffset:flatbuffers.Offset, odCovReductionOffset:flatbuffers.Offset, odNoiseModelsOffset:flatbuffers.Offset, odObservationsTypeOffset:flatbuffers.Offset, odObservationsUsed:number, odTracksUsed:number, odDataWeightingOffset:flatbuffers.Offset, odConvergenceCriteriaOffset:flatbuffers.Offset, odEstParametersOffset:flatbuffers.Offset, odAprioriDataOffset:flatbuffers.Offset, odResidualsOffset:flatbuffers.Offset):flatbuffers.Offset {
  OrbitDetermination.startOrbitDetermination(builder);
  OrbitDetermination.addOdId(builder, odIdOffset);
  OrbitDetermination.addOdPrevId(builder, odPrevIdOffset);
  OrbitDetermination.addOdAlgorithm(builder, odAlgorithmOffset);
  OrbitDetermination.addOdMethod(builder, odMethodOffset);
  OrbitDetermination.addOdEpoch(builder, odEpochOffset);
  OrbitDetermination.addOdTimeTag(builder, odTimeTagOffset);
  OrbitDetermination.addOdProcessNoise(builder, odProcessNoiseOffset);
  OrbitDetermination.addOdCovReduction(builder, odCovReductionOffset);
  OrbitDetermination.addOdNoiseModels(builder, odNoiseModelsOffset);
  OrbitDetermination.addOdObservationsType(builder, odObservationsTypeOffset);
  OrbitDetermination.addOdObservationsUsed(builder, odObservationsUsed);
  OrbitDetermination.addOdTracksUsed(builder, odTracksUsed);
  OrbitDetermination.addOdDataWeighting(builder, odDataWeightingOffset);
  OrbitDetermination.addOdConvergenceCriteria(builder, odConvergenceCriteriaOffset);
  OrbitDetermination.addOdEstParameters(builder, odEstParametersOffset);
  OrbitDetermination.addOdAprioriData(builder, odAprioriDataOffset);
  OrbitDetermination.addOdResiduals(builder, odResidualsOffset);
  return OrbitDetermination.endOrbitDetermination(builder);
}

unpack(): OrbitDeterminationT {
  return new OrbitDeterminationT(
    this.odId(),
    this.odPrevId(),
    this.odAlgorithm(),
    this.odMethod(),
    this.odEpoch(),
    this.odTimeTag(),
    this.odProcessNoise(),
    this.odCovReduction(),
    this.odNoiseModels(),
    this.bb!.createScalarList<string>(this.odObservationsType.bind(this), this.odObservationsTypeLength()),
    this.odObservationsUsed(),
    this.odTracksUsed(),
    this.odDataWeighting(),
    this.odConvergenceCriteria(),
    this.bb!.createScalarList<string>(this.odEstParameters.bind(this), this.odEstParametersLength()),
    this.odAprioriData(),
    this.odResiduals()
  );
}


unpackTo(_o: OrbitDeterminationT): void {
  _o.odId = this.odId();
  _o.odPrevId = this.odPrevId();
  _o.odAlgorithm = this.odAlgorithm();
  _o.odMethod = this.odMethod();
  _o.odEpoch = this.odEpoch();
  _o.odTimeTag = this.odTimeTag();
  _o.odProcessNoise = this.odProcessNoise();
  _o.odCovReduction = this.odCovReduction();
  _o.odNoiseModels = this.odNoiseModels();
  _o.odObservationsType = this.bb!.createScalarList<string>(this.odObservationsType.bind(this), this.odObservationsTypeLength());
  _o.odObservationsUsed = this.odObservationsUsed();
  _o.odTracksUsed = this.odTracksUsed();
  _o.odDataWeighting = this.odDataWeighting();
  _o.odConvergenceCriteria = this.odConvergenceCriteria();
  _o.odEstParameters = this.bb!.createScalarList<string>(this.odEstParameters.bind(this), this.odEstParametersLength());
  _o.odAprioriData = this.odAprioriData();
  _o.odResiduals = this.odResiduals();
}
}

export class OrbitDeterminationT implements flatbuffers.IGeneratedObject {
constructor(
  public odId: string|Uint8Array|null = null,
  public odPrevId: string|Uint8Array|null = null,
  public odAlgorithm: string|Uint8Array|null = null,
  public odMethod: string|Uint8Array|null = null,
  public odEpoch: string|Uint8Array|null = null,
  public odTimeTag: string|Uint8Array|null = null,
  public odProcessNoise: string|Uint8Array|null = null,
  public odCovReduction: string|Uint8Array|null = null,
  public odNoiseModels: string|Uint8Array|null = null,
  public odObservationsType: (string)[] = [],
  public odObservationsUsed: number = 0,
  public odTracksUsed: number = 0,
  public odDataWeighting: string|Uint8Array|null = null,
  public odConvergenceCriteria: string|Uint8Array|null = null,
  public odEstParameters: (string)[] = [],
  public odAprioriData: string|Uint8Array|null = null,
  public odResiduals: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const odId = (this.odId !== null ? builder.createString(this.odId!) : 0);
  const odPrevId = (this.odPrevId !== null ? builder.createString(this.odPrevId!) : 0);
  const odAlgorithm = (this.odAlgorithm !== null ? builder.createString(this.odAlgorithm!) : 0);
  const odMethod = (this.odMethod !== null ? builder.createString(this.odMethod!) : 0);
  const odEpoch = (this.odEpoch !== null ? builder.createString(this.odEpoch!) : 0);
  const odTimeTag = (this.odTimeTag !== null ? builder.createString(this.odTimeTag!) : 0);
  const odProcessNoise = (this.odProcessNoise !== null ? builder.createString(this.odProcessNoise!) : 0);
  const odCovReduction = (this.odCovReduction !== null ? builder.createString(this.odCovReduction!) : 0);
  const odNoiseModels = (this.odNoiseModels !== null ? builder.createString(this.odNoiseModels!) : 0);
  const odObservationsType = OrbitDetermination.createOdObservationsTypeVector(builder, builder.createObjectOffsetList(this.odObservationsType));
  const odDataWeighting = (this.odDataWeighting !== null ? builder.createString(this.odDataWeighting!) : 0);
  const odConvergenceCriteria = (this.odConvergenceCriteria !== null ? builder.createString(this.odConvergenceCriteria!) : 0);
  const odEstParameters = OrbitDetermination.createOdEstParametersVector(builder, builder.createObjectOffsetList(this.odEstParameters));
  const odAprioriData = (this.odAprioriData !== null ? builder.createString(this.odAprioriData!) : 0);
  const odResiduals = (this.odResiduals !== null ? builder.createString(this.odResiduals!) : 0);

  return OrbitDetermination.createOrbitDetermination(builder,
    odId,
    odPrevId,
    odAlgorithm,
    odMethod,
    odEpoch,
    odTimeTag,
    odProcessNoise,
    odCovReduction,
    odNoiseModels,
    odObservationsType,
    this.odObservationsUsed,
    this.odTracksUsed,
    odDataWeighting,
    odConvergenceCriteria,
    odEstParameters,
    odAprioriData,
    odResiduals
  );
}
}
