// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Header implements flatbuffers.IUnpackableObject<HeaderT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Header {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHeader(bb:flatbuffers.ByteBuffer, obj?:Header):Header {
  return (obj || new Header()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHeader(bb:flatbuffers.ByteBuffer, obj?:Header):Header {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Header()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Format version in the form of 'x.y', where 'y' is incremented for minor changes, and 'x' for major changes.
 */
ccsdsOcmVers():string|null
ccsdsOcmVers(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ccsdsOcmVers(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Comments (a contiguous set of one or more comment lines may be provided immediately after the version number).
 */
comment(index: number):string
comment(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
comment(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

commentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * User-defined free-text message classification/caveats of this OCM.
 */
classification():string|null
classification(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classification(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * File creation date/time in UTC.
 */
creationDate():string|null
creationDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
creationDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Creating agency or operator.
 */
originator():string|null
originator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Free-text field containing an ID that uniquely identifies a message from this originator.
 */
messageId():string|null
messageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
messageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startHeader(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addCcsdsOcmVers(builder:flatbuffers.Builder, ccsdsOcmVersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, ccsdsOcmVersOffset, 0);
}

static addComment(builder:flatbuffers.Builder, commentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, commentOffset, 0);
}

static createCommentVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCommentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addClassification(builder:flatbuffers.Builder, classificationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, classificationOffset, 0);
}

static addCreationDate(builder:flatbuffers.Builder, creationDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, creationDateOffset, 0);
}

static addOriginator(builder:flatbuffers.Builder, originatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, originatorOffset, 0);
}

static addMessageId(builder:flatbuffers.Builder, messageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, messageIdOffset, 0);
}

static endHeader(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHeader(builder:flatbuffers.Builder, ccsdsOcmVersOffset:flatbuffers.Offset, commentOffset:flatbuffers.Offset, classificationOffset:flatbuffers.Offset, creationDateOffset:flatbuffers.Offset, originatorOffset:flatbuffers.Offset, messageIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  Header.startHeader(builder);
  Header.addCcsdsOcmVers(builder, ccsdsOcmVersOffset);
  Header.addComment(builder, commentOffset);
  Header.addClassification(builder, classificationOffset);
  Header.addCreationDate(builder, creationDateOffset);
  Header.addOriginator(builder, originatorOffset);
  Header.addMessageId(builder, messageIdOffset);
  return Header.endHeader(builder);
}

unpack(): HeaderT {
  return new HeaderT(
    this.ccsdsOcmVers(),
    this.bb!.createScalarList<string>(this.comment.bind(this), this.commentLength()),
    this.classification(),
    this.creationDate(),
    this.originator(),
    this.messageId()
  );
}


unpackTo(_o: HeaderT): void {
  _o.ccsdsOcmVers = this.ccsdsOcmVers();
  _o.comment = this.bb!.createScalarList<string>(this.comment.bind(this), this.commentLength());
  _o.classification = this.classification();
  _o.creationDate = this.creationDate();
  _o.originator = this.originator();
  _o.messageId = this.messageId();
}
}

export class HeaderT implements flatbuffers.IGeneratedObject {
constructor(
  public ccsdsOcmVers: string|Uint8Array|null = null,
  public comment: (string)[] = [],
  public classification: string|Uint8Array|null = null,
  public creationDate: string|Uint8Array|null = null,
  public originator: string|Uint8Array|null = null,
  public messageId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const ccsdsOcmVers = (this.ccsdsOcmVers !== null ? builder.createString(this.ccsdsOcmVers!) : 0);
  const comment = Header.createCommentVector(builder, builder.createObjectOffsetList(this.comment));
  const classification = (this.classification !== null ? builder.createString(this.classification!) : 0);
  const creationDate = (this.creationDate !== null ? builder.createString(this.creationDate!) : 0);
  const originator = (this.originator !== null ? builder.createString(this.originator!) : 0);
  const messageId = (this.messageId !== null ? builder.createString(this.messageId!) : 0);

  return Header.createHeader(builder,
    ccsdsOcmVers,
    comment,
    classification,
    creationDate,
    originator,
    messageId
  );
}
}
