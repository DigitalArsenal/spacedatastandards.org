// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { OCM, OCMT } from './OCM.js';


export class OCMCOLLECTION implements flatbuffers.IUnpackableObject<OCMCOLLECTIONT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OCMCOLLECTION {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOCMCOLLECTION(bb:flatbuffers.ByteBuffer, obj?:OCMCOLLECTION):OCMCOLLECTION {
  return (obj || new OCMCOLLECTION()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOCMCOLLECTION(bb:flatbuffers.ByteBuffer, obj?:OCMCOLLECTION):OCMCOLLECTION {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OCMCOLLECTION()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Collection of OCM records.
 */
RECORDS(index: number, obj?:OCM):OCM|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new OCM()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

recordsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startOCMCOLLECTION(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addRecords(builder:flatbuffers.Builder, RECORDSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, RECORDSOffset, 0);
}

static createRecordsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRecordsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endOCMCOLLECTION(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOCMCOLLECTION(builder:flatbuffers.Builder, RECORDSOffset:flatbuffers.Offset):flatbuffers.Offset {
  OCMCOLLECTION.startOCMCOLLECTION(builder);
  OCMCOLLECTION.addRecords(builder, RECORDSOffset);
  return OCMCOLLECTION.endOCMCOLLECTION(builder);
}

unpack(): OCMCOLLECTIONT {
  return new OCMCOLLECTIONT(
    this.bb!.createObjList<OCM, OCMT>(this.RECORDS.bind(this), this.recordsLength())
  );
}


unpackTo(_o: OCMCOLLECTIONT): void {
  _o.RECORDS = this.bb!.createObjList<OCM, OCMT>(this.RECORDS.bind(this), this.recordsLength());
}
}

export class OCMCOLLECTIONT implements flatbuffers.IGeneratedObject {
constructor(
  public RECORDS: (OCMT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const RECORDS = OCMCOLLECTION.createRecordsVector(builder, builder.createObjectOffsetList(this.RECORDS));

  return OCMCOLLECTION.createOCMCOLLECTION(builder,
    RECORDS
  );
}
}
