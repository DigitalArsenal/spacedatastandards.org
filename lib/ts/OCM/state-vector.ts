// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class StateVector implements flatbuffers.IUnpackableObject<StateVectorT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StateVector {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStateVector(bb:flatbuffers.ByteBuffer, obj?:StateVector):StateVector {
  return (obj || new StateVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStateVector(bb:flatbuffers.ByteBuffer, obj?:StateVector):StateVector {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StateVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Epoch of the state vector.
 */
epoch():string|null
epoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
epoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * X component of position in the specified reference frame.
 */
x():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Y component of position.
 */
y():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Z component of position.
 */
z():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * X component of velocity.
 */
xDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Y component of velocity.
 */
yDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Z component of velocity.
 */
zDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * X component of acceleration.
 */
xDdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Y component of acceleration.
 */
yDdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Z component of acceleration.
 */
zDdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startStateVector(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addEpoch(builder:flatbuffers.Builder, epochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, epochOffset, 0);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldFloat64(1, x, 0.0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldFloat64(2, y, 0.0);
}

static addZ(builder:flatbuffers.Builder, z:number) {
  builder.addFieldFloat64(3, z, 0.0);
}

static addXDot(builder:flatbuffers.Builder, xDot:number) {
  builder.addFieldFloat64(4, xDot, 0.0);
}

static addYDot(builder:flatbuffers.Builder, yDot:number) {
  builder.addFieldFloat64(5, yDot, 0.0);
}

static addZDot(builder:flatbuffers.Builder, zDot:number) {
  builder.addFieldFloat64(6, zDot, 0.0);
}

static addXDdot(builder:flatbuffers.Builder, xDdot:number) {
  builder.addFieldFloat64(7, xDdot, 0.0);
}

static addYDdot(builder:flatbuffers.Builder, yDdot:number) {
  builder.addFieldFloat64(8, yDdot, 0.0);
}

static addZDdot(builder:flatbuffers.Builder, zDdot:number) {
  builder.addFieldFloat64(9, zDdot, 0.0);
}

static endStateVector(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createStateVector(builder:flatbuffers.Builder, epochOffset:flatbuffers.Offset, x:number, y:number, z:number, xDot:number, yDot:number, zDot:number, xDdot:number, yDdot:number, zDdot:number):flatbuffers.Offset {
  StateVector.startStateVector(builder);
  StateVector.addEpoch(builder, epochOffset);
  StateVector.addX(builder, x);
  StateVector.addY(builder, y);
  StateVector.addZ(builder, z);
  StateVector.addXDot(builder, xDot);
  StateVector.addYDot(builder, yDot);
  StateVector.addZDot(builder, zDot);
  StateVector.addXDdot(builder, xDdot);
  StateVector.addYDdot(builder, yDdot);
  StateVector.addZDdot(builder, zDdot);
  return StateVector.endStateVector(builder);
}

unpack(): StateVectorT {
  return new StateVectorT(
    this.epoch(),
    this.x(),
    this.y(),
    this.z(),
    this.xDot(),
    this.yDot(),
    this.zDot(),
    this.xDdot(),
    this.yDdot(),
    this.zDdot()
  );
}


unpackTo(_o: StateVectorT): void {
  _o.epoch = this.epoch();
  _o.x = this.x();
  _o.y = this.y();
  _o.z = this.z();
  _o.xDot = this.xDot();
  _o.yDot = this.yDot();
  _o.zDot = this.zDot();
  _o.xDdot = this.xDdot();
  _o.yDdot = this.yDdot();
  _o.zDdot = this.zDdot();
}
}

export class StateVectorT implements flatbuffers.IGeneratedObject {
constructor(
  public epoch: string|Uint8Array|null = null,
  public x: number = 0.0,
  public y: number = 0.0,
  public z: number = 0.0,
  public xDot: number = 0.0,
  public yDot: number = 0.0,
  public zDot: number = 0.0,
  public xDdot: number = 0.0,
  public yDdot: number = 0.0,
  public zDdot: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const epoch = (this.epoch !== null ? builder.createString(this.epoch!) : 0);

  return StateVector.createStateVector(builder,
    epoch,
    this.x,
    this.y,
    this.z,
    this.xDot,
    this.yDot,
    this.zDot,
    this.xDdot,
    this.yDdot,
    this.zDdot
  );
}
}
