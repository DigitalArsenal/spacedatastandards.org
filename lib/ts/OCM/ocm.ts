// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Header, HeaderT } from './header.js';
import { Maneuver, ManeuverT } from './maneuver.js';
import { Metadata, MetadataT } from './metadata.js';
import { OrbitDetermination, OrbitDeterminationT } from './orbit-determination.js';
import { Perturbations, PerturbationsT } from './perturbations.js';
import { PhysicalProperties, PhysicalPropertiesT } from './physical-properties.js';
import { StateVector, StateVectorT } from './state-vector.js';
import { UserDefinedParameters, UserDefinedParametersT } from './user-defined-parameters.js';


/**
 * Orbit Comprehensive Message
 */
export class OCM implements flatbuffers.IUnpackableObject<OCMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OCM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOCM(bb:flatbuffers.ByteBuffer, obj?:OCM):OCM {
  return (obj || new OCM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOCM(bb:flatbuffers.ByteBuffer, obj?:OCM):OCM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OCM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$OCM');
}

/**
 * Header section of the OCM.
 */
header(obj?:Header):Header|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Header()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Metadata section of the OCM.
 */
metadata(obj?:Metadata):Metadata|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Metadata()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Trajectory type (e.g., PROPAGATED, ESTIMATED).
 */
trajType():string|null
trajType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trajType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * State vector data.
 */
stateData(index: number, obj?:StateVector):StateVector|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new StateVector()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

stateDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Physical properties of the space object.
 */
physicalProperties(obj?:PhysicalProperties):PhysicalProperties|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new PhysicalProperties()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Covariance data associated with the state vectors.
 */
covarianceData(index: number, obj?:StateVector):StateVector|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new StateVector()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

covarianceDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Maneuver data.
 */
maneuverData(index: number, obj?:Maneuver):Maneuver|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new Maneuver()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

maneuverDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Perturbations parameters used.
 */
perturbations(obj?:Perturbations):Perturbations|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new Perturbations()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Orbit determination data.
 */
orbitDetermination(obj?:OrbitDetermination):OrbitDetermination|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new OrbitDetermination()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * User-defined parameters and supplemental comments.
 */
userDefinedParameters(index: number, obj?:UserDefinedParameters):UserDefinedParameters|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new UserDefinedParameters()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

userDefinedParametersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startOCM(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addHeader(builder:flatbuffers.Builder, headerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, headerOffset, 0);
}

static addMetadata(builder:flatbuffers.Builder, metadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, metadataOffset, 0);
}

static addTrajType(builder:flatbuffers.Builder, trajTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, trajTypeOffset, 0);
}

static addStateData(builder:flatbuffers.Builder, stateDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, stateDataOffset, 0);
}

static createStateDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStateDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPhysicalProperties(builder:flatbuffers.Builder, physicalPropertiesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, physicalPropertiesOffset, 0);
}

static addCovarianceData(builder:flatbuffers.Builder, covarianceDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, covarianceDataOffset, 0);
}

static createCovarianceDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCovarianceDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addManeuverData(builder:flatbuffers.Builder, maneuverDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, maneuverDataOffset, 0);
}

static createManeuverDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startManeuverDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPerturbations(builder:flatbuffers.Builder, perturbationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, perturbationsOffset, 0);
}

static addOrbitDetermination(builder:flatbuffers.Builder, orbitDeterminationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, orbitDeterminationOffset, 0);
}

static addUserDefinedParameters(builder:flatbuffers.Builder, userDefinedParametersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, userDefinedParametersOffset, 0);
}

static createUserDefinedParametersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUserDefinedParametersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endOCM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOCMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$OCM');
}

static finishSizePrefixedOCMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$OCM', true);
}


unpack(): OCMT {
  return new OCMT(
    (this.header() !== null ? this.header()!.unpack() : null),
    (this.metadata() !== null ? this.metadata()!.unpack() : null),
    this.trajType(),
    this.bb!.createObjList<StateVector, StateVectorT>(this.stateData.bind(this), this.stateDataLength()),
    (this.physicalProperties() !== null ? this.physicalProperties()!.unpack() : null),
    this.bb!.createObjList<StateVector, StateVectorT>(this.covarianceData.bind(this), this.covarianceDataLength()),
    this.bb!.createObjList<Maneuver, ManeuverT>(this.maneuverData.bind(this), this.maneuverDataLength()),
    (this.perturbations() !== null ? this.perturbations()!.unpack() : null),
    (this.orbitDetermination() !== null ? this.orbitDetermination()!.unpack() : null),
    this.bb!.createObjList<UserDefinedParameters, UserDefinedParametersT>(this.userDefinedParameters.bind(this), this.userDefinedParametersLength())
  );
}


unpackTo(_o: OCMT): void {
  _o.header = (this.header() !== null ? this.header()!.unpack() : null);
  _o.metadata = (this.metadata() !== null ? this.metadata()!.unpack() : null);
  _o.trajType = this.trajType();
  _o.stateData = this.bb!.createObjList<StateVector, StateVectorT>(this.stateData.bind(this), this.stateDataLength());
  _o.physicalProperties = (this.physicalProperties() !== null ? this.physicalProperties()!.unpack() : null);
  _o.covarianceData = this.bb!.createObjList<StateVector, StateVectorT>(this.covarianceData.bind(this), this.covarianceDataLength());
  _o.maneuverData = this.bb!.createObjList<Maneuver, ManeuverT>(this.maneuverData.bind(this), this.maneuverDataLength());
  _o.perturbations = (this.perturbations() !== null ? this.perturbations()!.unpack() : null);
  _o.orbitDetermination = (this.orbitDetermination() !== null ? this.orbitDetermination()!.unpack() : null);
  _o.userDefinedParameters = this.bb!.createObjList<UserDefinedParameters, UserDefinedParametersT>(this.userDefinedParameters.bind(this), this.userDefinedParametersLength());
}
}

export class OCMT implements flatbuffers.IGeneratedObject {
constructor(
  public header: HeaderT|null = null,
  public metadata: MetadataT|null = null,
  public trajType: string|Uint8Array|null = null,
  public stateData: (StateVectorT)[] = [],
  public physicalProperties: PhysicalPropertiesT|null = null,
  public covarianceData: (StateVectorT)[] = [],
  public maneuverData: (ManeuverT)[] = [],
  public perturbations: PerturbationsT|null = null,
  public orbitDetermination: OrbitDeterminationT|null = null,
  public userDefinedParameters: (UserDefinedParametersT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const header = (this.header !== null ? this.header!.pack(builder) : 0);
  const metadata = (this.metadata !== null ? this.metadata!.pack(builder) : 0);
  const trajType = (this.trajType !== null ? builder.createString(this.trajType!) : 0);
  const stateData = OCM.createStateDataVector(builder, builder.createObjectOffsetList(this.stateData));
  const physicalProperties = (this.physicalProperties !== null ? this.physicalProperties!.pack(builder) : 0);
  const covarianceData = OCM.createCovarianceDataVector(builder, builder.createObjectOffsetList(this.covarianceData));
  const maneuverData = OCM.createManeuverDataVector(builder, builder.createObjectOffsetList(this.maneuverData));
  const perturbations = (this.perturbations !== null ? this.perturbations!.pack(builder) : 0);
  const orbitDetermination = (this.orbitDetermination !== null ? this.orbitDetermination!.pack(builder) : 0);
  const userDefinedParameters = OCM.createUserDefinedParametersVector(builder, builder.createObjectOffsetList(this.userDefinedParameters));

  OCM.startOCM(builder);
  OCM.addHeader(builder, header);
  OCM.addMetadata(builder, metadata);
  OCM.addTrajType(builder, trajType);
  OCM.addStateData(builder, stateData);
  OCM.addPhysicalProperties(builder, physicalProperties);
  OCM.addCovarianceData(builder, covarianceData);
  OCM.addManeuverData(builder, maneuverData);
  OCM.addPerturbations(builder, perturbations);
  OCM.addOrbitDetermination(builder, orbitDetermination);
  OCM.addUserDefinedParameters(builder, userDefinedParameters);

  return OCM.endOCM(builder);
}
}
