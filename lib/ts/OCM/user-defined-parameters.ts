// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class UserDefinedParameters implements flatbuffers.IUnpackableObject<UserDefinedParametersT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UserDefinedParameters {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUserDefinedParameters(bb:flatbuffers.ByteBuffer, obj?:UserDefinedParameters):UserDefinedParameters {
  return (obj || new UserDefinedParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUserDefinedParameters(bb:flatbuffers.ByteBuffer, obj?:UserDefinedParameters):UserDefinedParameters {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UserDefinedParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Name of the user-defined parameter.
 */
paramName():string|null
paramName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
paramName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Value of the user-defined parameter.
 */
paramValue():string|null
paramValue(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
paramValue(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startUserDefinedParameters(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addParamName(builder:flatbuffers.Builder, paramNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, paramNameOffset, 0);
}

static addParamValue(builder:flatbuffers.Builder, paramValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, paramValueOffset, 0);
}

static endUserDefinedParameters(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUserDefinedParameters(builder:flatbuffers.Builder, paramNameOffset:flatbuffers.Offset, paramValueOffset:flatbuffers.Offset):flatbuffers.Offset {
  UserDefinedParameters.startUserDefinedParameters(builder);
  UserDefinedParameters.addParamName(builder, paramNameOffset);
  UserDefinedParameters.addParamValue(builder, paramValueOffset);
  return UserDefinedParameters.endUserDefinedParameters(builder);
}

unpack(): UserDefinedParametersT {
  return new UserDefinedParametersT(
    this.paramName(),
    this.paramValue()
  );
}


unpackTo(_o: UserDefinedParametersT): void {
  _o.paramName = this.paramName();
  _o.paramValue = this.paramValue();
}
}

export class UserDefinedParametersT implements flatbuffers.IGeneratedObject {
constructor(
  public paramName: string|Uint8Array|null = null,
  public paramValue: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const paramName = (this.paramName !== null ? builder.createString(this.paramName!) : 0);
  const paramValue = (this.paramValue !== null ? builder.createString(this.paramValue!) : 0);

  return UserDefinedParameters.createUserDefinedParameters(builder,
    paramName,
    paramValue
  );
}
}
