// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Perturbations implements flatbuffers.IUnpackableObject<PerturbationsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Perturbations {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPerturbations(bb:flatbuffers.ByteBuffer, obj?:Perturbations):Perturbations {
  return (obj || new Perturbations()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPerturbations(bb:flatbuffers.ByteBuffer, obj?:Perturbations):Perturbations {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Perturbations()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Comments in the Perturbations section.
 */
comment(index: number):string
comment(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
comment(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

commentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Atmospheric model used.
 */
atmosphericModel():string|null
atmosphericModel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
atmosphericModel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Gravity model used.
 */
gravityModel():string|null
gravityModel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gravityModel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Degree of the gravity model.
 */
gravityDegree():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Order of the gravity model.
 */
gravityOrder():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Gravitational constant times the mass of the central body.
 */
gm():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * List of celestial bodies included in n-body perturbations.
 */
nBodyPerturbations(index: number):string
nBodyPerturbations(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
nBodyPerturbations(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

nBodyPerturbationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Ocean tides model used.
 */
oceanTidesModel():string|null
oceanTidesModel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
oceanTidesModel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Solid tides model used.
 */
solidTidesModel():string|null
solidTidesModel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
solidTidesModel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Atmospheric tides model used.
 */
atmosphericTidesModel():string|null
atmosphericTidesModel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
atmosphericTidesModel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Geopotential model used.
 */
geopotentialModel():string|null
geopotentialModel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
geopotentialModel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Solar radiation pressure model used.
 */
solarRadPressure():string|null
solarRadPressure(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
solarRadPressure(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Albedo model used.
 */
albedo():string|null
albedo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
albedo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Thermal model used.
 */
thermal():string|null
thermal(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
thermal(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Relativity model used.
 */
relativity():string|null
relativity(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
relativity(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Atmospheric drag model used.
 */
atmosphericDrag():string|null
atmosphericDrag(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
atmosphericDrag(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Fixed geomagnetic Kp index used.
 */
fixedGeomagKp():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fixed F10.7 solar flux value used.
 */
fixedF10P7():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Fixed mean F10.7 solar flux value used.
 */
fixedF10P7Mean():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startPerturbations(builder:flatbuffers.Builder) {
  builder.startObject(19);
}

static addComment(builder:flatbuffers.Builder, commentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, commentOffset, 0);
}

static createCommentVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCommentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAtmosphericModel(builder:flatbuffers.Builder, atmosphericModelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, atmosphericModelOffset, 0);
}

static addGravityModel(builder:flatbuffers.Builder, gravityModelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, gravityModelOffset, 0);
}

static addGravityDegree(builder:flatbuffers.Builder, gravityDegree:number) {
  builder.addFieldInt32(3, gravityDegree, 0);
}

static addGravityOrder(builder:flatbuffers.Builder, gravityOrder:number) {
  builder.addFieldInt32(4, gravityOrder, 0);
}

static addGm(builder:flatbuffers.Builder, gm:number) {
  builder.addFieldFloat64(5, gm, 0.0);
}

static addNBodyPerturbations(builder:flatbuffers.Builder, nBodyPerturbationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, nBodyPerturbationsOffset, 0);
}

static createNBodyPerturbationsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNBodyPerturbationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOceanTidesModel(builder:flatbuffers.Builder, oceanTidesModelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, oceanTidesModelOffset, 0);
}

static addSolidTidesModel(builder:flatbuffers.Builder, solidTidesModelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, solidTidesModelOffset, 0);
}

static addAtmosphericTidesModel(builder:flatbuffers.Builder, atmosphericTidesModelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, atmosphericTidesModelOffset, 0);
}

static addGeopotentialModel(builder:flatbuffers.Builder, geopotentialModelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, geopotentialModelOffset, 0);
}

static addSolarRadPressure(builder:flatbuffers.Builder, solarRadPressureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, solarRadPressureOffset, 0);
}

static addAlbedo(builder:flatbuffers.Builder, albedoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, albedoOffset, 0);
}

static addThermal(builder:flatbuffers.Builder, thermalOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, thermalOffset, 0);
}

static addRelativity(builder:flatbuffers.Builder, relativityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, relativityOffset, 0);
}

static addAtmosphericDrag(builder:flatbuffers.Builder, atmosphericDragOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, atmosphericDragOffset, 0);
}

static addFixedGeomagKp(builder:flatbuffers.Builder, fixedGeomagKp:number) {
  builder.addFieldFloat64(16, fixedGeomagKp, 0.0);
}

static addFixedF10P7(builder:flatbuffers.Builder, fixedF10P7:number) {
  builder.addFieldFloat64(17, fixedF10P7, 0.0);
}

static addFixedF10P7Mean(builder:flatbuffers.Builder, fixedF10P7Mean:number) {
  builder.addFieldFloat64(18, fixedF10P7Mean, 0.0);
}

static endPerturbations(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPerturbations(builder:flatbuffers.Builder, commentOffset:flatbuffers.Offset, atmosphericModelOffset:flatbuffers.Offset, gravityModelOffset:flatbuffers.Offset, gravityDegree:number, gravityOrder:number, gm:number, nBodyPerturbationsOffset:flatbuffers.Offset, oceanTidesModelOffset:flatbuffers.Offset, solidTidesModelOffset:flatbuffers.Offset, atmosphericTidesModelOffset:flatbuffers.Offset, geopotentialModelOffset:flatbuffers.Offset, solarRadPressureOffset:flatbuffers.Offset, albedoOffset:flatbuffers.Offset, thermalOffset:flatbuffers.Offset, relativityOffset:flatbuffers.Offset, atmosphericDragOffset:flatbuffers.Offset, fixedGeomagKp:number, fixedF10P7:number, fixedF10P7Mean:number):flatbuffers.Offset {
  Perturbations.startPerturbations(builder);
  Perturbations.addComment(builder, commentOffset);
  Perturbations.addAtmosphericModel(builder, atmosphericModelOffset);
  Perturbations.addGravityModel(builder, gravityModelOffset);
  Perturbations.addGravityDegree(builder, gravityDegree);
  Perturbations.addGravityOrder(builder, gravityOrder);
  Perturbations.addGm(builder, gm);
  Perturbations.addNBodyPerturbations(builder, nBodyPerturbationsOffset);
  Perturbations.addOceanTidesModel(builder, oceanTidesModelOffset);
  Perturbations.addSolidTidesModel(builder, solidTidesModelOffset);
  Perturbations.addAtmosphericTidesModel(builder, atmosphericTidesModelOffset);
  Perturbations.addGeopotentialModel(builder, geopotentialModelOffset);
  Perturbations.addSolarRadPressure(builder, solarRadPressureOffset);
  Perturbations.addAlbedo(builder, albedoOffset);
  Perturbations.addThermal(builder, thermalOffset);
  Perturbations.addRelativity(builder, relativityOffset);
  Perturbations.addAtmosphericDrag(builder, atmosphericDragOffset);
  Perturbations.addFixedGeomagKp(builder, fixedGeomagKp);
  Perturbations.addFixedF10P7(builder, fixedF10P7);
  Perturbations.addFixedF10P7Mean(builder, fixedF10P7Mean);
  return Perturbations.endPerturbations(builder);
}

unpack(): PerturbationsT {
  return new PerturbationsT(
    this.bb!.createScalarList<string>(this.comment.bind(this), this.commentLength()),
    this.atmosphericModel(),
    this.gravityModel(),
    this.gravityDegree(),
    this.gravityOrder(),
    this.gm(),
    this.bb!.createScalarList<string>(this.nBodyPerturbations.bind(this), this.nBodyPerturbationsLength()),
    this.oceanTidesModel(),
    this.solidTidesModel(),
    this.atmosphericTidesModel(),
    this.geopotentialModel(),
    this.solarRadPressure(),
    this.albedo(),
    this.thermal(),
    this.relativity(),
    this.atmosphericDrag(),
    this.fixedGeomagKp(),
    this.fixedF10P7(),
    this.fixedF10P7Mean()
  );
}


unpackTo(_o: PerturbationsT): void {
  _o.comment = this.bb!.createScalarList<string>(this.comment.bind(this), this.commentLength());
  _o.atmosphericModel = this.atmosphericModel();
  _o.gravityModel = this.gravityModel();
  _o.gravityDegree = this.gravityDegree();
  _o.gravityOrder = this.gravityOrder();
  _o.gm = this.gm();
  _o.nBodyPerturbations = this.bb!.createScalarList<string>(this.nBodyPerturbations.bind(this), this.nBodyPerturbationsLength());
  _o.oceanTidesModel = this.oceanTidesModel();
  _o.solidTidesModel = this.solidTidesModel();
  _o.atmosphericTidesModel = this.atmosphericTidesModel();
  _o.geopotentialModel = this.geopotentialModel();
  _o.solarRadPressure = this.solarRadPressure();
  _o.albedo = this.albedo();
  _o.thermal = this.thermal();
  _o.relativity = this.relativity();
  _o.atmosphericDrag = this.atmosphericDrag();
  _o.fixedGeomagKp = this.fixedGeomagKp();
  _o.fixedF10P7 = this.fixedF10P7();
  _o.fixedF10P7Mean = this.fixedF10P7Mean();
}
}

export class PerturbationsT implements flatbuffers.IGeneratedObject {
constructor(
  public comment: (string)[] = [],
  public atmosphericModel: string|Uint8Array|null = null,
  public gravityModel: string|Uint8Array|null = null,
  public gravityDegree: number = 0,
  public gravityOrder: number = 0,
  public gm: number = 0.0,
  public nBodyPerturbations: (string)[] = [],
  public oceanTidesModel: string|Uint8Array|null = null,
  public solidTidesModel: string|Uint8Array|null = null,
  public atmosphericTidesModel: string|Uint8Array|null = null,
  public geopotentialModel: string|Uint8Array|null = null,
  public solarRadPressure: string|Uint8Array|null = null,
  public albedo: string|Uint8Array|null = null,
  public thermal: string|Uint8Array|null = null,
  public relativity: string|Uint8Array|null = null,
  public atmosphericDrag: string|Uint8Array|null = null,
  public fixedGeomagKp: number = 0.0,
  public fixedF10P7: number = 0.0,
  public fixedF10P7Mean: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const comment = Perturbations.createCommentVector(builder, builder.createObjectOffsetList(this.comment));
  const atmosphericModel = (this.atmosphericModel !== null ? builder.createString(this.atmosphericModel!) : 0);
  const gravityModel = (this.gravityModel !== null ? builder.createString(this.gravityModel!) : 0);
  const nBodyPerturbations = Perturbations.createNBodyPerturbationsVector(builder, builder.createObjectOffsetList(this.nBodyPerturbations));
  const oceanTidesModel = (this.oceanTidesModel !== null ? builder.createString(this.oceanTidesModel!) : 0);
  const solidTidesModel = (this.solidTidesModel !== null ? builder.createString(this.solidTidesModel!) : 0);
  const atmosphericTidesModel = (this.atmosphericTidesModel !== null ? builder.createString(this.atmosphericTidesModel!) : 0);
  const geopotentialModel = (this.geopotentialModel !== null ? builder.createString(this.geopotentialModel!) : 0);
  const solarRadPressure = (this.solarRadPressure !== null ? builder.createString(this.solarRadPressure!) : 0);
  const albedo = (this.albedo !== null ? builder.createString(this.albedo!) : 0);
  const thermal = (this.thermal !== null ? builder.createString(this.thermal!) : 0);
  const relativity = (this.relativity !== null ? builder.createString(this.relativity!) : 0);
  const atmosphericDrag = (this.atmosphericDrag !== null ? builder.createString(this.atmosphericDrag!) : 0);

  return Perturbations.createPerturbations(builder,
    comment,
    atmosphericModel,
    gravityModel,
    this.gravityDegree,
    this.gravityOrder,
    this.gm,
    nBodyPerturbations,
    oceanTidesModel,
    solidTidesModel,
    atmosphericTidesModel,
    geopotentialModel,
    solarRadPressure,
    albedo,
    thermal,
    relativity,
    atmosphericDrag,
    this.fixedGeomagKp,
    this.fixedF10P7,
    this.fixedF10P7Mean
  );
}
}
