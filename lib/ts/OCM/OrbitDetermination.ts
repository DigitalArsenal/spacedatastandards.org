// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class OrbitDetermination implements flatbuffers.IUnpackableObject<OrbitDeterminationT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OrbitDetermination {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOrbitDetermination(bb:flatbuffers.ByteBuffer, obj?:OrbitDetermination):OrbitDetermination {
  return (obj || new OrbitDetermination()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOrbitDetermination(bb:flatbuffers.ByteBuffer, obj?:OrbitDetermination):OrbitDetermination {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OrbitDetermination()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Unique identifier for the orbit determination.
 */
OD_ID():string|null
OD_ID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OD_ID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the previous orbit determination.
 */
OD_PREV_ID():string|null
OD_PREV_ID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OD_PREV_ID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Algorithm used for orbit determination.
 */
OD_ALGORITHM():string|null
OD_ALGORITHM(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OD_ALGORITHM(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Method used for orbit determination.
 */
OD_METHOD():string|null
OD_METHOD(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OD_METHOD(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Epoch of the orbit determination.
 */
OD_EPOCH():string|null
OD_EPOCH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OD_EPOCH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time tag of the orbit determination.
 */
OD_TIME_TAG():string|null
OD_TIME_TAG(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OD_TIME_TAG(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Process noise model used.
 */
OD_PROCESS_NOISE():string|null
OD_PROCESS_NOISE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OD_PROCESS_NOISE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Covariance reduction techniques used.
 */
OD_COV_REDUCTION():string|null
OD_COV_REDUCTION(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OD_COV_REDUCTION(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Noise models used.
 */
OD_NOISE_MODELS():string|null
OD_NOISE_MODELS(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OD_NOISE_MODELS(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Types of observations used (e.g., RANGE, DOPPLER).
 */
OD_OBSERVATIONS_TYPE(index: number):string
OD_OBSERVATIONS_TYPE(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
OD_OBSERVATIONS_TYPE(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

odObservationsTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Number of observations used.
 */
OD_OBSERVATIONS_USED():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Number of tracks used.
 */
OD_TRACKS_USED():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Data weighting scheme used.
 */
OD_DATA_WEIGHTING():string|null
OD_DATA_WEIGHTING(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OD_DATA_WEIGHTING(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Convergence criteria used.
 */
OD_CONVERGENCE_CRITERIA():string|null
OD_CONVERGENCE_CRITERIA(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OD_CONVERGENCE_CRITERIA(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Parameters estimated during orbit determination.
 */
OD_EST_PARAMETERS(index: number):string
OD_EST_PARAMETERS(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
OD_EST_PARAMETERS(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

odEstParametersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * A priori data used for orbit determination.
 */
OD_APRIORI_DATA():string|null
OD_APRIORI_DATA(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OD_APRIORI_DATA(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Residuals from the orbit determination.
 */
OD_RESIDUALS():string|null
OD_RESIDUALS(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OD_RESIDUALS(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startOrbitDetermination(builder:flatbuffers.Builder) {
  builder.startObject(17);
}

static addOdId(builder:flatbuffers.Builder, OD_IDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, OD_IDOffset, 0);
}

static addOdPrevId(builder:flatbuffers.Builder, OD_PREV_IDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, OD_PREV_IDOffset, 0);
}

static addOdAlgorithm(builder:flatbuffers.Builder, OD_ALGORITHMOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, OD_ALGORITHMOffset, 0);
}

static addOdMethod(builder:flatbuffers.Builder, OD_METHODOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, OD_METHODOffset, 0);
}

static addOdEpoch(builder:flatbuffers.Builder, OD_EPOCHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, OD_EPOCHOffset, 0);
}

static addOdTimeTag(builder:flatbuffers.Builder, OD_TIME_TAGOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, OD_TIME_TAGOffset, 0);
}

static addOdProcessNoise(builder:flatbuffers.Builder, OD_PROCESS_NOISEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, OD_PROCESS_NOISEOffset, 0);
}

static addOdCovReduction(builder:flatbuffers.Builder, OD_COV_REDUCTIONOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, OD_COV_REDUCTIONOffset, 0);
}

static addOdNoiseModels(builder:flatbuffers.Builder, OD_NOISE_MODELSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, OD_NOISE_MODELSOffset, 0);
}

static addOdObservationsType(builder:flatbuffers.Builder, OD_OBSERVATIONS_TYPEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, OD_OBSERVATIONS_TYPEOffset, 0);
}

static createOdObservationsTypeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOdObservationsTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOdObservationsUsed(builder:flatbuffers.Builder, OD_OBSERVATIONS_USED:number) {
  builder.addFieldInt32(10, OD_OBSERVATIONS_USED, 0);
}

static addOdTracksUsed(builder:flatbuffers.Builder, OD_TRACKS_USED:number) {
  builder.addFieldInt32(11, OD_TRACKS_USED, 0);
}

static addOdDataWeighting(builder:flatbuffers.Builder, OD_DATA_WEIGHTINGOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, OD_DATA_WEIGHTINGOffset, 0);
}

static addOdConvergenceCriteria(builder:flatbuffers.Builder, OD_CONVERGENCE_CRITERIAOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, OD_CONVERGENCE_CRITERIAOffset, 0);
}

static addOdEstParameters(builder:flatbuffers.Builder, OD_EST_PARAMETERSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, OD_EST_PARAMETERSOffset, 0);
}

static createOdEstParametersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOdEstParametersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOdAprioriData(builder:flatbuffers.Builder, OD_APRIORI_DATAOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, OD_APRIORI_DATAOffset, 0);
}

static addOdResiduals(builder:flatbuffers.Builder, OD_RESIDUALSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, OD_RESIDUALSOffset, 0);
}

static endOrbitDetermination(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOrbitDetermination(builder:flatbuffers.Builder, OD_IDOffset:flatbuffers.Offset, OD_PREV_IDOffset:flatbuffers.Offset, OD_ALGORITHMOffset:flatbuffers.Offset, OD_METHODOffset:flatbuffers.Offset, OD_EPOCHOffset:flatbuffers.Offset, OD_TIME_TAGOffset:flatbuffers.Offset, OD_PROCESS_NOISEOffset:flatbuffers.Offset, OD_COV_REDUCTIONOffset:flatbuffers.Offset, OD_NOISE_MODELSOffset:flatbuffers.Offset, OD_OBSERVATIONS_TYPEOffset:flatbuffers.Offset, OD_OBSERVATIONS_USED:number, OD_TRACKS_USED:number, OD_DATA_WEIGHTINGOffset:flatbuffers.Offset, OD_CONVERGENCE_CRITERIAOffset:flatbuffers.Offset, OD_EST_PARAMETERSOffset:flatbuffers.Offset, OD_APRIORI_DATAOffset:flatbuffers.Offset, OD_RESIDUALSOffset:flatbuffers.Offset):flatbuffers.Offset {
  OrbitDetermination.startOrbitDetermination(builder);
  OrbitDetermination.addOdId(builder, OD_IDOffset);
  OrbitDetermination.addOdPrevId(builder, OD_PREV_IDOffset);
  OrbitDetermination.addOdAlgorithm(builder, OD_ALGORITHMOffset);
  OrbitDetermination.addOdMethod(builder, OD_METHODOffset);
  OrbitDetermination.addOdEpoch(builder, OD_EPOCHOffset);
  OrbitDetermination.addOdTimeTag(builder, OD_TIME_TAGOffset);
  OrbitDetermination.addOdProcessNoise(builder, OD_PROCESS_NOISEOffset);
  OrbitDetermination.addOdCovReduction(builder, OD_COV_REDUCTIONOffset);
  OrbitDetermination.addOdNoiseModels(builder, OD_NOISE_MODELSOffset);
  OrbitDetermination.addOdObservationsType(builder, OD_OBSERVATIONS_TYPEOffset);
  OrbitDetermination.addOdObservationsUsed(builder, OD_OBSERVATIONS_USED);
  OrbitDetermination.addOdTracksUsed(builder, OD_TRACKS_USED);
  OrbitDetermination.addOdDataWeighting(builder, OD_DATA_WEIGHTINGOffset);
  OrbitDetermination.addOdConvergenceCriteria(builder, OD_CONVERGENCE_CRITERIAOffset);
  OrbitDetermination.addOdEstParameters(builder, OD_EST_PARAMETERSOffset);
  OrbitDetermination.addOdAprioriData(builder, OD_APRIORI_DATAOffset);
  OrbitDetermination.addOdResiduals(builder, OD_RESIDUALSOffset);
  return OrbitDetermination.endOrbitDetermination(builder);
}

unpack(): OrbitDeterminationT {
  return new OrbitDeterminationT(
    this.OD_ID(),
    this.OD_PREV_ID(),
    this.OD_ALGORITHM(),
    this.OD_METHOD(),
    this.OD_EPOCH(),
    this.OD_TIME_TAG(),
    this.OD_PROCESS_NOISE(),
    this.OD_COV_REDUCTION(),
    this.OD_NOISE_MODELS(),
    this.bb!.createScalarList<string>(this.OD_OBSERVATIONS_TYPE.bind(this), this.odObservationsTypeLength()),
    this.OD_OBSERVATIONS_USED(),
    this.OD_TRACKS_USED(),
    this.OD_DATA_WEIGHTING(),
    this.OD_CONVERGENCE_CRITERIA(),
    this.bb!.createScalarList<string>(this.OD_EST_PARAMETERS.bind(this), this.odEstParametersLength()),
    this.OD_APRIORI_DATA(),
    this.OD_RESIDUALS()
  );
}


unpackTo(_o: OrbitDeterminationT): void {
  _o.OD_ID = this.OD_ID();
  _o.OD_PREV_ID = this.OD_PREV_ID();
  _o.OD_ALGORITHM = this.OD_ALGORITHM();
  _o.OD_METHOD = this.OD_METHOD();
  _o.OD_EPOCH = this.OD_EPOCH();
  _o.OD_TIME_TAG = this.OD_TIME_TAG();
  _o.OD_PROCESS_NOISE = this.OD_PROCESS_NOISE();
  _o.OD_COV_REDUCTION = this.OD_COV_REDUCTION();
  _o.OD_NOISE_MODELS = this.OD_NOISE_MODELS();
  _o.OD_OBSERVATIONS_TYPE = this.bb!.createScalarList<string>(this.OD_OBSERVATIONS_TYPE.bind(this), this.odObservationsTypeLength());
  _o.OD_OBSERVATIONS_USED = this.OD_OBSERVATIONS_USED();
  _o.OD_TRACKS_USED = this.OD_TRACKS_USED();
  _o.OD_DATA_WEIGHTING = this.OD_DATA_WEIGHTING();
  _o.OD_CONVERGENCE_CRITERIA = this.OD_CONVERGENCE_CRITERIA();
  _o.OD_EST_PARAMETERS = this.bb!.createScalarList<string>(this.OD_EST_PARAMETERS.bind(this), this.odEstParametersLength());
  _o.OD_APRIORI_DATA = this.OD_APRIORI_DATA();
  _o.OD_RESIDUALS = this.OD_RESIDUALS();
}
}

export class OrbitDeterminationT implements flatbuffers.IGeneratedObject {
constructor(
  public OD_ID: string|Uint8Array|null = null,
  public OD_PREV_ID: string|Uint8Array|null = null,
  public OD_ALGORITHM: string|Uint8Array|null = null,
  public OD_METHOD: string|Uint8Array|null = null,
  public OD_EPOCH: string|Uint8Array|null = null,
  public OD_TIME_TAG: string|Uint8Array|null = null,
  public OD_PROCESS_NOISE: string|Uint8Array|null = null,
  public OD_COV_REDUCTION: string|Uint8Array|null = null,
  public OD_NOISE_MODELS: string|Uint8Array|null = null,
  public OD_OBSERVATIONS_TYPE: (string)[] = [],
  public OD_OBSERVATIONS_USED: number = 0,
  public OD_TRACKS_USED: number = 0,
  public OD_DATA_WEIGHTING: string|Uint8Array|null = null,
  public OD_CONVERGENCE_CRITERIA: string|Uint8Array|null = null,
  public OD_EST_PARAMETERS: (string)[] = [],
  public OD_APRIORI_DATA: string|Uint8Array|null = null,
  public OD_RESIDUALS: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const OD_ID = (this.OD_ID !== null ? builder.createString(this.OD_ID!) : 0);
  const OD_PREV_ID = (this.OD_PREV_ID !== null ? builder.createString(this.OD_PREV_ID!) : 0);
  const OD_ALGORITHM = (this.OD_ALGORITHM !== null ? builder.createString(this.OD_ALGORITHM!) : 0);
  const OD_METHOD = (this.OD_METHOD !== null ? builder.createString(this.OD_METHOD!) : 0);
  const OD_EPOCH = (this.OD_EPOCH !== null ? builder.createString(this.OD_EPOCH!) : 0);
  const OD_TIME_TAG = (this.OD_TIME_TAG !== null ? builder.createString(this.OD_TIME_TAG!) : 0);
  const OD_PROCESS_NOISE = (this.OD_PROCESS_NOISE !== null ? builder.createString(this.OD_PROCESS_NOISE!) : 0);
  const OD_COV_REDUCTION = (this.OD_COV_REDUCTION !== null ? builder.createString(this.OD_COV_REDUCTION!) : 0);
  const OD_NOISE_MODELS = (this.OD_NOISE_MODELS !== null ? builder.createString(this.OD_NOISE_MODELS!) : 0);
  const OD_OBSERVATIONS_TYPE = OrbitDetermination.createOdObservationsTypeVector(builder, builder.createObjectOffsetList(this.OD_OBSERVATIONS_TYPE));
  const OD_DATA_WEIGHTING = (this.OD_DATA_WEIGHTING !== null ? builder.createString(this.OD_DATA_WEIGHTING!) : 0);
  const OD_CONVERGENCE_CRITERIA = (this.OD_CONVERGENCE_CRITERIA !== null ? builder.createString(this.OD_CONVERGENCE_CRITERIA!) : 0);
  const OD_EST_PARAMETERS = OrbitDetermination.createOdEstParametersVector(builder, builder.createObjectOffsetList(this.OD_EST_PARAMETERS));
  const OD_APRIORI_DATA = (this.OD_APRIORI_DATA !== null ? builder.createString(this.OD_APRIORI_DATA!) : 0);
  const OD_RESIDUALS = (this.OD_RESIDUALS !== null ? builder.createString(this.OD_RESIDUALS!) : 0);

  return OrbitDetermination.createOrbitDetermination(builder,
    OD_ID,
    OD_PREV_ID,
    OD_ALGORITHM,
    OD_METHOD,
    OD_EPOCH,
    OD_TIME_TAG,
    OD_PROCESS_NOISE,
    OD_COV_REDUCTION,
    OD_NOISE_MODELS,
    OD_OBSERVATIONS_TYPE,
    this.OD_OBSERVATIONS_USED,
    this.OD_TRACKS_USED,
    OD_DATA_WEIGHTING,
    OD_CONVERGENCE_CRITERIA,
    OD_EST_PARAMETERS,
    OD_APRIORI_DATA,
    OD_RESIDUALS
  );
}
}
