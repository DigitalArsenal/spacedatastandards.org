// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Maneuver implements flatbuffers.IUnpackableObject<ManeuverT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Maneuver {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsManeuver(bb:flatbuffers.ByteBuffer, obj?:Maneuver):Maneuver {
  return (obj || new Maneuver()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsManeuver(bb:flatbuffers.ByteBuffer, obj?:Maneuver):Maneuver {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Maneuver()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Unique identifier for the maneuver.
 */
manId():string|null
manId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Basis of the maneuver plan (e.g., planned, predicted, estimated).
 */
manBasis():string|null
manBasis(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manBasis(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the maneuver device.
 */
manDeviceId():string|null
manDeviceId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manDeviceId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the previous maneuver.
 */
manPrevId():string|null
manPrevId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manPrevId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Purpose of the maneuver.
 */
manPurpose():string|null
manPurpose(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manPurpose(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Reference frame for the maneuver data.
 */
manRefFrame():string|null
manRefFrame(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manRefFrame(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Epoch of the maneuver reference frame.
 */
manFrameEpoch():string|null
manFrameEpoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manFrameEpoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of maneuver (e.g., IMPULSIVE, FINITE).
 */
manType():string|null
manType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Start epoch of the maneuver.
 */
manEpochStart():string|null
manEpochStart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
manEpochStart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Duration of the maneuver.
 */
manDuration():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Units for the maneuver data values.
 */
manUnits(index: number):string
manUnits(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
manUnits(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

manUnitsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Data associated with the maneuver.
 */
data(index: number):string
data(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
data(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Comments related to the maneuver.
 */
manComment(index: number):string
manComment(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
manComment(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

manCommentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startManeuver(builder:flatbuffers.Builder) {
  builder.startObject(13);
}

static addManId(builder:flatbuffers.Builder, manIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, manIdOffset, 0);
}

static addManBasis(builder:flatbuffers.Builder, manBasisOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, manBasisOffset, 0);
}

static addManDeviceId(builder:flatbuffers.Builder, manDeviceIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, manDeviceIdOffset, 0);
}

static addManPrevId(builder:flatbuffers.Builder, manPrevIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, manPrevIdOffset, 0);
}

static addManPurpose(builder:flatbuffers.Builder, manPurposeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, manPurposeOffset, 0);
}

static addManRefFrame(builder:flatbuffers.Builder, manRefFrameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, manRefFrameOffset, 0);
}

static addManFrameEpoch(builder:flatbuffers.Builder, manFrameEpochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, manFrameEpochOffset, 0);
}

static addManType(builder:flatbuffers.Builder, manTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, manTypeOffset, 0);
}

static addManEpochStart(builder:flatbuffers.Builder, manEpochStartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, manEpochStartOffset, 0);
}

static addManDuration(builder:flatbuffers.Builder, manDuration:number) {
  builder.addFieldFloat64(9, manDuration, 0.0);
}

static addManUnits(builder:flatbuffers.Builder, manUnitsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, manUnitsOffset, 0);
}

static createManUnitsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startManUnitsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, dataOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addManComment(builder:flatbuffers.Builder, manCommentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, manCommentOffset, 0);
}

static createManCommentVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startManCommentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endManeuver(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createManeuver(builder:flatbuffers.Builder, manIdOffset:flatbuffers.Offset, manBasisOffset:flatbuffers.Offset, manDeviceIdOffset:flatbuffers.Offset, manPrevIdOffset:flatbuffers.Offset, manPurposeOffset:flatbuffers.Offset, manRefFrameOffset:flatbuffers.Offset, manFrameEpochOffset:flatbuffers.Offset, manTypeOffset:flatbuffers.Offset, manEpochStartOffset:flatbuffers.Offset, manDuration:number, manUnitsOffset:flatbuffers.Offset, dataOffset:flatbuffers.Offset, manCommentOffset:flatbuffers.Offset):flatbuffers.Offset {
  Maneuver.startManeuver(builder);
  Maneuver.addManId(builder, manIdOffset);
  Maneuver.addManBasis(builder, manBasisOffset);
  Maneuver.addManDeviceId(builder, manDeviceIdOffset);
  Maneuver.addManPrevId(builder, manPrevIdOffset);
  Maneuver.addManPurpose(builder, manPurposeOffset);
  Maneuver.addManRefFrame(builder, manRefFrameOffset);
  Maneuver.addManFrameEpoch(builder, manFrameEpochOffset);
  Maneuver.addManType(builder, manTypeOffset);
  Maneuver.addManEpochStart(builder, manEpochStartOffset);
  Maneuver.addManDuration(builder, manDuration);
  Maneuver.addManUnits(builder, manUnitsOffset);
  Maneuver.addData(builder, dataOffset);
  Maneuver.addManComment(builder, manCommentOffset);
  return Maneuver.endManeuver(builder);
}

unpack(): ManeuverT {
  return new ManeuverT(
    this.manId(),
    this.manBasis(),
    this.manDeviceId(),
    this.manPrevId(),
    this.manPurpose(),
    this.manRefFrame(),
    this.manFrameEpoch(),
    this.manType(),
    this.manEpochStart(),
    this.manDuration(),
    this.bb!.createScalarList<string>(this.manUnits.bind(this), this.manUnitsLength()),
    this.bb!.createScalarList<string>(this.data.bind(this), this.dataLength()),
    this.bb!.createScalarList<string>(this.manComment.bind(this), this.manCommentLength())
  );
}


unpackTo(_o: ManeuverT): void {
  _o.manId = this.manId();
  _o.manBasis = this.manBasis();
  _o.manDeviceId = this.manDeviceId();
  _o.manPrevId = this.manPrevId();
  _o.manPurpose = this.manPurpose();
  _o.manRefFrame = this.manRefFrame();
  _o.manFrameEpoch = this.manFrameEpoch();
  _o.manType = this.manType();
  _o.manEpochStart = this.manEpochStart();
  _o.manDuration = this.manDuration();
  _o.manUnits = this.bb!.createScalarList<string>(this.manUnits.bind(this), this.manUnitsLength());
  _o.data = this.bb!.createScalarList<string>(this.data.bind(this), this.dataLength());
  _o.manComment = this.bb!.createScalarList<string>(this.manComment.bind(this), this.manCommentLength());
}
}

export class ManeuverT implements flatbuffers.IGeneratedObject {
constructor(
  public manId: string|Uint8Array|null = null,
  public manBasis: string|Uint8Array|null = null,
  public manDeviceId: string|Uint8Array|null = null,
  public manPrevId: string|Uint8Array|null = null,
  public manPurpose: string|Uint8Array|null = null,
  public manRefFrame: string|Uint8Array|null = null,
  public manFrameEpoch: string|Uint8Array|null = null,
  public manType: string|Uint8Array|null = null,
  public manEpochStart: string|Uint8Array|null = null,
  public manDuration: number = 0.0,
  public manUnits: (string)[] = [],
  public data: (string)[] = [],
  public manComment: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const manId = (this.manId !== null ? builder.createString(this.manId!) : 0);
  const manBasis = (this.manBasis !== null ? builder.createString(this.manBasis!) : 0);
  const manDeviceId = (this.manDeviceId !== null ? builder.createString(this.manDeviceId!) : 0);
  const manPrevId = (this.manPrevId !== null ? builder.createString(this.manPrevId!) : 0);
  const manPurpose = (this.manPurpose !== null ? builder.createString(this.manPurpose!) : 0);
  const manRefFrame = (this.manRefFrame !== null ? builder.createString(this.manRefFrame!) : 0);
  const manFrameEpoch = (this.manFrameEpoch !== null ? builder.createString(this.manFrameEpoch!) : 0);
  const manType = (this.manType !== null ? builder.createString(this.manType!) : 0);
  const manEpochStart = (this.manEpochStart !== null ? builder.createString(this.manEpochStart!) : 0);
  const manUnits = Maneuver.createManUnitsVector(builder, builder.createObjectOffsetList(this.manUnits));
  const data = Maneuver.createDataVector(builder, builder.createObjectOffsetList(this.data));
  const manComment = Maneuver.createManCommentVector(builder, builder.createObjectOffsetList(this.manComment));

  return Maneuver.createManeuver(builder,
    manId,
    manBasis,
    manDeviceId,
    manPrevId,
    manPurpose,
    manRefFrame,
    manFrameEpoch,
    manType,
    manEpochStart,
    this.manDuration,
    manUnits,
    data,
    manComment
  );
}
}
