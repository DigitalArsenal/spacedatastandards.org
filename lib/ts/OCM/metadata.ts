// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Metadata implements flatbuffers.IUnpackableObject<MetadataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Metadata {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMetadata(bb:flatbuffers.ByteBuffer, obj?:Metadata):Metadata {
  return (obj || new Metadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMetadata(bb:flatbuffers.ByteBuffer, obj?:Metadata):Metadata {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Metadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Comments in the Metadata section.
 */
comment(index: number):string
comment(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
comment(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

commentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Free-text field containing the name of the object.
 */
objectName():string|null
objectName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objectName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * International designator for the object as assigned by COSPAR.
 */
internationalDesignator():string|null
internationalDesignator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
internationalDesignator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite catalog source from which 'OBJECT_DESIGNATOR' was obtained.
 */
catalogName():string|null
catalogName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
catalogName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique satellite identification designator from the catalog.
 */
objectDesignator():string|null
objectDesignator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objectDesignator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Alternate names of this space object.
 */
alternateNames(index: number):string
alternateNames(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
alternateNames(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

alternateNamesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Originator or programmatic Point-of-Contact (PoC) for OCM.
 */
originatorPoc():string|null
originatorPoc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originatorPoc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Contact position of the originator PoC.
 */
originatorPosition():string|null
originatorPosition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originatorPosition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originator PoC phone number.
 */
originatorPhone():string|null
originatorPhone(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originatorPhone(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originator PoC email address.
 */
originatorEmail():string|null
originatorEmail(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originatorEmail(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originator's physical address information.
 */
originatorAddress():string|null
originatorAddress(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originatorAddress(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Creating agency or operator for technical contact.
 */
techOrg():string|null
techOrg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
techOrg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Technical Point-of-Contact (PoC) for OCM.
 */
techPoc():string|null
techPoc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
techPoc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Contact position of the technical PoC.
 */
techPosition():string|null
techPosition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
techPosition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Technical PoC phone number.
 */
techPhone():string|null
techPhone(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
techPhone(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Technical PoC email address.
 */
techEmail():string|null
techEmail(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
techEmail(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Technical PoC physical address information.
 */
techAddress():string|null
techAddress(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
techAddress(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID that uniquely identifies the previous message from this originator.
 */
previousMessageId():string|null
previousMessageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
previousMessageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID that uniquely identifies the next message from this originator.
 */
nextMessageId():string|null
nextMessageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nextMessageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of Attitude Data Messages linked to this OCM.
 */
admMsgLink():string|null
admMsgLink(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
admMsgLink(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of Conjunction Data Messages linked to this OCM.
 */
cdmMsgLink():string|null
cdmMsgLink(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cdmMsgLink(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of Pointing Request Messages linked to this OCM.
 */
prmMsgLink():string|null
prmMsgLink(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
prmMsgLink(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of Reentry Data Messages linked to this OCM.
 */
rdmMsgLink():string|null
rdmMsgLink(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rdmMsgLink(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * List of Tracking Data Messages upon which this orbit determination is based.
 */
tdmMsgLink(index: number):string
tdmMsgLink(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tdmMsgLink(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tdmMsgLinkLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Operator of the space object.
 */
operator():string|null
operator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
operator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Owner of the space object.
 */
owner():string|null
owner(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
owner(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Country where the space object owner is based.
 */
country():string|null
country(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
country(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the constellation to which this space object belongs.
 */
constellation():string|null
constellation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
constellation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specification of the type of object (e.g., PAYLOAD, ROCKET BODY, DEBRIS).
 */
objectType():string|null
objectType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objectType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time system for all absolute time stamps in this OCM, including EPOCH_TZERO.
 */
timeSystem():string|null
timeSystem(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
timeSystem(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Default epoch to which all relative times are referenced in data blocks.
 */
epochTzero():string|null
epochTzero(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
epochTzero(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specification of the operational status of the space object.
 */
opsStatus():string|null
opsStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
opsStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specification of the type of orbit (e.g., GEO, LEO).
 */
orbitCategory():string|null
orbitCategory(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
orbitCategory(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * List of elements of information data blocks included in this message.
 */
ocmDataElements(index: number):string
ocmDataElements(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ocmDataElements(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

ocmDataElementsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Number of spacecraft clock counts at EPOCH_TZERO (used if TIME_SYSTEM is SCLK).
 */
sclkOffsetAtEpoch():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Number of clock seconds occurring during one SI second (used if TIME_SYSTEM is SCLK).
 */
sclkSecPerSiSec():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Creation epoch of the previous message from this originator.
 */
previousMessageEpoch():string|null
previousMessageEpoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
previousMessageEpoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Anticipated (or actual) epoch of the next message from this originator.
 */
nextMessageEpoch():string|null
nextMessageEpoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nextMessageEpoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of the earliest data contained in the OCM.
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of the latest data contained in the OCM.
 */
stopTime():string|null
stopTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stopTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Span of time that the OCM covers, measured in days.
 */
timeSpan():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Difference (TAI - UTC) in seconds at EPOCH_TZERO.
 */
taimutcAtTzero():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Epoch of next leap second.
 */
nextLeapEpoch():string|null
nextLeapEpoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nextLeapEpoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Difference (TAI - UTC) in seconds at NEXT_LEAP_EPOCH.
 */
nextLeapTaimutc():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Difference (UT1 - UTC) in seconds at EPOCH_TZERO.
 */
ut1MutcAtTzero():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Source and version of Earth Orientation Parameters used.
 */
eopSource():string|null
eopSource(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eopSource(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Method used to select or interpolate sequential EOP data.
 */
interpMethodEop():string|null
interpMethodEop(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
interpMethodEop(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source and version of celestial body ephemeris data used.
 */
celestialSource():string|null
celestialSource(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
celestialSource(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startMetadata(builder:flatbuffers.Builder) {
  builder.startObject(48);
}

static addComment(builder:flatbuffers.Builder, commentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, commentOffset, 0);
}

static createCommentVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCommentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addObjectName(builder:flatbuffers.Builder, objectNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, objectNameOffset, 0);
}

static addInternationalDesignator(builder:flatbuffers.Builder, internationalDesignatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, internationalDesignatorOffset, 0);
}

static addCatalogName(builder:flatbuffers.Builder, catalogNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, catalogNameOffset, 0);
}

static addObjectDesignator(builder:flatbuffers.Builder, objectDesignatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, objectDesignatorOffset, 0);
}

static addAlternateNames(builder:flatbuffers.Builder, alternateNamesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, alternateNamesOffset, 0);
}

static createAlternateNamesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAlternateNamesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOriginatorPoc(builder:flatbuffers.Builder, originatorPocOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, originatorPocOffset, 0);
}

static addOriginatorPosition(builder:flatbuffers.Builder, originatorPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, originatorPositionOffset, 0);
}

static addOriginatorPhone(builder:flatbuffers.Builder, originatorPhoneOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, originatorPhoneOffset, 0);
}

static addOriginatorEmail(builder:flatbuffers.Builder, originatorEmailOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, originatorEmailOffset, 0);
}

static addOriginatorAddress(builder:flatbuffers.Builder, originatorAddressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, originatorAddressOffset, 0);
}

static addTechOrg(builder:flatbuffers.Builder, techOrgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, techOrgOffset, 0);
}

static addTechPoc(builder:flatbuffers.Builder, techPocOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, techPocOffset, 0);
}

static addTechPosition(builder:flatbuffers.Builder, techPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, techPositionOffset, 0);
}

static addTechPhone(builder:flatbuffers.Builder, techPhoneOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, techPhoneOffset, 0);
}

static addTechEmail(builder:flatbuffers.Builder, techEmailOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, techEmailOffset, 0);
}

static addTechAddress(builder:flatbuffers.Builder, techAddressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, techAddressOffset, 0);
}

static addPreviousMessageId(builder:flatbuffers.Builder, previousMessageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, previousMessageIdOffset, 0);
}

static addNextMessageId(builder:flatbuffers.Builder, nextMessageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, nextMessageIdOffset, 0);
}

static addAdmMsgLink(builder:flatbuffers.Builder, admMsgLinkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, admMsgLinkOffset, 0);
}

static addCdmMsgLink(builder:flatbuffers.Builder, cdmMsgLinkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, cdmMsgLinkOffset, 0);
}

static addPrmMsgLink(builder:flatbuffers.Builder, prmMsgLinkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, prmMsgLinkOffset, 0);
}

static addRdmMsgLink(builder:flatbuffers.Builder, rdmMsgLinkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, rdmMsgLinkOffset, 0);
}

static addTdmMsgLink(builder:flatbuffers.Builder, tdmMsgLinkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, tdmMsgLinkOffset, 0);
}

static createTdmMsgLinkVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTdmMsgLinkVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOperator(builder:flatbuffers.Builder, operatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, operatorOffset, 0);
}

static addOwner(builder:flatbuffers.Builder, ownerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, ownerOffset, 0);
}

static addCountry(builder:flatbuffers.Builder, countryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, countryOffset, 0);
}

static addConstellation(builder:flatbuffers.Builder, constellationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, constellationOffset, 0);
}

static addObjectType(builder:flatbuffers.Builder, objectTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, objectTypeOffset, 0);
}

static addTimeSystem(builder:flatbuffers.Builder, timeSystemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, timeSystemOffset, 0);
}

static addEpochTzero(builder:flatbuffers.Builder, epochTzeroOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, epochTzeroOffset, 0);
}

static addOpsStatus(builder:flatbuffers.Builder, opsStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, opsStatusOffset, 0);
}

static addOrbitCategory(builder:flatbuffers.Builder, orbitCategoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, orbitCategoryOffset, 0);
}

static addOcmDataElements(builder:flatbuffers.Builder, ocmDataElementsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, ocmDataElementsOffset, 0);
}

static createOcmDataElementsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOcmDataElementsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSclkOffsetAtEpoch(builder:flatbuffers.Builder, sclkOffsetAtEpoch:number) {
  builder.addFieldFloat64(34, sclkOffsetAtEpoch, 0.0);
}

static addSclkSecPerSiSec(builder:flatbuffers.Builder, sclkSecPerSiSec:number) {
  builder.addFieldFloat64(35, sclkSecPerSiSec, 0.0);
}

static addPreviousMessageEpoch(builder:flatbuffers.Builder, previousMessageEpochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, previousMessageEpochOffset, 0);
}

static addNextMessageEpoch(builder:flatbuffers.Builder, nextMessageEpochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, nextMessageEpochOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, startTimeOffset, 0);
}

static addStopTime(builder:flatbuffers.Builder, stopTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, stopTimeOffset, 0);
}

static addTimeSpan(builder:flatbuffers.Builder, timeSpan:number) {
  builder.addFieldFloat64(40, timeSpan, 0.0);
}

static addTaimutcAtTzero(builder:flatbuffers.Builder, taimutcAtTzero:number) {
  builder.addFieldFloat64(41, taimutcAtTzero, 0.0);
}

static addNextLeapEpoch(builder:flatbuffers.Builder, nextLeapEpochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, nextLeapEpochOffset, 0);
}

static addNextLeapTaimutc(builder:flatbuffers.Builder, nextLeapTaimutc:number) {
  builder.addFieldFloat64(43, nextLeapTaimutc, 0.0);
}

static addUt1MutcAtTzero(builder:flatbuffers.Builder, ut1MutcAtTzero:number) {
  builder.addFieldFloat64(44, ut1MutcAtTzero, 0.0);
}

static addEopSource(builder:flatbuffers.Builder, eopSourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, eopSourceOffset, 0);
}

static addInterpMethodEop(builder:flatbuffers.Builder, interpMethodEopOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, interpMethodEopOffset, 0);
}

static addCelestialSource(builder:flatbuffers.Builder, celestialSourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, celestialSourceOffset, 0);
}

static endMetadata(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMetadata(builder:flatbuffers.Builder, commentOffset:flatbuffers.Offset, objectNameOffset:flatbuffers.Offset, internationalDesignatorOffset:flatbuffers.Offset, catalogNameOffset:flatbuffers.Offset, objectDesignatorOffset:flatbuffers.Offset, alternateNamesOffset:flatbuffers.Offset, originatorPocOffset:flatbuffers.Offset, originatorPositionOffset:flatbuffers.Offset, originatorPhoneOffset:flatbuffers.Offset, originatorEmailOffset:flatbuffers.Offset, originatorAddressOffset:flatbuffers.Offset, techOrgOffset:flatbuffers.Offset, techPocOffset:flatbuffers.Offset, techPositionOffset:flatbuffers.Offset, techPhoneOffset:flatbuffers.Offset, techEmailOffset:flatbuffers.Offset, techAddressOffset:flatbuffers.Offset, previousMessageIdOffset:flatbuffers.Offset, nextMessageIdOffset:flatbuffers.Offset, admMsgLinkOffset:flatbuffers.Offset, cdmMsgLinkOffset:flatbuffers.Offset, prmMsgLinkOffset:flatbuffers.Offset, rdmMsgLinkOffset:flatbuffers.Offset, tdmMsgLinkOffset:flatbuffers.Offset, operatorOffset:flatbuffers.Offset, ownerOffset:flatbuffers.Offset, countryOffset:flatbuffers.Offset, constellationOffset:flatbuffers.Offset, objectTypeOffset:flatbuffers.Offset, timeSystemOffset:flatbuffers.Offset, epochTzeroOffset:flatbuffers.Offset, opsStatusOffset:flatbuffers.Offset, orbitCategoryOffset:flatbuffers.Offset, ocmDataElementsOffset:flatbuffers.Offset, sclkOffsetAtEpoch:number, sclkSecPerSiSec:number, previousMessageEpochOffset:flatbuffers.Offset, nextMessageEpochOffset:flatbuffers.Offset, startTimeOffset:flatbuffers.Offset, stopTimeOffset:flatbuffers.Offset, timeSpan:number, taimutcAtTzero:number, nextLeapEpochOffset:flatbuffers.Offset, nextLeapTaimutc:number, ut1MutcAtTzero:number, eopSourceOffset:flatbuffers.Offset, interpMethodEopOffset:flatbuffers.Offset, celestialSourceOffset:flatbuffers.Offset):flatbuffers.Offset {
  Metadata.startMetadata(builder);
  Metadata.addComment(builder, commentOffset);
  Metadata.addObjectName(builder, objectNameOffset);
  Metadata.addInternationalDesignator(builder, internationalDesignatorOffset);
  Metadata.addCatalogName(builder, catalogNameOffset);
  Metadata.addObjectDesignator(builder, objectDesignatorOffset);
  Metadata.addAlternateNames(builder, alternateNamesOffset);
  Metadata.addOriginatorPoc(builder, originatorPocOffset);
  Metadata.addOriginatorPosition(builder, originatorPositionOffset);
  Metadata.addOriginatorPhone(builder, originatorPhoneOffset);
  Metadata.addOriginatorEmail(builder, originatorEmailOffset);
  Metadata.addOriginatorAddress(builder, originatorAddressOffset);
  Metadata.addTechOrg(builder, techOrgOffset);
  Metadata.addTechPoc(builder, techPocOffset);
  Metadata.addTechPosition(builder, techPositionOffset);
  Metadata.addTechPhone(builder, techPhoneOffset);
  Metadata.addTechEmail(builder, techEmailOffset);
  Metadata.addTechAddress(builder, techAddressOffset);
  Metadata.addPreviousMessageId(builder, previousMessageIdOffset);
  Metadata.addNextMessageId(builder, nextMessageIdOffset);
  Metadata.addAdmMsgLink(builder, admMsgLinkOffset);
  Metadata.addCdmMsgLink(builder, cdmMsgLinkOffset);
  Metadata.addPrmMsgLink(builder, prmMsgLinkOffset);
  Metadata.addRdmMsgLink(builder, rdmMsgLinkOffset);
  Metadata.addTdmMsgLink(builder, tdmMsgLinkOffset);
  Metadata.addOperator(builder, operatorOffset);
  Metadata.addOwner(builder, ownerOffset);
  Metadata.addCountry(builder, countryOffset);
  Metadata.addConstellation(builder, constellationOffset);
  Metadata.addObjectType(builder, objectTypeOffset);
  Metadata.addTimeSystem(builder, timeSystemOffset);
  Metadata.addEpochTzero(builder, epochTzeroOffset);
  Metadata.addOpsStatus(builder, opsStatusOffset);
  Metadata.addOrbitCategory(builder, orbitCategoryOffset);
  Metadata.addOcmDataElements(builder, ocmDataElementsOffset);
  Metadata.addSclkOffsetAtEpoch(builder, sclkOffsetAtEpoch);
  Metadata.addSclkSecPerSiSec(builder, sclkSecPerSiSec);
  Metadata.addPreviousMessageEpoch(builder, previousMessageEpochOffset);
  Metadata.addNextMessageEpoch(builder, nextMessageEpochOffset);
  Metadata.addStartTime(builder, startTimeOffset);
  Metadata.addStopTime(builder, stopTimeOffset);
  Metadata.addTimeSpan(builder, timeSpan);
  Metadata.addTaimutcAtTzero(builder, taimutcAtTzero);
  Metadata.addNextLeapEpoch(builder, nextLeapEpochOffset);
  Metadata.addNextLeapTaimutc(builder, nextLeapTaimutc);
  Metadata.addUt1MutcAtTzero(builder, ut1MutcAtTzero);
  Metadata.addEopSource(builder, eopSourceOffset);
  Metadata.addInterpMethodEop(builder, interpMethodEopOffset);
  Metadata.addCelestialSource(builder, celestialSourceOffset);
  return Metadata.endMetadata(builder);
}

unpack(): MetadataT {
  return new MetadataT(
    this.bb!.createScalarList<string>(this.comment.bind(this), this.commentLength()),
    this.objectName(),
    this.internationalDesignator(),
    this.catalogName(),
    this.objectDesignator(),
    this.bb!.createScalarList<string>(this.alternateNames.bind(this), this.alternateNamesLength()),
    this.originatorPoc(),
    this.originatorPosition(),
    this.originatorPhone(),
    this.originatorEmail(),
    this.originatorAddress(),
    this.techOrg(),
    this.techPoc(),
    this.techPosition(),
    this.techPhone(),
    this.techEmail(),
    this.techAddress(),
    this.previousMessageId(),
    this.nextMessageId(),
    this.admMsgLink(),
    this.cdmMsgLink(),
    this.prmMsgLink(),
    this.rdmMsgLink(),
    this.bb!.createScalarList<string>(this.tdmMsgLink.bind(this), this.tdmMsgLinkLength()),
    this.operator(),
    this.owner(),
    this.country(),
    this.constellation(),
    this.objectType(),
    this.timeSystem(),
    this.epochTzero(),
    this.opsStatus(),
    this.orbitCategory(),
    this.bb!.createScalarList<string>(this.ocmDataElements.bind(this), this.ocmDataElementsLength()),
    this.sclkOffsetAtEpoch(),
    this.sclkSecPerSiSec(),
    this.previousMessageEpoch(),
    this.nextMessageEpoch(),
    this.startTime(),
    this.stopTime(),
    this.timeSpan(),
    this.taimutcAtTzero(),
    this.nextLeapEpoch(),
    this.nextLeapTaimutc(),
    this.ut1MutcAtTzero(),
    this.eopSource(),
    this.interpMethodEop(),
    this.celestialSource()
  );
}


unpackTo(_o: MetadataT): void {
  _o.comment = this.bb!.createScalarList<string>(this.comment.bind(this), this.commentLength());
  _o.objectName = this.objectName();
  _o.internationalDesignator = this.internationalDesignator();
  _o.catalogName = this.catalogName();
  _o.objectDesignator = this.objectDesignator();
  _o.alternateNames = this.bb!.createScalarList<string>(this.alternateNames.bind(this), this.alternateNamesLength());
  _o.originatorPoc = this.originatorPoc();
  _o.originatorPosition = this.originatorPosition();
  _o.originatorPhone = this.originatorPhone();
  _o.originatorEmail = this.originatorEmail();
  _o.originatorAddress = this.originatorAddress();
  _o.techOrg = this.techOrg();
  _o.techPoc = this.techPoc();
  _o.techPosition = this.techPosition();
  _o.techPhone = this.techPhone();
  _o.techEmail = this.techEmail();
  _o.techAddress = this.techAddress();
  _o.previousMessageId = this.previousMessageId();
  _o.nextMessageId = this.nextMessageId();
  _o.admMsgLink = this.admMsgLink();
  _o.cdmMsgLink = this.cdmMsgLink();
  _o.prmMsgLink = this.prmMsgLink();
  _o.rdmMsgLink = this.rdmMsgLink();
  _o.tdmMsgLink = this.bb!.createScalarList<string>(this.tdmMsgLink.bind(this), this.tdmMsgLinkLength());
  _o.operator = this.operator();
  _o.owner = this.owner();
  _o.country = this.country();
  _o.constellation = this.constellation();
  _o.objectType = this.objectType();
  _o.timeSystem = this.timeSystem();
  _o.epochTzero = this.epochTzero();
  _o.opsStatus = this.opsStatus();
  _o.orbitCategory = this.orbitCategory();
  _o.ocmDataElements = this.bb!.createScalarList<string>(this.ocmDataElements.bind(this), this.ocmDataElementsLength());
  _o.sclkOffsetAtEpoch = this.sclkOffsetAtEpoch();
  _o.sclkSecPerSiSec = this.sclkSecPerSiSec();
  _o.previousMessageEpoch = this.previousMessageEpoch();
  _o.nextMessageEpoch = this.nextMessageEpoch();
  _o.startTime = this.startTime();
  _o.stopTime = this.stopTime();
  _o.timeSpan = this.timeSpan();
  _o.taimutcAtTzero = this.taimutcAtTzero();
  _o.nextLeapEpoch = this.nextLeapEpoch();
  _o.nextLeapTaimutc = this.nextLeapTaimutc();
  _o.ut1MutcAtTzero = this.ut1MutcAtTzero();
  _o.eopSource = this.eopSource();
  _o.interpMethodEop = this.interpMethodEop();
  _o.celestialSource = this.celestialSource();
}
}

export class MetadataT implements flatbuffers.IGeneratedObject {
constructor(
  public comment: (string)[] = [],
  public objectName: string|Uint8Array|null = null,
  public internationalDesignator: string|Uint8Array|null = null,
  public catalogName: string|Uint8Array|null = null,
  public objectDesignator: string|Uint8Array|null = null,
  public alternateNames: (string)[] = [],
  public originatorPoc: string|Uint8Array|null = null,
  public originatorPosition: string|Uint8Array|null = null,
  public originatorPhone: string|Uint8Array|null = null,
  public originatorEmail: string|Uint8Array|null = null,
  public originatorAddress: string|Uint8Array|null = null,
  public techOrg: string|Uint8Array|null = null,
  public techPoc: string|Uint8Array|null = null,
  public techPosition: string|Uint8Array|null = null,
  public techPhone: string|Uint8Array|null = null,
  public techEmail: string|Uint8Array|null = null,
  public techAddress: string|Uint8Array|null = null,
  public previousMessageId: string|Uint8Array|null = null,
  public nextMessageId: string|Uint8Array|null = null,
  public admMsgLink: string|Uint8Array|null = null,
  public cdmMsgLink: string|Uint8Array|null = null,
  public prmMsgLink: string|Uint8Array|null = null,
  public rdmMsgLink: string|Uint8Array|null = null,
  public tdmMsgLink: (string)[] = [],
  public operator: string|Uint8Array|null = null,
  public owner: string|Uint8Array|null = null,
  public country: string|Uint8Array|null = null,
  public constellation: string|Uint8Array|null = null,
  public objectType: string|Uint8Array|null = null,
  public timeSystem: string|Uint8Array|null = null,
  public epochTzero: string|Uint8Array|null = null,
  public opsStatus: string|Uint8Array|null = null,
  public orbitCategory: string|Uint8Array|null = null,
  public ocmDataElements: (string)[] = [],
  public sclkOffsetAtEpoch: number = 0.0,
  public sclkSecPerSiSec: number = 0.0,
  public previousMessageEpoch: string|Uint8Array|null = null,
  public nextMessageEpoch: string|Uint8Array|null = null,
  public startTime: string|Uint8Array|null = null,
  public stopTime: string|Uint8Array|null = null,
  public timeSpan: number = 0.0,
  public taimutcAtTzero: number = 0.0,
  public nextLeapEpoch: string|Uint8Array|null = null,
  public nextLeapTaimutc: number = 0.0,
  public ut1MutcAtTzero: number = 0.0,
  public eopSource: string|Uint8Array|null = null,
  public interpMethodEop: string|Uint8Array|null = null,
  public celestialSource: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const comment = Metadata.createCommentVector(builder, builder.createObjectOffsetList(this.comment));
  const objectName = (this.objectName !== null ? builder.createString(this.objectName!) : 0);
  const internationalDesignator = (this.internationalDesignator !== null ? builder.createString(this.internationalDesignator!) : 0);
  const catalogName = (this.catalogName !== null ? builder.createString(this.catalogName!) : 0);
  const objectDesignator = (this.objectDesignator !== null ? builder.createString(this.objectDesignator!) : 0);
  const alternateNames = Metadata.createAlternateNamesVector(builder, builder.createObjectOffsetList(this.alternateNames));
  const originatorPoc = (this.originatorPoc !== null ? builder.createString(this.originatorPoc!) : 0);
  const originatorPosition = (this.originatorPosition !== null ? builder.createString(this.originatorPosition!) : 0);
  const originatorPhone = (this.originatorPhone !== null ? builder.createString(this.originatorPhone!) : 0);
  const originatorEmail = (this.originatorEmail !== null ? builder.createString(this.originatorEmail!) : 0);
  const originatorAddress = (this.originatorAddress !== null ? builder.createString(this.originatorAddress!) : 0);
  const techOrg = (this.techOrg !== null ? builder.createString(this.techOrg!) : 0);
  const techPoc = (this.techPoc !== null ? builder.createString(this.techPoc!) : 0);
  const techPosition = (this.techPosition !== null ? builder.createString(this.techPosition!) : 0);
  const techPhone = (this.techPhone !== null ? builder.createString(this.techPhone!) : 0);
  const techEmail = (this.techEmail !== null ? builder.createString(this.techEmail!) : 0);
  const techAddress = (this.techAddress !== null ? builder.createString(this.techAddress!) : 0);
  const previousMessageId = (this.previousMessageId !== null ? builder.createString(this.previousMessageId!) : 0);
  const nextMessageId = (this.nextMessageId !== null ? builder.createString(this.nextMessageId!) : 0);
  const admMsgLink = (this.admMsgLink !== null ? builder.createString(this.admMsgLink!) : 0);
  const cdmMsgLink = (this.cdmMsgLink !== null ? builder.createString(this.cdmMsgLink!) : 0);
  const prmMsgLink = (this.prmMsgLink !== null ? builder.createString(this.prmMsgLink!) : 0);
  const rdmMsgLink = (this.rdmMsgLink !== null ? builder.createString(this.rdmMsgLink!) : 0);
  const tdmMsgLink = Metadata.createTdmMsgLinkVector(builder, builder.createObjectOffsetList(this.tdmMsgLink));
  const operator = (this.operator !== null ? builder.createString(this.operator!) : 0);
  const owner = (this.owner !== null ? builder.createString(this.owner!) : 0);
  const country = (this.country !== null ? builder.createString(this.country!) : 0);
  const constellation = (this.constellation !== null ? builder.createString(this.constellation!) : 0);
  const objectType = (this.objectType !== null ? builder.createString(this.objectType!) : 0);
  const timeSystem = (this.timeSystem !== null ? builder.createString(this.timeSystem!) : 0);
  const epochTzero = (this.epochTzero !== null ? builder.createString(this.epochTzero!) : 0);
  const opsStatus = (this.opsStatus !== null ? builder.createString(this.opsStatus!) : 0);
  const orbitCategory = (this.orbitCategory !== null ? builder.createString(this.orbitCategory!) : 0);
  const ocmDataElements = Metadata.createOcmDataElementsVector(builder, builder.createObjectOffsetList(this.ocmDataElements));
  const previousMessageEpoch = (this.previousMessageEpoch !== null ? builder.createString(this.previousMessageEpoch!) : 0);
  const nextMessageEpoch = (this.nextMessageEpoch !== null ? builder.createString(this.nextMessageEpoch!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const stopTime = (this.stopTime !== null ? builder.createString(this.stopTime!) : 0);
  const nextLeapEpoch = (this.nextLeapEpoch !== null ? builder.createString(this.nextLeapEpoch!) : 0);
  const eopSource = (this.eopSource !== null ? builder.createString(this.eopSource!) : 0);
  const interpMethodEop = (this.interpMethodEop !== null ? builder.createString(this.interpMethodEop!) : 0);
  const celestialSource = (this.celestialSource !== null ? builder.createString(this.celestialSource!) : 0);

  return Metadata.createMetadata(builder,
    comment,
    objectName,
    internationalDesignator,
    catalogName,
    objectDesignator,
    alternateNames,
    originatorPoc,
    originatorPosition,
    originatorPhone,
    originatorEmail,
    originatorAddress,
    techOrg,
    techPoc,
    techPosition,
    techPhone,
    techEmail,
    techAddress,
    previousMessageId,
    nextMessageId,
    admMsgLink,
    cdmMsgLink,
    prmMsgLink,
    rdmMsgLink,
    tdmMsgLink,
    operator,
    owner,
    country,
    constellation,
    objectType,
    timeSystem,
    epochTzero,
    opsStatus,
    orbitCategory,
    ocmDataElements,
    this.sclkOffsetAtEpoch,
    this.sclkSecPerSiSec,
    previousMessageEpoch,
    nextMessageEpoch,
    startTime,
    stopTime,
    this.timeSpan,
    this.taimutcAtTzero,
    nextLeapEpoch,
    this.nextLeapTaimutc,
    this.ut1MutcAtTzero,
    eopSource,
    interpMethodEop,
    celestialSource
  );
}
}
