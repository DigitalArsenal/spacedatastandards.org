// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ENGINE, ENGINET } from './engine.js';


/**
 * Stage Details
 */
export class STAGE implements flatbuffers.IUnpackableObject<STAGET> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):STAGE {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSTAGE(bb:flatbuffers.ByteBuffer, obj?:STAGE):STAGE {
  return (obj || new STAGE()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSTAGE(bb:flatbuffers.ByteBuffer, obj?:STAGE):STAGE {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new STAGE()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Stage Number
 */
stageNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Engines Used in This Stage
 */
engines(index: number, obj?:ENGINE):ENGINE|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ENGINE()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

enginesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Fuel Type Used in This Stage
 */
fuelType():string|null
fuelType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fuelType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Thrust Produced by This Stage (in Newtons)
 */
thrust():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Duration of the Burn (in Seconds)
 */
burnDuration():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startSTAGE(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addStageNumber(builder:flatbuffers.Builder, stageNumber:number) {
  builder.addFieldInt32(0, stageNumber, 0);
}

static addEngines(builder:flatbuffers.Builder, enginesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, enginesOffset, 0);
}

static createEnginesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEnginesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFuelType(builder:flatbuffers.Builder, fuelTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, fuelTypeOffset, 0);
}

static addThrust(builder:flatbuffers.Builder, thrust:number) {
  builder.addFieldFloat64(3, thrust, 0.0);
}

static addBurnDuration(builder:flatbuffers.Builder, burnDuration:number) {
  builder.addFieldFloat64(4, burnDuration, 0.0);
}

static endSTAGE(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSTAGE(builder:flatbuffers.Builder, stageNumber:number, enginesOffset:flatbuffers.Offset, fuelTypeOffset:flatbuffers.Offset, thrust:number, burnDuration:number):flatbuffers.Offset {
  STAGE.startSTAGE(builder);
  STAGE.addStageNumber(builder, stageNumber);
  STAGE.addEngines(builder, enginesOffset);
  STAGE.addFuelType(builder, fuelTypeOffset);
  STAGE.addThrust(builder, thrust);
  STAGE.addBurnDuration(builder, burnDuration);
  return STAGE.endSTAGE(builder);
}

unpack(): STAGET {
  return new STAGET(
    this.stageNumber(),
    this.bb!.createObjList<ENGINE, ENGINET>(this.engines.bind(this), this.enginesLength()),
    this.fuelType(),
    this.thrust(),
    this.burnDuration()
  );
}


unpackTo(_o: STAGET): void {
  _o.stageNumber = this.stageNumber();
  _o.engines = this.bb!.createObjList<ENGINE, ENGINET>(this.engines.bind(this), this.enginesLength());
  _o.fuelType = this.fuelType();
  _o.thrust = this.thrust();
  _o.burnDuration = this.burnDuration();
}
}

export class STAGET implements flatbuffers.IGeneratedObject {
constructor(
  public stageNumber: number = 0,
  public engines: (ENGINET)[] = [],
  public fuelType: string|Uint8Array|null = null,
  public thrust: number = 0.0,
  public burnDuration: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const engines = STAGE.createEnginesVector(builder, builder.createObjectOffsetList(this.engines));
  const fuelType = (this.fuelType !== null ? builder.createString(this.fuelType!) : 0);

  return STAGE.createSTAGE(builder,
    this.stageNumber,
    engines,
    fuelType,
    this.thrust,
    this.burnDuration
  );
}
}
