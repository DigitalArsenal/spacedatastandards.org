// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * Represents a geographic address
 */
export class Address implements flatbuffers.IUnpackableObject<AddressT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Address {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAddress(bb:flatbuffers.ByteBuffer, obj?:Address):Address {
  return (obj || new Address()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAddress(bb:flatbuffers.ByteBuffer, obj?:Address):Address {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Address()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Country of the address
 */
COUNTRY():string|null
COUNTRY(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
COUNTRY(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Region of the address (e.g., state or province)
 */
REGION():string|null
REGION(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
REGION(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Locality of the address (e.g., city or town)
 */
LOCALITY():string|null
LOCALITY(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
LOCALITY(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Postal code of the address
 */
POSTAL_CODE():string|null
POSTAL_CODE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
POSTAL_CODE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Street address
 */
STREET():string|null
STREET(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
STREET(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Post office box number
 */
POST_OFFICE_BOX_NUMBER():string|null
POST_OFFICE_BOX_NUMBER(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
POST_OFFICE_BOX_NUMBER(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startAddress(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addCountry(builder:flatbuffers.Builder, COUNTRYOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, COUNTRYOffset, 0);
}

static addRegion(builder:flatbuffers.Builder, REGIONOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, REGIONOffset, 0);
}

static addLocality(builder:flatbuffers.Builder, LOCALITYOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, LOCALITYOffset, 0);
}

static addPostalCode(builder:flatbuffers.Builder, POSTAL_CODEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, POSTAL_CODEOffset, 0);
}

static addStreet(builder:flatbuffers.Builder, STREETOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, STREETOffset, 0);
}

static addPostOfficeBoxNumber(builder:flatbuffers.Builder, POST_OFFICE_BOX_NUMBEROffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, POST_OFFICE_BOX_NUMBEROffset, 0);
}

static endAddress(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAddress(builder:flatbuffers.Builder, COUNTRYOffset:flatbuffers.Offset, REGIONOffset:flatbuffers.Offset, LOCALITYOffset:flatbuffers.Offset, POSTAL_CODEOffset:flatbuffers.Offset, STREETOffset:flatbuffers.Offset, POST_OFFICE_BOX_NUMBEROffset:flatbuffers.Offset):flatbuffers.Offset {
  Address.startAddress(builder);
  Address.addCountry(builder, COUNTRYOffset);
  Address.addRegion(builder, REGIONOffset);
  Address.addLocality(builder, LOCALITYOffset);
  Address.addPostalCode(builder, POSTAL_CODEOffset);
  Address.addStreet(builder, STREETOffset);
  Address.addPostOfficeBoxNumber(builder, POST_OFFICE_BOX_NUMBEROffset);
  return Address.endAddress(builder);
}

unpack(): AddressT {
  return new AddressT(
    this.COUNTRY(),
    this.REGION(),
    this.LOCALITY(),
    this.POSTAL_CODE(),
    this.STREET(),
    this.POST_OFFICE_BOX_NUMBER()
  );
}


unpackTo(_o: AddressT): void {
  _o.COUNTRY = this.COUNTRY();
  _o.REGION = this.REGION();
  _o.LOCALITY = this.LOCALITY();
  _o.POSTAL_CODE = this.POSTAL_CODE();
  _o.STREET = this.STREET();
  _o.POST_OFFICE_BOX_NUMBER = this.POST_OFFICE_BOX_NUMBER();
}
}

export class AddressT implements flatbuffers.IGeneratedObject {
constructor(
  public COUNTRY: string|Uint8Array|null = null,
  public REGION: string|Uint8Array|null = null,
  public LOCALITY: string|Uint8Array|null = null,
  public POSTAL_CODE: string|Uint8Array|null = null,
  public STREET: string|Uint8Array|null = null,
  public POST_OFFICE_BOX_NUMBER: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const COUNTRY = (this.COUNTRY !== null ? builder.createString(this.COUNTRY!) : 0);
  const REGION = (this.REGION !== null ? builder.createString(this.REGION!) : 0);
  const LOCALITY = (this.LOCALITY !== null ? builder.createString(this.LOCALITY!) : 0);
  const POSTAL_CODE = (this.POSTAL_CODE !== null ? builder.createString(this.POSTAL_CODE!) : 0);
  const STREET = (this.STREET !== null ? builder.createString(this.STREET!) : 0);
  const POST_OFFICE_BOX_NUMBER = (this.POST_OFFICE_BOX_NUMBER !== null ? builder.createString(this.POST_OFFICE_BOX_NUMBER!) : 0);

  return Address.createAddress(builder,
    COUNTRY,
    REGION,
    LOCALITY,
    POSTAL_CODE,
    STREET,
    POST_OFFICE_BOX_NUMBER
  );
}
}
