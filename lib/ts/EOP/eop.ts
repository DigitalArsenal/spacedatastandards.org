// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DataType } from './data-type.js';


/**
 * Earth Orientation Parameters
 */
export class EOP implements flatbuffers.IUnpackableObject<EOPT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EOP {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEOP(bb:flatbuffers.ByteBuffer, obj?:EOP):EOP {
  return (obj || new EOP()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEOP(bb:flatbuffers.ByteBuffer, obj?:EOP):EOP {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EOP()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$EOP');
}

/**
 * Date in ISO 8601 format
 */
date():string|null
date(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
date(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Modified Julian Date
 */
mjd():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

/**
 * x pole coordinate in arcseconds
 */
x():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * y pole coordinate in arcseconds
 */
y():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * UT1-UTC in seconds
 */
ut1MinusUtc():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Length of Day correction in seconds
 */
lod():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Nutation correction in longitude (δΔψ) in arcseconds
 */
dpsi():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Nutation correction in obliquity (δΔε) in arcseconds
 */
deps():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Celestial pole offset in x (δX) in arcseconds
 */
dx():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Celestial pole offset in y (δY) in arcseconds
 */
dy():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Delta Atomic Time (TAI-UTC) in seconds
 */
dat():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

/**
 * Data type (O = Observed, P = Predicted)
 */
dataType():DataType {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DataType.OBSERVED;
}

static startEOP(builder:flatbuffers.Builder) {
  builder.startObject(12);
}

static addDate(builder:flatbuffers.Builder, dateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dateOffset, 0);
}

static addMjd(builder:flatbuffers.Builder, mjd:number) {
  builder.addFieldInt32(1, mjd, 0);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldFloat32(2, x, 0.0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldFloat32(3, y, 0.0);
}

static addUt1MinusUtc(builder:flatbuffers.Builder, ut1MinusUtc:number) {
  builder.addFieldFloat32(4, ut1MinusUtc, 0.0);
}

static addLod(builder:flatbuffers.Builder, lod:number) {
  builder.addFieldFloat32(5, lod, 0.0);
}

static addDpsi(builder:flatbuffers.Builder, dpsi:number) {
  builder.addFieldFloat32(6, dpsi, 0.0);
}

static addDeps(builder:flatbuffers.Builder, deps:number) {
  builder.addFieldFloat32(7, deps, 0.0);
}

static addDx(builder:flatbuffers.Builder, dx:number) {
  builder.addFieldFloat32(8, dx, 0.0);
}

static addDy(builder:flatbuffers.Builder, dy:number) {
  builder.addFieldFloat32(9, dy, 0.0);
}

static addDat(builder:flatbuffers.Builder, dat:number) {
  builder.addFieldInt16(10, dat, 0);
}

static addDataType(builder:flatbuffers.Builder, dataType:DataType) {
  builder.addFieldInt8(11, dataType, DataType.OBSERVED);
}

static endEOP(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEOPBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$EOP');
}

static finishSizePrefixedEOPBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$EOP', true);
}

static createEOP(builder:flatbuffers.Builder, dateOffset:flatbuffers.Offset, mjd:number, x:number, y:number, ut1MinusUtc:number, lod:number, dpsi:number, deps:number, dx:number, dy:number, dat:number, dataType:DataType):flatbuffers.Offset {
  EOP.startEOP(builder);
  EOP.addDate(builder, dateOffset);
  EOP.addMjd(builder, mjd);
  EOP.addX(builder, x);
  EOP.addY(builder, y);
  EOP.addUt1MinusUtc(builder, ut1MinusUtc);
  EOP.addLod(builder, lod);
  EOP.addDpsi(builder, dpsi);
  EOP.addDeps(builder, deps);
  EOP.addDx(builder, dx);
  EOP.addDy(builder, dy);
  EOP.addDat(builder, dat);
  EOP.addDataType(builder, dataType);
  return EOP.endEOP(builder);
}

unpack(): EOPT {
  return new EOPT(
    this.date(),
    this.mjd(),
    this.x(),
    this.y(),
    this.ut1MinusUtc(),
    this.lod(),
    this.dpsi(),
    this.deps(),
    this.dx(),
    this.dy(),
    this.dat(),
    this.dataType()
  );
}


unpackTo(_o: EOPT): void {
  _o.date = this.date();
  _o.mjd = this.mjd();
  _o.x = this.x();
  _o.y = this.y();
  _o.ut1MinusUtc = this.ut1MinusUtc();
  _o.lod = this.lod();
  _o.dpsi = this.dpsi();
  _o.deps = this.deps();
  _o.dx = this.dx();
  _o.dy = this.dy();
  _o.dat = this.dat();
  _o.dataType = this.dataType();
}
}

export class EOPT implements flatbuffers.IGeneratedObject {
constructor(
  public date: string|Uint8Array|null = null,
  public mjd: number = 0,
  public x: number = 0.0,
  public y: number = 0.0,
  public ut1MinusUtc: number = 0.0,
  public lod: number = 0.0,
  public dpsi: number = 0.0,
  public deps: number = 0.0,
  public dx: number = 0.0,
  public dy: number = 0.0,
  public dat: number = 0,
  public dataType: DataType = DataType.OBSERVED
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const date = (this.date !== null ? builder.createString(this.date!) : 0);

  return EOP.createEOP(builder,
    date,
    this.mjd,
    this.x,
    this.y,
    this.ut1MinusUtc,
    this.lod,
    this.dpsi,
    this.deps,
    this.dx,
    this.dy,
    this.dat,
    this.dataType
  );
}
}
