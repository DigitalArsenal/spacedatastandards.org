// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * Country Identity Message
 */
export class CTR implements flatbuffers.IUnpackableObject<CTRT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CTR {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCTR(bb:flatbuffers.ByteBuffer, obj?:CTR):CTR {
  return (obj || new CTR()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCTR(bb:flatbuffers.ByteBuffer, obj?:CTR):CTR {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CTR()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$CTR');
}

/**
 * ISO 3166 Numeric code
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Country name
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * GENC code
 */
gencCode():string|null
gencCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gencCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ISO 3166 Alpha-2 code
 */
alpha2Code():string|null
alpha2Code(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
alpha2Code(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ISO 3166 Alpha-3 code
 */
alpha3Code():string|null
alpha3Code(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
alpha3Code(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Stanag code
 */
stanagCode():string|null
stanagCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stanagCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Internet country code top-level domain (ccTLD)
 */
internetCctld():string|null
internetCctld(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
internetCctld(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional comments
 */
comment():string|null
comment(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
comment(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startCTR(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addGencCode(builder:flatbuffers.Builder, gencCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, gencCodeOffset, 0);
}

static addAlpha2Code(builder:flatbuffers.Builder, alpha2CodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, alpha2CodeOffset, 0);
}

static addAlpha3Code(builder:flatbuffers.Builder, alpha3CodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, alpha3CodeOffset, 0);
}

static addStanagCode(builder:flatbuffers.Builder, stanagCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, stanagCodeOffset, 0);
}

static addInternetCctld(builder:flatbuffers.Builder, internetCctldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, internetCctldOffset, 0);
}

static addComment(builder:flatbuffers.Builder, commentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, commentOffset, 0);
}

static endCTR(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCTRBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$CTR');
}

static finishSizePrefixedCTRBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$CTR', true);
}

static createCTR(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, gencCodeOffset:flatbuffers.Offset, alpha2CodeOffset:flatbuffers.Offset, alpha3CodeOffset:flatbuffers.Offset, stanagCodeOffset:flatbuffers.Offset, internetCctldOffset:flatbuffers.Offset, commentOffset:flatbuffers.Offset):flatbuffers.Offset {
  CTR.startCTR(builder);
  CTR.addId(builder, idOffset);
  CTR.addName(builder, nameOffset);
  CTR.addGencCode(builder, gencCodeOffset);
  CTR.addAlpha2Code(builder, alpha2CodeOffset);
  CTR.addAlpha3Code(builder, alpha3CodeOffset);
  CTR.addStanagCode(builder, stanagCodeOffset);
  CTR.addInternetCctld(builder, internetCctldOffset);
  CTR.addComment(builder, commentOffset);
  return CTR.endCTR(builder);
}

unpack(): CTRT {
  return new CTRT(
    this.id(),
    this.name(),
    this.gencCode(),
    this.alpha2Code(),
    this.alpha3Code(),
    this.stanagCode(),
    this.internetCctld(),
    this.comment()
  );
}


unpackTo(_o: CTRT): void {
  _o.id = this.id();
  _o.name = this.name();
  _o.gencCode = this.gencCode();
  _o.alpha2Code = this.alpha2Code();
  _o.alpha3Code = this.alpha3Code();
  _o.stanagCode = this.stanagCode();
  _o.internetCctld = this.internetCctld();
  _o.comment = this.comment();
}
}

export class CTRT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public gencCode: string|Uint8Array|null = null,
  public alpha2Code: string|Uint8Array|null = null,
  public alpha3Code: string|Uint8Array|null = null,
  public stanagCode: string|Uint8Array|null = null,
  public internetCctld: string|Uint8Array|null = null,
  public comment: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const gencCode = (this.gencCode !== null ? builder.createString(this.gencCode!) : 0);
  const alpha2Code = (this.alpha2Code !== null ? builder.createString(this.alpha2Code!) : 0);
  const alpha3Code = (this.alpha3Code !== null ? builder.createString(this.alpha3Code!) : 0);
  const stanagCode = (this.stanagCode !== null ? builder.createString(this.stanagCode!) : 0);
  const internetCctld = (this.internetCctld !== null ? builder.createString(this.internetCctld!) : 0);
  const comment = (this.comment !== null ? builder.createString(this.comment!) : 0);

  return CTR.createCTR(builder,
    id,
    name,
    gencCode,
    alpha2Code,
    alpha3Code,
    stanagCode,
    internetCctld,
    comment
  );
}
}
