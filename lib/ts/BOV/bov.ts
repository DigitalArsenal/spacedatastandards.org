// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * Burn Out Vector Message
 */
export class BOV implements flatbuffers.IUnpackableObject<BOVT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BOV {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBOV(bb:flatbuffers.ByteBuffer, obj?:BOV):BOV {
  return (obj || new BOV()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBOV(bb:flatbuffers.ByteBuffer, obj?:BOV):BOV {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BOV()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$BOV');
}

eCoordinate():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

fCoordinate():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

gCoordinate():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

eDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

fDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

gDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

epoch():string|null
epoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
epoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

timeFromLaunch():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startBOV(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addECoordinate(builder:flatbuffers.Builder, eCoordinate:number) {
  builder.addFieldFloat64(0, eCoordinate, 0.0);
}

static addFCoordinate(builder:flatbuffers.Builder, fCoordinate:number) {
  builder.addFieldFloat64(1, fCoordinate, 0.0);
}

static addGCoordinate(builder:flatbuffers.Builder, gCoordinate:number) {
  builder.addFieldFloat64(2, gCoordinate, 0.0);
}

static addEDot(builder:flatbuffers.Builder, eDot:number) {
  builder.addFieldFloat64(3, eDot, 0.0);
}

static addFDot(builder:flatbuffers.Builder, fDot:number) {
  builder.addFieldFloat64(4, fDot, 0.0);
}

static addGDot(builder:flatbuffers.Builder, gDot:number) {
  builder.addFieldFloat64(5, gDot, 0.0);
}

static addEpoch(builder:flatbuffers.Builder, epochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, epochOffset, 0);
}

static addTimeFromLaunch(builder:flatbuffers.Builder, timeFromLaunch:number) {
  builder.addFieldFloat64(7, timeFromLaunch, 0.0);
}

static endBOV(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishBOVBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$BOV');
}

static finishSizePrefixedBOVBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$BOV', true);
}

static createBOV(builder:flatbuffers.Builder, eCoordinate:number, fCoordinate:number, gCoordinate:number, eDot:number, fDot:number, gDot:number, epochOffset:flatbuffers.Offset, timeFromLaunch:number):flatbuffers.Offset {
  BOV.startBOV(builder);
  BOV.addECoordinate(builder, eCoordinate);
  BOV.addFCoordinate(builder, fCoordinate);
  BOV.addGCoordinate(builder, gCoordinate);
  BOV.addEDot(builder, eDot);
  BOV.addFDot(builder, fDot);
  BOV.addGDot(builder, gDot);
  BOV.addEpoch(builder, epochOffset);
  BOV.addTimeFromLaunch(builder, timeFromLaunch);
  return BOV.endBOV(builder);
}

unpack(): BOVT {
  return new BOVT(
    this.eCoordinate(),
    this.fCoordinate(),
    this.gCoordinate(),
    this.eDot(),
    this.fDot(),
    this.gDot(),
    this.epoch(),
    this.timeFromLaunch()
  );
}


unpackTo(_o: BOVT): void {
  _o.eCoordinate = this.eCoordinate();
  _o.fCoordinate = this.fCoordinate();
  _o.gCoordinate = this.gCoordinate();
  _o.eDot = this.eDot();
  _o.fDot = this.fDot();
  _o.gDot = this.gDot();
  _o.epoch = this.epoch();
  _o.timeFromLaunch = this.timeFromLaunch();
}
}

export class BOVT implements flatbuffers.IGeneratedObject {
constructor(
  public eCoordinate: number = 0.0,
  public fCoordinate: number = 0.0,
  public gCoordinate: number = 0.0,
  public eDot: number = 0.0,
  public fDot: number = 0.0,
  public gDot: number = 0.0,
  public epoch: string|Uint8Array|null = null,
  public timeFromLaunch: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const epoch = (this.epoch !== null ? builder.createString(this.epoch!) : 0);

  return BOV.createBOV(builder,
    this.eCoordinate,
    this.fCoordinate,
    this.gCoordinate,
    this.eDot,
    this.fDot,
    this.gDot,
    epoch,
    this.timeFromLaunch
  );
}
}
