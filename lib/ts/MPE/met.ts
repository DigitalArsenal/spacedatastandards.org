// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { meanElementTheory } from './mean-element-theory.js';


/**
 * Mean Element Theory
 */
export class MET implements flatbuffers.IUnpackableObject<METT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MET {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMET(bb:flatbuffers.ByteBuffer, obj?:MET):MET {
  return (obj || new MET()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMET(bb:flatbuffers.ByteBuffer, obj?:MET):MET {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MET()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$MET');
}

meanElementTheory():meanElementTheory {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : meanElementTheory.SGP4;
}

static startMET(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMeanElementTheory(builder:flatbuffers.Builder, meanElementTheory:meanElementTheory) {
  builder.addFieldInt8(0, meanElementTheory, meanElementTheory.SGP4);
}

static endMET(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMETBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$MET');
}

static finishSizePrefixedMETBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$MET', true);
}

static createMET(builder:flatbuffers.Builder, meanElementTheory:meanElementTheory):flatbuffers.Offset {
  MET.startMET(builder);
  MET.addMeanElementTheory(builder, meanElementTheory);
  return MET.endMET(builder);
}

unpack(): METT {
  return new METT(
    this.meanElementTheory()
  );
}


unpackTo(_o: METT): void {
  _o.meanElementTheory = this.meanElementTheory();
}
}

export class METT implements flatbuffers.IGeneratedObject {
constructor(
  public meanElementTheory: meanElementTheory = meanElementTheory.SGP4
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return MET.createMET(builder,
    this.meanElementTheory
  );
}
}
