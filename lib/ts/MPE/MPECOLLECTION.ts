// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { MPE, MPET } from './MPE.js';
import { meanElementTheory } from './meanElementTheory.js';
import { referenceFrame } from './referenceFrame.js';
import { timeSystem } from './timeSystem.js';


/**
 * Collection of MPE Records
 */
export class MPECOLLECTION implements flatbuffers.IUnpackableObject<MPECOLLECTIONT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MPECOLLECTION {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMPECOLLECTION(bb:flatbuffers.ByteBuffer, obj?:MPECOLLECTION):MPECOLLECTION {
  return (obj || new MPECOLLECTION()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMPECOLLECTION(bb:flatbuffers.ByteBuffer, obj?:MPECOLLECTION):MPECOLLECTION {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MPECOLLECTION()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Default value = U
 */
CLASSIFICATION_TYPE():string|null
CLASSIFICATION_TYPE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CLASSIFICATION_TYPE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the reference frame (TEME, EME2000, etc.)
 */
REF_FRAME():referenceFrame {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : referenceFrame.TEME;
}

/**
 * Epoch of the Reference Frame. (UNIX TimeStamp)
 */
REF_FRAME_EPOCH():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Time system used for the orbit state and covariance matrix. (UTC)
 */
TIME_SYSTEM():timeSystem {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : timeSystem.UTC;
}

/**
 * Description of the Mean Element Theory. (SGP4,DSST,USM)
 */
MEAN_ELEMENT_THEORY():meanElementTheory {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : meanElementTheory.SGP4;
}

/**
 * Array of MPE records
 */
RECORDS(index: number, obj?:MPE):MPE|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new MPE()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

recordsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startMPECOLLECTION(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addClassificationType(builder:flatbuffers.Builder, CLASSIFICATION_TYPEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, CLASSIFICATION_TYPEOffset, 0);
}

static addRefFrame(builder:flatbuffers.Builder, REF_FRAME:referenceFrame) {
  builder.addFieldInt8(1, REF_FRAME, referenceFrame.TEME);
}

static addRefFrameEpoch(builder:flatbuffers.Builder, REF_FRAME_EPOCH:number) {
  builder.addFieldFloat64(2, REF_FRAME_EPOCH, 0.0);
}

static addTimeSystem(builder:flatbuffers.Builder, TIME_SYSTEM:timeSystem) {
  builder.addFieldInt8(3, TIME_SYSTEM, timeSystem.UTC);
}

static addMeanElementTheory(builder:flatbuffers.Builder, MEAN_ELEMENT_THEORY:meanElementTheory) {
  builder.addFieldInt8(4, MEAN_ELEMENT_THEORY, meanElementTheory.SGP4);
}

static addRecords(builder:flatbuffers.Builder, RECORDSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, RECORDSOffset, 0);
}

static createRecordsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRecordsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endMPECOLLECTION(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMPECOLLECTION(builder:flatbuffers.Builder, CLASSIFICATION_TYPEOffset:flatbuffers.Offset, REF_FRAME:referenceFrame, REF_FRAME_EPOCH:number, TIME_SYSTEM:timeSystem, MEAN_ELEMENT_THEORY:meanElementTheory, RECORDSOffset:flatbuffers.Offset):flatbuffers.Offset {
  MPECOLLECTION.startMPECOLLECTION(builder);
  MPECOLLECTION.addClassificationType(builder, CLASSIFICATION_TYPEOffset);
  MPECOLLECTION.addRefFrame(builder, REF_FRAME);
  MPECOLLECTION.addRefFrameEpoch(builder, REF_FRAME_EPOCH);
  MPECOLLECTION.addTimeSystem(builder, TIME_SYSTEM);
  MPECOLLECTION.addMeanElementTheory(builder, MEAN_ELEMENT_THEORY);
  MPECOLLECTION.addRecords(builder, RECORDSOffset);
  return MPECOLLECTION.endMPECOLLECTION(builder);
}

unpack(): MPECOLLECTIONT {
  return new MPECOLLECTIONT(
    this.CLASSIFICATION_TYPE(),
    this.REF_FRAME(),
    this.REF_FRAME_EPOCH(),
    this.TIME_SYSTEM(),
    this.MEAN_ELEMENT_THEORY(),
    this.bb!.createObjList<MPE, MPET>(this.RECORDS.bind(this), this.recordsLength())
  );
}


unpackTo(_o: MPECOLLECTIONT): void {
  _o.CLASSIFICATION_TYPE = this.CLASSIFICATION_TYPE();
  _o.REF_FRAME = this.REF_FRAME();
  _o.REF_FRAME_EPOCH = this.REF_FRAME_EPOCH();
  _o.TIME_SYSTEM = this.TIME_SYSTEM();
  _o.MEAN_ELEMENT_THEORY = this.MEAN_ELEMENT_THEORY();
  _o.RECORDS = this.bb!.createObjList<MPE, MPET>(this.RECORDS.bind(this), this.recordsLength());
}
}

export class MPECOLLECTIONT implements flatbuffers.IGeneratedObject {
constructor(
  public CLASSIFICATION_TYPE: string|Uint8Array|null = null,
  public REF_FRAME: referenceFrame = referenceFrame.TEME,
  public REF_FRAME_EPOCH: number = 0.0,
  public TIME_SYSTEM: timeSystem = timeSystem.UTC,
  public MEAN_ELEMENT_THEORY: meanElementTheory = meanElementTheory.SGP4,
  public RECORDS: (MPET)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const CLASSIFICATION_TYPE = (this.CLASSIFICATION_TYPE !== null ? builder.createString(this.CLASSIFICATION_TYPE!) : 0);
  const RECORDS = MPECOLLECTION.createRecordsVector(builder, builder.createObjectOffsetList(this.RECORDS));

  return MPECOLLECTION.createMPECOLLECTION(builder,
    CLASSIFICATION_TYPE,
    this.REF_FRAME,
    this.REF_FRAME_EPOCH,
    this.TIME_SYSTEM,
    this.MEAN_ELEMENT_THEORY,
    RECORDS
  );
}
}
