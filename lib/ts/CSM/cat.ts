// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { PLD, PLDT } from './pld.js';
import { dataStatusCode } from './data-status-code.js';
import { legacyCountryCode } from './legacy-country-code.js';
import { massType } from './mass-type.js';
import { objectType } from './object-type.js';
import { opsStatusCode } from './ops-status-code.js';
import { orbitType } from './orbit-type.js';


/**
 * Catalog Entity Message
 */
export class CAT implements flatbuffers.IUnpackableObject<CATT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CAT {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCAT(bb:flatbuffers.ByteBuffer, obj?:CAT):CAT {
  return (obj || new CAT()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCAT(bb:flatbuffers.ByteBuffer, obj?:CAT):CAT {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CAT()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$CAT');
}

/**
 * Satellite Name(s)
 */
objectName():string|null
objectName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objectName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * International Designator (YYYY-NNNAAA)
 */
objectId():string|null
objectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * NORAD Catalog Number
 */
noradCatId():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

/**
 * Object type (Payload, Rocket body, Debris, Unknown)
 */
objectType():objectType {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : objectType.UNKNOWN;
}

/**
 * Operational Status Code
 */
opsStatusCode():opsStatusCode {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : opsStatusCode.UNKNOWN;
}

/**
 * Ownership, typically country or company
 */
owner():legacyCountryCode {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : legacyCountryCode.AB;
}

/**
 * Launch Date [year-month-day] (ISO 8601)
 */
launchDate():string|null
launchDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Launch Site
 */
launchSite():string|null
launchSite(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchSite(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Decay Date, if applicable [year-month-day] (ISO 8601)
 */
decayDate():string|null
decayDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
decayDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Orbital period [minutes]
 */
period():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Inclination [degrees]
 */
inclination():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Apogee Altitude [kilometers]
 */
apogee():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Perigee Altitude [kilometers]
 */
perigee():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Radar Cross Section [meters2]; blank if no data available
 */
rcs():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Data status code; blank otherwise
 */
dataStatusCode():dataStatusCode {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : dataStatusCode.NO_CURRENT_ELEMENTS;
}

/**
 * Orbit center
 */
orbitCenter():string|null
orbitCenter(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
orbitCenter(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Orbit type (Orbit, Landing, Impact, Docked to RSO, roundtrip)
 */
orbitType():orbitType {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : orbitType.ORBIT;
}

/**
 * Deployment Date [year-month-day] (ISO 8601)
 */
deploymentDate():string|null
deploymentDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
deploymentDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates if the object is maneuverable
 */
maneuverable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Size [meters]; blank if no data available
 */
size():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Mass [kilograms]; blank if no data available
 */
mass():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Mass type (Dry, Wet)
 */
massType():massType {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : massType.DRY;
}

/**
 * Vector of PAYLOADS
 */
payloads(index: number, obj?:PLD):PLD|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? (obj || new PLD()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

payloadsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startCAT(builder:flatbuffers.Builder) {
  builder.startObject(23);
}

static addObjectName(builder:flatbuffers.Builder, objectNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, objectNameOffset, 0);
}

static addObjectId(builder:flatbuffers.Builder, objectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, objectIdOffset, 0);
}

static addNoradCatId(builder:flatbuffers.Builder, noradCatId:number) {
  builder.addFieldInt32(2, noradCatId, 0);
}

static addObjectType(builder:flatbuffers.Builder, objectType:objectType) {
  builder.addFieldInt8(3, objectType, objectType.UNKNOWN);
}

static addOpsStatusCode(builder:flatbuffers.Builder, opsStatusCode:opsStatusCode) {
  builder.addFieldInt8(4, opsStatusCode, opsStatusCode.UNKNOWN);
}

static addOwner(builder:flatbuffers.Builder, owner:legacyCountryCode) {
  builder.addFieldInt8(5, owner, legacyCountryCode.AB);
}

static addLaunchDate(builder:flatbuffers.Builder, launchDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, launchDateOffset, 0);
}

static addLaunchSite(builder:flatbuffers.Builder, launchSiteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, launchSiteOffset, 0);
}

static addDecayDate(builder:flatbuffers.Builder, decayDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, decayDateOffset, 0);
}

static addPeriod(builder:flatbuffers.Builder, period:number) {
  builder.addFieldFloat64(9, period, 0.0);
}

static addInclination(builder:flatbuffers.Builder, inclination:number) {
  builder.addFieldFloat64(10, inclination, 0.0);
}

static addApogee(builder:flatbuffers.Builder, apogee:number) {
  builder.addFieldFloat64(11, apogee, 0.0);
}

static addPerigee(builder:flatbuffers.Builder, perigee:number) {
  builder.addFieldFloat64(12, perigee, 0.0);
}

static addRcs(builder:flatbuffers.Builder, rcs:number) {
  builder.addFieldFloat64(13, rcs, 0.0);
}

static addDataStatusCode(builder:flatbuffers.Builder, dataStatusCode:dataStatusCode) {
  builder.addFieldInt8(14, dataStatusCode, dataStatusCode.NO_CURRENT_ELEMENTS);
}

static addOrbitCenter(builder:flatbuffers.Builder, orbitCenterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, orbitCenterOffset, 0);
}

static addOrbitType(builder:flatbuffers.Builder, orbitType:orbitType) {
  builder.addFieldInt8(16, orbitType, orbitType.ORBIT);
}

static addDeploymentDate(builder:flatbuffers.Builder, deploymentDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, deploymentDateOffset, 0);
}

static addManeuverable(builder:flatbuffers.Builder, maneuverable:boolean) {
  builder.addFieldInt8(18, +maneuverable, +false);
}

static addSize(builder:flatbuffers.Builder, size:number) {
  builder.addFieldFloat64(19, size, 0.0);
}

static addMass(builder:flatbuffers.Builder, mass:number) {
  builder.addFieldFloat64(20, mass, 0.0);
}

static addMassType(builder:flatbuffers.Builder, massType:massType) {
  builder.addFieldInt8(21, massType, massType.DRY);
}

static addPayloads(builder:flatbuffers.Builder, payloadsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, payloadsOffset, 0);
}

static createPayloadsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPayloadsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endCAT(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCATBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$CAT');
}

static finishSizePrefixedCATBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$CAT', true);
}

static createCAT(builder:flatbuffers.Builder, objectNameOffset:flatbuffers.Offset, objectIdOffset:flatbuffers.Offset, noradCatId:number, objectType:objectType, opsStatusCode:opsStatusCode, owner:legacyCountryCode, launchDateOffset:flatbuffers.Offset, launchSiteOffset:flatbuffers.Offset, decayDateOffset:flatbuffers.Offset, period:number, inclination:number, apogee:number, perigee:number, rcs:number, dataStatusCode:dataStatusCode, orbitCenterOffset:flatbuffers.Offset, orbitType:orbitType, deploymentDateOffset:flatbuffers.Offset, maneuverable:boolean, size:number, mass:number, massType:massType, payloadsOffset:flatbuffers.Offset):flatbuffers.Offset {
  CAT.startCAT(builder);
  CAT.addObjectName(builder, objectNameOffset);
  CAT.addObjectId(builder, objectIdOffset);
  CAT.addNoradCatId(builder, noradCatId);
  CAT.addObjectType(builder, objectType);
  CAT.addOpsStatusCode(builder, opsStatusCode);
  CAT.addOwner(builder, owner);
  CAT.addLaunchDate(builder, launchDateOffset);
  CAT.addLaunchSite(builder, launchSiteOffset);
  CAT.addDecayDate(builder, decayDateOffset);
  CAT.addPeriod(builder, period);
  CAT.addInclination(builder, inclination);
  CAT.addApogee(builder, apogee);
  CAT.addPerigee(builder, perigee);
  CAT.addRcs(builder, rcs);
  CAT.addDataStatusCode(builder, dataStatusCode);
  CAT.addOrbitCenter(builder, orbitCenterOffset);
  CAT.addOrbitType(builder, orbitType);
  CAT.addDeploymentDate(builder, deploymentDateOffset);
  CAT.addManeuverable(builder, maneuverable);
  CAT.addSize(builder, size);
  CAT.addMass(builder, mass);
  CAT.addMassType(builder, massType);
  CAT.addPayloads(builder, payloadsOffset);
  return CAT.endCAT(builder);
}

unpack(): CATT {
  return new CATT(
    this.objectName(),
    this.objectId(),
    this.noradCatId(),
    this.objectType(),
    this.opsStatusCode(),
    this.owner(),
    this.launchDate(),
    this.launchSite(),
    this.decayDate(),
    this.period(),
    this.inclination(),
    this.apogee(),
    this.perigee(),
    this.rcs(),
    this.dataStatusCode(),
    this.orbitCenter(),
    this.orbitType(),
    this.deploymentDate(),
    this.maneuverable(),
    this.size(),
    this.mass(),
    this.massType(),
    this.bb!.createObjList<PLD, PLDT>(this.payloads.bind(this), this.payloadsLength())
  );
}


unpackTo(_o: CATT): void {
  _o.objectName = this.objectName();
  _o.objectId = this.objectId();
  _o.noradCatId = this.noradCatId();
  _o.objectType = this.objectType();
  _o.opsStatusCode = this.opsStatusCode();
  _o.owner = this.owner();
  _o.launchDate = this.launchDate();
  _o.launchSite = this.launchSite();
  _o.decayDate = this.decayDate();
  _o.period = this.period();
  _o.inclination = this.inclination();
  _o.apogee = this.apogee();
  _o.perigee = this.perigee();
  _o.rcs = this.rcs();
  _o.dataStatusCode = this.dataStatusCode();
  _o.orbitCenter = this.orbitCenter();
  _o.orbitType = this.orbitType();
  _o.deploymentDate = this.deploymentDate();
  _o.maneuverable = this.maneuverable();
  _o.size = this.size();
  _o.mass = this.mass();
  _o.massType = this.massType();
  _o.payloads = this.bb!.createObjList<PLD, PLDT>(this.payloads.bind(this), this.payloadsLength());
}
}

export class CATT implements flatbuffers.IGeneratedObject {
constructor(
  public objectName: string|Uint8Array|null = null,
  public objectId: string|Uint8Array|null = null,
  public noradCatId: number = 0,
  public objectType: objectType = objectType.UNKNOWN,
  public opsStatusCode: opsStatusCode = opsStatusCode.UNKNOWN,
  public owner: legacyCountryCode = legacyCountryCode.AB,
  public launchDate: string|Uint8Array|null = null,
  public launchSite: string|Uint8Array|null = null,
  public decayDate: string|Uint8Array|null = null,
  public period: number = 0.0,
  public inclination: number = 0.0,
  public apogee: number = 0.0,
  public perigee: number = 0.0,
  public rcs: number = 0.0,
  public dataStatusCode: dataStatusCode = dataStatusCode.NO_CURRENT_ELEMENTS,
  public orbitCenter: string|Uint8Array|null = null,
  public orbitType: orbitType = orbitType.ORBIT,
  public deploymentDate: string|Uint8Array|null = null,
  public maneuverable: boolean = false,
  public size: number = 0.0,
  public mass: number = 0.0,
  public massType: massType = massType.DRY,
  public payloads: (PLDT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const objectName = (this.objectName !== null ? builder.createString(this.objectName!) : 0);
  const objectId = (this.objectId !== null ? builder.createString(this.objectId!) : 0);
  const launchDate = (this.launchDate !== null ? builder.createString(this.launchDate!) : 0);
  const launchSite = (this.launchSite !== null ? builder.createString(this.launchSite!) : 0);
  const decayDate = (this.decayDate !== null ? builder.createString(this.decayDate!) : 0);
  const orbitCenter = (this.orbitCenter !== null ? builder.createString(this.orbitCenter!) : 0);
  const deploymentDate = (this.deploymentDate !== null ? builder.createString(this.deploymentDate!) : 0);
  const payloads = CAT.createPayloadsVector(builder, builder.createObjectOffsetList(this.payloads));

  return CAT.createCAT(builder,
    objectName,
    objectId,
    this.noradCatId,
    this.objectType,
    this.opsStatusCode,
    this.owner,
    launchDate,
    launchSite,
    decayDate,
    this.period,
    this.inclination,
    this.apogee,
    this.perigee,
    this.rcs,
    this.dataStatusCode,
    orbitCenter,
    this.orbitType,
    deploymentDate,
    this.maneuverable,
    this.size,
    this.mass,
    this.massType,
    payloads
  );
}
}
