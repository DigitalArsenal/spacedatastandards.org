// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CAT, CATT } from './cat.js';


/**
 * Conjunction Summary Message
 */
export class CSM implements flatbuffers.IUnpackableObject<CSMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CSM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCSM(bb:flatbuffers.ByteBuffer, obj?:CSM):CSM {
  return (obj || new CSM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCSM(bb:flatbuffers.ByteBuffer, obj?:CSM):CSM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CSM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$CSM');
}

/**
 * Satellite name for the first object
 */
object1(obj?:CAT):CAT|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new CAT()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Days since epoch for the first object
 */
dse1():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Satellite name for the second object
 */
object2(obj?:CAT):CAT|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new CAT()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Days since epoch for the second object
 */
dse2():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Time of closest approach as a Unix timestamp
 */
tca():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The distance or range between the two objects at TCA
 */
tcaRange():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The magnitude of the relative velocity at TCA
 */
tcaRelativeSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum probability
 */
maxProb():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Standard deviation that produces the maximum probability
 */
dilution():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startCSM(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addObject1(builder:flatbuffers.Builder, object1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(0, object1Offset, 0);
}

static addDse1(builder:flatbuffers.Builder, dse1:number) {
  builder.addFieldFloat64(1, dse1, 0.0);
}

static addObject2(builder:flatbuffers.Builder, object2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(2, object2Offset, 0);
}

static addDse2(builder:flatbuffers.Builder, dse2:number) {
  builder.addFieldFloat64(3, dse2, 0.0);
}

static addTca(builder:flatbuffers.Builder, tca:number) {
  builder.addFieldFloat64(4, tca, 0.0);
}

static addTcaRange(builder:flatbuffers.Builder, tcaRange:number) {
  builder.addFieldFloat64(5, tcaRange, 0.0);
}

static addTcaRelativeSpeed(builder:flatbuffers.Builder, tcaRelativeSpeed:number) {
  builder.addFieldFloat64(6, tcaRelativeSpeed, 0.0);
}

static addMaxProb(builder:flatbuffers.Builder, maxProb:number) {
  builder.addFieldFloat64(7, maxProb, 0.0);
}

static addDilution(builder:flatbuffers.Builder, dilution:number) {
  builder.addFieldFloat64(8, dilution, 0.0);
}

static endCSM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCSMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$CSM');
}

static finishSizePrefixedCSMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$CSM', true);
}


unpack(): CSMT {
  return new CSMT(
    (this.object1() !== null ? this.object1()!.unpack() : null),
    this.dse1(),
    (this.object2() !== null ? this.object2()!.unpack() : null),
    this.dse2(),
    this.tca(),
    this.tcaRange(),
    this.tcaRelativeSpeed(),
    this.maxProb(),
    this.dilution()
  );
}


unpackTo(_o: CSMT): void {
  _o.object1 = (this.object1() !== null ? this.object1()!.unpack() : null);
  _o.dse1 = this.dse1();
  _o.object2 = (this.object2() !== null ? this.object2()!.unpack() : null);
  _o.dse2 = this.dse2();
  _o.tca = this.tca();
  _o.tcaRange = this.tcaRange();
  _o.tcaRelativeSpeed = this.tcaRelativeSpeed();
  _o.maxProb = this.maxProb();
  _o.dilution = this.dilution();
}
}

export class CSMT implements flatbuffers.IGeneratedObject {
constructor(
  public object1: CATT|null = null,
  public dse1: number = 0.0,
  public object2: CATT|null = null,
  public dse2: number = 0.0,
  public tca: number = 0.0,
  public tcaRange: number = 0.0,
  public tcaRelativeSpeed: number = 0.0,
  public maxProb: number = 0.0,
  public dilution: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const object1 = (this.object1 !== null ? this.object1!.pack(builder) : 0);
  const object2 = (this.object2 !== null ? this.object2!.pack(builder) : 0);

  CSM.startCSM(builder);
  CSM.addObject1(builder, object1);
  CSM.addDse1(builder, this.dse1);
  CSM.addObject2(builder, object2);
  CSM.addDse2(builder, this.dse2);
  CSM.addTca(builder, this.tca);
  CSM.addTcaRange(builder, this.tcaRange);
  CSM.addTcaRelativeSpeed(builder, this.tcaRelativeSpeed);
  CSM.addMaxProb(builder, this.maxProb);
  CSM.addDilution(builder, this.dilution);

  return CSM.endCSM(builder);
}
}
