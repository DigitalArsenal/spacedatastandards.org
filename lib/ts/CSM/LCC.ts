// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { legacyCountryCode } from './legacyCountryCode.js';


/**
 * Legacy Country Code
 */
export class LCC implements flatbuffers.IUnpackableObject<LCCT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LCC {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLCC(bb:flatbuffers.ByteBuffer, obj?:LCC):LCC {
  return (obj || new LCC()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLCC(bb:flatbuffers.ByteBuffer, obj?:LCC):LCC {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LCC()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$LCC');
}

OWNER():legacyCountryCode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : legacyCountryCode.AB;
}

static startLCC(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addOwner(builder:flatbuffers.Builder, OWNER:legacyCountryCode) {
  builder.addFieldInt8(0, OWNER, legacyCountryCode.AB);
}

static endLCC(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishLCCBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$LCC');
}

static finishSizePrefixedLCCBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$LCC', true);
}

static createLCC(builder:flatbuffers.Builder, OWNER:legacyCountryCode):flatbuffers.Offset {
  LCC.startLCC(builder);
  LCC.addOwner(builder, OWNER);
  return LCC.endLCC(builder);
}

unpack(): LCCT {
  return new LCCT(
    this.OWNER()
  );
}


unpackTo(_o: LCCT): void {
  _o.OWNER = this.OWNER();
}
}

export class LCCT implements flatbuffers.IGeneratedObject {
constructor(
  public OWNER: legacyCountryCode = legacyCountryCode.AB
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return LCC.createLCC(builder,
    this.OWNER
  );
}
}
