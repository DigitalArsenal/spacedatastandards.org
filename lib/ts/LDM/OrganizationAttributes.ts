// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Specific attributes for an Organization
 */
export class OrganizationAttributes implements flatbuffers.IUnpackableObject<OrganizationAttributesT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OrganizationAttributes {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOrganizationAttributes(bb:flatbuffers.ByteBuffer, obj?:OrganizationAttributes):OrganizationAttributes {
  return (obj || new OrganizationAttributes()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOrganizationAttributes(bb:flatbuffers.ByteBuffer, obj?:OrganizationAttributes):OrganizationAttributes {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OrganizationAttributes()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Legal name of the organization
 */
LEGAL_NAME():string|null
LEGAL_NAME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
LEGAL_NAME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startOrganizationAttributes(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addLegalName(builder:flatbuffers.Builder, LEGAL_NAMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, LEGAL_NAMEOffset, 0);
}

static endOrganizationAttributes(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOrganizationAttributes(builder:flatbuffers.Builder, LEGAL_NAMEOffset:flatbuffers.Offset):flatbuffers.Offset {
  OrganizationAttributes.startOrganizationAttributes(builder);
  OrganizationAttributes.addLegalName(builder, LEGAL_NAMEOffset);
  return OrganizationAttributes.endOrganizationAttributes(builder);
}

unpack(): OrganizationAttributesT {
  return new OrganizationAttributesT(
    this.LEGAL_NAME()
  );
}


unpackTo(_o: OrganizationAttributesT): void {
  _o.LEGAL_NAME = this.LEGAL_NAME();
}
}

export class OrganizationAttributesT implements flatbuffers.IGeneratedObject {
constructor(
  public LEGAL_NAME: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const LEGAL_NAME = (this.LEGAL_NAME !== null ? builder.createString(this.LEGAL_NAME!) : 0);

  return OrganizationAttributes.createOrganizationAttributes(builder,
    LEGAL_NAME
  );
}
}
