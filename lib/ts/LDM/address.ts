// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * Represents a geographic address
 */
export class Address implements flatbuffers.IUnpackableObject<AddressT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Address {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAddress(bb:flatbuffers.ByteBuffer, obj?:Address):Address {
  return (obj || new Address()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAddress(bb:flatbuffers.ByteBuffer, obj?:Address):Address {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Address()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Country of the address
 */
country():string|null
country(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
country(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Region of the address (e.g., state or province)
 */
region():string|null
region(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
region(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Locality of the address (e.g., city or town)
 */
locality():string|null
locality(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
locality(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Postal code of the address
 */
postalCode():string|null
postalCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
postalCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Street address
 */
street():string|null
street(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
street(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Post office box number
 */
postOfficeBoxNumber():string|null
postOfficeBoxNumber(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
postOfficeBoxNumber(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startAddress(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addCountry(builder:flatbuffers.Builder, countryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, countryOffset, 0);
}

static addRegion(builder:flatbuffers.Builder, regionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, regionOffset, 0);
}

static addLocality(builder:flatbuffers.Builder, localityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, localityOffset, 0);
}

static addPostalCode(builder:flatbuffers.Builder, postalCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, postalCodeOffset, 0);
}

static addStreet(builder:flatbuffers.Builder, streetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, streetOffset, 0);
}

static addPostOfficeBoxNumber(builder:flatbuffers.Builder, postOfficeBoxNumberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, postOfficeBoxNumberOffset, 0);
}

static endAddress(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAddress(builder:flatbuffers.Builder, countryOffset:flatbuffers.Offset, regionOffset:flatbuffers.Offset, localityOffset:flatbuffers.Offset, postalCodeOffset:flatbuffers.Offset, streetOffset:flatbuffers.Offset, postOfficeBoxNumberOffset:flatbuffers.Offset):flatbuffers.Offset {
  Address.startAddress(builder);
  Address.addCountry(builder, countryOffset);
  Address.addRegion(builder, regionOffset);
  Address.addLocality(builder, localityOffset);
  Address.addPostalCode(builder, postalCodeOffset);
  Address.addStreet(builder, streetOffset);
  Address.addPostOfficeBoxNumber(builder, postOfficeBoxNumberOffset);
  return Address.endAddress(builder);
}

unpack(): AddressT {
  return new AddressT(
    this.country(),
    this.region(),
    this.locality(),
    this.postalCode(),
    this.street(),
    this.postOfficeBoxNumber()
  );
}


unpackTo(_o: AddressT): void {
  _o.country = this.country();
  _o.region = this.region();
  _o.locality = this.locality();
  _o.postalCode = this.postalCode();
  _o.street = this.street();
  _o.postOfficeBoxNumber = this.postOfficeBoxNumber();
}
}

export class AddressT implements flatbuffers.IGeneratedObject {
constructor(
  public country: string|Uint8Array|null = null,
  public region: string|Uint8Array|null = null,
  public locality: string|Uint8Array|null = null,
  public postalCode: string|Uint8Array|null = null,
  public street: string|Uint8Array|null = null,
  public postOfficeBoxNumber: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const country = (this.country !== null ? builder.createString(this.country!) : 0);
  const region = (this.region !== null ? builder.createString(this.region!) : 0);
  const locality = (this.locality !== null ? builder.createString(this.locality!) : 0);
  const postalCode = (this.postalCode !== null ? builder.createString(this.postalCode!) : 0);
  const street = (this.street !== null ? builder.createString(this.street!) : 0);
  const postOfficeBoxNumber = (this.postOfficeBoxNumber !== null ? builder.createString(this.postOfficeBoxNumber!) : 0);

  return Address.createAddress(builder,
    country,
    region,
    locality,
    postalCode,
    street,
    postOfficeBoxNumber
  );
}
}
