// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { STAGE, STAGET } from './STAGE.js';
import { SUSTAINER, SUSTAINERT } from './SUSTAINER.js';


/**
 * Rocket Configuration
 */
export class ROC implements flatbuffers.IUnpackableObject<ROCT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ROC {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsROC(bb:flatbuffers.ByteBuffer, obj?:ROC):ROC {
  return (obj || new ROC()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsROC(bb:flatbuffers.ByteBuffer, obj?:ROC):ROC {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ROC()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Rocket Name
 */
NAME():string|null
NAME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
NAME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Rocket Family
 */
FAMILY():string|null
FAMILY(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
FAMILY(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Rocket Variant
 */
VARIANT():string|null
VARIANT(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
VARIANT(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Stages in the Rocket
 */
STAGES(index: number, obj?:STAGE):STAGE|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new STAGE()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

stagesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Sustainers in the Rocket
 */
SUSTAINERS(index: number, obj?:SUSTAINER):SUSTAINER|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new SUSTAINER()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

sustainersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startROC(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addName(builder:flatbuffers.Builder, NAMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, NAMEOffset, 0);
}

static addFamily(builder:flatbuffers.Builder, FAMILYOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, FAMILYOffset, 0);
}

static addVariant(builder:flatbuffers.Builder, VARIANTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, VARIANTOffset, 0);
}

static addStages(builder:flatbuffers.Builder, STAGESOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, STAGESOffset, 0);
}

static createStagesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStagesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSustainers(builder:flatbuffers.Builder, SUSTAINERSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, SUSTAINERSOffset, 0);
}

static createSustainersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSustainersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endROC(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createROC(builder:flatbuffers.Builder, NAMEOffset:flatbuffers.Offset, FAMILYOffset:flatbuffers.Offset, VARIANTOffset:flatbuffers.Offset, STAGESOffset:flatbuffers.Offset, SUSTAINERSOffset:flatbuffers.Offset):flatbuffers.Offset {
  ROC.startROC(builder);
  ROC.addName(builder, NAMEOffset);
  ROC.addFamily(builder, FAMILYOffset);
  ROC.addVariant(builder, VARIANTOffset);
  ROC.addStages(builder, STAGESOffset);
  ROC.addSustainers(builder, SUSTAINERSOffset);
  return ROC.endROC(builder);
}

unpack(): ROCT {
  return new ROCT(
    this.NAME(),
    this.FAMILY(),
    this.VARIANT(),
    this.bb!.createObjList<STAGE, STAGET>(this.STAGES.bind(this), this.stagesLength()),
    this.bb!.createObjList<SUSTAINER, SUSTAINERT>(this.SUSTAINERS.bind(this), this.sustainersLength())
  );
}


unpackTo(_o: ROCT): void {
  _o.NAME = this.NAME();
  _o.FAMILY = this.FAMILY();
  _o.VARIANT = this.VARIANT();
  _o.STAGES = this.bb!.createObjList<STAGE, STAGET>(this.STAGES.bind(this), this.stagesLength());
  _o.SUSTAINERS = this.bb!.createObjList<SUSTAINER, SUSTAINERT>(this.SUSTAINERS.bind(this), this.sustainersLength());
}
}

export class ROCT implements flatbuffers.IGeneratedObject {
constructor(
  public NAME: string|Uint8Array|null = null,
  public FAMILY: string|Uint8Array|null = null,
  public VARIANT: string|Uint8Array|null = null,
  public STAGES: (STAGET)[] = [],
  public SUSTAINERS: (SUSTAINERT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const NAME = (this.NAME !== null ? builder.createString(this.NAME!) : 0);
  const FAMILY = (this.FAMILY !== null ? builder.createString(this.FAMILY!) : 0);
  const VARIANT = (this.VARIANT !== null ? builder.createString(this.VARIANT!) : 0);
  const STAGES = ROC.createStagesVector(builder, builder.createObjectOffsetList(this.STAGES));
  const SUSTAINERS = ROC.createSustainersVector(builder, builder.createObjectOffsetList(this.SUSTAINERS));

  return ROC.createROC(builder,
    NAME,
    FAMILY,
    VARIANT,
    STAGES,
    SUSTAINERS
  );
}
}
