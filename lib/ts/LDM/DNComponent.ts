// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { LDIFAttributeType } from './LDIFAttributeType.js';


/**
 * Represents a component of a Distinguished Name (DN) in LDAP
 */
export class DNComponent implements flatbuffers.IUnpackableObject<DNComponentT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DNComponent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDNComponent(bb:flatbuffers.ByteBuffer, obj?:DNComponent):DNComponent {
  return (obj || new DNComponent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDNComponent(bb:flatbuffers.ByteBuffer, obj?:DNComponent):DNComponent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DNComponent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * The type of the DN component
 */
TYPE():LDIFAttributeType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : LDIFAttributeType.CN;
}

/**
 * The value of the DN component
 */
VALUE():string|null
VALUE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
VALUE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDNComponent(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addType(builder:flatbuffers.Builder, TYPE:LDIFAttributeType) {
  builder.addFieldInt8(0, TYPE, LDIFAttributeType.CN);
}

static addValue(builder:flatbuffers.Builder, VALUEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, VALUEOffset, 0);
}

static endDNComponent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDNComponent(builder:flatbuffers.Builder, TYPE:LDIFAttributeType, VALUEOffset:flatbuffers.Offset):flatbuffers.Offset {
  DNComponent.startDNComponent(builder);
  DNComponent.addType(builder, TYPE);
  DNComponent.addValue(builder, VALUEOffset);
  return DNComponent.endDNComponent(builder);
}

unpack(): DNComponentT {
  return new DNComponentT(
    this.TYPE(),
    this.VALUE()
  );
}


unpackTo(_o: DNComponentT): void {
  _o.TYPE = this.TYPE();
  _o.VALUE = this.VALUE();
}
}

export class DNComponentT implements flatbuffers.IGeneratedObject {
constructor(
  public TYPE: LDIFAttributeType = LDIFAttributeType.CN,
  public VALUE: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const VALUE = (this.VALUE !== null ? builder.createString(this.VALUE!) : 0);

  return DNComponent.createDNComponent(builder,
    this.TYPE,
    VALUE
  );
}
}
