// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * Sustainer Details
 */
export class SUSTAINER implements flatbuffers.IUnpackableObject<SUSTAINERT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SUSTAINER {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSUSTAINER(bb:flatbuffers.ByteBuffer, obj?:SUSTAINER):SUSTAINER {
  return (obj || new SUSTAINER()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSUSTAINER(bb:flatbuffers.ByteBuffer, obj?:SUSTAINER):SUSTAINER {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SUSTAINER()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Name of the Sustainer
 */
sustainerName():string|null
sustainerName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sustainerName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Thrust Produced by the Sustainer (in Newtons)
 */
thrust():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Duration of the Burn (in Seconds)
 */
burnDuration():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startSUSTAINER(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSustainerName(builder:flatbuffers.Builder, sustainerNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, sustainerNameOffset, 0);
}

static addThrust(builder:flatbuffers.Builder, thrust:number) {
  builder.addFieldFloat64(1, thrust, 0.0);
}

static addBurnDuration(builder:flatbuffers.Builder, burnDuration:number) {
  builder.addFieldFloat64(2, burnDuration, 0.0);
}

static endSUSTAINER(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSUSTAINER(builder:flatbuffers.Builder, sustainerNameOffset:flatbuffers.Offset, thrust:number, burnDuration:number):flatbuffers.Offset {
  SUSTAINER.startSUSTAINER(builder);
  SUSTAINER.addSustainerName(builder, sustainerNameOffset);
  SUSTAINER.addThrust(builder, thrust);
  SUSTAINER.addBurnDuration(builder, burnDuration);
  return SUSTAINER.endSUSTAINER(builder);
}

unpack(): SUSTAINERT {
  return new SUSTAINERT(
    this.sustainerName(),
    this.thrust(),
    this.burnDuration()
  );
}


unpackTo(_o: SUSTAINERT): void {
  _o.sustainerName = this.sustainerName();
  _o.thrust = this.thrust();
  _o.burnDuration = this.burnDuration();
}
}

export class SUSTAINERT implements flatbuffers.IGeneratedObject {
constructor(
  public sustainerName: string|Uint8Array|null = null,
  public thrust: number = 0.0,
  public burnDuration: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const sustainerName = (this.sustainerName !== null ? builder.createString(this.sustainerName!) : 0);

  return SUSTAINER.createSUSTAINER(builder,
    sustainerName,
    this.thrust,
    this.burnDuration
  );
}
}
