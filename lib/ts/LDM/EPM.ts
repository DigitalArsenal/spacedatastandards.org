// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CryptoKey, CryptoKeyT } from './CryptoKey.js';
import { OrganizationAttributes, OrganizationAttributesT } from './OrganizationAttributes.js';
import { PersonAttributes, PersonAttributesT } from './PersonAttributes.js';
import { SpecificAttributes, unionToSpecificAttributes, unionListToSpecificAttributes } from './SpecificAttributes.js';


/**
 * Entity Profile Message
 */
export class EPM implements flatbuffers.IUnpackableObject<EPMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EPM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEPM(bb:flatbuffers.ByteBuffer, obj?:EPM):EPM {
  return (obj || new EPM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEPM(bb:flatbuffers.ByteBuffer, obj?:EPM):EPM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EPM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Common name of the entity (person or organization)
 */
NAME():string|null
NAME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
NAME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Alternate names for the entity
 */
ALTERNATE_NAMES(index: number):string
ALTERNATE_NAMES(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ALTERNATE_NAMES(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

alternateNamesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Email address of the entity
 */
EMAIL():string|null
EMAIL(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
EMAIL(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Telephone number of the entity
 */
TELEPHONE():string|null
TELEPHONE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
TELEPHONE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Cryptographic keys associated with the entity
 */
KEYS(index: number, obj?:CryptoKey):CryptoKey|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new CryptoKey()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

keysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Multiformat addresses associated with the entity
 */
MULTIFORMAT_ADDRESS(index: number):string
MULTIFORMAT_ADDRESS(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
MULTIFORMAT_ADDRESS(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

multiformatAddressLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

attributesType():SpecificAttributes {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : SpecificAttributes.NONE;
}

/**
 * Specific attributes for the entity, either Person or Organization
 */
ATTRIBUTES<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startEPM(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addName(builder:flatbuffers.Builder, NAMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, NAMEOffset, 0);
}

static addAlternateNames(builder:flatbuffers.Builder, ALTERNATE_NAMESOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ALTERNATE_NAMESOffset, 0);
}

static createAlternateNamesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAlternateNamesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEmail(builder:flatbuffers.Builder, EMAILOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, EMAILOffset, 0);
}

static addTelephone(builder:flatbuffers.Builder, TELEPHONEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, TELEPHONEOffset, 0);
}

static addKeys(builder:flatbuffers.Builder, KEYSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, KEYSOffset, 0);
}

static createKeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMultiformatAddress(builder:flatbuffers.Builder, MULTIFORMAT_ADDRESSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, MULTIFORMAT_ADDRESSOffset, 0);
}

static createMultiformatAddressVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMultiformatAddressVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAttributesType(builder:flatbuffers.Builder, attributesType:SpecificAttributes) {
  builder.addFieldInt8(6, attributesType, SpecificAttributes.NONE);
}

static addAttributes(builder:flatbuffers.Builder, ATTRIBUTESOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, ATTRIBUTESOffset, 0);
}

static endEPM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEPM(builder:flatbuffers.Builder, NAMEOffset:flatbuffers.Offset, ALTERNATE_NAMESOffset:flatbuffers.Offset, EMAILOffset:flatbuffers.Offset, TELEPHONEOffset:flatbuffers.Offset, KEYSOffset:flatbuffers.Offset, MULTIFORMAT_ADDRESSOffset:flatbuffers.Offset, attributesType:SpecificAttributes, ATTRIBUTESOffset:flatbuffers.Offset):flatbuffers.Offset {
  EPM.startEPM(builder);
  EPM.addName(builder, NAMEOffset);
  EPM.addAlternateNames(builder, ALTERNATE_NAMESOffset);
  EPM.addEmail(builder, EMAILOffset);
  EPM.addTelephone(builder, TELEPHONEOffset);
  EPM.addKeys(builder, KEYSOffset);
  EPM.addMultiformatAddress(builder, MULTIFORMAT_ADDRESSOffset);
  EPM.addAttributesType(builder, attributesType);
  EPM.addAttributes(builder, ATTRIBUTESOffset);
  return EPM.endEPM(builder);
}

unpack(): EPMT {
  return new EPMT(
    this.NAME(),
    this.bb!.createScalarList<string>(this.ALTERNATE_NAMES.bind(this), this.alternateNamesLength()),
    this.EMAIL(),
    this.TELEPHONE(),
    this.bb!.createObjList<CryptoKey, CryptoKeyT>(this.KEYS.bind(this), this.keysLength()),
    this.bb!.createScalarList<string>(this.MULTIFORMAT_ADDRESS.bind(this), this.multiformatAddressLength()),
    this.attributesType(),
    (() => {
      const temp = unionToSpecificAttributes(this.attributesType(), this.ATTRIBUTES.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: EPMT): void {
  _o.NAME = this.NAME();
  _o.ALTERNATE_NAMES = this.bb!.createScalarList<string>(this.ALTERNATE_NAMES.bind(this), this.alternateNamesLength());
  _o.EMAIL = this.EMAIL();
  _o.TELEPHONE = this.TELEPHONE();
  _o.KEYS = this.bb!.createObjList<CryptoKey, CryptoKeyT>(this.KEYS.bind(this), this.keysLength());
  _o.MULTIFORMAT_ADDRESS = this.bb!.createScalarList<string>(this.MULTIFORMAT_ADDRESS.bind(this), this.multiformatAddressLength());
  _o.attributesType = this.attributesType();
  _o.ATTRIBUTES = (() => {
      const temp = unionToSpecificAttributes(this.attributesType(), this.ATTRIBUTES.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class EPMT implements flatbuffers.IGeneratedObject {
constructor(
  public NAME: string|Uint8Array|null = null,
  public ALTERNATE_NAMES: (string)[] = [],
  public EMAIL: string|Uint8Array|null = null,
  public TELEPHONE: string|Uint8Array|null = null,
  public KEYS: (CryptoKeyT)[] = [],
  public MULTIFORMAT_ADDRESS: (string)[] = [],
  public attributesType: SpecificAttributes = SpecificAttributes.NONE,
  public ATTRIBUTES: OrganizationAttributesT|PersonAttributesT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const NAME = (this.NAME !== null ? builder.createString(this.NAME!) : 0);
  const ALTERNATE_NAMES = EPM.createAlternateNamesVector(builder, builder.createObjectOffsetList(this.ALTERNATE_NAMES));
  const EMAIL = (this.EMAIL !== null ? builder.createString(this.EMAIL!) : 0);
  const TELEPHONE = (this.TELEPHONE !== null ? builder.createString(this.TELEPHONE!) : 0);
  const KEYS = EPM.createKeysVector(builder, builder.createObjectOffsetList(this.KEYS));
  const MULTIFORMAT_ADDRESS = EPM.createMultiformatAddressVector(builder, builder.createObjectOffsetList(this.MULTIFORMAT_ADDRESS));
  const ATTRIBUTES = builder.createObjectOffset(this.ATTRIBUTES);

  return EPM.createEPM(builder,
    NAME,
    ALTERNATE_NAMES,
    EMAIL,
    TELEPHONE,
    KEYS,
    MULTIFORMAT_ADDRESS,
    this.attributesType,
    ATTRIBUTES
  );
}
}
