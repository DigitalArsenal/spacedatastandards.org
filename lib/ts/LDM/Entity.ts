// automatically generated by the FlatBuffers compiler, do not modify

import { Organization, OrganizationT } from './Organization.js';
import { Person, PersonT } from './Person.js';


/**
 * Union type for Entity, which can be either a Person or an Organization
 */
export enum Entity {
  NONE = 0,
  Person = 1,
  Organization = 2
}

export function unionToEntity(
  type: Entity,
  accessor: (obj:Organization|Person) => Organization|Person|null
): Organization|Person|null {
  switch(Entity[type]) {
    case 'NONE': return null; 
    case 'Person': return accessor(new Person())! as Person;
    case 'Organization': return accessor(new Organization())! as Organization;
    default: return null;
  }
}

export function unionListToEntity(
  type: Entity, 
  accessor: (index: number, obj:Organization|Person) => Organization|Person|null, 
  index: number
): Organization|Person|null {
  switch(Entity[type]) {
    case 'NONE': return null; 
    case 'Person': return accessor(index, new Person())! as Person;
    case 'Organization': return accessor(index, new Organization())! as Organization;
    default: return null;
  }
}
