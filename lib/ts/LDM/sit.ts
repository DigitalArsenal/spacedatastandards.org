// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Geometry, GeometryT } from './geometry.js';
import { IDM, IDMT } from './idm.js';
import { SiteType } from './site-type.js';


/**
 * Site Information Message
 */
export class SIT implements flatbuffers.IUnpackableObject<SITT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SIT {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSIT(bb:flatbuffers.ByteBuffer, obj?:SIT):SIT {
  return (obj || new SIT()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSIT(bb:flatbuffers.ByteBuffer, obj?:SIT):SIT {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SIT()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$SIT');
}

/**
 * Unique identifier for the site, BE_NUMBER
 */
id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the site
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Abbreviation
 */
abbreviation():string|null
abbreviation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
abbreviation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Site type as defined in SiteType enum
 */
siteType():SiteType {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SiteType.LAUNCH_SITE;
}

/**
 * Site type CATCODE
 */
catcode():string|null
catcode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
catcode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Network identifier
 */
network():string|null
network(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
network(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Latitude of the site
 */
latitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Longitude of the site
 */
longitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Altitude of the site
 */
altitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Geometry of the site
 */
geometry(obj?:Geometry):Geometry|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new Geometry()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Center point geometry coordinates
 */
centerPointGeometry(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

centerPointGeometryLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

centerPointGeometryArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Classification marking of the site
 */
classification():string|null
classification(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classification(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * CTR ISO 3166 Numeric code as string
 */
ctrId():string|null
ctrId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ctrId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the user who created the site data
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of the site
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * URL for the 3D model of the site
 */
modelUrl():string|null
modelUrl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modelUrl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the site data
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Indicates if the site is taskable
 */
taskable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Operational status of the site (e.g., active, inactive, under construction)
 */
operationalStatus():string|null
operationalStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
operationalStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Date of establishment
 */
establishmentDate():string|null
establishmentDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
establishmentDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Contact information for the site
 */
contactInfo():string|null
contactInfo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
contactInfo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Environmental impact or considerations
 */
environmentalImpact():string|null
environmentalImpact(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
environmentalImpact(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Accessibility and infrastructure details
 */
accessibilityInfra():string|null
accessibilityInfra(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
accessibilityInfra(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Vector of Integrated Devices (IDM)
 */
integratedDevices(index: number, obj?:IDM):IDM|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? (obj || new IDM()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

integratedDevicesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSIT(builder:flatbuffers.Builder) {
  builder.startObject(24);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addAbbreviation(builder:flatbuffers.Builder, abbreviationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, abbreviationOffset, 0);
}

static addSiteType(builder:flatbuffers.Builder, siteType:SiteType) {
  builder.addFieldInt8(3, siteType, SiteType.LAUNCH_SITE);
}

static addCatcode(builder:flatbuffers.Builder, catcodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, catcodeOffset, 0);
}

static addNetwork(builder:flatbuffers.Builder, networkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, networkOffset, 0);
}

static addLatitude(builder:flatbuffers.Builder, latitude:number) {
  builder.addFieldFloat32(6, latitude, 0.0);
}

static addLongitude(builder:flatbuffers.Builder, longitude:number) {
  builder.addFieldFloat32(7, longitude, 0.0);
}

static addAltitude(builder:flatbuffers.Builder, altitude:number) {
  builder.addFieldFloat32(8, altitude, 0.0);
}

static addGeometry(builder:flatbuffers.Builder, geometryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, geometryOffset, 0);
}

static addCenterPointGeometry(builder:flatbuffers.Builder, centerPointGeometryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, centerPointGeometryOffset, 0);
}

static createCenterPointGeometryVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createCenterPointGeometryVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createCenterPointGeometryVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startCenterPointGeometryVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addClassification(builder:flatbuffers.Builder, classificationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, classificationOffset, 0);
}

static addCtrId(builder:flatbuffers.Builder, ctrIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, ctrIdOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, createdByOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, descriptionOffset, 0);
}

static addModelUrl(builder:flatbuffers.Builder, modelUrlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, modelUrlOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, sourceOffset, 0);
}

static addTaskable(builder:flatbuffers.Builder, taskable:boolean) {
  builder.addFieldInt8(17, +taskable, +false);
}

static addOperationalStatus(builder:flatbuffers.Builder, operationalStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, operationalStatusOffset, 0);
}

static addEstablishmentDate(builder:flatbuffers.Builder, establishmentDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, establishmentDateOffset, 0);
}

static addContactInfo(builder:flatbuffers.Builder, contactInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, contactInfoOffset, 0);
}

static addEnvironmentalImpact(builder:flatbuffers.Builder, environmentalImpactOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, environmentalImpactOffset, 0);
}

static addAccessibilityInfra(builder:flatbuffers.Builder, accessibilityInfraOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, accessibilityInfraOffset, 0);
}

static addIntegratedDevices(builder:flatbuffers.Builder, integratedDevicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, integratedDevicesOffset, 0);
}

static createIntegratedDevicesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startIntegratedDevicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSIT(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSITBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$SIT');
}

static finishSizePrefixedSITBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$SIT', true);
}


unpack(): SITT {
  return new SITT(
    this.id(),
    this.name(),
    this.abbreviation(),
    this.siteType(),
    this.catcode(),
    this.network(),
    this.latitude(),
    this.longitude(),
    this.altitude(),
    (this.geometry() !== null ? this.geometry()!.unpack() : null),
    this.bb!.createScalarList<number>(this.centerPointGeometry.bind(this), this.centerPointGeometryLength()),
    this.classification(),
    this.ctrId(),
    this.createdBy(),
    this.description(),
    this.modelUrl(),
    this.source(),
    this.taskable(),
    this.operationalStatus(),
    this.establishmentDate(),
    this.contactInfo(),
    this.environmentalImpact(),
    this.accessibilityInfra(),
    this.bb!.createObjList<IDM, IDMT>(this.integratedDevices.bind(this), this.integratedDevicesLength())
  );
}


unpackTo(_o: SITT): void {
  _o.id = this.id();
  _o.name = this.name();
  _o.abbreviation = this.abbreviation();
  _o.siteType = this.siteType();
  _o.catcode = this.catcode();
  _o.network = this.network();
  _o.latitude = this.latitude();
  _o.longitude = this.longitude();
  _o.altitude = this.altitude();
  _o.geometry = (this.geometry() !== null ? this.geometry()!.unpack() : null);
  _o.centerPointGeometry = this.bb!.createScalarList<number>(this.centerPointGeometry.bind(this), this.centerPointGeometryLength());
  _o.classification = this.classification();
  _o.ctrId = this.ctrId();
  _o.createdBy = this.createdBy();
  _o.description = this.description();
  _o.modelUrl = this.modelUrl();
  _o.source = this.source();
  _o.taskable = this.taskable();
  _o.operationalStatus = this.operationalStatus();
  _o.establishmentDate = this.establishmentDate();
  _o.contactInfo = this.contactInfo();
  _o.environmentalImpact = this.environmentalImpact();
  _o.accessibilityInfra = this.accessibilityInfra();
  _o.integratedDevices = this.bb!.createObjList<IDM, IDMT>(this.integratedDevices.bind(this), this.integratedDevicesLength());
}
}

export class SITT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null,
  public abbreviation: string|Uint8Array|null = null,
  public siteType: SiteType = SiteType.LAUNCH_SITE,
  public catcode: string|Uint8Array|null = null,
  public network: string|Uint8Array|null = null,
  public latitude: number = 0.0,
  public longitude: number = 0.0,
  public altitude: number = 0.0,
  public geometry: GeometryT|null = null,
  public centerPointGeometry: (number)[] = [],
  public classification: string|Uint8Array|null = null,
  public ctrId: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public description: string|Uint8Array|null = null,
  public modelUrl: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public taskable: boolean = false,
  public operationalStatus: string|Uint8Array|null = null,
  public establishmentDate: string|Uint8Array|null = null,
  public contactInfo: string|Uint8Array|null = null,
  public environmentalImpact: string|Uint8Array|null = null,
  public accessibilityInfra: string|Uint8Array|null = null,
  public integratedDevices: (IDMT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const abbreviation = (this.abbreviation !== null ? builder.createString(this.abbreviation!) : 0);
  const catcode = (this.catcode !== null ? builder.createString(this.catcode!) : 0);
  const network = (this.network !== null ? builder.createString(this.network!) : 0);
  const geometry = (this.geometry !== null ? this.geometry!.pack(builder) : 0);
  const centerPointGeometry = SIT.createCenterPointGeometryVector(builder, this.centerPointGeometry);
  const classification = (this.classification !== null ? builder.createString(this.classification!) : 0);
  const ctrId = (this.ctrId !== null ? builder.createString(this.ctrId!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const modelUrl = (this.modelUrl !== null ? builder.createString(this.modelUrl!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const operationalStatus = (this.operationalStatus !== null ? builder.createString(this.operationalStatus!) : 0);
  const establishmentDate = (this.establishmentDate !== null ? builder.createString(this.establishmentDate!) : 0);
  const contactInfo = (this.contactInfo !== null ? builder.createString(this.contactInfo!) : 0);
  const environmentalImpact = (this.environmentalImpact !== null ? builder.createString(this.environmentalImpact!) : 0);
  const accessibilityInfra = (this.accessibilityInfra !== null ? builder.createString(this.accessibilityInfra!) : 0);
  const integratedDevices = SIT.createIntegratedDevicesVector(builder, builder.createObjectOffsetList(this.integratedDevices));

  SIT.startSIT(builder);
  SIT.addId(builder, id);
  SIT.addName(builder, name);
  SIT.addAbbreviation(builder, abbreviation);
  SIT.addSiteType(builder, this.siteType);
  SIT.addCatcode(builder, catcode);
  SIT.addNetwork(builder, network);
  SIT.addLatitude(builder, this.latitude);
  SIT.addLongitude(builder, this.longitude);
  SIT.addAltitude(builder, this.altitude);
  SIT.addGeometry(builder, geometry);
  SIT.addCenterPointGeometry(builder, centerPointGeometry);
  SIT.addClassification(builder, classification);
  SIT.addCtrId(builder, ctrId);
  SIT.addCreatedBy(builder, createdBy);
  SIT.addDescription(builder, description);
  SIT.addModelUrl(builder, modelUrl);
  SIT.addSource(builder, source);
  SIT.addTaskable(builder, this.taskable);
  SIT.addOperationalStatus(builder, operationalStatus);
  SIT.addEstablishmentDate(builder, establishmentDate);
  SIT.addContactInfo(builder, contactInfo);
  SIT.addEnvironmentalImpact(builder, environmentalImpact);
  SIT.addAccessibilityInfra(builder, accessibilityInfra);
  SIT.addIntegratedDevices(builder, integratedDevices);

  return SIT.endSIT(builder);
}
}
