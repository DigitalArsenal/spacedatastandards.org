// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ephemerisDataBlock, ephemerisDataBlockT } from './ephemeris-data-block.js';


/**
 * Orbit Ephemeris Message
 */
export class OEM implements flatbuffers.IUnpackableObject<OEMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OEM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOEM(bb:flatbuffers.ByteBuffer, obj?:OEM):OEM {
  return (obj || new OEM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOEM(bb:flatbuffers.ByteBuffer, obj?:OEM):OEM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OEM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$OEM');
}

/**
 * OEM Header
 * Classification marking of the data in IC/CAPCO Portion-marked format.
 */
classification():string|null
classification(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classification(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * OEM Version
 */
ccsdsOemVers():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Creation Date
 */
creationDate():string|null
creationDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
creationDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originator
 */
originator():string|null
originator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Array of ephemeris data blocks
 */
ephemerisDataBlock(index: number, obj?:ephemerisDataBlock):ephemerisDataBlock|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new ephemerisDataBlock()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

ephemerisDataBlockLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startOEM(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addClassification(builder:flatbuffers.Builder, classificationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, classificationOffset, 0);
}

static addCcsdsOemVers(builder:flatbuffers.Builder, ccsdsOemVers:number) {
  builder.addFieldFloat64(1, ccsdsOemVers, 0.0);
}

static addCreationDate(builder:flatbuffers.Builder, creationDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, creationDateOffset, 0);
}

static addOriginator(builder:flatbuffers.Builder, originatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, originatorOffset, 0);
}

static addEphemerisDataBlock(builder:flatbuffers.Builder, ephemerisDataBlockOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, ephemerisDataBlockOffset, 0);
}

static createEphemerisDataBlockVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEphemerisDataBlockVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endOEM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOEMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$OEM');
}

static finishSizePrefixedOEMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$OEM', true);
}

static createOEM(builder:flatbuffers.Builder, classificationOffset:flatbuffers.Offset, ccsdsOemVers:number, creationDateOffset:flatbuffers.Offset, originatorOffset:flatbuffers.Offset, ephemerisDataBlockOffset:flatbuffers.Offset):flatbuffers.Offset {
  OEM.startOEM(builder);
  OEM.addClassification(builder, classificationOffset);
  OEM.addCcsdsOemVers(builder, ccsdsOemVers);
  OEM.addCreationDate(builder, creationDateOffset);
  OEM.addOriginator(builder, originatorOffset);
  OEM.addEphemerisDataBlock(builder, ephemerisDataBlockOffset);
  return OEM.endOEM(builder);
}

unpack(): OEMT {
  return new OEMT(
    this.classification(),
    this.ccsdsOemVers(),
    this.creationDate(),
    this.originator(),
    this.bb!.createObjList<ephemerisDataBlock, ephemerisDataBlockT>(this.ephemerisDataBlock.bind(this), this.ephemerisDataBlockLength())
  );
}


unpackTo(_o: OEMT): void {
  _o.classification = this.classification();
  _o.ccsdsOemVers = this.ccsdsOemVers();
  _o.creationDate = this.creationDate();
  _o.originator = this.originator();
  _o.ephemerisDataBlock = this.bb!.createObjList<ephemerisDataBlock, ephemerisDataBlockT>(this.ephemerisDataBlock.bind(this), this.ephemerisDataBlockLength());
}
}

export class OEMT implements flatbuffers.IGeneratedObject {
constructor(
  public classification: string|Uint8Array|null = null,
  public ccsdsOemVers: number = 0.0,
  public creationDate: string|Uint8Array|null = null,
  public originator: string|Uint8Array|null = null,
  public ephemerisDataBlock: (ephemerisDataBlockT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const classification = (this.classification !== null ? builder.createString(this.classification!) : 0);
  const creationDate = (this.creationDate !== null ? builder.createString(this.creationDate!) : 0);
  const originator = (this.originator !== null ? builder.createString(this.originator!) : 0);
  const ephemerisDataBlock = OEM.createEphemerisDataBlockVector(builder, builder.createObjectOffsetList(this.ephemerisDataBlock));

  return OEM.createOEM(builder,
    classification,
    this.ccsdsOemVers,
    creationDate,
    originator,
    ephemerisDataBlock
  );
}
}
