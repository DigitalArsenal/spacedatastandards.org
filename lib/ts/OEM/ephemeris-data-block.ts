// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CAT, CATT } from './cat.js';
import { covarianceMatrixLine, covarianceMatrixLineT } from './covariance-matrix-line.js';
import { ephemerisDataLine, ephemerisDataLineT } from './ephemeris-data-line.js';
import { refFrame } from './ref-frame.js';
import { timeSystem } from './time-system.js';


/**
 * OEM Ephemeris Data Block
 */
export class ephemerisDataBlock implements flatbuffers.IUnpackableObject<ephemerisDataBlockT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ephemerisDataBlock {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsephemerisDataBlock(bb:flatbuffers.ByteBuffer, obj?:ephemerisDataBlock):ephemerisDataBlock {
  return (obj || new ephemerisDataBlock()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsephemerisDataBlock(bb:flatbuffers.ByteBuffer, obj?:ephemerisDataBlock):ephemerisDataBlock {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ephemerisDataBlock()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Plain-Text Comment
 */
comment():string|null
comment(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
comment(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite name for the first object
 */
object(obj?:CAT):CAT|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new CAT()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Origin of reference frame (EARTH, MARS, MOON, etc.)
 */
centerName():string|null
centerName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
centerName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the reference frame (TEME, EME2000, etc.)
 */
referenceFrame():refFrame {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : refFrame.ECEF;
}

/**
 * Epoch of reference frame, if not intrinsic to the definition of the reference frame
 */
referenceFrameEpoch():string|null
referenceFrameEpoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
referenceFrameEpoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Reference frame for the covariance matrix
 */
covReferenceFrame():refFrame {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : refFrame.ECEF;
}

/**
 * Time system used for the orbit state and covariance matrix. (UTC)
 */
timeSystem():timeSystem {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : timeSystem.GMST;
}

/**
 * Start of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional start USEABLE time span covered by ephemeris data (ISO 8601)
 */
useableStartTime():string|null
useableStartTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
useableStartTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Optional end of USEABLE time span covered by ephemeris data (ISO 8601)
 */
useableStopTime():string|null
useableStopTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
useableStopTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * End of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)
 */
stopTime():string|null
stopTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stopTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Step size in seconds separating the epochs of each ephemeris data row
 */
stepSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Recommended interpolation method for ephemeris data (Hermite, Linear, Lagrange, etc.)
 */
interpolation():string|null
interpolation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
interpolation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Recommended interpolation degree for ephemeris data
 */
interpolationDegree():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

/**
 * Array of ephemeris data lines
 */
ephemerisDataLines(index: number, obj?:ephemerisDataLine):ephemerisDataLine|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? (obj || new ephemerisDataLine()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

ephemerisDataLinesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Array of covariance matrix lines
 */
covarianceMatrixLines(index: number, obj?:covarianceMatrixLine):covarianceMatrixLine|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? (obj || new covarianceMatrixLine()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

covarianceMatrixLinesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startephemerisDataBlock(builder:flatbuffers.Builder) {
  builder.startObject(16);
}

static addComment(builder:flatbuffers.Builder, commentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, commentOffset, 0);
}

static addObject(builder:flatbuffers.Builder, objectOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, objectOffset, 0);
}

static addCenterName(builder:flatbuffers.Builder, centerNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, centerNameOffset, 0);
}

static addReferenceFrame(builder:flatbuffers.Builder, referenceFrame:refFrame) {
  builder.addFieldInt8(3, referenceFrame, refFrame.ECEF);
}

static addReferenceFrameEpoch(builder:flatbuffers.Builder, referenceFrameEpochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, referenceFrameEpochOffset, 0);
}

static addCovReferenceFrame(builder:flatbuffers.Builder, covReferenceFrame:refFrame) {
  builder.addFieldInt8(5, covReferenceFrame, refFrame.ECEF);
}

static addTimeSystem(builder:flatbuffers.Builder, timeSystem:timeSystem) {
  builder.addFieldInt8(6, timeSystem, timeSystem.GMST);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, startTimeOffset, 0);
}

static addUseableStartTime(builder:flatbuffers.Builder, useableStartTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, useableStartTimeOffset, 0);
}

static addUseableStopTime(builder:flatbuffers.Builder, useableStopTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, useableStopTimeOffset, 0);
}

static addStopTime(builder:flatbuffers.Builder, stopTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, stopTimeOffset, 0);
}

static addStepSize(builder:flatbuffers.Builder, stepSize:number) {
  builder.addFieldFloat64(11, stepSize, 0.0);
}

static addInterpolation(builder:flatbuffers.Builder, interpolationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, interpolationOffset, 0);
}

static addInterpolationDegree(builder:flatbuffers.Builder, interpolationDegree:number) {
  builder.addFieldInt32(13, interpolationDegree, 0);
}

static addEphemerisDataLines(builder:flatbuffers.Builder, ephemerisDataLinesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, ephemerisDataLinesOffset, 0);
}

static createEphemerisDataLinesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEphemerisDataLinesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCovarianceMatrixLines(builder:flatbuffers.Builder, covarianceMatrixLinesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, covarianceMatrixLinesOffset, 0);
}

static createCovarianceMatrixLinesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCovarianceMatrixLinesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endephemerisDataBlock(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): ephemerisDataBlockT {
  return new ephemerisDataBlockT(
    this.comment(),
    (this.object() !== null ? this.object()!.unpack() : null),
    this.centerName(),
    this.referenceFrame(),
    this.referenceFrameEpoch(),
    this.covReferenceFrame(),
    this.timeSystem(),
    this.startTime(),
    this.useableStartTime(),
    this.useableStopTime(),
    this.stopTime(),
    this.stepSize(),
    this.interpolation(),
    this.interpolationDegree(),
    this.bb!.createObjList<ephemerisDataLine, ephemerisDataLineT>(this.ephemerisDataLines.bind(this), this.ephemerisDataLinesLength()),
    this.bb!.createObjList<covarianceMatrixLine, covarianceMatrixLineT>(this.covarianceMatrixLines.bind(this), this.covarianceMatrixLinesLength())
  );
}


unpackTo(_o: ephemerisDataBlockT): void {
  _o.comment = this.comment();
  _o.object = (this.object() !== null ? this.object()!.unpack() : null);
  _o.centerName = this.centerName();
  _o.referenceFrame = this.referenceFrame();
  _o.referenceFrameEpoch = this.referenceFrameEpoch();
  _o.covReferenceFrame = this.covReferenceFrame();
  _o.timeSystem = this.timeSystem();
  _o.startTime = this.startTime();
  _o.useableStartTime = this.useableStartTime();
  _o.useableStopTime = this.useableStopTime();
  _o.stopTime = this.stopTime();
  _o.stepSize = this.stepSize();
  _o.interpolation = this.interpolation();
  _o.interpolationDegree = this.interpolationDegree();
  _o.ephemerisDataLines = this.bb!.createObjList<ephemerisDataLine, ephemerisDataLineT>(this.ephemerisDataLines.bind(this), this.ephemerisDataLinesLength());
  _o.covarianceMatrixLines = this.bb!.createObjList<covarianceMatrixLine, covarianceMatrixLineT>(this.covarianceMatrixLines.bind(this), this.covarianceMatrixLinesLength());
}
}

export class ephemerisDataBlockT implements flatbuffers.IGeneratedObject {
constructor(
  public comment: string|Uint8Array|null = null,
  public object: CATT|null = null,
  public centerName: string|Uint8Array|null = null,
  public referenceFrame: refFrame = refFrame.ECEF,
  public referenceFrameEpoch: string|Uint8Array|null = null,
  public covReferenceFrame: refFrame = refFrame.ECEF,
  public timeSystem: timeSystem = timeSystem.GMST,
  public startTime: string|Uint8Array|null = null,
  public useableStartTime: string|Uint8Array|null = null,
  public useableStopTime: string|Uint8Array|null = null,
  public stopTime: string|Uint8Array|null = null,
  public stepSize: number = 0.0,
  public interpolation: string|Uint8Array|null = null,
  public interpolationDegree: number = 0,
  public ephemerisDataLines: (ephemerisDataLineT)[] = [],
  public covarianceMatrixLines: (covarianceMatrixLineT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const comment = (this.comment !== null ? builder.createString(this.comment!) : 0);
  const object = (this.object !== null ? this.object!.pack(builder) : 0);
  const centerName = (this.centerName !== null ? builder.createString(this.centerName!) : 0);
  const referenceFrameEpoch = (this.referenceFrameEpoch !== null ? builder.createString(this.referenceFrameEpoch!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const useableStartTime = (this.useableStartTime !== null ? builder.createString(this.useableStartTime!) : 0);
  const useableStopTime = (this.useableStopTime !== null ? builder.createString(this.useableStopTime!) : 0);
  const stopTime = (this.stopTime !== null ? builder.createString(this.stopTime!) : 0);
  const interpolation = (this.interpolation !== null ? builder.createString(this.interpolation!) : 0);
  const ephemerisDataLines = ephemerisDataBlock.createEphemerisDataLinesVector(builder, builder.createObjectOffsetList(this.ephemerisDataLines));
  const covarianceMatrixLines = ephemerisDataBlock.createCovarianceMatrixLinesVector(builder, builder.createObjectOffsetList(this.covarianceMatrixLines));

  ephemerisDataBlock.startephemerisDataBlock(builder);
  ephemerisDataBlock.addComment(builder, comment);
  ephemerisDataBlock.addObject(builder, object);
  ephemerisDataBlock.addCenterName(builder, centerName);
  ephemerisDataBlock.addReferenceFrame(builder, this.referenceFrame);
  ephemerisDataBlock.addReferenceFrameEpoch(builder, referenceFrameEpoch);
  ephemerisDataBlock.addCovReferenceFrame(builder, this.covReferenceFrame);
  ephemerisDataBlock.addTimeSystem(builder, this.timeSystem);
  ephemerisDataBlock.addStartTime(builder, startTime);
  ephemerisDataBlock.addUseableStartTime(builder, useableStartTime);
  ephemerisDataBlock.addUseableStopTime(builder, useableStopTime);
  ephemerisDataBlock.addStopTime(builder, stopTime);
  ephemerisDataBlock.addStepSize(builder, this.stepSize);
  ephemerisDataBlock.addInterpolation(builder, interpolation);
  ephemerisDataBlock.addInterpolationDegree(builder, this.interpolationDegree);
  ephemerisDataBlock.addEphemerisDataLines(builder, ephemerisDataLines);
  ephemerisDataBlock.addCovarianceMatrixLines(builder, covarianceMatrixLines);

  return ephemerisDataBlock.endephemerisDataBlock(builder);
}
}
