// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { anomalyType } from './anomalyType.js';


/**
 * Keplerian Elements
 */
export class keplerianElements implements flatbuffers.IUnpackableObject<keplerianElementsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):keplerianElements {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAskeplerianElements(bb:flatbuffers.ByteBuffer, obj?:keplerianElements):keplerianElements {
  return (obj || new keplerianElements()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAskeplerianElements(bb:flatbuffers.ByteBuffer, obj?:keplerianElements):keplerianElements {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new keplerianElements()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

SEMI_MAJOR_AXIS():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

ECCENTRICITY():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

INCLINATION():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

RA_OF_ASC_NODE():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

ARG_OF_PERICENTER():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

ANOMALY_TYPE():anomalyType {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : anomalyType.TRUE_ANOMALY;
}

ANOMALY():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startkeplerianElements(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addSemiMajorAxis(builder:flatbuffers.Builder, SEMI_MAJOR_AXIS:number) {
  builder.addFieldFloat64(0, SEMI_MAJOR_AXIS, 0.0);
}

static addEccentricity(builder:flatbuffers.Builder, ECCENTRICITY:number) {
  builder.addFieldFloat64(1, ECCENTRICITY, 0.0);
}

static addInclination(builder:flatbuffers.Builder, INCLINATION:number) {
  builder.addFieldFloat64(2, INCLINATION, 0.0);
}

static addRaOfAscNode(builder:flatbuffers.Builder, RA_OF_ASC_NODE:number) {
  builder.addFieldFloat64(3, RA_OF_ASC_NODE, 0.0);
}

static addArgOfPericenter(builder:flatbuffers.Builder, ARG_OF_PERICENTER:number) {
  builder.addFieldFloat64(4, ARG_OF_PERICENTER, 0.0);
}

static addAnomalyType(builder:flatbuffers.Builder, ANOMALY_TYPE:anomalyType) {
  builder.addFieldInt8(5, ANOMALY_TYPE, anomalyType.TRUE_ANOMALY);
}

static addAnomaly(builder:flatbuffers.Builder, ANOMALY:number) {
  builder.addFieldFloat64(6, ANOMALY, 0.0);
}

static endkeplerianElements(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createkeplerianElements(builder:flatbuffers.Builder, SEMI_MAJOR_AXIS:number, ECCENTRICITY:number, INCLINATION:number, RA_OF_ASC_NODE:number, ARG_OF_PERICENTER:number, ANOMALY_TYPE:anomalyType, ANOMALY:number):flatbuffers.Offset {
  keplerianElements.startkeplerianElements(builder);
  keplerianElements.addSemiMajorAxis(builder, SEMI_MAJOR_AXIS);
  keplerianElements.addEccentricity(builder, ECCENTRICITY);
  keplerianElements.addInclination(builder, INCLINATION);
  keplerianElements.addRaOfAscNode(builder, RA_OF_ASC_NODE);
  keplerianElements.addArgOfPericenter(builder, ARG_OF_PERICENTER);
  keplerianElements.addAnomalyType(builder, ANOMALY_TYPE);
  keplerianElements.addAnomaly(builder, ANOMALY);
  return keplerianElements.endkeplerianElements(builder);
}

unpack(): keplerianElementsT {
  return new keplerianElementsT(
    this.SEMI_MAJOR_AXIS(),
    this.ECCENTRICITY(),
    this.INCLINATION(),
    this.RA_OF_ASC_NODE(),
    this.ARG_OF_PERICENTER(),
    this.ANOMALY_TYPE(),
    this.ANOMALY()
  );
}


unpackTo(_o: keplerianElementsT): void {
  _o.SEMI_MAJOR_AXIS = this.SEMI_MAJOR_AXIS();
  _o.ECCENTRICITY = this.ECCENTRICITY();
  _o.INCLINATION = this.INCLINATION();
  _o.RA_OF_ASC_NODE = this.RA_OF_ASC_NODE();
  _o.ARG_OF_PERICENTER = this.ARG_OF_PERICENTER();
  _o.ANOMALY_TYPE = this.ANOMALY_TYPE();
  _o.ANOMALY = this.ANOMALY();
}
}

export class keplerianElementsT implements flatbuffers.IGeneratedObject {
constructor(
  public SEMI_MAJOR_AXIS: number = 0.0,
  public ECCENTRICITY: number = 0.0,
  public INCLINATION: number = 0.0,
  public RA_OF_ASC_NODE: number = 0.0,
  public ARG_OF_PERICENTER: number = 0.0,
  public ANOMALY_TYPE: anomalyType = anomalyType.TRUE_ANOMALY,
  public ANOMALY: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return keplerianElements.createkeplerianElements(builder,
    this.SEMI_MAJOR_AXIS,
    this.ECCENTRICITY,
    this.INCLINATION,
    this.RA_OF_ASC_NODE,
    this.ARG_OF_PERICENTER,
    this.ANOMALY_TYPE,
    this.ANOMALY
  );
}
}
