// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { anomalyType } from './anomaly-type.js';


/**
 * Keplerian Elements
 */
export class keplerianElements implements flatbuffers.IUnpackableObject<keplerianElementsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):keplerianElements {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAskeplerianElements(bb:flatbuffers.ByteBuffer, obj?:keplerianElements):keplerianElements {
  return (obj || new keplerianElements()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAskeplerianElements(bb:flatbuffers.ByteBuffer, obj?:keplerianElements):keplerianElements {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new keplerianElements()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

semiMajorAxis():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

eccentricity():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

inclination():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

raOfAscNode():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

argOfPericenter():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

anomalyType():anomalyType {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : anomalyType.TRUE_ANOMALY;
}

anomaly():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startkeplerianElements(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addSemiMajorAxis(builder:flatbuffers.Builder, semiMajorAxis:number) {
  builder.addFieldFloat64(0, semiMajorAxis, 0.0);
}

static addEccentricity(builder:flatbuffers.Builder, eccentricity:number) {
  builder.addFieldFloat64(1, eccentricity, 0.0);
}

static addInclination(builder:flatbuffers.Builder, inclination:number) {
  builder.addFieldFloat64(2, inclination, 0.0);
}

static addRaOfAscNode(builder:flatbuffers.Builder, raOfAscNode:number) {
  builder.addFieldFloat64(3, raOfAscNode, 0.0);
}

static addArgOfPericenter(builder:flatbuffers.Builder, argOfPericenter:number) {
  builder.addFieldFloat64(4, argOfPericenter, 0.0);
}

static addAnomalyType(builder:flatbuffers.Builder, anomalyType:anomalyType) {
  builder.addFieldInt8(5, anomalyType, anomalyType.TRUE_ANOMALY);
}

static addAnomaly(builder:flatbuffers.Builder, anomaly:number) {
  builder.addFieldFloat64(6, anomaly, 0.0);
}

static endkeplerianElements(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createkeplerianElements(builder:flatbuffers.Builder, semiMajorAxis:number, eccentricity:number, inclination:number, raOfAscNode:number, argOfPericenter:number, anomalyType:anomalyType, anomaly:number):flatbuffers.Offset {
  keplerianElements.startkeplerianElements(builder);
  keplerianElements.addSemiMajorAxis(builder, semiMajorAxis);
  keplerianElements.addEccentricity(builder, eccentricity);
  keplerianElements.addInclination(builder, inclination);
  keplerianElements.addRaOfAscNode(builder, raOfAscNode);
  keplerianElements.addArgOfPericenter(builder, argOfPericenter);
  keplerianElements.addAnomalyType(builder, anomalyType);
  keplerianElements.addAnomaly(builder, anomaly);
  return keplerianElements.endkeplerianElements(builder);
}

unpack(): keplerianElementsT {
  return new keplerianElementsT(
    this.semiMajorAxis(),
    this.eccentricity(),
    this.inclination(),
    this.raOfAscNode(),
    this.argOfPericenter(),
    this.anomalyType(),
    this.anomaly()
  );
}


unpackTo(_o: keplerianElementsT): void {
  _o.semiMajorAxis = this.semiMajorAxis();
  _o.eccentricity = this.eccentricity();
  _o.inclination = this.inclination();
  _o.raOfAscNode = this.raOfAscNode();
  _o.argOfPericenter = this.argOfPericenter();
  _o.anomalyType = this.anomalyType();
  _o.anomaly = this.anomaly();
}
}

export class keplerianElementsT implements flatbuffers.IGeneratedObject {
constructor(
  public semiMajorAxis: number = 0.0,
  public eccentricity: number = 0.0,
  public inclination: number = 0.0,
  public raOfAscNode: number = 0.0,
  public argOfPericenter: number = 0.0,
  public anomalyType: anomalyType = anomalyType.TRUE_ANOMALY,
  public anomaly: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return keplerianElements.createkeplerianElements(builder,
    this.semiMajorAxis,
    this.eccentricity,
    this.inclination,
    this.raOfAscNode,
    this.argOfPericenter,
    this.anomalyType,
    this.anomaly
  );
}
}
