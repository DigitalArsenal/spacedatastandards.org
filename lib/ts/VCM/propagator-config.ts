// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { propagatorType } from './propagator-type.js';
import { zonalHarmonic } from './zonal-harmonic.js';


/**
 * Propagator configuration structure to describe propagation settings
 */
export class propagatorConfig implements flatbuffers.IUnpackableObject<propagatorConfigT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):propagatorConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAspropagatorConfig(bb:flatbuffers.ByteBuffer, obj?:propagatorConfig):propagatorConfig {
  return (obj || new propagatorConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAspropagatorConfig(bb:flatbuffers.ByteBuffer, obj?:propagatorConfig):propagatorConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new propagatorConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

propagatorName():string|null
propagatorName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
propagatorName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

propagatorType():propagatorType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : propagatorType.NONE;
}

forceModels(index: number):string
forceModels(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
forceModels(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

forceModelsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

epoch():string|null
epoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
epoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

timeStep():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

zonalHarmonicTerms(index: number):zonalHarmonic|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

zonalHarmonicTermsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

zonalHarmonicTermsArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startpropagatorConfig(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addPropagatorName(builder:flatbuffers.Builder, propagatorNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, propagatorNameOffset, 0);
}

static addPropagatorType(builder:flatbuffers.Builder, propagatorType:propagatorType) {
  builder.addFieldInt8(1, propagatorType, propagatorType.NONE);
}

static addForceModels(builder:flatbuffers.Builder, forceModelsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, forceModelsOffset, 0);
}

static createForceModelsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startForceModelsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEpoch(builder:flatbuffers.Builder, epochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, epochOffset, 0);
}

static addTimeStep(builder:flatbuffers.Builder, timeStep:number) {
  builder.addFieldFloat64(4, timeStep, 0.0);
}

static addZonalHarmonicTerms(builder:flatbuffers.Builder, zonalHarmonicTermsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, zonalHarmonicTermsOffset, 0);
}

static createZonalHarmonicTermsVector(builder:flatbuffers.Builder, data:zonalHarmonic[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startZonalHarmonicTermsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endpropagatorConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createpropagatorConfig(builder:flatbuffers.Builder, propagatorNameOffset:flatbuffers.Offset, propagatorType:propagatorType, forceModelsOffset:flatbuffers.Offset, epochOffset:flatbuffers.Offset, timeStep:number, zonalHarmonicTermsOffset:flatbuffers.Offset):flatbuffers.Offset {
  propagatorConfig.startpropagatorConfig(builder);
  propagatorConfig.addPropagatorName(builder, propagatorNameOffset);
  propagatorConfig.addPropagatorType(builder, propagatorType);
  propagatorConfig.addForceModels(builder, forceModelsOffset);
  propagatorConfig.addEpoch(builder, epochOffset);
  propagatorConfig.addTimeStep(builder, timeStep);
  propagatorConfig.addZonalHarmonicTerms(builder, zonalHarmonicTermsOffset);
  return propagatorConfig.endpropagatorConfig(builder);
}

unpack(): propagatorConfigT {
  return new propagatorConfigT(
    this.propagatorName(),
    this.propagatorType(),
    this.bb!.createScalarList<string>(this.forceModels.bind(this), this.forceModelsLength()),
    this.epoch(),
    this.timeStep(),
    this.bb!.createScalarList<zonalHarmonic>(this.zonalHarmonicTerms.bind(this), this.zonalHarmonicTermsLength())
  );
}


unpackTo(_o: propagatorConfigT): void {
  _o.propagatorName = this.propagatorName();
  _o.propagatorType = this.propagatorType();
  _o.forceModels = this.bb!.createScalarList<string>(this.forceModels.bind(this), this.forceModelsLength());
  _o.epoch = this.epoch();
  _o.timeStep = this.timeStep();
  _o.zonalHarmonicTerms = this.bb!.createScalarList<zonalHarmonic>(this.zonalHarmonicTerms.bind(this), this.zonalHarmonicTermsLength());
}
}

export class propagatorConfigT implements flatbuffers.IGeneratedObject {
constructor(
  public propagatorName: string|Uint8Array|null = null,
  public propagatorType: propagatorType = propagatorType.NONE,
  public forceModels: (string)[] = [],
  public epoch: string|Uint8Array|null = null,
  public timeStep: number = 0.0,
  public zonalHarmonicTerms: (zonalHarmonic)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const propagatorName = (this.propagatorName !== null ? builder.createString(this.propagatorName!) : 0);
  const forceModels = propagatorConfig.createForceModelsVector(builder, builder.createObjectOffsetList(this.forceModels));
  const epoch = (this.epoch !== null ? builder.createString(this.epoch!) : 0);
  const zonalHarmonicTerms = propagatorConfig.createZonalHarmonicTermsVector(builder, this.zonalHarmonicTerms);

  return propagatorConfig.createpropagatorConfig(builder,
    propagatorName,
    this.propagatorType,
    forceModels,
    epoch,
    this.timeStep,
    zonalHarmonicTerms
  );
}
}
