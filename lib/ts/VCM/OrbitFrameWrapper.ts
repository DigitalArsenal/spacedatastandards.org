// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { OrbitFrame } from './OrbitFrame.js';


export class OrbitFrameWrapper implements flatbuffers.IUnpackableObject<OrbitFrameWrapperT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OrbitFrameWrapper {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOrbitFrameWrapper(bb:flatbuffers.ByteBuffer, obj?:OrbitFrameWrapper):OrbitFrameWrapper {
  return (obj || new OrbitFrameWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOrbitFrameWrapper(bb:flatbuffers.ByteBuffer, obj?:OrbitFrameWrapper):OrbitFrameWrapper {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OrbitFrameWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

frame():OrbitFrame {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OrbitFrame.EQW_INERTIAL;
}

static startOrbitFrameWrapper(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFrame(builder:flatbuffers.Builder, frame:OrbitFrame) {
  builder.addFieldInt8(0, frame, OrbitFrame.EQW_INERTIAL);
}

static endOrbitFrameWrapper(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOrbitFrameWrapper(builder:flatbuffers.Builder, frame:OrbitFrame):flatbuffers.Offset {
  OrbitFrameWrapper.startOrbitFrameWrapper(builder);
  OrbitFrameWrapper.addFrame(builder, frame);
  return OrbitFrameWrapper.endOrbitFrameWrapper(builder);
}

unpack(): OrbitFrameWrapperT {
  return new OrbitFrameWrapperT(
    this.frame()
  );
}


unpackTo(_o: OrbitFrameWrapperT): void {
  _o.frame = this.frame();
}
}

export class OrbitFrameWrapperT implements flatbuffers.IGeneratedObject {
constructor(
  public frame: OrbitFrame = OrbitFrame.EQW_INERTIAL
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return OrbitFrameWrapper.createOrbitFrameWrapper(builder,
    this.frame
  );
}
}
