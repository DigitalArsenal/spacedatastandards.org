// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CelestialFrame } from './CelestialFrame.js';


export class CelestialFrameWrapper implements flatbuffers.IUnpackableObject<CelestialFrameWrapperT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CelestialFrameWrapper {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCelestialFrameWrapper(bb:flatbuffers.ByteBuffer, obj?:CelestialFrameWrapper):CelestialFrameWrapper {
  return (obj || new CelestialFrameWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCelestialFrameWrapper(bb:flatbuffers.ByteBuffer, obj?:CelestialFrameWrapper):CelestialFrameWrapper {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CelestialFrameWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

frame():CelestialFrame {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : CelestialFrame.GCRF;
}

static startCelestialFrameWrapper(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFrame(builder:flatbuffers.Builder, frame:CelestialFrame) {
  builder.addFieldInt8(0, frame, CelestialFrame.GCRF);
}

static endCelestialFrameWrapper(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCelestialFrameWrapper(builder:flatbuffers.Builder, frame:CelestialFrame):flatbuffers.Offset {
  CelestialFrameWrapper.startCelestialFrameWrapper(builder);
  CelestialFrameWrapper.addFrame(builder, frame);
  return CelestialFrameWrapper.endCelestialFrameWrapper(builder);
}

unpack(): CelestialFrameWrapperT {
  return new CelestialFrameWrapperT(
    this.frame()
  );
}


unpackTo(_o: CelestialFrameWrapperT): void {
  _o.frame = this.frame();
}
}

export class CelestialFrameWrapperT implements flatbuffers.IGeneratedObject {
constructor(
  public frame: CelestialFrame = CelestialFrame.GCRF
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return CelestialFrameWrapper.createCelestialFrameWrapper(builder,
    this.frame
  );
}
}
