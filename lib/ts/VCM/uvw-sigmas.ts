// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * UVW Sigmas (Covariance matrix in UVW frame)
 */
export class uvwSigmas implements flatbuffers.IUnpackableObject<uvwSigmasT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):uvwSigmas {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsuvwSigmas(bb:flatbuffers.ByteBuffer, obj?:uvwSigmas):uvwSigmas {
  return (obj || new uvwSigmas()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsuvwSigmas(bb:flatbuffers.ByteBuffer, obj?:uvwSigmas):uvwSigmas {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new uvwSigmas()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

uSigma():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

vSigma():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

wSigma():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

udSigma():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

vdSigma():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

wdSigma():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startuvwSigmas(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addUSigma(builder:flatbuffers.Builder, uSigma:number) {
  builder.addFieldFloat64(0, uSigma, 0.0);
}

static addVSigma(builder:flatbuffers.Builder, vSigma:number) {
  builder.addFieldFloat64(1, vSigma, 0.0);
}

static addWSigma(builder:flatbuffers.Builder, wSigma:number) {
  builder.addFieldFloat64(2, wSigma, 0.0);
}

static addUdSigma(builder:flatbuffers.Builder, udSigma:number) {
  builder.addFieldFloat64(3, udSigma, 0.0);
}

static addVdSigma(builder:flatbuffers.Builder, vdSigma:number) {
  builder.addFieldFloat64(4, vdSigma, 0.0);
}

static addWdSigma(builder:flatbuffers.Builder, wdSigma:number) {
  builder.addFieldFloat64(5, wdSigma, 0.0);
}

static enduvwSigmas(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createuvwSigmas(builder:flatbuffers.Builder, uSigma:number, vSigma:number, wSigma:number, udSigma:number, vdSigma:number, wdSigma:number):flatbuffers.Offset {
  uvwSigmas.startuvwSigmas(builder);
  uvwSigmas.addUSigma(builder, uSigma);
  uvwSigmas.addVSigma(builder, vSigma);
  uvwSigmas.addWSigma(builder, wSigma);
  uvwSigmas.addUdSigma(builder, udSigma);
  uvwSigmas.addVdSigma(builder, vdSigma);
  uvwSigmas.addWdSigma(builder, wdSigma);
  return uvwSigmas.enduvwSigmas(builder);
}

unpack(): uvwSigmasT {
  return new uvwSigmasT(
    this.uSigma(),
    this.vSigma(),
    this.wSigma(),
    this.udSigma(),
    this.vdSigma(),
    this.wdSigma()
  );
}


unpackTo(_o: uvwSigmasT): void {
  _o.uSigma = this.uSigma();
  _o.vSigma = this.vSigma();
  _o.wSigma = this.wSigma();
  _o.udSigma = this.udSigma();
  _o.vdSigma = this.vdSigma();
  _o.wdSigma = this.wdSigma();
}
}

export class uvwSigmasT implements flatbuffers.IGeneratedObject {
constructor(
  public uSigma: number = 0.0,
  public vSigma: number = 0.0,
  public wSigma: number = 0.0,
  public udSigma: number = 0.0,
  public vdSigma: number = 0.0,
  public wdSigma: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return uvwSigmas.createuvwSigmas(builder,
    this.uSigma,
    this.vSigma,
    this.wSigma,
    this.udSigma,
    this.vdSigma,
    this.wdSigma
  );
}
}
