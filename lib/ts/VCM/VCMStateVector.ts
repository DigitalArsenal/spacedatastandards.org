// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * VCM State Vector (position and velocity)
 */
export class VCMStateVector implements flatbuffers.IUnpackableObject<VCMStateVectorT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VCMStateVector {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVCMStateVector(bb:flatbuffers.ByteBuffer, obj?:VCMStateVector):VCMStateVector {
  return (obj || new VCMStateVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVCMStateVector(bb:flatbuffers.ByteBuffer, obj?:VCMStateVector):VCMStateVector {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VCMStateVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

EPOCH():string|null
EPOCH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
EPOCH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

X():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

Y():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

Z():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

X_DOT():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

Y_DOT():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

Z_DOT():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startVCMStateVector(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addEpoch(builder:flatbuffers.Builder, EPOCHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, EPOCHOffset, 0);
}

static addX(builder:flatbuffers.Builder, X:number) {
  builder.addFieldFloat64(1, X, 0.0);
}

static addY(builder:flatbuffers.Builder, Y:number) {
  builder.addFieldFloat64(2, Y, 0.0);
}

static addZ(builder:flatbuffers.Builder, Z:number) {
  builder.addFieldFloat64(3, Z, 0.0);
}

static addXDot(builder:flatbuffers.Builder, X_DOT:number) {
  builder.addFieldFloat64(4, X_DOT, 0.0);
}

static addYDot(builder:flatbuffers.Builder, Y_DOT:number) {
  builder.addFieldFloat64(5, Y_DOT, 0.0);
}

static addZDot(builder:flatbuffers.Builder, Z_DOT:number) {
  builder.addFieldFloat64(6, Z_DOT, 0.0);
}

static endVCMStateVector(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createVCMStateVector(builder:flatbuffers.Builder, EPOCHOffset:flatbuffers.Offset, X:number, Y:number, Z:number, X_DOT:number, Y_DOT:number, Z_DOT:number):flatbuffers.Offset {
  VCMStateVector.startVCMStateVector(builder);
  VCMStateVector.addEpoch(builder, EPOCHOffset);
  VCMStateVector.addX(builder, X);
  VCMStateVector.addY(builder, Y);
  VCMStateVector.addZ(builder, Z);
  VCMStateVector.addXDot(builder, X_DOT);
  VCMStateVector.addYDot(builder, Y_DOT);
  VCMStateVector.addZDot(builder, Z_DOT);
  return VCMStateVector.endVCMStateVector(builder);
}

unpack(): VCMStateVectorT {
  return new VCMStateVectorT(
    this.EPOCH(),
    this.X(),
    this.Y(),
    this.Z(),
    this.X_DOT(),
    this.Y_DOT(),
    this.Z_DOT()
  );
}


unpackTo(_o: VCMStateVectorT): void {
  _o.EPOCH = this.EPOCH();
  _o.X = this.X();
  _o.Y = this.Y();
  _o.Z = this.Z();
  _o.X_DOT = this.X_DOT();
  _o.Y_DOT = this.Y_DOT();
  _o.Z_DOT = this.Z_DOT();
}
}

export class VCMStateVectorT implements flatbuffers.IGeneratedObject {
constructor(
  public EPOCH: string|Uint8Array|null = null,
  public X: number = 0.0,
  public Y: number = 0.0,
  public Z: number = 0.0,
  public X_DOT: number = 0.0,
  public Y_DOT: number = 0.0,
  public Z_DOT: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const EPOCH = (this.EPOCH !== null ? builder.createString(this.EPOCH!) : 0);

  return VCMStateVector.createVCMStateVector(builder,
    EPOCH,
    this.X,
    this.Y,
    this.Z,
    this.X_DOT,
    this.Y_DOT,
    this.Z_DOT
  );
}
}
