// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { atmosphericModel } from './atmospheric-model.js';
import { geopotentialModel } from './geopotential-model.js';
import { lunarPerturbationModel } from './lunar-perturbation-model.js';
import { perturbationStatus } from './perturbation-status.js';
import { resonanceModel } from './resonance-model.js';
import { solarPerturbationModel } from './solar-perturbation-model.js';
import { solarRadiationPressureModel } from './solar-radiation-pressure-model.js';


/**
 * VCM Atmospheric and Perturbation Model Data
 */
export class VCMAtmosphericModelData implements flatbuffers.IUnpackableObject<VCMAtmosphericModelDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VCMAtmosphericModelData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVCMAtmosphericModelData(bb:flatbuffers.ByteBuffer, obj?:VCMAtmosphericModelData):VCMAtmosphericModelData {
  return (obj || new VCMAtmosphericModelData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVCMAtmosphericModelData(bb:flatbuffers.ByteBuffer, obj?:VCMAtmosphericModelData):VCMAtmosphericModelData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VCMAtmosphericModelData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

atmosphericModel():atmosphericModel {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : atmosphericModel.NONE;
}

geopotentialModel():geopotentialModel {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : geopotentialModel.NONE;
}

lunarSolarPerturbation():perturbationStatus {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : perturbationStatus.OFF;
}

lunarPerturbationModel():lunarPerturbationModel {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : lunarPerturbationModel.NONE;
}

solarPerturbationModel():solarPerturbationModel {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : solarPerturbationModel.NONE;
}

solarRadiationPressure():perturbationStatus {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : perturbationStatus.OFF;
}

srpModel():solarRadiationPressureModel {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : solarRadiationPressureModel.NONE;
}

resonanceModel():resonanceModel {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : resonanceModel.NONE;
}

static startVCMAtmosphericModelData(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addAtmosphericModel(builder:flatbuffers.Builder, atmosphericModel:atmosphericModel) {
  builder.addFieldInt8(0, atmosphericModel, atmosphericModel.NONE);
}

static addGeopotentialModel(builder:flatbuffers.Builder, geopotentialModel:geopotentialModel) {
  builder.addFieldInt8(1, geopotentialModel, geopotentialModel.NONE);
}

static addLunarSolarPerturbation(builder:flatbuffers.Builder, lunarSolarPerturbation:perturbationStatus) {
  builder.addFieldInt8(2, lunarSolarPerturbation, perturbationStatus.OFF);
}

static addLunarPerturbationModel(builder:flatbuffers.Builder, lunarPerturbationModel:lunarPerturbationModel) {
  builder.addFieldInt8(3, lunarPerturbationModel, lunarPerturbationModel.NONE);
}

static addSolarPerturbationModel(builder:flatbuffers.Builder, solarPerturbationModel:solarPerturbationModel) {
  builder.addFieldInt8(4, solarPerturbationModel, solarPerturbationModel.NONE);
}

static addSolarRadiationPressure(builder:flatbuffers.Builder, solarRadiationPressure:perturbationStatus) {
  builder.addFieldInt8(5, solarRadiationPressure, perturbationStatus.OFF);
}

static addSrpModel(builder:flatbuffers.Builder, srpModel:solarRadiationPressureModel) {
  builder.addFieldInt8(6, srpModel, solarRadiationPressureModel.NONE);
}

static addResonanceModel(builder:flatbuffers.Builder, resonanceModel:resonanceModel) {
  builder.addFieldInt8(7, resonanceModel, resonanceModel.NONE);
}

static endVCMAtmosphericModelData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createVCMAtmosphericModelData(builder:flatbuffers.Builder, atmosphericModel:atmosphericModel, geopotentialModel:geopotentialModel, lunarSolarPerturbation:perturbationStatus, lunarPerturbationModel:lunarPerturbationModel, solarPerturbationModel:solarPerturbationModel, solarRadiationPressure:perturbationStatus, srpModel:solarRadiationPressureModel, resonanceModel:resonanceModel):flatbuffers.Offset {
  VCMAtmosphericModelData.startVCMAtmosphericModelData(builder);
  VCMAtmosphericModelData.addAtmosphericModel(builder, atmosphericModel);
  VCMAtmosphericModelData.addGeopotentialModel(builder, geopotentialModel);
  VCMAtmosphericModelData.addLunarSolarPerturbation(builder, lunarSolarPerturbation);
  VCMAtmosphericModelData.addLunarPerturbationModel(builder, lunarPerturbationModel);
  VCMAtmosphericModelData.addSolarPerturbationModel(builder, solarPerturbationModel);
  VCMAtmosphericModelData.addSolarRadiationPressure(builder, solarRadiationPressure);
  VCMAtmosphericModelData.addSrpModel(builder, srpModel);
  VCMAtmosphericModelData.addResonanceModel(builder, resonanceModel);
  return VCMAtmosphericModelData.endVCMAtmosphericModelData(builder);
}

unpack(): VCMAtmosphericModelDataT {
  return new VCMAtmosphericModelDataT(
    this.atmosphericModel(),
    this.geopotentialModel(),
    this.lunarSolarPerturbation(),
    this.lunarPerturbationModel(),
    this.solarPerturbationModel(),
    this.solarRadiationPressure(),
    this.srpModel(),
    this.resonanceModel()
  );
}


unpackTo(_o: VCMAtmosphericModelDataT): void {
  _o.atmosphericModel = this.atmosphericModel();
  _o.geopotentialModel = this.geopotentialModel();
  _o.lunarSolarPerturbation = this.lunarSolarPerturbation();
  _o.lunarPerturbationModel = this.lunarPerturbationModel();
  _o.solarPerturbationModel = this.solarPerturbationModel();
  _o.solarRadiationPressure = this.solarRadiationPressure();
  _o.srpModel = this.srpModel();
  _o.resonanceModel = this.resonanceModel();
}
}

export class VCMAtmosphericModelDataT implements flatbuffers.IGeneratedObject {
constructor(
  public atmosphericModel: atmosphericModel = atmosphericModel.NONE,
  public geopotentialModel: geopotentialModel = geopotentialModel.NONE,
  public lunarSolarPerturbation: perturbationStatus = perturbationStatus.OFF,
  public lunarPerturbationModel: lunarPerturbationModel = lunarPerturbationModel.NONE,
  public solarPerturbationModel: solarPerturbationModel = solarPerturbationModel.NONE,
  public solarRadiationPressure: perturbationStatus = perturbationStatus.OFF,
  public srpModel: solarRadiationPressureModel = solarRadiationPressureModel.NONE,
  public resonanceModel: resonanceModel = resonanceModel.NONE
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return VCMAtmosphericModelData.createVCMAtmosphericModelData(builder,
    this.atmosphericModel,
    this.geopotentialModel,
    this.lunarSolarPerturbation,
    this.lunarPerturbationModel,
    this.solarPerturbationModel,
    this.solarRadiationPressure,
    this.srpModel,
    this.resonanceModel
  );
}
}
