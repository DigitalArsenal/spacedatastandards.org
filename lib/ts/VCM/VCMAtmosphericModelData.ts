// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { atmosphericModel } from './atmosphericModel.js';
import { geopotentialModel } from './geopotentialModel.js';
import { lunarPerturbationModel } from './lunarPerturbationModel.js';
import { perturbationStatus } from './perturbationStatus.js';
import { resonanceModel } from './resonanceModel.js';
import { solarPerturbationModel } from './solarPerturbationModel.js';
import { solarRadiationPressureModel } from './solarRadiationPressureModel.js';


/**
 * VCM Atmospheric and Perturbation Model Data
 */
export class VCMAtmosphericModelData implements flatbuffers.IUnpackableObject<VCMAtmosphericModelDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VCMAtmosphericModelData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVCMAtmosphericModelData(bb:flatbuffers.ByteBuffer, obj?:VCMAtmosphericModelData):VCMAtmosphericModelData {
  return (obj || new VCMAtmosphericModelData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVCMAtmosphericModelData(bb:flatbuffers.ByteBuffer, obj?:VCMAtmosphericModelData):VCMAtmosphericModelData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VCMAtmosphericModelData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ATMOSPHERIC_MODEL():atmosphericModel {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : atmosphericModel.NONE;
}

GEOPOTENTIAL_MODEL():geopotentialModel {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : geopotentialModel.NONE;
}

LUNAR_SOLAR_PERTURBATION():perturbationStatus {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : perturbationStatus.OFF;
}

LUNAR_PERTURBATION_MODEL():lunarPerturbationModel {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : lunarPerturbationModel.NONE;
}

SOLAR_PERTURBATION_MODEL():solarPerturbationModel {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : solarPerturbationModel.NONE;
}

SOLAR_RADIATION_PRESSURE():perturbationStatus {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : perturbationStatus.OFF;
}

SRP_MODEL():solarRadiationPressureModel {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : solarRadiationPressureModel.NONE;
}

RESONANCE_MODEL():resonanceModel {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : resonanceModel.NONE;
}

static startVCMAtmosphericModelData(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addAtmosphericModel(builder:flatbuffers.Builder, ATMOSPHERIC_MODEL:atmosphericModel) {
  builder.addFieldInt8(0, ATMOSPHERIC_MODEL, atmosphericModel.NONE);
}

static addGeopotentialModel(builder:flatbuffers.Builder, GEOPOTENTIAL_MODEL:geopotentialModel) {
  builder.addFieldInt8(1, GEOPOTENTIAL_MODEL, geopotentialModel.NONE);
}

static addLunarSolarPerturbation(builder:flatbuffers.Builder, LUNAR_SOLAR_PERTURBATION:perturbationStatus) {
  builder.addFieldInt8(2, LUNAR_SOLAR_PERTURBATION, perturbationStatus.OFF);
}

static addLunarPerturbationModel(builder:flatbuffers.Builder, LUNAR_PERTURBATION_MODEL:lunarPerturbationModel) {
  builder.addFieldInt8(3, LUNAR_PERTURBATION_MODEL, lunarPerturbationModel.NONE);
}

static addSolarPerturbationModel(builder:flatbuffers.Builder, SOLAR_PERTURBATION_MODEL:solarPerturbationModel) {
  builder.addFieldInt8(4, SOLAR_PERTURBATION_MODEL, solarPerturbationModel.NONE);
}

static addSolarRadiationPressure(builder:flatbuffers.Builder, SOLAR_RADIATION_PRESSURE:perturbationStatus) {
  builder.addFieldInt8(5, SOLAR_RADIATION_PRESSURE, perturbationStatus.OFF);
}

static addSrpModel(builder:flatbuffers.Builder, SRP_MODEL:solarRadiationPressureModel) {
  builder.addFieldInt8(6, SRP_MODEL, solarRadiationPressureModel.NONE);
}

static addResonanceModel(builder:flatbuffers.Builder, RESONANCE_MODEL:resonanceModel) {
  builder.addFieldInt8(7, RESONANCE_MODEL, resonanceModel.NONE);
}

static endVCMAtmosphericModelData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createVCMAtmosphericModelData(builder:flatbuffers.Builder, ATMOSPHERIC_MODEL:atmosphericModel, GEOPOTENTIAL_MODEL:geopotentialModel, LUNAR_SOLAR_PERTURBATION:perturbationStatus, LUNAR_PERTURBATION_MODEL:lunarPerturbationModel, SOLAR_PERTURBATION_MODEL:solarPerturbationModel, SOLAR_RADIATION_PRESSURE:perturbationStatus, SRP_MODEL:solarRadiationPressureModel, RESONANCE_MODEL:resonanceModel):flatbuffers.Offset {
  VCMAtmosphericModelData.startVCMAtmosphericModelData(builder);
  VCMAtmosphericModelData.addAtmosphericModel(builder, ATMOSPHERIC_MODEL);
  VCMAtmosphericModelData.addGeopotentialModel(builder, GEOPOTENTIAL_MODEL);
  VCMAtmosphericModelData.addLunarSolarPerturbation(builder, LUNAR_SOLAR_PERTURBATION);
  VCMAtmosphericModelData.addLunarPerturbationModel(builder, LUNAR_PERTURBATION_MODEL);
  VCMAtmosphericModelData.addSolarPerturbationModel(builder, SOLAR_PERTURBATION_MODEL);
  VCMAtmosphericModelData.addSolarRadiationPressure(builder, SOLAR_RADIATION_PRESSURE);
  VCMAtmosphericModelData.addSrpModel(builder, SRP_MODEL);
  VCMAtmosphericModelData.addResonanceModel(builder, RESONANCE_MODEL);
  return VCMAtmosphericModelData.endVCMAtmosphericModelData(builder);
}

unpack(): VCMAtmosphericModelDataT {
  return new VCMAtmosphericModelDataT(
    this.ATMOSPHERIC_MODEL(),
    this.GEOPOTENTIAL_MODEL(),
    this.LUNAR_SOLAR_PERTURBATION(),
    this.LUNAR_PERTURBATION_MODEL(),
    this.SOLAR_PERTURBATION_MODEL(),
    this.SOLAR_RADIATION_PRESSURE(),
    this.SRP_MODEL(),
    this.RESONANCE_MODEL()
  );
}


unpackTo(_o: VCMAtmosphericModelDataT): void {
  _o.ATMOSPHERIC_MODEL = this.ATMOSPHERIC_MODEL();
  _o.GEOPOTENTIAL_MODEL = this.GEOPOTENTIAL_MODEL();
  _o.LUNAR_SOLAR_PERTURBATION = this.LUNAR_SOLAR_PERTURBATION();
  _o.LUNAR_PERTURBATION_MODEL = this.LUNAR_PERTURBATION_MODEL();
  _o.SOLAR_PERTURBATION_MODEL = this.SOLAR_PERTURBATION_MODEL();
  _o.SOLAR_RADIATION_PRESSURE = this.SOLAR_RADIATION_PRESSURE();
  _o.SRP_MODEL = this.SRP_MODEL();
  _o.RESONANCE_MODEL = this.RESONANCE_MODEL();
}
}

export class VCMAtmosphericModelDataT implements flatbuffers.IGeneratedObject {
constructor(
  public ATMOSPHERIC_MODEL: atmosphericModel = atmosphericModel.NONE,
  public GEOPOTENTIAL_MODEL: geopotentialModel = geopotentialModel.NONE,
  public LUNAR_SOLAR_PERTURBATION: perturbationStatus = perturbationStatus.OFF,
  public LUNAR_PERTURBATION_MODEL: lunarPerturbationModel = lunarPerturbationModel.NONE,
  public SOLAR_PERTURBATION_MODEL: solarPerturbationModel = solarPerturbationModel.NONE,
  public SOLAR_RADIATION_PRESSURE: perturbationStatus = perturbationStatus.OFF,
  public SRP_MODEL: solarRadiationPressureModel = solarRadiationPressureModel.NONE,
  public RESONANCE_MODEL: resonanceModel = resonanceModel.NONE
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return VCMAtmosphericModelData.createVCMAtmosphericModelData(builder,
    this.ATMOSPHERIC_MODEL,
    this.GEOPOTENTIAL_MODEL,
    this.LUNAR_SOLAR_PERTURBATION,
    this.LUNAR_PERTURBATION_MODEL,
    this.SOLAR_PERTURBATION_MODEL,
    this.SOLAR_RADIATION_PRESSURE,
    this.SRP_MODEL,
    this.RESONANCE_MODEL
  );
}
}
