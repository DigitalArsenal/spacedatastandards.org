// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { propagatorType } from './propagatorType.js';
import { zonalHarmonic } from './zonalHarmonic.js';


/**
 * Propagator configuration structure to describe propagation settings
 */
export class propagatorConfig implements flatbuffers.IUnpackableObject<propagatorConfigT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):propagatorConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAspropagatorConfig(bb:flatbuffers.ByteBuffer, obj?:propagatorConfig):propagatorConfig {
  return (obj || new propagatorConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAspropagatorConfig(bb:flatbuffers.ByteBuffer, obj?:propagatorConfig):propagatorConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new propagatorConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

PROPAGATOR_NAME():string|null
PROPAGATOR_NAME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
PROPAGATOR_NAME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

PROPAGATOR_TYPE():propagatorType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : propagatorType.NONE;
}

FORCE_MODELS(index: number):string
FORCE_MODELS(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
FORCE_MODELS(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

forceModelsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

EPOCH():string|null
EPOCH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
EPOCH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

TIME_STEP():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

ZONAL_HARMONIC_TERMS(index: number):zonalHarmonic|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

zonalHarmonicTermsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

zonalHarmonicTermsArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startpropagatorConfig(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addPropagatorName(builder:flatbuffers.Builder, PROPAGATOR_NAMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, PROPAGATOR_NAMEOffset, 0);
}

static addPropagatorType(builder:flatbuffers.Builder, PROPAGATOR_TYPE:propagatorType) {
  builder.addFieldInt8(1, PROPAGATOR_TYPE, propagatorType.NONE);
}

static addForceModels(builder:flatbuffers.Builder, FORCE_MODELSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, FORCE_MODELSOffset, 0);
}

static createForceModelsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startForceModelsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEpoch(builder:flatbuffers.Builder, EPOCHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, EPOCHOffset, 0);
}

static addTimeStep(builder:flatbuffers.Builder, TIME_STEP:number) {
  builder.addFieldFloat64(4, TIME_STEP, 0.0);
}

static addZonalHarmonicTerms(builder:flatbuffers.Builder, ZONAL_HARMONIC_TERMSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, ZONAL_HARMONIC_TERMSOffset, 0);
}

static createZonalHarmonicTermsVector(builder:flatbuffers.Builder, data:zonalHarmonic[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startZonalHarmonicTermsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endpropagatorConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createpropagatorConfig(builder:flatbuffers.Builder, PROPAGATOR_NAMEOffset:flatbuffers.Offset, PROPAGATOR_TYPE:propagatorType, FORCE_MODELSOffset:flatbuffers.Offset, EPOCHOffset:flatbuffers.Offset, TIME_STEP:number, ZONAL_HARMONIC_TERMSOffset:flatbuffers.Offset):flatbuffers.Offset {
  propagatorConfig.startpropagatorConfig(builder);
  propagatorConfig.addPropagatorName(builder, PROPAGATOR_NAMEOffset);
  propagatorConfig.addPropagatorType(builder, PROPAGATOR_TYPE);
  propagatorConfig.addForceModels(builder, FORCE_MODELSOffset);
  propagatorConfig.addEpoch(builder, EPOCHOffset);
  propagatorConfig.addTimeStep(builder, TIME_STEP);
  propagatorConfig.addZonalHarmonicTerms(builder, ZONAL_HARMONIC_TERMSOffset);
  return propagatorConfig.endpropagatorConfig(builder);
}

unpack(): propagatorConfigT {
  return new propagatorConfigT(
    this.PROPAGATOR_NAME(),
    this.PROPAGATOR_TYPE(),
    this.bb!.createScalarList<string>(this.FORCE_MODELS.bind(this), this.forceModelsLength()),
    this.EPOCH(),
    this.TIME_STEP(),
    this.bb!.createScalarList<zonalHarmonic>(this.ZONAL_HARMONIC_TERMS.bind(this), this.zonalHarmonicTermsLength())
  );
}


unpackTo(_o: propagatorConfigT): void {
  _o.PROPAGATOR_NAME = this.PROPAGATOR_NAME();
  _o.PROPAGATOR_TYPE = this.PROPAGATOR_TYPE();
  _o.FORCE_MODELS = this.bb!.createScalarList<string>(this.FORCE_MODELS.bind(this), this.forceModelsLength());
  _o.EPOCH = this.EPOCH();
  _o.TIME_STEP = this.TIME_STEP();
  _o.ZONAL_HARMONIC_TERMS = this.bb!.createScalarList<zonalHarmonic>(this.ZONAL_HARMONIC_TERMS.bind(this), this.zonalHarmonicTermsLength());
}
}

export class propagatorConfigT implements flatbuffers.IGeneratedObject {
constructor(
  public PROPAGATOR_NAME: string|Uint8Array|null = null,
  public PROPAGATOR_TYPE: propagatorType = propagatorType.NONE,
  public FORCE_MODELS: (string)[] = [],
  public EPOCH: string|Uint8Array|null = null,
  public TIME_STEP: number = 0.0,
  public ZONAL_HARMONIC_TERMS: (zonalHarmonic)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const PROPAGATOR_NAME = (this.PROPAGATOR_NAME !== null ? builder.createString(this.PROPAGATOR_NAME!) : 0);
  const FORCE_MODELS = propagatorConfig.createForceModelsVector(builder, builder.createObjectOffsetList(this.FORCE_MODELS));
  const EPOCH = (this.EPOCH !== null ? builder.createString(this.EPOCH!) : 0);
  const ZONAL_HARMONIC_TERMS = propagatorConfig.createZonalHarmonicTermsVector(builder, this.ZONAL_HARMONIC_TERMS);

  return propagatorConfig.createpropagatorConfig(builder,
    PROPAGATOR_NAME,
    this.PROPAGATOR_TYPE,
    FORCE_MODELS,
    EPOCH,
    this.TIME_STEP,
    ZONAL_HARMONIC_TERMS
  );
}
}
