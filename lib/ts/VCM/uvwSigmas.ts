// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * UVW Sigmas (Covariance matrix in UVW frame)
 */
export class uvwSigmas implements flatbuffers.IUnpackableObject<uvwSigmasT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):uvwSigmas {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsuvwSigmas(bb:flatbuffers.ByteBuffer, obj?:uvwSigmas):uvwSigmas {
  return (obj || new uvwSigmas()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsuvwSigmas(bb:flatbuffers.ByteBuffer, obj?:uvwSigmas):uvwSigmas {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new uvwSigmas()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

U_SIGMA():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

V_SIGMA():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

W_SIGMA():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

UD_SIGMA():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

VD_SIGMA():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

WD_SIGMA():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startuvwSigmas(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addUSigma(builder:flatbuffers.Builder, U_SIGMA:number) {
  builder.addFieldFloat64(0, U_SIGMA, 0.0);
}

static addVSigma(builder:flatbuffers.Builder, V_SIGMA:number) {
  builder.addFieldFloat64(1, V_SIGMA, 0.0);
}

static addWSigma(builder:flatbuffers.Builder, W_SIGMA:number) {
  builder.addFieldFloat64(2, W_SIGMA, 0.0);
}

static addUdSigma(builder:flatbuffers.Builder, UD_SIGMA:number) {
  builder.addFieldFloat64(3, UD_SIGMA, 0.0);
}

static addVdSigma(builder:flatbuffers.Builder, VD_SIGMA:number) {
  builder.addFieldFloat64(4, VD_SIGMA, 0.0);
}

static addWdSigma(builder:flatbuffers.Builder, WD_SIGMA:number) {
  builder.addFieldFloat64(5, WD_SIGMA, 0.0);
}

static enduvwSigmas(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createuvwSigmas(builder:flatbuffers.Builder, U_SIGMA:number, V_SIGMA:number, W_SIGMA:number, UD_SIGMA:number, VD_SIGMA:number, WD_SIGMA:number):flatbuffers.Offset {
  uvwSigmas.startuvwSigmas(builder);
  uvwSigmas.addUSigma(builder, U_SIGMA);
  uvwSigmas.addVSigma(builder, V_SIGMA);
  uvwSigmas.addWSigma(builder, W_SIGMA);
  uvwSigmas.addUdSigma(builder, UD_SIGMA);
  uvwSigmas.addVdSigma(builder, VD_SIGMA);
  uvwSigmas.addWdSigma(builder, WD_SIGMA);
  return uvwSigmas.enduvwSigmas(builder);
}

unpack(): uvwSigmasT {
  return new uvwSigmasT(
    this.U_SIGMA(),
    this.V_SIGMA(),
    this.W_SIGMA(),
    this.UD_SIGMA(),
    this.VD_SIGMA(),
    this.WD_SIGMA()
  );
}


unpackTo(_o: uvwSigmasT): void {
  _o.U_SIGMA = this.U_SIGMA();
  _o.V_SIGMA = this.V_SIGMA();
  _o.W_SIGMA = this.W_SIGMA();
  _o.UD_SIGMA = this.UD_SIGMA();
  _o.VD_SIGMA = this.VD_SIGMA();
  _o.WD_SIGMA = this.WD_SIGMA();
}
}

export class uvwSigmasT implements flatbuffers.IGeneratedObject {
constructor(
  public U_SIGMA: number = 0.0,
  public V_SIGMA: number = 0.0,
  public W_SIGMA: number = 0.0,
  public UD_SIGMA: number = 0.0,
  public VD_SIGMA: number = 0.0,
  public WD_SIGMA: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return uvwSigmas.createuvwSigmas(builder,
    this.U_SIGMA,
    this.V_SIGMA,
    this.W_SIGMA,
    this.UD_SIGMA,
    this.VD_SIGMA,
    this.WD_SIGMA
  );
}
}
