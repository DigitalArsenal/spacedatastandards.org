// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ephemerisType } from './ephemeris-type.js';
import { meanElementTheory } from './mean-element-theory.js';
import { refFrame } from './ref-frame.js';
import { timeSystem } from './time-system.js';


/**
 * Orbit Mean Elements Message
 */
export class OMM implements flatbuffers.IUnpackableObject<OMMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OMM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOMM(bb:flatbuffers.ByteBuffer, obj?:OMM):OMM {
  return (obj || new OMM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOMM(bb:flatbuffers.ByteBuffer, obj?:OMM):OMM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OMM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$OMM');
}

/**
 * CCSDS OMM Version 
 */
ccsdsOmmVers():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Creation Date (ISO 8601 UTC format) 
 */
creationDate():string|null
creationDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
creationDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originator 
 */
originator():string|null
originator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite Name(s)
 */
objectName():string|null
objectName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objectName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * International Designator (YYYY-NNNAAA)
 */
objectId():string|null
objectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Center Name (e.g. EARTH, MARS)
 */
centerName():string|null
centerName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
centerName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Reference Frame
 */
referenceFrame():refFrame {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : refFrame.TEME;
}

/**
 * Reference Frame Epoch (ISO 8601 UTC format)
 */
referenceFrameEpoch():string|null
referenceFrameEpoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
referenceFrameEpoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time System [M, UTC]
 */
timeSystem():timeSystem {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : timeSystem.UTC;
}

/**
 * Mean Element Theory
 */
meanElementTheory():meanElementTheory {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : meanElementTheory.SGP4;
}

/**
 * COMMENT (O)
 */
comment():string|null
comment(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
comment(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * EPOCH of Mean Keplerian elements (ISO 8601 UTC format)
 */
epoch():string|null
epoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
epoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Semi-major axis in km or Mean Motion in rev/day
 */
semiMajorAxis():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Mean motion in rev/day if MEAN_ELEMENT_THEORY=SGP/SGP4 else unused
 */
meanMotion():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Eccentricity (unitless)
 */
eccentricity():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Inclination in degrees
 */
inclination():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * RA_OF_ASC_NODE in degrees
 */
raOfAscNode():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * ARG_OF_PERICENTER in degrees
 */
argOfPericenter():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * MEAN_ANOMALY in degrees
 */
meanAnomaly():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * GM in km**3/s**2
 */
gm():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * MASS in kg
 */
mass():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * SOLAR_RAD_AREA in m**2
 */
solarRadArea():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * SOLAR_RAD_COEFF (unitless)
 */
solarRadCoeff():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * DRAG_AREA in m**2
 */
dragArea():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * DRAG_COEFF (unitless)
 */
dragCoeff():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * TLE Related Parameters (Only if MEAN_ELEMENT_THEORY=SGP/SGP4)
 * EPHEMERIS_TYPE Default=0
 */
ephemerisType():ephemerisType {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ephemerisType.SGP4;
}

/**
 * CLASSIFICATION_TYPE Default=U
 */
classificationType():string|null
classificationType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * NORAD_CAT_ID (integer) [O if SGP/SGP4]
 */
noradCatId():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

/**
 * ELEMENT_SET_NO [O if SGP/SGP4]
 */
elementSetNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

/**
 * REV_AT_EPOCH [O if SGP/SGP4]
 */
revAtEpoch():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * BSTAR in 1/Earth radii or BTERM in m²/kg depending on MEAN_ELEMENT_THEORY [C]
 */
bstar():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * MEAN_MOTION_DOT in rev/day² [C if SGP or PPT3]
 */
meanMotionDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * MEAN_MOTION_DDOT in rev/day³ if SGP/PPT3 or AGOM in m²/kg if SGP4-XP [C]
 */
meanMotionDdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Position/Velocity Covariance Matrix (6x6 Lower Triangular) [C if any covariance provided]
 * COV_REF_FRAME reference frame for covariance [C if covariance given]
 */
covReferenceFrame():refFrame {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : refFrame.RSW;
}

/**
 * CX_X [km**2]
 */
cxX():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CY_X [km**2]
 */
cyX():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CY_Y [km**2]
 */
cyY():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CZ_X [km**2]
 */
czX():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CZ_Y [km**2]
 */
czY():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CZ_Z [km**2]
 */
czZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CX_DOT_X [km**2/s]
 */
cxDotX():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CX_DOT_Y [km**2/s]
 */
cxDotY():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CX_DOT_Z [km**2/s]
 */
cxDotZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CX_DOT_X_DOT [km**2/s**2]
 */
cxDotXDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CY_DOT_X [km**2/s]
 */
cyDotX():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CY_DOT_Y [km**2/s]
 */
cyDotY():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CY_DOT_Z [km**2/s]
 */
cyDotZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CY_DOT_X_DOT [km**2/s**2]
 */
cyDotXDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CY_DOT_Y_DOT [km**2/s**2]
 */
cyDotYDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CZ_DOT_X [km**2/s]
 */
czDotX():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CZ_DOT_Y [km**2/s]
 */
czDotY():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CZ_DOT_Z [km**2/s]
 */
czDotZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CZ_DOT_X_DOT [km**2/s**2]
 */
czDotXDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CZ_DOT_Y_DOT [km**2/s**2]
 */
czDotYDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * CZ_DOT_Z_DOT [km**2/s**2]
 */
czDotZDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * USER_DEFINED_BIP_0044_TYPE [O, units per ICD]
 */
userDefinedBip0044Type():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

/**
 * USER_DEFINED_OBJECT_DESIGNATOR [O, units per ICD]
 */
userDefinedObjectDesignator():string|null
userDefinedObjectDesignator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userDefinedObjectDesignator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * USER_DEFINED_EARTH_MODEL [O, units per ICD]
 */
userDefinedEarthModel():string|null
userDefinedEarthModel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userDefinedEarthModel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * USER_DEFINED_EPOCH_TIMESTAMP [O, units per ICD]
 */
userDefinedEpochTimestamp():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * USER_DEFINED_MICROSECONDS [O, units per ICD]
 */
userDefinedMicroseconds():number {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startOMM(builder:flatbuffers.Builder) {
  builder.startObject(60);
}

static addCcsdsOmmVers(builder:flatbuffers.Builder, ccsdsOmmVers:number) {
  builder.addFieldFloat64(0, ccsdsOmmVers, 0.0);
}

static addCreationDate(builder:flatbuffers.Builder, creationDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, creationDateOffset, 0);
}

static addOriginator(builder:flatbuffers.Builder, originatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, originatorOffset, 0);
}

static addObjectName(builder:flatbuffers.Builder, objectNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, objectNameOffset, 0);
}

static addObjectId(builder:flatbuffers.Builder, objectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, objectIdOffset, 0);
}

static addCenterName(builder:flatbuffers.Builder, centerNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, centerNameOffset, 0);
}

static addReferenceFrame(builder:flatbuffers.Builder, referenceFrame:refFrame) {
  builder.addFieldInt8(6, referenceFrame, refFrame.TEME);
}

static addReferenceFrameEpoch(builder:flatbuffers.Builder, referenceFrameEpochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, referenceFrameEpochOffset, 0);
}

static addTimeSystem(builder:flatbuffers.Builder, timeSystem:timeSystem) {
  builder.addFieldInt8(8, timeSystem, timeSystem.UTC);
}

static addMeanElementTheory(builder:flatbuffers.Builder, meanElementTheory:meanElementTheory) {
  builder.addFieldInt8(9, meanElementTheory, meanElementTheory.SGP4);
}

static addComment(builder:flatbuffers.Builder, commentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, commentOffset, 0);
}

static addEpoch(builder:flatbuffers.Builder, epochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, epochOffset, 0);
}

static addSemiMajorAxis(builder:flatbuffers.Builder, semiMajorAxis:number) {
  builder.addFieldFloat64(12, semiMajorAxis, 0.0);
}

static addMeanMotion(builder:flatbuffers.Builder, meanMotion:number) {
  builder.addFieldFloat64(13, meanMotion, 0.0);
}

static addEccentricity(builder:flatbuffers.Builder, eccentricity:number) {
  builder.addFieldFloat64(14, eccentricity, 0.0);
}

static addInclination(builder:flatbuffers.Builder, inclination:number) {
  builder.addFieldFloat64(15, inclination, 0.0);
}

static addRaOfAscNode(builder:flatbuffers.Builder, raOfAscNode:number) {
  builder.addFieldFloat64(16, raOfAscNode, 0.0);
}

static addArgOfPericenter(builder:flatbuffers.Builder, argOfPericenter:number) {
  builder.addFieldFloat64(17, argOfPericenter, 0.0);
}

static addMeanAnomaly(builder:flatbuffers.Builder, meanAnomaly:number) {
  builder.addFieldFloat64(18, meanAnomaly, 0.0);
}

static addGm(builder:flatbuffers.Builder, gm:number) {
  builder.addFieldFloat64(19, gm, 0.0);
}

static addMass(builder:flatbuffers.Builder, mass:number) {
  builder.addFieldFloat64(20, mass, 0.0);
}

static addSolarRadArea(builder:flatbuffers.Builder, solarRadArea:number) {
  builder.addFieldFloat64(21, solarRadArea, 0.0);
}

static addSolarRadCoeff(builder:flatbuffers.Builder, solarRadCoeff:number) {
  builder.addFieldFloat64(22, solarRadCoeff, 0.0);
}

static addDragArea(builder:flatbuffers.Builder, dragArea:number) {
  builder.addFieldFloat64(23, dragArea, 0.0);
}

static addDragCoeff(builder:flatbuffers.Builder, dragCoeff:number) {
  builder.addFieldFloat64(24, dragCoeff, 0.0);
}

static addEphemerisType(builder:flatbuffers.Builder, ephemerisType:ephemerisType) {
  builder.addFieldInt8(25, ephemerisType, ephemerisType.SGP4);
}

static addClassificationType(builder:flatbuffers.Builder, classificationTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, classificationTypeOffset, 0);
}

static addNoradCatId(builder:flatbuffers.Builder, noradCatId:number) {
  builder.addFieldInt32(27, noradCatId, 0);
}

static addElementSetNo(builder:flatbuffers.Builder, elementSetNo:number) {
  builder.addFieldInt32(28, elementSetNo, 0);
}

static addRevAtEpoch(builder:flatbuffers.Builder, revAtEpoch:number) {
  builder.addFieldFloat64(29, revAtEpoch, 0.0);
}

static addBstar(builder:flatbuffers.Builder, bstar:number) {
  builder.addFieldFloat64(30, bstar, 0.0);
}

static addMeanMotionDot(builder:flatbuffers.Builder, meanMotionDot:number) {
  builder.addFieldFloat64(31, meanMotionDot, 0.0);
}

static addMeanMotionDdot(builder:flatbuffers.Builder, meanMotionDdot:number) {
  builder.addFieldFloat64(32, meanMotionDdot, 0.0);
}

static addCovReferenceFrame(builder:flatbuffers.Builder, covReferenceFrame:refFrame) {
  builder.addFieldInt8(33, covReferenceFrame, refFrame.RSW);
}

static addCxX(builder:flatbuffers.Builder, cxX:number) {
  builder.addFieldFloat64(34, cxX, 0.0);
}

static addCyX(builder:flatbuffers.Builder, cyX:number) {
  builder.addFieldFloat64(35, cyX, 0.0);
}

static addCyY(builder:flatbuffers.Builder, cyY:number) {
  builder.addFieldFloat64(36, cyY, 0.0);
}

static addCzX(builder:flatbuffers.Builder, czX:number) {
  builder.addFieldFloat64(37, czX, 0.0);
}

static addCzY(builder:flatbuffers.Builder, czY:number) {
  builder.addFieldFloat64(38, czY, 0.0);
}

static addCzZ(builder:flatbuffers.Builder, czZ:number) {
  builder.addFieldFloat64(39, czZ, 0.0);
}

static addCxDotX(builder:flatbuffers.Builder, cxDotX:number) {
  builder.addFieldFloat64(40, cxDotX, 0.0);
}

static addCxDotY(builder:flatbuffers.Builder, cxDotY:number) {
  builder.addFieldFloat64(41, cxDotY, 0.0);
}

static addCxDotZ(builder:flatbuffers.Builder, cxDotZ:number) {
  builder.addFieldFloat64(42, cxDotZ, 0.0);
}

static addCxDotXDot(builder:flatbuffers.Builder, cxDotXDot:number) {
  builder.addFieldFloat64(43, cxDotXDot, 0.0);
}

static addCyDotX(builder:flatbuffers.Builder, cyDotX:number) {
  builder.addFieldFloat64(44, cyDotX, 0.0);
}

static addCyDotY(builder:flatbuffers.Builder, cyDotY:number) {
  builder.addFieldFloat64(45, cyDotY, 0.0);
}

static addCyDotZ(builder:flatbuffers.Builder, cyDotZ:number) {
  builder.addFieldFloat64(46, cyDotZ, 0.0);
}

static addCyDotXDot(builder:flatbuffers.Builder, cyDotXDot:number) {
  builder.addFieldFloat64(47, cyDotXDot, 0.0);
}

static addCyDotYDot(builder:flatbuffers.Builder, cyDotYDot:number) {
  builder.addFieldFloat64(48, cyDotYDot, 0.0);
}

static addCzDotX(builder:flatbuffers.Builder, czDotX:number) {
  builder.addFieldFloat64(49, czDotX, 0.0);
}

static addCzDotY(builder:flatbuffers.Builder, czDotY:number) {
  builder.addFieldFloat64(50, czDotY, 0.0);
}

static addCzDotZ(builder:flatbuffers.Builder, czDotZ:number) {
  builder.addFieldFloat64(51, czDotZ, 0.0);
}

static addCzDotXDot(builder:flatbuffers.Builder, czDotXDot:number) {
  builder.addFieldFloat64(52, czDotXDot, 0.0);
}

static addCzDotYDot(builder:flatbuffers.Builder, czDotYDot:number) {
  builder.addFieldFloat64(53, czDotYDot, 0.0);
}

static addCzDotZDot(builder:flatbuffers.Builder, czDotZDot:number) {
  builder.addFieldFloat64(54, czDotZDot, 0.0);
}

static addUserDefinedBip0044Type(builder:flatbuffers.Builder, userDefinedBip0044Type:number) {
  builder.addFieldInt32(55, userDefinedBip0044Type, 0);
}

static addUserDefinedObjectDesignator(builder:flatbuffers.Builder, userDefinedObjectDesignatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, userDefinedObjectDesignatorOffset, 0);
}

static addUserDefinedEarthModel(builder:flatbuffers.Builder, userDefinedEarthModelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, userDefinedEarthModelOffset, 0);
}

static addUserDefinedEpochTimestamp(builder:flatbuffers.Builder, userDefinedEpochTimestamp:number) {
  builder.addFieldFloat64(58, userDefinedEpochTimestamp, 0.0);
}

static addUserDefinedMicroseconds(builder:flatbuffers.Builder, userDefinedMicroseconds:number) {
  builder.addFieldFloat64(59, userDefinedMicroseconds, 0.0);
}

static endOMM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOMMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$OMM');
}

static finishSizePrefixedOMMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$OMM', true);
}

static createOMM(builder:flatbuffers.Builder, ccsdsOmmVers:number, creationDateOffset:flatbuffers.Offset, originatorOffset:flatbuffers.Offset, objectNameOffset:flatbuffers.Offset, objectIdOffset:flatbuffers.Offset, centerNameOffset:flatbuffers.Offset, referenceFrame:refFrame, referenceFrameEpochOffset:flatbuffers.Offset, timeSystem:timeSystem, meanElementTheory:meanElementTheory, commentOffset:flatbuffers.Offset, epochOffset:flatbuffers.Offset, semiMajorAxis:number, meanMotion:number, eccentricity:number, inclination:number, raOfAscNode:number, argOfPericenter:number, meanAnomaly:number, gm:number, mass:number, solarRadArea:number, solarRadCoeff:number, dragArea:number, dragCoeff:number, ephemerisType:ephemerisType, classificationTypeOffset:flatbuffers.Offset, noradCatId:number, elementSetNo:number, revAtEpoch:number, bstar:number, meanMotionDot:number, meanMotionDdot:number, covReferenceFrame:refFrame, cxX:number, cyX:number, cyY:number, czX:number, czY:number, czZ:number, cxDotX:number, cxDotY:number, cxDotZ:number, cxDotXDot:number, cyDotX:number, cyDotY:number, cyDotZ:number, cyDotXDot:number, cyDotYDot:number, czDotX:number, czDotY:number, czDotZ:number, czDotXDot:number, czDotYDot:number, czDotZDot:number, userDefinedBip0044Type:number, userDefinedObjectDesignatorOffset:flatbuffers.Offset, userDefinedEarthModelOffset:flatbuffers.Offset, userDefinedEpochTimestamp:number, userDefinedMicroseconds:number):flatbuffers.Offset {
  OMM.startOMM(builder);
  OMM.addCcsdsOmmVers(builder, ccsdsOmmVers);
  OMM.addCreationDate(builder, creationDateOffset);
  OMM.addOriginator(builder, originatorOffset);
  OMM.addObjectName(builder, objectNameOffset);
  OMM.addObjectId(builder, objectIdOffset);
  OMM.addCenterName(builder, centerNameOffset);
  OMM.addReferenceFrame(builder, referenceFrame);
  OMM.addReferenceFrameEpoch(builder, referenceFrameEpochOffset);
  OMM.addTimeSystem(builder, timeSystem);
  OMM.addMeanElementTheory(builder, meanElementTheory);
  OMM.addComment(builder, commentOffset);
  OMM.addEpoch(builder, epochOffset);
  OMM.addSemiMajorAxis(builder, semiMajorAxis);
  OMM.addMeanMotion(builder, meanMotion);
  OMM.addEccentricity(builder, eccentricity);
  OMM.addInclination(builder, inclination);
  OMM.addRaOfAscNode(builder, raOfAscNode);
  OMM.addArgOfPericenter(builder, argOfPericenter);
  OMM.addMeanAnomaly(builder, meanAnomaly);
  OMM.addGm(builder, gm);
  OMM.addMass(builder, mass);
  OMM.addSolarRadArea(builder, solarRadArea);
  OMM.addSolarRadCoeff(builder, solarRadCoeff);
  OMM.addDragArea(builder, dragArea);
  OMM.addDragCoeff(builder, dragCoeff);
  OMM.addEphemerisType(builder, ephemerisType);
  OMM.addClassificationType(builder, classificationTypeOffset);
  OMM.addNoradCatId(builder, noradCatId);
  OMM.addElementSetNo(builder, elementSetNo);
  OMM.addRevAtEpoch(builder, revAtEpoch);
  OMM.addBstar(builder, bstar);
  OMM.addMeanMotionDot(builder, meanMotionDot);
  OMM.addMeanMotionDdot(builder, meanMotionDdot);
  OMM.addCovReferenceFrame(builder, covReferenceFrame);
  OMM.addCxX(builder, cxX);
  OMM.addCyX(builder, cyX);
  OMM.addCyY(builder, cyY);
  OMM.addCzX(builder, czX);
  OMM.addCzY(builder, czY);
  OMM.addCzZ(builder, czZ);
  OMM.addCxDotX(builder, cxDotX);
  OMM.addCxDotY(builder, cxDotY);
  OMM.addCxDotZ(builder, cxDotZ);
  OMM.addCxDotXDot(builder, cxDotXDot);
  OMM.addCyDotX(builder, cyDotX);
  OMM.addCyDotY(builder, cyDotY);
  OMM.addCyDotZ(builder, cyDotZ);
  OMM.addCyDotXDot(builder, cyDotXDot);
  OMM.addCyDotYDot(builder, cyDotYDot);
  OMM.addCzDotX(builder, czDotX);
  OMM.addCzDotY(builder, czDotY);
  OMM.addCzDotZ(builder, czDotZ);
  OMM.addCzDotXDot(builder, czDotXDot);
  OMM.addCzDotYDot(builder, czDotYDot);
  OMM.addCzDotZDot(builder, czDotZDot);
  OMM.addUserDefinedBip0044Type(builder, userDefinedBip0044Type);
  OMM.addUserDefinedObjectDesignator(builder, userDefinedObjectDesignatorOffset);
  OMM.addUserDefinedEarthModel(builder, userDefinedEarthModelOffset);
  OMM.addUserDefinedEpochTimestamp(builder, userDefinedEpochTimestamp);
  OMM.addUserDefinedMicroseconds(builder, userDefinedMicroseconds);
  return OMM.endOMM(builder);
}

unpack(): OMMT {
  return new OMMT(
    this.ccsdsOmmVers(),
    this.creationDate(),
    this.originator(),
    this.objectName(),
    this.objectId(),
    this.centerName(),
    this.referenceFrame(),
    this.referenceFrameEpoch(),
    this.timeSystem(),
    this.meanElementTheory(),
    this.comment(),
    this.epoch(),
    this.semiMajorAxis(),
    this.meanMotion(),
    this.eccentricity(),
    this.inclination(),
    this.raOfAscNode(),
    this.argOfPericenter(),
    this.meanAnomaly(),
    this.gm(),
    this.mass(),
    this.solarRadArea(),
    this.solarRadCoeff(),
    this.dragArea(),
    this.dragCoeff(),
    this.ephemerisType(),
    this.classificationType(),
    this.noradCatId(),
    this.elementSetNo(),
    this.revAtEpoch(),
    this.bstar(),
    this.meanMotionDot(),
    this.meanMotionDdot(),
    this.covReferenceFrame(),
    this.cxX(),
    this.cyX(),
    this.cyY(),
    this.czX(),
    this.czY(),
    this.czZ(),
    this.cxDotX(),
    this.cxDotY(),
    this.cxDotZ(),
    this.cxDotXDot(),
    this.cyDotX(),
    this.cyDotY(),
    this.cyDotZ(),
    this.cyDotXDot(),
    this.cyDotYDot(),
    this.czDotX(),
    this.czDotY(),
    this.czDotZ(),
    this.czDotXDot(),
    this.czDotYDot(),
    this.czDotZDot(),
    this.userDefinedBip0044Type(),
    this.userDefinedObjectDesignator(),
    this.userDefinedEarthModel(),
    this.userDefinedEpochTimestamp(),
    this.userDefinedMicroseconds()
  );
}


unpackTo(_o: OMMT): void {
  _o.ccsdsOmmVers = this.ccsdsOmmVers();
  _o.creationDate = this.creationDate();
  _o.originator = this.originator();
  _o.objectName = this.objectName();
  _o.objectId = this.objectId();
  _o.centerName = this.centerName();
  _o.referenceFrame = this.referenceFrame();
  _o.referenceFrameEpoch = this.referenceFrameEpoch();
  _o.timeSystem = this.timeSystem();
  _o.meanElementTheory = this.meanElementTheory();
  _o.comment = this.comment();
  _o.epoch = this.epoch();
  _o.semiMajorAxis = this.semiMajorAxis();
  _o.meanMotion = this.meanMotion();
  _o.eccentricity = this.eccentricity();
  _o.inclination = this.inclination();
  _o.raOfAscNode = this.raOfAscNode();
  _o.argOfPericenter = this.argOfPericenter();
  _o.meanAnomaly = this.meanAnomaly();
  _o.gm = this.gm();
  _o.mass = this.mass();
  _o.solarRadArea = this.solarRadArea();
  _o.solarRadCoeff = this.solarRadCoeff();
  _o.dragArea = this.dragArea();
  _o.dragCoeff = this.dragCoeff();
  _o.ephemerisType = this.ephemerisType();
  _o.classificationType = this.classificationType();
  _o.noradCatId = this.noradCatId();
  _o.elementSetNo = this.elementSetNo();
  _o.revAtEpoch = this.revAtEpoch();
  _o.bstar = this.bstar();
  _o.meanMotionDot = this.meanMotionDot();
  _o.meanMotionDdot = this.meanMotionDdot();
  _o.covReferenceFrame = this.covReferenceFrame();
  _o.cxX = this.cxX();
  _o.cyX = this.cyX();
  _o.cyY = this.cyY();
  _o.czX = this.czX();
  _o.czY = this.czY();
  _o.czZ = this.czZ();
  _o.cxDotX = this.cxDotX();
  _o.cxDotY = this.cxDotY();
  _o.cxDotZ = this.cxDotZ();
  _o.cxDotXDot = this.cxDotXDot();
  _o.cyDotX = this.cyDotX();
  _o.cyDotY = this.cyDotY();
  _o.cyDotZ = this.cyDotZ();
  _o.cyDotXDot = this.cyDotXDot();
  _o.cyDotYDot = this.cyDotYDot();
  _o.czDotX = this.czDotX();
  _o.czDotY = this.czDotY();
  _o.czDotZ = this.czDotZ();
  _o.czDotXDot = this.czDotXDot();
  _o.czDotYDot = this.czDotYDot();
  _o.czDotZDot = this.czDotZDot();
  _o.userDefinedBip0044Type = this.userDefinedBip0044Type();
  _o.userDefinedObjectDesignator = this.userDefinedObjectDesignator();
  _o.userDefinedEarthModel = this.userDefinedEarthModel();
  _o.userDefinedEpochTimestamp = this.userDefinedEpochTimestamp();
  _o.userDefinedMicroseconds = this.userDefinedMicroseconds();
}
}

export class OMMT implements flatbuffers.IGeneratedObject {
constructor(
  public ccsdsOmmVers: number = 0.0,
  public creationDate: string|Uint8Array|null = null,
  public originator: string|Uint8Array|null = null,
  public objectName: string|Uint8Array|null = null,
  public objectId: string|Uint8Array|null = null,
  public centerName: string|Uint8Array|null = null,
  public referenceFrame: refFrame = refFrame.TEME,
  public referenceFrameEpoch: string|Uint8Array|null = null,
  public timeSystem: timeSystem = timeSystem.UTC,
  public meanElementTheory: meanElementTheory = meanElementTheory.SGP4,
  public comment: string|Uint8Array|null = null,
  public epoch: string|Uint8Array|null = null,
  public semiMajorAxis: number = 0.0,
  public meanMotion: number = 0.0,
  public eccentricity: number = 0.0,
  public inclination: number = 0.0,
  public raOfAscNode: number = 0.0,
  public argOfPericenter: number = 0.0,
  public meanAnomaly: number = 0.0,
  public gm: number = 0.0,
  public mass: number = 0.0,
  public solarRadArea: number = 0.0,
  public solarRadCoeff: number = 0.0,
  public dragArea: number = 0.0,
  public dragCoeff: number = 0.0,
  public ephemerisType: ephemerisType = ephemerisType.SGP4,
  public classificationType: string|Uint8Array|null = null,
  public noradCatId: number = 0,
  public elementSetNo: number = 0,
  public revAtEpoch: number = 0.0,
  public bstar: number = 0.0,
  public meanMotionDot: number = 0.0,
  public meanMotionDdot: number = 0.0,
  public covReferenceFrame: refFrame = refFrame.RSW,
  public cxX: number = 0.0,
  public cyX: number = 0.0,
  public cyY: number = 0.0,
  public czX: number = 0.0,
  public czY: number = 0.0,
  public czZ: number = 0.0,
  public cxDotX: number = 0.0,
  public cxDotY: number = 0.0,
  public cxDotZ: number = 0.0,
  public cxDotXDot: number = 0.0,
  public cyDotX: number = 0.0,
  public cyDotY: number = 0.0,
  public cyDotZ: number = 0.0,
  public cyDotXDot: number = 0.0,
  public cyDotYDot: number = 0.0,
  public czDotX: number = 0.0,
  public czDotY: number = 0.0,
  public czDotZ: number = 0.0,
  public czDotXDot: number = 0.0,
  public czDotYDot: number = 0.0,
  public czDotZDot: number = 0.0,
  public userDefinedBip0044Type: number = 0,
  public userDefinedObjectDesignator: string|Uint8Array|null = null,
  public userDefinedEarthModel: string|Uint8Array|null = null,
  public userDefinedEpochTimestamp: number = 0.0,
  public userDefinedMicroseconds: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const creationDate = (this.creationDate !== null ? builder.createString(this.creationDate!) : 0);
  const originator = (this.originator !== null ? builder.createString(this.originator!) : 0);
  const objectName = (this.objectName !== null ? builder.createString(this.objectName!) : 0);
  const objectId = (this.objectId !== null ? builder.createString(this.objectId!) : 0);
  const centerName = (this.centerName !== null ? builder.createString(this.centerName!) : 0);
  const referenceFrameEpoch = (this.referenceFrameEpoch !== null ? builder.createString(this.referenceFrameEpoch!) : 0);
  const comment = (this.comment !== null ? builder.createString(this.comment!) : 0);
  const epoch = (this.epoch !== null ? builder.createString(this.epoch!) : 0);
  const classificationType = (this.classificationType !== null ? builder.createString(this.classificationType!) : 0);
  const userDefinedObjectDesignator = (this.userDefinedObjectDesignator !== null ? builder.createString(this.userDefinedObjectDesignator!) : 0);
  const userDefinedEarthModel = (this.userDefinedEarthModel !== null ? builder.createString(this.userDefinedEarthModel!) : 0);

  return OMM.createOMM(builder,
    this.ccsdsOmmVers,
    creationDate,
    originator,
    objectName,
    objectId,
    centerName,
    this.referenceFrame,
    referenceFrameEpoch,
    this.timeSystem,
    this.meanElementTheory,
    comment,
    epoch,
    this.semiMajorAxis,
    this.meanMotion,
    this.eccentricity,
    this.inclination,
    this.raOfAscNode,
    this.argOfPericenter,
    this.meanAnomaly,
    this.gm,
    this.mass,
    this.solarRadArea,
    this.solarRadCoeff,
    this.dragArea,
    this.dragCoeff,
    this.ephemerisType,
    classificationType,
    this.noradCatId,
    this.elementSetNo,
    this.revAtEpoch,
    this.bstar,
    this.meanMotionDot,
    this.meanMotionDdot,
    this.covReferenceFrame,
    this.cxX,
    this.cyX,
    this.cyY,
    this.czX,
    this.czY,
    this.czZ,
    this.cxDotX,
    this.cxDotY,
    this.cxDotZ,
    this.cxDotXDot,
    this.cyDotX,
    this.cyDotY,
    this.cyDotZ,
    this.cyDotXDot,
    this.cyDotYDot,
    this.czDotX,
    this.czDotY,
    this.czDotZ,
    this.czDotXDot,
    this.czDotYDot,
    this.czDotZDot,
    this.userDefinedBip0044Type,
    userDefinedObjectDesignator,
    userDefinedEarthModel,
    this.userDefinedEpochTimestamp,
    this.userDefinedMicroseconds
  );
}
}
