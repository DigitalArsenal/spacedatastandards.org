// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { timeSystem } from './time-system.js';


/**
 * Time System
 */
export class TIM implements flatbuffers.IUnpackableObject<TIMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TIM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTIM(bb:flatbuffers.ByteBuffer, obj?:TIM):TIM {
  return (obj || new TIM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTIM(bb:flatbuffers.ByteBuffer, obj?:TIM):TIM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TIM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$TIM');
}

timeSystem():timeSystem {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : timeSystem.GMST;
}

static startTIM(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addTimeSystem(builder:flatbuffers.Builder, timeSystem:timeSystem) {
  builder.addFieldInt8(0, timeSystem, timeSystem.GMST);
}

static endTIM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishTIMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$TIM');
}

static finishSizePrefixedTIMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$TIM', true);
}

static createTIM(builder:flatbuffers.Builder, timeSystem:timeSystem):flatbuffers.Offset {
  TIM.startTIM(builder);
  TIM.addTimeSystem(builder, timeSystem);
  return TIM.endTIM(builder);
}

unpack(): TIMT {
  return new TIMT(
    this.timeSystem()
  );
}


unpackTo(_o: TIMT): void {
  _o.timeSystem = this.timeSystem();
}
}

export class TIMT implements flatbuffers.IGeneratedObject {
constructor(
  public timeSystem: timeSystem = timeSystem.GMST
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return TIM.createTIM(builder,
    this.timeSystem
  );
}
}
