// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { F107DataType } from './F107DataType.js';


/**
 * Space Weather Data Record
 */
export class SPW implements flatbuffers.IUnpackableObject<SPWT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SPW {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSPW(bb:flatbuffers.ByteBuffer, obj?:SPW):SPW {
  return (obj || new SPW()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSPW(bb:flatbuffers.ByteBuffer, obj?:SPW):SPW {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SPW()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$SPW');
}

/**
 * Date in ISO 8601 format
 */
DATE():string|null
DATE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
DATE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Bartels Solar Rotation Number
 */
BSRN():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Day within Bartels cycle (1-27)
 */
ND():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary 3-hour Range Index (Kp) for 0000-0300 UT, multiplied by 10
 */
KP1():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary 3-hour Range Index (Kp) for 0300-0600 UT, multiplied by 10
 */
KP2():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary 3-hour Range Index (Kp) for 0600-0900 UT, multiplied by 10
 */
KP3():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary 3-hour Range Index (Kp) for 0900-1200 UT, multiplied by 10
 */
KP4():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary 3-hour Range Index (Kp) for 1200-1500 UT, multiplied by 10
 */
KP5():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary 3-hour Range Index (Kp) for 1500-1800 UT, multiplied by 10
 */
KP6():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary 3-hour Range Index (Kp) for 1800-2100 UT, multiplied by 10
 */
KP7():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary 3-hour Range Index (Kp) for 2100-0000 UT, multiplied by 10
 */
KP8():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Sum of the 8 Kp indices for the day
 */
KP_SUM():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Equivalent Amplitude (Ap) for 0000-0300 UT
 */
AP1():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Equivalent Amplitude (Ap) for 0300-0600 UT
 */
AP2():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Equivalent Amplitude (Ap) for 0600-0900 UT
 */
AP3():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Equivalent Amplitude (Ap) for 0900-1200 UT
 */
AP4():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Equivalent Amplitude (Ap) for 1200-1500 UT
 */
AP5():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Equivalent Amplitude (Ap) for 1500-1800 UT
 */
AP6():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Equivalent Amplitude (Ap) for 1800-2100 UT
 */
AP7():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Equivalent Amplitude (Ap) for 2100-0000 UT
 */
AP8():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Arithmetic average of the 8 Ap indices for the day
 */
AP_AVG():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Daily Character Figure (0.0 to 2.5)
 */
CP():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * C9 index (0-9)
 */
C9():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * International Sunspot Number
 */
ISN():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Observed 10.7cm Solar Radio Flux
 */
F107_OBS():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Adjusted 10.7cm Solar Radio Flux (to 1 AU)
 */
F107_ADJ():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * F10.7 Data Type
 */
F107_DATA_TYPE():F107DataType {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : F107DataType.OBS;
}

/**
 * 81-day centered average of observed F10.7
 */
F107_OBS_CENTER81():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * 81-day trailing average of observed F10.7
 */
F107_OBS_LAST81():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * 81-day centered average of adjusted F10.7
 */
F107_ADJ_CENTER81():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * 81-day trailing average of adjusted F10.7
 */
F107_ADJ_LAST81():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startSPW(builder:flatbuffers.Builder) {
  builder.startObject(31);
}

static addDate(builder:flatbuffers.Builder, DATEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, DATEOffset, 0);
}

static addBsrn(builder:flatbuffers.Builder, BSRN:number) {
  builder.addFieldInt32(1, BSRN, 0);
}

static addNd(builder:flatbuffers.Builder, ND:number) {
  builder.addFieldInt32(2, ND, 0);
}

static addKp1(builder:flatbuffers.Builder, KP1:number) {
  builder.addFieldInt32(3, KP1, 0);
}

static addKp2(builder:flatbuffers.Builder, KP2:number) {
  builder.addFieldInt32(4, KP2, 0);
}

static addKp3(builder:flatbuffers.Builder, KP3:number) {
  builder.addFieldInt32(5, KP3, 0);
}

static addKp4(builder:flatbuffers.Builder, KP4:number) {
  builder.addFieldInt32(6, KP4, 0);
}

static addKp5(builder:flatbuffers.Builder, KP5:number) {
  builder.addFieldInt32(7, KP5, 0);
}

static addKp6(builder:flatbuffers.Builder, KP6:number) {
  builder.addFieldInt32(8, KP6, 0);
}

static addKp7(builder:flatbuffers.Builder, KP7:number) {
  builder.addFieldInt32(9, KP7, 0);
}

static addKp8(builder:flatbuffers.Builder, KP8:number) {
  builder.addFieldInt32(10, KP8, 0);
}

static addKpSum(builder:flatbuffers.Builder, KP_SUM:number) {
  builder.addFieldInt32(11, KP_SUM, 0);
}

static addAp1(builder:flatbuffers.Builder, AP1:number) {
  builder.addFieldInt32(12, AP1, 0);
}

static addAp2(builder:flatbuffers.Builder, AP2:number) {
  builder.addFieldInt32(13, AP2, 0);
}

static addAp3(builder:flatbuffers.Builder, AP3:number) {
  builder.addFieldInt32(14, AP3, 0);
}

static addAp4(builder:flatbuffers.Builder, AP4:number) {
  builder.addFieldInt32(15, AP4, 0);
}

static addAp5(builder:flatbuffers.Builder, AP5:number) {
  builder.addFieldInt32(16, AP5, 0);
}

static addAp6(builder:flatbuffers.Builder, AP6:number) {
  builder.addFieldInt32(17, AP6, 0);
}

static addAp7(builder:flatbuffers.Builder, AP7:number) {
  builder.addFieldInt32(18, AP7, 0);
}

static addAp8(builder:flatbuffers.Builder, AP8:number) {
  builder.addFieldInt32(19, AP8, 0);
}

static addApAvg(builder:flatbuffers.Builder, AP_AVG:number) {
  builder.addFieldInt32(20, AP_AVG, 0);
}

static addCp(builder:flatbuffers.Builder, CP:number) {
  builder.addFieldFloat32(21, CP, 0.0);
}

static addC9(builder:flatbuffers.Builder, C9:number) {
  builder.addFieldInt32(22, C9, 0);
}

static addIsn(builder:flatbuffers.Builder, ISN:number) {
  builder.addFieldInt32(23, ISN, 0);
}

static addF107Obs(builder:flatbuffers.Builder, F107_OBS:number) {
  builder.addFieldFloat32(24, F107_OBS, 0.0);
}

static addF107Adj(builder:flatbuffers.Builder, F107_ADJ:number) {
  builder.addFieldFloat32(25, F107_ADJ, 0.0);
}

static addF107DataType(builder:flatbuffers.Builder, F107_DATA_TYPE:F107DataType) {
  builder.addFieldInt8(26, F107_DATA_TYPE, F107DataType.OBS);
}

static addF107ObsCenter81(builder:flatbuffers.Builder, F107_OBS_CENTER81:number) {
  builder.addFieldFloat32(27, F107_OBS_CENTER81, 0.0);
}

static addF107ObsLast81(builder:flatbuffers.Builder, F107_OBS_LAST81:number) {
  builder.addFieldFloat32(28, F107_OBS_LAST81, 0.0);
}

static addF107AdjCenter81(builder:flatbuffers.Builder, F107_ADJ_CENTER81:number) {
  builder.addFieldFloat32(29, F107_ADJ_CENTER81, 0.0);
}

static addF107AdjLast81(builder:flatbuffers.Builder, F107_ADJ_LAST81:number) {
  builder.addFieldFloat32(30, F107_ADJ_LAST81, 0.0);
}

static endSPW(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSPWBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$SPW');
}

static finishSizePrefixedSPWBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$SPW', true);
}

static createSPW(builder:flatbuffers.Builder, DATEOffset:flatbuffers.Offset, BSRN:number, ND:number, KP1:number, KP2:number, KP3:number, KP4:number, KP5:number, KP6:number, KP7:number, KP8:number, KP_SUM:number, AP1:number, AP2:number, AP3:number, AP4:number, AP5:number, AP6:number, AP7:number, AP8:number, AP_AVG:number, CP:number, C9:number, ISN:number, F107_OBS:number, F107_ADJ:number, F107_DATA_TYPE:F107DataType, F107_OBS_CENTER81:number, F107_OBS_LAST81:number, F107_ADJ_CENTER81:number, F107_ADJ_LAST81:number):flatbuffers.Offset {
  SPW.startSPW(builder);
  SPW.addDate(builder, DATEOffset);
  SPW.addBsrn(builder, BSRN);
  SPW.addNd(builder, ND);
  SPW.addKp1(builder, KP1);
  SPW.addKp2(builder, KP2);
  SPW.addKp3(builder, KP3);
  SPW.addKp4(builder, KP4);
  SPW.addKp5(builder, KP5);
  SPW.addKp6(builder, KP6);
  SPW.addKp7(builder, KP7);
  SPW.addKp8(builder, KP8);
  SPW.addKpSum(builder, KP_SUM);
  SPW.addAp1(builder, AP1);
  SPW.addAp2(builder, AP2);
  SPW.addAp3(builder, AP3);
  SPW.addAp4(builder, AP4);
  SPW.addAp5(builder, AP5);
  SPW.addAp6(builder, AP6);
  SPW.addAp7(builder, AP7);
  SPW.addAp8(builder, AP8);
  SPW.addApAvg(builder, AP_AVG);
  SPW.addCp(builder, CP);
  SPW.addC9(builder, C9);
  SPW.addIsn(builder, ISN);
  SPW.addF107Obs(builder, F107_OBS);
  SPW.addF107Adj(builder, F107_ADJ);
  SPW.addF107DataType(builder, F107_DATA_TYPE);
  SPW.addF107ObsCenter81(builder, F107_OBS_CENTER81);
  SPW.addF107ObsLast81(builder, F107_OBS_LAST81);
  SPW.addF107AdjCenter81(builder, F107_ADJ_CENTER81);
  SPW.addF107AdjLast81(builder, F107_ADJ_LAST81);
  return SPW.endSPW(builder);
}

unpack(): SPWT {
  return new SPWT(
    this.DATE(),
    this.BSRN(),
    this.ND(),
    this.KP1(),
    this.KP2(),
    this.KP3(),
    this.KP4(),
    this.KP5(),
    this.KP6(),
    this.KP7(),
    this.KP8(),
    this.KP_SUM(),
    this.AP1(),
    this.AP2(),
    this.AP3(),
    this.AP4(),
    this.AP5(),
    this.AP6(),
    this.AP7(),
    this.AP8(),
    this.AP_AVG(),
    this.CP(),
    this.C9(),
    this.ISN(),
    this.F107_OBS(),
    this.F107_ADJ(),
    this.F107_DATA_TYPE(),
    this.F107_OBS_CENTER81(),
    this.F107_OBS_LAST81(),
    this.F107_ADJ_CENTER81(),
    this.F107_ADJ_LAST81()
  );
}


unpackTo(_o: SPWT): void {
  _o.DATE = this.DATE();
  _o.BSRN = this.BSRN();
  _o.ND = this.ND();
  _o.KP1 = this.KP1();
  _o.KP2 = this.KP2();
  _o.KP3 = this.KP3();
  _o.KP4 = this.KP4();
  _o.KP5 = this.KP5();
  _o.KP6 = this.KP6();
  _o.KP7 = this.KP7();
  _o.KP8 = this.KP8();
  _o.KP_SUM = this.KP_SUM();
  _o.AP1 = this.AP1();
  _o.AP2 = this.AP2();
  _o.AP3 = this.AP3();
  _o.AP4 = this.AP4();
  _o.AP5 = this.AP5();
  _o.AP6 = this.AP6();
  _o.AP7 = this.AP7();
  _o.AP8 = this.AP8();
  _o.AP_AVG = this.AP_AVG();
  _o.CP = this.CP();
  _o.C9 = this.C9();
  _o.ISN = this.ISN();
  _o.F107_OBS = this.F107_OBS();
  _o.F107_ADJ = this.F107_ADJ();
  _o.F107_DATA_TYPE = this.F107_DATA_TYPE();
  _o.F107_OBS_CENTER81 = this.F107_OBS_CENTER81();
  _o.F107_OBS_LAST81 = this.F107_OBS_LAST81();
  _o.F107_ADJ_CENTER81 = this.F107_ADJ_CENTER81();
  _o.F107_ADJ_LAST81 = this.F107_ADJ_LAST81();
}
}

export class SPWT implements flatbuffers.IGeneratedObject {
constructor(
  public DATE: string|Uint8Array|null = null,
  public BSRN: number = 0,
  public ND: number = 0,
  public KP1: number = 0,
  public KP2: number = 0,
  public KP3: number = 0,
  public KP4: number = 0,
  public KP5: number = 0,
  public KP6: number = 0,
  public KP7: number = 0,
  public KP8: number = 0,
  public KP_SUM: number = 0,
  public AP1: number = 0,
  public AP2: number = 0,
  public AP3: number = 0,
  public AP4: number = 0,
  public AP5: number = 0,
  public AP6: number = 0,
  public AP7: number = 0,
  public AP8: number = 0,
  public AP_AVG: number = 0,
  public CP: number = 0.0,
  public C9: number = 0,
  public ISN: number = 0,
  public F107_OBS: number = 0.0,
  public F107_ADJ: number = 0.0,
  public F107_DATA_TYPE: F107DataType = F107DataType.OBS,
  public F107_OBS_CENTER81: number = 0.0,
  public F107_OBS_LAST81: number = 0.0,
  public F107_ADJ_CENTER81: number = 0.0,
  public F107_ADJ_LAST81: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const DATE = (this.DATE !== null ? builder.createString(this.DATE!) : 0);

  return SPW.createSPW(builder,
    DATE,
    this.BSRN,
    this.ND,
    this.KP1,
    this.KP2,
    this.KP3,
    this.KP4,
    this.KP5,
    this.KP6,
    this.KP7,
    this.KP8,
    this.KP_SUM,
    this.AP1,
    this.AP2,
    this.AP3,
    this.AP4,
    this.AP5,
    this.AP6,
    this.AP7,
    this.AP8,
    this.AP_AVG,
    this.CP,
    this.C9,
    this.ISN,
    this.F107_OBS,
    this.F107_ADJ,
    this.F107_DATA_TYPE,
    this.F107_OBS_CENTER81,
    this.F107_OBS_LAST81,
    this.F107_ADJ_CENTER81,
    this.F107_ADJ_LAST81
  );
}
}
