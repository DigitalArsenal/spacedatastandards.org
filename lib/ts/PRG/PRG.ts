// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { USR, USRT } from './USR.js';


/**
 * Program Description Message
 */
export class PRG implements flatbuffers.IUnpackableObject<PRGT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PRG {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPRG(bb:flatbuffers.ByteBuffer, obj?:PRG):PRG {
  return (obj || new PRG()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPRG(bb:flatbuffers.ByteBuffer, obj?:PRG):PRG {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PRG()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$PRG');
}

/**
 * The name of the program
 */
NAME():string|null
NAME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
NAME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Hierarchical Deterministic (HD) derivation path for the program's key, used in cryptocurrency wallets
 */
HD_KEY_PATH():string|null
HD_KEY_PATH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
HD_KEY_PATH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Vector of standard message types used by the program
 */
MESSAGE_TYPES(index: number):string
MESSAGE_TYPES(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
MESSAGE_TYPES(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

messageTypesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Vector of users associated with the program, each user can have assigned message types
 */
USERS(index: number, obj?:USR):USR|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new USR()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

usersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPRG(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addName(builder:flatbuffers.Builder, NAMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, NAMEOffset, 0);
}

static addHdKeyPath(builder:flatbuffers.Builder, HD_KEY_PATHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, HD_KEY_PATHOffset, 0);
}

static addMessageTypes(builder:flatbuffers.Builder, MESSAGE_TYPESOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, MESSAGE_TYPESOffset, 0);
}

static createMessageTypesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMessageTypesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUsers(builder:flatbuffers.Builder, USERSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, USERSOffset, 0);
}

static createUsersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUsersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPRG(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPRGBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$PRG');
}

static finishSizePrefixedPRGBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$PRG', true);
}

static createPRG(builder:flatbuffers.Builder, NAMEOffset:flatbuffers.Offset, HD_KEY_PATHOffset:flatbuffers.Offset, MESSAGE_TYPESOffset:flatbuffers.Offset, USERSOffset:flatbuffers.Offset):flatbuffers.Offset {
  PRG.startPRG(builder);
  PRG.addName(builder, NAMEOffset);
  PRG.addHdKeyPath(builder, HD_KEY_PATHOffset);
  PRG.addMessageTypes(builder, MESSAGE_TYPESOffset);
  PRG.addUsers(builder, USERSOffset);
  return PRG.endPRG(builder);
}

unpack(): PRGT {
  return new PRGT(
    this.NAME(),
    this.HD_KEY_PATH(),
    this.bb!.createScalarList<string>(this.MESSAGE_TYPES.bind(this), this.messageTypesLength()),
    this.bb!.createObjList<USR, USRT>(this.USERS.bind(this), this.usersLength())
  );
}


unpackTo(_o: PRGT): void {
  _o.NAME = this.NAME();
  _o.HD_KEY_PATH = this.HD_KEY_PATH();
  _o.MESSAGE_TYPES = this.bb!.createScalarList<string>(this.MESSAGE_TYPES.bind(this), this.messageTypesLength());
  _o.USERS = this.bb!.createObjList<USR, USRT>(this.USERS.bind(this), this.usersLength());
}
}

export class PRGT implements flatbuffers.IGeneratedObject {
constructor(
  public NAME: string|Uint8Array|null = null,
  public HD_KEY_PATH: string|Uint8Array|null = null,
  public MESSAGE_TYPES: (string)[] = [],
  public USERS: (USRT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const NAME = (this.NAME !== null ? builder.createString(this.NAME!) : 0);
  const HD_KEY_PATH = (this.HD_KEY_PATH !== null ? builder.createString(this.HD_KEY_PATH!) : 0);
  const MESSAGE_TYPES = PRG.createMessageTypesVector(builder, builder.createObjectOffsetList(this.MESSAGE_TYPES));
  const USERS = PRG.createUsersVector(builder, builder.createObjectOffsetList(this.USERS));

  return PRG.createPRG(builder,
    NAME,
    HD_KEY_PATH,
    MESSAGE_TYPES,
    USERS
  );
}
}
