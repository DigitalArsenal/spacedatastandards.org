// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { USR, USRT } from './usr.js';


/**
 * Program Description Message
 */
export class PRG implements flatbuffers.IUnpackableObject<PRGT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PRG {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPRG(bb:flatbuffers.ByteBuffer, obj?:PRG):PRG {
  return (obj || new PRG()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPRG(bb:flatbuffers.ByteBuffer, obj?:PRG):PRG {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PRG()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$PRG');
}

/**
 * The name of the program
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Hierarchical Deterministic (HD) derivation path for the program's key, used in cryptocurrency wallets
 */
hdKeyPath():string|null
hdKeyPath(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hdKeyPath(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Vector of standard message types used by the program
 */
messageTypes(index: number):string
messageTypes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
messageTypes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

messageTypesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Vector of users associated with the program, each user can have assigned message types
 */
users(index: number, obj?:USR):USR|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new USR()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

usersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPRG(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addHdKeyPath(builder:flatbuffers.Builder, hdKeyPathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, hdKeyPathOffset, 0);
}

static addMessageTypes(builder:flatbuffers.Builder, messageTypesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, messageTypesOffset, 0);
}

static createMessageTypesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMessageTypesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUsers(builder:flatbuffers.Builder, usersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, usersOffset, 0);
}

static createUsersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUsersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPRG(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPRGBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$PRG');
}

static finishSizePrefixedPRGBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$PRG', true);
}

static createPRG(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, hdKeyPathOffset:flatbuffers.Offset, messageTypesOffset:flatbuffers.Offset, usersOffset:flatbuffers.Offset):flatbuffers.Offset {
  PRG.startPRG(builder);
  PRG.addName(builder, nameOffset);
  PRG.addHdKeyPath(builder, hdKeyPathOffset);
  PRG.addMessageTypes(builder, messageTypesOffset);
  PRG.addUsers(builder, usersOffset);
  return PRG.endPRG(builder);
}

unpack(): PRGT {
  return new PRGT(
    this.name(),
    this.hdKeyPath(),
    this.bb!.createScalarList<string>(this.messageTypes.bind(this), this.messageTypesLength()),
    this.bb!.createObjList<USR, USRT>(this.users.bind(this), this.usersLength())
  );
}


unpackTo(_o: PRGT): void {
  _o.name = this.name();
  _o.hdKeyPath = this.hdKeyPath();
  _o.messageTypes = this.bb!.createScalarList<string>(this.messageTypes.bind(this), this.messageTypesLength());
  _o.users = this.bb!.createObjList<USR, USRT>(this.users.bind(this), this.usersLength());
}
}

export class PRGT implements flatbuffers.IGeneratedObject {
constructor(
  public name: string|Uint8Array|null = null,
  public hdKeyPath: string|Uint8Array|null = null,
  public messageTypes: (string)[] = [],
  public users: (USRT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const hdKeyPath = (this.hdKeyPath !== null ? builder.createString(this.hdKeyPath!) : 0);
  const messageTypes = PRG.createMessageTypesVector(builder, builder.createObjectOffsetList(this.messageTypes));
  const users = PRG.createUsersVector(builder, builder.createObjectOffsetList(this.users));

  return PRG.createPRG(builder,
    name,
    hdKeyPath,
    messageTypes,
    users
  );
}
}
