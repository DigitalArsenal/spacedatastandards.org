// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Address, AddressT } from './address.js';
import { CryptoKey, CryptoKeyT } from './crypto-key.js';


/**
 * Entity Profile Message
 */
export class EPM implements flatbuffers.IUnpackableObject<EPMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EPM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEPM(bb:flatbuffers.ByteBuffer, obj?:EPM):EPM {
  return (obj || new EPM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEPM(bb:flatbuffers.ByteBuffer, obj?:EPM):EPM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EPM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$EPM');
}

/**
 * Distinguished Name of the entity
 */
dn():string|null
dn(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dn(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Common name of the entity (person or organization)
 */
legalName():string|null
legalName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
legalName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Family name or surname of the person
 */
familyName():string|null
familyName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
familyName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Given name or first name of the person
 */
givenName():string|null
givenName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
givenName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional name or middle name of the person
 */
additionalName():string|null
additionalName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
additionalName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Honorific prefix preceding the person's name (e.g., Mr., Dr.)
 */
honorificPrefix():string|null
honorificPrefix(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
honorificPrefix(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Honorific suffix following the person's name (e.g., Jr., Sr.)
 */
honorificSuffix():string|null
honorificSuffix(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
honorificSuffix(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Job title of the person
 */
jobTitle():string|null
jobTitle(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
jobTitle(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Occupation of the person
 */
occupation():string|null
occupation(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
occupation(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Physical Address
 */
address(obj?:Address):Address|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new Address()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Alternate names for the entity
 */
alternateNames(index: number):string
alternateNames(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
alternateNames(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

alternateNamesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Email address of the entity
 */
email():string|null
email(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
email(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Telephone number of the entity
 */
telephone():string|null
telephone(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
telephone(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Cryptographic keys associated with the entity
 */
keys(index: number, obj?:CryptoKey):CryptoKey|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new CryptoKey()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

keysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Multiformat addresses associated with the entity
 */
multiformatAddress(index: number):string
multiformatAddress(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
multiformatAddress(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

multiformatAddressLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startEPM(builder:flatbuffers.Builder) {
  builder.startObject(15);
}

static addDn(builder:flatbuffers.Builder, dnOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dnOffset, 0);
}

static addLegalName(builder:flatbuffers.Builder, legalNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, legalNameOffset, 0);
}

static addFamilyName(builder:flatbuffers.Builder, familyNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, familyNameOffset, 0);
}

static addGivenName(builder:flatbuffers.Builder, givenNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, givenNameOffset, 0);
}

static addAdditionalName(builder:flatbuffers.Builder, additionalNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, additionalNameOffset, 0);
}

static addHonorificPrefix(builder:flatbuffers.Builder, honorificPrefixOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, honorificPrefixOffset, 0);
}

static addHonorificSuffix(builder:flatbuffers.Builder, honorificSuffixOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, honorificSuffixOffset, 0);
}

static addJobTitle(builder:flatbuffers.Builder, jobTitleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, jobTitleOffset, 0);
}

static addOccupation(builder:flatbuffers.Builder, occupationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, occupationOffset, 0);
}

static addAddress(builder:flatbuffers.Builder, addressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, addressOffset, 0);
}

static addAlternateNames(builder:flatbuffers.Builder, alternateNamesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, alternateNamesOffset, 0);
}

static createAlternateNamesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAlternateNamesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEmail(builder:flatbuffers.Builder, emailOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, emailOffset, 0);
}

static addTelephone(builder:flatbuffers.Builder, telephoneOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, telephoneOffset, 0);
}

static addKeys(builder:flatbuffers.Builder, keysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, keysOffset, 0);
}

static createKeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMultiformatAddress(builder:flatbuffers.Builder, multiformatAddressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, multiformatAddressOffset, 0);
}

static createMultiformatAddressVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMultiformatAddressVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endEPM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEPMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$EPM');
}

static finishSizePrefixedEPMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$EPM', true);
}


unpack(): EPMT {
  return new EPMT(
    this.dn(),
    this.legalName(),
    this.familyName(),
    this.givenName(),
    this.additionalName(),
    this.honorificPrefix(),
    this.honorificSuffix(),
    this.jobTitle(),
    this.occupation(),
    (this.address() !== null ? this.address()!.unpack() : null),
    this.bb!.createScalarList<string>(this.alternateNames.bind(this), this.alternateNamesLength()),
    this.email(),
    this.telephone(),
    this.bb!.createObjList<CryptoKey, CryptoKeyT>(this.keys.bind(this), this.keysLength()),
    this.bb!.createScalarList<string>(this.multiformatAddress.bind(this), this.multiformatAddressLength())
  );
}


unpackTo(_o: EPMT): void {
  _o.dn = this.dn();
  _o.legalName = this.legalName();
  _o.familyName = this.familyName();
  _o.givenName = this.givenName();
  _o.additionalName = this.additionalName();
  _o.honorificPrefix = this.honorificPrefix();
  _o.honorificSuffix = this.honorificSuffix();
  _o.jobTitle = this.jobTitle();
  _o.occupation = this.occupation();
  _o.address = (this.address() !== null ? this.address()!.unpack() : null);
  _o.alternateNames = this.bb!.createScalarList<string>(this.alternateNames.bind(this), this.alternateNamesLength());
  _o.email = this.email();
  _o.telephone = this.telephone();
  _o.keys = this.bb!.createObjList<CryptoKey, CryptoKeyT>(this.keys.bind(this), this.keysLength());
  _o.multiformatAddress = this.bb!.createScalarList<string>(this.multiformatAddress.bind(this), this.multiformatAddressLength());
}
}

export class EPMT implements flatbuffers.IGeneratedObject {
constructor(
  public dn: string|Uint8Array|null = null,
  public legalName: string|Uint8Array|null = null,
  public familyName: string|Uint8Array|null = null,
  public givenName: string|Uint8Array|null = null,
  public additionalName: string|Uint8Array|null = null,
  public honorificPrefix: string|Uint8Array|null = null,
  public honorificSuffix: string|Uint8Array|null = null,
  public jobTitle: string|Uint8Array|null = null,
  public occupation: string|Uint8Array|null = null,
  public address: AddressT|null = null,
  public alternateNames: (string)[] = [],
  public email: string|Uint8Array|null = null,
  public telephone: string|Uint8Array|null = null,
  public keys: (CryptoKeyT)[] = [],
  public multiformatAddress: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const dn = (this.dn !== null ? builder.createString(this.dn!) : 0);
  const legalName = (this.legalName !== null ? builder.createString(this.legalName!) : 0);
  const familyName = (this.familyName !== null ? builder.createString(this.familyName!) : 0);
  const givenName = (this.givenName !== null ? builder.createString(this.givenName!) : 0);
  const additionalName = (this.additionalName !== null ? builder.createString(this.additionalName!) : 0);
  const honorificPrefix = (this.honorificPrefix !== null ? builder.createString(this.honorificPrefix!) : 0);
  const honorificSuffix = (this.honorificSuffix !== null ? builder.createString(this.honorificSuffix!) : 0);
  const jobTitle = (this.jobTitle !== null ? builder.createString(this.jobTitle!) : 0);
  const occupation = (this.occupation !== null ? builder.createString(this.occupation!) : 0);
  const address = (this.address !== null ? this.address!.pack(builder) : 0);
  const alternateNames = EPM.createAlternateNamesVector(builder, builder.createObjectOffsetList(this.alternateNames));
  const email = (this.email !== null ? builder.createString(this.email!) : 0);
  const telephone = (this.telephone !== null ? builder.createString(this.telephone!) : 0);
  const keys = EPM.createKeysVector(builder, builder.createObjectOffsetList(this.keys));
  const multiformatAddress = EPM.createMultiformatAddressVector(builder, builder.createObjectOffsetList(this.multiformatAddress));

  EPM.startEPM(builder);
  EPM.addDn(builder, dn);
  EPM.addLegalName(builder, legalName);
  EPM.addFamilyName(builder, familyName);
  EPM.addGivenName(builder, givenName);
  EPM.addAdditionalName(builder, additionalName);
  EPM.addHonorificPrefix(builder, honorificPrefix);
  EPM.addHonorificSuffix(builder, honorificSuffix);
  EPM.addJobTitle(builder, jobTitle);
  EPM.addOccupation(builder, occupation);
  EPM.addAddress(builder, address);
  EPM.addAlternateNames(builder, alternateNames);
  EPM.addEmail(builder, email);
  EPM.addTelephone(builder, telephone);
  EPM.addKeys(builder, keys);
  EPM.addMultiformatAddress(builder, multiformatAddress);

  return EPM.endEPM(builder);
}
}
