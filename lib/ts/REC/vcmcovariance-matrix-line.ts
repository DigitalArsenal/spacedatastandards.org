// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * VCM Covariance Matrix Line
 */
export class VCMCovarianceMatrixLine implements flatbuffers.IUnpackableObject<VCMCovarianceMatrixLineT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VCMCovarianceMatrixLine {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVCMCovarianceMatrixLine(bb:flatbuffers.ByteBuffer, obj?:VCMCovarianceMatrixLine):VCMCovarianceMatrixLine {
  return (obj || new VCMCovarianceMatrixLine()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVCMCovarianceMatrixLine(bb:flatbuffers.ByteBuffer, obj?:VCMCovarianceMatrixLine):VCMCovarianceMatrixLine {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VCMCovarianceMatrixLine()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cxX():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

cyX():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

czX():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

cxDotX():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startVCMCovarianceMatrixLine(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addCxX(builder:flatbuffers.Builder, cxX:number) {
  builder.addFieldFloat64(0, cxX, 0.0);
}

static addCyX(builder:flatbuffers.Builder, cyX:number) {
  builder.addFieldFloat64(1, cyX, 0.0);
}

static addCzX(builder:flatbuffers.Builder, czX:number) {
  builder.addFieldFloat64(2, czX, 0.0);
}

static addCxDotX(builder:flatbuffers.Builder, cxDotX:number) {
  builder.addFieldFloat64(3, cxDotX, 0.0);
}

static endVCMCovarianceMatrixLine(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createVCMCovarianceMatrixLine(builder:flatbuffers.Builder, cxX:number, cyX:number, czX:number, cxDotX:number):flatbuffers.Offset {
  VCMCovarianceMatrixLine.startVCMCovarianceMatrixLine(builder);
  VCMCovarianceMatrixLine.addCxX(builder, cxX);
  VCMCovarianceMatrixLine.addCyX(builder, cyX);
  VCMCovarianceMatrixLine.addCzX(builder, czX);
  VCMCovarianceMatrixLine.addCxDotX(builder, cxDotX);
  return VCMCovarianceMatrixLine.endVCMCovarianceMatrixLine(builder);
}

unpack(): VCMCovarianceMatrixLineT {
  return new VCMCovarianceMatrixLineT(
    this.cxX(),
    this.cyX(),
    this.czX(),
    this.cxDotX()
  );
}


unpackTo(_o: VCMCovarianceMatrixLineT): void {
  _o.cxX = this.cxX();
  _o.cyX = this.cyX();
  _o.czX = this.czX();
  _o.cxDotX = this.cxDotX();
}
}

export class VCMCovarianceMatrixLineT implements flatbuffers.IGeneratedObject {
constructor(
  public cxX: number = 0.0,
  public cyX: number = 0.0,
  public czX: number = 0.0,
  public cxDotX: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return VCMCovarianceMatrixLine.createVCMCovarianceMatrixLine(builder,
    this.cxX,
    this.cyX,
    this.czX,
    this.cxDotX
  );
}
}
