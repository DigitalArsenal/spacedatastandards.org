// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { AtmosphericModelFamily } from './AtmosphericModelFamily.js';


/**
 * Atmospheric Model Message
 */
export class ATM implements flatbuffers.IUnpackableObject<ATMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ATM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsATM(bb:flatbuffers.ByteBuffer, obj?:ATM):ATM {
  return (obj || new ATM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsATM(bb:flatbuffers.ByteBuffer, obj?:ATM):ATM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ATM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$ATM');
}

/**
 * Canonical model family
 */
MODEL():AtmosphericModelFamily {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : AtmosphericModelFamily.CIRA_XX;
}

/**
 * Four-digit year identifying the model version (e.g., 1970, 2008, 2020)
 */
YEAR():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startATM(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addModel(builder:flatbuffers.Builder, MODEL:AtmosphericModelFamily) {
  builder.addFieldInt8(0, MODEL, AtmosphericModelFamily.CIRA_XX);
}

static addYear(builder:flatbuffers.Builder, YEAR:number) {
  builder.addFieldInt32(1, YEAR, 0);
}

static endATM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishATMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$ATM');
}

static finishSizePrefixedATMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$ATM', true);
}

static createATM(builder:flatbuffers.Builder, MODEL:AtmosphericModelFamily, YEAR:number):flatbuffers.Offset {
  ATM.startATM(builder);
  ATM.addModel(builder, MODEL);
  ATM.addYear(builder, YEAR);
  return ATM.endATM(builder);
}

unpack(): ATMT {
  return new ATMT(
    this.MODEL(),
    this.YEAR()
  );
}


unpackTo(_o: ATMT): void {
  _o.MODEL = this.MODEL();
  _o.YEAR = this.YEAR();
}
}

export class ATMT implements flatbuffers.IGeneratedObject {
constructor(
  public MODEL: AtmosphericModelFamily = AtmosphericModelFamily.CIRA_XX,
  public YEAR: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ATM.createATM(builder,
    this.MODEL,
    this.YEAR
  );
}
}
