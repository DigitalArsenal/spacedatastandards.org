// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BOV, BOVT } from './bov.js';
import { CAT, CATT } from './cat.js';
import { EPM, EPMT } from './epm.js';
import { ROC, ROCT } from './roc.js';
import { SIT, SITT } from './sit.js';


/**
 * Launch Data Message
 */
export class LDM implements flatbuffers.IUnpackableObject<LDMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LDM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLDM(bb:flatbuffers.ByteBuffer, obj?:LDM):LDM {
  return (obj || new LDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLDM(bb:flatbuffers.ByteBuffer, obj?:LDM):LDM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$LDM');
}

/**
 * Launch Site Information
 */
site(obj?:SIT):SIT|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new SIT()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Azimuth at Launch (in Degrees)
 */
azimuth():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * References for Launch Data
 */
references():string|null
references(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
references(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Launching Agency Name
 */
agencyName():string|null
agencyName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
agencyName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Points of Contact for Launch
 */
pointsOfContact(index: number, obj?:EPM):EPM|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new EPM()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

pointsOfContactLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Operations Points of Contact for Launch
 */
operationsPointsOfContact(index: number, obj?:EPM):EPM|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new EPM()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

operationsPointsOfContactLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Net Launch Time (UTC Format)
 */
net():string|null
net(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
net(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Rocket Configuration Details
 */
rocketConfiguration(obj?:ROC):ROC|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new ROC()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Mission Name
 */
missionName():string|null
missionName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Description of the Mission
 */
missionDescription():string|null
missionDescription(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionDescription(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of the Mission (e.g., Test Flight, Satellite Deployment)
 */
missionType():string|null
missionType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
missionType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Target Orbit Type (e.g., LEO, GEO)
 */
orbitType():string|null
orbitType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
orbitType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Weather and Environmental Conditions at Launch
 */
weatherConditions():string|null
weatherConditions(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
weatherConditions(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Launch Outcome and Status (e.g., Successful, Failed)
 */
launchStatus():string|null
launchStatus(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
launchStatus(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Webcast URL for the Launch
 */
webcastUrl():string|null
webcastUrl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
webcastUrl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Media Links Related to the Launch
 */
mediaLinks(index: number):string
mediaLinks(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
mediaLinks(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

mediaLinksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Earliest Possible Launch Times
 */
earliestLaunchTimes(index: number):string
earliestLaunchTimes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
earliestLaunchTimes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

earliestLaunchTimesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Latest Possible Launch Times
 */
latestLaunchTimes(index: number):string
latestLaunchTimes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
latestLaunchTimes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

latestLaunchTimesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Launch Collision Avoidance Information
 */
lcolaWindowClosures(index: number):string
lcolaWindowClosures(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
lcolaWindowClosures(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

lcolaWindowClosuresLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Payload Information (Catalog Entities)
 */
objects(index: number, obj?:CAT):CAT|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? (obj || new CAT()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

objectsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Tracking and Collision Avoidance Requirements
 */
trackingRequirements(index: number):string
trackingRequirements(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
trackingRequirements(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

trackingRequirementsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Duration of Collision Avoidance Screen (in Seconds)
 */
colaScreenDuration():string|null
colaScreenDuration(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
colaScreenDuration(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Probability of Collision Threshold (Percentage)
 */
probabilityOfCollisionThreshold():string|null
probabilityOfCollisionThreshold(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
probabilityOfCollisionThreshold(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Number of Required Collision Avoidance Runs
 */
colaRunsRequired():string|null
colaRunsRequired(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
colaRunsRequired(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Points of Contact for Collision Avoidance
 */
colaPointsOfContact(index: number, obj?:EPM):EPM|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? (obj || new EPM()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

colaPointsOfContactLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Orbital Parameters of the Launch
 */
orbitalParameters(index: number):string
orbitalParameters(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
orbitalParameters(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

orbitalParametersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Burn Out Vectors for the Launch
 */
burnOutVectors(index: number, obj?:BOV):BOV|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? (obj || new BOV()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

burnOutVectorsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startLDM(builder:flatbuffers.Builder) {
  builder.startObject(27);
}

static addSite(builder:flatbuffers.Builder, siteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, siteOffset, 0);
}

static addAzimuth(builder:flatbuffers.Builder, azimuth:number) {
  builder.addFieldFloat32(1, azimuth, 0.0);
}

static addReferences(builder:flatbuffers.Builder, referencesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, referencesOffset, 0);
}

static addAgencyName(builder:flatbuffers.Builder, agencyNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, agencyNameOffset, 0);
}

static addPointsOfContact(builder:flatbuffers.Builder, pointsOfContactOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, pointsOfContactOffset, 0);
}

static createPointsOfContactVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPointsOfContactVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOperationsPointsOfContact(builder:flatbuffers.Builder, operationsPointsOfContactOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, operationsPointsOfContactOffset, 0);
}

static createOperationsPointsOfContactVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOperationsPointsOfContactVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNet(builder:flatbuffers.Builder, netOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, netOffset, 0);
}

static addRocketConfiguration(builder:flatbuffers.Builder, rocketConfigurationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, rocketConfigurationOffset, 0);
}

static addMissionName(builder:flatbuffers.Builder, missionNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, missionNameOffset, 0);
}

static addMissionDescription(builder:flatbuffers.Builder, missionDescriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, missionDescriptionOffset, 0);
}

static addMissionType(builder:flatbuffers.Builder, missionTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, missionTypeOffset, 0);
}

static addOrbitType(builder:flatbuffers.Builder, orbitTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, orbitTypeOffset, 0);
}

static addWeatherConditions(builder:flatbuffers.Builder, weatherConditionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, weatherConditionsOffset, 0);
}

static addLaunchStatus(builder:flatbuffers.Builder, launchStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, launchStatusOffset, 0);
}

static addWebcastUrl(builder:flatbuffers.Builder, webcastUrlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, webcastUrlOffset, 0);
}

static addMediaLinks(builder:flatbuffers.Builder, mediaLinksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, mediaLinksOffset, 0);
}

static createMediaLinksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMediaLinksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEarliestLaunchTimes(builder:flatbuffers.Builder, earliestLaunchTimesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, earliestLaunchTimesOffset, 0);
}

static createEarliestLaunchTimesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEarliestLaunchTimesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLatestLaunchTimes(builder:flatbuffers.Builder, latestLaunchTimesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, latestLaunchTimesOffset, 0);
}

static createLatestLaunchTimesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLatestLaunchTimesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLcolaWindowClosures(builder:flatbuffers.Builder, lcolaWindowClosuresOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, lcolaWindowClosuresOffset, 0);
}

static createLcolaWindowClosuresVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLcolaWindowClosuresVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addObjects(builder:flatbuffers.Builder, objectsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, objectsOffset, 0);
}

static createObjectsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startObjectsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTrackingRequirements(builder:flatbuffers.Builder, trackingRequirementsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, trackingRequirementsOffset, 0);
}

static createTrackingRequirementsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrackingRequirementsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addColaScreenDuration(builder:flatbuffers.Builder, colaScreenDurationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, colaScreenDurationOffset, 0);
}

static addProbabilityOfCollisionThreshold(builder:flatbuffers.Builder, probabilityOfCollisionThresholdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, probabilityOfCollisionThresholdOffset, 0);
}

static addColaRunsRequired(builder:flatbuffers.Builder, colaRunsRequiredOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, colaRunsRequiredOffset, 0);
}

static addColaPointsOfContact(builder:flatbuffers.Builder, colaPointsOfContactOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, colaPointsOfContactOffset, 0);
}

static createColaPointsOfContactVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startColaPointsOfContactVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOrbitalParameters(builder:flatbuffers.Builder, orbitalParametersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, orbitalParametersOffset, 0);
}

static createOrbitalParametersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOrbitalParametersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBurnOutVectors(builder:flatbuffers.Builder, burnOutVectorsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, burnOutVectorsOffset, 0);
}

static createBurnOutVectorsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBurnOutVectorsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endLDM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishLDMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$LDM');
}

static finishSizePrefixedLDMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$LDM', true);
}


unpack(): LDMT {
  return new LDMT(
    (this.site() !== null ? this.site()!.unpack() : null),
    this.azimuth(),
    this.references(),
    this.agencyName(),
    this.bb!.createObjList<EPM, EPMT>(this.pointsOfContact.bind(this), this.pointsOfContactLength()),
    this.bb!.createObjList<EPM, EPMT>(this.operationsPointsOfContact.bind(this), this.operationsPointsOfContactLength()),
    this.net(),
    (this.rocketConfiguration() !== null ? this.rocketConfiguration()!.unpack() : null),
    this.missionName(),
    this.missionDescription(),
    this.missionType(),
    this.orbitType(),
    this.weatherConditions(),
    this.launchStatus(),
    this.webcastUrl(),
    this.bb!.createScalarList<string>(this.mediaLinks.bind(this), this.mediaLinksLength()),
    this.bb!.createScalarList<string>(this.earliestLaunchTimes.bind(this), this.earliestLaunchTimesLength()),
    this.bb!.createScalarList<string>(this.latestLaunchTimes.bind(this), this.latestLaunchTimesLength()),
    this.bb!.createScalarList<string>(this.lcolaWindowClosures.bind(this), this.lcolaWindowClosuresLength()),
    this.bb!.createObjList<CAT, CATT>(this.objects.bind(this), this.objectsLength()),
    this.bb!.createScalarList<string>(this.trackingRequirements.bind(this), this.trackingRequirementsLength()),
    this.colaScreenDuration(),
    this.probabilityOfCollisionThreshold(),
    this.colaRunsRequired(),
    this.bb!.createObjList<EPM, EPMT>(this.colaPointsOfContact.bind(this), this.colaPointsOfContactLength()),
    this.bb!.createScalarList<string>(this.orbitalParameters.bind(this), this.orbitalParametersLength()),
    this.bb!.createObjList<BOV, BOVT>(this.burnOutVectors.bind(this), this.burnOutVectorsLength())
  );
}


unpackTo(_o: LDMT): void {
  _o.site = (this.site() !== null ? this.site()!.unpack() : null);
  _o.azimuth = this.azimuth();
  _o.references = this.references();
  _o.agencyName = this.agencyName();
  _o.pointsOfContact = this.bb!.createObjList<EPM, EPMT>(this.pointsOfContact.bind(this), this.pointsOfContactLength());
  _o.operationsPointsOfContact = this.bb!.createObjList<EPM, EPMT>(this.operationsPointsOfContact.bind(this), this.operationsPointsOfContactLength());
  _o.net = this.net();
  _o.rocketConfiguration = (this.rocketConfiguration() !== null ? this.rocketConfiguration()!.unpack() : null);
  _o.missionName = this.missionName();
  _o.missionDescription = this.missionDescription();
  _o.missionType = this.missionType();
  _o.orbitType = this.orbitType();
  _o.weatherConditions = this.weatherConditions();
  _o.launchStatus = this.launchStatus();
  _o.webcastUrl = this.webcastUrl();
  _o.mediaLinks = this.bb!.createScalarList<string>(this.mediaLinks.bind(this), this.mediaLinksLength());
  _o.earliestLaunchTimes = this.bb!.createScalarList<string>(this.earliestLaunchTimes.bind(this), this.earliestLaunchTimesLength());
  _o.latestLaunchTimes = this.bb!.createScalarList<string>(this.latestLaunchTimes.bind(this), this.latestLaunchTimesLength());
  _o.lcolaWindowClosures = this.bb!.createScalarList<string>(this.lcolaWindowClosures.bind(this), this.lcolaWindowClosuresLength());
  _o.objects = this.bb!.createObjList<CAT, CATT>(this.objects.bind(this), this.objectsLength());
  _o.trackingRequirements = this.bb!.createScalarList<string>(this.trackingRequirements.bind(this), this.trackingRequirementsLength());
  _o.colaScreenDuration = this.colaScreenDuration();
  _o.probabilityOfCollisionThreshold = this.probabilityOfCollisionThreshold();
  _o.colaRunsRequired = this.colaRunsRequired();
  _o.colaPointsOfContact = this.bb!.createObjList<EPM, EPMT>(this.colaPointsOfContact.bind(this), this.colaPointsOfContactLength());
  _o.orbitalParameters = this.bb!.createScalarList<string>(this.orbitalParameters.bind(this), this.orbitalParametersLength());
  _o.burnOutVectors = this.bb!.createObjList<BOV, BOVT>(this.burnOutVectors.bind(this), this.burnOutVectorsLength());
}
}

export class LDMT implements flatbuffers.IGeneratedObject {
constructor(
  public site: SITT|null = null,
  public azimuth: number = 0.0,
  public references: string|Uint8Array|null = null,
  public agencyName: string|Uint8Array|null = null,
  public pointsOfContact: (EPMT)[] = [],
  public operationsPointsOfContact: (EPMT)[] = [],
  public net: string|Uint8Array|null = null,
  public rocketConfiguration: ROCT|null = null,
  public missionName: string|Uint8Array|null = null,
  public missionDescription: string|Uint8Array|null = null,
  public missionType: string|Uint8Array|null = null,
  public orbitType: string|Uint8Array|null = null,
  public weatherConditions: string|Uint8Array|null = null,
  public launchStatus: string|Uint8Array|null = null,
  public webcastUrl: string|Uint8Array|null = null,
  public mediaLinks: (string)[] = [],
  public earliestLaunchTimes: (string)[] = [],
  public latestLaunchTimes: (string)[] = [],
  public lcolaWindowClosures: (string)[] = [],
  public objects: (CATT)[] = [],
  public trackingRequirements: (string)[] = [],
  public colaScreenDuration: string|Uint8Array|null = null,
  public probabilityOfCollisionThreshold: string|Uint8Array|null = null,
  public colaRunsRequired: string|Uint8Array|null = null,
  public colaPointsOfContact: (EPMT)[] = [],
  public orbitalParameters: (string)[] = [],
  public burnOutVectors: (BOVT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const site = (this.site !== null ? this.site!.pack(builder) : 0);
  const references = (this.references !== null ? builder.createString(this.references!) : 0);
  const agencyName = (this.agencyName !== null ? builder.createString(this.agencyName!) : 0);
  const pointsOfContact = LDM.createPointsOfContactVector(builder, builder.createObjectOffsetList(this.pointsOfContact));
  const operationsPointsOfContact = LDM.createOperationsPointsOfContactVector(builder, builder.createObjectOffsetList(this.operationsPointsOfContact));
  const net = (this.net !== null ? builder.createString(this.net!) : 0);
  const rocketConfiguration = (this.rocketConfiguration !== null ? this.rocketConfiguration!.pack(builder) : 0);
  const missionName = (this.missionName !== null ? builder.createString(this.missionName!) : 0);
  const missionDescription = (this.missionDescription !== null ? builder.createString(this.missionDescription!) : 0);
  const missionType = (this.missionType !== null ? builder.createString(this.missionType!) : 0);
  const orbitType = (this.orbitType !== null ? builder.createString(this.orbitType!) : 0);
  const weatherConditions = (this.weatherConditions !== null ? builder.createString(this.weatherConditions!) : 0);
  const launchStatus = (this.launchStatus !== null ? builder.createString(this.launchStatus!) : 0);
  const webcastUrl = (this.webcastUrl !== null ? builder.createString(this.webcastUrl!) : 0);
  const mediaLinks = LDM.createMediaLinksVector(builder, builder.createObjectOffsetList(this.mediaLinks));
  const earliestLaunchTimes = LDM.createEarliestLaunchTimesVector(builder, builder.createObjectOffsetList(this.earliestLaunchTimes));
  const latestLaunchTimes = LDM.createLatestLaunchTimesVector(builder, builder.createObjectOffsetList(this.latestLaunchTimes));
  const lcolaWindowClosures = LDM.createLcolaWindowClosuresVector(builder, builder.createObjectOffsetList(this.lcolaWindowClosures));
  const objects = LDM.createObjectsVector(builder, builder.createObjectOffsetList(this.objects));
  const trackingRequirements = LDM.createTrackingRequirementsVector(builder, builder.createObjectOffsetList(this.trackingRequirements));
  const colaScreenDuration = (this.colaScreenDuration !== null ? builder.createString(this.colaScreenDuration!) : 0);
  const probabilityOfCollisionThreshold = (this.probabilityOfCollisionThreshold !== null ? builder.createString(this.probabilityOfCollisionThreshold!) : 0);
  const colaRunsRequired = (this.colaRunsRequired !== null ? builder.createString(this.colaRunsRequired!) : 0);
  const colaPointsOfContact = LDM.createColaPointsOfContactVector(builder, builder.createObjectOffsetList(this.colaPointsOfContact));
  const orbitalParameters = LDM.createOrbitalParametersVector(builder, builder.createObjectOffsetList(this.orbitalParameters));
  const burnOutVectors = LDM.createBurnOutVectorsVector(builder, builder.createObjectOffsetList(this.burnOutVectors));

  LDM.startLDM(builder);
  LDM.addSite(builder, site);
  LDM.addAzimuth(builder, this.azimuth);
  LDM.addReferences(builder, references);
  LDM.addAgencyName(builder, agencyName);
  LDM.addPointsOfContact(builder, pointsOfContact);
  LDM.addOperationsPointsOfContact(builder, operationsPointsOfContact);
  LDM.addNet(builder, net);
  LDM.addRocketConfiguration(builder, rocketConfiguration);
  LDM.addMissionName(builder, missionName);
  LDM.addMissionDescription(builder, missionDescription);
  LDM.addMissionType(builder, missionType);
  LDM.addOrbitType(builder, orbitType);
  LDM.addWeatherConditions(builder, weatherConditions);
  LDM.addLaunchStatus(builder, launchStatus);
  LDM.addWebcastUrl(builder, webcastUrl);
  LDM.addMediaLinks(builder, mediaLinks);
  LDM.addEarliestLaunchTimes(builder, earliestLaunchTimes);
  LDM.addLatestLaunchTimes(builder, latestLaunchTimes);
  LDM.addLcolaWindowClosures(builder, lcolaWindowClosures);
  LDM.addObjects(builder, objects);
  LDM.addTrackingRequirements(builder, trackingRequirements);
  LDM.addColaScreenDuration(builder, colaScreenDuration);
  LDM.addProbabilityOfCollisionThreshold(builder, probabilityOfCollisionThreshold);
  LDM.addColaRunsRequired(builder, colaRunsRequired);
  LDM.addColaPointsOfContact(builder, colaPointsOfContact);
  LDM.addOrbitalParameters(builder, orbitalParameters);
  LDM.addBurnOutVectors(builder, burnOutVectors);

  return LDM.endLDM(builder);
}
}
