// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Country Identity Message
 */
export class CTR implements flatbuffers.IUnpackableObject<CTRT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CTR {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCTR(bb:flatbuffers.ByteBuffer, obj?:CTR):CTR {
  return (obj || new CTR()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCTR(bb:flatbuffers.ByteBuffer, obj?:CTR):CTR {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CTR()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$CTR');
}

/**
 * ISO 3166 Numeric code
 */
ID():string|null
ID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Country name
 */
NAME():string|null
NAME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
NAME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * GENC code
 */
GENC_CODE():string|null
GENC_CODE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
GENC_CODE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ISO 3166 Alpha-2 code
 */
ALPHA_2_CODE():string|null
ALPHA_2_CODE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ALPHA_2_CODE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ISO 3166 Alpha-3 code
 */
ALPHA_3_CODE():string|null
ALPHA_3_CODE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ALPHA_3_CODE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Stanag code
 */
STANAG_CODE():string|null
STANAG_CODE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
STANAG_CODE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Internet country code top-level domain (ccTLD)
 */
INTERNET_CCTLD():string|null
INTERNET_CCTLD(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
INTERNET_CCTLD(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional comments
 */
COMMENT():string|null
COMMENT(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
COMMENT(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startCTR(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addId(builder:flatbuffers.Builder, IDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, IDOffset, 0);
}

static addName(builder:flatbuffers.Builder, NAMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, NAMEOffset, 0);
}

static addGencCode(builder:flatbuffers.Builder, GENC_CODEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, GENC_CODEOffset, 0);
}

static addAlpha2Code(builder:flatbuffers.Builder, ALPHA_2_CODEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, ALPHA_2_CODEOffset, 0);
}

static addAlpha3Code(builder:flatbuffers.Builder, ALPHA_3_CODEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, ALPHA_3_CODEOffset, 0);
}

static addStanagCode(builder:flatbuffers.Builder, STANAG_CODEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, STANAG_CODEOffset, 0);
}

static addInternetCctld(builder:flatbuffers.Builder, INTERNET_CCTLDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, INTERNET_CCTLDOffset, 0);
}

static addComment(builder:flatbuffers.Builder, COMMENTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, COMMENTOffset, 0);
}

static endCTR(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCTRBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$CTR');
}

static finishSizePrefixedCTRBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$CTR', true);
}

static createCTR(builder:flatbuffers.Builder, IDOffset:flatbuffers.Offset, NAMEOffset:flatbuffers.Offset, GENC_CODEOffset:flatbuffers.Offset, ALPHA_2_CODEOffset:flatbuffers.Offset, ALPHA_3_CODEOffset:flatbuffers.Offset, STANAG_CODEOffset:flatbuffers.Offset, INTERNET_CCTLDOffset:flatbuffers.Offset, COMMENTOffset:flatbuffers.Offset):flatbuffers.Offset {
  CTR.startCTR(builder);
  CTR.addId(builder, IDOffset);
  CTR.addName(builder, NAMEOffset);
  CTR.addGencCode(builder, GENC_CODEOffset);
  CTR.addAlpha2Code(builder, ALPHA_2_CODEOffset);
  CTR.addAlpha3Code(builder, ALPHA_3_CODEOffset);
  CTR.addStanagCode(builder, STANAG_CODEOffset);
  CTR.addInternetCctld(builder, INTERNET_CCTLDOffset);
  CTR.addComment(builder, COMMENTOffset);
  return CTR.endCTR(builder);
}

unpack(): CTRT {
  return new CTRT(
    this.ID(),
    this.NAME(),
    this.GENC_CODE(),
    this.ALPHA_2_CODE(),
    this.ALPHA_3_CODE(),
    this.STANAG_CODE(),
    this.INTERNET_CCTLD(),
    this.COMMENT()
  );
}


unpackTo(_o: CTRT): void {
  _o.ID = this.ID();
  _o.NAME = this.NAME();
  _o.GENC_CODE = this.GENC_CODE();
  _o.ALPHA_2_CODE = this.ALPHA_2_CODE();
  _o.ALPHA_3_CODE = this.ALPHA_3_CODE();
  _o.STANAG_CODE = this.STANAG_CODE();
  _o.INTERNET_CCTLD = this.INTERNET_CCTLD();
  _o.COMMENT = this.COMMENT();
}
}

export class CTRT implements flatbuffers.IGeneratedObject {
constructor(
  public ID: string|Uint8Array|null = null,
  public NAME: string|Uint8Array|null = null,
  public GENC_CODE: string|Uint8Array|null = null,
  public ALPHA_2_CODE: string|Uint8Array|null = null,
  public ALPHA_3_CODE: string|Uint8Array|null = null,
  public STANAG_CODE: string|Uint8Array|null = null,
  public INTERNET_CCTLD: string|Uint8Array|null = null,
  public COMMENT: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const ID = (this.ID !== null ? builder.createString(this.ID!) : 0);
  const NAME = (this.NAME !== null ? builder.createString(this.NAME!) : 0);
  const GENC_CODE = (this.GENC_CODE !== null ? builder.createString(this.GENC_CODE!) : 0);
  const ALPHA_2_CODE = (this.ALPHA_2_CODE !== null ? builder.createString(this.ALPHA_2_CODE!) : 0);
  const ALPHA_3_CODE = (this.ALPHA_3_CODE !== null ? builder.createString(this.ALPHA_3_CODE!) : 0);
  const STANAG_CODE = (this.STANAG_CODE !== null ? builder.createString(this.STANAG_CODE!) : 0);
  const INTERNET_CCTLD = (this.INTERNET_CCTLD !== null ? builder.createString(this.INTERNET_CCTLD!) : 0);
  const COMMENT = (this.COMMENT !== null ? builder.createString(this.COMMENT!) : 0);

  return CTR.createCTR(builder,
    ID,
    NAME,
    GENC_CODE,
    ALPHA_2_CODE,
    ALPHA_3_CODE,
    STANAG_CODE,
    INTERNET_CCTLD,
    COMMENT
  );
}
}
