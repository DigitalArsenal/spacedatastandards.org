// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * Stokes parameters, representing different aspects of polarization
 */
export class StokesParameters implements flatbuffers.IUnpackableObject<StokesParametersT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StokesParameters {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStokesParameters(bb:flatbuffers.ByteBuffer, obj?:StokesParameters):StokesParameters {
  return (obj || new StokesParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStokesParameters(bb:flatbuffers.ByteBuffer, obj?:StokesParameters):StokesParameters {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StokesParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Intensity
 */
i():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Linear polarization
 */
q():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Another linear polarization, orthogonal to Q
 */
u():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Circular polarization
 */
v():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startStokesParameters(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addI(builder:flatbuffers.Builder, i:number) {
  builder.addFieldFloat64(0, i, 0.0);
}

static addQ(builder:flatbuffers.Builder, q:number) {
  builder.addFieldFloat64(1, q, 0.0);
}

static addU(builder:flatbuffers.Builder, u:number) {
  builder.addFieldFloat64(2, u, 0.0);
}

static addV(builder:flatbuffers.Builder, v:number) {
  builder.addFieldFloat64(3, v, 0.0);
}

static endStokesParameters(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createStokesParameters(builder:flatbuffers.Builder, i:number, q:number, u:number, v:number):flatbuffers.Offset {
  StokesParameters.startStokesParameters(builder);
  StokesParameters.addI(builder, i);
  StokesParameters.addQ(builder, q);
  StokesParameters.addU(builder, u);
  StokesParameters.addV(builder, v);
  return StokesParameters.endStokesParameters(builder);
}

unpack(): StokesParametersT {
  return new StokesParametersT(
    this.i(),
    this.q(),
    this.u(),
    this.v()
  );
}


unpackTo(_o: StokesParametersT): void {
  _o.i = this.i();
  _o.q = this.q();
  _o.u = this.u();
  _o.v = this.v();
}
}

export class StokesParametersT implements flatbuffers.IGeneratedObject {
constructor(
  public i: number = 0.0,
  public q: number = 0.0,
  public u: number = 0.0,
  public v: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return StokesParameters.createStokesParameters(builder,
    this.i,
    this.q,
    this.u,
    this.v
  );
}
}
