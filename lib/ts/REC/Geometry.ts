// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Geometry table with information about geometric properties
 */
export class Geometry implements flatbuffers.IUnpackableObject<GeometryT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Geometry {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGeometry(bb:flatbuffers.ByteBuffer, obj?:Geometry):Geometry {
  return (obj || new Geometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGeometry(bb:flatbuffers.ByteBuffer, obj?:Geometry):Geometry {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Geometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Type of geometry
 */
GEOMETRY_TYPE():string|null
GEOMETRY_TYPE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
GEOMETRY_TYPE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Coordinates of the geometry
 */
COORDINATES(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

coordinatesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

coordinatesArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGeometry(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addGeometryType(builder:flatbuffers.Builder, GEOMETRY_TYPEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, GEOMETRY_TYPEOffset, 0);
}

static addCoordinates(builder:flatbuffers.Builder, COORDINATESOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, COORDINATESOffset, 0);
}

static createCoordinatesVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createCoordinatesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createCoordinatesVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startCoordinatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endGeometry(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGeometry(builder:flatbuffers.Builder, GEOMETRY_TYPEOffset:flatbuffers.Offset, COORDINATESOffset:flatbuffers.Offset):flatbuffers.Offset {
  Geometry.startGeometry(builder);
  Geometry.addGeometryType(builder, GEOMETRY_TYPEOffset);
  Geometry.addCoordinates(builder, COORDINATESOffset);
  return Geometry.endGeometry(builder);
}

unpack(): GeometryT {
  return new GeometryT(
    this.GEOMETRY_TYPE(),
    this.bb!.createScalarList<number>(this.COORDINATES.bind(this), this.coordinatesLength())
  );
}


unpackTo(_o: GeometryT): void {
  _o.GEOMETRY_TYPE = this.GEOMETRY_TYPE();
  _o.COORDINATES = this.bb!.createScalarList<number>(this.COORDINATES.bind(this), this.coordinatesLength());
}
}

export class GeometryT implements flatbuffers.IGeneratedObject {
constructor(
  public GEOMETRY_TYPE: string|Uint8Array|null = null,
  public COORDINATES: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const GEOMETRY_TYPE = (this.GEOMETRY_TYPE !== null ? builder.createString(this.GEOMETRY_TYPE!) : 0);
  const COORDINATES = Geometry.createCoordinatesVector(builder, this.COORDINATES);

  return Geometry.createGeometry(builder,
    GEOMETRY_TYPE,
    COORDINATES
  );
}
}
