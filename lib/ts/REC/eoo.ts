// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { refFrame } from './ref-frame.js';


/**
 * Electro-Optical Observation
 */
export class EOO implements flatbuffers.IUnpackableObject<EOOT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EOO {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEOO(bb:flatbuffers.ByteBuffer, obj?:EOO):EOO {
  return (obj || new EOO()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEOO(bb:flatbuffers.ByteBuffer, obj?:EOO):EOO {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EOO()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$EOO');
}

/**
 * Unique identifier for Earth Observation Observation
 */
eobservationId():string|null
eobservationId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
eobservationId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data
 */
classification():string|null
classification(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classification(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Observation time in UTC
 */
obTime():string|null
obTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Quality of the correlation
 */
corrQuality():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Identifier for the satellite on orbit
 */
idOnOrbit():string|null
idOnOrbit(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idOnOrbit(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier for the sensor
 */
sensorId():string|null
sensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Method of data collection
 */
collectMethod():string|null
collectMethod(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
collectMethod(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * NORAD catalog identifier for the satellite
 */
noradCatId():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Identifier for the task
 */
taskId():string|null
taskId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
taskId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier for the transaction
 */
transactionId():string|null
transactionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transactionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier for the track
 */
trackId():string|null
trackId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
trackId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Position of the observation
 */
obPosition():string|null
obPosition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
obPosition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Original object identifier
 */
origObjectId():string|null
origObjectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origObjectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Original sensor identifier
 */
origSensorId():string|null
origSensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origSensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Universal Coordinated Time flag
 */
uct():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Azimuth angle
 */
azimuth():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in azimuth angle
 */
azimuthUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Bias in azimuth angle
 */
azimuthBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change in azimuth
 */
azimuthRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Elevation angle
 */
elevation():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in elevation angle
 */
elevationUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Bias in elevation angle
 */
elevationBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change in elevation
 */
elevationRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Range to the target
 */
range():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in range
 */
rangeUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Bias in range measurement
 */
rangeBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change in range
 */
rangeRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in range rate
 */
rangeRateUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Right ascension
 */
ra():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change in right ascension
 */
raRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in right ascension
 */
raUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Bias in right ascension
 */
raBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Declination angle
 */
declination():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change in declination
 */
declinationRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in declination
 */
declinationUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Bias in declination
 */
declinationBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * X-component of line-of-sight vector
 */
losx():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Y-component of line-of-sight vector
 */
losy():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Z-component of line-of-sight vector
 */
losz():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in line-of-sight vector
 */
losUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * X-component of line-of-sight velocity
 */
losxvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Y-component of line-of-sight velocity
 */
losyvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Z-component of line-of-sight velocity
 */
loszvel():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Latitude of sensor
 */
senlat():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Longitude of sensor
 */
senlon():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Altitude of sensor
 */
senalt():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * X-coordinate of sensor position
 */
senx():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Y-coordinate of sensor position
 */
seny():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Z-coordinate of sensor position
 */
senz():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Number of fields of view
 */
fovCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Duration of the exposure
 */
expDuration():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Zero-point displacement
 */
zeroptd():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Net object signal
 */
netObjSig():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in net object signal
 */
netObjSigUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Magnitude of the observation
 */
mag():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in magnitude
 */
magUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Normalized range for magnitude
 */
magNormRange():number {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Geocentric latitude
 */
geolat():number {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Geocentric longitude
 */
geolon():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Geocentric altitude
 */
geoalt():number {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Geocentric range
 */
georange():number {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Sky background level
 */
skyBkgrnd():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Primary extinction
 */
primaryExtinction():number {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in primary extinction
 */
primaryExtinctionUnc():number {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Solar phase angle
 */
solarPhaseAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Solar equatorial phase angle
 */
solarEqPhaseAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Solar declination angle
 */
solarDecAngle():number {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Shutter delay
 */
shutterDelay():number {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Timing bias
 */
timingBias():number {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * URI of the raw data file
 */
rawFileUri():string|null
rawFileUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rawFileUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Intensity of the observation
 */
intensity():number {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Background intensity
 */
bgIntensity():number {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Descriptor of the provided data
 */
descriptor():string|null
descriptor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
descriptor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data
 */
source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Origin of the data
 */
origin():string|null
origin(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origin(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mode of the data
 */
dataMode():string|null
dataMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Creation time of the record
 */
createdAt():string|null
createdAt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdAt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * User who created the record
 */
createdBy():string|null
createdBy(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
createdBy(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Reference frame of the observation
 */
referenceFrame():refFrame {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : refFrame.ECEF;
}

/**
 * Reference frame of the sensor
 */
senReferenceFrame():string|null
senReferenceFrame(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
senReferenceFrame(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Flag for umbra (total eclipse)
 */
umbra():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Flag for penumbra (partial eclipse)
 */
penumbra():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Original network identifier
 */
origNetwork():string|null
origNetwork(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
origNetwork(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 168);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Data link source
 */
sourceDl():string|null
sourceDl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sourceDl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of the observation
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 172);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEOO(builder:flatbuffers.Builder) {
  builder.startObject(85);
}

static addEobservationId(builder:flatbuffers.Builder, eobservationIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, eobservationIdOffset, 0);
}

static addClassification(builder:flatbuffers.Builder, classificationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classificationOffset, 0);
}

static addObTime(builder:flatbuffers.Builder, obTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, obTimeOffset, 0);
}

static addCorrQuality(builder:flatbuffers.Builder, corrQuality:number) {
  builder.addFieldFloat32(3, corrQuality, 0.0);
}

static addIdOnOrbit(builder:flatbuffers.Builder, idOnOrbitOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, idOnOrbitOffset, 0);
}

static addSensorId(builder:flatbuffers.Builder, sensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, sensorIdOffset, 0);
}

static addCollectMethod(builder:flatbuffers.Builder, collectMethodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, collectMethodOffset, 0);
}

static addNoradCatId(builder:flatbuffers.Builder, noradCatId:number) {
  builder.addFieldInt32(7, noradCatId, 0);
}

static addTaskId(builder:flatbuffers.Builder, taskIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, taskIdOffset, 0);
}

static addTransactionId(builder:flatbuffers.Builder, transactionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, transactionIdOffset, 0);
}

static addTrackId(builder:flatbuffers.Builder, trackIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, trackIdOffset, 0);
}

static addObPosition(builder:flatbuffers.Builder, obPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, obPositionOffset, 0);
}

static addOrigObjectId(builder:flatbuffers.Builder, origObjectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, origObjectIdOffset, 0);
}

static addOrigSensorId(builder:flatbuffers.Builder, origSensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, origSensorIdOffset, 0);
}

static addUct(builder:flatbuffers.Builder, uct:boolean) {
  builder.addFieldInt8(14, +uct, +false);
}

static addAzimuth(builder:flatbuffers.Builder, azimuth:number) {
  builder.addFieldFloat32(15, azimuth, 0.0);
}

static addAzimuthUnc(builder:flatbuffers.Builder, azimuthUnc:number) {
  builder.addFieldFloat32(16, azimuthUnc, 0.0);
}

static addAzimuthBias(builder:flatbuffers.Builder, azimuthBias:number) {
  builder.addFieldFloat32(17, azimuthBias, 0.0);
}

static addAzimuthRate(builder:flatbuffers.Builder, azimuthRate:number) {
  builder.addFieldFloat32(18, azimuthRate, 0.0);
}

static addElevation(builder:flatbuffers.Builder, elevation:number) {
  builder.addFieldFloat32(19, elevation, 0.0);
}

static addElevationUnc(builder:flatbuffers.Builder, elevationUnc:number) {
  builder.addFieldFloat32(20, elevationUnc, 0.0);
}

static addElevationBias(builder:flatbuffers.Builder, elevationBias:number) {
  builder.addFieldFloat32(21, elevationBias, 0.0);
}

static addElevationRate(builder:flatbuffers.Builder, elevationRate:number) {
  builder.addFieldFloat32(22, elevationRate, 0.0);
}

static addRange(builder:flatbuffers.Builder, range:number) {
  builder.addFieldFloat32(23, range, 0.0);
}

static addRangeUnc(builder:flatbuffers.Builder, rangeUnc:number) {
  builder.addFieldFloat32(24, rangeUnc, 0.0);
}

static addRangeBias(builder:flatbuffers.Builder, rangeBias:number) {
  builder.addFieldFloat32(25, rangeBias, 0.0);
}

static addRangeRate(builder:flatbuffers.Builder, rangeRate:number) {
  builder.addFieldFloat32(26, rangeRate, 0.0);
}

static addRangeRateUnc(builder:flatbuffers.Builder, rangeRateUnc:number) {
  builder.addFieldFloat32(27, rangeRateUnc, 0.0);
}

static addRa(builder:flatbuffers.Builder, ra:number) {
  builder.addFieldFloat32(28, ra, 0.0);
}

static addRaRate(builder:flatbuffers.Builder, raRate:number) {
  builder.addFieldFloat32(29, raRate, 0.0);
}

static addRaUnc(builder:flatbuffers.Builder, raUnc:number) {
  builder.addFieldFloat32(30, raUnc, 0.0);
}

static addRaBias(builder:flatbuffers.Builder, raBias:number) {
  builder.addFieldFloat32(31, raBias, 0.0);
}

static addDeclination(builder:flatbuffers.Builder, declination:number) {
  builder.addFieldFloat32(32, declination, 0.0);
}

static addDeclinationRate(builder:flatbuffers.Builder, declinationRate:number) {
  builder.addFieldFloat32(33, declinationRate, 0.0);
}

static addDeclinationUnc(builder:flatbuffers.Builder, declinationUnc:number) {
  builder.addFieldFloat32(34, declinationUnc, 0.0);
}

static addDeclinationBias(builder:flatbuffers.Builder, declinationBias:number) {
  builder.addFieldFloat32(35, declinationBias, 0.0);
}

static addLosx(builder:flatbuffers.Builder, losx:number) {
  builder.addFieldFloat32(36, losx, 0.0);
}

static addLosy(builder:flatbuffers.Builder, losy:number) {
  builder.addFieldFloat32(37, losy, 0.0);
}

static addLosz(builder:flatbuffers.Builder, losz:number) {
  builder.addFieldFloat32(38, losz, 0.0);
}

static addLosUnc(builder:flatbuffers.Builder, losUnc:number) {
  builder.addFieldFloat32(39, losUnc, 0.0);
}

static addLosxvel(builder:flatbuffers.Builder, losxvel:number) {
  builder.addFieldFloat32(40, losxvel, 0.0);
}

static addLosyvel(builder:flatbuffers.Builder, losyvel:number) {
  builder.addFieldFloat32(41, losyvel, 0.0);
}

static addLoszvel(builder:flatbuffers.Builder, loszvel:number) {
  builder.addFieldFloat32(42, loszvel, 0.0);
}

static addSenlat(builder:flatbuffers.Builder, senlat:number) {
  builder.addFieldFloat32(43, senlat, 0.0);
}

static addSenlon(builder:flatbuffers.Builder, senlon:number) {
  builder.addFieldFloat32(44, senlon, 0.0);
}

static addSenalt(builder:flatbuffers.Builder, senalt:number) {
  builder.addFieldFloat32(45, senalt, 0.0);
}

static addSenx(builder:flatbuffers.Builder, senx:number) {
  builder.addFieldFloat32(46, senx, 0.0);
}

static addSeny(builder:flatbuffers.Builder, seny:number) {
  builder.addFieldFloat32(47, seny, 0.0);
}

static addSenz(builder:flatbuffers.Builder, senz:number) {
  builder.addFieldFloat32(48, senz, 0.0);
}

static addFovCount(builder:flatbuffers.Builder, fovCount:number) {
  builder.addFieldInt32(49, fovCount, 0);
}

static addExpDuration(builder:flatbuffers.Builder, expDuration:number) {
  builder.addFieldFloat32(50, expDuration, 0.0);
}

static addZeroptd(builder:flatbuffers.Builder, zeroptd:number) {
  builder.addFieldFloat32(51, zeroptd, 0.0);
}

static addNetObjSig(builder:flatbuffers.Builder, netObjSig:number) {
  builder.addFieldFloat32(52, netObjSig, 0.0);
}

static addNetObjSigUnc(builder:flatbuffers.Builder, netObjSigUnc:number) {
  builder.addFieldFloat32(53, netObjSigUnc, 0.0);
}

static addMag(builder:flatbuffers.Builder, mag:number) {
  builder.addFieldFloat32(54, mag, 0.0);
}

static addMagUnc(builder:flatbuffers.Builder, magUnc:number) {
  builder.addFieldFloat32(55, magUnc, 0.0);
}

static addMagNormRange(builder:flatbuffers.Builder, magNormRange:number) {
  builder.addFieldFloat32(56, magNormRange, 0.0);
}

static addGeolat(builder:flatbuffers.Builder, geolat:number) {
  builder.addFieldFloat32(57, geolat, 0.0);
}

static addGeolon(builder:flatbuffers.Builder, geolon:number) {
  builder.addFieldFloat32(58, geolon, 0.0);
}

static addGeoalt(builder:flatbuffers.Builder, geoalt:number) {
  builder.addFieldFloat32(59, geoalt, 0.0);
}

static addGeorange(builder:flatbuffers.Builder, georange:number) {
  builder.addFieldFloat32(60, georange, 0.0);
}

static addSkyBkgrnd(builder:flatbuffers.Builder, skyBkgrnd:number) {
  builder.addFieldFloat32(61, skyBkgrnd, 0.0);
}

static addPrimaryExtinction(builder:flatbuffers.Builder, primaryExtinction:number) {
  builder.addFieldFloat32(62, primaryExtinction, 0.0);
}

static addPrimaryExtinctionUnc(builder:flatbuffers.Builder, primaryExtinctionUnc:number) {
  builder.addFieldFloat32(63, primaryExtinctionUnc, 0.0);
}

static addSolarPhaseAngle(builder:flatbuffers.Builder, solarPhaseAngle:number) {
  builder.addFieldFloat32(64, solarPhaseAngle, 0.0);
}

static addSolarEqPhaseAngle(builder:flatbuffers.Builder, solarEqPhaseAngle:number) {
  builder.addFieldFloat32(65, solarEqPhaseAngle, 0.0);
}

static addSolarDecAngle(builder:flatbuffers.Builder, solarDecAngle:number) {
  builder.addFieldFloat32(66, solarDecAngle, 0.0);
}

static addShutterDelay(builder:flatbuffers.Builder, shutterDelay:number) {
  builder.addFieldFloat32(67, shutterDelay, 0.0);
}

static addTimingBias(builder:flatbuffers.Builder, timingBias:number) {
  builder.addFieldFloat32(68, timingBias, 0.0);
}

static addRawFileUri(builder:flatbuffers.Builder, rawFileUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(69, rawFileUriOffset, 0);
}

static addIntensity(builder:flatbuffers.Builder, intensity:number) {
  builder.addFieldFloat32(70, intensity, 0.0);
}

static addBgIntensity(builder:flatbuffers.Builder, bgIntensity:number) {
  builder.addFieldFloat32(71, bgIntensity, 0.0);
}

static addDescriptor(builder:flatbuffers.Builder, descriptorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(72, descriptorOffset, 0);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(73, sourceOffset, 0);
}

static addOrigin(builder:flatbuffers.Builder, originOffset:flatbuffers.Offset) {
  builder.addFieldOffset(74, originOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, dataModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(75, dataModeOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(76, createdAtOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, createdByOffset:flatbuffers.Offset) {
  builder.addFieldOffset(77, createdByOffset, 0);
}

static addReferenceFrame(builder:flatbuffers.Builder, referenceFrame:refFrame) {
  builder.addFieldInt8(78, referenceFrame, refFrame.ECEF);
}

static addSenReferenceFrame(builder:flatbuffers.Builder, senReferenceFrameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(79, senReferenceFrameOffset, 0);
}

static addUmbra(builder:flatbuffers.Builder, umbra:boolean) {
  builder.addFieldInt8(80, +umbra, +false);
}

static addPenumbra(builder:flatbuffers.Builder, penumbra:boolean) {
  builder.addFieldInt8(81, +penumbra, +false);
}

static addOrigNetwork(builder:flatbuffers.Builder, origNetworkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(82, origNetworkOffset, 0);
}

static addSourceDl(builder:flatbuffers.Builder, sourceDlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(83, sourceDlOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(84, typeOffset, 0);
}

static endEOO(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEOOBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$EOO');
}

static finishSizePrefixedEOOBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$EOO', true);
}

static createEOO(builder:flatbuffers.Builder, eobservationIdOffset:flatbuffers.Offset, classificationOffset:flatbuffers.Offset, obTimeOffset:flatbuffers.Offset, corrQuality:number, idOnOrbitOffset:flatbuffers.Offset, sensorIdOffset:flatbuffers.Offset, collectMethodOffset:flatbuffers.Offset, noradCatId:number, taskIdOffset:flatbuffers.Offset, transactionIdOffset:flatbuffers.Offset, trackIdOffset:flatbuffers.Offset, obPositionOffset:flatbuffers.Offset, origObjectIdOffset:flatbuffers.Offset, origSensorIdOffset:flatbuffers.Offset, uct:boolean, azimuth:number, azimuthUnc:number, azimuthBias:number, azimuthRate:number, elevation:number, elevationUnc:number, elevationBias:number, elevationRate:number, range:number, rangeUnc:number, rangeBias:number, rangeRate:number, rangeRateUnc:number, ra:number, raRate:number, raUnc:number, raBias:number, declination:number, declinationRate:number, declinationUnc:number, declinationBias:number, losx:number, losy:number, losz:number, losUnc:number, losxvel:number, losyvel:number, loszvel:number, senlat:number, senlon:number, senalt:number, senx:number, seny:number, senz:number, fovCount:number, expDuration:number, zeroptd:number, netObjSig:number, netObjSigUnc:number, mag:number, magUnc:number, magNormRange:number, geolat:number, geolon:number, geoalt:number, georange:number, skyBkgrnd:number, primaryExtinction:number, primaryExtinctionUnc:number, solarPhaseAngle:number, solarEqPhaseAngle:number, solarDecAngle:number, shutterDelay:number, timingBias:number, rawFileUriOffset:flatbuffers.Offset, intensity:number, bgIntensity:number, descriptorOffset:flatbuffers.Offset, sourceOffset:flatbuffers.Offset, originOffset:flatbuffers.Offset, dataModeOffset:flatbuffers.Offset, createdAtOffset:flatbuffers.Offset, createdByOffset:flatbuffers.Offset, referenceFrame:refFrame, senReferenceFrameOffset:flatbuffers.Offset, umbra:boolean, penumbra:boolean, origNetworkOffset:flatbuffers.Offset, sourceDlOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset):flatbuffers.Offset {
  EOO.startEOO(builder);
  EOO.addEobservationId(builder, eobservationIdOffset);
  EOO.addClassification(builder, classificationOffset);
  EOO.addObTime(builder, obTimeOffset);
  EOO.addCorrQuality(builder, corrQuality);
  EOO.addIdOnOrbit(builder, idOnOrbitOffset);
  EOO.addSensorId(builder, sensorIdOffset);
  EOO.addCollectMethod(builder, collectMethodOffset);
  EOO.addNoradCatId(builder, noradCatId);
  EOO.addTaskId(builder, taskIdOffset);
  EOO.addTransactionId(builder, transactionIdOffset);
  EOO.addTrackId(builder, trackIdOffset);
  EOO.addObPosition(builder, obPositionOffset);
  EOO.addOrigObjectId(builder, origObjectIdOffset);
  EOO.addOrigSensorId(builder, origSensorIdOffset);
  EOO.addUct(builder, uct);
  EOO.addAzimuth(builder, azimuth);
  EOO.addAzimuthUnc(builder, azimuthUnc);
  EOO.addAzimuthBias(builder, azimuthBias);
  EOO.addAzimuthRate(builder, azimuthRate);
  EOO.addElevation(builder, elevation);
  EOO.addElevationUnc(builder, elevationUnc);
  EOO.addElevationBias(builder, elevationBias);
  EOO.addElevationRate(builder, elevationRate);
  EOO.addRange(builder, range);
  EOO.addRangeUnc(builder, rangeUnc);
  EOO.addRangeBias(builder, rangeBias);
  EOO.addRangeRate(builder, rangeRate);
  EOO.addRangeRateUnc(builder, rangeRateUnc);
  EOO.addRa(builder, ra);
  EOO.addRaRate(builder, raRate);
  EOO.addRaUnc(builder, raUnc);
  EOO.addRaBias(builder, raBias);
  EOO.addDeclination(builder, declination);
  EOO.addDeclinationRate(builder, declinationRate);
  EOO.addDeclinationUnc(builder, declinationUnc);
  EOO.addDeclinationBias(builder, declinationBias);
  EOO.addLosx(builder, losx);
  EOO.addLosy(builder, losy);
  EOO.addLosz(builder, losz);
  EOO.addLosUnc(builder, losUnc);
  EOO.addLosxvel(builder, losxvel);
  EOO.addLosyvel(builder, losyvel);
  EOO.addLoszvel(builder, loszvel);
  EOO.addSenlat(builder, senlat);
  EOO.addSenlon(builder, senlon);
  EOO.addSenalt(builder, senalt);
  EOO.addSenx(builder, senx);
  EOO.addSeny(builder, seny);
  EOO.addSenz(builder, senz);
  EOO.addFovCount(builder, fovCount);
  EOO.addExpDuration(builder, expDuration);
  EOO.addZeroptd(builder, zeroptd);
  EOO.addNetObjSig(builder, netObjSig);
  EOO.addNetObjSigUnc(builder, netObjSigUnc);
  EOO.addMag(builder, mag);
  EOO.addMagUnc(builder, magUnc);
  EOO.addMagNormRange(builder, magNormRange);
  EOO.addGeolat(builder, geolat);
  EOO.addGeolon(builder, geolon);
  EOO.addGeoalt(builder, geoalt);
  EOO.addGeorange(builder, georange);
  EOO.addSkyBkgrnd(builder, skyBkgrnd);
  EOO.addPrimaryExtinction(builder, primaryExtinction);
  EOO.addPrimaryExtinctionUnc(builder, primaryExtinctionUnc);
  EOO.addSolarPhaseAngle(builder, solarPhaseAngle);
  EOO.addSolarEqPhaseAngle(builder, solarEqPhaseAngle);
  EOO.addSolarDecAngle(builder, solarDecAngle);
  EOO.addShutterDelay(builder, shutterDelay);
  EOO.addTimingBias(builder, timingBias);
  EOO.addRawFileUri(builder, rawFileUriOffset);
  EOO.addIntensity(builder, intensity);
  EOO.addBgIntensity(builder, bgIntensity);
  EOO.addDescriptor(builder, descriptorOffset);
  EOO.addSource(builder, sourceOffset);
  EOO.addOrigin(builder, originOffset);
  EOO.addDataMode(builder, dataModeOffset);
  EOO.addCreatedAt(builder, createdAtOffset);
  EOO.addCreatedBy(builder, createdByOffset);
  EOO.addReferenceFrame(builder, referenceFrame);
  EOO.addSenReferenceFrame(builder, senReferenceFrameOffset);
  EOO.addUmbra(builder, umbra);
  EOO.addPenumbra(builder, penumbra);
  EOO.addOrigNetwork(builder, origNetworkOffset);
  EOO.addSourceDl(builder, sourceDlOffset);
  EOO.addType(builder, typeOffset);
  return EOO.endEOO(builder);
}

unpack(): EOOT {
  return new EOOT(
    this.eobservationId(),
    this.classification(),
    this.obTime(),
    this.corrQuality(),
    this.idOnOrbit(),
    this.sensorId(),
    this.collectMethod(),
    this.noradCatId(),
    this.taskId(),
    this.transactionId(),
    this.trackId(),
    this.obPosition(),
    this.origObjectId(),
    this.origSensorId(),
    this.uct(),
    this.azimuth(),
    this.azimuthUnc(),
    this.azimuthBias(),
    this.azimuthRate(),
    this.elevation(),
    this.elevationUnc(),
    this.elevationBias(),
    this.elevationRate(),
    this.range(),
    this.rangeUnc(),
    this.rangeBias(),
    this.rangeRate(),
    this.rangeRateUnc(),
    this.ra(),
    this.raRate(),
    this.raUnc(),
    this.raBias(),
    this.declination(),
    this.declinationRate(),
    this.declinationUnc(),
    this.declinationBias(),
    this.losx(),
    this.losy(),
    this.losz(),
    this.losUnc(),
    this.losxvel(),
    this.losyvel(),
    this.loszvel(),
    this.senlat(),
    this.senlon(),
    this.senalt(),
    this.senx(),
    this.seny(),
    this.senz(),
    this.fovCount(),
    this.expDuration(),
    this.zeroptd(),
    this.netObjSig(),
    this.netObjSigUnc(),
    this.mag(),
    this.magUnc(),
    this.magNormRange(),
    this.geolat(),
    this.geolon(),
    this.geoalt(),
    this.georange(),
    this.skyBkgrnd(),
    this.primaryExtinction(),
    this.primaryExtinctionUnc(),
    this.solarPhaseAngle(),
    this.solarEqPhaseAngle(),
    this.solarDecAngle(),
    this.shutterDelay(),
    this.timingBias(),
    this.rawFileUri(),
    this.intensity(),
    this.bgIntensity(),
    this.descriptor(),
    this.source(),
    this.origin(),
    this.dataMode(),
    this.createdAt(),
    this.createdBy(),
    this.referenceFrame(),
    this.senReferenceFrame(),
    this.umbra(),
    this.penumbra(),
    this.origNetwork(),
    this.sourceDl(),
    this.type()
  );
}


unpackTo(_o: EOOT): void {
  _o.eobservationId = this.eobservationId();
  _o.classification = this.classification();
  _o.obTime = this.obTime();
  _o.corrQuality = this.corrQuality();
  _o.idOnOrbit = this.idOnOrbit();
  _o.sensorId = this.sensorId();
  _o.collectMethod = this.collectMethod();
  _o.noradCatId = this.noradCatId();
  _o.taskId = this.taskId();
  _o.transactionId = this.transactionId();
  _o.trackId = this.trackId();
  _o.obPosition = this.obPosition();
  _o.origObjectId = this.origObjectId();
  _o.origSensorId = this.origSensorId();
  _o.uct = this.uct();
  _o.azimuth = this.azimuth();
  _o.azimuthUnc = this.azimuthUnc();
  _o.azimuthBias = this.azimuthBias();
  _o.azimuthRate = this.azimuthRate();
  _o.elevation = this.elevation();
  _o.elevationUnc = this.elevationUnc();
  _o.elevationBias = this.elevationBias();
  _o.elevationRate = this.elevationRate();
  _o.range = this.range();
  _o.rangeUnc = this.rangeUnc();
  _o.rangeBias = this.rangeBias();
  _o.rangeRate = this.rangeRate();
  _o.rangeRateUnc = this.rangeRateUnc();
  _o.ra = this.ra();
  _o.raRate = this.raRate();
  _o.raUnc = this.raUnc();
  _o.raBias = this.raBias();
  _o.declination = this.declination();
  _o.declinationRate = this.declinationRate();
  _o.declinationUnc = this.declinationUnc();
  _o.declinationBias = this.declinationBias();
  _o.losx = this.losx();
  _o.losy = this.losy();
  _o.losz = this.losz();
  _o.losUnc = this.losUnc();
  _o.losxvel = this.losxvel();
  _o.losyvel = this.losyvel();
  _o.loszvel = this.loszvel();
  _o.senlat = this.senlat();
  _o.senlon = this.senlon();
  _o.senalt = this.senalt();
  _o.senx = this.senx();
  _o.seny = this.seny();
  _o.senz = this.senz();
  _o.fovCount = this.fovCount();
  _o.expDuration = this.expDuration();
  _o.zeroptd = this.zeroptd();
  _o.netObjSig = this.netObjSig();
  _o.netObjSigUnc = this.netObjSigUnc();
  _o.mag = this.mag();
  _o.magUnc = this.magUnc();
  _o.magNormRange = this.magNormRange();
  _o.geolat = this.geolat();
  _o.geolon = this.geolon();
  _o.geoalt = this.geoalt();
  _o.georange = this.georange();
  _o.skyBkgrnd = this.skyBkgrnd();
  _o.primaryExtinction = this.primaryExtinction();
  _o.primaryExtinctionUnc = this.primaryExtinctionUnc();
  _o.solarPhaseAngle = this.solarPhaseAngle();
  _o.solarEqPhaseAngle = this.solarEqPhaseAngle();
  _o.solarDecAngle = this.solarDecAngle();
  _o.shutterDelay = this.shutterDelay();
  _o.timingBias = this.timingBias();
  _o.rawFileUri = this.rawFileUri();
  _o.intensity = this.intensity();
  _o.bgIntensity = this.bgIntensity();
  _o.descriptor = this.descriptor();
  _o.source = this.source();
  _o.origin = this.origin();
  _o.dataMode = this.dataMode();
  _o.createdAt = this.createdAt();
  _o.createdBy = this.createdBy();
  _o.referenceFrame = this.referenceFrame();
  _o.senReferenceFrame = this.senReferenceFrame();
  _o.umbra = this.umbra();
  _o.penumbra = this.penumbra();
  _o.origNetwork = this.origNetwork();
  _o.sourceDl = this.sourceDl();
  _o.type = this.type();
}
}

export class EOOT implements flatbuffers.IGeneratedObject {
constructor(
  public eobservationId: string|Uint8Array|null = null,
  public classification: string|Uint8Array|null = null,
  public obTime: string|Uint8Array|null = null,
  public corrQuality: number = 0.0,
  public idOnOrbit: string|Uint8Array|null = null,
  public sensorId: string|Uint8Array|null = null,
  public collectMethod: string|Uint8Array|null = null,
  public noradCatId: number = 0,
  public taskId: string|Uint8Array|null = null,
  public transactionId: string|Uint8Array|null = null,
  public trackId: string|Uint8Array|null = null,
  public obPosition: string|Uint8Array|null = null,
  public origObjectId: string|Uint8Array|null = null,
  public origSensorId: string|Uint8Array|null = null,
  public uct: boolean = false,
  public azimuth: number = 0.0,
  public azimuthUnc: number = 0.0,
  public azimuthBias: number = 0.0,
  public azimuthRate: number = 0.0,
  public elevation: number = 0.0,
  public elevationUnc: number = 0.0,
  public elevationBias: number = 0.0,
  public elevationRate: number = 0.0,
  public range: number = 0.0,
  public rangeUnc: number = 0.0,
  public rangeBias: number = 0.0,
  public rangeRate: number = 0.0,
  public rangeRateUnc: number = 0.0,
  public ra: number = 0.0,
  public raRate: number = 0.0,
  public raUnc: number = 0.0,
  public raBias: number = 0.0,
  public declination: number = 0.0,
  public declinationRate: number = 0.0,
  public declinationUnc: number = 0.0,
  public declinationBias: number = 0.0,
  public losx: number = 0.0,
  public losy: number = 0.0,
  public losz: number = 0.0,
  public losUnc: number = 0.0,
  public losxvel: number = 0.0,
  public losyvel: number = 0.0,
  public loszvel: number = 0.0,
  public senlat: number = 0.0,
  public senlon: number = 0.0,
  public senalt: number = 0.0,
  public senx: number = 0.0,
  public seny: number = 0.0,
  public senz: number = 0.0,
  public fovCount: number = 0,
  public expDuration: number = 0.0,
  public zeroptd: number = 0.0,
  public netObjSig: number = 0.0,
  public netObjSigUnc: number = 0.0,
  public mag: number = 0.0,
  public magUnc: number = 0.0,
  public magNormRange: number = 0.0,
  public geolat: number = 0.0,
  public geolon: number = 0.0,
  public geoalt: number = 0.0,
  public georange: number = 0.0,
  public skyBkgrnd: number = 0.0,
  public primaryExtinction: number = 0.0,
  public primaryExtinctionUnc: number = 0.0,
  public solarPhaseAngle: number = 0.0,
  public solarEqPhaseAngle: number = 0.0,
  public solarDecAngle: number = 0.0,
  public shutterDelay: number = 0.0,
  public timingBias: number = 0.0,
  public rawFileUri: string|Uint8Array|null = null,
  public intensity: number = 0.0,
  public bgIntensity: number = 0.0,
  public descriptor: string|Uint8Array|null = null,
  public source: string|Uint8Array|null = null,
  public origin: string|Uint8Array|null = null,
  public dataMode: string|Uint8Array|null = null,
  public createdAt: string|Uint8Array|null = null,
  public createdBy: string|Uint8Array|null = null,
  public referenceFrame: refFrame = refFrame.ECEF,
  public senReferenceFrame: string|Uint8Array|null = null,
  public umbra: boolean = false,
  public penumbra: boolean = false,
  public origNetwork: string|Uint8Array|null = null,
  public sourceDl: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const eobservationId = (this.eobservationId !== null ? builder.createString(this.eobservationId!) : 0);
  const classification = (this.classification !== null ? builder.createString(this.classification!) : 0);
  const obTime = (this.obTime !== null ? builder.createString(this.obTime!) : 0);
  const idOnOrbit = (this.idOnOrbit !== null ? builder.createString(this.idOnOrbit!) : 0);
  const sensorId = (this.sensorId !== null ? builder.createString(this.sensorId!) : 0);
  const collectMethod = (this.collectMethod !== null ? builder.createString(this.collectMethod!) : 0);
  const taskId = (this.taskId !== null ? builder.createString(this.taskId!) : 0);
  const transactionId = (this.transactionId !== null ? builder.createString(this.transactionId!) : 0);
  const trackId = (this.trackId !== null ? builder.createString(this.trackId!) : 0);
  const obPosition = (this.obPosition !== null ? builder.createString(this.obPosition!) : 0);
  const origObjectId = (this.origObjectId !== null ? builder.createString(this.origObjectId!) : 0);
  const origSensorId = (this.origSensorId !== null ? builder.createString(this.origSensorId!) : 0);
  const rawFileUri = (this.rawFileUri !== null ? builder.createString(this.rawFileUri!) : 0);
  const descriptor = (this.descriptor !== null ? builder.createString(this.descriptor!) : 0);
  const source = (this.source !== null ? builder.createString(this.source!) : 0);
  const origin = (this.origin !== null ? builder.createString(this.origin!) : 0);
  const dataMode = (this.dataMode !== null ? builder.createString(this.dataMode!) : 0);
  const createdAt = (this.createdAt !== null ? builder.createString(this.createdAt!) : 0);
  const createdBy = (this.createdBy !== null ? builder.createString(this.createdBy!) : 0);
  const senReferenceFrame = (this.senReferenceFrame !== null ? builder.createString(this.senReferenceFrame!) : 0);
  const origNetwork = (this.origNetwork !== null ? builder.createString(this.origNetwork!) : 0);
  const sourceDl = (this.sourceDl !== null ? builder.createString(this.sourceDl!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);

  return EOO.createEOO(builder,
    eobservationId,
    classification,
    obTime,
    this.corrQuality,
    idOnOrbit,
    sensorId,
    collectMethod,
    this.noradCatId,
    taskId,
    transactionId,
    trackId,
    obPosition,
    origObjectId,
    origSensorId,
    this.uct,
    this.azimuth,
    this.azimuthUnc,
    this.azimuthBias,
    this.azimuthRate,
    this.elevation,
    this.elevationUnc,
    this.elevationBias,
    this.elevationRate,
    this.range,
    this.rangeUnc,
    this.rangeBias,
    this.rangeRate,
    this.rangeRateUnc,
    this.ra,
    this.raRate,
    this.raUnc,
    this.raBias,
    this.declination,
    this.declinationRate,
    this.declinationUnc,
    this.declinationBias,
    this.losx,
    this.losy,
    this.losz,
    this.losUnc,
    this.losxvel,
    this.losyvel,
    this.loszvel,
    this.senlat,
    this.senlon,
    this.senalt,
    this.senx,
    this.seny,
    this.senz,
    this.fovCount,
    this.expDuration,
    this.zeroptd,
    this.netObjSig,
    this.netObjSigUnc,
    this.mag,
    this.magUnc,
    this.magNormRange,
    this.geolat,
    this.geolon,
    this.geoalt,
    this.georange,
    this.skyBkgrnd,
    this.primaryExtinction,
    this.primaryExtinctionUnc,
    this.solarPhaseAngle,
    this.solarEqPhaseAngle,
    this.solarDecAngle,
    this.shutterDelay,
    this.timingBias,
    rawFileUri,
    this.intensity,
    this.bgIntensity,
    descriptor,
    source,
    origin,
    dataMode,
    createdAt,
    createdBy,
    this.referenceFrame,
    senReferenceFrame,
    this.umbra,
    this.penumbra,
    origNetwork,
    sourceDl,
    type
  );
}
}
