// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class PhysicalProperties implements flatbuffers.IUnpackableObject<PhysicalPropertiesT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PhysicalProperties {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPhysicalProperties(bb:flatbuffers.ByteBuffer, obj?:PhysicalProperties):PhysicalProperties {
  return (obj || new PhysicalProperties()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPhysicalProperties(bb:flatbuffers.ByteBuffer, obj?:PhysicalProperties):PhysicalProperties {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PhysicalProperties()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Comments in the Physical Properties section.
 */
COMMENT(index: number):string
COMMENT(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
COMMENT(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

commentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Wet mass of the space object.
 */
WET_MASS():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Dry mass of the space object.
 */
DRY_MASS():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Units for mass values.
 */
MASS_UNITS():string|null
MASS_UNITS(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MASS_UNITS(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Quaternion component q1 of orientation from OEB to EME2000.
 */
OEB_Q1():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Quaternion component q2.
 */
OEB_Q2():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Quaternion component q3.
 */
OEB_Q3():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Quaternion scalar component qc.
 */
OEB_QC():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum dimension of the object along OEB frame axes.
 */
OEB_MAX():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Intermediate dimension along OEB frame axes.
 */
OEB_INT():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum dimension of the object along OEB frame axes.
 */
OEB_MIN():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Area along OEB_MAX axis.
 */
AREA_ALONG_OEB_MAX():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Area along OEB_INT axis.
 */
AREA_ALONG_OEB_INT():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Area along OEB_MIN axis.
 */
AREA_ALONG_OEB_MIN():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Units for area values.
 */
AREA_UNITS():string|null
AREA_UNITS(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
AREA_UNITS(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Constant area for drag computations.
 */
DRAG_CONST_AREA():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Nominal drag coefficient.
 */
DRAG_COEFF_NOM():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in the drag coefficient.
 */
DRAG_UNCERTAINTY():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Constant area for solar radiation pressure computations.
 */
SRP_CONST_AREA():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Nominal solar radiation pressure coefficient.
 */
SOLAR_RAD_COEFF():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in the solar radiation pressure coefficient.
 */
SRP_UNCERTAINTY():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startPhysicalProperties(builder:flatbuffers.Builder) {
  builder.startObject(21);
}

static addComment(builder:flatbuffers.Builder, COMMENTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, COMMENTOffset, 0);
}

static createCommentVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCommentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addWetMass(builder:flatbuffers.Builder, WET_MASS:number) {
  builder.addFieldFloat64(1, WET_MASS, 0.0);
}

static addDryMass(builder:flatbuffers.Builder, DRY_MASS:number) {
  builder.addFieldFloat64(2, DRY_MASS, 0.0);
}

static addMassUnits(builder:flatbuffers.Builder, MASS_UNITSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, MASS_UNITSOffset, 0);
}

static addOebQ1(builder:flatbuffers.Builder, OEB_Q1:number) {
  builder.addFieldFloat64(4, OEB_Q1, 0.0);
}

static addOebQ2(builder:flatbuffers.Builder, OEB_Q2:number) {
  builder.addFieldFloat64(5, OEB_Q2, 0.0);
}

static addOebQ3(builder:flatbuffers.Builder, OEB_Q3:number) {
  builder.addFieldFloat64(6, OEB_Q3, 0.0);
}

static addOebQc(builder:flatbuffers.Builder, OEB_QC:number) {
  builder.addFieldFloat64(7, OEB_QC, 0.0);
}

static addOebMax(builder:flatbuffers.Builder, OEB_MAX:number) {
  builder.addFieldFloat64(8, OEB_MAX, 0.0);
}

static addOebInt(builder:flatbuffers.Builder, OEB_INT:number) {
  builder.addFieldFloat64(9, OEB_INT, 0.0);
}

static addOebMin(builder:flatbuffers.Builder, OEB_MIN:number) {
  builder.addFieldFloat64(10, OEB_MIN, 0.0);
}

static addAreaAlongOebMax(builder:flatbuffers.Builder, AREA_ALONG_OEB_MAX:number) {
  builder.addFieldFloat64(11, AREA_ALONG_OEB_MAX, 0.0);
}

static addAreaAlongOebInt(builder:flatbuffers.Builder, AREA_ALONG_OEB_INT:number) {
  builder.addFieldFloat64(12, AREA_ALONG_OEB_INT, 0.0);
}

static addAreaAlongOebMin(builder:flatbuffers.Builder, AREA_ALONG_OEB_MIN:number) {
  builder.addFieldFloat64(13, AREA_ALONG_OEB_MIN, 0.0);
}

static addAreaUnits(builder:flatbuffers.Builder, AREA_UNITSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, AREA_UNITSOffset, 0);
}

static addDragConstArea(builder:flatbuffers.Builder, DRAG_CONST_AREA:number) {
  builder.addFieldFloat64(15, DRAG_CONST_AREA, 0.0);
}

static addDragCoeffNom(builder:flatbuffers.Builder, DRAG_COEFF_NOM:number) {
  builder.addFieldFloat64(16, DRAG_COEFF_NOM, 0.0);
}

static addDragUncertainty(builder:flatbuffers.Builder, DRAG_UNCERTAINTY:number) {
  builder.addFieldFloat64(17, DRAG_UNCERTAINTY, 0.0);
}

static addSrpConstArea(builder:flatbuffers.Builder, SRP_CONST_AREA:number) {
  builder.addFieldFloat64(18, SRP_CONST_AREA, 0.0);
}

static addSolarRadCoeff(builder:flatbuffers.Builder, SOLAR_RAD_COEFF:number) {
  builder.addFieldFloat64(19, SOLAR_RAD_COEFF, 0.0);
}

static addSrpUncertainty(builder:flatbuffers.Builder, SRP_UNCERTAINTY:number) {
  builder.addFieldFloat64(20, SRP_UNCERTAINTY, 0.0);
}

static endPhysicalProperties(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPhysicalProperties(builder:flatbuffers.Builder, COMMENTOffset:flatbuffers.Offset, WET_MASS:number, DRY_MASS:number, MASS_UNITSOffset:flatbuffers.Offset, OEB_Q1:number, OEB_Q2:number, OEB_Q3:number, OEB_QC:number, OEB_MAX:number, OEB_INT:number, OEB_MIN:number, AREA_ALONG_OEB_MAX:number, AREA_ALONG_OEB_INT:number, AREA_ALONG_OEB_MIN:number, AREA_UNITSOffset:flatbuffers.Offset, DRAG_CONST_AREA:number, DRAG_COEFF_NOM:number, DRAG_UNCERTAINTY:number, SRP_CONST_AREA:number, SOLAR_RAD_COEFF:number, SRP_UNCERTAINTY:number):flatbuffers.Offset {
  PhysicalProperties.startPhysicalProperties(builder);
  PhysicalProperties.addComment(builder, COMMENTOffset);
  PhysicalProperties.addWetMass(builder, WET_MASS);
  PhysicalProperties.addDryMass(builder, DRY_MASS);
  PhysicalProperties.addMassUnits(builder, MASS_UNITSOffset);
  PhysicalProperties.addOebQ1(builder, OEB_Q1);
  PhysicalProperties.addOebQ2(builder, OEB_Q2);
  PhysicalProperties.addOebQ3(builder, OEB_Q3);
  PhysicalProperties.addOebQc(builder, OEB_QC);
  PhysicalProperties.addOebMax(builder, OEB_MAX);
  PhysicalProperties.addOebInt(builder, OEB_INT);
  PhysicalProperties.addOebMin(builder, OEB_MIN);
  PhysicalProperties.addAreaAlongOebMax(builder, AREA_ALONG_OEB_MAX);
  PhysicalProperties.addAreaAlongOebInt(builder, AREA_ALONG_OEB_INT);
  PhysicalProperties.addAreaAlongOebMin(builder, AREA_ALONG_OEB_MIN);
  PhysicalProperties.addAreaUnits(builder, AREA_UNITSOffset);
  PhysicalProperties.addDragConstArea(builder, DRAG_CONST_AREA);
  PhysicalProperties.addDragCoeffNom(builder, DRAG_COEFF_NOM);
  PhysicalProperties.addDragUncertainty(builder, DRAG_UNCERTAINTY);
  PhysicalProperties.addSrpConstArea(builder, SRP_CONST_AREA);
  PhysicalProperties.addSolarRadCoeff(builder, SOLAR_RAD_COEFF);
  PhysicalProperties.addSrpUncertainty(builder, SRP_UNCERTAINTY);
  return PhysicalProperties.endPhysicalProperties(builder);
}

unpack(): PhysicalPropertiesT {
  return new PhysicalPropertiesT(
    this.bb!.createScalarList<string>(this.COMMENT.bind(this), this.commentLength()),
    this.WET_MASS(),
    this.DRY_MASS(),
    this.MASS_UNITS(),
    this.OEB_Q1(),
    this.OEB_Q2(),
    this.OEB_Q3(),
    this.OEB_QC(),
    this.OEB_MAX(),
    this.OEB_INT(),
    this.OEB_MIN(),
    this.AREA_ALONG_OEB_MAX(),
    this.AREA_ALONG_OEB_INT(),
    this.AREA_ALONG_OEB_MIN(),
    this.AREA_UNITS(),
    this.DRAG_CONST_AREA(),
    this.DRAG_COEFF_NOM(),
    this.DRAG_UNCERTAINTY(),
    this.SRP_CONST_AREA(),
    this.SOLAR_RAD_COEFF(),
    this.SRP_UNCERTAINTY()
  );
}


unpackTo(_o: PhysicalPropertiesT): void {
  _o.COMMENT = this.bb!.createScalarList<string>(this.COMMENT.bind(this), this.commentLength());
  _o.WET_MASS = this.WET_MASS();
  _o.DRY_MASS = this.DRY_MASS();
  _o.MASS_UNITS = this.MASS_UNITS();
  _o.OEB_Q1 = this.OEB_Q1();
  _o.OEB_Q2 = this.OEB_Q2();
  _o.OEB_Q3 = this.OEB_Q3();
  _o.OEB_QC = this.OEB_QC();
  _o.OEB_MAX = this.OEB_MAX();
  _o.OEB_INT = this.OEB_INT();
  _o.OEB_MIN = this.OEB_MIN();
  _o.AREA_ALONG_OEB_MAX = this.AREA_ALONG_OEB_MAX();
  _o.AREA_ALONG_OEB_INT = this.AREA_ALONG_OEB_INT();
  _o.AREA_ALONG_OEB_MIN = this.AREA_ALONG_OEB_MIN();
  _o.AREA_UNITS = this.AREA_UNITS();
  _o.DRAG_CONST_AREA = this.DRAG_CONST_AREA();
  _o.DRAG_COEFF_NOM = this.DRAG_COEFF_NOM();
  _o.DRAG_UNCERTAINTY = this.DRAG_UNCERTAINTY();
  _o.SRP_CONST_AREA = this.SRP_CONST_AREA();
  _o.SOLAR_RAD_COEFF = this.SOLAR_RAD_COEFF();
  _o.SRP_UNCERTAINTY = this.SRP_UNCERTAINTY();
}
}

export class PhysicalPropertiesT implements flatbuffers.IGeneratedObject {
constructor(
  public COMMENT: (string)[] = [],
  public WET_MASS: number = 0.0,
  public DRY_MASS: number = 0.0,
  public MASS_UNITS: string|Uint8Array|null = null,
  public OEB_Q1: number = 0.0,
  public OEB_Q2: number = 0.0,
  public OEB_Q3: number = 0.0,
  public OEB_QC: number = 0.0,
  public OEB_MAX: number = 0.0,
  public OEB_INT: number = 0.0,
  public OEB_MIN: number = 0.0,
  public AREA_ALONG_OEB_MAX: number = 0.0,
  public AREA_ALONG_OEB_INT: number = 0.0,
  public AREA_ALONG_OEB_MIN: number = 0.0,
  public AREA_UNITS: string|Uint8Array|null = null,
  public DRAG_CONST_AREA: number = 0.0,
  public DRAG_COEFF_NOM: number = 0.0,
  public DRAG_UNCERTAINTY: number = 0.0,
  public SRP_CONST_AREA: number = 0.0,
  public SOLAR_RAD_COEFF: number = 0.0,
  public SRP_UNCERTAINTY: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const COMMENT = PhysicalProperties.createCommentVector(builder, builder.createObjectOffsetList(this.COMMENT));
  const MASS_UNITS = (this.MASS_UNITS !== null ? builder.createString(this.MASS_UNITS!) : 0);
  const AREA_UNITS = (this.AREA_UNITS !== null ? builder.createString(this.AREA_UNITS!) : 0);

  return PhysicalProperties.createPhysicalProperties(builder,
    COMMENT,
    this.WET_MASS,
    this.DRY_MASS,
    MASS_UNITS,
    this.OEB_Q1,
    this.OEB_Q2,
    this.OEB_Q3,
    this.OEB_QC,
    this.OEB_MAX,
    this.OEB_INT,
    this.OEB_MIN,
    this.AREA_ALONG_OEB_MAX,
    this.AREA_ALONG_OEB_INT,
    this.AREA_ALONG_OEB_MIN,
    AREA_UNITS,
    this.DRAG_CONST_AREA,
    this.DRAG_COEFF_NOM,
    this.DRAG_UNCERTAINTY,
    this.SRP_CONST_AREA,
    this.SOLAR_RAD_COEFF,
    this.SRP_UNCERTAINTY
  );
}
}
