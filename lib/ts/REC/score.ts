// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ScoreType } from './score-type.js';


export class Score implements flatbuffers.IUnpackableObject<ScoreT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Score {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsScore(bb:flatbuffers.ByteBuffer, obj?:Score):Score {
  return (obj || new Score()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsScore(bb:flatbuffers.ByteBuffer, obj?:Score):Score {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Score()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

noradCatId():string|null
noradCatId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
noradCatId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():ScoreType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ScoreType.OUTLIER;
}

tag():string|null
tag(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tag(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

score():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startScore(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addNoradCatId(builder:flatbuffers.Builder, noradCatIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, noradCatIdOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:ScoreType) {
  builder.addFieldInt8(1, type, ScoreType.OUTLIER);
}

static addTag(builder:flatbuffers.Builder, tagOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, tagOffset, 0);
}

static addScore(builder:flatbuffers.Builder, score:number) {
  builder.addFieldFloat32(3, score, 0.0);
}

static endScore(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createScore(builder:flatbuffers.Builder, noradCatIdOffset:flatbuffers.Offset, type:ScoreType, tagOffset:flatbuffers.Offset, score:number):flatbuffers.Offset {
  Score.startScore(builder);
  Score.addNoradCatId(builder, noradCatIdOffset);
  Score.addType(builder, type);
  Score.addTag(builder, tagOffset);
  Score.addScore(builder, score);
  return Score.endScore(builder);
}

unpack(): ScoreT {
  return new ScoreT(
    this.noradCatId(),
    this.type(),
    this.tag(),
    this.score()
  );
}


unpackTo(_o: ScoreT): void {
  _o.noradCatId = this.noradCatId();
  _o.type = this.type();
  _o.tag = this.tag();
  _o.score = this.score();
}
}

export class ScoreT implements flatbuffers.IGeneratedObject {
constructor(
  public noradCatId: string|Uint8Array|null = null,
  public type: ScoreType = ScoreType.OUTLIER,
  public tag: string|Uint8Array|null = null,
  public score: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const noradCatId = (this.noradCatId !== null ? builder.createString(this.noradCatId!) : 0);
  const tag = (this.tag !== null ? builder.createString(this.tag!) : 0);

  return Score.createScore(builder,
    noradCatId,
    this.type,
    tag,
    this.score
  );
}
}
