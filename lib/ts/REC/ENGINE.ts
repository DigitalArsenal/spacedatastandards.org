// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ENGINE_TYPE } from './ENGINE_TYPE.js';


/**
 * Engine Details
 */
export class ENGINE implements flatbuffers.IUnpackableObject<ENGINET> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ENGINE {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsENGINE(bb:flatbuffers.ByteBuffer, obj?:ENGINE):ENGINE {
  return (obj || new ENGINE()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsENGINE(bb:flatbuffers.ByteBuffer, obj?:ENGINE):ENGINE {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ENGINE()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Engine Name
 */
ENGINE_NAME():string|null
ENGINE_NAME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ENGINE_NAME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of Engine
 */
TYPE():ENGINE_TYPE {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ENGINE_TYPE.LIQUID;
}

/**
 * Thrust Produced by the Engine (in Newtons)
 */
THRUST():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startENGINE(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addEngineName(builder:flatbuffers.Builder, ENGINE_NAMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, ENGINE_NAMEOffset, 0);
}

static addType(builder:flatbuffers.Builder, TYPE:ENGINE_TYPE) {
  builder.addFieldInt8(1, TYPE, ENGINE_TYPE.LIQUID);
}

static addThrust(builder:flatbuffers.Builder, THRUST:number) {
  builder.addFieldFloat64(2, THRUST, 0.0);
}

static endENGINE(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createENGINE(builder:flatbuffers.Builder, ENGINE_NAMEOffset:flatbuffers.Offset, TYPE:ENGINE_TYPE, THRUST:number):flatbuffers.Offset {
  ENGINE.startENGINE(builder);
  ENGINE.addEngineName(builder, ENGINE_NAMEOffset);
  ENGINE.addType(builder, TYPE);
  ENGINE.addThrust(builder, THRUST);
  return ENGINE.endENGINE(builder);
}

unpack(): ENGINET {
  return new ENGINET(
    this.ENGINE_NAME(),
    this.TYPE(),
    this.THRUST()
  );
}


unpackTo(_o: ENGINET): void {
  _o.ENGINE_NAME = this.ENGINE_NAME();
  _o.TYPE = this.TYPE();
  _o.THRUST = this.THRUST();
}
}

export class ENGINET implements flatbuffers.IGeneratedObject {
constructor(
  public ENGINE_NAME: string|Uint8Array|null = null,
  public TYPE: ENGINE_TYPE = ENGINE_TYPE.LIQUID,
  public THRUST: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const ENGINE_NAME = (this.ENGINE_NAME !== null ? builder.createString(this.ENGINE_NAME!) : 0);

  return ENGINE.createENGINE(builder,
    ENGINE_NAME,
    this.TYPE,
    this.THRUST
  );
}
}
