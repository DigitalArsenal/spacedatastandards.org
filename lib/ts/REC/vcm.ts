// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { VCMAtmosphericModelData, VCMAtmosphericModelDataT } from './vcmatmospheric-model-data.js';
import { VCMCovarianceMatrixLine, VCMCovarianceMatrixLineT } from './vcmcovariance-matrix-line.js';
import { VCMStateVector, VCMStateVectorT } from './vcmstate-vector.js';
import { equinoctialElements, equinoctialElementsT } from './equinoctial-elements.js';
import { keplerianElements, keplerianElementsT } from './keplerian-elements.js';
import { perturbationStatus } from './perturbation-status.js';
import { propagatorConfig, propagatorConfigT } from './propagator-config.js';
import { uvwSigmas, uvwSigmasT } from './uvw-sigmas.js';


/**
 * Vector Covariance Message
 */
export class VCM implements flatbuffers.IUnpackableObject<VCMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VCM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVCM(bb:flatbuffers.ByteBuffer, obj?:VCM):VCM {
  return (obj || new VCM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVCM(bb:flatbuffers.ByteBuffer, obj?:VCM):VCM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VCM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ccsdsOmmVers():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

creationDate():string|null
creationDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
creationDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

originator():string|null
originator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

objectName():string|null
objectName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objectName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

objectId():string|null
objectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
objectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

centerName():string|null
centerName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
centerName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

refFrame():string|null
refFrame(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
refFrame(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

timeSystem():string|null
timeSystem(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
timeSystem(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

stateVector(obj?:VCMStateVector):VCMStateVector|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new VCMStateVector()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

keplerianElements(obj?:keplerianElements):keplerianElements|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new keplerianElements()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

equinoctialElements(obj?:equinoctialElements):equinoctialElements|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new equinoctialElements()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

gm():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

atmosphericModelData(obj?:VCMAtmosphericModelData):VCMAtmosphericModelData|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new VCMAtmosphericModelData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

propagatorSettings(obj?:propagatorConfig):propagatorConfig|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? (obj || new propagatorConfig()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

covarianceMatrix(index: number, obj?:VCMCovarianceMatrixLine):VCMCovarianceMatrixLine|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? (obj || new VCMCovarianceMatrixLine()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

covarianceMatrixLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

uvwSigmas(obj?:uvwSigmas):uvwSigmas|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? (obj || new uvwSigmas()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

mass():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

solarRadArea():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

solarRadCoeff():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

dragArea():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

dragCoeff():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

srp():perturbationStatus {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : perturbationStatus.OFF;
}

classificationType():string|null
classificationType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
classificationType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

noradCatId():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

elementSetNo():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

revAtEpoch():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

bstar():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

meanMotionDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

meanMotionDdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

covReferenceFrame():string|null
covReferenceFrame(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
covReferenceFrame(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

cxX():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

cyX():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

czX():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

cxDotX():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

userDefinedBip0044Type():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

userDefinedObjectDesignator():string|null
userDefinedObjectDesignator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userDefinedObjectDesignator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

userDefinedEarthModel():string|null
userDefinedEarthModel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userDefinedEarthModel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

userDefinedEpochTimestamp():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

userDefinedMicroseconds():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startVCM(builder:flatbuffers.Builder) {
  builder.startObject(39);
}

static addCcsdsOmmVers(builder:flatbuffers.Builder, ccsdsOmmVers:number) {
  builder.addFieldFloat64(0, ccsdsOmmVers, 0.0);
}

static addCreationDate(builder:flatbuffers.Builder, creationDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, creationDateOffset, 0);
}

static addOriginator(builder:flatbuffers.Builder, originatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, originatorOffset, 0);
}

static addObjectName(builder:flatbuffers.Builder, objectNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, objectNameOffset, 0);
}

static addObjectId(builder:flatbuffers.Builder, objectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, objectIdOffset, 0);
}

static addCenterName(builder:flatbuffers.Builder, centerNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, centerNameOffset, 0);
}

static addRefFrame(builder:flatbuffers.Builder, refFrameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, refFrameOffset, 0);
}

static addTimeSystem(builder:flatbuffers.Builder, timeSystemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, timeSystemOffset, 0);
}

static addStateVector(builder:flatbuffers.Builder, stateVectorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, stateVectorOffset, 0);
}

static addKeplerianElements(builder:flatbuffers.Builder, keplerianElementsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, keplerianElementsOffset, 0);
}

static addEquinoctialElements(builder:flatbuffers.Builder, equinoctialElementsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, equinoctialElementsOffset, 0);
}

static addGm(builder:flatbuffers.Builder, gm:number) {
  builder.addFieldFloat64(11, gm, 0.0);
}

static addAtmosphericModelData(builder:flatbuffers.Builder, atmosphericModelDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, atmosphericModelDataOffset, 0);
}

static addPropagatorSettings(builder:flatbuffers.Builder, propagatorSettingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, propagatorSettingsOffset, 0);
}

static addCovarianceMatrix(builder:flatbuffers.Builder, covarianceMatrixOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, covarianceMatrixOffset, 0);
}

static createCovarianceMatrixVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCovarianceMatrixVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUvwSigmas(builder:flatbuffers.Builder, uvwSigmasOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, uvwSigmasOffset, 0);
}

static addMass(builder:flatbuffers.Builder, mass:number) {
  builder.addFieldFloat64(16, mass, 0.0);
}

static addSolarRadArea(builder:flatbuffers.Builder, solarRadArea:number) {
  builder.addFieldFloat64(17, solarRadArea, 0.0);
}

static addSolarRadCoeff(builder:flatbuffers.Builder, solarRadCoeff:number) {
  builder.addFieldFloat64(18, solarRadCoeff, 0.0);
}

static addDragArea(builder:flatbuffers.Builder, dragArea:number) {
  builder.addFieldFloat64(19, dragArea, 0.0);
}

static addDragCoeff(builder:flatbuffers.Builder, dragCoeff:number) {
  builder.addFieldFloat64(20, dragCoeff, 0.0);
}

static addSrp(builder:flatbuffers.Builder, srp:perturbationStatus) {
  builder.addFieldInt8(21, srp, perturbationStatus.OFF);
}

static addClassificationType(builder:flatbuffers.Builder, classificationTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, classificationTypeOffset, 0);
}

static addNoradCatId(builder:flatbuffers.Builder, noradCatId:number) {
  builder.addFieldInt32(23, noradCatId, 0);
}

static addElementSetNo(builder:flatbuffers.Builder, elementSetNo:number) {
  builder.addFieldInt32(24, elementSetNo, 0);
}

static addRevAtEpoch(builder:flatbuffers.Builder, revAtEpoch:number) {
  builder.addFieldFloat64(25, revAtEpoch, 0.0);
}

static addBstar(builder:flatbuffers.Builder, bstar:number) {
  builder.addFieldFloat64(26, bstar, 0.0);
}

static addMeanMotionDot(builder:flatbuffers.Builder, meanMotionDot:number) {
  builder.addFieldFloat64(27, meanMotionDot, 0.0);
}

static addMeanMotionDdot(builder:flatbuffers.Builder, meanMotionDdot:number) {
  builder.addFieldFloat64(28, meanMotionDdot, 0.0);
}

static addCovReferenceFrame(builder:flatbuffers.Builder, covReferenceFrameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, covReferenceFrameOffset, 0);
}

static addCxX(builder:flatbuffers.Builder, cxX:number) {
  builder.addFieldFloat64(30, cxX, 0.0);
}

static addCyX(builder:flatbuffers.Builder, cyX:number) {
  builder.addFieldFloat64(31, cyX, 0.0);
}

static addCzX(builder:flatbuffers.Builder, czX:number) {
  builder.addFieldFloat64(32, czX, 0.0);
}

static addCxDotX(builder:flatbuffers.Builder, cxDotX:number) {
  builder.addFieldFloat64(33, cxDotX, 0.0);
}

static addUserDefinedBip0044Type(builder:flatbuffers.Builder, userDefinedBip0044Type:number) {
  builder.addFieldInt32(34, userDefinedBip0044Type, 0);
}

static addUserDefinedObjectDesignator(builder:flatbuffers.Builder, userDefinedObjectDesignatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, userDefinedObjectDesignatorOffset, 0);
}

static addUserDefinedEarthModel(builder:flatbuffers.Builder, userDefinedEarthModelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, userDefinedEarthModelOffset, 0);
}

static addUserDefinedEpochTimestamp(builder:flatbuffers.Builder, userDefinedEpochTimestamp:number) {
  builder.addFieldFloat64(37, userDefinedEpochTimestamp, 0.0);
}

static addUserDefinedMicroseconds(builder:flatbuffers.Builder, userDefinedMicroseconds:number) {
  builder.addFieldFloat64(38, userDefinedMicroseconds, 0.0);
}

static endVCM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishVCMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedVCMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): VCMT {
  return new VCMT(
    this.ccsdsOmmVers(),
    this.creationDate(),
    this.originator(),
    this.objectName(),
    this.objectId(),
    this.centerName(),
    this.refFrame(),
    this.timeSystem(),
    (this.stateVector() !== null ? this.stateVector()!.unpack() : null),
    (this.keplerianElements() !== null ? this.keplerianElements()!.unpack() : null),
    (this.equinoctialElements() !== null ? this.equinoctialElements()!.unpack() : null),
    this.gm(),
    (this.atmosphericModelData() !== null ? this.atmosphericModelData()!.unpack() : null),
    (this.propagatorSettings() !== null ? this.propagatorSettings()!.unpack() : null),
    this.bb!.createObjList<VCMCovarianceMatrixLine, VCMCovarianceMatrixLineT>(this.covarianceMatrix.bind(this), this.covarianceMatrixLength()),
    (this.uvwSigmas() !== null ? this.uvwSigmas()!.unpack() : null),
    this.mass(),
    this.solarRadArea(),
    this.solarRadCoeff(),
    this.dragArea(),
    this.dragCoeff(),
    this.srp(),
    this.classificationType(),
    this.noradCatId(),
    this.elementSetNo(),
    this.revAtEpoch(),
    this.bstar(),
    this.meanMotionDot(),
    this.meanMotionDdot(),
    this.covReferenceFrame(),
    this.cxX(),
    this.cyX(),
    this.czX(),
    this.cxDotX(),
    this.userDefinedBip0044Type(),
    this.userDefinedObjectDesignator(),
    this.userDefinedEarthModel(),
    this.userDefinedEpochTimestamp(),
    this.userDefinedMicroseconds()
  );
}


unpackTo(_o: VCMT): void {
  _o.ccsdsOmmVers = this.ccsdsOmmVers();
  _o.creationDate = this.creationDate();
  _o.originator = this.originator();
  _o.objectName = this.objectName();
  _o.objectId = this.objectId();
  _o.centerName = this.centerName();
  _o.refFrame = this.refFrame();
  _o.timeSystem = this.timeSystem();
  _o.stateVector = (this.stateVector() !== null ? this.stateVector()!.unpack() : null);
  _o.keplerianElements = (this.keplerianElements() !== null ? this.keplerianElements()!.unpack() : null);
  _o.equinoctialElements = (this.equinoctialElements() !== null ? this.equinoctialElements()!.unpack() : null);
  _o.gm = this.gm();
  _o.atmosphericModelData = (this.atmosphericModelData() !== null ? this.atmosphericModelData()!.unpack() : null);
  _o.propagatorSettings = (this.propagatorSettings() !== null ? this.propagatorSettings()!.unpack() : null);
  _o.covarianceMatrix = this.bb!.createObjList<VCMCovarianceMatrixLine, VCMCovarianceMatrixLineT>(this.covarianceMatrix.bind(this), this.covarianceMatrixLength());
  _o.uvwSigmas = (this.uvwSigmas() !== null ? this.uvwSigmas()!.unpack() : null);
  _o.mass = this.mass();
  _o.solarRadArea = this.solarRadArea();
  _o.solarRadCoeff = this.solarRadCoeff();
  _o.dragArea = this.dragArea();
  _o.dragCoeff = this.dragCoeff();
  _o.srp = this.srp();
  _o.classificationType = this.classificationType();
  _o.noradCatId = this.noradCatId();
  _o.elementSetNo = this.elementSetNo();
  _o.revAtEpoch = this.revAtEpoch();
  _o.bstar = this.bstar();
  _o.meanMotionDot = this.meanMotionDot();
  _o.meanMotionDdot = this.meanMotionDdot();
  _o.covReferenceFrame = this.covReferenceFrame();
  _o.cxX = this.cxX();
  _o.cyX = this.cyX();
  _o.czX = this.czX();
  _o.cxDotX = this.cxDotX();
  _o.userDefinedBip0044Type = this.userDefinedBip0044Type();
  _o.userDefinedObjectDesignator = this.userDefinedObjectDesignator();
  _o.userDefinedEarthModel = this.userDefinedEarthModel();
  _o.userDefinedEpochTimestamp = this.userDefinedEpochTimestamp();
  _o.userDefinedMicroseconds = this.userDefinedMicroseconds();
}
}

export class VCMT implements flatbuffers.IGeneratedObject {
constructor(
  public ccsdsOmmVers: number = 0.0,
  public creationDate: string|Uint8Array|null = null,
  public originator: string|Uint8Array|null = null,
  public objectName: string|Uint8Array|null = null,
  public objectId: string|Uint8Array|null = null,
  public centerName: string|Uint8Array|null = null,
  public refFrame: string|Uint8Array|null = null,
  public timeSystem: string|Uint8Array|null = null,
  public stateVector: VCMStateVectorT|null = null,
  public keplerianElements: keplerianElementsT|null = null,
  public equinoctialElements: equinoctialElementsT|null = null,
  public gm: number = 0.0,
  public atmosphericModelData: VCMAtmosphericModelDataT|null = null,
  public propagatorSettings: propagatorConfigT|null = null,
  public covarianceMatrix: (VCMCovarianceMatrixLineT)[] = [],
  public uvwSigmas: uvwSigmasT|null = null,
  public mass: number = 0.0,
  public solarRadArea: number = 0.0,
  public solarRadCoeff: number = 0.0,
  public dragArea: number = 0.0,
  public dragCoeff: number = 0.0,
  public srp: perturbationStatus = perturbationStatus.OFF,
  public classificationType: string|Uint8Array|null = null,
  public noradCatId: number = 0,
  public elementSetNo: number = 0,
  public revAtEpoch: number = 0.0,
  public bstar: number = 0.0,
  public meanMotionDot: number = 0.0,
  public meanMotionDdot: number = 0.0,
  public covReferenceFrame: string|Uint8Array|null = null,
  public cxX: number = 0.0,
  public cyX: number = 0.0,
  public czX: number = 0.0,
  public cxDotX: number = 0.0,
  public userDefinedBip0044Type: number = 0,
  public userDefinedObjectDesignator: string|Uint8Array|null = null,
  public userDefinedEarthModel: string|Uint8Array|null = null,
  public userDefinedEpochTimestamp: number = 0.0,
  public userDefinedMicroseconds: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const creationDate = (this.creationDate !== null ? builder.createString(this.creationDate!) : 0);
  const originator = (this.originator !== null ? builder.createString(this.originator!) : 0);
  const objectName = (this.objectName !== null ? builder.createString(this.objectName!) : 0);
  const objectId = (this.objectId !== null ? builder.createString(this.objectId!) : 0);
  const centerName = (this.centerName !== null ? builder.createString(this.centerName!) : 0);
  const refFrame = (this.refFrame !== null ? builder.createString(this.refFrame!) : 0);
  const timeSystem = (this.timeSystem !== null ? builder.createString(this.timeSystem!) : 0);
  const stateVector = (this.stateVector !== null ? this.stateVector!.pack(builder) : 0);
  const keplerianElements = (this.keplerianElements !== null ? this.keplerianElements!.pack(builder) : 0);
  const equinoctialElements = (this.equinoctialElements !== null ? this.equinoctialElements!.pack(builder) : 0);
  const atmosphericModelData = (this.atmosphericModelData !== null ? this.atmosphericModelData!.pack(builder) : 0);
  const propagatorSettings = (this.propagatorSettings !== null ? this.propagatorSettings!.pack(builder) : 0);
  const covarianceMatrix = VCM.createCovarianceMatrixVector(builder, builder.createObjectOffsetList(this.covarianceMatrix));
  const uvwSigmas = (this.uvwSigmas !== null ? this.uvwSigmas!.pack(builder) : 0);
  const classificationType = (this.classificationType !== null ? builder.createString(this.classificationType!) : 0);
  const covReferenceFrame = (this.covReferenceFrame !== null ? builder.createString(this.covReferenceFrame!) : 0);
  const userDefinedObjectDesignator = (this.userDefinedObjectDesignator !== null ? builder.createString(this.userDefinedObjectDesignator!) : 0);
  const userDefinedEarthModel = (this.userDefinedEarthModel !== null ? builder.createString(this.userDefinedEarthModel!) : 0);

  VCM.startVCM(builder);
  VCM.addCcsdsOmmVers(builder, this.ccsdsOmmVers);
  VCM.addCreationDate(builder, creationDate);
  VCM.addOriginator(builder, originator);
  VCM.addObjectName(builder, objectName);
  VCM.addObjectId(builder, objectId);
  VCM.addCenterName(builder, centerName);
  VCM.addRefFrame(builder, refFrame);
  VCM.addTimeSystem(builder, timeSystem);
  VCM.addStateVector(builder, stateVector);
  VCM.addKeplerianElements(builder, keplerianElements);
  VCM.addEquinoctialElements(builder, equinoctialElements);
  VCM.addGm(builder, this.gm);
  VCM.addAtmosphericModelData(builder, atmosphericModelData);
  VCM.addPropagatorSettings(builder, propagatorSettings);
  VCM.addCovarianceMatrix(builder, covarianceMatrix);
  VCM.addUvwSigmas(builder, uvwSigmas);
  VCM.addMass(builder, this.mass);
  VCM.addSolarRadArea(builder, this.solarRadArea);
  VCM.addSolarRadCoeff(builder, this.solarRadCoeff);
  VCM.addDragArea(builder, this.dragArea);
  VCM.addDragCoeff(builder, this.dragCoeff);
  VCM.addSrp(builder, this.srp);
  VCM.addClassificationType(builder, classificationType);
  VCM.addNoradCatId(builder, this.noradCatId);
  VCM.addElementSetNo(builder, this.elementSetNo);
  VCM.addRevAtEpoch(builder, this.revAtEpoch);
  VCM.addBstar(builder, this.bstar);
  VCM.addMeanMotionDot(builder, this.meanMotionDot);
  VCM.addMeanMotionDdot(builder, this.meanMotionDdot);
  VCM.addCovReferenceFrame(builder, covReferenceFrame);
  VCM.addCxX(builder, this.cxX);
  VCM.addCyX(builder, this.cyX);
  VCM.addCzX(builder, this.czX);
  VCM.addCxDotX(builder, this.cxDotX);
  VCM.addUserDefinedBip0044Type(builder, this.userDefinedBip0044Type);
  VCM.addUserDefinedObjectDesignator(builder, userDefinedObjectDesignator);
  VCM.addUserDefinedEarthModel(builder, userDefinedEarthModel);
  VCM.addUserDefinedEpochTimestamp(builder, this.userDefinedEpochTimestamp);
  VCM.addUserDefinedMicroseconds(builder, this.userDefinedMicroseconds);

  return VCM.endVCM(builder);
}
}
