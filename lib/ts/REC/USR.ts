// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class USR implements flatbuffers.IUnpackableObject<USRT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):USR {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUSR(bb:flatbuffers.ByteBuffer, obj?:USR):USR {
  return (obj || new USR()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUSR(bb:flatbuffers.ByteBuffer, obj?:USR):USR {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new USR()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ID():string|null
ID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

MESSAGE_TYPES(index: number):string
MESSAGE_TYPES(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
MESSAGE_TYPES(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

messageTypesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startUSR(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addId(builder:flatbuffers.Builder, IDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, IDOffset, 0);
}

static addMessageTypes(builder:flatbuffers.Builder, MESSAGE_TYPESOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, MESSAGE_TYPESOffset, 0);
}

static createMessageTypesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMessageTypesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endUSR(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUSR(builder:flatbuffers.Builder, IDOffset:flatbuffers.Offset, MESSAGE_TYPESOffset:flatbuffers.Offset):flatbuffers.Offset {
  USR.startUSR(builder);
  USR.addId(builder, IDOffset);
  USR.addMessageTypes(builder, MESSAGE_TYPESOffset);
  return USR.endUSR(builder);
}

unpack(): USRT {
  return new USRT(
    this.ID(),
    this.bb!.createScalarList<string>(this.MESSAGE_TYPES.bind(this), this.messageTypesLength())
  );
}


unpackTo(_o: USRT): void {
  _o.ID = this.ID();
  _o.MESSAGE_TYPES = this.bb!.createScalarList<string>(this.MESSAGE_TYPES.bind(this), this.messageTypesLength());
}
}

export class USRT implements flatbuffers.IGeneratedObject {
constructor(
  public ID: string|Uint8Array|null = null,
  public MESSAGE_TYPES: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const ID = (this.ID !== null ? builder.createString(this.ID!) : 0);
  const MESSAGE_TYPES = USR.createMessageTypesVector(builder, builder.createObjectOffsetList(this.MESSAGE_TYPES));

  return USR.createUSR(builder,
    ID,
    MESSAGE_TYPES
  );
}
}
