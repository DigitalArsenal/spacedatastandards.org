// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Record, RecordT } from './Record.js';


/**
 * Collection of Standard Records
 */
export class REC implements flatbuffers.IUnpackableObject<RECT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):REC {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsREC(bb:flatbuffers.ByteBuffer, obj?:REC):REC {
  return (obj || new REC()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsREC(bb:flatbuffers.ByteBuffer, obj?:REC):REC {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new REC()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$REC');
}

version():string|null
version(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
version(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

RECORDS(index: number, obj?:Record):Record|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Record()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

recordsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startREC(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addVersion(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, versionOffset, 0);
}

static addRecords(builder:flatbuffers.Builder, RECORDSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, RECORDSOffset, 0);
}

static createRecordsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRecordsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endREC(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishRECBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$REC');
}

static finishSizePrefixedRECBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$REC', true);
}

static createREC(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset, RECORDSOffset:flatbuffers.Offset):flatbuffers.Offset {
  REC.startREC(builder);
  REC.addVersion(builder, versionOffset);
  REC.addRecords(builder, RECORDSOffset);
  return REC.endREC(builder);
}

unpack(): RECT {
  return new RECT(
    this.version(),
    this.bb!.createObjList<Record, RecordT>(this.RECORDS.bind(this), this.recordsLength())
  );
}


unpackTo(_o: RECT): void {
  _o.version = this.version();
  _o.RECORDS = this.bb!.createObjList<Record, RecordT>(this.RECORDS.bind(this), this.recordsLength());
}
}

export class RECT implements flatbuffers.IGeneratedObject {
constructor(
  public version: string|Uint8Array|null = null,
  public RECORDS: (RecordT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const version = (this.version !== null ? builder.createString(this.version!) : 0);
  const RECORDS = REC.createRecordsVector(builder, builder.createObjectOffsetList(this.RECORDS));

  return REC.createREC(builder,
    version,
    RECORDS
  );
}
}
