// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Maneuver implements flatbuffers.IUnpackableObject<ManeuverT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Maneuver {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsManeuver(bb:flatbuffers.ByteBuffer, obj?:Maneuver):Maneuver {
  return (obj || new Maneuver()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsManeuver(bb:flatbuffers.ByteBuffer, obj?:Maneuver):Maneuver {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Maneuver()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Unique identifier for the maneuver.
 */
MAN_ID():string|null
MAN_ID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MAN_ID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Basis of the maneuver plan (e.g., planned, predicted, estimated).
 */
MAN_BASIS():string|null
MAN_BASIS(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MAN_BASIS(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the maneuver device.
 */
MAN_DEVICE_ID():string|null
MAN_DEVICE_ID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MAN_DEVICE_ID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the previous maneuver.
 */
MAN_PREV_ID():string|null
MAN_PREV_ID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MAN_PREV_ID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Purpose of the maneuver.
 */
MAN_PURPOSE():string|null
MAN_PURPOSE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MAN_PURPOSE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Reference frame for the maneuver data.
 */
MAN_REF_FRAME():string|null
MAN_REF_FRAME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MAN_REF_FRAME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Epoch of the maneuver reference frame.
 */
MAN_FRAME_EPOCH():string|null
MAN_FRAME_EPOCH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MAN_FRAME_EPOCH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of maneuver (e.g., IMPULSIVE, FINITE).
 */
MAN_TYPE():string|null
MAN_TYPE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MAN_TYPE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Start epoch of the maneuver.
 */
MAN_EPOCH_START():string|null
MAN_EPOCH_START(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MAN_EPOCH_START(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Duration of the maneuver.
 */
MAN_DURATION():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Units for the maneuver data values.
 */
MAN_UNITS(index: number):string
MAN_UNITS(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
MAN_UNITS(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

manUnitsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Data associated with the maneuver.
 */
DATA(index: number):string
DATA(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
DATA(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Comments related to the maneuver.
 */
MAN_COMMENT(index: number):string
MAN_COMMENT(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
MAN_COMMENT(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

manCommentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startManeuver(builder:flatbuffers.Builder) {
  builder.startObject(13);
}

static addManId(builder:flatbuffers.Builder, MAN_IDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, MAN_IDOffset, 0);
}

static addManBasis(builder:flatbuffers.Builder, MAN_BASISOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, MAN_BASISOffset, 0);
}

static addManDeviceId(builder:flatbuffers.Builder, MAN_DEVICE_IDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, MAN_DEVICE_IDOffset, 0);
}

static addManPrevId(builder:flatbuffers.Builder, MAN_PREV_IDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, MAN_PREV_IDOffset, 0);
}

static addManPurpose(builder:flatbuffers.Builder, MAN_PURPOSEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, MAN_PURPOSEOffset, 0);
}

static addManRefFrame(builder:flatbuffers.Builder, MAN_REF_FRAMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, MAN_REF_FRAMEOffset, 0);
}

static addManFrameEpoch(builder:flatbuffers.Builder, MAN_FRAME_EPOCHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, MAN_FRAME_EPOCHOffset, 0);
}

static addManType(builder:flatbuffers.Builder, MAN_TYPEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, MAN_TYPEOffset, 0);
}

static addManEpochStart(builder:flatbuffers.Builder, MAN_EPOCH_STARTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, MAN_EPOCH_STARTOffset, 0);
}

static addManDuration(builder:flatbuffers.Builder, MAN_DURATION:number) {
  builder.addFieldFloat64(9, MAN_DURATION, 0.0);
}

static addManUnits(builder:flatbuffers.Builder, MAN_UNITSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, MAN_UNITSOffset, 0);
}

static createManUnitsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startManUnitsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addData(builder:flatbuffers.Builder, DATAOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, DATAOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addManComment(builder:flatbuffers.Builder, MAN_COMMENTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, MAN_COMMENTOffset, 0);
}

static createManCommentVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startManCommentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endManeuver(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createManeuver(builder:flatbuffers.Builder, MAN_IDOffset:flatbuffers.Offset, MAN_BASISOffset:flatbuffers.Offset, MAN_DEVICE_IDOffset:flatbuffers.Offset, MAN_PREV_IDOffset:flatbuffers.Offset, MAN_PURPOSEOffset:flatbuffers.Offset, MAN_REF_FRAMEOffset:flatbuffers.Offset, MAN_FRAME_EPOCHOffset:flatbuffers.Offset, MAN_TYPEOffset:flatbuffers.Offset, MAN_EPOCH_STARTOffset:flatbuffers.Offset, MAN_DURATION:number, MAN_UNITSOffset:flatbuffers.Offset, DATAOffset:flatbuffers.Offset, MAN_COMMENTOffset:flatbuffers.Offset):flatbuffers.Offset {
  Maneuver.startManeuver(builder);
  Maneuver.addManId(builder, MAN_IDOffset);
  Maneuver.addManBasis(builder, MAN_BASISOffset);
  Maneuver.addManDeviceId(builder, MAN_DEVICE_IDOffset);
  Maneuver.addManPrevId(builder, MAN_PREV_IDOffset);
  Maneuver.addManPurpose(builder, MAN_PURPOSEOffset);
  Maneuver.addManRefFrame(builder, MAN_REF_FRAMEOffset);
  Maneuver.addManFrameEpoch(builder, MAN_FRAME_EPOCHOffset);
  Maneuver.addManType(builder, MAN_TYPEOffset);
  Maneuver.addManEpochStart(builder, MAN_EPOCH_STARTOffset);
  Maneuver.addManDuration(builder, MAN_DURATION);
  Maneuver.addManUnits(builder, MAN_UNITSOffset);
  Maneuver.addData(builder, DATAOffset);
  Maneuver.addManComment(builder, MAN_COMMENTOffset);
  return Maneuver.endManeuver(builder);
}

unpack(): ManeuverT {
  return new ManeuverT(
    this.MAN_ID(),
    this.MAN_BASIS(),
    this.MAN_DEVICE_ID(),
    this.MAN_PREV_ID(),
    this.MAN_PURPOSE(),
    this.MAN_REF_FRAME(),
    this.MAN_FRAME_EPOCH(),
    this.MAN_TYPE(),
    this.MAN_EPOCH_START(),
    this.MAN_DURATION(),
    this.bb!.createScalarList<string>(this.MAN_UNITS.bind(this), this.manUnitsLength()),
    this.bb!.createScalarList<string>(this.DATA.bind(this), this.dataLength()),
    this.bb!.createScalarList<string>(this.MAN_COMMENT.bind(this), this.manCommentLength())
  );
}


unpackTo(_o: ManeuverT): void {
  _o.MAN_ID = this.MAN_ID();
  _o.MAN_BASIS = this.MAN_BASIS();
  _o.MAN_DEVICE_ID = this.MAN_DEVICE_ID();
  _o.MAN_PREV_ID = this.MAN_PREV_ID();
  _o.MAN_PURPOSE = this.MAN_PURPOSE();
  _o.MAN_REF_FRAME = this.MAN_REF_FRAME();
  _o.MAN_FRAME_EPOCH = this.MAN_FRAME_EPOCH();
  _o.MAN_TYPE = this.MAN_TYPE();
  _o.MAN_EPOCH_START = this.MAN_EPOCH_START();
  _o.MAN_DURATION = this.MAN_DURATION();
  _o.MAN_UNITS = this.bb!.createScalarList<string>(this.MAN_UNITS.bind(this), this.manUnitsLength());
  _o.DATA = this.bb!.createScalarList<string>(this.DATA.bind(this), this.dataLength());
  _o.MAN_COMMENT = this.bb!.createScalarList<string>(this.MAN_COMMENT.bind(this), this.manCommentLength());
}
}

export class ManeuverT implements flatbuffers.IGeneratedObject {
constructor(
  public MAN_ID: string|Uint8Array|null = null,
  public MAN_BASIS: string|Uint8Array|null = null,
  public MAN_DEVICE_ID: string|Uint8Array|null = null,
  public MAN_PREV_ID: string|Uint8Array|null = null,
  public MAN_PURPOSE: string|Uint8Array|null = null,
  public MAN_REF_FRAME: string|Uint8Array|null = null,
  public MAN_FRAME_EPOCH: string|Uint8Array|null = null,
  public MAN_TYPE: string|Uint8Array|null = null,
  public MAN_EPOCH_START: string|Uint8Array|null = null,
  public MAN_DURATION: number = 0.0,
  public MAN_UNITS: (string)[] = [],
  public DATA: (string)[] = [],
  public MAN_COMMENT: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const MAN_ID = (this.MAN_ID !== null ? builder.createString(this.MAN_ID!) : 0);
  const MAN_BASIS = (this.MAN_BASIS !== null ? builder.createString(this.MAN_BASIS!) : 0);
  const MAN_DEVICE_ID = (this.MAN_DEVICE_ID !== null ? builder.createString(this.MAN_DEVICE_ID!) : 0);
  const MAN_PREV_ID = (this.MAN_PREV_ID !== null ? builder.createString(this.MAN_PREV_ID!) : 0);
  const MAN_PURPOSE = (this.MAN_PURPOSE !== null ? builder.createString(this.MAN_PURPOSE!) : 0);
  const MAN_REF_FRAME = (this.MAN_REF_FRAME !== null ? builder.createString(this.MAN_REF_FRAME!) : 0);
  const MAN_FRAME_EPOCH = (this.MAN_FRAME_EPOCH !== null ? builder.createString(this.MAN_FRAME_EPOCH!) : 0);
  const MAN_TYPE = (this.MAN_TYPE !== null ? builder.createString(this.MAN_TYPE!) : 0);
  const MAN_EPOCH_START = (this.MAN_EPOCH_START !== null ? builder.createString(this.MAN_EPOCH_START!) : 0);
  const MAN_UNITS = Maneuver.createManUnitsVector(builder, builder.createObjectOffsetList(this.MAN_UNITS));
  const DATA = Maneuver.createDataVector(builder, builder.createObjectOffsetList(this.DATA));
  const MAN_COMMENT = Maneuver.createManCommentVector(builder, builder.createObjectOffsetList(this.MAN_COMMENT));

  return Maneuver.createManeuver(builder,
    MAN_ID,
    MAN_BASIS,
    MAN_DEVICE_ID,
    MAN_PREV_ID,
    MAN_PURPOSE,
    MAN_REF_FRAME,
    MAN_FRAME_EPOCH,
    MAN_TYPE,
    MAN_EPOCH_START,
    this.MAN_DURATION,
    MAN_UNITS,
    DATA,
    MAN_COMMENT
  );
}
}
