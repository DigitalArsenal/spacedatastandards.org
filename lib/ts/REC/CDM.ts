// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CDMObject, CDMObjectT } from './CDMObject.js';
import { PNM, PNMT } from './PNM.js';
import { refFrame } from './refFrame.js';
import { screeningVolumeShape } from './screeningVolumeShape.js';


/**
 * Conjunction Data Message
 */
export class CDM implements flatbuffers.IUnpackableObject<CDMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CDM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCDM(bb:flatbuffers.ByteBuffer, obj?:CDM):CDM {
  return (obj || new CDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCDM(bb:flatbuffers.ByteBuffer, obj?:CDM):CDM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$CDM');
}

/**
 * The version of the CCSDS CDM standard used
 */
CCSDS_CDM_VERS():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The date the CDM message was created
 */
CREATION_DATE():string|null
CREATION_DATE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CREATION_DATE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originator of the CDM message
 */
ORIGINATOR():string|null
ORIGINATOR(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ORIGINATOR(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The intended recipient of the CDM message
 */
MESSAGE_FOR():string|null
MESSAGE_FOR(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MESSAGE_FOR(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A unique identifier for the CDM message
 */
MESSAGE_ID():string|null
MESSAGE_ID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MESSAGE_ID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of closest approach
 */
TCA():string|null
TCA(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
TCA(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The miss distance between the two objects
 */
MISS_DISTANCE():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The relative speed between the two objects
 */
RELATIVE_SPEED():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The relative position R component
 */
RELATIVE_POSITION_R():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The relative position T component
 */
RELATIVE_POSITION_T():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The relative position N component
 */
RELATIVE_POSITION_N():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The relative velocity R component
 */
RELATIVE_VELOCITY_R():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The relative velocity T component
 */
RELATIVE_VELOCITY_T():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The relative velocity N component
 */
RELATIVE_VELOCITY_N():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The start time of the screening period
 */
START_SCREEN_PERIOD():string|null
START_SCREEN_PERIOD(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
START_SCREEN_PERIOD(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The end time of the screening period
 */
STOP_SCREEN_PERIOD():string|null
STOP_SCREEN_PERIOD(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
STOP_SCREEN_PERIOD(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reference frame for the screening volume
 */
SCREEN_VOLUME_FRAME():refFrame {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : refFrame.ECEF;
}

/**
 * The shape of the screening volume
 */
SCREEN_VOLUME_SHAPE():screeningVolumeShape {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : screeningVolumeShape.ELLIPSOID;
}

/**
 * The X dimension of the screening volume
 */
SCREEN_VOLUME_X():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Y dimension of the screening volume
 */
SCREEN_VOLUME_Y():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Z dimension of the screening volume
 */
SCREEN_VOLUME_Z():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The time the objects entered the screening volume
 */
SCREEN_ENTRY_TIME():string|null
SCREEN_ENTRY_TIME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SCREEN_ENTRY_TIME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time the objects exited the screening volume
 */
SCREEN_EXIT_TIME():string|null
SCREEN_EXIT_TIME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SCREEN_EXIT_TIME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The probability of collision between the two objects
 */
COLLISION_PROBABILITY():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The method used to calculate the collision probability
 */
COLLISION_PROBABILITY_METHOD():string|null
COLLISION_PROBABILITY_METHOD(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
COLLISION_PROBABILITY_METHOD(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The first object in the CDM message
 */
OBJECT1(obj?:CDMObject):CDMObject|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? (obj || new CDMObject()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * The second object in the CDM message
 */
OBJECT2(obj?:CDMObject):CDMObject|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? (obj || new CDMObject()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Data Source for the positional information for Object 1
 */
OBJECT1_DATASOURCE(obj?:PNM):PNM|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? (obj || new PNM()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Data Source for the positional information for Object 2
 */
OBJECT2_DATASOURCE(obj?:PNM):PNM|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? (obj || new PNM()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startCDM(builder:flatbuffers.Builder) {
  builder.startObject(29);
}

static addCcsdsCdmVers(builder:flatbuffers.Builder, CCSDS_CDM_VERS:number) {
  builder.addFieldFloat64(0, CCSDS_CDM_VERS, 0.0);
}

static addCreationDate(builder:flatbuffers.Builder, CREATION_DATEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, CREATION_DATEOffset, 0);
}

static addOriginator(builder:flatbuffers.Builder, ORIGINATOROffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, ORIGINATOROffset, 0);
}

static addMessageFor(builder:flatbuffers.Builder, MESSAGE_FOROffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, MESSAGE_FOROffset, 0);
}

static addMessageId(builder:flatbuffers.Builder, MESSAGE_IDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, MESSAGE_IDOffset, 0);
}

static addTca(builder:flatbuffers.Builder, TCAOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, TCAOffset, 0);
}

static addMissDistance(builder:flatbuffers.Builder, MISS_DISTANCE:number) {
  builder.addFieldFloat64(6, MISS_DISTANCE, 0.0);
}

static addRelativeSpeed(builder:flatbuffers.Builder, RELATIVE_SPEED:number) {
  builder.addFieldFloat64(7, RELATIVE_SPEED, 0.0);
}

static addRelativePositionR(builder:flatbuffers.Builder, RELATIVE_POSITION_R:number) {
  builder.addFieldFloat64(8, RELATIVE_POSITION_R, 0.0);
}

static addRelativePositionT(builder:flatbuffers.Builder, RELATIVE_POSITION_T:number) {
  builder.addFieldFloat64(9, RELATIVE_POSITION_T, 0.0);
}

static addRelativePositionN(builder:flatbuffers.Builder, RELATIVE_POSITION_N:number) {
  builder.addFieldFloat64(10, RELATIVE_POSITION_N, 0.0);
}

static addRelativeVelocityR(builder:flatbuffers.Builder, RELATIVE_VELOCITY_R:number) {
  builder.addFieldFloat64(11, RELATIVE_VELOCITY_R, 0.0);
}

static addRelativeVelocityT(builder:flatbuffers.Builder, RELATIVE_VELOCITY_T:number) {
  builder.addFieldFloat64(12, RELATIVE_VELOCITY_T, 0.0);
}

static addRelativeVelocityN(builder:flatbuffers.Builder, RELATIVE_VELOCITY_N:number) {
  builder.addFieldFloat64(13, RELATIVE_VELOCITY_N, 0.0);
}

static addStartScreenPeriod(builder:flatbuffers.Builder, START_SCREEN_PERIODOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, START_SCREEN_PERIODOffset, 0);
}

static addStopScreenPeriod(builder:flatbuffers.Builder, STOP_SCREEN_PERIODOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, STOP_SCREEN_PERIODOffset, 0);
}

static addScreenVolumeFrame(builder:flatbuffers.Builder, SCREEN_VOLUME_FRAME:refFrame) {
  builder.addFieldInt8(16, SCREEN_VOLUME_FRAME, refFrame.ECEF);
}

static addScreenVolumeShape(builder:flatbuffers.Builder, SCREEN_VOLUME_SHAPE:screeningVolumeShape) {
  builder.addFieldInt8(17, SCREEN_VOLUME_SHAPE, screeningVolumeShape.ELLIPSOID);
}

static addScreenVolumeX(builder:flatbuffers.Builder, SCREEN_VOLUME_X:number) {
  builder.addFieldFloat64(18, SCREEN_VOLUME_X, 0.0);
}

static addScreenVolumeY(builder:flatbuffers.Builder, SCREEN_VOLUME_Y:number) {
  builder.addFieldFloat64(19, SCREEN_VOLUME_Y, 0.0);
}

static addScreenVolumeZ(builder:flatbuffers.Builder, SCREEN_VOLUME_Z:number) {
  builder.addFieldFloat64(20, SCREEN_VOLUME_Z, 0.0);
}

static addScreenEntryTime(builder:flatbuffers.Builder, SCREEN_ENTRY_TIMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, SCREEN_ENTRY_TIMEOffset, 0);
}

static addScreenExitTime(builder:flatbuffers.Builder, SCREEN_EXIT_TIMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, SCREEN_EXIT_TIMEOffset, 0);
}

static addCollisionProbability(builder:flatbuffers.Builder, COLLISION_PROBABILITY:number) {
  builder.addFieldFloat64(23, COLLISION_PROBABILITY, 0.0);
}

static addCollisionProbabilityMethod(builder:flatbuffers.Builder, COLLISION_PROBABILITY_METHODOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, COLLISION_PROBABILITY_METHODOffset, 0);
}

static addObject1(builder:flatbuffers.Builder, OBJECT1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(25, OBJECT1Offset, 0);
}

static addObject2(builder:flatbuffers.Builder, OBJECT2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(26, OBJECT2Offset, 0);
}

static addObject1Datasource(builder:flatbuffers.Builder, OBJECT1_DATASOURCEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, OBJECT1_DATASOURCEOffset, 0);
}

static addObject2Datasource(builder:flatbuffers.Builder, OBJECT2_DATASOURCEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, OBJECT2_DATASOURCEOffset, 0);
}

static endCDM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCDMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$CDM');
}

static finishSizePrefixedCDMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$CDM', true);
}


unpack(): CDMT {
  return new CDMT(
    this.CCSDS_CDM_VERS(),
    this.CREATION_DATE(),
    this.ORIGINATOR(),
    this.MESSAGE_FOR(),
    this.MESSAGE_ID(),
    this.TCA(),
    this.MISS_DISTANCE(),
    this.RELATIVE_SPEED(),
    this.RELATIVE_POSITION_R(),
    this.RELATIVE_POSITION_T(),
    this.RELATIVE_POSITION_N(),
    this.RELATIVE_VELOCITY_R(),
    this.RELATIVE_VELOCITY_T(),
    this.RELATIVE_VELOCITY_N(),
    this.START_SCREEN_PERIOD(),
    this.STOP_SCREEN_PERIOD(),
    this.SCREEN_VOLUME_FRAME(),
    this.SCREEN_VOLUME_SHAPE(),
    this.SCREEN_VOLUME_X(),
    this.SCREEN_VOLUME_Y(),
    this.SCREEN_VOLUME_Z(),
    this.SCREEN_ENTRY_TIME(),
    this.SCREEN_EXIT_TIME(),
    this.COLLISION_PROBABILITY(),
    this.COLLISION_PROBABILITY_METHOD(),
    (this.OBJECT1() !== null ? this.OBJECT1()!.unpack() : null),
    (this.OBJECT2() !== null ? this.OBJECT2()!.unpack() : null),
    (this.OBJECT1_DATASOURCE() !== null ? this.OBJECT1_DATASOURCE()!.unpack() : null),
    (this.OBJECT2_DATASOURCE() !== null ? this.OBJECT2_DATASOURCE()!.unpack() : null)
  );
}


unpackTo(_o: CDMT): void {
  _o.CCSDS_CDM_VERS = this.CCSDS_CDM_VERS();
  _o.CREATION_DATE = this.CREATION_DATE();
  _o.ORIGINATOR = this.ORIGINATOR();
  _o.MESSAGE_FOR = this.MESSAGE_FOR();
  _o.MESSAGE_ID = this.MESSAGE_ID();
  _o.TCA = this.TCA();
  _o.MISS_DISTANCE = this.MISS_DISTANCE();
  _o.RELATIVE_SPEED = this.RELATIVE_SPEED();
  _o.RELATIVE_POSITION_R = this.RELATIVE_POSITION_R();
  _o.RELATIVE_POSITION_T = this.RELATIVE_POSITION_T();
  _o.RELATIVE_POSITION_N = this.RELATIVE_POSITION_N();
  _o.RELATIVE_VELOCITY_R = this.RELATIVE_VELOCITY_R();
  _o.RELATIVE_VELOCITY_T = this.RELATIVE_VELOCITY_T();
  _o.RELATIVE_VELOCITY_N = this.RELATIVE_VELOCITY_N();
  _o.START_SCREEN_PERIOD = this.START_SCREEN_PERIOD();
  _o.STOP_SCREEN_PERIOD = this.STOP_SCREEN_PERIOD();
  _o.SCREEN_VOLUME_FRAME = this.SCREEN_VOLUME_FRAME();
  _o.SCREEN_VOLUME_SHAPE = this.SCREEN_VOLUME_SHAPE();
  _o.SCREEN_VOLUME_X = this.SCREEN_VOLUME_X();
  _o.SCREEN_VOLUME_Y = this.SCREEN_VOLUME_Y();
  _o.SCREEN_VOLUME_Z = this.SCREEN_VOLUME_Z();
  _o.SCREEN_ENTRY_TIME = this.SCREEN_ENTRY_TIME();
  _o.SCREEN_EXIT_TIME = this.SCREEN_EXIT_TIME();
  _o.COLLISION_PROBABILITY = this.COLLISION_PROBABILITY();
  _o.COLLISION_PROBABILITY_METHOD = this.COLLISION_PROBABILITY_METHOD();
  _o.OBJECT1 = (this.OBJECT1() !== null ? this.OBJECT1()!.unpack() : null);
  _o.OBJECT2 = (this.OBJECT2() !== null ? this.OBJECT2()!.unpack() : null);
  _o.OBJECT1_DATASOURCE = (this.OBJECT1_DATASOURCE() !== null ? this.OBJECT1_DATASOURCE()!.unpack() : null);
  _o.OBJECT2_DATASOURCE = (this.OBJECT2_DATASOURCE() !== null ? this.OBJECT2_DATASOURCE()!.unpack() : null);
}
}

export class CDMT implements flatbuffers.IGeneratedObject {
constructor(
  public CCSDS_CDM_VERS: number = 0.0,
  public CREATION_DATE: string|Uint8Array|null = null,
  public ORIGINATOR: string|Uint8Array|null = null,
  public MESSAGE_FOR: string|Uint8Array|null = null,
  public MESSAGE_ID: string|Uint8Array|null = null,
  public TCA: string|Uint8Array|null = null,
  public MISS_DISTANCE: number = 0.0,
  public RELATIVE_SPEED: number = 0.0,
  public RELATIVE_POSITION_R: number = 0.0,
  public RELATIVE_POSITION_T: number = 0.0,
  public RELATIVE_POSITION_N: number = 0.0,
  public RELATIVE_VELOCITY_R: number = 0.0,
  public RELATIVE_VELOCITY_T: number = 0.0,
  public RELATIVE_VELOCITY_N: number = 0.0,
  public START_SCREEN_PERIOD: string|Uint8Array|null = null,
  public STOP_SCREEN_PERIOD: string|Uint8Array|null = null,
  public SCREEN_VOLUME_FRAME: refFrame = refFrame.ECEF,
  public SCREEN_VOLUME_SHAPE: screeningVolumeShape = screeningVolumeShape.ELLIPSOID,
  public SCREEN_VOLUME_X: number = 0.0,
  public SCREEN_VOLUME_Y: number = 0.0,
  public SCREEN_VOLUME_Z: number = 0.0,
  public SCREEN_ENTRY_TIME: string|Uint8Array|null = null,
  public SCREEN_EXIT_TIME: string|Uint8Array|null = null,
  public COLLISION_PROBABILITY: number = 0.0,
  public COLLISION_PROBABILITY_METHOD: string|Uint8Array|null = null,
  public OBJECT1: CDMObjectT|null = null,
  public OBJECT2: CDMObjectT|null = null,
  public OBJECT1_DATASOURCE: PNMT|null = null,
  public OBJECT2_DATASOURCE: PNMT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const CREATION_DATE = (this.CREATION_DATE !== null ? builder.createString(this.CREATION_DATE!) : 0);
  const ORIGINATOR = (this.ORIGINATOR !== null ? builder.createString(this.ORIGINATOR!) : 0);
  const MESSAGE_FOR = (this.MESSAGE_FOR !== null ? builder.createString(this.MESSAGE_FOR!) : 0);
  const MESSAGE_ID = (this.MESSAGE_ID !== null ? builder.createString(this.MESSAGE_ID!) : 0);
  const TCA = (this.TCA !== null ? builder.createString(this.TCA!) : 0);
  const START_SCREEN_PERIOD = (this.START_SCREEN_PERIOD !== null ? builder.createString(this.START_SCREEN_PERIOD!) : 0);
  const STOP_SCREEN_PERIOD = (this.STOP_SCREEN_PERIOD !== null ? builder.createString(this.STOP_SCREEN_PERIOD!) : 0);
  const SCREEN_ENTRY_TIME = (this.SCREEN_ENTRY_TIME !== null ? builder.createString(this.SCREEN_ENTRY_TIME!) : 0);
  const SCREEN_EXIT_TIME = (this.SCREEN_EXIT_TIME !== null ? builder.createString(this.SCREEN_EXIT_TIME!) : 0);
  const COLLISION_PROBABILITY_METHOD = (this.COLLISION_PROBABILITY_METHOD !== null ? builder.createString(this.COLLISION_PROBABILITY_METHOD!) : 0);
  const OBJECT1 = (this.OBJECT1 !== null ? this.OBJECT1!.pack(builder) : 0);
  const OBJECT2 = (this.OBJECT2 !== null ? this.OBJECT2!.pack(builder) : 0);
  const OBJECT1_DATASOURCE = (this.OBJECT1_DATASOURCE !== null ? this.OBJECT1_DATASOURCE!.pack(builder) : 0);
  const OBJECT2_DATASOURCE = (this.OBJECT2_DATASOURCE !== null ? this.OBJECT2_DATASOURCE!.pack(builder) : 0);

  CDM.startCDM(builder);
  CDM.addCcsdsCdmVers(builder, this.CCSDS_CDM_VERS);
  CDM.addCreationDate(builder, CREATION_DATE);
  CDM.addOriginator(builder, ORIGINATOR);
  CDM.addMessageFor(builder, MESSAGE_FOR);
  CDM.addMessageId(builder, MESSAGE_ID);
  CDM.addTca(builder, TCA);
  CDM.addMissDistance(builder, this.MISS_DISTANCE);
  CDM.addRelativeSpeed(builder, this.RELATIVE_SPEED);
  CDM.addRelativePositionR(builder, this.RELATIVE_POSITION_R);
  CDM.addRelativePositionT(builder, this.RELATIVE_POSITION_T);
  CDM.addRelativePositionN(builder, this.RELATIVE_POSITION_N);
  CDM.addRelativeVelocityR(builder, this.RELATIVE_VELOCITY_R);
  CDM.addRelativeVelocityT(builder, this.RELATIVE_VELOCITY_T);
  CDM.addRelativeVelocityN(builder, this.RELATIVE_VELOCITY_N);
  CDM.addStartScreenPeriod(builder, START_SCREEN_PERIOD);
  CDM.addStopScreenPeriod(builder, STOP_SCREEN_PERIOD);
  CDM.addScreenVolumeFrame(builder, this.SCREEN_VOLUME_FRAME);
  CDM.addScreenVolumeShape(builder, this.SCREEN_VOLUME_SHAPE);
  CDM.addScreenVolumeX(builder, this.SCREEN_VOLUME_X);
  CDM.addScreenVolumeY(builder, this.SCREEN_VOLUME_Y);
  CDM.addScreenVolumeZ(builder, this.SCREEN_VOLUME_Z);
  CDM.addScreenEntryTime(builder, SCREEN_ENTRY_TIME);
  CDM.addScreenExitTime(builder, SCREEN_EXIT_TIME);
  CDM.addCollisionProbability(builder, this.COLLISION_PROBABILITY);
  CDM.addCollisionProbabilityMethod(builder, COLLISION_PROBABILITY_METHOD);
  CDM.addObject1(builder, OBJECT1);
  CDM.addObject2(builder, OBJECT2);
  CDM.addObject1Datasource(builder, OBJECT1_DATASOURCE);
  CDM.addObject2Datasource(builder, OBJECT2_DATASOURCE);

  return CDM.endCDM(builder);
}
}
