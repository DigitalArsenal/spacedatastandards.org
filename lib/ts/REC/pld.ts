// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { IDM, IDMT } from './idm.js';


/**
 * Payload Information
 */
export class PLD implements flatbuffers.IUnpackableObject<PLDT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PLD {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPLD(bb:flatbuffers.ByteBuffer, obj?:PLD):PLD {
  return (obj || new PLD()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPLD(bb:flatbuffers.ByteBuffer, obj?:PLD):PLD {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PLD()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$PLD');
}

payloadDuration():string|null
payloadDuration(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
payloadDuration(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

massAtLaunch():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

dimensions():string|null
dimensions(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dimensions(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

solarArrayArea():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

solarArrayDimensions():string|null
solarArrayDimensions(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
solarArrayDimensions(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

nominalOperationalLifetime():string|null
nominalOperationalLifetime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nominalOperationalLifetime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

instruments(index: number, obj?:IDM):IDM|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new IDM()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

instrumentsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPLD(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addPayloadDuration(builder:flatbuffers.Builder, payloadDurationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, payloadDurationOffset, 0);
}

static addMassAtLaunch(builder:flatbuffers.Builder, massAtLaunch:number) {
  builder.addFieldFloat32(1, massAtLaunch, 0.0);
}

static addDimensions(builder:flatbuffers.Builder, dimensionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dimensionsOffset, 0);
}

static addSolarArrayArea(builder:flatbuffers.Builder, solarArrayArea:number) {
  builder.addFieldFloat32(3, solarArrayArea, 0.0);
}

static addSolarArrayDimensions(builder:flatbuffers.Builder, solarArrayDimensionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, solarArrayDimensionsOffset, 0);
}

static addNominalOperationalLifetime(builder:flatbuffers.Builder, nominalOperationalLifetimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, nominalOperationalLifetimeOffset, 0);
}

static addInstruments(builder:flatbuffers.Builder, instrumentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, instrumentsOffset, 0);
}

static createInstrumentsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInstrumentsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPLD(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPLDBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$PLD');
}

static finishSizePrefixedPLDBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$PLD', true);
}

static createPLD(builder:flatbuffers.Builder, payloadDurationOffset:flatbuffers.Offset, massAtLaunch:number, dimensionsOffset:flatbuffers.Offset, solarArrayArea:number, solarArrayDimensionsOffset:flatbuffers.Offset, nominalOperationalLifetimeOffset:flatbuffers.Offset, instrumentsOffset:flatbuffers.Offset):flatbuffers.Offset {
  PLD.startPLD(builder);
  PLD.addPayloadDuration(builder, payloadDurationOffset);
  PLD.addMassAtLaunch(builder, massAtLaunch);
  PLD.addDimensions(builder, dimensionsOffset);
  PLD.addSolarArrayArea(builder, solarArrayArea);
  PLD.addSolarArrayDimensions(builder, solarArrayDimensionsOffset);
  PLD.addNominalOperationalLifetime(builder, nominalOperationalLifetimeOffset);
  PLD.addInstruments(builder, instrumentsOffset);
  return PLD.endPLD(builder);
}

unpack(): PLDT {
  return new PLDT(
    this.payloadDuration(),
    this.massAtLaunch(),
    this.dimensions(),
    this.solarArrayArea(),
    this.solarArrayDimensions(),
    this.nominalOperationalLifetime(),
    this.bb!.createObjList<IDM, IDMT>(this.instruments.bind(this), this.instrumentsLength())
  );
}


unpackTo(_o: PLDT): void {
  _o.payloadDuration = this.payloadDuration();
  _o.massAtLaunch = this.massAtLaunch();
  _o.dimensions = this.dimensions();
  _o.solarArrayArea = this.solarArrayArea();
  _o.solarArrayDimensions = this.solarArrayDimensions();
  _o.nominalOperationalLifetime = this.nominalOperationalLifetime();
  _o.instruments = this.bb!.createObjList<IDM, IDMT>(this.instruments.bind(this), this.instrumentsLength());
}
}

export class PLDT implements flatbuffers.IGeneratedObject {
constructor(
  public payloadDuration: string|Uint8Array|null = null,
  public massAtLaunch: number = 0.0,
  public dimensions: string|Uint8Array|null = null,
  public solarArrayArea: number = 0.0,
  public solarArrayDimensions: string|Uint8Array|null = null,
  public nominalOperationalLifetime: string|Uint8Array|null = null,
  public instruments: (IDMT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const payloadDuration = (this.payloadDuration !== null ? builder.createString(this.payloadDuration!) : 0);
  const dimensions = (this.dimensions !== null ? builder.createString(this.dimensions!) : 0);
  const solarArrayDimensions = (this.solarArrayDimensions !== null ? builder.createString(this.solarArrayDimensions!) : 0);
  const nominalOperationalLifetime = (this.nominalOperationalLifetime !== null ? builder.createString(this.nominalOperationalLifetime!) : 0);
  const instruments = PLD.createInstrumentsVector(builder, builder.createObjectOffsetList(this.instruments));

  return PLD.createPLD(builder,
    payloadDuration,
    this.massAtLaunch,
    dimensions,
    this.solarArrayArea,
    solarArrayDimensions,
    nominalOperationalLifetime,
    instruments
  );
}
}
