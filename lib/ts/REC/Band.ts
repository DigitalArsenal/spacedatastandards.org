// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FrequencyRange, FrequencyRangeT } from './FrequencyRange.js';


/**
 * Table representing a frequency band with a name and frequency range
 */
export class Band implements flatbuffers.IUnpackableObject<BandT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Band {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBand(bb:flatbuffers.ByteBuffer, obj?:Band):Band {
  return (obj || new Band()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBand(bb:flatbuffers.ByteBuffer, obj?:Band):Band {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Band()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Name of the band
 */
NAME():string|null
NAME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
NAME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Frequency range of the band
 */
FREQUENCY_RANGE(obj?:FrequencyRange):FrequencyRange|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FrequencyRange()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startBand(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addName(builder:flatbuffers.Builder, NAMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, NAMEOffset, 0);
}

static addFrequencyRange(builder:flatbuffers.Builder, FREQUENCY_RANGEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, FREQUENCY_RANGEOffset, 0);
}

static endBand(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): BandT {
  return new BandT(
    this.NAME(),
    (this.FREQUENCY_RANGE() !== null ? this.FREQUENCY_RANGE()!.unpack() : null)
  );
}


unpackTo(_o: BandT): void {
  _o.NAME = this.NAME();
  _o.FREQUENCY_RANGE = (this.FREQUENCY_RANGE() !== null ? this.FREQUENCY_RANGE()!.unpack() : null);
}
}

export class BandT implements flatbuffers.IGeneratedObject {
constructor(
  public NAME: string|Uint8Array|null = null,
  public FREQUENCY_RANGE: FrequencyRangeT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const NAME = (this.NAME !== null ? builder.createString(this.NAME!) : 0);
  const FREQUENCY_RANGE = (this.FREQUENCY_RANGE !== null ? this.FREQUENCY_RANGE!.pack(builder) : 0);

  Band.startBand(builder);
  Band.addName(builder, NAME);
  Band.addFrequencyRange(builder, FREQUENCY_RANGE);

  return Band.endBand(builder);
}
}
