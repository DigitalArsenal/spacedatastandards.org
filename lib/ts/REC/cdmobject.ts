// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CAT, CATT } from './cat.js';
import { EPM, EPMT } from './epm.js';
import { covarianceMethod } from './covariance-method.js';
import { refFrame } from './ref-frame.js';


export class CDMObject implements flatbuffers.IUnpackableObject<CDMObjectT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CDMObject {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCDMObject(bb:flatbuffers.ByteBuffer, obj?:CDMObject):CDMObject {
  return (obj || new CDMObject()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCDMObject(bb:flatbuffers.ByteBuffer, obj?:CDMObject):CDMObject {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CDMObject()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * A comment
 */
comment():string|null
comment(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
comment(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

object(obj?:CAT):CAT|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new CAT()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Point of Contact
 */
poc(obj?:EPM):EPM|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new EPM()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Operator contact position
 */
operatorContactPosition():string|null
operatorContactPosition(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
operatorContactPosition(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Operator organization
 */
operatorOrganization():string|null
operatorOrganization(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
operatorOrganization(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Ephemeris name
 */
ephemerisName():string|null
ephemerisName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ephemerisName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Covariance method
 */
covarianceMethod():covarianceMethod {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : covarianceMethod.CALCULATED;
}

/**
 * Reference Frame in which the object position is defined
 */
referenceFrame():refFrame {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : refFrame.ECEF;
}

/**
 * Gravity model
 */
gravityModel():string|null
gravityModel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gravityModel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Atmospheric model
 */
atmosphericModel():string|null
atmosphericModel(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
atmosphericModel(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * N-body perturbations
 */
nBodyPerturbations():string|null
nBodyPerturbations(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nBodyPerturbations(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Solar radiation pressure
 */
solarRadPressure():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Earth tides
 */
earthTides():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Intrack thrust
 */
intrackThrust():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Time of last observation start
 */
timeLastobStart():string|null
timeLastobStart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
timeLastobStart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of last observation end
 */
timeLastobEnd():string|null
timeLastobEnd(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
timeLastobEnd(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Recommended observation data span
 */
recommendedOdSpan():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Actual observation data span
 */
actualOdSpan():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Number of observations available
 */
obsAvailable():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

/**
 * Number of observations used
 */
obsUsed():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

/**
 * Number of tracks available
 */
tracksAvailable():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

/**
 * Number of tracks used
 */
tracksUsed():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

/**
 * Residuals accepted
 */
residualsAccepted():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Weighted root mean square
 */
weightedRms():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Area of the object
 */
areaPc():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Area of the object drag
 */
areaDrg():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Area of the object solar radiation pressure
 */
areaSrp():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Object's area-to-mass ratio
 */
crAreaOverMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Object's thrust acceleration
 */
thrustAcceleration():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Object's solar flux
 */
sedr():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * X-coordinate of the object's position in RTN coordinates
 */
x():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Y-coordinate of the object's position in RTN
 */
y():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Z-coordinate of the object's position in RTN
 */
z():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * X-coordinate of the object's position in RTN coordinates
 */
xDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Y-coordinate of the object's position in RTN
 */
yDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Z-coordinate of the object's position in RTN
 */
zDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
crR():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
ctR():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
ctT():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cnR():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cnT():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cnN():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
crdotR():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
crdotT():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
crdotN():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
crdotRdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
ctdotR():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
ctdotT():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
ctdotN():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
ctdotRdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
ctdotTdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cndotR():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cndotT():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cndotN():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cndotRdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cndotTdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cndotNdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cdrgR():number {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cdrgT():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cdrgN():number {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cdrgRdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cdrgTdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cdrgNdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cdrgDrg():number {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
csrpR():number {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
csrpT():number {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
csrpN():number {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
csrpRdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
csrpTdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
csrpNdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
csrpDrg():number {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
csrpSrp():number {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cthrR():number {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cthrT():number {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cthrN():number {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cthrRdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cthrTdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cthrNdot():number {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cthrDrg():number {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cthrSrp():number {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance Matrix component
 */
cthrThr():number {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startCDMObject(builder:flatbuffers.Builder) {
  builder.startObject(81);
}

static addComment(builder:flatbuffers.Builder, commentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, commentOffset, 0);
}

static addObject(builder:flatbuffers.Builder, objectOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, objectOffset, 0);
}

static addPoc(builder:flatbuffers.Builder, pocOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, pocOffset, 0);
}

static addOperatorContactPosition(builder:flatbuffers.Builder, operatorContactPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, operatorContactPositionOffset, 0);
}

static addOperatorOrganization(builder:flatbuffers.Builder, operatorOrganizationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, operatorOrganizationOffset, 0);
}

static addEphemerisName(builder:flatbuffers.Builder, ephemerisNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, ephemerisNameOffset, 0);
}

static addCovarianceMethod(builder:flatbuffers.Builder, covarianceMethod:covarianceMethod) {
  builder.addFieldInt8(6, covarianceMethod, covarianceMethod.CALCULATED);
}

static addReferenceFrame(builder:flatbuffers.Builder, referenceFrame:refFrame) {
  builder.addFieldInt8(7, referenceFrame, refFrame.ECEF);
}

static addGravityModel(builder:flatbuffers.Builder, gravityModelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, gravityModelOffset, 0);
}

static addAtmosphericModel(builder:flatbuffers.Builder, atmosphericModelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, atmosphericModelOffset, 0);
}

static addNBodyPerturbations(builder:flatbuffers.Builder, nBodyPerturbationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, nBodyPerturbationsOffset, 0);
}

static addSolarRadPressure(builder:flatbuffers.Builder, solarRadPressure:boolean) {
  builder.addFieldInt8(11, +solarRadPressure, +false);
}

static addEarthTides(builder:flatbuffers.Builder, earthTides:boolean) {
  builder.addFieldInt8(12, +earthTides, +false);
}

static addIntrackThrust(builder:flatbuffers.Builder, intrackThrust:boolean) {
  builder.addFieldInt8(13, +intrackThrust, +false);
}

static addTimeLastobStart(builder:flatbuffers.Builder, timeLastobStartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, timeLastobStartOffset, 0);
}

static addTimeLastobEnd(builder:flatbuffers.Builder, timeLastobEndOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, timeLastobEndOffset, 0);
}

static addRecommendedOdSpan(builder:flatbuffers.Builder, recommendedOdSpan:number) {
  builder.addFieldFloat64(16, recommendedOdSpan, 0.0);
}

static addActualOdSpan(builder:flatbuffers.Builder, actualOdSpan:number) {
  builder.addFieldFloat64(17, actualOdSpan, 0.0);
}

static addObsAvailable(builder:flatbuffers.Builder, obsAvailable:number) {
  builder.addFieldInt32(18, obsAvailable, 0);
}

static addObsUsed(builder:flatbuffers.Builder, obsUsed:number) {
  builder.addFieldInt32(19, obsUsed, 0);
}

static addTracksAvailable(builder:flatbuffers.Builder, tracksAvailable:number) {
  builder.addFieldInt32(20, tracksAvailable, 0);
}

static addTracksUsed(builder:flatbuffers.Builder, tracksUsed:number) {
  builder.addFieldInt32(21, tracksUsed, 0);
}

static addResidualsAccepted(builder:flatbuffers.Builder, residualsAccepted:number) {
  builder.addFieldFloat64(22, residualsAccepted, 0.0);
}

static addWeightedRms(builder:flatbuffers.Builder, weightedRms:number) {
  builder.addFieldFloat64(23, weightedRms, 0.0);
}

static addAreaPc(builder:flatbuffers.Builder, areaPc:number) {
  builder.addFieldFloat64(24, areaPc, 0.0);
}

static addAreaDrg(builder:flatbuffers.Builder, areaDrg:number) {
  builder.addFieldFloat64(25, areaDrg, 0.0);
}

static addAreaSrp(builder:flatbuffers.Builder, areaSrp:number) {
  builder.addFieldFloat64(26, areaSrp, 0.0);
}

static addCrAreaOverMass(builder:flatbuffers.Builder, crAreaOverMass:number) {
  builder.addFieldFloat64(27, crAreaOverMass, 0.0);
}

static addThrustAcceleration(builder:flatbuffers.Builder, thrustAcceleration:number) {
  builder.addFieldFloat64(28, thrustAcceleration, 0.0);
}

static addSedr(builder:flatbuffers.Builder, sedr:number) {
  builder.addFieldFloat64(29, sedr, 0.0);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldFloat64(30, x, 0.0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldFloat64(31, y, 0.0);
}

static addZ(builder:flatbuffers.Builder, z:number) {
  builder.addFieldFloat64(32, z, 0.0);
}

static addXDot(builder:flatbuffers.Builder, xDot:number) {
  builder.addFieldFloat64(33, xDot, 0.0);
}

static addYDot(builder:flatbuffers.Builder, yDot:number) {
  builder.addFieldFloat64(34, yDot, 0.0);
}

static addZDot(builder:flatbuffers.Builder, zDot:number) {
  builder.addFieldFloat64(35, zDot, 0.0);
}

static addCrR(builder:flatbuffers.Builder, crR:number) {
  builder.addFieldFloat64(36, crR, 0.0);
}

static addCtR(builder:flatbuffers.Builder, ctR:number) {
  builder.addFieldFloat64(37, ctR, 0.0);
}

static addCtT(builder:flatbuffers.Builder, ctT:number) {
  builder.addFieldFloat64(38, ctT, 0.0);
}

static addCnR(builder:flatbuffers.Builder, cnR:number) {
  builder.addFieldFloat64(39, cnR, 0.0);
}

static addCnT(builder:flatbuffers.Builder, cnT:number) {
  builder.addFieldFloat64(40, cnT, 0.0);
}

static addCnN(builder:flatbuffers.Builder, cnN:number) {
  builder.addFieldFloat64(41, cnN, 0.0);
}

static addCrdotR(builder:flatbuffers.Builder, crdotR:number) {
  builder.addFieldFloat64(42, crdotR, 0.0);
}

static addCrdotT(builder:flatbuffers.Builder, crdotT:number) {
  builder.addFieldFloat64(43, crdotT, 0.0);
}

static addCrdotN(builder:flatbuffers.Builder, crdotN:number) {
  builder.addFieldFloat64(44, crdotN, 0.0);
}

static addCrdotRdot(builder:flatbuffers.Builder, crdotRdot:number) {
  builder.addFieldFloat64(45, crdotRdot, 0.0);
}

static addCtdotR(builder:flatbuffers.Builder, ctdotR:number) {
  builder.addFieldFloat64(46, ctdotR, 0.0);
}

static addCtdotT(builder:flatbuffers.Builder, ctdotT:number) {
  builder.addFieldFloat64(47, ctdotT, 0.0);
}

static addCtdotN(builder:flatbuffers.Builder, ctdotN:number) {
  builder.addFieldFloat64(48, ctdotN, 0.0);
}

static addCtdotRdot(builder:flatbuffers.Builder, ctdotRdot:number) {
  builder.addFieldFloat64(49, ctdotRdot, 0.0);
}

static addCtdotTdot(builder:flatbuffers.Builder, ctdotTdot:number) {
  builder.addFieldFloat64(50, ctdotTdot, 0.0);
}

static addCndotR(builder:flatbuffers.Builder, cndotR:number) {
  builder.addFieldFloat64(51, cndotR, 0.0);
}

static addCndotT(builder:flatbuffers.Builder, cndotT:number) {
  builder.addFieldFloat64(52, cndotT, 0.0);
}

static addCndotN(builder:flatbuffers.Builder, cndotN:number) {
  builder.addFieldFloat64(53, cndotN, 0.0);
}

static addCndotRdot(builder:flatbuffers.Builder, cndotRdot:number) {
  builder.addFieldFloat64(54, cndotRdot, 0.0);
}

static addCndotTdot(builder:flatbuffers.Builder, cndotTdot:number) {
  builder.addFieldFloat64(55, cndotTdot, 0.0);
}

static addCndotNdot(builder:flatbuffers.Builder, cndotNdot:number) {
  builder.addFieldFloat64(56, cndotNdot, 0.0);
}

static addCdrgR(builder:flatbuffers.Builder, cdrgR:number) {
  builder.addFieldFloat64(57, cdrgR, 0.0);
}

static addCdrgT(builder:flatbuffers.Builder, cdrgT:number) {
  builder.addFieldFloat64(58, cdrgT, 0.0);
}

static addCdrgN(builder:flatbuffers.Builder, cdrgN:number) {
  builder.addFieldFloat64(59, cdrgN, 0.0);
}

static addCdrgRdot(builder:flatbuffers.Builder, cdrgRdot:number) {
  builder.addFieldFloat64(60, cdrgRdot, 0.0);
}

static addCdrgTdot(builder:flatbuffers.Builder, cdrgTdot:number) {
  builder.addFieldFloat64(61, cdrgTdot, 0.0);
}

static addCdrgNdot(builder:flatbuffers.Builder, cdrgNdot:number) {
  builder.addFieldFloat64(62, cdrgNdot, 0.0);
}

static addCdrgDrg(builder:flatbuffers.Builder, cdrgDrg:number) {
  builder.addFieldFloat64(63, cdrgDrg, 0.0);
}

static addCsrpR(builder:flatbuffers.Builder, csrpR:number) {
  builder.addFieldFloat64(64, csrpR, 0.0);
}

static addCsrpT(builder:flatbuffers.Builder, csrpT:number) {
  builder.addFieldFloat64(65, csrpT, 0.0);
}

static addCsrpN(builder:flatbuffers.Builder, csrpN:number) {
  builder.addFieldFloat64(66, csrpN, 0.0);
}

static addCsrpRdot(builder:flatbuffers.Builder, csrpRdot:number) {
  builder.addFieldFloat64(67, csrpRdot, 0.0);
}

static addCsrpTdot(builder:flatbuffers.Builder, csrpTdot:number) {
  builder.addFieldFloat64(68, csrpTdot, 0.0);
}

static addCsrpNdot(builder:flatbuffers.Builder, csrpNdot:number) {
  builder.addFieldFloat64(69, csrpNdot, 0.0);
}

static addCsrpDrg(builder:flatbuffers.Builder, csrpDrg:number) {
  builder.addFieldFloat64(70, csrpDrg, 0.0);
}

static addCsrpSrp(builder:flatbuffers.Builder, csrpSrp:number) {
  builder.addFieldFloat64(71, csrpSrp, 0.0);
}

static addCthrR(builder:flatbuffers.Builder, cthrR:number) {
  builder.addFieldFloat64(72, cthrR, 0.0);
}

static addCthrT(builder:flatbuffers.Builder, cthrT:number) {
  builder.addFieldFloat64(73, cthrT, 0.0);
}

static addCthrN(builder:flatbuffers.Builder, cthrN:number) {
  builder.addFieldFloat64(74, cthrN, 0.0);
}

static addCthrRdot(builder:flatbuffers.Builder, cthrRdot:number) {
  builder.addFieldFloat64(75, cthrRdot, 0.0);
}

static addCthrTdot(builder:flatbuffers.Builder, cthrTdot:number) {
  builder.addFieldFloat64(76, cthrTdot, 0.0);
}

static addCthrNdot(builder:flatbuffers.Builder, cthrNdot:number) {
  builder.addFieldFloat64(77, cthrNdot, 0.0);
}

static addCthrDrg(builder:flatbuffers.Builder, cthrDrg:number) {
  builder.addFieldFloat64(78, cthrDrg, 0.0);
}

static addCthrSrp(builder:flatbuffers.Builder, cthrSrp:number) {
  builder.addFieldFloat64(79, cthrSrp, 0.0);
}

static addCthrThr(builder:flatbuffers.Builder, cthrThr:number) {
  builder.addFieldFloat64(80, cthrThr, 0.0);
}

static endCDMObject(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): CDMObjectT {
  return new CDMObjectT(
    this.comment(),
    (this.object() !== null ? this.object()!.unpack() : null),
    (this.poc() !== null ? this.poc()!.unpack() : null),
    this.operatorContactPosition(),
    this.operatorOrganization(),
    this.ephemerisName(),
    this.covarianceMethod(),
    this.referenceFrame(),
    this.gravityModel(),
    this.atmosphericModel(),
    this.nBodyPerturbations(),
    this.solarRadPressure(),
    this.earthTides(),
    this.intrackThrust(),
    this.timeLastobStart(),
    this.timeLastobEnd(),
    this.recommendedOdSpan(),
    this.actualOdSpan(),
    this.obsAvailable(),
    this.obsUsed(),
    this.tracksAvailable(),
    this.tracksUsed(),
    this.residualsAccepted(),
    this.weightedRms(),
    this.areaPc(),
    this.areaDrg(),
    this.areaSrp(),
    this.crAreaOverMass(),
    this.thrustAcceleration(),
    this.sedr(),
    this.x(),
    this.y(),
    this.z(),
    this.xDot(),
    this.yDot(),
    this.zDot(),
    this.crR(),
    this.ctR(),
    this.ctT(),
    this.cnR(),
    this.cnT(),
    this.cnN(),
    this.crdotR(),
    this.crdotT(),
    this.crdotN(),
    this.crdotRdot(),
    this.ctdotR(),
    this.ctdotT(),
    this.ctdotN(),
    this.ctdotRdot(),
    this.ctdotTdot(),
    this.cndotR(),
    this.cndotT(),
    this.cndotN(),
    this.cndotRdot(),
    this.cndotTdot(),
    this.cndotNdot(),
    this.cdrgR(),
    this.cdrgT(),
    this.cdrgN(),
    this.cdrgRdot(),
    this.cdrgTdot(),
    this.cdrgNdot(),
    this.cdrgDrg(),
    this.csrpR(),
    this.csrpT(),
    this.csrpN(),
    this.csrpRdot(),
    this.csrpTdot(),
    this.csrpNdot(),
    this.csrpDrg(),
    this.csrpSrp(),
    this.cthrR(),
    this.cthrT(),
    this.cthrN(),
    this.cthrRdot(),
    this.cthrTdot(),
    this.cthrNdot(),
    this.cthrDrg(),
    this.cthrSrp(),
    this.cthrThr()
  );
}


unpackTo(_o: CDMObjectT): void {
  _o.comment = this.comment();
  _o.object = (this.object() !== null ? this.object()!.unpack() : null);
  _o.poc = (this.poc() !== null ? this.poc()!.unpack() : null);
  _o.operatorContactPosition = this.operatorContactPosition();
  _o.operatorOrganization = this.operatorOrganization();
  _o.ephemerisName = this.ephemerisName();
  _o.covarianceMethod = this.covarianceMethod();
  _o.referenceFrame = this.referenceFrame();
  _o.gravityModel = this.gravityModel();
  _o.atmosphericModel = this.atmosphericModel();
  _o.nBodyPerturbations = this.nBodyPerturbations();
  _o.solarRadPressure = this.solarRadPressure();
  _o.earthTides = this.earthTides();
  _o.intrackThrust = this.intrackThrust();
  _o.timeLastobStart = this.timeLastobStart();
  _o.timeLastobEnd = this.timeLastobEnd();
  _o.recommendedOdSpan = this.recommendedOdSpan();
  _o.actualOdSpan = this.actualOdSpan();
  _o.obsAvailable = this.obsAvailable();
  _o.obsUsed = this.obsUsed();
  _o.tracksAvailable = this.tracksAvailable();
  _o.tracksUsed = this.tracksUsed();
  _o.residualsAccepted = this.residualsAccepted();
  _o.weightedRms = this.weightedRms();
  _o.areaPc = this.areaPc();
  _o.areaDrg = this.areaDrg();
  _o.areaSrp = this.areaSrp();
  _o.crAreaOverMass = this.crAreaOverMass();
  _o.thrustAcceleration = this.thrustAcceleration();
  _o.sedr = this.sedr();
  _o.x = this.x();
  _o.y = this.y();
  _o.z = this.z();
  _o.xDot = this.xDot();
  _o.yDot = this.yDot();
  _o.zDot = this.zDot();
  _o.crR = this.crR();
  _o.ctR = this.ctR();
  _o.ctT = this.ctT();
  _o.cnR = this.cnR();
  _o.cnT = this.cnT();
  _o.cnN = this.cnN();
  _o.crdotR = this.crdotR();
  _o.crdotT = this.crdotT();
  _o.crdotN = this.crdotN();
  _o.crdotRdot = this.crdotRdot();
  _o.ctdotR = this.ctdotR();
  _o.ctdotT = this.ctdotT();
  _o.ctdotN = this.ctdotN();
  _o.ctdotRdot = this.ctdotRdot();
  _o.ctdotTdot = this.ctdotTdot();
  _o.cndotR = this.cndotR();
  _o.cndotT = this.cndotT();
  _o.cndotN = this.cndotN();
  _o.cndotRdot = this.cndotRdot();
  _o.cndotTdot = this.cndotTdot();
  _o.cndotNdot = this.cndotNdot();
  _o.cdrgR = this.cdrgR();
  _o.cdrgT = this.cdrgT();
  _o.cdrgN = this.cdrgN();
  _o.cdrgRdot = this.cdrgRdot();
  _o.cdrgTdot = this.cdrgTdot();
  _o.cdrgNdot = this.cdrgNdot();
  _o.cdrgDrg = this.cdrgDrg();
  _o.csrpR = this.csrpR();
  _o.csrpT = this.csrpT();
  _o.csrpN = this.csrpN();
  _o.csrpRdot = this.csrpRdot();
  _o.csrpTdot = this.csrpTdot();
  _o.csrpNdot = this.csrpNdot();
  _o.csrpDrg = this.csrpDrg();
  _o.csrpSrp = this.csrpSrp();
  _o.cthrR = this.cthrR();
  _o.cthrT = this.cthrT();
  _o.cthrN = this.cthrN();
  _o.cthrRdot = this.cthrRdot();
  _o.cthrTdot = this.cthrTdot();
  _o.cthrNdot = this.cthrNdot();
  _o.cthrDrg = this.cthrDrg();
  _o.cthrSrp = this.cthrSrp();
  _o.cthrThr = this.cthrThr();
}
}

export class CDMObjectT implements flatbuffers.IGeneratedObject {
constructor(
  public comment: string|Uint8Array|null = null,
  public object: CATT|null = null,
  public poc: EPMT|null = null,
  public operatorContactPosition: string|Uint8Array|null = null,
  public operatorOrganization: string|Uint8Array|null = null,
  public ephemerisName: string|Uint8Array|null = null,
  public covarianceMethod: covarianceMethod = covarianceMethod.CALCULATED,
  public referenceFrame: refFrame = refFrame.ECEF,
  public gravityModel: string|Uint8Array|null = null,
  public atmosphericModel: string|Uint8Array|null = null,
  public nBodyPerturbations: string|Uint8Array|null = null,
  public solarRadPressure: boolean = false,
  public earthTides: boolean = false,
  public intrackThrust: boolean = false,
  public timeLastobStart: string|Uint8Array|null = null,
  public timeLastobEnd: string|Uint8Array|null = null,
  public recommendedOdSpan: number = 0.0,
  public actualOdSpan: number = 0.0,
  public obsAvailable: number = 0,
  public obsUsed: number = 0,
  public tracksAvailable: number = 0,
  public tracksUsed: number = 0,
  public residualsAccepted: number = 0.0,
  public weightedRms: number = 0.0,
  public areaPc: number = 0.0,
  public areaDrg: number = 0.0,
  public areaSrp: number = 0.0,
  public crAreaOverMass: number = 0.0,
  public thrustAcceleration: number = 0.0,
  public sedr: number = 0.0,
  public x: number = 0.0,
  public y: number = 0.0,
  public z: number = 0.0,
  public xDot: number = 0.0,
  public yDot: number = 0.0,
  public zDot: number = 0.0,
  public crR: number = 0.0,
  public ctR: number = 0.0,
  public ctT: number = 0.0,
  public cnR: number = 0.0,
  public cnT: number = 0.0,
  public cnN: number = 0.0,
  public crdotR: number = 0.0,
  public crdotT: number = 0.0,
  public crdotN: number = 0.0,
  public crdotRdot: number = 0.0,
  public ctdotR: number = 0.0,
  public ctdotT: number = 0.0,
  public ctdotN: number = 0.0,
  public ctdotRdot: number = 0.0,
  public ctdotTdot: number = 0.0,
  public cndotR: number = 0.0,
  public cndotT: number = 0.0,
  public cndotN: number = 0.0,
  public cndotRdot: number = 0.0,
  public cndotTdot: number = 0.0,
  public cndotNdot: number = 0.0,
  public cdrgR: number = 0.0,
  public cdrgT: number = 0.0,
  public cdrgN: number = 0.0,
  public cdrgRdot: number = 0.0,
  public cdrgTdot: number = 0.0,
  public cdrgNdot: number = 0.0,
  public cdrgDrg: number = 0.0,
  public csrpR: number = 0.0,
  public csrpT: number = 0.0,
  public csrpN: number = 0.0,
  public csrpRdot: number = 0.0,
  public csrpTdot: number = 0.0,
  public csrpNdot: number = 0.0,
  public csrpDrg: number = 0.0,
  public csrpSrp: number = 0.0,
  public cthrR: number = 0.0,
  public cthrT: number = 0.0,
  public cthrN: number = 0.0,
  public cthrRdot: number = 0.0,
  public cthrTdot: number = 0.0,
  public cthrNdot: number = 0.0,
  public cthrDrg: number = 0.0,
  public cthrSrp: number = 0.0,
  public cthrThr: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const comment = (this.comment !== null ? builder.createString(this.comment!) : 0);
  const object = (this.object !== null ? this.object!.pack(builder) : 0);
  const poc = (this.poc !== null ? this.poc!.pack(builder) : 0);
  const operatorContactPosition = (this.operatorContactPosition !== null ? builder.createString(this.operatorContactPosition!) : 0);
  const operatorOrganization = (this.operatorOrganization !== null ? builder.createString(this.operatorOrganization!) : 0);
  const ephemerisName = (this.ephemerisName !== null ? builder.createString(this.ephemerisName!) : 0);
  const gravityModel = (this.gravityModel !== null ? builder.createString(this.gravityModel!) : 0);
  const atmosphericModel = (this.atmosphericModel !== null ? builder.createString(this.atmosphericModel!) : 0);
  const nBodyPerturbations = (this.nBodyPerturbations !== null ? builder.createString(this.nBodyPerturbations!) : 0);
  const timeLastobStart = (this.timeLastobStart !== null ? builder.createString(this.timeLastobStart!) : 0);
  const timeLastobEnd = (this.timeLastobEnd !== null ? builder.createString(this.timeLastobEnd!) : 0);

  CDMObject.startCDMObject(builder);
  CDMObject.addComment(builder, comment);
  CDMObject.addObject(builder, object);
  CDMObject.addPoc(builder, poc);
  CDMObject.addOperatorContactPosition(builder, operatorContactPosition);
  CDMObject.addOperatorOrganization(builder, operatorOrganization);
  CDMObject.addEphemerisName(builder, ephemerisName);
  CDMObject.addCovarianceMethod(builder, this.covarianceMethod);
  CDMObject.addReferenceFrame(builder, this.referenceFrame);
  CDMObject.addGravityModel(builder, gravityModel);
  CDMObject.addAtmosphericModel(builder, atmosphericModel);
  CDMObject.addNBodyPerturbations(builder, nBodyPerturbations);
  CDMObject.addSolarRadPressure(builder, this.solarRadPressure);
  CDMObject.addEarthTides(builder, this.earthTides);
  CDMObject.addIntrackThrust(builder, this.intrackThrust);
  CDMObject.addTimeLastobStart(builder, timeLastobStart);
  CDMObject.addTimeLastobEnd(builder, timeLastobEnd);
  CDMObject.addRecommendedOdSpan(builder, this.recommendedOdSpan);
  CDMObject.addActualOdSpan(builder, this.actualOdSpan);
  CDMObject.addObsAvailable(builder, this.obsAvailable);
  CDMObject.addObsUsed(builder, this.obsUsed);
  CDMObject.addTracksAvailable(builder, this.tracksAvailable);
  CDMObject.addTracksUsed(builder, this.tracksUsed);
  CDMObject.addResidualsAccepted(builder, this.residualsAccepted);
  CDMObject.addWeightedRms(builder, this.weightedRms);
  CDMObject.addAreaPc(builder, this.areaPc);
  CDMObject.addAreaDrg(builder, this.areaDrg);
  CDMObject.addAreaSrp(builder, this.areaSrp);
  CDMObject.addCrAreaOverMass(builder, this.crAreaOverMass);
  CDMObject.addThrustAcceleration(builder, this.thrustAcceleration);
  CDMObject.addSedr(builder, this.sedr);
  CDMObject.addX(builder, this.x);
  CDMObject.addY(builder, this.y);
  CDMObject.addZ(builder, this.z);
  CDMObject.addXDot(builder, this.xDot);
  CDMObject.addYDot(builder, this.yDot);
  CDMObject.addZDot(builder, this.zDot);
  CDMObject.addCrR(builder, this.crR);
  CDMObject.addCtR(builder, this.ctR);
  CDMObject.addCtT(builder, this.ctT);
  CDMObject.addCnR(builder, this.cnR);
  CDMObject.addCnT(builder, this.cnT);
  CDMObject.addCnN(builder, this.cnN);
  CDMObject.addCrdotR(builder, this.crdotR);
  CDMObject.addCrdotT(builder, this.crdotT);
  CDMObject.addCrdotN(builder, this.crdotN);
  CDMObject.addCrdotRdot(builder, this.crdotRdot);
  CDMObject.addCtdotR(builder, this.ctdotR);
  CDMObject.addCtdotT(builder, this.ctdotT);
  CDMObject.addCtdotN(builder, this.ctdotN);
  CDMObject.addCtdotRdot(builder, this.ctdotRdot);
  CDMObject.addCtdotTdot(builder, this.ctdotTdot);
  CDMObject.addCndotR(builder, this.cndotR);
  CDMObject.addCndotT(builder, this.cndotT);
  CDMObject.addCndotN(builder, this.cndotN);
  CDMObject.addCndotRdot(builder, this.cndotRdot);
  CDMObject.addCndotTdot(builder, this.cndotTdot);
  CDMObject.addCndotNdot(builder, this.cndotNdot);
  CDMObject.addCdrgR(builder, this.cdrgR);
  CDMObject.addCdrgT(builder, this.cdrgT);
  CDMObject.addCdrgN(builder, this.cdrgN);
  CDMObject.addCdrgRdot(builder, this.cdrgRdot);
  CDMObject.addCdrgTdot(builder, this.cdrgTdot);
  CDMObject.addCdrgNdot(builder, this.cdrgNdot);
  CDMObject.addCdrgDrg(builder, this.cdrgDrg);
  CDMObject.addCsrpR(builder, this.csrpR);
  CDMObject.addCsrpT(builder, this.csrpT);
  CDMObject.addCsrpN(builder, this.csrpN);
  CDMObject.addCsrpRdot(builder, this.csrpRdot);
  CDMObject.addCsrpTdot(builder, this.csrpTdot);
  CDMObject.addCsrpNdot(builder, this.csrpNdot);
  CDMObject.addCsrpDrg(builder, this.csrpDrg);
  CDMObject.addCsrpSrp(builder, this.csrpSrp);
  CDMObject.addCthrR(builder, this.cthrR);
  CDMObject.addCthrT(builder, this.cthrT);
  CDMObject.addCthrN(builder, this.cthrN);
  CDMObject.addCthrRdot(builder, this.cthrRdot);
  CDMObject.addCthrTdot(builder, this.cthrTdot);
  CDMObject.addCthrNdot(builder, this.cthrNdot);
  CDMObject.addCthrDrg(builder, this.cthrDrg);
  CDMObject.addCthrSrp(builder, this.cthrSrp);
  CDMObject.addCthrThr(builder, this.cthrThr);

  return CDMObject.endCDMObject(builder);
}
}
