// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { STAGE, STAGET } from './stage.js';
import { SUSTAINER, SUSTAINERT } from './sustainer.js';


/**
 * Rocket Configuration
 */
export class ROC implements flatbuffers.IUnpackableObject<ROCT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ROC {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsROC(bb:flatbuffers.ByteBuffer, obj?:ROC):ROC {
  return (obj || new ROC()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsROC(bb:flatbuffers.ByteBuffer, obj?:ROC):ROC {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ROC()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$ROC');
}

/**
 * Rocket Name
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Rocket Family
 */
family():string|null
family(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
family(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Rocket Variant
 */
variant():string|null
variant(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
variant(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Stages in the Rocket
 */
stages(index: number, obj?:STAGE):STAGE|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new STAGE()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

stagesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Sustainers in the Rocket
 */
sustainers(index: number, obj?:SUSTAINER):SUSTAINER|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new SUSTAINER()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

sustainersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startROC(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addFamily(builder:flatbuffers.Builder, familyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, familyOffset, 0);
}

static addVariant(builder:flatbuffers.Builder, variantOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, variantOffset, 0);
}

static addStages(builder:flatbuffers.Builder, stagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, stagesOffset, 0);
}

static createStagesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStagesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSustainers(builder:flatbuffers.Builder, sustainersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, sustainersOffset, 0);
}

static createSustainersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSustainersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endROC(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishROCBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$ROC');
}

static finishSizePrefixedROCBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$ROC', true);
}

static createROC(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, familyOffset:flatbuffers.Offset, variantOffset:flatbuffers.Offset, stagesOffset:flatbuffers.Offset, sustainersOffset:flatbuffers.Offset):flatbuffers.Offset {
  ROC.startROC(builder);
  ROC.addName(builder, nameOffset);
  ROC.addFamily(builder, familyOffset);
  ROC.addVariant(builder, variantOffset);
  ROC.addStages(builder, stagesOffset);
  ROC.addSustainers(builder, sustainersOffset);
  return ROC.endROC(builder);
}

unpack(): ROCT {
  return new ROCT(
    this.name(),
    this.family(),
    this.variant(),
    this.bb!.createObjList<STAGE, STAGET>(this.stages.bind(this), this.stagesLength()),
    this.bb!.createObjList<SUSTAINER, SUSTAINERT>(this.sustainers.bind(this), this.sustainersLength())
  );
}


unpackTo(_o: ROCT): void {
  _o.name = this.name();
  _o.family = this.family();
  _o.variant = this.variant();
  _o.stages = this.bb!.createObjList<STAGE, STAGET>(this.stages.bind(this), this.stagesLength());
  _o.sustainers = this.bb!.createObjList<SUSTAINER, SUSTAINERT>(this.sustainers.bind(this), this.sustainersLength());
}
}

export class ROCT implements flatbuffers.IGeneratedObject {
constructor(
  public name: string|Uint8Array|null = null,
  public family: string|Uint8Array|null = null,
  public variant: string|Uint8Array|null = null,
  public stages: (STAGET)[] = [],
  public sustainers: (SUSTAINERT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const family = (this.family !== null ? builder.createString(this.family!) : 0);
  const variant = (this.variant !== null ? builder.createString(this.variant!) : 0);
  const stages = ROC.createStagesVector(builder, builder.createObjectOffsetList(this.stages));
  const sustainers = ROC.createSustainersVector(builder, builder.createObjectOffsetList(this.sustainers));

  return ROC.createROC(builder,
    name,
    family,
    variant,
    stages,
    sustainers
  );
}
}
