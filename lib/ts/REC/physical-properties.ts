// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class PhysicalProperties implements flatbuffers.IUnpackableObject<PhysicalPropertiesT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PhysicalProperties {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPhysicalProperties(bb:flatbuffers.ByteBuffer, obj?:PhysicalProperties):PhysicalProperties {
  return (obj || new PhysicalProperties()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPhysicalProperties(bb:flatbuffers.ByteBuffer, obj?:PhysicalProperties):PhysicalProperties {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PhysicalProperties()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Comments in the Physical Properties section.
 */
comment(index: number):string
comment(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
comment(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

commentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Wet mass of the space object.
 */
wetMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Dry mass of the space object.
 */
dryMass():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Units for mass values.
 */
massUnits():string|null
massUnits(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
massUnits(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Quaternion component q1 of orientation from OEB to EME2000.
 */
oebQ1():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Quaternion component q2.
 */
oebQ2():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Quaternion component q3.
 */
oebQ3():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Quaternion scalar component qc.
 */
oebQc():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Maximum dimension of the object along OEB frame axes.
 */
oebMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Intermediate dimension along OEB frame axes.
 */
oebInt():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Minimum dimension of the object along OEB frame axes.
 */
oebMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Area along OEB_MAX axis.
 */
areaAlongOebMax():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Area along OEB_INT axis.
 */
areaAlongOebInt():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Area along OEB_MIN axis.
 */
areaAlongOebMin():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Units for area values.
 */
areaUnits():string|null
areaUnits(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
areaUnits(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Constant area for drag computations.
 */
dragConstArea():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Nominal drag coefficient.
 */
dragCoeffNom():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in the drag coefficient.
 */
dragUncertainty():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Constant area for solar radiation pressure computations.
 */
srpConstArea():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Nominal solar radiation pressure coefficient.
 */
solarRadCoeff():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in the solar radiation pressure coefficient.
 */
srpUncertainty():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startPhysicalProperties(builder:flatbuffers.Builder) {
  builder.startObject(21);
}

static addComment(builder:flatbuffers.Builder, commentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, commentOffset, 0);
}

static createCommentVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCommentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addWetMass(builder:flatbuffers.Builder, wetMass:number) {
  builder.addFieldFloat64(1, wetMass, 0.0);
}

static addDryMass(builder:flatbuffers.Builder, dryMass:number) {
  builder.addFieldFloat64(2, dryMass, 0.0);
}

static addMassUnits(builder:flatbuffers.Builder, massUnitsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, massUnitsOffset, 0);
}

static addOebQ1(builder:flatbuffers.Builder, oebQ1:number) {
  builder.addFieldFloat64(4, oebQ1, 0.0);
}

static addOebQ2(builder:flatbuffers.Builder, oebQ2:number) {
  builder.addFieldFloat64(5, oebQ2, 0.0);
}

static addOebQ3(builder:flatbuffers.Builder, oebQ3:number) {
  builder.addFieldFloat64(6, oebQ3, 0.0);
}

static addOebQc(builder:flatbuffers.Builder, oebQc:number) {
  builder.addFieldFloat64(7, oebQc, 0.0);
}

static addOebMax(builder:flatbuffers.Builder, oebMax:number) {
  builder.addFieldFloat64(8, oebMax, 0.0);
}

static addOebInt(builder:flatbuffers.Builder, oebInt:number) {
  builder.addFieldFloat64(9, oebInt, 0.0);
}

static addOebMin(builder:flatbuffers.Builder, oebMin:number) {
  builder.addFieldFloat64(10, oebMin, 0.0);
}

static addAreaAlongOebMax(builder:flatbuffers.Builder, areaAlongOebMax:number) {
  builder.addFieldFloat64(11, areaAlongOebMax, 0.0);
}

static addAreaAlongOebInt(builder:flatbuffers.Builder, areaAlongOebInt:number) {
  builder.addFieldFloat64(12, areaAlongOebInt, 0.0);
}

static addAreaAlongOebMin(builder:flatbuffers.Builder, areaAlongOebMin:number) {
  builder.addFieldFloat64(13, areaAlongOebMin, 0.0);
}

static addAreaUnits(builder:flatbuffers.Builder, areaUnitsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, areaUnitsOffset, 0);
}

static addDragConstArea(builder:flatbuffers.Builder, dragConstArea:number) {
  builder.addFieldFloat64(15, dragConstArea, 0.0);
}

static addDragCoeffNom(builder:flatbuffers.Builder, dragCoeffNom:number) {
  builder.addFieldFloat64(16, dragCoeffNom, 0.0);
}

static addDragUncertainty(builder:flatbuffers.Builder, dragUncertainty:number) {
  builder.addFieldFloat64(17, dragUncertainty, 0.0);
}

static addSrpConstArea(builder:flatbuffers.Builder, srpConstArea:number) {
  builder.addFieldFloat64(18, srpConstArea, 0.0);
}

static addSolarRadCoeff(builder:flatbuffers.Builder, solarRadCoeff:number) {
  builder.addFieldFloat64(19, solarRadCoeff, 0.0);
}

static addSrpUncertainty(builder:flatbuffers.Builder, srpUncertainty:number) {
  builder.addFieldFloat64(20, srpUncertainty, 0.0);
}

static endPhysicalProperties(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPhysicalProperties(builder:flatbuffers.Builder, commentOffset:flatbuffers.Offset, wetMass:number, dryMass:number, massUnitsOffset:flatbuffers.Offset, oebQ1:number, oebQ2:number, oebQ3:number, oebQc:number, oebMax:number, oebInt:number, oebMin:number, areaAlongOebMax:number, areaAlongOebInt:number, areaAlongOebMin:number, areaUnitsOffset:flatbuffers.Offset, dragConstArea:number, dragCoeffNom:number, dragUncertainty:number, srpConstArea:number, solarRadCoeff:number, srpUncertainty:number):flatbuffers.Offset {
  PhysicalProperties.startPhysicalProperties(builder);
  PhysicalProperties.addComment(builder, commentOffset);
  PhysicalProperties.addWetMass(builder, wetMass);
  PhysicalProperties.addDryMass(builder, dryMass);
  PhysicalProperties.addMassUnits(builder, massUnitsOffset);
  PhysicalProperties.addOebQ1(builder, oebQ1);
  PhysicalProperties.addOebQ2(builder, oebQ2);
  PhysicalProperties.addOebQ3(builder, oebQ3);
  PhysicalProperties.addOebQc(builder, oebQc);
  PhysicalProperties.addOebMax(builder, oebMax);
  PhysicalProperties.addOebInt(builder, oebInt);
  PhysicalProperties.addOebMin(builder, oebMin);
  PhysicalProperties.addAreaAlongOebMax(builder, areaAlongOebMax);
  PhysicalProperties.addAreaAlongOebInt(builder, areaAlongOebInt);
  PhysicalProperties.addAreaAlongOebMin(builder, areaAlongOebMin);
  PhysicalProperties.addAreaUnits(builder, areaUnitsOffset);
  PhysicalProperties.addDragConstArea(builder, dragConstArea);
  PhysicalProperties.addDragCoeffNom(builder, dragCoeffNom);
  PhysicalProperties.addDragUncertainty(builder, dragUncertainty);
  PhysicalProperties.addSrpConstArea(builder, srpConstArea);
  PhysicalProperties.addSolarRadCoeff(builder, solarRadCoeff);
  PhysicalProperties.addSrpUncertainty(builder, srpUncertainty);
  return PhysicalProperties.endPhysicalProperties(builder);
}

unpack(): PhysicalPropertiesT {
  return new PhysicalPropertiesT(
    this.bb!.createScalarList<string>(this.comment.bind(this), this.commentLength()),
    this.wetMass(),
    this.dryMass(),
    this.massUnits(),
    this.oebQ1(),
    this.oebQ2(),
    this.oebQ3(),
    this.oebQc(),
    this.oebMax(),
    this.oebInt(),
    this.oebMin(),
    this.areaAlongOebMax(),
    this.areaAlongOebInt(),
    this.areaAlongOebMin(),
    this.areaUnits(),
    this.dragConstArea(),
    this.dragCoeffNom(),
    this.dragUncertainty(),
    this.srpConstArea(),
    this.solarRadCoeff(),
    this.srpUncertainty()
  );
}


unpackTo(_o: PhysicalPropertiesT): void {
  _o.comment = this.bb!.createScalarList<string>(this.comment.bind(this), this.commentLength());
  _o.wetMass = this.wetMass();
  _o.dryMass = this.dryMass();
  _o.massUnits = this.massUnits();
  _o.oebQ1 = this.oebQ1();
  _o.oebQ2 = this.oebQ2();
  _o.oebQ3 = this.oebQ3();
  _o.oebQc = this.oebQc();
  _o.oebMax = this.oebMax();
  _o.oebInt = this.oebInt();
  _o.oebMin = this.oebMin();
  _o.areaAlongOebMax = this.areaAlongOebMax();
  _o.areaAlongOebInt = this.areaAlongOebInt();
  _o.areaAlongOebMin = this.areaAlongOebMin();
  _o.areaUnits = this.areaUnits();
  _o.dragConstArea = this.dragConstArea();
  _o.dragCoeffNom = this.dragCoeffNom();
  _o.dragUncertainty = this.dragUncertainty();
  _o.srpConstArea = this.srpConstArea();
  _o.solarRadCoeff = this.solarRadCoeff();
  _o.srpUncertainty = this.srpUncertainty();
}
}

export class PhysicalPropertiesT implements flatbuffers.IGeneratedObject {
constructor(
  public comment: (string)[] = [],
  public wetMass: number = 0.0,
  public dryMass: number = 0.0,
  public massUnits: string|Uint8Array|null = null,
  public oebQ1: number = 0.0,
  public oebQ2: number = 0.0,
  public oebQ3: number = 0.0,
  public oebQc: number = 0.0,
  public oebMax: number = 0.0,
  public oebInt: number = 0.0,
  public oebMin: number = 0.0,
  public areaAlongOebMax: number = 0.0,
  public areaAlongOebInt: number = 0.0,
  public areaAlongOebMin: number = 0.0,
  public areaUnits: string|Uint8Array|null = null,
  public dragConstArea: number = 0.0,
  public dragCoeffNom: number = 0.0,
  public dragUncertainty: number = 0.0,
  public srpConstArea: number = 0.0,
  public solarRadCoeff: number = 0.0,
  public srpUncertainty: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const comment = PhysicalProperties.createCommentVector(builder, builder.createObjectOffsetList(this.comment));
  const massUnits = (this.massUnits !== null ? builder.createString(this.massUnits!) : 0);
  const areaUnits = (this.areaUnits !== null ? builder.createString(this.areaUnits!) : 0);

  return PhysicalProperties.createPhysicalProperties(builder,
    comment,
    this.wetMass,
    this.dryMass,
    massUnits,
    this.oebQ1,
    this.oebQ2,
    this.oebQ3,
    this.oebQc,
    this.oebMax,
    this.oebInt,
    this.oebMin,
    this.areaAlongOebMax,
    this.areaAlongOebInt,
    this.areaAlongOebMin,
    areaUnits,
    this.dragConstArea,
    this.dragCoeffNom,
    this.dragUncertainty,
    this.srpConstArea,
    this.solarRadCoeff,
    this.srpUncertainty
  );
}
}
