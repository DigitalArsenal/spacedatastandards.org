// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * Schema Standard Definition
 */
export class SCHEMA_STANDARD implements flatbuffers.IUnpackableObject<SCHEMA_STANDARDT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SCHEMA_STANDARD {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSCHEMA_STANDARD(bb:flatbuffers.ByteBuffer, obj?:SCHEMA_STANDARD):SCHEMA_STANDARD {
  return (obj || new SCHEMA_STANDARD()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSCHEMA_STANDARD(bb:flatbuffers.ByteBuffer, obj?:SCHEMA_STANDARD):SCHEMA_STANDARD {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SCHEMA_STANDARD()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Unique identifier for the standard
 */
key():string|null
key(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
key(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * IDL
 */
idl():string|null
idl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
idl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * List Of File Paths
 */
files(index: number):string
files(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
files(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

filesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSCHEMA_STANDARD(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyOffset, 0);
}

static addIdl(builder:flatbuffers.Builder, idlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idlOffset, 0);
}

static addFiles(builder:flatbuffers.Builder, filesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, filesOffset, 0);
}

static createFilesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFilesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSCHEMA_STANDARD(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSCHEMA_STANDARD(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset, idlOffset:flatbuffers.Offset, filesOffset:flatbuffers.Offset):flatbuffers.Offset {
  SCHEMA_STANDARD.startSCHEMA_STANDARD(builder);
  SCHEMA_STANDARD.addKey(builder, keyOffset);
  SCHEMA_STANDARD.addIdl(builder, idlOffset);
  SCHEMA_STANDARD.addFiles(builder, filesOffset);
  return SCHEMA_STANDARD.endSCHEMA_STANDARD(builder);
}

unpack(): SCHEMA_STANDARDT {
  return new SCHEMA_STANDARDT(
    this.key(),
    this.idl(),
    this.bb!.createScalarList<string>(this.files.bind(this), this.filesLength())
  );
}


unpackTo(_o: SCHEMA_STANDARDT): void {
  _o.key = this.key();
  _o.idl = this.idl();
  _o.files = this.bb!.createScalarList<string>(this.files.bind(this), this.filesLength());
}
}

export class SCHEMA_STANDARDT implements flatbuffers.IGeneratedObject {
constructor(
  public key: string|Uint8Array|null = null,
  public idl: string|Uint8Array|null = null,
  public files: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const key = (this.key !== null ? builder.createString(this.key!) : 0);
  const idl = (this.idl !== null ? builder.createString(this.idl!) : 0);
  const files = SCHEMA_STANDARD.createFilesVector(builder, builder.createObjectOffsetList(this.files));

  return SCHEMA_STANDARD.createSCHEMA_STANDARD(builder,
    key,
    idl,
    files
  );
}
}
