// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Header, HeaderT } from './Header.js';
import { Maneuver, ManeuverT } from './Maneuver.js';
import { Metadata, MetadataT } from './Metadata.js';
import { OrbitDetermination, OrbitDeterminationT } from './OrbitDetermination.js';
import { Perturbations, PerturbationsT } from './Perturbations.js';
import { PhysicalProperties, PhysicalPropertiesT } from './PhysicalProperties.js';
import { StateVector, StateVectorT } from './StateVector.js';
import { UserDefinedParameters, UserDefinedParametersT } from './UserDefinedParameters.js';


/**
 * Orbit Comprehensive Message
 */
export class OCM implements flatbuffers.IUnpackableObject<OCMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OCM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOCM(bb:flatbuffers.ByteBuffer, obj?:OCM):OCM {
  return (obj || new OCM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOCM(bb:flatbuffers.ByteBuffer, obj?:OCM):OCM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OCM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$OCM');
}

/**
 * Header section of the OCM.
 */
HEADER(obj?:Header):Header|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Header()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Metadata section of the OCM.
 */
METADATA(obj?:Metadata):Metadata|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Metadata()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Trajectory type (e.g., PROPAGATED, ESTIMATED).
 */
TRAJ_TYPE():string|null
TRAJ_TYPE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
TRAJ_TYPE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * State vector data.
 */
STATE_DATA(index: number, obj?:StateVector):StateVector|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new StateVector()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

stateDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Physical properties of the space object.
 */
PHYSICAL_PROPERTIES(obj?:PhysicalProperties):PhysicalProperties|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new PhysicalProperties()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Covariance data associated with the state vectors.
 */
COVARIANCE_DATA(index: number, obj?:StateVector):StateVector|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new StateVector()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

covarianceDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Maneuver data.
 */
MANEUVER_DATA(index: number, obj?:Maneuver):Maneuver|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new Maneuver()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

maneuverDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Perturbations parameters used.
 */
PERTURBATIONS(obj?:Perturbations):Perturbations|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new Perturbations()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Orbit determination data.
 */
ORBIT_DETERMINATION(obj?:OrbitDetermination):OrbitDetermination|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new OrbitDetermination()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * User-defined parameters and supplemental comments.
 */
USER_DEFINED_PARAMETERS(index: number, obj?:UserDefinedParameters):UserDefinedParameters|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new UserDefinedParameters()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

userDefinedParametersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startOCM(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addHeader(builder:flatbuffers.Builder, HEADEROffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, HEADEROffset, 0);
}

static addMetadata(builder:flatbuffers.Builder, METADATAOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, METADATAOffset, 0);
}

static addTrajType(builder:flatbuffers.Builder, TRAJ_TYPEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, TRAJ_TYPEOffset, 0);
}

static addStateData(builder:flatbuffers.Builder, STATE_DATAOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, STATE_DATAOffset, 0);
}

static createStateDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStateDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPhysicalProperties(builder:flatbuffers.Builder, PHYSICAL_PROPERTIESOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, PHYSICAL_PROPERTIESOffset, 0);
}

static addCovarianceData(builder:flatbuffers.Builder, COVARIANCE_DATAOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, COVARIANCE_DATAOffset, 0);
}

static createCovarianceDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCovarianceDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addManeuverData(builder:flatbuffers.Builder, MANEUVER_DATAOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, MANEUVER_DATAOffset, 0);
}

static createManeuverDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startManeuverDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPerturbations(builder:flatbuffers.Builder, PERTURBATIONSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, PERTURBATIONSOffset, 0);
}

static addOrbitDetermination(builder:flatbuffers.Builder, ORBIT_DETERMINATIONOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, ORBIT_DETERMINATIONOffset, 0);
}

static addUserDefinedParameters(builder:flatbuffers.Builder, USER_DEFINED_PARAMETERSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, USER_DEFINED_PARAMETERSOffset, 0);
}

static createUserDefinedParametersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUserDefinedParametersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endOCM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOCMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$OCM');
}

static finishSizePrefixedOCMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$OCM', true);
}


unpack(): OCMT {
  return new OCMT(
    (this.HEADER() !== null ? this.HEADER()!.unpack() : null),
    (this.METADATA() !== null ? this.METADATA()!.unpack() : null),
    this.TRAJ_TYPE(),
    this.bb!.createObjList<StateVector, StateVectorT>(this.STATE_DATA.bind(this), this.stateDataLength()),
    (this.PHYSICAL_PROPERTIES() !== null ? this.PHYSICAL_PROPERTIES()!.unpack() : null),
    this.bb!.createObjList<StateVector, StateVectorT>(this.COVARIANCE_DATA.bind(this), this.covarianceDataLength()),
    this.bb!.createObjList<Maneuver, ManeuverT>(this.MANEUVER_DATA.bind(this), this.maneuverDataLength()),
    (this.PERTURBATIONS() !== null ? this.PERTURBATIONS()!.unpack() : null),
    (this.ORBIT_DETERMINATION() !== null ? this.ORBIT_DETERMINATION()!.unpack() : null),
    this.bb!.createObjList<UserDefinedParameters, UserDefinedParametersT>(this.USER_DEFINED_PARAMETERS.bind(this), this.userDefinedParametersLength())
  );
}


unpackTo(_o: OCMT): void {
  _o.HEADER = (this.HEADER() !== null ? this.HEADER()!.unpack() : null);
  _o.METADATA = (this.METADATA() !== null ? this.METADATA()!.unpack() : null);
  _o.TRAJ_TYPE = this.TRAJ_TYPE();
  _o.STATE_DATA = this.bb!.createObjList<StateVector, StateVectorT>(this.STATE_DATA.bind(this), this.stateDataLength());
  _o.PHYSICAL_PROPERTIES = (this.PHYSICAL_PROPERTIES() !== null ? this.PHYSICAL_PROPERTIES()!.unpack() : null);
  _o.COVARIANCE_DATA = this.bb!.createObjList<StateVector, StateVectorT>(this.COVARIANCE_DATA.bind(this), this.covarianceDataLength());
  _o.MANEUVER_DATA = this.bb!.createObjList<Maneuver, ManeuverT>(this.MANEUVER_DATA.bind(this), this.maneuverDataLength());
  _o.PERTURBATIONS = (this.PERTURBATIONS() !== null ? this.PERTURBATIONS()!.unpack() : null);
  _o.ORBIT_DETERMINATION = (this.ORBIT_DETERMINATION() !== null ? this.ORBIT_DETERMINATION()!.unpack() : null);
  _o.USER_DEFINED_PARAMETERS = this.bb!.createObjList<UserDefinedParameters, UserDefinedParametersT>(this.USER_DEFINED_PARAMETERS.bind(this), this.userDefinedParametersLength());
}
}

export class OCMT implements flatbuffers.IGeneratedObject {
constructor(
  public HEADER: HeaderT|null = null,
  public METADATA: MetadataT|null = null,
  public TRAJ_TYPE: string|Uint8Array|null = null,
  public STATE_DATA: (StateVectorT)[] = [],
  public PHYSICAL_PROPERTIES: PhysicalPropertiesT|null = null,
  public COVARIANCE_DATA: (StateVectorT)[] = [],
  public MANEUVER_DATA: (ManeuverT)[] = [],
  public PERTURBATIONS: PerturbationsT|null = null,
  public ORBIT_DETERMINATION: OrbitDeterminationT|null = null,
  public USER_DEFINED_PARAMETERS: (UserDefinedParametersT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const HEADER = (this.HEADER !== null ? this.HEADER!.pack(builder) : 0);
  const METADATA = (this.METADATA !== null ? this.METADATA!.pack(builder) : 0);
  const TRAJ_TYPE = (this.TRAJ_TYPE !== null ? builder.createString(this.TRAJ_TYPE!) : 0);
  const STATE_DATA = OCM.createStateDataVector(builder, builder.createObjectOffsetList(this.STATE_DATA));
  const PHYSICAL_PROPERTIES = (this.PHYSICAL_PROPERTIES !== null ? this.PHYSICAL_PROPERTIES!.pack(builder) : 0);
  const COVARIANCE_DATA = OCM.createCovarianceDataVector(builder, builder.createObjectOffsetList(this.COVARIANCE_DATA));
  const MANEUVER_DATA = OCM.createManeuverDataVector(builder, builder.createObjectOffsetList(this.MANEUVER_DATA));
  const PERTURBATIONS = (this.PERTURBATIONS !== null ? this.PERTURBATIONS!.pack(builder) : 0);
  const ORBIT_DETERMINATION = (this.ORBIT_DETERMINATION !== null ? this.ORBIT_DETERMINATION!.pack(builder) : 0);
  const USER_DEFINED_PARAMETERS = OCM.createUserDefinedParametersVector(builder, builder.createObjectOffsetList(this.USER_DEFINED_PARAMETERS));

  OCM.startOCM(builder);
  OCM.addHeader(builder, HEADER);
  OCM.addMetadata(builder, METADATA);
  OCM.addTrajType(builder, TRAJ_TYPE);
  OCM.addStateData(builder, STATE_DATA);
  OCM.addPhysicalProperties(builder, PHYSICAL_PROPERTIES);
  OCM.addCovarianceData(builder, COVARIANCE_DATA);
  OCM.addManeuverData(builder, MANEUVER_DATA);
  OCM.addPerturbations(builder, PERTURBATIONS);
  OCM.addOrbitDetermination(builder, ORBIT_DETERMINATION);
  OCM.addUserDefinedParameters(builder, USER_DEFINED_PARAMETERS);

  return OCM.endOCM(builder);
}
}
