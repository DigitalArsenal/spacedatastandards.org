// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FrequencyRange, FrequencyRangeT } from './frequency-range.js';


/**
 * Table representing a frequency band with a name and frequency range
 */
export class Band implements flatbuffers.IUnpackableObject<BandT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Band {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBand(bb:flatbuffers.ByteBuffer, obj?:Band):Band {
  return (obj || new Band()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBand(bb:flatbuffers.ByteBuffer, obj?:Band):Band {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Band()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Name of the band
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Frequency range of the band
 */
frequencyRange(obj?:FrequencyRange):FrequencyRange|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FrequencyRange()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startBand(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addFrequencyRange(builder:flatbuffers.Builder, frequencyRangeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, frequencyRangeOffset, 0);
}

static endBand(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): BandT {
  return new BandT(
    this.name(),
    (this.frequencyRange() !== null ? this.frequencyRange()!.unpack() : null)
  );
}


unpackTo(_o: BandT): void {
  _o.name = this.name();
  _o.frequencyRange = (this.frequencyRange() !== null ? this.frequencyRange()!.unpack() : null);
}
}

export class BandT implements flatbuffers.IGeneratedObject {
constructor(
  public name: string|Uint8Array|null = null,
  public frequencyRange: FrequencyRangeT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const frequencyRange = (this.frequencyRange !== null ? this.frequencyRange!.pack(builder) : 0);

  Band.startBand(builder);
  Band.addName(builder, name);
  Band.addFrequencyRange(builder, frequencyRange);

  return Band.endBand(builder);
}
}
