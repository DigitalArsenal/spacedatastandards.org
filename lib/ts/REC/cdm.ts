// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CDMObject, CDMObjectT } from './cdmobject.js';
import { PNM, PNMT } from './pnm.js';
import { refFrame } from './ref-frame.js';
import { screeningVolumeShape } from './screening-volume-shape.js';


/**
 * Conjunction Data Message
 */
export class CDM implements flatbuffers.IUnpackableObject<CDMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CDM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCDM(bb:flatbuffers.ByteBuffer, obj?:CDM):CDM {
  return (obj || new CDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCDM(bb:flatbuffers.ByteBuffer, obj?:CDM):CDM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$CDM');
}

/**
 * The version of the CCSDS CDM standard used
 */
ccsdsCdmVers():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The date the CDM message was created
 */
creationDate():string|null
creationDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
creationDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The originator of the CDM message
 */
originator():string|null
originator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The intended recipient of the CDM message
 */
messageFor():string|null
messageFor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
messageFor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A unique identifier for the CDM message
 */
messageId():string|null
messageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
messageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of closest approach
 */
tca():string|null
tca(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
tca(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The miss distance between the two objects
 */
missDistance():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The relative speed between the two objects
 */
relativeSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The relative position R component
 */
relativePositionR():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The relative position T component
 */
relativePositionT():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The relative position N component
 */
relativePositionN():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The relative velocity R component
 */
relativeVelocityR():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The relative velocity T component
 */
relativeVelocityT():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The relative velocity N component
 */
relativeVelocityN():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The start time of the screening period
 */
startScreenPeriod():string|null
startScreenPeriod(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startScreenPeriod(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The end time of the screening period
 */
stopScreenPeriod():string|null
stopScreenPeriod(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stopScreenPeriod(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The reference frame for the screening volume
 */
screenVolumeFrame():refFrame {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : refFrame.ECEF;
}

/**
 * The shape of the screening volume
 */
screenVolumeShape():screeningVolumeShape {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : screeningVolumeShape.ELLIPSOID;
}

/**
 * The X dimension of the screening volume
 */
screenVolumeX():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Y dimension of the screening volume
 */
screenVolumeY():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The Z dimension of the screening volume
 */
screenVolumeZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The time the objects entered the screening volume
 */
screenEntryTime():string|null
screenEntryTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
screenEntryTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The time the objects exited the screening volume
 */
screenExitTime():string|null
screenExitTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
screenExitTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The probability of collision between the two objects
 */
collisionProbability():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * The method used to calculate the collision probability
 */
collisionProbabilityMethod():string|null
collisionProbabilityMethod(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
collisionProbabilityMethod(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The first object in the CDM message
 */
object1(obj?:CDMObject):CDMObject|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? (obj || new CDMObject()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * The second object in the CDM message
 */
object2(obj?:CDMObject):CDMObject|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? (obj || new CDMObject()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Data Source for the positional information for Object 1
 */
object1Datasource(obj?:PNM):PNM|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? (obj || new PNM()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Data Source for the positional information for Object 2
 */
object2Datasource(obj?:PNM):PNM|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? (obj || new PNM()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startCDM(builder:flatbuffers.Builder) {
  builder.startObject(29);
}

static addCcsdsCdmVers(builder:flatbuffers.Builder, ccsdsCdmVers:number) {
  builder.addFieldFloat64(0, ccsdsCdmVers, 0.0);
}

static addCreationDate(builder:flatbuffers.Builder, creationDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, creationDateOffset, 0);
}

static addOriginator(builder:flatbuffers.Builder, originatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, originatorOffset, 0);
}

static addMessageFor(builder:flatbuffers.Builder, messageForOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, messageForOffset, 0);
}

static addMessageId(builder:flatbuffers.Builder, messageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, messageIdOffset, 0);
}

static addTca(builder:flatbuffers.Builder, tcaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, tcaOffset, 0);
}

static addMissDistance(builder:flatbuffers.Builder, missDistance:number) {
  builder.addFieldFloat64(6, missDistance, 0.0);
}

static addRelativeSpeed(builder:flatbuffers.Builder, relativeSpeed:number) {
  builder.addFieldFloat64(7, relativeSpeed, 0.0);
}

static addRelativePositionR(builder:flatbuffers.Builder, relativePositionR:number) {
  builder.addFieldFloat64(8, relativePositionR, 0.0);
}

static addRelativePositionT(builder:flatbuffers.Builder, relativePositionT:number) {
  builder.addFieldFloat64(9, relativePositionT, 0.0);
}

static addRelativePositionN(builder:flatbuffers.Builder, relativePositionN:number) {
  builder.addFieldFloat64(10, relativePositionN, 0.0);
}

static addRelativeVelocityR(builder:flatbuffers.Builder, relativeVelocityR:number) {
  builder.addFieldFloat64(11, relativeVelocityR, 0.0);
}

static addRelativeVelocityT(builder:flatbuffers.Builder, relativeVelocityT:number) {
  builder.addFieldFloat64(12, relativeVelocityT, 0.0);
}

static addRelativeVelocityN(builder:flatbuffers.Builder, relativeVelocityN:number) {
  builder.addFieldFloat64(13, relativeVelocityN, 0.0);
}

static addStartScreenPeriod(builder:flatbuffers.Builder, startScreenPeriodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, startScreenPeriodOffset, 0);
}

static addStopScreenPeriod(builder:flatbuffers.Builder, stopScreenPeriodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, stopScreenPeriodOffset, 0);
}

static addScreenVolumeFrame(builder:flatbuffers.Builder, screenVolumeFrame:refFrame) {
  builder.addFieldInt8(16, screenVolumeFrame, refFrame.ECEF);
}

static addScreenVolumeShape(builder:flatbuffers.Builder, screenVolumeShape:screeningVolumeShape) {
  builder.addFieldInt8(17, screenVolumeShape, screeningVolumeShape.ELLIPSOID);
}

static addScreenVolumeX(builder:flatbuffers.Builder, screenVolumeX:number) {
  builder.addFieldFloat64(18, screenVolumeX, 0.0);
}

static addScreenVolumeY(builder:flatbuffers.Builder, screenVolumeY:number) {
  builder.addFieldFloat64(19, screenVolumeY, 0.0);
}

static addScreenVolumeZ(builder:flatbuffers.Builder, screenVolumeZ:number) {
  builder.addFieldFloat64(20, screenVolumeZ, 0.0);
}

static addScreenEntryTime(builder:flatbuffers.Builder, screenEntryTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, screenEntryTimeOffset, 0);
}

static addScreenExitTime(builder:flatbuffers.Builder, screenExitTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, screenExitTimeOffset, 0);
}

static addCollisionProbability(builder:flatbuffers.Builder, collisionProbability:number) {
  builder.addFieldFloat64(23, collisionProbability, 0.0);
}

static addCollisionProbabilityMethod(builder:flatbuffers.Builder, collisionProbabilityMethodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, collisionProbabilityMethodOffset, 0);
}

static addObject1(builder:flatbuffers.Builder, object1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(25, object1Offset, 0);
}

static addObject2(builder:flatbuffers.Builder, object2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(26, object2Offset, 0);
}

static addObject1Datasource(builder:flatbuffers.Builder, object1DatasourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, object1DatasourceOffset, 0);
}

static addObject2Datasource(builder:flatbuffers.Builder, object2DatasourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, object2DatasourceOffset, 0);
}

static endCDM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCDMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$CDM');
}

static finishSizePrefixedCDMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$CDM', true);
}


unpack(): CDMT {
  return new CDMT(
    this.ccsdsCdmVers(),
    this.creationDate(),
    this.originator(),
    this.messageFor(),
    this.messageId(),
    this.tca(),
    this.missDistance(),
    this.relativeSpeed(),
    this.relativePositionR(),
    this.relativePositionT(),
    this.relativePositionN(),
    this.relativeVelocityR(),
    this.relativeVelocityT(),
    this.relativeVelocityN(),
    this.startScreenPeriod(),
    this.stopScreenPeriod(),
    this.screenVolumeFrame(),
    this.screenVolumeShape(),
    this.screenVolumeX(),
    this.screenVolumeY(),
    this.screenVolumeZ(),
    this.screenEntryTime(),
    this.screenExitTime(),
    this.collisionProbability(),
    this.collisionProbabilityMethod(),
    (this.object1() !== null ? this.object1()!.unpack() : null),
    (this.object2() !== null ? this.object2()!.unpack() : null),
    (this.object1Datasource() !== null ? this.object1Datasource()!.unpack() : null),
    (this.object2Datasource() !== null ? this.object2Datasource()!.unpack() : null)
  );
}


unpackTo(_o: CDMT): void {
  _o.ccsdsCdmVers = this.ccsdsCdmVers();
  _o.creationDate = this.creationDate();
  _o.originator = this.originator();
  _o.messageFor = this.messageFor();
  _o.messageId = this.messageId();
  _o.tca = this.tca();
  _o.missDistance = this.missDistance();
  _o.relativeSpeed = this.relativeSpeed();
  _o.relativePositionR = this.relativePositionR();
  _o.relativePositionT = this.relativePositionT();
  _o.relativePositionN = this.relativePositionN();
  _o.relativeVelocityR = this.relativeVelocityR();
  _o.relativeVelocityT = this.relativeVelocityT();
  _o.relativeVelocityN = this.relativeVelocityN();
  _o.startScreenPeriod = this.startScreenPeriod();
  _o.stopScreenPeriod = this.stopScreenPeriod();
  _o.screenVolumeFrame = this.screenVolumeFrame();
  _o.screenVolumeShape = this.screenVolumeShape();
  _o.screenVolumeX = this.screenVolumeX();
  _o.screenVolumeY = this.screenVolumeY();
  _o.screenVolumeZ = this.screenVolumeZ();
  _o.screenEntryTime = this.screenEntryTime();
  _o.screenExitTime = this.screenExitTime();
  _o.collisionProbability = this.collisionProbability();
  _o.collisionProbabilityMethod = this.collisionProbabilityMethod();
  _o.object1 = (this.object1() !== null ? this.object1()!.unpack() : null);
  _o.object2 = (this.object2() !== null ? this.object2()!.unpack() : null);
  _o.object1Datasource = (this.object1Datasource() !== null ? this.object1Datasource()!.unpack() : null);
  _o.object2Datasource = (this.object2Datasource() !== null ? this.object2Datasource()!.unpack() : null);
}
}

export class CDMT implements flatbuffers.IGeneratedObject {
constructor(
  public ccsdsCdmVers: number = 0.0,
  public creationDate: string|Uint8Array|null = null,
  public originator: string|Uint8Array|null = null,
  public messageFor: string|Uint8Array|null = null,
  public messageId: string|Uint8Array|null = null,
  public tca: string|Uint8Array|null = null,
  public missDistance: number = 0.0,
  public relativeSpeed: number = 0.0,
  public relativePositionR: number = 0.0,
  public relativePositionT: number = 0.0,
  public relativePositionN: number = 0.0,
  public relativeVelocityR: number = 0.0,
  public relativeVelocityT: number = 0.0,
  public relativeVelocityN: number = 0.0,
  public startScreenPeriod: string|Uint8Array|null = null,
  public stopScreenPeriod: string|Uint8Array|null = null,
  public screenVolumeFrame: refFrame = refFrame.ECEF,
  public screenVolumeShape: screeningVolumeShape = screeningVolumeShape.ELLIPSOID,
  public screenVolumeX: number = 0.0,
  public screenVolumeY: number = 0.0,
  public screenVolumeZ: number = 0.0,
  public screenEntryTime: string|Uint8Array|null = null,
  public screenExitTime: string|Uint8Array|null = null,
  public collisionProbability: number = 0.0,
  public collisionProbabilityMethod: string|Uint8Array|null = null,
  public object1: CDMObjectT|null = null,
  public object2: CDMObjectT|null = null,
  public object1Datasource: PNMT|null = null,
  public object2Datasource: PNMT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const creationDate = (this.creationDate !== null ? builder.createString(this.creationDate!) : 0);
  const originator = (this.originator !== null ? builder.createString(this.originator!) : 0);
  const messageFor = (this.messageFor !== null ? builder.createString(this.messageFor!) : 0);
  const messageId = (this.messageId !== null ? builder.createString(this.messageId!) : 0);
  const tca = (this.tca !== null ? builder.createString(this.tca!) : 0);
  const startScreenPeriod = (this.startScreenPeriod !== null ? builder.createString(this.startScreenPeriod!) : 0);
  const stopScreenPeriod = (this.stopScreenPeriod !== null ? builder.createString(this.stopScreenPeriod!) : 0);
  const screenEntryTime = (this.screenEntryTime !== null ? builder.createString(this.screenEntryTime!) : 0);
  const screenExitTime = (this.screenExitTime !== null ? builder.createString(this.screenExitTime!) : 0);
  const collisionProbabilityMethod = (this.collisionProbabilityMethod !== null ? builder.createString(this.collisionProbabilityMethod!) : 0);
  const object1 = (this.object1 !== null ? this.object1!.pack(builder) : 0);
  const object2 = (this.object2 !== null ? this.object2!.pack(builder) : 0);
  const object1Datasource = (this.object1Datasource !== null ? this.object1Datasource!.pack(builder) : 0);
  const object2Datasource = (this.object2Datasource !== null ? this.object2Datasource!.pack(builder) : 0);

  CDM.startCDM(builder);
  CDM.addCcsdsCdmVers(builder, this.ccsdsCdmVers);
  CDM.addCreationDate(builder, creationDate);
  CDM.addOriginator(builder, originator);
  CDM.addMessageFor(builder, messageFor);
  CDM.addMessageId(builder, messageId);
  CDM.addTca(builder, tca);
  CDM.addMissDistance(builder, this.missDistance);
  CDM.addRelativeSpeed(builder, this.relativeSpeed);
  CDM.addRelativePositionR(builder, this.relativePositionR);
  CDM.addRelativePositionT(builder, this.relativePositionT);
  CDM.addRelativePositionN(builder, this.relativePositionN);
  CDM.addRelativeVelocityR(builder, this.relativeVelocityR);
  CDM.addRelativeVelocityT(builder, this.relativeVelocityT);
  CDM.addRelativeVelocityN(builder, this.relativeVelocityN);
  CDM.addStartScreenPeriod(builder, startScreenPeriod);
  CDM.addStopScreenPeriod(builder, stopScreenPeriod);
  CDM.addScreenVolumeFrame(builder, this.screenVolumeFrame);
  CDM.addScreenVolumeShape(builder, this.screenVolumeShape);
  CDM.addScreenVolumeX(builder, this.screenVolumeX);
  CDM.addScreenVolumeY(builder, this.screenVolumeY);
  CDM.addScreenVolumeZ(builder, this.screenVolumeZ);
  CDM.addScreenEntryTime(builder, screenEntryTime);
  CDM.addScreenExitTime(builder, screenExitTime);
  CDM.addCollisionProbability(builder, this.collisionProbability);
  CDM.addCollisionProbabilityMethod(builder, collisionProbabilityMethod);
  CDM.addObject1(builder, object1);
  CDM.addObject2(builder, object2);
  CDM.addObject1Datasource(builder, object1Datasource);
  CDM.addObject2Datasource(builder, object2Datasource);

  return CDM.endCDM(builder);
}
}
