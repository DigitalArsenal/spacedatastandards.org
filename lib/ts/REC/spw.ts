// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { F107DataType } from './f107-data-type.js';


/**
 * Space Weather Data Record
 */
export class SPW implements flatbuffers.IUnpackableObject<SPWT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SPW {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSPW(bb:flatbuffers.ByteBuffer, obj?:SPW):SPW {
  return (obj || new SPW()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSPW(bb:flatbuffers.ByteBuffer, obj?:SPW):SPW {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SPW()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$SPW');
}

/**
 * Date in ISO 8601 format
 */
date():string|null
date(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
date(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Bartels Solar Rotation Number
 */
bsrn():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Day within Bartels cycle (1-27)
 */
nd():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary 3-hour Range Index (Kp) for 0000-0300 UT, multiplied by 10
 */
kp1():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary 3-hour Range Index (Kp) for 0300-0600 UT, multiplied by 10
 */
kp2():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary 3-hour Range Index (Kp) for 0600-0900 UT, multiplied by 10
 */
kp3():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary 3-hour Range Index (Kp) for 0900-1200 UT, multiplied by 10
 */
kp4():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary 3-hour Range Index (Kp) for 1200-1500 UT, multiplied by 10
 */
kp5():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary 3-hour Range Index (Kp) for 1500-1800 UT, multiplied by 10
 */
kp6():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary 3-hour Range Index (Kp) for 1800-2100 UT, multiplied by 10
 */
kp7():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary 3-hour Range Index (Kp) for 2100-0000 UT, multiplied by 10
 */
kp8():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Sum of the 8 Kp indices for the day
 */
kpSum():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Equivalent Amplitude (Ap) for 0000-0300 UT
 */
ap1():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Equivalent Amplitude (Ap) for 0300-0600 UT
 */
ap2():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Equivalent Amplitude (Ap) for 0600-0900 UT
 */
ap3():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Equivalent Amplitude (Ap) for 0900-1200 UT
 */
ap4():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Equivalent Amplitude (Ap) for 1200-1500 UT
 */
ap5():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Equivalent Amplitude (Ap) for 1500-1800 UT
 */
ap6():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Equivalent Amplitude (Ap) for 1800-2100 UT
 */
ap7():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Equivalent Amplitude (Ap) for 2100-0000 UT
 */
ap8():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Arithmetic average of the 8 Ap indices for the day
 */
apAvg():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Planetary Daily Character Figure (0.0 to 2.5)
 */
cp():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * C9 index (0-9)
 */
c9():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * International Sunspot Number
 */
isn():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

/**
 * Observed 10.7cm Solar Radio Flux
 */
f107Obs():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Adjusted 10.7cm Solar Radio Flux (to 1 AU)
 */
f107Adj():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * F10.7 Data Type
 */
f107DataType():F107DataType {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : F107DataType.OBS;
}

/**
 * 81-day centered average of observed F10.7
 */
f107ObsCenter81():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * 81-day trailing average of observed F10.7
 */
f107ObsLast81():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * 81-day centered average of adjusted F10.7
 */
f107AdjCenter81():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * 81-day trailing average of adjusted F10.7
 */
f107AdjLast81():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startSPW(builder:flatbuffers.Builder) {
  builder.startObject(31);
}

static addDate(builder:flatbuffers.Builder, dateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dateOffset, 0);
}

static addBsrn(builder:flatbuffers.Builder, bsrn:number) {
  builder.addFieldInt32(1, bsrn, 0);
}

static addNd(builder:flatbuffers.Builder, nd:number) {
  builder.addFieldInt32(2, nd, 0);
}

static addKp1(builder:flatbuffers.Builder, kp1:number) {
  builder.addFieldInt32(3, kp1, 0);
}

static addKp2(builder:flatbuffers.Builder, kp2:number) {
  builder.addFieldInt32(4, kp2, 0);
}

static addKp3(builder:flatbuffers.Builder, kp3:number) {
  builder.addFieldInt32(5, kp3, 0);
}

static addKp4(builder:flatbuffers.Builder, kp4:number) {
  builder.addFieldInt32(6, kp4, 0);
}

static addKp5(builder:flatbuffers.Builder, kp5:number) {
  builder.addFieldInt32(7, kp5, 0);
}

static addKp6(builder:flatbuffers.Builder, kp6:number) {
  builder.addFieldInt32(8, kp6, 0);
}

static addKp7(builder:flatbuffers.Builder, kp7:number) {
  builder.addFieldInt32(9, kp7, 0);
}

static addKp8(builder:flatbuffers.Builder, kp8:number) {
  builder.addFieldInt32(10, kp8, 0);
}

static addKpSum(builder:flatbuffers.Builder, kpSum:number) {
  builder.addFieldInt32(11, kpSum, 0);
}

static addAp1(builder:flatbuffers.Builder, ap1:number) {
  builder.addFieldInt32(12, ap1, 0);
}

static addAp2(builder:flatbuffers.Builder, ap2:number) {
  builder.addFieldInt32(13, ap2, 0);
}

static addAp3(builder:flatbuffers.Builder, ap3:number) {
  builder.addFieldInt32(14, ap3, 0);
}

static addAp4(builder:flatbuffers.Builder, ap4:number) {
  builder.addFieldInt32(15, ap4, 0);
}

static addAp5(builder:flatbuffers.Builder, ap5:number) {
  builder.addFieldInt32(16, ap5, 0);
}

static addAp6(builder:flatbuffers.Builder, ap6:number) {
  builder.addFieldInt32(17, ap6, 0);
}

static addAp7(builder:flatbuffers.Builder, ap7:number) {
  builder.addFieldInt32(18, ap7, 0);
}

static addAp8(builder:flatbuffers.Builder, ap8:number) {
  builder.addFieldInt32(19, ap8, 0);
}

static addApAvg(builder:flatbuffers.Builder, apAvg:number) {
  builder.addFieldInt32(20, apAvg, 0);
}

static addCp(builder:flatbuffers.Builder, cp:number) {
  builder.addFieldFloat32(21, cp, 0.0);
}

static addC9(builder:flatbuffers.Builder, c9:number) {
  builder.addFieldInt32(22, c9, 0);
}

static addIsn(builder:flatbuffers.Builder, isn:number) {
  builder.addFieldInt32(23, isn, 0);
}

static addF107Obs(builder:flatbuffers.Builder, f107Obs:number) {
  builder.addFieldFloat32(24, f107Obs, 0.0);
}

static addF107Adj(builder:flatbuffers.Builder, f107Adj:number) {
  builder.addFieldFloat32(25, f107Adj, 0.0);
}

static addF107DataType(builder:flatbuffers.Builder, f107DataType:F107DataType) {
  builder.addFieldInt8(26, f107DataType, F107DataType.OBS);
}

static addF107ObsCenter81(builder:flatbuffers.Builder, f107ObsCenter81:number) {
  builder.addFieldFloat32(27, f107ObsCenter81, 0.0);
}

static addF107ObsLast81(builder:flatbuffers.Builder, f107ObsLast81:number) {
  builder.addFieldFloat32(28, f107ObsLast81, 0.0);
}

static addF107AdjCenter81(builder:flatbuffers.Builder, f107AdjCenter81:number) {
  builder.addFieldFloat32(29, f107AdjCenter81, 0.0);
}

static addF107AdjLast81(builder:flatbuffers.Builder, f107AdjLast81:number) {
  builder.addFieldFloat32(30, f107AdjLast81, 0.0);
}

static endSPW(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSPWBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$SPW');
}

static finishSizePrefixedSPWBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$SPW', true);
}

static createSPW(builder:flatbuffers.Builder, dateOffset:flatbuffers.Offset, bsrn:number, nd:number, kp1:number, kp2:number, kp3:number, kp4:number, kp5:number, kp6:number, kp7:number, kp8:number, kpSum:number, ap1:number, ap2:number, ap3:number, ap4:number, ap5:number, ap6:number, ap7:number, ap8:number, apAvg:number, cp:number, c9:number, isn:number, f107Obs:number, f107Adj:number, f107DataType:F107DataType, f107ObsCenter81:number, f107ObsLast81:number, f107AdjCenter81:number, f107AdjLast81:number):flatbuffers.Offset {
  SPW.startSPW(builder);
  SPW.addDate(builder, dateOffset);
  SPW.addBsrn(builder, bsrn);
  SPW.addNd(builder, nd);
  SPW.addKp1(builder, kp1);
  SPW.addKp2(builder, kp2);
  SPW.addKp3(builder, kp3);
  SPW.addKp4(builder, kp4);
  SPW.addKp5(builder, kp5);
  SPW.addKp6(builder, kp6);
  SPW.addKp7(builder, kp7);
  SPW.addKp8(builder, kp8);
  SPW.addKpSum(builder, kpSum);
  SPW.addAp1(builder, ap1);
  SPW.addAp2(builder, ap2);
  SPW.addAp3(builder, ap3);
  SPW.addAp4(builder, ap4);
  SPW.addAp5(builder, ap5);
  SPW.addAp6(builder, ap6);
  SPW.addAp7(builder, ap7);
  SPW.addAp8(builder, ap8);
  SPW.addApAvg(builder, apAvg);
  SPW.addCp(builder, cp);
  SPW.addC9(builder, c9);
  SPW.addIsn(builder, isn);
  SPW.addF107Obs(builder, f107Obs);
  SPW.addF107Adj(builder, f107Adj);
  SPW.addF107DataType(builder, f107DataType);
  SPW.addF107ObsCenter81(builder, f107ObsCenter81);
  SPW.addF107ObsLast81(builder, f107ObsLast81);
  SPW.addF107AdjCenter81(builder, f107AdjCenter81);
  SPW.addF107AdjLast81(builder, f107AdjLast81);
  return SPW.endSPW(builder);
}

unpack(): SPWT {
  return new SPWT(
    this.date(),
    this.bsrn(),
    this.nd(),
    this.kp1(),
    this.kp2(),
    this.kp3(),
    this.kp4(),
    this.kp5(),
    this.kp6(),
    this.kp7(),
    this.kp8(),
    this.kpSum(),
    this.ap1(),
    this.ap2(),
    this.ap3(),
    this.ap4(),
    this.ap5(),
    this.ap6(),
    this.ap7(),
    this.ap8(),
    this.apAvg(),
    this.cp(),
    this.c9(),
    this.isn(),
    this.f107Obs(),
    this.f107Adj(),
    this.f107DataType(),
    this.f107ObsCenter81(),
    this.f107ObsLast81(),
    this.f107AdjCenter81(),
    this.f107AdjLast81()
  );
}


unpackTo(_o: SPWT): void {
  _o.date = this.date();
  _o.bsrn = this.bsrn();
  _o.nd = this.nd();
  _o.kp1 = this.kp1();
  _o.kp2 = this.kp2();
  _o.kp3 = this.kp3();
  _o.kp4 = this.kp4();
  _o.kp5 = this.kp5();
  _o.kp6 = this.kp6();
  _o.kp7 = this.kp7();
  _o.kp8 = this.kp8();
  _o.kpSum = this.kpSum();
  _o.ap1 = this.ap1();
  _o.ap2 = this.ap2();
  _o.ap3 = this.ap3();
  _o.ap4 = this.ap4();
  _o.ap5 = this.ap5();
  _o.ap6 = this.ap6();
  _o.ap7 = this.ap7();
  _o.ap8 = this.ap8();
  _o.apAvg = this.apAvg();
  _o.cp = this.cp();
  _o.c9 = this.c9();
  _o.isn = this.isn();
  _o.f107Obs = this.f107Obs();
  _o.f107Adj = this.f107Adj();
  _o.f107DataType = this.f107DataType();
  _o.f107ObsCenter81 = this.f107ObsCenter81();
  _o.f107ObsLast81 = this.f107ObsLast81();
  _o.f107AdjCenter81 = this.f107AdjCenter81();
  _o.f107AdjLast81 = this.f107AdjLast81();
}
}

export class SPWT implements flatbuffers.IGeneratedObject {
constructor(
  public date: string|Uint8Array|null = null,
  public bsrn: number = 0,
  public nd: number = 0,
  public kp1: number = 0,
  public kp2: number = 0,
  public kp3: number = 0,
  public kp4: number = 0,
  public kp5: number = 0,
  public kp6: number = 0,
  public kp7: number = 0,
  public kp8: number = 0,
  public kpSum: number = 0,
  public ap1: number = 0,
  public ap2: number = 0,
  public ap3: number = 0,
  public ap4: number = 0,
  public ap5: number = 0,
  public ap6: number = 0,
  public ap7: number = 0,
  public ap8: number = 0,
  public apAvg: number = 0,
  public cp: number = 0.0,
  public c9: number = 0,
  public isn: number = 0,
  public f107Obs: number = 0.0,
  public f107Adj: number = 0.0,
  public f107DataType: F107DataType = F107DataType.OBS,
  public f107ObsCenter81: number = 0.0,
  public f107ObsLast81: number = 0.0,
  public f107AdjCenter81: number = 0.0,
  public f107AdjLast81: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const date = (this.date !== null ? builder.createString(this.date!) : 0);

  return SPW.createSPW(builder,
    date,
    this.bsrn,
    this.nd,
    this.kp1,
    this.kp2,
    this.kp3,
    this.kp4,
    this.kp5,
    this.kp6,
    this.kp7,
    this.kp8,
    this.kpSum,
    this.ap1,
    this.ap2,
    this.ap3,
    this.ap4,
    this.ap5,
    this.ap6,
    this.ap7,
    this.ap8,
    this.apAvg,
    this.cp,
    this.c9,
    this.isn,
    this.f107Obs,
    this.f107Adj,
    this.f107DataType,
    this.f107ObsCenter81,
    this.f107ObsLast81,
    this.f107AdjCenter81,
    this.f107AdjLast81
  );
}
}
