// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { BOV, BOVT } from './BOV.js';
import { CAT, CATT } from './CAT.js';
import { CDM, CDMT } from './CDM.js';
import { CRM, CRMT } from './CRM.js';
import { CSM, CSMT } from './CSM.js';
import { CTR, CTRT } from './CTR.js';
import { EME, EMET } from './EME.js';
import { EOO, EOOT } from './EOO.js';
import { EOP, EOPT } from './EOP.js';
import { EPM, EPMT } from './EPM.js';
import { HYP, HYPT } from './HYP.js';
import { IDM, IDMT } from './IDM.js';
import { LCC, LCCT } from './LCC.js';
import { LDM, LDMT } from './LDM.js';
import { MET, METT } from './MET.js';
import { MPE, MPET } from './MPE.js';
import { OEM, OEMT } from './OEM.js';
import { OMM, OMMT } from './OMM.js';
import { OPM, OPMT } from './OPM.js';
import { OSM, OSMT } from './OSM.js';
import { PLD, PLDT } from './PLD.js';
import { PNM, PNMT } from './PNM.js';
import { PRG, PRGT } from './PRG.js';
import { RFM, RFMT } from './RFM.js';
import { ROC, ROCT } from './ROC.js';
import { SCM, SCMT } from './SCM.js';
import { SIT, SITT } from './SIT.js';
import { TDM, TDMT } from './TDM.js';
import { TIM, TIMT } from './TIM.js';


export enum RecordType {
  NONE = 0,
  LCC = 1,
  MPE = 2,
  OMM = 3,
  PLD = 4,
  RFM = 5,
  CSM = 6,
  OSM = 7,
  CAT = 8,
  OPM = 9,
  CRM = 10,
  SCM = 11,
  TDM = 12,
  IDM = 13,
  MET = 14,
  ROC = 15,
  BOV = 16,
  EOP = 17,
  EOO = 18,
  EME = 19,
  LDM = 20,
  PNM = 21,
  HYP = 22,
  CTR = 23,
  CDM = 24,
  SIT = 25,
  OEM = 26,
  TIM = 27,
  EPM = 28,
  PRG = 29
}

export function unionToRecordType(
  type: RecordType,
  accessor: (obj:BOV|CAT|CDM|CRM|CSM|CTR|EME|EOO|EOP|EPM|HYP|IDM|LCC|LDM|MET|MPE|OEM|OMM|OPM|OSM|PLD|PNM|PRG|RFM|ROC|SCM|SIT|TDM|TIM) => BOV|CAT|CDM|CRM|CSM|CTR|EME|EOO|EOP|EPM|HYP|IDM|LCC|LDM|MET|MPE|OEM|OMM|OPM|OSM|PLD|PNM|PRG|RFM|ROC|SCM|SIT|TDM|TIM|null
): BOV|CAT|CDM|CRM|CSM|CTR|EME|EOO|EOP|EPM|HYP|IDM|LCC|LDM|MET|MPE|OEM|OMM|OPM|OSM|PLD|PNM|PRG|RFM|ROC|SCM|SIT|TDM|TIM|null {
  switch(RecordType[type]) {
    case 'NONE': return null; 
    case 'LCC': return accessor(new LCC())! as LCC;
    case 'MPE': return accessor(new MPE())! as MPE;
    case 'OMM': return accessor(new OMM())! as OMM;
    case 'PLD': return accessor(new PLD())! as PLD;
    case 'RFM': return accessor(new RFM())! as RFM;
    case 'CSM': return accessor(new CSM())! as CSM;
    case 'OSM': return accessor(new OSM())! as OSM;
    case 'CAT': return accessor(new CAT())! as CAT;
    case 'OPM': return accessor(new OPM())! as OPM;
    case 'CRM': return accessor(new CRM())! as CRM;
    case 'SCM': return accessor(new SCM())! as SCM;
    case 'TDM': return accessor(new TDM())! as TDM;
    case 'IDM': return accessor(new IDM())! as IDM;
    case 'MET': return accessor(new MET())! as MET;
    case 'ROC': return accessor(new ROC())! as ROC;
    case 'BOV': return accessor(new BOV())! as BOV;
    case 'EOP': return accessor(new EOP())! as EOP;
    case 'EOO': return accessor(new EOO())! as EOO;
    case 'EME': return accessor(new EME())! as EME;
    case 'LDM': return accessor(new LDM())! as LDM;
    case 'PNM': return accessor(new PNM())! as PNM;
    case 'HYP': return accessor(new HYP())! as HYP;
    case 'CTR': return accessor(new CTR())! as CTR;
    case 'CDM': return accessor(new CDM())! as CDM;
    case 'SIT': return accessor(new SIT())! as SIT;
    case 'OEM': return accessor(new OEM())! as OEM;
    case 'TIM': return accessor(new TIM())! as TIM;
    case 'EPM': return accessor(new EPM())! as EPM;
    case 'PRG': return accessor(new PRG())! as PRG;
    default: return null;
  }
}

export function unionListToRecordType(
  type: RecordType, 
  accessor: (index: number, obj:BOV|CAT|CDM|CRM|CSM|CTR|EME|EOO|EOP|EPM|HYP|IDM|LCC|LDM|MET|MPE|OEM|OMM|OPM|OSM|PLD|PNM|PRG|RFM|ROC|SCM|SIT|TDM|TIM) => BOV|CAT|CDM|CRM|CSM|CTR|EME|EOO|EOP|EPM|HYP|IDM|LCC|LDM|MET|MPE|OEM|OMM|OPM|OSM|PLD|PNM|PRG|RFM|ROC|SCM|SIT|TDM|TIM|null, 
  index: number
): BOV|CAT|CDM|CRM|CSM|CTR|EME|EOO|EOP|EPM|HYP|IDM|LCC|LDM|MET|MPE|OEM|OMM|OPM|OSM|PLD|PNM|PRG|RFM|ROC|SCM|SIT|TDM|TIM|null {
  switch(RecordType[type]) {
    case 'NONE': return null; 
    case 'LCC': return accessor(index, new LCC())! as LCC;
    case 'MPE': return accessor(index, new MPE())! as MPE;
    case 'OMM': return accessor(index, new OMM())! as OMM;
    case 'PLD': return accessor(index, new PLD())! as PLD;
    case 'RFM': return accessor(index, new RFM())! as RFM;
    case 'CSM': return accessor(index, new CSM())! as CSM;
    case 'OSM': return accessor(index, new OSM())! as OSM;
    case 'CAT': return accessor(index, new CAT())! as CAT;
    case 'OPM': return accessor(index, new OPM())! as OPM;
    case 'CRM': return accessor(index, new CRM())! as CRM;
    case 'SCM': return accessor(index, new SCM())! as SCM;
    case 'TDM': return accessor(index, new TDM())! as TDM;
    case 'IDM': return accessor(index, new IDM())! as IDM;
    case 'MET': return accessor(index, new MET())! as MET;
    case 'ROC': return accessor(index, new ROC())! as ROC;
    case 'BOV': return accessor(index, new BOV())! as BOV;
    case 'EOP': return accessor(index, new EOP())! as EOP;
    case 'EOO': return accessor(index, new EOO())! as EOO;
    case 'EME': return accessor(index, new EME())! as EME;
    case 'LDM': return accessor(index, new LDM())! as LDM;
    case 'PNM': return accessor(index, new PNM())! as PNM;
    case 'HYP': return accessor(index, new HYP())! as HYP;
    case 'CTR': return accessor(index, new CTR())! as CTR;
    case 'CDM': return accessor(index, new CDM())! as CDM;
    case 'SIT': return accessor(index, new SIT())! as SIT;
    case 'OEM': return accessor(index, new OEM())! as OEM;
    case 'TIM': return accessor(index, new TIM())! as TIM;
    case 'EPM': return accessor(index, new EPM())! as EPM;
    case 'PRG': return accessor(index, new PRG())! as PRG;
    default: return null;
  }
}
