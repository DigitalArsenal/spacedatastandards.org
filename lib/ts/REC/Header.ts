// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Header implements flatbuffers.IUnpackableObject<HeaderT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Header {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHeader(bb:flatbuffers.ByteBuffer, obj?:Header):Header {
  return (obj || new Header()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHeader(bb:flatbuffers.ByteBuffer, obj?:Header):Header {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Header()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Format version in the form of 'x.y', where 'y' is incremented for minor changes, and 'x' for major changes.
 */
CCSDS_OCM_VERS():string|null
CCSDS_OCM_VERS(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CCSDS_OCM_VERS(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Comments (a contiguous set of one or more comment lines may be provided immediately after the version number).
 */
COMMENT(index: number):string
COMMENT(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
COMMENT(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

commentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * User-defined free-text message classification/caveats of this OCM.
 */
CLASSIFICATION():string|null
CLASSIFICATION(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CLASSIFICATION(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * File creation date/time in UTC.
 */
CREATION_DATE():string|null
CREATION_DATE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CREATION_DATE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Creating agency or operator.
 */
ORIGINATOR():string|null
ORIGINATOR(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ORIGINATOR(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Free-text field containing an ID that uniquely identifies a message from this originator.
 */
MESSAGE_ID():string|null
MESSAGE_ID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MESSAGE_ID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startHeader(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addCcsdsOcmVers(builder:flatbuffers.Builder, CCSDS_OCM_VERSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, CCSDS_OCM_VERSOffset, 0);
}

static addComment(builder:flatbuffers.Builder, COMMENTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, COMMENTOffset, 0);
}

static createCommentVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCommentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addClassification(builder:flatbuffers.Builder, CLASSIFICATIONOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, CLASSIFICATIONOffset, 0);
}

static addCreationDate(builder:flatbuffers.Builder, CREATION_DATEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, CREATION_DATEOffset, 0);
}

static addOriginator(builder:flatbuffers.Builder, ORIGINATOROffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, ORIGINATOROffset, 0);
}

static addMessageId(builder:flatbuffers.Builder, MESSAGE_IDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, MESSAGE_IDOffset, 0);
}

static endHeader(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHeader(builder:flatbuffers.Builder, CCSDS_OCM_VERSOffset:flatbuffers.Offset, COMMENTOffset:flatbuffers.Offset, CLASSIFICATIONOffset:flatbuffers.Offset, CREATION_DATEOffset:flatbuffers.Offset, ORIGINATOROffset:flatbuffers.Offset, MESSAGE_IDOffset:flatbuffers.Offset):flatbuffers.Offset {
  Header.startHeader(builder);
  Header.addCcsdsOcmVers(builder, CCSDS_OCM_VERSOffset);
  Header.addComment(builder, COMMENTOffset);
  Header.addClassification(builder, CLASSIFICATIONOffset);
  Header.addCreationDate(builder, CREATION_DATEOffset);
  Header.addOriginator(builder, ORIGINATOROffset);
  Header.addMessageId(builder, MESSAGE_IDOffset);
  return Header.endHeader(builder);
}

unpack(): HeaderT {
  return new HeaderT(
    this.CCSDS_OCM_VERS(),
    this.bb!.createScalarList<string>(this.COMMENT.bind(this), this.commentLength()),
    this.CLASSIFICATION(),
    this.CREATION_DATE(),
    this.ORIGINATOR(),
    this.MESSAGE_ID()
  );
}


unpackTo(_o: HeaderT): void {
  _o.CCSDS_OCM_VERS = this.CCSDS_OCM_VERS();
  _o.COMMENT = this.bb!.createScalarList<string>(this.COMMENT.bind(this), this.commentLength());
  _o.CLASSIFICATION = this.CLASSIFICATION();
  _o.CREATION_DATE = this.CREATION_DATE();
  _o.ORIGINATOR = this.ORIGINATOR();
  _o.MESSAGE_ID = this.MESSAGE_ID();
}
}

export class HeaderT implements flatbuffers.IGeneratedObject {
constructor(
  public CCSDS_OCM_VERS: string|Uint8Array|null = null,
  public COMMENT: (string)[] = [],
  public CLASSIFICATION: string|Uint8Array|null = null,
  public CREATION_DATE: string|Uint8Array|null = null,
  public ORIGINATOR: string|Uint8Array|null = null,
  public MESSAGE_ID: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const CCSDS_OCM_VERS = (this.CCSDS_OCM_VERS !== null ? builder.createString(this.CCSDS_OCM_VERS!) : 0);
  const COMMENT = Header.createCommentVector(builder, builder.createObjectOffsetList(this.COMMENT));
  const CLASSIFICATION = (this.CLASSIFICATION !== null ? builder.createString(this.CLASSIFICATION!) : 0);
  const CREATION_DATE = (this.CREATION_DATE !== null ? builder.createString(this.CREATION_DATE!) : 0);
  const ORIGINATOR = (this.ORIGINATOR !== null ? builder.createString(this.ORIGINATOR!) : 0);
  const MESSAGE_ID = (this.MESSAGE_ID !== null ? builder.createString(this.MESSAGE_ID!) : 0);

  return Header.createHeader(builder,
    CCSDS_OCM_VERS,
    COMMENT,
    CLASSIFICATION,
    CREATION_DATE,
    ORIGINATOR,
    MESSAGE_ID
  );
}
}
