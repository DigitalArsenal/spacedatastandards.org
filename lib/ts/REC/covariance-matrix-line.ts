// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



/**
 * Position/Velocity Covariance Matrix Line
 */
export class covarianceMatrixLine implements flatbuffers.IUnpackableObject<covarianceMatrixLineT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):covarianceMatrixLine {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAscovarianceMatrixLine(bb:flatbuffers.ByteBuffer, obj?:covarianceMatrixLine):covarianceMatrixLine {
  return (obj || new covarianceMatrixLine()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAscovarianceMatrixLine(bb:flatbuffers.ByteBuffer, obj?:covarianceMatrixLine):covarianceMatrixLine {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new covarianceMatrixLine()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Epoch
 */
epoch():string|null
epoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
epoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Covariance matrix [1,1] km**2
 */
cxX():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [2,1] km**2
 */
cyX():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [2,2] km**2
 */
cyY():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [3,1] km**2
 */
czX():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [3,2] km**2
 */
czY():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [3,3] km**2
 */
czZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [4,1] km**2/s
 */
cxDotX():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [4,2] km**2/s
 */
cxDotY():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [4,3] km**2/s
 */
cxDotZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [4,4] km**2/s**2
 */
cxDotXDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [5,1] km**2/s
 */
cyDotX():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [5,2] km**2/s
 */
cyDotY():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [5,3] km**2/s
 */
cyDotZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [5,4] km**2/s**2
 */
cyDotXDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [5,5] km**2/s**2
 */
cyDotYDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [6,1] km**2/s
 */
czDotX():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [6,2] km**2/s
 */
czDotY():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [6,3] km**2/s
 */
czDotZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [6,4] km**2/s**2
 */
czDotXDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [6,5] km**2/s**2
 */
czDotYDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Covariance matrix [6,6] km**2/s**2
 */
czDotZDot():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startcovarianceMatrixLine(builder:flatbuffers.Builder) {
  builder.startObject(22);
}

static addEpoch(builder:flatbuffers.Builder, epochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, epochOffset, 0);
}

static addCxX(builder:flatbuffers.Builder, cxX:number) {
  builder.addFieldFloat64(1, cxX, 0.0);
}

static addCyX(builder:flatbuffers.Builder, cyX:number) {
  builder.addFieldFloat64(2, cyX, 0.0);
}

static addCyY(builder:flatbuffers.Builder, cyY:number) {
  builder.addFieldFloat64(3, cyY, 0.0);
}

static addCzX(builder:flatbuffers.Builder, czX:number) {
  builder.addFieldFloat64(4, czX, 0.0);
}

static addCzY(builder:flatbuffers.Builder, czY:number) {
  builder.addFieldFloat64(5, czY, 0.0);
}

static addCzZ(builder:flatbuffers.Builder, czZ:number) {
  builder.addFieldFloat64(6, czZ, 0.0);
}

static addCxDotX(builder:flatbuffers.Builder, cxDotX:number) {
  builder.addFieldFloat64(7, cxDotX, 0.0);
}

static addCxDotY(builder:flatbuffers.Builder, cxDotY:number) {
  builder.addFieldFloat64(8, cxDotY, 0.0);
}

static addCxDotZ(builder:flatbuffers.Builder, cxDotZ:number) {
  builder.addFieldFloat64(9, cxDotZ, 0.0);
}

static addCxDotXDot(builder:flatbuffers.Builder, cxDotXDot:number) {
  builder.addFieldFloat64(10, cxDotXDot, 0.0);
}

static addCyDotX(builder:flatbuffers.Builder, cyDotX:number) {
  builder.addFieldFloat64(11, cyDotX, 0.0);
}

static addCyDotY(builder:flatbuffers.Builder, cyDotY:number) {
  builder.addFieldFloat64(12, cyDotY, 0.0);
}

static addCyDotZ(builder:flatbuffers.Builder, cyDotZ:number) {
  builder.addFieldFloat64(13, cyDotZ, 0.0);
}

static addCyDotXDot(builder:flatbuffers.Builder, cyDotXDot:number) {
  builder.addFieldFloat64(14, cyDotXDot, 0.0);
}

static addCyDotYDot(builder:flatbuffers.Builder, cyDotYDot:number) {
  builder.addFieldFloat64(15, cyDotYDot, 0.0);
}

static addCzDotX(builder:flatbuffers.Builder, czDotX:number) {
  builder.addFieldFloat64(16, czDotX, 0.0);
}

static addCzDotY(builder:flatbuffers.Builder, czDotY:number) {
  builder.addFieldFloat64(17, czDotY, 0.0);
}

static addCzDotZ(builder:flatbuffers.Builder, czDotZ:number) {
  builder.addFieldFloat64(18, czDotZ, 0.0);
}

static addCzDotXDot(builder:flatbuffers.Builder, czDotXDot:number) {
  builder.addFieldFloat64(19, czDotXDot, 0.0);
}

static addCzDotYDot(builder:flatbuffers.Builder, czDotYDot:number) {
  builder.addFieldFloat64(20, czDotYDot, 0.0);
}

static addCzDotZDot(builder:flatbuffers.Builder, czDotZDot:number) {
  builder.addFieldFloat64(21, czDotZDot, 0.0);
}

static endcovarianceMatrixLine(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createcovarianceMatrixLine(builder:flatbuffers.Builder, epochOffset:flatbuffers.Offset, cxX:number, cyX:number, cyY:number, czX:number, czY:number, czZ:number, cxDotX:number, cxDotY:number, cxDotZ:number, cxDotXDot:number, cyDotX:number, cyDotY:number, cyDotZ:number, cyDotXDot:number, cyDotYDot:number, czDotX:number, czDotY:number, czDotZ:number, czDotXDot:number, czDotYDot:number, czDotZDot:number):flatbuffers.Offset {
  covarianceMatrixLine.startcovarianceMatrixLine(builder);
  covarianceMatrixLine.addEpoch(builder, epochOffset);
  covarianceMatrixLine.addCxX(builder, cxX);
  covarianceMatrixLine.addCyX(builder, cyX);
  covarianceMatrixLine.addCyY(builder, cyY);
  covarianceMatrixLine.addCzX(builder, czX);
  covarianceMatrixLine.addCzY(builder, czY);
  covarianceMatrixLine.addCzZ(builder, czZ);
  covarianceMatrixLine.addCxDotX(builder, cxDotX);
  covarianceMatrixLine.addCxDotY(builder, cxDotY);
  covarianceMatrixLine.addCxDotZ(builder, cxDotZ);
  covarianceMatrixLine.addCxDotXDot(builder, cxDotXDot);
  covarianceMatrixLine.addCyDotX(builder, cyDotX);
  covarianceMatrixLine.addCyDotY(builder, cyDotY);
  covarianceMatrixLine.addCyDotZ(builder, cyDotZ);
  covarianceMatrixLine.addCyDotXDot(builder, cyDotXDot);
  covarianceMatrixLine.addCyDotYDot(builder, cyDotYDot);
  covarianceMatrixLine.addCzDotX(builder, czDotX);
  covarianceMatrixLine.addCzDotY(builder, czDotY);
  covarianceMatrixLine.addCzDotZ(builder, czDotZ);
  covarianceMatrixLine.addCzDotXDot(builder, czDotXDot);
  covarianceMatrixLine.addCzDotYDot(builder, czDotYDot);
  covarianceMatrixLine.addCzDotZDot(builder, czDotZDot);
  return covarianceMatrixLine.endcovarianceMatrixLine(builder);
}

unpack(): covarianceMatrixLineT {
  return new covarianceMatrixLineT(
    this.epoch(),
    this.cxX(),
    this.cyX(),
    this.cyY(),
    this.czX(),
    this.czY(),
    this.czZ(),
    this.cxDotX(),
    this.cxDotY(),
    this.cxDotZ(),
    this.cxDotXDot(),
    this.cyDotX(),
    this.cyDotY(),
    this.cyDotZ(),
    this.cyDotXDot(),
    this.cyDotYDot(),
    this.czDotX(),
    this.czDotY(),
    this.czDotZ(),
    this.czDotXDot(),
    this.czDotYDot(),
    this.czDotZDot()
  );
}


unpackTo(_o: covarianceMatrixLineT): void {
  _o.epoch = this.epoch();
  _o.cxX = this.cxX();
  _o.cyX = this.cyX();
  _o.cyY = this.cyY();
  _o.czX = this.czX();
  _o.czY = this.czY();
  _o.czZ = this.czZ();
  _o.cxDotX = this.cxDotX();
  _o.cxDotY = this.cxDotY();
  _o.cxDotZ = this.cxDotZ();
  _o.cxDotXDot = this.cxDotXDot();
  _o.cyDotX = this.cyDotX();
  _o.cyDotY = this.cyDotY();
  _o.cyDotZ = this.cyDotZ();
  _o.cyDotXDot = this.cyDotXDot();
  _o.cyDotYDot = this.cyDotYDot();
  _o.czDotX = this.czDotX();
  _o.czDotY = this.czDotY();
  _o.czDotZ = this.czDotZ();
  _o.czDotXDot = this.czDotXDot();
  _o.czDotYDot = this.czDotYDot();
  _o.czDotZDot = this.czDotZDot();
}
}

export class covarianceMatrixLineT implements flatbuffers.IGeneratedObject {
constructor(
  public epoch: string|Uint8Array|null = null,
  public cxX: number = 0.0,
  public cyX: number = 0.0,
  public cyY: number = 0.0,
  public czX: number = 0.0,
  public czY: number = 0.0,
  public czZ: number = 0.0,
  public cxDotX: number = 0.0,
  public cxDotY: number = 0.0,
  public cxDotZ: number = 0.0,
  public cxDotXDot: number = 0.0,
  public cyDotX: number = 0.0,
  public cyDotY: number = 0.0,
  public cyDotZ: number = 0.0,
  public cyDotXDot: number = 0.0,
  public cyDotYDot: number = 0.0,
  public czDotX: number = 0.0,
  public czDotY: number = 0.0,
  public czDotZ: number = 0.0,
  public czDotXDot: number = 0.0,
  public czDotYDot: number = 0.0,
  public czDotZDot: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const epoch = (this.epoch !== null ? builder.createString(this.epoch!) : 0);

  return covarianceMatrixLine.createcovarianceMatrixLine(builder,
    epoch,
    this.cxX,
    this.cyX,
    this.cyY,
    this.czX,
    this.czY,
    this.czZ,
    this.cxDotX,
    this.cxDotY,
    this.cxDotZ,
    this.cxDotXDot,
    this.cyDotX,
    this.cyDotY,
    this.cyDotZ,
    this.cyDotXDot,
    this.cyDotYDot,
    this.czDotX,
    this.czDotY,
    this.czDotZ,
    this.czDotXDot,
    this.czDotYDot,
    this.czDotZDot
  );
}
}
