// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Metadata implements flatbuffers.IUnpackableObject<MetadataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Metadata {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMetadata(bb:flatbuffers.ByteBuffer, obj?:Metadata):Metadata {
  return (obj || new Metadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMetadata(bb:flatbuffers.ByteBuffer, obj?:Metadata):Metadata {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Metadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Comments in the Metadata section.
 */
COMMENT(index: number):string
COMMENT(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
COMMENT(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

commentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Free-text field containing the name of the object.
 */
OBJECT_NAME():string|null
OBJECT_NAME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OBJECT_NAME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * International designator for the object as assigned by COSPAR.
 */
INTERNATIONAL_DESIGNATOR():string|null
INTERNATIONAL_DESIGNATOR(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
INTERNATIONAL_DESIGNATOR(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Satellite catalog source from which 'OBJECT_DESIGNATOR' was obtained.
 */
CATALOG_NAME():string|null
CATALOG_NAME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CATALOG_NAME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique satellite identification designator from the catalog.
 */
OBJECT_DESIGNATOR():string|null
OBJECT_DESIGNATOR(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OBJECT_DESIGNATOR(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Alternate names of this space object.
 */
ALTERNATE_NAMES(index: number):string
ALTERNATE_NAMES(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
ALTERNATE_NAMES(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

alternateNamesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Originator or programmatic Point-of-Contact (PoC) for OCM.
 */
ORIGINATOR_POC():string|null
ORIGINATOR_POC(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ORIGINATOR_POC(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Contact position of the originator PoC.
 */
ORIGINATOR_POSITION():string|null
ORIGINATOR_POSITION(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ORIGINATOR_POSITION(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originator PoC phone number.
 */
ORIGINATOR_PHONE():string|null
ORIGINATOR_PHONE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ORIGINATOR_PHONE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originator PoC email address.
 */
ORIGINATOR_EMAIL():string|null
ORIGINATOR_EMAIL(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ORIGINATOR_EMAIL(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originator's physical address information.
 */
ORIGINATOR_ADDRESS():string|null
ORIGINATOR_ADDRESS(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ORIGINATOR_ADDRESS(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Creating agency or operator for technical contact.
 */
TECH_ORG():string|null
TECH_ORG(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
TECH_ORG(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Technical Point-of-Contact (PoC) for OCM.
 */
TECH_POC():string|null
TECH_POC(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
TECH_POC(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Contact position of the technical PoC.
 */
TECH_POSITION():string|null
TECH_POSITION(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
TECH_POSITION(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Technical PoC phone number.
 */
TECH_PHONE():string|null
TECH_PHONE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
TECH_PHONE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Technical PoC email address.
 */
TECH_EMAIL():string|null
TECH_EMAIL(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
TECH_EMAIL(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Technical PoC physical address information.
 */
TECH_ADDRESS():string|null
TECH_ADDRESS(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
TECH_ADDRESS(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID that uniquely identifies the previous message from this originator.
 */
PREVIOUS_MESSAGE_ID():string|null
PREVIOUS_MESSAGE_ID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
PREVIOUS_MESSAGE_ID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * ID that uniquely identifies the next message from this originator.
 */
NEXT_MESSAGE_ID():string|null
NEXT_MESSAGE_ID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
NEXT_MESSAGE_ID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of Attitude Data Messages linked to this OCM.
 */
ADM_MSG_LINK():string|null
ADM_MSG_LINK(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ADM_MSG_LINK(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of Conjunction Data Messages linked to this OCM.
 */
CDM_MSG_LINK():string|null
CDM_MSG_LINK(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CDM_MSG_LINK(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of Pointing Request Messages linked to this OCM.
 */
PRM_MSG_LINK():string|null
PRM_MSG_LINK(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
PRM_MSG_LINK(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier of Reentry Data Messages linked to this OCM.
 */
RDM_MSG_LINK():string|null
RDM_MSG_LINK(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
RDM_MSG_LINK(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * List of Tracking Data Messages upon which this orbit determination is based.
 */
TDM_MSG_LINK(index: number):string
TDM_MSG_LINK(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
TDM_MSG_LINK(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tdmMsgLinkLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Operator of the space object.
 */
OPERATOR():string|null
OPERATOR(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OPERATOR(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Owner of the space object.
 */
OWNER():string|null
OWNER(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OWNER(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Country where the space object owner is based.
 */
COUNTRY():string|null
COUNTRY(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
COUNTRY(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Name of the constellation to which this space object belongs.
 */
CONSTELLATION():string|null
CONSTELLATION(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CONSTELLATION(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specification of the type of object (e.g., PAYLOAD, ROCKET BODY, DEBRIS).
 */
OBJECT_TYPE():string|null
OBJECT_TYPE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OBJECT_TYPE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time system for all absolute time stamps in this OCM, including EPOCH_TZERO.
 */
TIME_SYSTEM():string|null
TIME_SYSTEM(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
TIME_SYSTEM(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Default epoch to which all relative times are referenced in data blocks.
 */
EPOCH_TZERO():string|null
EPOCH_TZERO(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
EPOCH_TZERO(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specification of the operational status of the space object.
 */
OPS_STATUS():string|null
OPS_STATUS(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OPS_STATUS(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Specification of the type of orbit (e.g., GEO, LEO).
 */
ORBIT_CATEGORY():string|null
ORBIT_CATEGORY(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ORBIT_CATEGORY(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * List of elements of information data blocks included in this message.
 */
OCM_DATA_ELEMENTS(index: number):string
OCM_DATA_ELEMENTS(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
OCM_DATA_ELEMENTS(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

ocmDataElementsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Number of spacecraft clock counts at EPOCH_TZERO (used if TIME_SYSTEM is SCLK).
 */
SCLK_OFFSET_AT_EPOCH():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Number of clock seconds occurring during one SI second (used if TIME_SYSTEM is SCLK).
 */
SCLK_SEC_PER_SI_SEC():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Creation epoch of the previous message from this originator.
 */
PREVIOUS_MESSAGE_EPOCH():string|null
PREVIOUS_MESSAGE_EPOCH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
PREVIOUS_MESSAGE_EPOCH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Anticipated (or actual) epoch of the next message from this originator.
 */
NEXT_MESSAGE_EPOCH():string|null
NEXT_MESSAGE_EPOCH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
NEXT_MESSAGE_EPOCH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of the earliest data contained in the OCM.
 */
START_TIME():string|null
START_TIME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
START_TIME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time of the latest data contained in the OCM.
 */
STOP_TIME():string|null
STOP_TIME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
STOP_TIME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Span of time that the OCM covers, measured in days.
 */
TIME_SPAN():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Difference (TAI - UTC) in seconds at EPOCH_TZERO.
 */
TAIMUTC_AT_TZERO():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Epoch of next leap second.
 */
NEXT_LEAP_EPOCH():string|null
NEXT_LEAP_EPOCH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
NEXT_LEAP_EPOCH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Difference (TAI - UTC) in seconds at NEXT_LEAP_EPOCH.
 */
NEXT_LEAP_TAIMUTC():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Difference (UT1 - UTC) in seconds at EPOCH_TZERO.
 */
UT1MUTC_AT_TZERO():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Source and version of Earth Orientation Parameters used.
 */
EOP_SOURCE():string|null
EOP_SOURCE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
EOP_SOURCE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Method used to select or interpolate sequential EOP data.
 */
INTERP_METHOD_EOP():string|null
INTERP_METHOD_EOP(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
INTERP_METHOD_EOP(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source and version of celestial body ephemeris data used.
 */
CELESTIAL_SOURCE():string|null
CELESTIAL_SOURCE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CELESTIAL_SOURCE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startMetadata(builder:flatbuffers.Builder) {
  builder.startObject(48);
}

static addComment(builder:flatbuffers.Builder, COMMENTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, COMMENTOffset, 0);
}

static createCommentVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCommentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addObjectName(builder:flatbuffers.Builder, OBJECT_NAMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, OBJECT_NAMEOffset, 0);
}

static addInternationalDesignator(builder:flatbuffers.Builder, INTERNATIONAL_DESIGNATOROffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, INTERNATIONAL_DESIGNATOROffset, 0);
}

static addCatalogName(builder:flatbuffers.Builder, CATALOG_NAMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, CATALOG_NAMEOffset, 0);
}

static addObjectDesignator(builder:flatbuffers.Builder, OBJECT_DESIGNATOROffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, OBJECT_DESIGNATOROffset, 0);
}

static addAlternateNames(builder:flatbuffers.Builder, ALTERNATE_NAMESOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, ALTERNATE_NAMESOffset, 0);
}

static createAlternateNamesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAlternateNamesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOriginatorPoc(builder:flatbuffers.Builder, ORIGINATOR_POCOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, ORIGINATOR_POCOffset, 0);
}

static addOriginatorPosition(builder:flatbuffers.Builder, ORIGINATOR_POSITIONOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, ORIGINATOR_POSITIONOffset, 0);
}

static addOriginatorPhone(builder:flatbuffers.Builder, ORIGINATOR_PHONEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, ORIGINATOR_PHONEOffset, 0);
}

static addOriginatorEmail(builder:flatbuffers.Builder, ORIGINATOR_EMAILOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, ORIGINATOR_EMAILOffset, 0);
}

static addOriginatorAddress(builder:flatbuffers.Builder, ORIGINATOR_ADDRESSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, ORIGINATOR_ADDRESSOffset, 0);
}

static addTechOrg(builder:flatbuffers.Builder, TECH_ORGOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, TECH_ORGOffset, 0);
}

static addTechPoc(builder:flatbuffers.Builder, TECH_POCOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, TECH_POCOffset, 0);
}

static addTechPosition(builder:flatbuffers.Builder, TECH_POSITIONOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, TECH_POSITIONOffset, 0);
}

static addTechPhone(builder:flatbuffers.Builder, TECH_PHONEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, TECH_PHONEOffset, 0);
}

static addTechEmail(builder:flatbuffers.Builder, TECH_EMAILOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, TECH_EMAILOffset, 0);
}

static addTechAddress(builder:flatbuffers.Builder, TECH_ADDRESSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, TECH_ADDRESSOffset, 0);
}

static addPreviousMessageId(builder:flatbuffers.Builder, PREVIOUS_MESSAGE_IDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, PREVIOUS_MESSAGE_IDOffset, 0);
}

static addNextMessageId(builder:flatbuffers.Builder, NEXT_MESSAGE_IDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(18, NEXT_MESSAGE_IDOffset, 0);
}

static addAdmMsgLink(builder:flatbuffers.Builder, ADM_MSG_LINKOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, ADM_MSG_LINKOffset, 0);
}

static addCdmMsgLink(builder:flatbuffers.Builder, CDM_MSG_LINKOffset:flatbuffers.Offset) {
  builder.addFieldOffset(20, CDM_MSG_LINKOffset, 0);
}

static addPrmMsgLink(builder:flatbuffers.Builder, PRM_MSG_LINKOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, PRM_MSG_LINKOffset, 0);
}

static addRdmMsgLink(builder:flatbuffers.Builder, RDM_MSG_LINKOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, RDM_MSG_LINKOffset, 0);
}

static addTdmMsgLink(builder:flatbuffers.Builder, TDM_MSG_LINKOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, TDM_MSG_LINKOffset, 0);
}

static createTdmMsgLinkVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTdmMsgLinkVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addOperator(builder:flatbuffers.Builder, OPERATOROffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, OPERATOROffset, 0);
}

static addOwner(builder:flatbuffers.Builder, OWNEROffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, OWNEROffset, 0);
}

static addCountry(builder:flatbuffers.Builder, COUNTRYOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, COUNTRYOffset, 0);
}

static addConstellation(builder:flatbuffers.Builder, CONSTELLATIONOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, CONSTELLATIONOffset, 0);
}

static addObjectType(builder:flatbuffers.Builder, OBJECT_TYPEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(28, OBJECT_TYPEOffset, 0);
}

static addTimeSystem(builder:flatbuffers.Builder, TIME_SYSTEMOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, TIME_SYSTEMOffset, 0);
}

static addEpochTzero(builder:flatbuffers.Builder, EPOCH_TZEROOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, EPOCH_TZEROOffset, 0);
}

static addOpsStatus(builder:flatbuffers.Builder, OPS_STATUSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, OPS_STATUSOffset, 0);
}

static addOrbitCategory(builder:flatbuffers.Builder, ORBIT_CATEGORYOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, ORBIT_CATEGORYOffset, 0);
}

static addOcmDataElements(builder:flatbuffers.Builder, OCM_DATA_ELEMENTSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, OCM_DATA_ELEMENTSOffset, 0);
}

static createOcmDataElementsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startOcmDataElementsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSclkOffsetAtEpoch(builder:flatbuffers.Builder, SCLK_OFFSET_AT_EPOCH:number) {
  builder.addFieldFloat64(34, SCLK_OFFSET_AT_EPOCH, 0.0);
}

static addSclkSecPerSiSec(builder:flatbuffers.Builder, SCLK_SEC_PER_SI_SEC:number) {
  builder.addFieldFloat64(35, SCLK_SEC_PER_SI_SEC, 0.0);
}

static addPreviousMessageEpoch(builder:flatbuffers.Builder, PREVIOUS_MESSAGE_EPOCHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, PREVIOUS_MESSAGE_EPOCHOffset, 0);
}

static addNextMessageEpoch(builder:flatbuffers.Builder, NEXT_MESSAGE_EPOCHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, NEXT_MESSAGE_EPOCHOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, START_TIMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, START_TIMEOffset, 0);
}

static addStopTime(builder:flatbuffers.Builder, STOP_TIMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, STOP_TIMEOffset, 0);
}

static addTimeSpan(builder:flatbuffers.Builder, TIME_SPAN:number) {
  builder.addFieldFloat64(40, TIME_SPAN, 0.0);
}

static addTaimutcAtTzero(builder:flatbuffers.Builder, TAIMUTC_AT_TZERO:number) {
  builder.addFieldFloat64(41, TAIMUTC_AT_TZERO, 0.0);
}

static addNextLeapEpoch(builder:flatbuffers.Builder, NEXT_LEAP_EPOCHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, NEXT_LEAP_EPOCHOffset, 0);
}

static addNextLeapTaimutc(builder:flatbuffers.Builder, NEXT_LEAP_TAIMUTC:number) {
  builder.addFieldFloat64(43, NEXT_LEAP_TAIMUTC, 0.0);
}

static addUt1MutcAtTzero(builder:flatbuffers.Builder, UT1MUTC_AT_TZERO:number) {
  builder.addFieldFloat64(44, UT1MUTC_AT_TZERO, 0.0);
}

static addEopSource(builder:flatbuffers.Builder, EOP_SOURCEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, EOP_SOURCEOffset, 0);
}

static addInterpMethodEop(builder:flatbuffers.Builder, INTERP_METHOD_EOPOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, INTERP_METHOD_EOPOffset, 0);
}

static addCelestialSource(builder:flatbuffers.Builder, CELESTIAL_SOURCEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, CELESTIAL_SOURCEOffset, 0);
}

static endMetadata(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMetadata(builder:flatbuffers.Builder, COMMENTOffset:flatbuffers.Offset, OBJECT_NAMEOffset:flatbuffers.Offset, INTERNATIONAL_DESIGNATOROffset:flatbuffers.Offset, CATALOG_NAMEOffset:flatbuffers.Offset, OBJECT_DESIGNATOROffset:flatbuffers.Offset, ALTERNATE_NAMESOffset:flatbuffers.Offset, ORIGINATOR_POCOffset:flatbuffers.Offset, ORIGINATOR_POSITIONOffset:flatbuffers.Offset, ORIGINATOR_PHONEOffset:flatbuffers.Offset, ORIGINATOR_EMAILOffset:flatbuffers.Offset, ORIGINATOR_ADDRESSOffset:flatbuffers.Offset, TECH_ORGOffset:flatbuffers.Offset, TECH_POCOffset:flatbuffers.Offset, TECH_POSITIONOffset:flatbuffers.Offset, TECH_PHONEOffset:flatbuffers.Offset, TECH_EMAILOffset:flatbuffers.Offset, TECH_ADDRESSOffset:flatbuffers.Offset, PREVIOUS_MESSAGE_IDOffset:flatbuffers.Offset, NEXT_MESSAGE_IDOffset:flatbuffers.Offset, ADM_MSG_LINKOffset:flatbuffers.Offset, CDM_MSG_LINKOffset:flatbuffers.Offset, PRM_MSG_LINKOffset:flatbuffers.Offset, RDM_MSG_LINKOffset:flatbuffers.Offset, TDM_MSG_LINKOffset:flatbuffers.Offset, OPERATOROffset:flatbuffers.Offset, OWNEROffset:flatbuffers.Offset, COUNTRYOffset:flatbuffers.Offset, CONSTELLATIONOffset:flatbuffers.Offset, OBJECT_TYPEOffset:flatbuffers.Offset, TIME_SYSTEMOffset:flatbuffers.Offset, EPOCH_TZEROOffset:flatbuffers.Offset, OPS_STATUSOffset:flatbuffers.Offset, ORBIT_CATEGORYOffset:flatbuffers.Offset, OCM_DATA_ELEMENTSOffset:flatbuffers.Offset, SCLK_OFFSET_AT_EPOCH:number, SCLK_SEC_PER_SI_SEC:number, PREVIOUS_MESSAGE_EPOCHOffset:flatbuffers.Offset, NEXT_MESSAGE_EPOCHOffset:flatbuffers.Offset, START_TIMEOffset:flatbuffers.Offset, STOP_TIMEOffset:flatbuffers.Offset, TIME_SPAN:number, TAIMUTC_AT_TZERO:number, NEXT_LEAP_EPOCHOffset:flatbuffers.Offset, NEXT_LEAP_TAIMUTC:number, UT1MUTC_AT_TZERO:number, EOP_SOURCEOffset:flatbuffers.Offset, INTERP_METHOD_EOPOffset:flatbuffers.Offset, CELESTIAL_SOURCEOffset:flatbuffers.Offset):flatbuffers.Offset {
  Metadata.startMetadata(builder);
  Metadata.addComment(builder, COMMENTOffset);
  Metadata.addObjectName(builder, OBJECT_NAMEOffset);
  Metadata.addInternationalDesignator(builder, INTERNATIONAL_DESIGNATOROffset);
  Metadata.addCatalogName(builder, CATALOG_NAMEOffset);
  Metadata.addObjectDesignator(builder, OBJECT_DESIGNATOROffset);
  Metadata.addAlternateNames(builder, ALTERNATE_NAMESOffset);
  Metadata.addOriginatorPoc(builder, ORIGINATOR_POCOffset);
  Metadata.addOriginatorPosition(builder, ORIGINATOR_POSITIONOffset);
  Metadata.addOriginatorPhone(builder, ORIGINATOR_PHONEOffset);
  Metadata.addOriginatorEmail(builder, ORIGINATOR_EMAILOffset);
  Metadata.addOriginatorAddress(builder, ORIGINATOR_ADDRESSOffset);
  Metadata.addTechOrg(builder, TECH_ORGOffset);
  Metadata.addTechPoc(builder, TECH_POCOffset);
  Metadata.addTechPosition(builder, TECH_POSITIONOffset);
  Metadata.addTechPhone(builder, TECH_PHONEOffset);
  Metadata.addTechEmail(builder, TECH_EMAILOffset);
  Metadata.addTechAddress(builder, TECH_ADDRESSOffset);
  Metadata.addPreviousMessageId(builder, PREVIOUS_MESSAGE_IDOffset);
  Metadata.addNextMessageId(builder, NEXT_MESSAGE_IDOffset);
  Metadata.addAdmMsgLink(builder, ADM_MSG_LINKOffset);
  Metadata.addCdmMsgLink(builder, CDM_MSG_LINKOffset);
  Metadata.addPrmMsgLink(builder, PRM_MSG_LINKOffset);
  Metadata.addRdmMsgLink(builder, RDM_MSG_LINKOffset);
  Metadata.addTdmMsgLink(builder, TDM_MSG_LINKOffset);
  Metadata.addOperator(builder, OPERATOROffset);
  Metadata.addOwner(builder, OWNEROffset);
  Metadata.addCountry(builder, COUNTRYOffset);
  Metadata.addConstellation(builder, CONSTELLATIONOffset);
  Metadata.addObjectType(builder, OBJECT_TYPEOffset);
  Metadata.addTimeSystem(builder, TIME_SYSTEMOffset);
  Metadata.addEpochTzero(builder, EPOCH_TZEROOffset);
  Metadata.addOpsStatus(builder, OPS_STATUSOffset);
  Metadata.addOrbitCategory(builder, ORBIT_CATEGORYOffset);
  Metadata.addOcmDataElements(builder, OCM_DATA_ELEMENTSOffset);
  Metadata.addSclkOffsetAtEpoch(builder, SCLK_OFFSET_AT_EPOCH);
  Metadata.addSclkSecPerSiSec(builder, SCLK_SEC_PER_SI_SEC);
  Metadata.addPreviousMessageEpoch(builder, PREVIOUS_MESSAGE_EPOCHOffset);
  Metadata.addNextMessageEpoch(builder, NEXT_MESSAGE_EPOCHOffset);
  Metadata.addStartTime(builder, START_TIMEOffset);
  Metadata.addStopTime(builder, STOP_TIMEOffset);
  Metadata.addTimeSpan(builder, TIME_SPAN);
  Metadata.addTaimutcAtTzero(builder, TAIMUTC_AT_TZERO);
  Metadata.addNextLeapEpoch(builder, NEXT_LEAP_EPOCHOffset);
  Metadata.addNextLeapTaimutc(builder, NEXT_LEAP_TAIMUTC);
  Metadata.addUt1MutcAtTzero(builder, UT1MUTC_AT_TZERO);
  Metadata.addEopSource(builder, EOP_SOURCEOffset);
  Metadata.addInterpMethodEop(builder, INTERP_METHOD_EOPOffset);
  Metadata.addCelestialSource(builder, CELESTIAL_SOURCEOffset);
  return Metadata.endMetadata(builder);
}

unpack(): MetadataT {
  return new MetadataT(
    this.bb!.createScalarList<string>(this.COMMENT.bind(this), this.commentLength()),
    this.OBJECT_NAME(),
    this.INTERNATIONAL_DESIGNATOR(),
    this.CATALOG_NAME(),
    this.OBJECT_DESIGNATOR(),
    this.bb!.createScalarList<string>(this.ALTERNATE_NAMES.bind(this), this.alternateNamesLength()),
    this.ORIGINATOR_POC(),
    this.ORIGINATOR_POSITION(),
    this.ORIGINATOR_PHONE(),
    this.ORIGINATOR_EMAIL(),
    this.ORIGINATOR_ADDRESS(),
    this.TECH_ORG(),
    this.TECH_POC(),
    this.TECH_POSITION(),
    this.TECH_PHONE(),
    this.TECH_EMAIL(),
    this.TECH_ADDRESS(),
    this.PREVIOUS_MESSAGE_ID(),
    this.NEXT_MESSAGE_ID(),
    this.ADM_MSG_LINK(),
    this.CDM_MSG_LINK(),
    this.PRM_MSG_LINK(),
    this.RDM_MSG_LINK(),
    this.bb!.createScalarList<string>(this.TDM_MSG_LINK.bind(this), this.tdmMsgLinkLength()),
    this.OPERATOR(),
    this.OWNER(),
    this.COUNTRY(),
    this.CONSTELLATION(),
    this.OBJECT_TYPE(),
    this.TIME_SYSTEM(),
    this.EPOCH_TZERO(),
    this.OPS_STATUS(),
    this.ORBIT_CATEGORY(),
    this.bb!.createScalarList<string>(this.OCM_DATA_ELEMENTS.bind(this), this.ocmDataElementsLength()),
    this.SCLK_OFFSET_AT_EPOCH(),
    this.SCLK_SEC_PER_SI_SEC(),
    this.PREVIOUS_MESSAGE_EPOCH(),
    this.NEXT_MESSAGE_EPOCH(),
    this.START_TIME(),
    this.STOP_TIME(),
    this.TIME_SPAN(),
    this.TAIMUTC_AT_TZERO(),
    this.NEXT_LEAP_EPOCH(),
    this.NEXT_LEAP_TAIMUTC(),
    this.UT1MUTC_AT_TZERO(),
    this.EOP_SOURCE(),
    this.INTERP_METHOD_EOP(),
    this.CELESTIAL_SOURCE()
  );
}


unpackTo(_o: MetadataT): void {
  _o.COMMENT = this.bb!.createScalarList<string>(this.COMMENT.bind(this), this.commentLength());
  _o.OBJECT_NAME = this.OBJECT_NAME();
  _o.INTERNATIONAL_DESIGNATOR = this.INTERNATIONAL_DESIGNATOR();
  _o.CATALOG_NAME = this.CATALOG_NAME();
  _o.OBJECT_DESIGNATOR = this.OBJECT_DESIGNATOR();
  _o.ALTERNATE_NAMES = this.bb!.createScalarList<string>(this.ALTERNATE_NAMES.bind(this), this.alternateNamesLength());
  _o.ORIGINATOR_POC = this.ORIGINATOR_POC();
  _o.ORIGINATOR_POSITION = this.ORIGINATOR_POSITION();
  _o.ORIGINATOR_PHONE = this.ORIGINATOR_PHONE();
  _o.ORIGINATOR_EMAIL = this.ORIGINATOR_EMAIL();
  _o.ORIGINATOR_ADDRESS = this.ORIGINATOR_ADDRESS();
  _o.TECH_ORG = this.TECH_ORG();
  _o.TECH_POC = this.TECH_POC();
  _o.TECH_POSITION = this.TECH_POSITION();
  _o.TECH_PHONE = this.TECH_PHONE();
  _o.TECH_EMAIL = this.TECH_EMAIL();
  _o.TECH_ADDRESS = this.TECH_ADDRESS();
  _o.PREVIOUS_MESSAGE_ID = this.PREVIOUS_MESSAGE_ID();
  _o.NEXT_MESSAGE_ID = this.NEXT_MESSAGE_ID();
  _o.ADM_MSG_LINK = this.ADM_MSG_LINK();
  _o.CDM_MSG_LINK = this.CDM_MSG_LINK();
  _o.PRM_MSG_LINK = this.PRM_MSG_LINK();
  _o.RDM_MSG_LINK = this.RDM_MSG_LINK();
  _o.TDM_MSG_LINK = this.bb!.createScalarList<string>(this.TDM_MSG_LINK.bind(this), this.tdmMsgLinkLength());
  _o.OPERATOR = this.OPERATOR();
  _o.OWNER = this.OWNER();
  _o.COUNTRY = this.COUNTRY();
  _o.CONSTELLATION = this.CONSTELLATION();
  _o.OBJECT_TYPE = this.OBJECT_TYPE();
  _o.TIME_SYSTEM = this.TIME_SYSTEM();
  _o.EPOCH_TZERO = this.EPOCH_TZERO();
  _o.OPS_STATUS = this.OPS_STATUS();
  _o.ORBIT_CATEGORY = this.ORBIT_CATEGORY();
  _o.OCM_DATA_ELEMENTS = this.bb!.createScalarList<string>(this.OCM_DATA_ELEMENTS.bind(this), this.ocmDataElementsLength());
  _o.SCLK_OFFSET_AT_EPOCH = this.SCLK_OFFSET_AT_EPOCH();
  _o.SCLK_SEC_PER_SI_SEC = this.SCLK_SEC_PER_SI_SEC();
  _o.PREVIOUS_MESSAGE_EPOCH = this.PREVIOUS_MESSAGE_EPOCH();
  _o.NEXT_MESSAGE_EPOCH = this.NEXT_MESSAGE_EPOCH();
  _o.START_TIME = this.START_TIME();
  _o.STOP_TIME = this.STOP_TIME();
  _o.TIME_SPAN = this.TIME_SPAN();
  _o.TAIMUTC_AT_TZERO = this.TAIMUTC_AT_TZERO();
  _o.NEXT_LEAP_EPOCH = this.NEXT_LEAP_EPOCH();
  _o.NEXT_LEAP_TAIMUTC = this.NEXT_LEAP_TAIMUTC();
  _o.UT1MUTC_AT_TZERO = this.UT1MUTC_AT_TZERO();
  _o.EOP_SOURCE = this.EOP_SOURCE();
  _o.INTERP_METHOD_EOP = this.INTERP_METHOD_EOP();
  _o.CELESTIAL_SOURCE = this.CELESTIAL_SOURCE();
}
}

export class MetadataT implements flatbuffers.IGeneratedObject {
constructor(
  public COMMENT: (string)[] = [],
  public OBJECT_NAME: string|Uint8Array|null = null,
  public INTERNATIONAL_DESIGNATOR: string|Uint8Array|null = null,
  public CATALOG_NAME: string|Uint8Array|null = null,
  public OBJECT_DESIGNATOR: string|Uint8Array|null = null,
  public ALTERNATE_NAMES: (string)[] = [],
  public ORIGINATOR_POC: string|Uint8Array|null = null,
  public ORIGINATOR_POSITION: string|Uint8Array|null = null,
  public ORIGINATOR_PHONE: string|Uint8Array|null = null,
  public ORIGINATOR_EMAIL: string|Uint8Array|null = null,
  public ORIGINATOR_ADDRESS: string|Uint8Array|null = null,
  public TECH_ORG: string|Uint8Array|null = null,
  public TECH_POC: string|Uint8Array|null = null,
  public TECH_POSITION: string|Uint8Array|null = null,
  public TECH_PHONE: string|Uint8Array|null = null,
  public TECH_EMAIL: string|Uint8Array|null = null,
  public TECH_ADDRESS: string|Uint8Array|null = null,
  public PREVIOUS_MESSAGE_ID: string|Uint8Array|null = null,
  public NEXT_MESSAGE_ID: string|Uint8Array|null = null,
  public ADM_MSG_LINK: string|Uint8Array|null = null,
  public CDM_MSG_LINK: string|Uint8Array|null = null,
  public PRM_MSG_LINK: string|Uint8Array|null = null,
  public RDM_MSG_LINK: string|Uint8Array|null = null,
  public TDM_MSG_LINK: (string)[] = [],
  public OPERATOR: string|Uint8Array|null = null,
  public OWNER: string|Uint8Array|null = null,
  public COUNTRY: string|Uint8Array|null = null,
  public CONSTELLATION: string|Uint8Array|null = null,
  public OBJECT_TYPE: string|Uint8Array|null = null,
  public TIME_SYSTEM: string|Uint8Array|null = null,
  public EPOCH_TZERO: string|Uint8Array|null = null,
  public OPS_STATUS: string|Uint8Array|null = null,
  public ORBIT_CATEGORY: string|Uint8Array|null = null,
  public OCM_DATA_ELEMENTS: (string)[] = [],
  public SCLK_OFFSET_AT_EPOCH: number = 0.0,
  public SCLK_SEC_PER_SI_SEC: number = 0.0,
  public PREVIOUS_MESSAGE_EPOCH: string|Uint8Array|null = null,
  public NEXT_MESSAGE_EPOCH: string|Uint8Array|null = null,
  public START_TIME: string|Uint8Array|null = null,
  public STOP_TIME: string|Uint8Array|null = null,
  public TIME_SPAN: number = 0.0,
  public TAIMUTC_AT_TZERO: number = 0.0,
  public NEXT_LEAP_EPOCH: string|Uint8Array|null = null,
  public NEXT_LEAP_TAIMUTC: number = 0.0,
  public UT1MUTC_AT_TZERO: number = 0.0,
  public EOP_SOURCE: string|Uint8Array|null = null,
  public INTERP_METHOD_EOP: string|Uint8Array|null = null,
  public CELESTIAL_SOURCE: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const COMMENT = Metadata.createCommentVector(builder, builder.createObjectOffsetList(this.COMMENT));
  const OBJECT_NAME = (this.OBJECT_NAME !== null ? builder.createString(this.OBJECT_NAME!) : 0);
  const INTERNATIONAL_DESIGNATOR = (this.INTERNATIONAL_DESIGNATOR !== null ? builder.createString(this.INTERNATIONAL_DESIGNATOR!) : 0);
  const CATALOG_NAME = (this.CATALOG_NAME !== null ? builder.createString(this.CATALOG_NAME!) : 0);
  const OBJECT_DESIGNATOR = (this.OBJECT_DESIGNATOR !== null ? builder.createString(this.OBJECT_DESIGNATOR!) : 0);
  const ALTERNATE_NAMES = Metadata.createAlternateNamesVector(builder, builder.createObjectOffsetList(this.ALTERNATE_NAMES));
  const ORIGINATOR_POC = (this.ORIGINATOR_POC !== null ? builder.createString(this.ORIGINATOR_POC!) : 0);
  const ORIGINATOR_POSITION = (this.ORIGINATOR_POSITION !== null ? builder.createString(this.ORIGINATOR_POSITION!) : 0);
  const ORIGINATOR_PHONE = (this.ORIGINATOR_PHONE !== null ? builder.createString(this.ORIGINATOR_PHONE!) : 0);
  const ORIGINATOR_EMAIL = (this.ORIGINATOR_EMAIL !== null ? builder.createString(this.ORIGINATOR_EMAIL!) : 0);
  const ORIGINATOR_ADDRESS = (this.ORIGINATOR_ADDRESS !== null ? builder.createString(this.ORIGINATOR_ADDRESS!) : 0);
  const TECH_ORG = (this.TECH_ORG !== null ? builder.createString(this.TECH_ORG!) : 0);
  const TECH_POC = (this.TECH_POC !== null ? builder.createString(this.TECH_POC!) : 0);
  const TECH_POSITION = (this.TECH_POSITION !== null ? builder.createString(this.TECH_POSITION!) : 0);
  const TECH_PHONE = (this.TECH_PHONE !== null ? builder.createString(this.TECH_PHONE!) : 0);
  const TECH_EMAIL = (this.TECH_EMAIL !== null ? builder.createString(this.TECH_EMAIL!) : 0);
  const TECH_ADDRESS = (this.TECH_ADDRESS !== null ? builder.createString(this.TECH_ADDRESS!) : 0);
  const PREVIOUS_MESSAGE_ID = (this.PREVIOUS_MESSAGE_ID !== null ? builder.createString(this.PREVIOUS_MESSAGE_ID!) : 0);
  const NEXT_MESSAGE_ID = (this.NEXT_MESSAGE_ID !== null ? builder.createString(this.NEXT_MESSAGE_ID!) : 0);
  const ADM_MSG_LINK = (this.ADM_MSG_LINK !== null ? builder.createString(this.ADM_MSG_LINK!) : 0);
  const CDM_MSG_LINK = (this.CDM_MSG_LINK !== null ? builder.createString(this.CDM_MSG_LINK!) : 0);
  const PRM_MSG_LINK = (this.PRM_MSG_LINK !== null ? builder.createString(this.PRM_MSG_LINK!) : 0);
  const RDM_MSG_LINK = (this.RDM_MSG_LINK !== null ? builder.createString(this.RDM_MSG_LINK!) : 0);
  const TDM_MSG_LINK = Metadata.createTdmMsgLinkVector(builder, builder.createObjectOffsetList(this.TDM_MSG_LINK));
  const OPERATOR = (this.OPERATOR !== null ? builder.createString(this.OPERATOR!) : 0);
  const OWNER = (this.OWNER !== null ? builder.createString(this.OWNER!) : 0);
  const COUNTRY = (this.COUNTRY !== null ? builder.createString(this.COUNTRY!) : 0);
  const CONSTELLATION = (this.CONSTELLATION !== null ? builder.createString(this.CONSTELLATION!) : 0);
  const OBJECT_TYPE = (this.OBJECT_TYPE !== null ? builder.createString(this.OBJECT_TYPE!) : 0);
  const TIME_SYSTEM = (this.TIME_SYSTEM !== null ? builder.createString(this.TIME_SYSTEM!) : 0);
  const EPOCH_TZERO = (this.EPOCH_TZERO !== null ? builder.createString(this.EPOCH_TZERO!) : 0);
  const OPS_STATUS = (this.OPS_STATUS !== null ? builder.createString(this.OPS_STATUS!) : 0);
  const ORBIT_CATEGORY = (this.ORBIT_CATEGORY !== null ? builder.createString(this.ORBIT_CATEGORY!) : 0);
  const OCM_DATA_ELEMENTS = Metadata.createOcmDataElementsVector(builder, builder.createObjectOffsetList(this.OCM_DATA_ELEMENTS));
  const PREVIOUS_MESSAGE_EPOCH = (this.PREVIOUS_MESSAGE_EPOCH !== null ? builder.createString(this.PREVIOUS_MESSAGE_EPOCH!) : 0);
  const NEXT_MESSAGE_EPOCH = (this.NEXT_MESSAGE_EPOCH !== null ? builder.createString(this.NEXT_MESSAGE_EPOCH!) : 0);
  const START_TIME = (this.START_TIME !== null ? builder.createString(this.START_TIME!) : 0);
  const STOP_TIME = (this.STOP_TIME !== null ? builder.createString(this.STOP_TIME!) : 0);
  const NEXT_LEAP_EPOCH = (this.NEXT_LEAP_EPOCH !== null ? builder.createString(this.NEXT_LEAP_EPOCH!) : 0);
  const EOP_SOURCE = (this.EOP_SOURCE !== null ? builder.createString(this.EOP_SOURCE!) : 0);
  const INTERP_METHOD_EOP = (this.INTERP_METHOD_EOP !== null ? builder.createString(this.INTERP_METHOD_EOP!) : 0);
  const CELESTIAL_SOURCE = (this.CELESTIAL_SOURCE !== null ? builder.createString(this.CELESTIAL_SOURCE!) : 0);

  return Metadata.createMetadata(builder,
    COMMENT,
    OBJECT_NAME,
    INTERNATIONAL_DESIGNATOR,
    CATALOG_NAME,
    OBJECT_DESIGNATOR,
    ALTERNATE_NAMES,
    ORIGINATOR_POC,
    ORIGINATOR_POSITION,
    ORIGINATOR_PHONE,
    ORIGINATOR_EMAIL,
    ORIGINATOR_ADDRESS,
    TECH_ORG,
    TECH_POC,
    TECH_POSITION,
    TECH_PHONE,
    TECH_EMAIL,
    TECH_ADDRESS,
    PREVIOUS_MESSAGE_ID,
    NEXT_MESSAGE_ID,
    ADM_MSG_LINK,
    CDM_MSG_LINK,
    PRM_MSG_LINK,
    RDM_MSG_LINK,
    TDM_MSG_LINK,
    OPERATOR,
    OWNER,
    COUNTRY,
    CONSTELLATION,
    OBJECT_TYPE,
    TIME_SYSTEM,
    EPOCH_TZERO,
    OPS_STATUS,
    ORBIT_CATEGORY,
    OCM_DATA_ELEMENTS,
    this.SCLK_OFFSET_AT_EPOCH,
    this.SCLK_SEC_PER_SI_SEC,
    PREVIOUS_MESSAGE_EPOCH,
    NEXT_MESSAGE_EPOCH,
    START_TIME,
    STOP_TIME,
    this.TIME_SPAN,
    this.TAIMUTC_AT_TZERO,
    NEXT_LEAP_EPOCH,
    this.NEXT_LEAP_TAIMUTC,
    this.UT1MUTC_AT_TZERO,
    EOP_SOURCE,
    INTERP_METHOD_EOP,
    CELESTIAL_SOURCE
  );
}
}
