// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SpacecraftFrame } from './SpacecraftFrame.js';


export class SpacecraftFrameWrapper implements flatbuffers.IUnpackableObject<SpacecraftFrameWrapperT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SpacecraftFrameWrapper {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSpacecraftFrameWrapper(bb:flatbuffers.ByteBuffer, obj?:SpacecraftFrameWrapper):SpacecraftFrameWrapper {
  return (obj || new SpacecraftFrameWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSpacecraftFrameWrapper(bb:flatbuffers.ByteBuffer, obj?:SpacecraftFrameWrapper):SpacecraftFrameWrapper {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SpacecraftFrameWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

frame():SpacecraftFrame {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SpacecraftFrame.ACC_i;
}

static startSpacecraftFrameWrapper(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFrame(builder:flatbuffers.Builder, frame:SpacecraftFrame) {
  builder.addFieldInt8(0, frame, SpacecraftFrame.ACC_i);
}

static endSpacecraftFrameWrapper(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSpacecraftFrameWrapper(builder:flatbuffers.Builder, frame:SpacecraftFrame):flatbuffers.Offset {
  SpacecraftFrameWrapper.startSpacecraftFrameWrapper(builder);
  SpacecraftFrameWrapper.addFrame(builder, frame);
  return SpacecraftFrameWrapper.endSpacecraftFrameWrapper(builder);
}

unpack(): SpacecraftFrameWrapperT {
  return new SpacecraftFrameWrapperT(
    this.frame()
  );
}


unpackTo(_o: SpacecraftFrameWrapperT): void {
  _o.frame = this.frame();
}
}

export class SpacecraftFrameWrapperT implements flatbuffers.IGeneratedObject {
constructor(
  public frame: SpacecraftFrame = SpacecraftFrame.ACC_i
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SpacecraftFrameWrapper.createSpacecraftFrameWrapper(builder,
    this.frame
  );
}
}
