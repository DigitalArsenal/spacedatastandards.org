// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { refFrame } from './ref-frame.js';


/**
 * Tracking Data Message
 */
export class TDM implements flatbuffers.IUnpackableObject<TDMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TDM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTDM(bb:flatbuffers.ByteBuffer, obj?:TDM):TDM {
  return (obj || new TDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTDM(bb:flatbuffers.ByteBuffer, obj?:TDM):TDM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$TDM');
}

/**
 * Unique identifier for the observation OBSERVER -  [Specific CCSDS Document]
 */
observerId():string|null
observerId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
observerId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Cartesian X coordinate of the OBSERVER location in chosen reference frame
 */
observerX():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y coordinate of the OBSERVER location in chosen reference frame 
 */
observerY():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z coordinate of the OBSERVER location in chosen reference frame 
 */
observerZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian X coordinate of the OBSERVER velocity in chosen reference frame
 */
observerVx():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y coordinate of the OBSERVER velocity in chosen reference frame 
 */
observerVy():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z coordinate of the OBSERVER velocity in chosen reference frame 
 */
observerVz():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Reference frame used for OBSERVER location Cartesian coordinates (e.g., ECEF, ECI)
 */
observerPositionReferenceFrame():refFrame {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : refFrame.ECEF;
}

/**
 * Reference frame used for obs location Cartesian coordinates (e.g., ECEF, ECI)
 */
obsReferenceFrame():refFrame {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : refFrame.ECEF;
}

/**
 * Epoch time or observation time, in ISO 8601 UTC format -  CCSDS 503.0-B-1
 */
epoch():string|null
epoch(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
epoch(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * TDM version number -  CCSDS 503.0-B-1, Page D-9
 */
ccsdsTdmVers():string|null
ccsdsTdmVers(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ccsdsTdmVers(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Comments regarding TDM -  various sections, e.g., Page D-9
 */
comment(index: number):string
comment(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
comment(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

commentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Date of TDM creation -  CCSDS 503.0-B-1, Page D-9
 */
creationDate():string|null
creationDate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
creationDate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originator of the TDM -  CCSDS 503.0-B-1, Page D-9
 */
originator():string|null
originator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Start of metadata section -  CCSDS 503.0-B-1, Page D-9
 */
metaStart():string|null
metaStart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
metaStart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time system used -  CCSDS 503.0-B-1, Page D-9
 */
timeSystem():string|null
timeSystem(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
timeSystem(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Start time of the data -  CCSDS 503.0-B-1, Page D-9
 */
startTime():string|null
startTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
startTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Stop time of the data -  CCSDS 503.0-B-1, Page D-9
 */
stopTime():string|null
stopTime(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
stopTime(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * First participant in the TDM -  CCSDS 503.0-B-1, Page D-9
 */
participant1():string|null
participant1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
participant1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Second participant in the TDM -  CCSDS 503.0-B-1, Page D-9
 */
participant2():string|null
participant2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
participant2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Third participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
 */
participant3():string|null
participant3(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
participant3(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Fourth participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
 */
participant4():string|null
participant4(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
participant4(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Fifth participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9, max participants
 */
participant5():string|null
participant5(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
participant5(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mode of TDM -  CCSDS 503.0-B-1, Page D-9
 */
mode():string|null
mode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * First path in TDM -  CCSDS 503.0-B-1, Page D-9
 */
path1():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

/**
 * Second path in TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
 */
path2():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

/**
 * Transmit band -  CCSDS 503.0-B-1, Page D-9
 */
transmitBand():string|null
transmitBand(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transmitBand(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Receive band -  CCSDS 503.0-B-1, Page D-9
 */
receiveBand():string|null
receiveBand(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
receiveBand(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Integration interval -  CCSDS 503.0-B-1, Page D-9
 */
integrationInterval():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Integration reference -  CCSDS 503.0-B-1, Page D-9
 */
integrationRef():string|null
integrationRef(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
integrationRef(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Receive delay for second participant -  CCSDS 503.0-B-1, Page D-9
 */
receiveDelay2():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Receive delay for third participant -  CCSDS 503.0-B-1, Page D-9
 */
receiveDelay3():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Data quality -  CCSDS 503.0-B-1, Page D-9
 */
dataQuality():string|null
dataQuality(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataQuality(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * End of metadata section -  CCSDS 503.0-B-1, Page D-9
 */
metaStop():string|null
metaStop(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
metaStop(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Start of data section -  CCSDS 503.0-B-1, Page D-9
 */
dataStart():string|null
dataStart(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataStart(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Transmit frequency for first participant -  CCSDS 503.0-B-1, Page D-9
 */
transmitFreq1():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Receive frequency -  CCSDS 503.0-B-1, Page D-9
 */
receiveFreq(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

receiveFreqLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

receiveFreqArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * End of data section -  CCSDS 503.0-B-1, Page D-9
 */
dataStop():string|null
dataStop(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
dataStop(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional properties as required by the specific application of the TDM...
 * Reference for time tagging -  CCSDS 503.0-B-1, Page D-10
 */
timetagRef():string|null
timetagRef(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
timetagRef(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of angle data -  CCSDS 503.0-B-1, Page D-12
 * Can be AZEL, RADEC, XEYN, XSYE, or another value with provided ICD
 */
angleType():string|null
angleType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
angleType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * First angle value -  CCSDS 503.0-B-1, Page D-12
 */
angle1(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

angle1Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

angle1Array():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Second angle value -  CCSDS 503.0-B-1, Page D-12
 */
angle2(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

angle2Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

angle2Array():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Uncertainty of first angle -  CCSDS 503.0-B-1
 */
angleUncertainty1():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty of second angle -  CCSDS 503.0-B-1
 */
angleUncertainty2():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change of range -  CCSDS 503.0-B-1
 */
rangeRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in range -  CCSDS 503.0-B-1
 */
rangeUncertainty():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Mode of range data -  CCSDS 503.0-B-1, Page D-10
 */
rangeMode():string|null
rangeMode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
rangeMode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Modulus value for range data -  CCSDS 503.0-B-1, Page D-10
 */
rangeModulus():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * First correction angle -  CCSDS 503.0-B-1, Page D-12
 */
correctionAngle1():number {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Second correction angle -  CCSDS 503.0-B-1, Page D-12
 */
correctionAngle2():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Indicator of corrections applied -  CCSDS 503.0-B-1, Page D-12
 */
correctionsApplied():string|null
correctionsApplied(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
correctionsApplied(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Dry component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
 */
tropoDry(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

tropoDryLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tropoDryArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Wet component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
 */
tropoWet(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

tropoWetLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tropoWetArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Slant total electron content -  CCSDS 503.0-B-1, Page D-13
 */
stec(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

stecLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

stecArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Atmospheric pressure -  CCSDS 503.0-B-1, Page D-14
 */
pressure(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

pressureLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

pressureArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Relative humidity -  CCSDS 503.0-B-1, Page D-14
 */
rhumidity(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

rhumidityLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rhumidityArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Ambient temperature -  CCSDS 503.0-B-1, Page D-14
 */
temperature(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

temperatureLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

temperatureArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Clock bias values -  CCSDS 503.0-B-1, Page D-15
 */
clockBias(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

clockBiasLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

clockBiasArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Clock drift values -  CCSDS 503.0-B-1, Page D-15
 */
clockDrift(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

clockDriftLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

clockDriftArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startTDM(builder:flatbuffers.Builder) {
  builder.startObject(59);
}

static addObserverId(builder:flatbuffers.Builder, observerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, observerIdOffset, 0);
}

static addObserverX(builder:flatbuffers.Builder, observerX:number) {
  builder.addFieldFloat64(1, observerX, 0.0);
}

static addObserverY(builder:flatbuffers.Builder, observerY:number) {
  builder.addFieldFloat64(2, observerY, 0.0);
}

static addObserverZ(builder:flatbuffers.Builder, observerZ:number) {
  builder.addFieldFloat64(3, observerZ, 0.0);
}

static addObserverVx(builder:flatbuffers.Builder, observerVx:number) {
  builder.addFieldFloat64(4, observerVx, 0.0);
}

static addObserverVy(builder:flatbuffers.Builder, observerVy:number) {
  builder.addFieldFloat64(5, observerVy, 0.0);
}

static addObserverVz(builder:flatbuffers.Builder, observerVz:number) {
  builder.addFieldFloat64(6, observerVz, 0.0);
}

static addObserverPositionReferenceFrame(builder:flatbuffers.Builder, observerPositionReferenceFrame:refFrame) {
  builder.addFieldInt8(7, observerPositionReferenceFrame, refFrame.ECEF);
}

static addObsReferenceFrame(builder:flatbuffers.Builder, obsReferenceFrame:refFrame) {
  builder.addFieldInt8(8, obsReferenceFrame, refFrame.ECEF);
}

static addEpoch(builder:flatbuffers.Builder, epochOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, epochOffset, 0);
}

static addCcsdsTdmVers(builder:flatbuffers.Builder, ccsdsTdmVersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, ccsdsTdmVersOffset, 0);
}

static addComment(builder:flatbuffers.Builder, commentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, commentOffset, 0);
}

static createCommentVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCommentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreationDate(builder:flatbuffers.Builder, creationDateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, creationDateOffset, 0);
}

static addOriginator(builder:flatbuffers.Builder, originatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, originatorOffset, 0);
}

static addMetaStart(builder:flatbuffers.Builder, metaStartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, metaStartOffset, 0);
}

static addTimeSystem(builder:flatbuffers.Builder, timeSystemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, timeSystemOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, startTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, startTimeOffset, 0);
}

static addStopTime(builder:flatbuffers.Builder, stopTimeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, stopTimeOffset, 0);
}

static addParticipant1(builder:flatbuffers.Builder, participant1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(18, participant1Offset, 0);
}

static addParticipant2(builder:flatbuffers.Builder, participant2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(19, participant2Offset, 0);
}

static addParticipant3(builder:flatbuffers.Builder, participant3Offset:flatbuffers.Offset) {
  builder.addFieldOffset(20, participant3Offset, 0);
}

static addParticipant4(builder:flatbuffers.Builder, participant4Offset:flatbuffers.Offset) {
  builder.addFieldOffset(21, participant4Offset, 0);
}

static addParticipant5(builder:flatbuffers.Builder, participant5Offset:flatbuffers.Offset) {
  builder.addFieldOffset(22, participant5Offset, 0);
}

static addMode(builder:flatbuffers.Builder, modeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(23, modeOffset, 0);
}

static addPath1(builder:flatbuffers.Builder, path1:number) {
  builder.addFieldInt16(24, path1, 0);
}

static addPath2(builder:flatbuffers.Builder, path2:number) {
  builder.addFieldInt16(25, path2, 0);
}

static addTransmitBand(builder:flatbuffers.Builder, transmitBandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, transmitBandOffset, 0);
}

static addReceiveBand(builder:flatbuffers.Builder, receiveBandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, receiveBandOffset, 0);
}

static addIntegrationInterval(builder:flatbuffers.Builder, integrationInterval:number) {
  builder.addFieldFloat32(28, integrationInterval, 0.0);
}

static addIntegrationRef(builder:flatbuffers.Builder, integrationRefOffset:flatbuffers.Offset) {
  builder.addFieldOffset(29, integrationRefOffset, 0);
}

static addReceiveDelay2(builder:flatbuffers.Builder, receiveDelay2:number) {
  builder.addFieldFloat64(30, receiveDelay2, 0.0);
}

static addReceiveDelay3(builder:flatbuffers.Builder, receiveDelay3:number) {
  builder.addFieldFloat64(31, receiveDelay3, 0.0);
}

static addDataQuality(builder:flatbuffers.Builder, dataQualityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, dataQualityOffset, 0);
}

static addMetaStop(builder:flatbuffers.Builder, metaStopOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, metaStopOffset, 0);
}

static addDataStart(builder:flatbuffers.Builder, dataStartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, dataStartOffset, 0);
}

static addTransmitFreq1(builder:flatbuffers.Builder, transmitFreq1:number) {
  builder.addFieldFloat64(35, transmitFreq1, 0.0);
}

static addReceiveFreq(builder:flatbuffers.Builder, receiveFreqOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, receiveFreqOffset, 0);
}

static createReceiveFreqVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createReceiveFreqVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createReceiveFreqVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startReceiveFreqVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addDataStop(builder:flatbuffers.Builder, dataStopOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, dataStopOffset, 0);
}

static addTimetagRef(builder:flatbuffers.Builder, timetagRefOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, timetagRefOffset, 0);
}

static addAngleType(builder:flatbuffers.Builder, angleTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, angleTypeOffset, 0);
}

static addAngle1(builder:flatbuffers.Builder, angle1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(40, angle1Offset, 0);
}

static createAngle1Vector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createAngle1Vector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createAngle1Vector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startAngle1Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAngle2(builder:flatbuffers.Builder, angle2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(41, angle2Offset, 0);
}

static createAngle2Vector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createAngle2Vector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createAngle2Vector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startAngle2Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAngleUncertainty1(builder:flatbuffers.Builder, angleUncertainty1:number) {
  builder.addFieldFloat32(42, angleUncertainty1, 0.0);
}

static addAngleUncertainty2(builder:flatbuffers.Builder, angleUncertainty2:number) {
  builder.addFieldFloat32(43, angleUncertainty2, 0.0);
}

static addRangeRate(builder:flatbuffers.Builder, rangeRate:number) {
  builder.addFieldFloat64(44, rangeRate, 0.0);
}

static addRangeUncertainty(builder:flatbuffers.Builder, rangeUncertainty:number) {
  builder.addFieldFloat64(45, rangeUncertainty, 0.0);
}

static addRangeMode(builder:flatbuffers.Builder, rangeModeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, rangeModeOffset, 0);
}

static addRangeModulus(builder:flatbuffers.Builder, rangeModulus:number) {
  builder.addFieldFloat64(47, rangeModulus, 0.0);
}

static addCorrectionAngle1(builder:flatbuffers.Builder, correctionAngle1:number) {
  builder.addFieldFloat32(48, correctionAngle1, 0.0);
}

static addCorrectionAngle2(builder:flatbuffers.Builder, correctionAngle2:number) {
  builder.addFieldFloat32(49, correctionAngle2, 0.0);
}

static addCorrectionsApplied(builder:flatbuffers.Builder, correctionsAppliedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, correctionsAppliedOffset, 0);
}

static addTropoDry(builder:flatbuffers.Builder, tropoDryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, tropoDryOffset, 0);
}

static createTropoDryVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createTropoDryVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createTropoDryVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startTropoDryVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addTropoWet(builder:flatbuffers.Builder, tropoWetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, tropoWetOffset, 0);
}

static createTropoWetVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createTropoWetVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createTropoWetVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startTropoWetVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addStec(builder:flatbuffers.Builder, stecOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, stecOffset, 0);
}

static createStecVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createStecVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createStecVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startStecVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addPressure(builder:flatbuffers.Builder, pressureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, pressureOffset, 0);
}

static createPressureVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createPressureVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createPressureVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startPressureVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addRhumidity(builder:flatbuffers.Builder, rhumidityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, rhumidityOffset, 0);
}

static createRhumidityVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createRhumidityVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createRhumidityVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startRhumidityVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addTemperature(builder:flatbuffers.Builder, temperatureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, temperatureOffset, 0);
}

static createTemperatureVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createTemperatureVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createTemperatureVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startTemperatureVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addClockBias(builder:flatbuffers.Builder, clockBiasOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, clockBiasOffset, 0);
}

static createClockBiasVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createClockBiasVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createClockBiasVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startClockBiasVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addClockDrift(builder:flatbuffers.Builder, clockDriftOffset:flatbuffers.Offset) {
  builder.addFieldOffset(58, clockDriftOffset, 0);
}

static createClockDriftVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createClockDriftVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createClockDriftVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startClockDriftVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static endTDM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishTDMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$TDM');
}

static finishSizePrefixedTDMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$TDM', true);
}

static createTDM(builder:flatbuffers.Builder, observerIdOffset:flatbuffers.Offset, observerX:number, observerY:number, observerZ:number, observerVx:number, observerVy:number, observerVz:number, observerPositionReferenceFrame:refFrame, obsReferenceFrame:refFrame, epochOffset:flatbuffers.Offset, ccsdsTdmVersOffset:flatbuffers.Offset, commentOffset:flatbuffers.Offset, creationDateOffset:flatbuffers.Offset, originatorOffset:flatbuffers.Offset, metaStartOffset:flatbuffers.Offset, timeSystemOffset:flatbuffers.Offset, startTimeOffset:flatbuffers.Offset, stopTimeOffset:flatbuffers.Offset, participant1Offset:flatbuffers.Offset, participant2Offset:flatbuffers.Offset, participant3Offset:flatbuffers.Offset, participant4Offset:flatbuffers.Offset, participant5Offset:flatbuffers.Offset, modeOffset:flatbuffers.Offset, path1:number, path2:number, transmitBandOffset:flatbuffers.Offset, receiveBandOffset:flatbuffers.Offset, integrationInterval:number, integrationRefOffset:flatbuffers.Offset, receiveDelay2:number, receiveDelay3:number, dataQualityOffset:flatbuffers.Offset, metaStopOffset:flatbuffers.Offset, dataStartOffset:flatbuffers.Offset, transmitFreq1:number, receiveFreqOffset:flatbuffers.Offset, dataStopOffset:flatbuffers.Offset, timetagRefOffset:flatbuffers.Offset, angleTypeOffset:flatbuffers.Offset, angle1Offset:flatbuffers.Offset, angle2Offset:flatbuffers.Offset, angleUncertainty1:number, angleUncertainty2:number, rangeRate:number, rangeUncertainty:number, rangeModeOffset:flatbuffers.Offset, rangeModulus:number, correctionAngle1:number, correctionAngle2:number, correctionsAppliedOffset:flatbuffers.Offset, tropoDryOffset:flatbuffers.Offset, tropoWetOffset:flatbuffers.Offset, stecOffset:flatbuffers.Offset, pressureOffset:flatbuffers.Offset, rhumidityOffset:flatbuffers.Offset, temperatureOffset:flatbuffers.Offset, clockBiasOffset:flatbuffers.Offset, clockDriftOffset:flatbuffers.Offset):flatbuffers.Offset {
  TDM.startTDM(builder);
  TDM.addObserverId(builder, observerIdOffset);
  TDM.addObserverX(builder, observerX);
  TDM.addObserverY(builder, observerY);
  TDM.addObserverZ(builder, observerZ);
  TDM.addObserverVx(builder, observerVx);
  TDM.addObserverVy(builder, observerVy);
  TDM.addObserverVz(builder, observerVz);
  TDM.addObserverPositionReferenceFrame(builder, observerPositionReferenceFrame);
  TDM.addObsReferenceFrame(builder, obsReferenceFrame);
  TDM.addEpoch(builder, epochOffset);
  TDM.addCcsdsTdmVers(builder, ccsdsTdmVersOffset);
  TDM.addComment(builder, commentOffset);
  TDM.addCreationDate(builder, creationDateOffset);
  TDM.addOriginator(builder, originatorOffset);
  TDM.addMetaStart(builder, metaStartOffset);
  TDM.addTimeSystem(builder, timeSystemOffset);
  TDM.addStartTime(builder, startTimeOffset);
  TDM.addStopTime(builder, stopTimeOffset);
  TDM.addParticipant1(builder, participant1Offset);
  TDM.addParticipant2(builder, participant2Offset);
  TDM.addParticipant3(builder, participant3Offset);
  TDM.addParticipant4(builder, participant4Offset);
  TDM.addParticipant5(builder, participant5Offset);
  TDM.addMode(builder, modeOffset);
  TDM.addPath1(builder, path1);
  TDM.addPath2(builder, path2);
  TDM.addTransmitBand(builder, transmitBandOffset);
  TDM.addReceiveBand(builder, receiveBandOffset);
  TDM.addIntegrationInterval(builder, integrationInterval);
  TDM.addIntegrationRef(builder, integrationRefOffset);
  TDM.addReceiveDelay2(builder, receiveDelay2);
  TDM.addReceiveDelay3(builder, receiveDelay3);
  TDM.addDataQuality(builder, dataQualityOffset);
  TDM.addMetaStop(builder, metaStopOffset);
  TDM.addDataStart(builder, dataStartOffset);
  TDM.addTransmitFreq1(builder, transmitFreq1);
  TDM.addReceiveFreq(builder, receiveFreqOffset);
  TDM.addDataStop(builder, dataStopOffset);
  TDM.addTimetagRef(builder, timetagRefOffset);
  TDM.addAngleType(builder, angleTypeOffset);
  TDM.addAngle1(builder, angle1Offset);
  TDM.addAngle2(builder, angle2Offset);
  TDM.addAngleUncertainty1(builder, angleUncertainty1);
  TDM.addAngleUncertainty2(builder, angleUncertainty2);
  TDM.addRangeRate(builder, rangeRate);
  TDM.addRangeUncertainty(builder, rangeUncertainty);
  TDM.addRangeMode(builder, rangeModeOffset);
  TDM.addRangeModulus(builder, rangeModulus);
  TDM.addCorrectionAngle1(builder, correctionAngle1);
  TDM.addCorrectionAngle2(builder, correctionAngle2);
  TDM.addCorrectionsApplied(builder, correctionsAppliedOffset);
  TDM.addTropoDry(builder, tropoDryOffset);
  TDM.addTropoWet(builder, tropoWetOffset);
  TDM.addStec(builder, stecOffset);
  TDM.addPressure(builder, pressureOffset);
  TDM.addRhumidity(builder, rhumidityOffset);
  TDM.addTemperature(builder, temperatureOffset);
  TDM.addClockBias(builder, clockBiasOffset);
  TDM.addClockDrift(builder, clockDriftOffset);
  return TDM.endTDM(builder);
}

unpack(): TDMT {
  return new TDMT(
    this.observerId(),
    this.observerX(),
    this.observerY(),
    this.observerZ(),
    this.observerVx(),
    this.observerVy(),
    this.observerVz(),
    this.observerPositionReferenceFrame(),
    this.obsReferenceFrame(),
    this.epoch(),
    this.ccsdsTdmVers(),
    this.bb!.createScalarList<string>(this.comment.bind(this), this.commentLength()),
    this.creationDate(),
    this.originator(),
    this.metaStart(),
    this.timeSystem(),
    this.startTime(),
    this.stopTime(),
    this.participant1(),
    this.participant2(),
    this.participant3(),
    this.participant4(),
    this.participant5(),
    this.mode(),
    this.path1(),
    this.path2(),
    this.transmitBand(),
    this.receiveBand(),
    this.integrationInterval(),
    this.integrationRef(),
    this.receiveDelay2(),
    this.receiveDelay3(),
    this.dataQuality(),
    this.metaStop(),
    this.dataStart(),
    this.transmitFreq1(),
    this.bb!.createScalarList<number>(this.receiveFreq.bind(this), this.receiveFreqLength()),
    this.dataStop(),
    this.timetagRef(),
    this.angleType(),
    this.bb!.createScalarList<number>(this.angle1.bind(this), this.angle1Length()),
    this.bb!.createScalarList<number>(this.angle2.bind(this), this.angle2Length()),
    this.angleUncertainty1(),
    this.angleUncertainty2(),
    this.rangeRate(),
    this.rangeUncertainty(),
    this.rangeMode(),
    this.rangeModulus(),
    this.correctionAngle1(),
    this.correctionAngle2(),
    this.correctionsApplied(),
    this.bb!.createScalarList<number>(this.tropoDry.bind(this), this.tropoDryLength()),
    this.bb!.createScalarList<number>(this.tropoWet.bind(this), this.tropoWetLength()),
    this.bb!.createScalarList<number>(this.stec.bind(this), this.stecLength()),
    this.bb!.createScalarList<number>(this.pressure.bind(this), this.pressureLength()),
    this.bb!.createScalarList<number>(this.rhumidity.bind(this), this.rhumidityLength()),
    this.bb!.createScalarList<number>(this.temperature.bind(this), this.temperatureLength()),
    this.bb!.createScalarList<number>(this.clockBias.bind(this), this.clockBiasLength()),
    this.bb!.createScalarList<number>(this.clockDrift.bind(this), this.clockDriftLength())
  );
}


unpackTo(_o: TDMT): void {
  _o.observerId = this.observerId();
  _o.observerX = this.observerX();
  _o.observerY = this.observerY();
  _o.observerZ = this.observerZ();
  _o.observerVx = this.observerVx();
  _o.observerVy = this.observerVy();
  _o.observerVz = this.observerVz();
  _o.observerPositionReferenceFrame = this.observerPositionReferenceFrame();
  _o.obsReferenceFrame = this.obsReferenceFrame();
  _o.epoch = this.epoch();
  _o.ccsdsTdmVers = this.ccsdsTdmVers();
  _o.comment = this.bb!.createScalarList<string>(this.comment.bind(this), this.commentLength());
  _o.creationDate = this.creationDate();
  _o.originator = this.originator();
  _o.metaStart = this.metaStart();
  _o.timeSystem = this.timeSystem();
  _o.startTime = this.startTime();
  _o.stopTime = this.stopTime();
  _o.participant1 = this.participant1();
  _o.participant2 = this.participant2();
  _o.participant3 = this.participant3();
  _o.participant4 = this.participant4();
  _o.participant5 = this.participant5();
  _o.mode = this.mode();
  _o.path1 = this.path1();
  _o.path2 = this.path2();
  _o.transmitBand = this.transmitBand();
  _o.receiveBand = this.receiveBand();
  _o.integrationInterval = this.integrationInterval();
  _o.integrationRef = this.integrationRef();
  _o.receiveDelay2 = this.receiveDelay2();
  _o.receiveDelay3 = this.receiveDelay3();
  _o.dataQuality = this.dataQuality();
  _o.metaStop = this.metaStop();
  _o.dataStart = this.dataStart();
  _o.transmitFreq1 = this.transmitFreq1();
  _o.receiveFreq = this.bb!.createScalarList<number>(this.receiveFreq.bind(this), this.receiveFreqLength());
  _o.dataStop = this.dataStop();
  _o.timetagRef = this.timetagRef();
  _o.angleType = this.angleType();
  _o.angle1 = this.bb!.createScalarList<number>(this.angle1.bind(this), this.angle1Length());
  _o.angle2 = this.bb!.createScalarList<number>(this.angle2.bind(this), this.angle2Length());
  _o.angleUncertainty1 = this.angleUncertainty1();
  _o.angleUncertainty2 = this.angleUncertainty2();
  _o.rangeRate = this.rangeRate();
  _o.rangeUncertainty = this.rangeUncertainty();
  _o.rangeMode = this.rangeMode();
  _o.rangeModulus = this.rangeModulus();
  _o.correctionAngle1 = this.correctionAngle1();
  _o.correctionAngle2 = this.correctionAngle2();
  _o.correctionsApplied = this.correctionsApplied();
  _o.tropoDry = this.bb!.createScalarList<number>(this.tropoDry.bind(this), this.tropoDryLength());
  _o.tropoWet = this.bb!.createScalarList<number>(this.tropoWet.bind(this), this.tropoWetLength());
  _o.stec = this.bb!.createScalarList<number>(this.stec.bind(this), this.stecLength());
  _o.pressure = this.bb!.createScalarList<number>(this.pressure.bind(this), this.pressureLength());
  _o.rhumidity = this.bb!.createScalarList<number>(this.rhumidity.bind(this), this.rhumidityLength());
  _o.temperature = this.bb!.createScalarList<number>(this.temperature.bind(this), this.temperatureLength());
  _o.clockBias = this.bb!.createScalarList<number>(this.clockBias.bind(this), this.clockBiasLength());
  _o.clockDrift = this.bb!.createScalarList<number>(this.clockDrift.bind(this), this.clockDriftLength());
}
}

export class TDMT implements flatbuffers.IGeneratedObject {
constructor(
  public observerId: string|Uint8Array|null = null,
  public observerX: number = 0.0,
  public observerY: number = 0.0,
  public observerZ: number = 0.0,
  public observerVx: number = 0.0,
  public observerVy: number = 0.0,
  public observerVz: number = 0.0,
  public observerPositionReferenceFrame: refFrame = refFrame.ECEF,
  public obsReferenceFrame: refFrame = refFrame.ECEF,
  public epoch: string|Uint8Array|null = null,
  public ccsdsTdmVers: string|Uint8Array|null = null,
  public comment: (string)[] = [],
  public creationDate: string|Uint8Array|null = null,
  public originator: string|Uint8Array|null = null,
  public metaStart: string|Uint8Array|null = null,
  public timeSystem: string|Uint8Array|null = null,
  public startTime: string|Uint8Array|null = null,
  public stopTime: string|Uint8Array|null = null,
  public participant1: string|Uint8Array|null = null,
  public participant2: string|Uint8Array|null = null,
  public participant3: string|Uint8Array|null = null,
  public participant4: string|Uint8Array|null = null,
  public participant5: string|Uint8Array|null = null,
  public mode: string|Uint8Array|null = null,
  public path1: number = 0,
  public path2: number = 0,
  public transmitBand: string|Uint8Array|null = null,
  public receiveBand: string|Uint8Array|null = null,
  public integrationInterval: number = 0.0,
  public integrationRef: string|Uint8Array|null = null,
  public receiveDelay2: number = 0.0,
  public receiveDelay3: number = 0.0,
  public dataQuality: string|Uint8Array|null = null,
  public metaStop: string|Uint8Array|null = null,
  public dataStart: string|Uint8Array|null = null,
  public transmitFreq1: number = 0.0,
  public receiveFreq: (number)[] = [],
  public dataStop: string|Uint8Array|null = null,
  public timetagRef: string|Uint8Array|null = null,
  public angleType: string|Uint8Array|null = null,
  public angle1: (number)[] = [],
  public angle2: (number)[] = [],
  public angleUncertainty1: number = 0.0,
  public angleUncertainty2: number = 0.0,
  public rangeRate: number = 0.0,
  public rangeUncertainty: number = 0.0,
  public rangeMode: string|Uint8Array|null = null,
  public rangeModulus: number = 0.0,
  public correctionAngle1: number = 0.0,
  public correctionAngle2: number = 0.0,
  public correctionsApplied: string|Uint8Array|null = null,
  public tropoDry: (number)[] = [],
  public tropoWet: (number)[] = [],
  public stec: (number)[] = [],
  public pressure: (number)[] = [],
  public rhumidity: (number)[] = [],
  public temperature: (number)[] = [],
  public clockBias: (number)[] = [],
  public clockDrift: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const observerId = (this.observerId !== null ? builder.createString(this.observerId!) : 0);
  const epoch = (this.epoch !== null ? builder.createString(this.epoch!) : 0);
  const ccsdsTdmVers = (this.ccsdsTdmVers !== null ? builder.createString(this.ccsdsTdmVers!) : 0);
  const comment = TDM.createCommentVector(builder, builder.createObjectOffsetList(this.comment));
  const creationDate = (this.creationDate !== null ? builder.createString(this.creationDate!) : 0);
  const originator = (this.originator !== null ? builder.createString(this.originator!) : 0);
  const metaStart = (this.metaStart !== null ? builder.createString(this.metaStart!) : 0);
  const timeSystem = (this.timeSystem !== null ? builder.createString(this.timeSystem!) : 0);
  const startTime = (this.startTime !== null ? builder.createString(this.startTime!) : 0);
  const stopTime = (this.stopTime !== null ? builder.createString(this.stopTime!) : 0);
  const participant1 = (this.participant1 !== null ? builder.createString(this.participant1!) : 0);
  const participant2 = (this.participant2 !== null ? builder.createString(this.participant2!) : 0);
  const participant3 = (this.participant3 !== null ? builder.createString(this.participant3!) : 0);
  const participant4 = (this.participant4 !== null ? builder.createString(this.participant4!) : 0);
  const participant5 = (this.participant5 !== null ? builder.createString(this.participant5!) : 0);
  const mode = (this.mode !== null ? builder.createString(this.mode!) : 0);
  const transmitBand = (this.transmitBand !== null ? builder.createString(this.transmitBand!) : 0);
  const receiveBand = (this.receiveBand !== null ? builder.createString(this.receiveBand!) : 0);
  const integrationRef = (this.integrationRef !== null ? builder.createString(this.integrationRef!) : 0);
  const dataQuality = (this.dataQuality !== null ? builder.createString(this.dataQuality!) : 0);
  const metaStop = (this.metaStop !== null ? builder.createString(this.metaStop!) : 0);
  const dataStart = (this.dataStart !== null ? builder.createString(this.dataStart!) : 0);
  const receiveFreq = TDM.createReceiveFreqVector(builder, this.receiveFreq);
  const dataStop = (this.dataStop !== null ? builder.createString(this.dataStop!) : 0);
  const timetagRef = (this.timetagRef !== null ? builder.createString(this.timetagRef!) : 0);
  const angleType = (this.angleType !== null ? builder.createString(this.angleType!) : 0);
  const angle1 = TDM.createAngle1Vector(builder, this.angle1);
  const angle2 = TDM.createAngle2Vector(builder, this.angle2);
  const rangeMode = (this.rangeMode !== null ? builder.createString(this.rangeMode!) : 0);
  const correctionsApplied = (this.correctionsApplied !== null ? builder.createString(this.correctionsApplied!) : 0);
  const tropoDry = TDM.createTropoDryVector(builder, this.tropoDry);
  const tropoWet = TDM.createTropoWetVector(builder, this.tropoWet);
  const stec = TDM.createStecVector(builder, this.stec);
  const pressure = TDM.createPressureVector(builder, this.pressure);
  const rhumidity = TDM.createRhumidityVector(builder, this.rhumidity);
  const temperature = TDM.createTemperatureVector(builder, this.temperature);
  const clockBias = TDM.createClockBiasVector(builder, this.clockBias);
  const clockDrift = TDM.createClockDriftVector(builder, this.clockDrift);

  return TDM.createTDM(builder,
    observerId,
    this.observerX,
    this.observerY,
    this.observerZ,
    this.observerVx,
    this.observerVy,
    this.observerVz,
    this.observerPositionReferenceFrame,
    this.obsReferenceFrame,
    epoch,
    ccsdsTdmVers,
    comment,
    creationDate,
    originator,
    metaStart,
    timeSystem,
    startTime,
    stopTime,
    participant1,
    participant2,
    participant3,
    participant4,
    participant5,
    mode,
    this.path1,
    this.path2,
    transmitBand,
    receiveBand,
    this.integrationInterval,
    integrationRef,
    this.receiveDelay2,
    this.receiveDelay3,
    dataQuality,
    metaStop,
    dataStart,
    this.transmitFreq1,
    receiveFreq,
    dataStop,
    timetagRef,
    angleType,
    angle1,
    angle2,
    this.angleUncertainty1,
    this.angleUncertainty2,
    this.rangeRate,
    this.rangeUncertainty,
    rangeMode,
    this.rangeModulus,
    this.correctionAngle1,
    this.correctionAngle2,
    correctionsApplied,
    tropoDry,
    tropoWet,
    stec,
    pressure,
    rhumidity,
    temperature,
    clockBias,
    clockDrift
  );
}
}
