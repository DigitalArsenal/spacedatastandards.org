// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { OBSERVERLocationReferenceFrame } from './OBSERVERLocationReferenceFrame.js';


/**
 * Tracking Data Message
 */
export class TDM implements flatbuffers.IUnpackableObject<TDMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TDM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTDM(bb:flatbuffers.ByteBuffer, obj?:TDM):TDM {
  return (obj || new TDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTDM(bb:flatbuffers.ByteBuffer, obj?:TDM):TDM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TDM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$TDM');
}

/**
 * Unique identifier for the observation OBSERVER -  [Specific CCSDS Document]
 */
OBSERVER_ID():string|null
OBSERVER_ID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OBSERVER_ID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Cartesian X coordinate of the OBSERVER location in chosen reference frame
 */
OBSERVER_X():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y coordinate of the OBSERVER location in chosen reference frame 
 */
OBSERVER_Y():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z coordinate of the OBSERVER location in chosen reference frame 
 */
OBSERVER_Z():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian X coordinate of the OBSERVER velocity in chosen reference frame
 */
OBSERVER_VX():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Y coordinate of the OBSERVER velocity in chosen reference frame 
 */
OBSERVER_VY():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Cartesian Z coordinate of the OBSERVER velocity in chosen reference frame 
 */
OBSERVER_VZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Reference frame used for OBSERVER location Cartesian coordinates (e.g., ECEF, ECI)
 */
OBSERVER_POSITION_REFERENCE_FRAME():OBSERVERLocationReferenceFrame {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OBSERVERLocationReferenceFrame.EME2000;
}

/**
 * Reference frame used for obs location Cartesian coordinates (e.g., ECEF, ECI)
 */
OBS_REFERENCE_FRAME():OBSERVERLocationReferenceFrame {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OBSERVERLocationReferenceFrame.EME2000;
}

/**
 * Epoch or observation time -  CCSDS 503.0-B-1
 */
EPOCH():string|null
EPOCH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
EPOCH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * TDM version number -  CCSDS 503.0-B-1, Page D-9
 */
CCSDS_TDM_VERS():string|null
CCSDS_TDM_VERS(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CCSDS_TDM_VERS(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Comments regarding TDM -  various sections, e.g., Page D-9
 */
COMMENT(index: number):string
COMMENT(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
COMMENT(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

commentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * Date of TDM creation -  CCSDS 503.0-B-1, Page D-9
 */
CREATION_DATE():string|null
CREATION_DATE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CREATION_DATE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Originator of the TDM -  CCSDS 503.0-B-1, Page D-9
 */
ORIGINATOR():string|null
ORIGINATOR(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ORIGINATOR(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Start of metadata section -  CCSDS 503.0-B-1, Page D-9
 */
META_START():string|null
META_START(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
META_START(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Time system used -  CCSDS 503.0-B-1, Page D-9
 */
TIME_SYSTEM():string|null
TIME_SYSTEM(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
TIME_SYSTEM(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Start time of the data -  CCSDS 503.0-B-1, Page D-9
 */
START_TIME():string|null
START_TIME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
START_TIME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Stop time of the data -  CCSDS 503.0-B-1, Page D-9
 */
STOP_TIME():string|null
STOP_TIME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
STOP_TIME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * First participant in the TDM -  CCSDS 503.0-B-1, Page D-9
 */
PARTICIPANT_1():string|null
PARTICIPANT_1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
PARTICIPANT_1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Second participant in the TDM -  CCSDS 503.0-B-1, Page D-9
 */
PARTICIPANT_2():string|null
PARTICIPANT_2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
PARTICIPANT_2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Third participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
 */
PARTICIPANT_3():string|null
PARTICIPANT_3(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
PARTICIPANT_3(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mode of TDM -  CCSDS 503.0-B-1, Page D-9
 */
MODE():string|null
MODE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MODE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * First path in TDM -  CCSDS 503.0-B-1, Page D-9
 */
PATH_1():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

/**
 * Second path in TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
 */
PATH_2():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

/**
 * Transmit band -  CCSDS 503.0-B-1, Page D-9
 */
TRANSMIT_BAND():string|null
TRANSMIT_BAND(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
TRANSMIT_BAND(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Receive band -  CCSDS 503.0-B-1, Page D-9
 */
RECEIVE_BAND():string|null
RECEIVE_BAND(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
RECEIVE_BAND(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Integration interval -  CCSDS 503.0-B-1, Page D-9
 */
INTEGRATION_INTERVAL():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Integration reference -  CCSDS 503.0-B-1, Page D-9
 */
INTEGRATION_REF():string|null
INTEGRATION_REF(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
INTEGRATION_REF(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Receive delay for second participant -  CCSDS 503.0-B-1, Page D-9
 */
RECEIVE_DELAY_2():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Receive delay for third participant -  CCSDS 503.0-B-1, Page D-9
 */
RECEIVE_DELAY_3():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Data quality -  CCSDS 503.0-B-1, Page D-9
 */
DATA_QUALITY():string|null
DATA_QUALITY(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
DATA_QUALITY(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * End of metadata section -  CCSDS 503.0-B-1, Page D-9
 */
META_STOP():string|null
META_STOP(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
META_STOP(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Start of data section -  CCSDS 503.0-B-1, Page D-9
 */
DATA_START():string|null
DATA_START(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
DATA_START(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Transmit frequency for first participant -  CCSDS 503.0-B-1, Page D-9
 */
TRANSMIT_FREQ_1():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Receive frequency -  CCSDS 503.0-B-1, Page D-9
 */
RECEIVE_FREQ(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

receiveFreqLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

receiveFreqArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * End of data section -  CCSDS 503.0-B-1, Page D-9
 */
DATA_STOP():string|null
DATA_STOP(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
DATA_STOP(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Additional properties as required by the specific application of the TDM...
 * Reference for time tagging -  CCSDS 503.0-B-1, Page D-10
 */
TIMETAG_REF():string|null
TIMETAG_REF(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
TIMETAG_REF(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of angle data -  CCSDS 503.0-B-1, Page D-12
 * Can be AZEL, RADEC, XEYN, XSYE, or another value with provided ICD
 */
ANGLE_TYPE():string|null
ANGLE_TYPE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ANGLE_TYPE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * First angle value -  CCSDS 503.0-B-1, Page D-12
 */
ANGLE_1(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

angle1Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

angle1Array():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Second angle value -  CCSDS 503.0-B-1, Page D-12
 */
ANGLE_2(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

angle2Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

angle2Array():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Uncertainty of first angle -  CCSDS 503.0-B-1
 */
ANGLE_UNCERTAINTY_1():number {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty of second angle -  CCSDS 503.0-B-1
 */
ANGLE_UNCERTAINTY_2():number {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Rate of change of range -  CCSDS 503.0-B-1
 */
RANGE_RATE():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Uncertainty in range -  CCSDS 503.0-B-1
 */
RANGE_UNCERTAINTY():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Mode of range data -  CCSDS 503.0-B-1, Page D-10
 */
RANGE_MODE():string|null
RANGE_MODE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
RANGE_MODE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Modulus value for range data -  CCSDS 503.0-B-1, Page D-10
 */
RANGE_MODULUS():number {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * First correction angle -  CCSDS 503.0-B-1, Page D-12
 */
CORRECTION_ANGLE_1():number {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Second correction angle -  CCSDS 503.0-B-1, Page D-12
 */
CORRECTION_ANGLE_2():number {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Indicator of corrections applied -  CCSDS 503.0-B-1, Page D-12
 */
CORRECTIONS_APPLIED():string|null
CORRECTIONS_APPLIED(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CORRECTIONS_APPLIED(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Dry component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
 */
TROPO_DRY(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

tropoDryLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tropoDryArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Wet component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
 */
TROPO_WET(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

tropoWetLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

tropoWetArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Slant total electron content -  CCSDS 503.0-B-1, Page D-13
 */
STEC(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

stecLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

stecArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Atmospheric pressure -  CCSDS 503.0-B-1, Page D-14
 */
PRESSURE(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

pressureLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

pressureArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Relative humidity -  CCSDS 503.0-B-1, Page D-14
 */
RHUMIDITY(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

rhumidityLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rhumidityArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Ambient temperature -  CCSDS 503.0-B-1, Page D-14
 */
TEMPERATURE(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

temperatureLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

temperatureArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Clock bias values -  CCSDS 503.0-B-1, Page D-15
 */
CLOCK_BIAS(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

clockBiasLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

clockBiasArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * Clock drift values -  CCSDS 503.0-B-1, Page D-15
 */
CLOCK_DRIFT(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

clockDriftLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

clockDriftArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startTDM(builder:flatbuffers.Builder) {
  builder.startObject(57);
}

static addObserverId(builder:flatbuffers.Builder, OBSERVER_IDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, OBSERVER_IDOffset, 0);
}

static addObserverX(builder:flatbuffers.Builder, OBSERVER_X:number) {
  builder.addFieldFloat64(1, OBSERVER_X, 0.0);
}

static addObserverY(builder:flatbuffers.Builder, OBSERVER_Y:number) {
  builder.addFieldFloat64(2, OBSERVER_Y, 0.0);
}

static addObserverZ(builder:flatbuffers.Builder, OBSERVER_Z:number) {
  builder.addFieldFloat64(3, OBSERVER_Z, 0.0);
}

static addObserverVx(builder:flatbuffers.Builder, OBSERVER_VX:number) {
  builder.addFieldFloat64(4, OBSERVER_VX, 0.0);
}

static addObserverVy(builder:flatbuffers.Builder, OBSERVER_VY:number) {
  builder.addFieldFloat64(5, OBSERVER_VY, 0.0);
}

static addObserverVz(builder:flatbuffers.Builder, OBSERVER_VZ:number) {
  builder.addFieldFloat64(6, OBSERVER_VZ, 0.0);
}

static addObserverPositionReferenceFrame(builder:flatbuffers.Builder, OBSERVER_POSITION_REFERENCE_FRAME:OBSERVERLocationReferenceFrame) {
  builder.addFieldInt8(7, OBSERVER_POSITION_REFERENCE_FRAME, OBSERVERLocationReferenceFrame.EME2000);
}

static addObsReferenceFrame(builder:flatbuffers.Builder, OBS_REFERENCE_FRAME:OBSERVERLocationReferenceFrame) {
  builder.addFieldInt8(8, OBS_REFERENCE_FRAME, OBSERVERLocationReferenceFrame.EME2000);
}

static addEpoch(builder:flatbuffers.Builder, EPOCHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, EPOCHOffset, 0);
}

static addCcsdsTdmVers(builder:flatbuffers.Builder, CCSDS_TDM_VERSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, CCSDS_TDM_VERSOffset, 0);
}

static addComment(builder:flatbuffers.Builder, COMMENTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, COMMENTOffset, 0);
}

static createCommentVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCommentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreationDate(builder:flatbuffers.Builder, CREATION_DATEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, CREATION_DATEOffset, 0);
}

static addOriginator(builder:flatbuffers.Builder, ORIGINATOROffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, ORIGINATOROffset, 0);
}

static addMetaStart(builder:flatbuffers.Builder, META_STARTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, META_STARTOffset, 0);
}

static addTimeSystem(builder:flatbuffers.Builder, TIME_SYSTEMOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, TIME_SYSTEMOffset, 0);
}

static addStartTime(builder:flatbuffers.Builder, START_TIMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, START_TIMEOffset, 0);
}

static addStopTime(builder:flatbuffers.Builder, STOP_TIMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(17, STOP_TIMEOffset, 0);
}

static addParticipant1(builder:flatbuffers.Builder, PARTICIPANT_1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(18, PARTICIPANT_1Offset, 0);
}

static addParticipant2(builder:flatbuffers.Builder, PARTICIPANT_2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(19, PARTICIPANT_2Offset, 0);
}

static addParticipant3(builder:flatbuffers.Builder, PARTICIPANT_3Offset:flatbuffers.Offset) {
  builder.addFieldOffset(20, PARTICIPANT_3Offset, 0);
}

static addMode(builder:flatbuffers.Builder, MODEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, MODEOffset, 0);
}

static addPath1(builder:flatbuffers.Builder, PATH_1:number) {
  builder.addFieldInt16(22, PATH_1, 0);
}

static addPath2(builder:flatbuffers.Builder, PATH_2:number) {
  builder.addFieldInt16(23, PATH_2, 0);
}

static addTransmitBand(builder:flatbuffers.Builder, TRANSMIT_BANDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, TRANSMIT_BANDOffset, 0);
}

static addReceiveBand(builder:flatbuffers.Builder, RECEIVE_BANDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(25, RECEIVE_BANDOffset, 0);
}

static addIntegrationInterval(builder:flatbuffers.Builder, INTEGRATION_INTERVAL:number) {
  builder.addFieldFloat32(26, INTEGRATION_INTERVAL, 0.0);
}

static addIntegrationRef(builder:flatbuffers.Builder, INTEGRATION_REFOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, INTEGRATION_REFOffset, 0);
}

static addReceiveDelay2(builder:flatbuffers.Builder, RECEIVE_DELAY_2:number) {
  builder.addFieldFloat64(28, RECEIVE_DELAY_2, 0.0);
}

static addReceiveDelay3(builder:flatbuffers.Builder, RECEIVE_DELAY_3:number) {
  builder.addFieldFloat64(29, RECEIVE_DELAY_3, 0.0);
}

static addDataQuality(builder:flatbuffers.Builder, DATA_QUALITYOffset:flatbuffers.Offset) {
  builder.addFieldOffset(30, DATA_QUALITYOffset, 0);
}

static addMetaStop(builder:flatbuffers.Builder, META_STOPOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, META_STOPOffset, 0);
}

static addDataStart(builder:flatbuffers.Builder, DATA_STARTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, DATA_STARTOffset, 0);
}

static addTransmitFreq1(builder:flatbuffers.Builder, TRANSMIT_FREQ_1:number) {
  builder.addFieldFloat64(33, TRANSMIT_FREQ_1, 0.0);
}

static addReceiveFreq(builder:flatbuffers.Builder, RECEIVE_FREQOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, RECEIVE_FREQOffset, 0);
}

static createReceiveFreqVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createReceiveFreqVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createReceiveFreqVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startReceiveFreqVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addDataStop(builder:flatbuffers.Builder, DATA_STOPOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, DATA_STOPOffset, 0);
}

static addTimetagRef(builder:flatbuffers.Builder, TIMETAG_REFOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, TIMETAG_REFOffset, 0);
}

static addAngleType(builder:flatbuffers.Builder, ANGLE_TYPEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, ANGLE_TYPEOffset, 0);
}

static addAngle1(builder:flatbuffers.Builder, ANGLE_1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(38, ANGLE_1Offset, 0);
}

static createAngle1Vector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createAngle1Vector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createAngle1Vector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startAngle1Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAngle2(builder:flatbuffers.Builder, ANGLE_2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(39, ANGLE_2Offset, 0);
}

static createAngle2Vector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createAngle2Vector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createAngle2Vector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startAngle2Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAngleUncertainty1(builder:flatbuffers.Builder, ANGLE_UNCERTAINTY_1:number) {
  builder.addFieldFloat32(40, ANGLE_UNCERTAINTY_1, 0.0);
}

static addAngleUncertainty2(builder:flatbuffers.Builder, ANGLE_UNCERTAINTY_2:number) {
  builder.addFieldFloat32(41, ANGLE_UNCERTAINTY_2, 0.0);
}

static addRangeRate(builder:flatbuffers.Builder, RANGE_RATE:number) {
  builder.addFieldFloat64(42, RANGE_RATE, 0.0);
}

static addRangeUncertainty(builder:flatbuffers.Builder, RANGE_UNCERTAINTY:number) {
  builder.addFieldFloat64(43, RANGE_UNCERTAINTY, 0.0);
}

static addRangeMode(builder:flatbuffers.Builder, RANGE_MODEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, RANGE_MODEOffset, 0);
}

static addRangeModulus(builder:flatbuffers.Builder, RANGE_MODULUS:number) {
  builder.addFieldFloat64(45, RANGE_MODULUS, 0.0);
}

static addCorrectionAngle1(builder:flatbuffers.Builder, CORRECTION_ANGLE_1:number) {
  builder.addFieldFloat32(46, CORRECTION_ANGLE_1, 0.0);
}

static addCorrectionAngle2(builder:flatbuffers.Builder, CORRECTION_ANGLE_2:number) {
  builder.addFieldFloat32(47, CORRECTION_ANGLE_2, 0.0);
}

static addCorrectionsApplied(builder:flatbuffers.Builder, CORRECTIONS_APPLIEDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, CORRECTIONS_APPLIEDOffset, 0);
}

static addTropoDry(builder:flatbuffers.Builder, TROPO_DRYOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, TROPO_DRYOffset, 0);
}

static createTropoDryVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createTropoDryVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createTropoDryVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startTropoDryVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addTropoWet(builder:flatbuffers.Builder, TROPO_WETOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, TROPO_WETOffset, 0);
}

static createTropoWetVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createTropoWetVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createTropoWetVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startTropoWetVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addStec(builder:flatbuffers.Builder, STECOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, STECOffset, 0);
}

static createStecVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createStecVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createStecVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startStecVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addPressure(builder:flatbuffers.Builder, PRESSUREOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, PRESSUREOffset, 0);
}

static createPressureVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createPressureVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createPressureVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startPressureVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addRhumidity(builder:flatbuffers.Builder, RHUMIDITYOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, RHUMIDITYOffset, 0);
}

static createRhumidityVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createRhumidityVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createRhumidityVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startRhumidityVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addTemperature(builder:flatbuffers.Builder, TEMPERATUREOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, TEMPERATUREOffset, 0);
}

static createTemperatureVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createTemperatureVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createTemperatureVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startTemperatureVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addClockBias(builder:flatbuffers.Builder, CLOCK_BIASOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, CLOCK_BIASOffset, 0);
}

static createClockBiasVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createClockBiasVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createClockBiasVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startClockBiasVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addClockDrift(builder:flatbuffers.Builder, CLOCK_DRIFTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, CLOCK_DRIFTOffset, 0);
}

static createClockDriftVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createClockDriftVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createClockDriftVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]!);
  }
  return builder.endVector();
}

static startClockDriftVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static endTDM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishTDMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$TDM');
}

static finishSizePrefixedTDMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$TDM', true);
}

static createTDM(builder:flatbuffers.Builder, OBSERVER_IDOffset:flatbuffers.Offset, OBSERVER_X:number, OBSERVER_Y:number, OBSERVER_Z:number, OBSERVER_VX:number, OBSERVER_VY:number, OBSERVER_VZ:number, OBSERVER_POSITION_REFERENCE_FRAME:OBSERVERLocationReferenceFrame, OBS_REFERENCE_FRAME:OBSERVERLocationReferenceFrame, EPOCHOffset:flatbuffers.Offset, CCSDS_TDM_VERSOffset:flatbuffers.Offset, COMMENTOffset:flatbuffers.Offset, CREATION_DATEOffset:flatbuffers.Offset, ORIGINATOROffset:flatbuffers.Offset, META_STARTOffset:flatbuffers.Offset, TIME_SYSTEMOffset:flatbuffers.Offset, START_TIMEOffset:flatbuffers.Offset, STOP_TIMEOffset:flatbuffers.Offset, PARTICIPANT_1Offset:flatbuffers.Offset, PARTICIPANT_2Offset:flatbuffers.Offset, PARTICIPANT_3Offset:flatbuffers.Offset, MODEOffset:flatbuffers.Offset, PATH_1:number, PATH_2:number, TRANSMIT_BANDOffset:flatbuffers.Offset, RECEIVE_BANDOffset:flatbuffers.Offset, INTEGRATION_INTERVAL:number, INTEGRATION_REFOffset:flatbuffers.Offset, RECEIVE_DELAY_2:number, RECEIVE_DELAY_3:number, DATA_QUALITYOffset:flatbuffers.Offset, META_STOPOffset:flatbuffers.Offset, DATA_STARTOffset:flatbuffers.Offset, TRANSMIT_FREQ_1:number, RECEIVE_FREQOffset:flatbuffers.Offset, DATA_STOPOffset:flatbuffers.Offset, TIMETAG_REFOffset:flatbuffers.Offset, ANGLE_TYPEOffset:flatbuffers.Offset, ANGLE_1Offset:flatbuffers.Offset, ANGLE_2Offset:flatbuffers.Offset, ANGLE_UNCERTAINTY_1:number, ANGLE_UNCERTAINTY_2:number, RANGE_RATE:number, RANGE_UNCERTAINTY:number, RANGE_MODEOffset:flatbuffers.Offset, RANGE_MODULUS:number, CORRECTION_ANGLE_1:number, CORRECTION_ANGLE_2:number, CORRECTIONS_APPLIEDOffset:flatbuffers.Offset, TROPO_DRYOffset:flatbuffers.Offset, TROPO_WETOffset:flatbuffers.Offset, STECOffset:flatbuffers.Offset, PRESSUREOffset:flatbuffers.Offset, RHUMIDITYOffset:flatbuffers.Offset, TEMPERATUREOffset:flatbuffers.Offset, CLOCK_BIASOffset:flatbuffers.Offset, CLOCK_DRIFTOffset:flatbuffers.Offset):flatbuffers.Offset {
  TDM.startTDM(builder);
  TDM.addObserverId(builder, OBSERVER_IDOffset);
  TDM.addObserverX(builder, OBSERVER_X);
  TDM.addObserverY(builder, OBSERVER_Y);
  TDM.addObserverZ(builder, OBSERVER_Z);
  TDM.addObserverVx(builder, OBSERVER_VX);
  TDM.addObserverVy(builder, OBSERVER_VY);
  TDM.addObserverVz(builder, OBSERVER_VZ);
  TDM.addObserverPositionReferenceFrame(builder, OBSERVER_POSITION_REFERENCE_FRAME);
  TDM.addObsReferenceFrame(builder, OBS_REFERENCE_FRAME);
  TDM.addEpoch(builder, EPOCHOffset);
  TDM.addCcsdsTdmVers(builder, CCSDS_TDM_VERSOffset);
  TDM.addComment(builder, COMMENTOffset);
  TDM.addCreationDate(builder, CREATION_DATEOffset);
  TDM.addOriginator(builder, ORIGINATOROffset);
  TDM.addMetaStart(builder, META_STARTOffset);
  TDM.addTimeSystem(builder, TIME_SYSTEMOffset);
  TDM.addStartTime(builder, START_TIMEOffset);
  TDM.addStopTime(builder, STOP_TIMEOffset);
  TDM.addParticipant1(builder, PARTICIPANT_1Offset);
  TDM.addParticipant2(builder, PARTICIPANT_2Offset);
  TDM.addParticipant3(builder, PARTICIPANT_3Offset);
  TDM.addMode(builder, MODEOffset);
  TDM.addPath1(builder, PATH_1);
  TDM.addPath2(builder, PATH_2);
  TDM.addTransmitBand(builder, TRANSMIT_BANDOffset);
  TDM.addReceiveBand(builder, RECEIVE_BANDOffset);
  TDM.addIntegrationInterval(builder, INTEGRATION_INTERVAL);
  TDM.addIntegrationRef(builder, INTEGRATION_REFOffset);
  TDM.addReceiveDelay2(builder, RECEIVE_DELAY_2);
  TDM.addReceiveDelay3(builder, RECEIVE_DELAY_3);
  TDM.addDataQuality(builder, DATA_QUALITYOffset);
  TDM.addMetaStop(builder, META_STOPOffset);
  TDM.addDataStart(builder, DATA_STARTOffset);
  TDM.addTransmitFreq1(builder, TRANSMIT_FREQ_1);
  TDM.addReceiveFreq(builder, RECEIVE_FREQOffset);
  TDM.addDataStop(builder, DATA_STOPOffset);
  TDM.addTimetagRef(builder, TIMETAG_REFOffset);
  TDM.addAngleType(builder, ANGLE_TYPEOffset);
  TDM.addAngle1(builder, ANGLE_1Offset);
  TDM.addAngle2(builder, ANGLE_2Offset);
  TDM.addAngleUncertainty1(builder, ANGLE_UNCERTAINTY_1);
  TDM.addAngleUncertainty2(builder, ANGLE_UNCERTAINTY_2);
  TDM.addRangeRate(builder, RANGE_RATE);
  TDM.addRangeUncertainty(builder, RANGE_UNCERTAINTY);
  TDM.addRangeMode(builder, RANGE_MODEOffset);
  TDM.addRangeModulus(builder, RANGE_MODULUS);
  TDM.addCorrectionAngle1(builder, CORRECTION_ANGLE_1);
  TDM.addCorrectionAngle2(builder, CORRECTION_ANGLE_2);
  TDM.addCorrectionsApplied(builder, CORRECTIONS_APPLIEDOffset);
  TDM.addTropoDry(builder, TROPO_DRYOffset);
  TDM.addTropoWet(builder, TROPO_WETOffset);
  TDM.addStec(builder, STECOffset);
  TDM.addPressure(builder, PRESSUREOffset);
  TDM.addRhumidity(builder, RHUMIDITYOffset);
  TDM.addTemperature(builder, TEMPERATUREOffset);
  TDM.addClockBias(builder, CLOCK_BIASOffset);
  TDM.addClockDrift(builder, CLOCK_DRIFTOffset);
  return TDM.endTDM(builder);
}

unpack(): TDMT {
  return new TDMT(
    this.OBSERVER_ID(),
    this.OBSERVER_X(),
    this.OBSERVER_Y(),
    this.OBSERVER_Z(),
    this.OBSERVER_VX(),
    this.OBSERVER_VY(),
    this.OBSERVER_VZ(),
    this.OBSERVER_POSITION_REFERENCE_FRAME(),
    this.OBS_REFERENCE_FRAME(),
    this.EPOCH(),
    this.CCSDS_TDM_VERS(),
    this.bb!.createScalarList<string>(this.COMMENT.bind(this), this.commentLength()),
    this.CREATION_DATE(),
    this.ORIGINATOR(),
    this.META_START(),
    this.TIME_SYSTEM(),
    this.START_TIME(),
    this.STOP_TIME(),
    this.PARTICIPANT_1(),
    this.PARTICIPANT_2(),
    this.PARTICIPANT_3(),
    this.MODE(),
    this.PATH_1(),
    this.PATH_2(),
    this.TRANSMIT_BAND(),
    this.RECEIVE_BAND(),
    this.INTEGRATION_INTERVAL(),
    this.INTEGRATION_REF(),
    this.RECEIVE_DELAY_2(),
    this.RECEIVE_DELAY_3(),
    this.DATA_QUALITY(),
    this.META_STOP(),
    this.DATA_START(),
    this.TRANSMIT_FREQ_1(),
    this.bb!.createScalarList<number>(this.RECEIVE_FREQ.bind(this), this.receiveFreqLength()),
    this.DATA_STOP(),
    this.TIMETAG_REF(),
    this.ANGLE_TYPE(),
    this.bb!.createScalarList<number>(this.ANGLE_1.bind(this), this.angle1Length()),
    this.bb!.createScalarList<number>(this.ANGLE_2.bind(this), this.angle2Length()),
    this.ANGLE_UNCERTAINTY_1(),
    this.ANGLE_UNCERTAINTY_2(),
    this.RANGE_RATE(),
    this.RANGE_UNCERTAINTY(),
    this.RANGE_MODE(),
    this.RANGE_MODULUS(),
    this.CORRECTION_ANGLE_1(),
    this.CORRECTION_ANGLE_2(),
    this.CORRECTIONS_APPLIED(),
    this.bb!.createScalarList<number>(this.TROPO_DRY.bind(this), this.tropoDryLength()),
    this.bb!.createScalarList<number>(this.TROPO_WET.bind(this), this.tropoWetLength()),
    this.bb!.createScalarList<number>(this.STEC.bind(this), this.stecLength()),
    this.bb!.createScalarList<number>(this.PRESSURE.bind(this), this.pressureLength()),
    this.bb!.createScalarList<number>(this.RHUMIDITY.bind(this), this.rhumidityLength()),
    this.bb!.createScalarList<number>(this.TEMPERATURE.bind(this), this.temperatureLength()),
    this.bb!.createScalarList<number>(this.CLOCK_BIAS.bind(this), this.clockBiasLength()),
    this.bb!.createScalarList<number>(this.CLOCK_DRIFT.bind(this), this.clockDriftLength())
  );
}


unpackTo(_o: TDMT): void {
  _o.OBSERVER_ID = this.OBSERVER_ID();
  _o.OBSERVER_X = this.OBSERVER_X();
  _o.OBSERVER_Y = this.OBSERVER_Y();
  _o.OBSERVER_Z = this.OBSERVER_Z();
  _o.OBSERVER_VX = this.OBSERVER_VX();
  _o.OBSERVER_VY = this.OBSERVER_VY();
  _o.OBSERVER_VZ = this.OBSERVER_VZ();
  _o.OBSERVER_POSITION_REFERENCE_FRAME = this.OBSERVER_POSITION_REFERENCE_FRAME();
  _o.OBS_REFERENCE_FRAME = this.OBS_REFERENCE_FRAME();
  _o.EPOCH = this.EPOCH();
  _o.CCSDS_TDM_VERS = this.CCSDS_TDM_VERS();
  _o.COMMENT = this.bb!.createScalarList<string>(this.COMMENT.bind(this), this.commentLength());
  _o.CREATION_DATE = this.CREATION_DATE();
  _o.ORIGINATOR = this.ORIGINATOR();
  _o.META_START = this.META_START();
  _o.TIME_SYSTEM = this.TIME_SYSTEM();
  _o.START_TIME = this.START_TIME();
  _o.STOP_TIME = this.STOP_TIME();
  _o.PARTICIPANT_1 = this.PARTICIPANT_1();
  _o.PARTICIPANT_2 = this.PARTICIPANT_2();
  _o.PARTICIPANT_3 = this.PARTICIPANT_3();
  _o.MODE = this.MODE();
  _o.PATH_1 = this.PATH_1();
  _o.PATH_2 = this.PATH_2();
  _o.TRANSMIT_BAND = this.TRANSMIT_BAND();
  _o.RECEIVE_BAND = this.RECEIVE_BAND();
  _o.INTEGRATION_INTERVAL = this.INTEGRATION_INTERVAL();
  _o.INTEGRATION_REF = this.INTEGRATION_REF();
  _o.RECEIVE_DELAY_2 = this.RECEIVE_DELAY_2();
  _o.RECEIVE_DELAY_3 = this.RECEIVE_DELAY_3();
  _o.DATA_QUALITY = this.DATA_QUALITY();
  _o.META_STOP = this.META_STOP();
  _o.DATA_START = this.DATA_START();
  _o.TRANSMIT_FREQ_1 = this.TRANSMIT_FREQ_1();
  _o.RECEIVE_FREQ = this.bb!.createScalarList<number>(this.RECEIVE_FREQ.bind(this), this.receiveFreqLength());
  _o.DATA_STOP = this.DATA_STOP();
  _o.TIMETAG_REF = this.TIMETAG_REF();
  _o.ANGLE_TYPE = this.ANGLE_TYPE();
  _o.ANGLE_1 = this.bb!.createScalarList<number>(this.ANGLE_1.bind(this), this.angle1Length());
  _o.ANGLE_2 = this.bb!.createScalarList<number>(this.ANGLE_2.bind(this), this.angle2Length());
  _o.ANGLE_UNCERTAINTY_1 = this.ANGLE_UNCERTAINTY_1();
  _o.ANGLE_UNCERTAINTY_2 = this.ANGLE_UNCERTAINTY_2();
  _o.RANGE_RATE = this.RANGE_RATE();
  _o.RANGE_UNCERTAINTY = this.RANGE_UNCERTAINTY();
  _o.RANGE_MODE = this.RANGE_MODE();
  _o.RANGE_MODULUS = this.RANGE_MODULUS();
  _o.CORRECTION_ANGLE_1 = this.CORRECTION_ANGLE_1();
  _o.CORRECTION_ANGLE_2 = this.CORRECTION_ANGLE_2();
  _o.CORRECTIONS_APPLIED = this.CORRECTIONS_APPLIED();
  _o.TROPO_DRY = this.bb!.createScalarList<number>(this.TROPO_DRY.bind(this), this.tropoDryLength());
  _o.TROPO_WET = this.bb!.createScalarList<number>(this.TROPO_WET.bind(this), this.tropoWetLength());
  _o.STEC = this.bb!.createScalarList<number>(this.STEC.bind(this), this.stecLength());
  _o.PRESSURE = this.bb!.createScalarList<number>(this.PRESSURE.bind(this), this.pressureLength());
  _o.RHUMIDITY = this.bb!.createScalarList<number>(this.RHUMIDITY.bind(this), this.rhumidityLength());
  _o.TEMPERATURE = this.bb!.createScalarList<number>(this.TEMPERATURE.bind(this), this.temperatureLength());
  _o.CLOCK_BIAS = this.bb!.createScalarList<number>(this.CLOCK_BIAS.bind(this), this.clockBiasLength());
  _o.CLOCK_DRIFT = this.bb!.createScalarList<number>(this.CLOCK_DRIFT.bind(this), this.clockDriftLength());
}
}

export class TDMT implements flatbuffers.IGeneratedObject {
constructor(
  public OBSERVER_ID: string|Uint8Array|null = null,
  public OBSERVER_X: number = 0.0,
  public OBSERVER_Y: number = 0.0,
  public OBSERVER_Z: number = 0.0,
  public OBSERVER_VX: number = 0.0,
  public OBSERVER_VY: number = 0.0,
  public OBSERVER_VZ: number = 0.0,
  public OBSERVER_POSITION_REFERENCE_FRAME: OBSERVERLocationReferenceFrame = OBSERVERLocationReferenceFrame.EME2000,
  public OBS_REFERENCE_FRAME: OBSERVERLocationReferenceFrame = OBSERVERLocationReferenceFrame.EME2000,
  public EPOCH: string|Uint8Array|null = null,
  public CCSDS_TDM_VERS: string|Uint8Array|null = null,
  public COMMENT: (string)[] = [],
  public CREATION_DATE: string|Uint8Array|null = null,
  public ORIGINATOR: string|Uint8Array|null = null,
  public META_START: string|Uint8Array|null = null,
  public TIME_SYSTEM: string|Uint8Array|null = null,
  public START_TIME: string|Uint8Array|null = null,
  public STOP_TIME: string|Uint8Array|null = null,
  public PARTICIPANT_1: string|Uint8Array|null = null,
  public PARTICIPANT_2: string|Uint8Array|null = null,
  public PARTICIPANT_3: string|Uint8Array|null = null,
  public MODE: string|Uint8Array|null = null,
  public PATH_1: number = 0,
  public PATH_2: number = 0,
  public TRANSMIT_BAND: string|Uint8Array|null = null,
  public RECEIVE_BAND: string|Uint8Array|null = null,
  public INTEGRATION_INTERVAL: number = 0.0,
  public INTEGRATION_REF: string|Uint8Array|null = null,
  public RECEIVE_DELAY_2: number = 0.0,
  public RECEIVE_DELAY_3: number = 0.0,
  public DATA_QUALITY: string|Uint8Array|null = null,
  public META_STOP: string|Uint8Array|null = null,
  public DATA_START: string|Uint8Array|null = null,
  public TRANSMIT_FREQ_1: number = 0.0,
  public RECEIVE_FREQ: (number)[] = [],
  public DATA_STOP: string|Uint8Array|null = null,
  public TIMETAG_REF: string|Uint8Array|null = null,
  public ANGLE_TYPE: string|Uint8Array|null = null,
  public ANGLE_1: (number)[] = [],
  public ANGLE_2: (number)[] = [],
  public ANGLE_UNCERTAINTY_1: number = 0.0,
  public ANGLE_UNCERTAINTY_2: number = 0.0,
  public RANGE_RATE: number = 0.0,
  public RANGE_UNCERTAINTY: number = 0.0,
  public RANGE_MODE: string|Uint8Array|null = null,
  public RANGE_MODULUS: number = 0.0,
  public CORRECTION_ANGLE_1: number = 0.0,
  public CORRECTION_ANGLE_2: number = 0.0,
  public CORRECTIONS_APPLIED: string|Uint8Array|null = null,
  public TROPO_DRY: (number)[] = [],
  public TROPO_WET: (number)[] = [],
  public STEC: (number)[] = [],
  public PRESSURE: (number)[] = [],
  public RHUMIDITY: (number)[] = [],
  public TEMPERATURE: (number)[] = [],
  public CLOCK_BIAS: (number)[] = [],
  public CLOCK_DRIFT: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const OBSERVER_ID = (this.OBSERVER_ID !== null ? builder.createString(this.OBSERVER_ID!) : 0);
  const EPOCH = (this.EPOCH !== null ? builder.createString(this.EPOCH!) : 0);
  const CCSDS_TDM_VERS = (this.CCSDS_TDM_VERS !== null ? builder.createString(this.CCSDS_TDM_VERS!) : 0);
  const COMMENT = TDM.createCommentVector(builder, builder.createObjectOffsetList(this.COMMENT));
  const CREATION_DATE = (this.CREATION_DATE !== null ? builder.createString(this.CREATION_DATE!) : 0);
  const ORIGINATOR = (this.ORIGINATOR !== null ? builder.createString(this.ORIGINATOR!) : 0);
  const META_START = (this.META_START !== null ? builder.createString(this.META_START!) : 0);
  const TIME_SYSTEM = (this.TIME_SYSTEM !== null ? builder.createString(this.TIME_SYSTEM!) : 0);
  const START_TIME = (this.START_TIME !== null ? builder.createString(this.START_TIME!) : 0);
  const STOP_TIME = (this.STOP_TIME !== null ? builder.createString(this.STOP_TIME!) : 0);
  const PARTICIPANT_1 = (this.PARTICIPANT_1 !== null ? builder.createString(this.PARTICIPANT_1!) : 0);
  const PARTICIPANT_2 = (this.PARTICIPANT_2 !== null ? builder.createString(this.PARTICIPANT_2!) : 0);
  const PARTICIPANT_3 = (this.PARTICIPANT_3 !== null ? builder.createString(this.PARTICIPANT_3!) : 0);
  const MODE = (this.MODE !== null ? builder.createString(this.MODE!) : 0);
  const TRANSMIT_BAND = (this.TRANSMIT_BAND !== null ? builder.createString(this.TRANSMIT_BAND!) : 0);
  const RECEIVE_BAND = (this.RECEIVE_BAND !== null ? builder.createString(this.RECEIVE_BAND!) : 0);
  const INTEGRATION_REF = (this.INTEGRATION_REF !== null ? builder.createString(this.INTEGRATION_REF!) : 0);
  const DATA_QUALITY = (this.DATA_QUALITY !== null ? builder.createString(this.DATA_QUALITY!) : 0);
  const META_STOP = (this.META_STOP !== null ? builder.createString(this.META_STOP!) : 0);
  const DATA_START = (this.DATA_START !== null ? builder.createString(this.DATA_START!) : 0);
  const RECEIVE_FREQ = TDM.createReceiveFreqVector(builder, this.RECEIVE_FREQ);
  const DATA_STOP = (this.DATA_STOP !== null ? builder.createString(this.DATA_STOP!) : 0);
  const TIMETAG_REF = (this.TIMETAG_REF !== null ? builder.createString(this.TIMETAG_REF!) : 0);
  const ANGLE_TYPE = (this.ANGLE_TYPE !== null ? builder.createString(this.ANGLE_TYPE!) : 0);
  const ANGLE_1 = TDM.createAngle1Vector(builder, this.ANGLE_1);
  const ANGLE_2 = TDM.createAngle2Vector(builder, this.ANGLE_2);
  const RANGE_MODE = (this.RANGE_MODE !== null ? builder.createString(this.RANGE_MODE!) : 0);
  const CORRECTIONS_APPLIED = (this.CORRECTIONS_APPLIED !== null ? builder.createString(this.CORRECTIONS_APPLIED!) : 0);
  const TROPO_DRY = TDM.createTropoDryVector(builder, this.TROPO_DRY);
  const TROPO_WET = TDM.createTropoWetVector(builder, this.TROPO_WET);
  const STEC = TDM.createStecVector(builder, this.STEC);
  const PRESSURE = TDM.createPressureVector(builder, this.PRESSURE);
  const RHUMIDITY = TDM.createRhumidityVector(builder, this.RHUMIDITY);
  const TEMPERATURE = TDM.createTemperatureVector(builder, this.TEMPERATURE);
  const CLOCK_BIAS = TDM.createClockBiasVector(builder, this.CLOCK_BIAS);
  const CLOCK_DRIFT = TDM.createClockDriftVector(builder, this.CLOCK_DRIFT);

  return TDM.createTDM(builder,
    OBSERVER_ID,
    this.OBSERVER_X,
    this.OBSERVER_Y,
    this.OBSERVER_Z,
    this.OBSERVER_VX,
    this.OBSERVER_VY,
    this.OBSERVER_VZ,
    this.OBSERVER_POSITION_REFERENCE_FRAME,
    this.OBS_REFERENCE_FRAME,
    EPOCH,
    CCSDS_TDM_VERS,
    COMMENT,
    CREATION_DATE,
    ORIGINATOR,
    META_START,
    TIME_SYSTEM,
    START_TIME,
    STOP_TIME,
    PARTICIPANT_1,
    PARTICIPANT_2,
    PARTICIPANT_3,
    MODE,
    this.PATH_1,
    this.PATH_2,
    TRANSMIT_BAND,
    RECEIVE_BAND,
    this.INTEGRATION_INTERVAL,
    INTEGRATION_REF,
    this.RECEIVE_DELAY_2,
    this.RECEIVE_DELAY_3,
    DATA_QUALITY,
    META_STOP,
    DATA_START,
    this.TRANSMIT_FREQ_1,
    RECEIVE_FREQ,
    DATA_STOP,
    TIMETAG_REF,
    ANGLE_TYPE,
    ANGLE_1,
    ANGLE_2,
    this.ANGLE_UNCERTAINTY_1,
    this.ANGLE_UNCERTAINTY_2,
    this.RANGE_RATE,
    this.RANGE_UNCERTAINTY,
    RANGE_MODE,
    this.RANGE_MODULUS,
    this.CORRECTION_ANGLE_1,
    this.CORRECTION_ANGLE_2,
    CORRECTIONS_APPLIED,
    TROPO_DRY,
    TROPO_WET,
    STEC,
    PRESSURE,
    RHUMIDITY,
    TEMPERATURE,
    CLOCK_BIAS,
    CLOCK_DRIFT
  );
}
}
