// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { CelestialFrameWrapper, CelestialFrameWrapperT } from './CelestialFrameWrapper.js';
import { CustomFrameWrapper, CustomFrameWrapperT } from './CustomFrameWrapper.js';
import { OrbitFrameWrapper, OrbitFrameWrapperT } from './OrbitFrameWrapper.js';
import { SpacecraftFrameWrapper, SpacecraftFrameWrapperT } from './SpacecraftFrameWrapper.js';


export enum RFMUnion {
  NONE = 0,
  CelestialFrameWrapper = 1,
  SpacecraftFrameWrapper = 2,
  OrbitFrameWrapper = 3,
  CustomFrameWrapper = 4
}

export function unionToRfmunion(
  type: RFMUnion,
  accessor: (obj:CelestialFrameWrapper|CustomFrameWrapper|OrbitFrameWrapper|SpacecraftFrameWrapper) => CelestialFrameWrapper|CustomFrameWrapper|OrbitFrameWrapper|SpacecraftFrameWrapper|null
): CelestialFrameWrapper|CustomFrameWrapper|OrbitFrameWrapper|SpacecraftFrameWrapper|null {
  switch(RFMUnion[type]) {
    case 'NONE': return null; 
    case 'CelestialFrameWrapper': return accessor(new CelestialFrameWrapper())! as CelestialFrameWrapper;
    case 'SpacecraftFrameWrapper': return accessor(new SpacecraftFrameWrapper())! as SpacecraftFrameWrapper;
    case 'OrbitFrameWrapper': return accessor(new OrbitFrameWrapper())! as OrbitFrameWrapper;
    case 'CustomFrameWrapper': return accessor(new CustomFrameWrapper())! as CustomFrameWrapper;
    default: return null;
  }
}

export function unionListToRfmunion(
  type: RFMUnion, 
  accessor: (index: number, obj:CelestialFrameWrapper|CustomFrameWrapper|OrbitFrameWrapper|SpacecraftFrameWrapper) => CelestialFrameWrapper|CustomFrameWrapper|OrbitFrameWrapper|SpacecraftFrameWrapper|null, 
  index: number
): CelestialFrameWrapper|CustomFrameWrapper|OrbitFrameWrapper|SpacecraftFrameWrapper|null {
  switch(RFMUnion[type]) {
    case 'NONE': return null; 
    case 'CelestialFrameWrapper': return accessor(index, new CelestialFrameWrapper())! as CelestialFrameWrapper;
    case 'SpacecraftFrameWrapper': return accessor(index, new SpacecraftFrameWrapper())! as SpacecraftFrameWrapper;
    case 'OrbitFrameWrapper': return accessor(index, new OrbitFrameWrapper())! as OrbitFrameWrapper;
    case 'CustomFrameWrapper': return accessor(index, new CustomFrameWrapper())! as CustomFrameWrapper;
    default: return null;
  }
}
