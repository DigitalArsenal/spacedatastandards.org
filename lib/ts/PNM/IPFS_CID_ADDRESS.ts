// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * IPFS CID and Account Identifier
 */
export class IPFS_CID_ADDRESS implements flatbuffers.IUnpackableObject<IPFS_CID_ADDRESST> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IPFS_CID_ADDRESS {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIPFS_CID_ADDRESS(bb:flatbuffers.ByteBuffer, obj?:IPFS_CID_ADDRESS):IPFS_CID_ADDRESS {
  return (obj || new IPFS_CID_ADDRESS()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIPFS_CID_ADDRESS(bb:flatbuffers.ByteBuffer, obj?:IPFS_CID_ADDRESS):IPFS_CID_ADDRESS {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IPFS_CID_ADDRESS()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

IPFS_CID():string|null
IPFS_CID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
IPFS_CID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

KEY_ADDRESS():string|null
KEY_ADDRESS(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
KEY_ADDRESS(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startIPFS_CID_ADDRESS(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addIpfsCid(builder:flatbuffers.Builder, IPFS_CIDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, IPFS_CIDOffset, 0);
}

static addKeyAddress(builder:flatbuffers.Builder, KEY_ADDRESSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, KEY_ADDRESSOffset, 0);
}

static endIPFS_CID_ADDRESS(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createIPFS_CID_ADDRESS(builder:flatbuffers.Builder, IPFS_CIDOffset:flatbuffers.Offset, KEY_ADDRESSOffset:flatbuffers.Offset):flatbuffers.Offset {
  IPFS_CID_ADDRESS.startIPFS_CID_ADDRESS(builder);
  IPFS_CID_ADDRESS.addIpfsCid(builder, IPFS_CIDOffset);
  IPFS_CID_ADDRESS.addKeyAddress(builder, KEY_ADDRESSOffset);
  return IPFS_CID_ADDRESS.endIPFS_CID_ADDRESS(builder);
}

unpack(): IPFS_CID_ADDRESST {
  return new IPFS_CID_ADDRESST(
    this.IPFS_CID(),
    this.KEY_ADDRESS()
  );
}


unpackTo(_o: IPFS_CID_ADDRESST): void {
  _o.IPFS_CID = this.IPFS_CID();
  _o.KEY_ADDRESS = this.KEY_ADDRESS();
}
}

export class IPFS_CID_ADDRESST implements flatbuffers.IGeneratedObject {
constructor(
  public IPFS_CID: string|Uint8Array|null = null,
  public KEY_ADDRESS: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const IPFS_CID = (this.IPFS_CID !== null ? builder.createString(this.IPFS_CID!) : 0);
  const KEY_ADDRESS = (this.KEY_ADDRESS !== null ? builder.createString(this.KEY_ADDRESS!) : 0);

  return IPFS_CID_ADDRESS.createIPFS_CID_ADDRESS(builder,
    IPFS_CID,
    KEY_ADDRESS
  );
}
}
