// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Publish Notification Message
 */
export class PNM implements flatbuffers.IUnpackableObject<PNMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PNM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPNM(bb:flatbuffers.ByteBuffer, obj?:PNM):PNM {
  return (obj || new PNM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPNM(bb:flatbuffers.ByteBuffer, obj?:PNM):PNM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PNM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$PNM');
}

/**
 * IPFS Content Identifier (CID)
 * The hash of a file stored on the InterPlanetary File System (IPFS).
 * Refer to the section on IPFS integration for details.
 */
IPFS_CID():string|null
IPFS_CID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
IPFS_CID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier generated from the data provider's public key
 */
KEY_ADDRESS():string|null
KEY_ADDRESS(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
KEY_ADDRESS(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * SpaceDataStandards 4 Character File Identifier
 */
FILE_IDENTIFIER():string|null
FILE_IDENTIFIER(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
FILE_IDENTIFIER(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startPNM(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addIpfsCid(builder:flatbuffers.Builder, IPFS_CIDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, IPFS_CIDOffset, 0);
}

static addKeyAddress(builder:flatbuffers.Builder, KEY_ADDRESSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, KEY_ADDRESSOffset, 0);
}

static addFileIdentifier(builder:flatbuffers.Builder, FILE_IDENTIFIEROffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, FILE_IDENTIFIEROffset, 0);
}

static endPNM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPNMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$PNM');
}

static finishSizePrefixedPNMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$PNM', true);
}

static createPNM(builder:flatbuffers.Builder, IPFS_CIDOffset:flatbuffers.Offset, KEY_ADDRESSOffset:flatbuffers.Offset, FILE_IDENTIFIEROffset:flatbuffers.Offset):flatbuffers.Offset {
  PNM.startPNM(builder);
  PNM.addIpfsCid(builder, IPFS_CIDOffset);
  PNM.addKeyAddress(builder, KEY_ADDRESSOffset);
  PNM.addFileIdentifier(builder, FILE_IDENTIFIEROffset);
  return PNM.endPNM(builder);
}

unpack(): PNMT {
  return new PNMT(
    this.IPFS_CID(),
    this.KEY_ADDRESS(),
    this.FILE_IDENTIFIER()
  );
}


unpackTo(_o: PNMT): void {
  _o.IPFS_CID = this.IPFS_CID();
  _o.KEY_ADDRESS = this.KEY_ADDRESS();
  _o.FILE_IDENTIFIER = this.FILE_IDENTIFIER();
}
}

export class PNMT implements flatbuffers.IGeneratedObject {
constructor(
  public IPFS_CID: string|Uint8Array|null = null,
  public KEY_ADDRESS: string|Uint8Array|null = null,
  public FILE_IDENTIFIER: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const IPFS_CID = (this.IPFS_CID !== null ? builder.createString(this.IPFS_CID!) : 0);
  const KEY_ADDRESS = (this.KEY_ADDRESS !== null ? builder.createString(this.KEY_ADDRESS!) : 0);
  const FILE_IDENTIFIER = (this.FILE_IDENTIFIER !== null ? builder.createString(this.FILE_IDENTIFIER!) : 0);

  return PNM.createPNM(builder,
    IPFS_CID,
    KEY_ADDRESS,
    FILE_IDENTIFIER
  );
}
}
