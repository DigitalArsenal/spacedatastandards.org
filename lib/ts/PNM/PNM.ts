// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Publish Notification Message
 * This table includes a comprehensive set of cryptographic hashes and a digital signature for file publication.
 */
export class PNM implements flatbuffers.IUnpackableObject<PNMT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PNM {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPNM(bb:flatbuffers.ByteBuffer, obj?:PNM):PNM {
  return (obj || new PNM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPNM(bb:flatbuffers.ByteBuffer, obj?:PNM):PNM {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PNM()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$PNM');
}

/**
 * IPFS Content Identifier (CID)
 * The hash of a file stored on the InterPlanetary File System (IPFS).
 * Refer to the section on IPFS integration for details.
 */
IPFS_CID():string|null
IPFS_CID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
IPFS_CID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Ethereum Digital Signature
 * Digital signature of the IPFS file hash using Ethereum's signing mechanism.
 * Refer to the Ethereum Blockchain integration section for details.
 */
ETH_DIGITAL_SIGNATURE():string|null
ETH_DIGITAL_SIGNATURE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ETH_DIGITAL_SIGNATURE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * SHA-512 File Hash
 * SHA-512 hash of the file for additional security verification.
 * Detailed in the security features section of the document.
 */
SHA_512_FILE_HASH():string|null
SHA_512_FILE_HASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SHA_512_FILE_HASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * SHA-256 File Hash
 * SHA-256 hash of the file for additional security verification.
 * Detailed in the security features section of the document.
 */
SHA_256_FILE_HASH():string|null
SHA_256_FILE_HASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SHA_256_FILE_HASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * MD5 File Digest
 * MD5 digest of the file for backward compatibility with older systems.
 * Located in the legacy support section of the document.
 */
MD5_FILE_DIGEST():string|null
MD5_FILE_DIGEST(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MD5_FILE_DIGEST(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * SHA-1 File Hash
 * SHA-1 hash of the file, used in certain legacy systems for compatibility.
 * Refer to the legacy systems integration section for more information.
 */
SHA_1_FILE_HASH():string|null
SHA_1_FILE_HASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SHA_1_FILE_HASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Argon2 File Hash
 * Argon2 hash of the file, providing state-of-the-art password hashing.
 * This is mentioned in the advanced security measures section.
 */
ARGON2_FILE_HASH():string|null
ARGON2_FILE_HASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ARGON2_FILE_HASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Blake2b File Hash
 * Blake2b hash of the file, known for high-speed cryptographic hashing.
 * Refer to the high-performance security solutions section.
 */
BLAKE2B_FILE_HASH():string|null
BLAKE2B_FILE_HASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
BLAKE2B_FILE_HASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * SHA-3 File Hash
 * SHA-3 hash of the file, offering a stronger alternative to SHA-2.
 * Located in the modern cryptographic standards section.
 */
SHA_3_FILE_HASH():string|null
SHA_3_FILE_HASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SHA_3_FILE_HASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * RIPEMD-160 File Hash
 * RIPEMD-160 hash of the file, often used in blockchain applications for address generation.
 * Discussed in the blockchain compatibility section.
 */
RIPEMD_160_FILE_HASH():string|null
RIPEMD_160_FILE_HASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
RIPEMD_160_FILE_HASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Whirlpool File Hash
 * Whirlpool hash of the file, designed for integrity protection and digital fingerprinting.
 * Refer to the data integrity and authentication section.
 */
WHIRLPOOL_FILE_HASH():string|null
WHIRLPOOL_FILE_HASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
WHIRLPOOL_FILE_HASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Tiger File Hash
 * Tiger hash of the file, optimized for fast hashing on 64-bit platforms.
 * Detailed in the high-speed cryptographic operations section.
 */
TIGER_FILE_HASH():string|null
TIGER_FILE_HASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
TIGER_FILE_HASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Cyclic Redundancy Check (CRC) 32
 * Cyclic redundancy check with a length of 32 bits.
 * Refer to CRC section for more details.
 */
CRC32():string|null
CRC32(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CRC32(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Adler-32 Checksum
 * Adler-32 checksum with a length of 32 bits.
 * Refer to the checksum section for more details.
 */
ADLER32_CHECKSUM():string|null
ADLER32_CHECKSUM(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ADLER32_CHECKSUM(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Universal Hash Function Family - Rabin Fingerprint
 * Variable-length hash function using Rabin fingerprinting.
 * Refer to the Universal hash function families section for details.
 */
RABIN_FINGERPRINT():string|null
RABIN_FINGERPRINT(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
RABIN_FINGERPRINT(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - Pearson Hashing
 * Non-cryptographic hash function with a length of 8 bits or more, using XOR or table lookup.
 * Refer to the Non-cryptographic hash functions section for details.
 */
PEARSON_HASHING():string|null
PEARSON_HASHING(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
PEARSON_HASHING(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Keyed Cryptographic Hash Function - BLAKE2
 * Keyed hash function (prefix-MAC) with variable length.
 * Refer to the Keyed cryptographic hash functions section for details.
 */
BLAKE2_KEYED_HASH():string|null
BLAKE2_KEYED_HASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
BLAKE2_KEYED_HASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - BLAKE-256
 * Cryptographic hash function with a length of 256 bits, based on HAIFA structure.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
BLAKE_256():string|null
BLAKE_256(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
BLAKE_256(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * CRC-8
 * Cyclic redundancy check with a length of 8 bits.
 * Refer to CRC section for more details.
 */
CRC8():string|null
CRC8(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CRC8(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * CRC-16
 * Cyclic redundancy check with a length of 16 bits.
 * Refer to CRC section for more details.
 */
CRC16():string|null
CRC16(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CRC16(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * CRC-64
 * Cyclic redundancy check with a length of 64 bits.
 * Refer to CRC section for more details.
 */
CRC64():string|null
CRC64(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CRC64(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * BSD Checksum
 * BSD checksum with a length of 16 bits.
 * Refer to the checksum section for more details.
 */
BSD_CHECKSUM():string|null
BSD_CHECKSUM(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
BSD_CHECKSUM(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * SYSV Checksum
 * SYSV checksum with a length of 16 bits.
 * Refer to the checksum section for more details.
 */
SYSV_CHECKSUM():string|null
SYSV_CHECKSUM(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SYSV_CHECKSUM(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sum8
 * Sum with a length of 8 bits.
 * Refer to the checksum section for more details.
 */
SUM8():string|null
SUM8(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SUM8(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Internet Checksum
 * Internet checksum with a length of 16 bits.
 * Refer to the checksum section for more details.
 */
INTERNET_CHECKSUM():string|null
INTERNET_CHECKSUM(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
INTERNET_CHECKSUM(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sum24
 * Sum with a length of 24 bits.
 * Refer to the checksum section for more details.
 */
SUM24():string|null
SUM24(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SUM24(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Sum32
 * Sum with a length of 32 bits.
 * Refer to the checksum section for more details.
 */
SUM32():string|null
SUM32(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SUM32(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Fletcher-4
 * Sum with a length of 4 bits.
 * Refer to the checksum section for more details.
 */
FLETCHER_4():string|null
FLETCHER_4(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
FLETCHER_4(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Fletcher-8
 * Sum with a length of 8 bits.
 * Refer to the checksum section for more details.
 */
FLETCHER_8():string|null
FLETCHER_8(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
FLETCHER_8(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Fletcher-16
 * Sum with a length of 16 bits.
 * Refer to the checksum section for more details.
 */
FLETCHER_16():string|null
FLETCHER_16(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
FLETCHER_16(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Fletcher-32
 * Sum with a length of 32 bits.
 * Refer to the checksum section for more details.
 */
FLETCHER_32():string|null
FLETCHER_32(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
FLETCHER_32(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Luhn Algorithm
 * Luhn algorithm with a length of 1 decimal digit.
 * Refer to the checksum section for more details.
 */
LUNH_ALGORITHM():string|null
LUNH_ALGORITHM(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
LUNH_ALGORITHM(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Verhoeff Algorithm
 * Verhoeff algorithm with a length of 1 decimal digit.
 * Refer to the checksum section for more details.
 */
VERHOEFF_ALGORITHM():string|null
VERHOEFF_ALGORITHM(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
VERHOEFF_ALGORITHM(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Damm Algorithm
 * Damm algorithm with a length of 1 decimal digit.
 * Refer to the checksum section for more details.
 */
DAMM_ALGORITHM():string|null
DAMM_ALGORITHM(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
DAMM_ALGORITHM(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Universal Hash Function Family - Tabulation Hashing
 * Variable-length hash function using tabulation hashing.
 * Refer to the Universal hash function families section for details.
 */
TABULATION_HASHING():string|null
TABULATION_HASHING(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
TABULATION_HASHING(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Universal Hash Function Family - Universal One-Way Hash Function
 * Universal one-way hash function with arbitrary length.
 * Refer to the Universal hash function families section for details.
 */
UNIVERSAL_ONE_WAY_HASH_FUNCTION():string|null
UNIVERSAL_ONE_WAY_HASH_FUNCTION(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
UNIVERSAL_ONE_WAY_HASH_FUNCTION(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Universal Hash Function Family - Zobrist Hashing
 * Variable-length hash function using Zobrist hashing.
 * Refer to the Universal hash function families section for details.
 */
ZOBRIST_HASHING():string|null
ZOBRIST_HASHING(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ZOBRIST_HASHING(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - Paul Hsieh's SuperFastHash
 * Non-cryptographic hash function with a length of 32 bits.
 * Refer to the Non-cryptographic hash functions section for details.
 */
PAUL_HSIEHS_SUPERFASTHASH():string|null
PAUL_HSIEHS_SUPERFASTHASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
PAUL_HSIEHS_SUPERFASTHASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - Buzhash
 * Non-cryptographic hash function with variable length.
 * Refer to the Non-cryptographic hash functions section for details.
 */
BUZHASH():string|null
BUZHASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
BUZHASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - Fowler-Noll-Vo Hash Function (FNV Hash)
 * Non-cryptographic hash function with variable length.
 * Refer to the Non-cryptographic hash functions section for details.
 */
FNV_HASH():string|null
FNV_HASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
FNV_HASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - Jenkins Hash Function
 * Non-cryptographic hash function with a length of 32 or 64 bits.
 * Refer to the Non-cryptographic hash functions section for details.
 */
JENKINS_HASH_FUNCTION():string|null
JENKINS_HASH_FUNCTION(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
JENKINS_HASH_FUNCTION(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - Bernstein's Hash (djb2)
 * Non-cryptographic hash function with a length of 32 or 64 bits.
 * Refer to the Non-cryptographic hash functions section for details.
 */
BERNSTEINS_HASH_DJB2():string|null
BERNSTEINS_HASH_DJB2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
BERNSTEINS_HASH_DJB2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - PJW Hash / Elf Hash
 * Non-cryptographic hash function with a length of 32 or 64 bits.
 * Refer to the Non-cryptographic hash functions section for details.
 */
PJW_HASH_ELF_HASH():string|null
PJW_HASH_ELF_HASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
PJW_HASH_ELF_HASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - MurmurHash
 * Non-cryptographic hash function with a length of 32, 64, or 128 bits.
 * Refer to the Non-cryptographic hash functions section for details.
 */
MURMURHASH():string|null
MURMURHASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MURMURHASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - Fast-Hash
 * Non-cryptographic hash function with a length of 32 or 64 bits.
 * Refer to the Non-cryptographic hash functions section for details.
 */
FAST_HASH():string|null
FAST_HASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
FAST_HASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - SpookyHash
 * Non-cryptographic hash function with a length of 32, 64, or 128 bits.
 * Refer to the Non-cryptographic hash functions section for details.
 */
SPOOKYHASH():string|null
SPOOKYHASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SPOOKYHASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - CityHash
 * Non-cryptographic hash function with a length of 32, 64, 128, or 256 bits.
 * Refer to the Non-cryptographic hash functions section for details.
 */
CITYHASH():string|null
CITYHASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CITYHASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - FarmHash
 * Non-cryptographic hash function with a length of 32, 64, or 128 bits.
 * Refer to the Non-cryptographic hash functions section for details.
 */
FARMHASH():string|null
FARMHASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
FARMHASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - MetroHash
 * Non-cryptographic hash function with a length of 64 or 128 bits.
 * Refer to the Non-cryptographic hash functions section for details.
 */
METROHASH():string|null
METROHASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
METROHASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - Numeric Hash (nhash)
 * Non-cryptographic hash function with variable length.
 * Refer to the Non-cryptographic hash functions section for details.
 */
NUMERIC_HASH():string|null
NUMERIC_HASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
NUMERIC_HASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - xxHash
 * Non-cryptographic hash function with a length of 32, 64, or 128 bits.
 * Refer to the Non-cryptographic hash functions section for details.
 */
XXHASH():string|null
XXHASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
XXHASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - t1ha (Fast Positive Hash)
 * Non-cryptographic hash function with a length of 64 or 128 bits.
 * Refer to the Non-cryptographic hash functions section for details.
 */
T1HA():string|null
T1HA(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
T1HA(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - GxHash
 * Non-cryptographic hash function with a length of 32, 64, or 128 bits.
 * Refer to the Non-cryptographic hash functions section for details.
 */
GXHASH():string|null
GXHASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
GXHASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - pHash
 * Non-cryptographic hash function with fixed or variable length.
 * Refer to the Non-cryptographic hash functions section for details.
 */
PHASH():string|null
PHASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
PHASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 110);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - dhash
 * Non-cryptographic hash function with a length of 128 bits.
 * Refer to the Non-cryptographic hash functions section for details.
 */
DHASH():string|null
DHASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
DHASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 112);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Non-Cryptographic Hash Function - SDBM
 * Non-cryptographic hash function with a length of 32 or 64 bits.
 * Refer to the Non-cryptographic hash functions section for details.
 */
SDBM():string|null
SDBM(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SDBM(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 114);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - OSDB Hash
 * Cryptographic hash function with a length of 64 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
OSDB_HASH():string|null
OSDB_HASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
OSDB_HASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 116);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - komihash
 * Cryptographic hash function with a length of 64 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
KOMIHASH():string|null
KOMIHASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
KOMIHASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 118);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Keyed Cryptographic Hash Function - BLAKE3
 * Keyed hash function with arbitrary length.
 * Refer to the Keyed cryptographic hash functions section for details.
 */
BLAKE3():string|null
BLAKE3(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
BLAKE3(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 120);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - ECOH
 * Cryptographic hash function with a length of 224 to 512 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
ECOH():string|null
ECOH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ECOH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 122);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - FSB
 * Cryptographic hash function with a length of 160 to 512 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
FSB():string|null
FSB(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
FSB(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 124);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - GOST
 * Cryptographic hash function with a length of 256 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
GOST():string|null
GOST(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
GOST(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 126);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - Grøstl
 * Cryptographic hash function with a length of up to 512 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
GROSTL():string|null
GROSTL(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
GROSTL(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 128);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - HAS-160
 * Cryptographic hash function with a length of 160 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
HAS_160():string|null
HAS_160(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
HAS_160(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 130);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - HAVAL
 * Cryptographic hash function with a length of 128 to 256 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
HAVAL():string|null
HAVAL(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
HAVAL(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 132);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - JH
 * Cryptographic hash function with a length of 224 to 512 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
JH():string|null
JH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
JH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 134);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - LSH
 * Cryptographic hash function with a length of 256 to 512 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
LSH():string|null
LSH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
LSH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 136);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - MD2
 * Cryptographic hash function with a length of 128 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
MD2():string|null
MD2(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MD2(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 138);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - MD4
 * Cryptographic hash function with a length of 128 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
MD4():string|null
MD4(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MD4(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 140);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - MD5
 * Cryptographic hash function with a length of 128 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
MD5():string|null
MD5(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MD5(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 142);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - MD6
 * Cryptographic hash function with a length of up to 512 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
MD6():string|null
MD6(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
MD6(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 144);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - RadioGatún
 * Cryptographic hash function with arbitrary length.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
RADIOGATUN():string|null
RADIOGATUN(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
RADIOGATUN(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 146);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - RIPEMD
 * Cryptographic hash function with a length of 128 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
RIPEMD():string|null
RIPEMD(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
RIPEMD(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 148);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - RIPEMD-128
 * Cryptographic hash function with a length of 128 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
RIPEMD_128():string|null
RIPEMD_128(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
RIPEMD_128(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 150);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - RIPEMD-256
 * Cryptographic hash function with a length of 256 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
RIPEMD_256():string|null
RIPEMD_256(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
RIPEMD_256(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 152);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - RIPEMD-320
 * Cryptographic hash function with a length of 320 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
RIPEMD_320():string|null
RIPEMD_320(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
RIPEMD_320(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 154);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - SHA-1
 * Cryptographic hash function with a length of 160 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
SHA_1():string|null
SHA_1(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SHA_1(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 156);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - SHA-224
 * Cryptographic hash function with a length of 224 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
SHA_224():string|null
SHA_224(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SHA_224(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 158);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - SHA-256
 * Cryptographic hash function with a length of 256 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
SHA_256():string|null
SHA_256(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SHA_256(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 160);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - SHA-384
 * Cryptographic hash function with a length of 384 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
SHA_384():string|null
SHA_384(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SHA_384(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 162);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - SHA-512
 * Cryptographic hash function with a length of 512 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
SHA_512():string|null
SHA_512(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SHA_512(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 164);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - SHA-3
 * Cryptographic hash function with arbitrary length.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
SHA_3():string|null
SHA_3(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SHA_3(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 166);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - Skein
 * Cryptographic hash function with arbitrary length.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
SKEIN():string|null
SKEIN(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SKEIN(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 168);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - Snefru
 * Cryptographic hash function with a length of 128 or 256 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
SNEFRU():string|null
SNEFRU(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SNEFRU(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 170);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - Spectral Hash
 * Cryptographic hash function with a length of 512 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
SPECTRAL_HASH():string|null
SPECTRAL_HASH(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SPECTRAL_HASH(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 172);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - Streebog
 * Cryptographic hash function with a length of 256 or 512 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
STREEBOG():string|null
STREEBOG(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
STREEBOG(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 174);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - SWIFFT
 * Cryptographic hash function with a length of 512 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
SWIFFT():string|null
SWIFFT(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SWIFFT(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 176);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - Tiger
 * Cryptographic hash function with a length of 192 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
TIGER():string|null
TIGER(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
TIGER(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 178);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unkeyed Cryptographic Hash Function - Whirlpool
 * Cryptographic hash function with a length of 512 bits.
 * Refer to the Unkeyed cryptographic hash functions section for details.
 */
WHIRLPOOL():string|null
WHIRLPOOL(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
WHIRLPOOL(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 180);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startPNM(builder:flatbuffers.Builder) {
  builder.startObject(89);
}

static addIpfsCid(builder:flatbuffers.Builder, IPFS_CIDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, IPFS_CIDOffset, 0);
}

static addEthDigitalSignature(builder:flatbuffers.Builder, ETH_DIGITAL_SIGNATUREOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ETH_DIGITAL_SIGNATUREOffset, 0);
}

static addSha512FileHash(builder:flatbuffers.Builder, SHA_512_FILE_HASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, SHA_512_FILE_HASHOffset, 0);
}

static addSha256FileHash(builder:flatbuffers.Builder, SHA_256_FILE_HASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, SHA_256_FILE_HASHOffset, 0);
}

static addMd5FileDigest(builder:flatbuffers.Builder, MD5_FILE_DIGESTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, MD5_FILE_DIGESTOffset, 0);
}

static addSha1FileHash(builder:flatbuffers.Builder, SHA_1_FILE_HASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, SHA_1_FILE_HASHOffset, 0);
}

static addArgon2FileHash(builder:flatbuffers.Builder, ARGON2_FILE_HASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, ARGON2_FILE_HASHOffset, 0);
}

static addBlake2BFileHash(builder:flatbuffers.Builder, BLAKE2B_FILE_HASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, BLAKE2B_FILE_HASHOffset, 0);
}

static addSha3FileHash(builder:flatbuffers.Builder, SHA_3_FILE_HASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, SHA_3_FILE_HASHOffset, 0);
}

static addRipemd160FileHash(builder:flatbuffers.Builder, RIPEMD_160_FILE_HASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, RIPEMD_160_FILE_HASHOffset, 0);
}

static addWhirlpoolFileHash(builder:flatbuffers.Builder, WHIRLPOOL_FILE_HASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, WHIRLPOOL_FILE_HASHOffset, 0);
}

static addTigerFileHash(builder:flatbuffers.Builder, TIGER_FILE_HASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, TIGER_FILE_HASHOffset, 0);
}

static addCrc32(builder:flatbuffers.Builder, CRC32Offset:flatbuffers.Offset) {
  builder.addFieldOffset(12, CRC32Offset, 0);
}

static addAdler32Checksum(builder:flatbuffers.Builder, ADLER32_CHECKSUMOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, ADLER32_CHECKSUMOffset, 0);
}

static addRabinFingerprint(builder:flatbuffers.Builder, RABIN_FINGERPRINTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, RABIN_FINGERPRINTOffset, 0);
}

static addPearsonHashing(builder:flatbuffers.Builder, PEARSON_HASHINGOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, PEARSON_HASHINGOffset, 0);
}

static addBlake2KeyedHash(builder:flatbuffers.Builder, BLAKE2_KEYED_HASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, BLAKE2_KEYED_HASHOffset, 0);
}

static addBlake256(builder:flatbuffers.Builder, BLAKE_256Offset:flatbuffers.Offset) {
  builder.addFieldOffset(17, BLAKE_256Offset, 0);
}

static addCrc8(builder:flatbuffers.Builder, CRC8Offset:flatbuffers.Offset) {
  builder.addFieldOffset(18, CRC8Offset, 0);
}

static addCrc16(builder:flatbuffers.Builder, CRC16Offset:flatbuffers.Offset) {
  builder.addFieldOffset(19, CRC16Offset, 0);
}

static addCrc64(builder:flatbuffers.Builder, CRC64Offset:flatbuffers.Offset) {
  builder.addFieldOffset(20, CRC64Offset, 0);
}

static addBsdChecksum(builder:flatbuffers.Builder, BSD_CHECKSUMOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, BSD_CHECKSUMOffset, 0);
}

static addSysvChecksum(builder:flatbuffers.Builder, SYSV_CHECKSUMOffset:flatbuffers.Offset) {
  builder.addFieldOffset(22, SYSV_CHECKSUMOffset, 0);
}

static addSum8(builder:flatbuffers.Builder, SUM8Offset:flatbuffers.Offset) {
  builder.addFieldOffset(23, SUM8Offset, 0);
}

static addInternetChecksum(builder:flatbuffers.Builder, INTERNET_CHECKSUMOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, INTERNET_CHECKSUMOffset, 0);
}

static addSum24(builder:flatbuffers.Builder, SUM24Offset:flatbuffers.Offset) {
  builder.addFieldOffset(25, SUM24Offset, 0);
}

static addSum32(builder:flatbuffers.Builder, SUM32Offset:flatbuffers.Offset) {
  builder.addFieldOffset(26, SUM32Offset, 0);
}

static addFletcher4(builder:flatbuffers.Builder, FLETCHER_4Offset:flatbuffers.Offset) {
  builder.addFieldOffset(27, FLETCHER_4Offset, 0);
}

static addFletcher8(builder:flatbuffers.Builder, FLETCHER_8Offset:flatbuffers.Offset) {
  builder.addFieldOffset(28, FLETCHER_8Offset, 0);
}

static addFletcher16(builder:flatbuffers.Builder, FLETCHER_16Offset:flatbuffers.Offset) {
  builder.addFieldOffset(29, FLETCHER_16Offset, 0);
}

static addFletcher32(builder:flatbuffers.Builder, FLETCHER_32Offset:flatbuffers.Offset) {
  builder.addFieldOffset(30, FLETCHER_32Offset, 0);
}

static addLunhAlgorithm(builder:flatbuffers.Builder, LUNH_ALGORITHMOffset:flatbuffers.Offset) {
  builder.addFieldOffset(31, LUNH_ALGORITHMOffset, 0);
}

static addVerhoeffAlgorithm(builder:flatbuffers.Builder, VERHOEFF_ALGORITHMOffset:flatbuffers.Offset) {
  builder.addFieldOffset(32, VERHOEFF_ALGORITHMOffset, 0);
}

static addDammAlgorithm(builder:flatbuffers.Builder, DAMM_ALGORITHMOffset:flatbuffers.Offset) {
  builder.addFieldOffset(33, DAMM_ALGORITHMOffset, 0);
}

static addTabulationHashing(builder:flatbuffers.Builder, TABULATION_HASHINGOffset:flatbuffers.Offset) {
  builder.addFieldOffset(34, TABULATION_HASHINGOffset, 0);
}

static addUniversalOneWayHashFunction(builder:flatbuffers.Builder, UNIVERSAL_ONE_WAY_HASH_FUNCTIONOffset:flatbuffers.Offset) {
  builder.addFieldOffset(35, UNIVERSAL_ONE_WAY_HASH_FUNCTIONOffset, 0);
}

static addZobristHashing(builder:flatbuffers.Builder, ZOBRIST_HASHINGOffset:flatbuffers.Offset) {
  builder.addFieldOffset(36, ZOBRIST_HASHINGOffset, 0);
}

static addPaulHsiehsSuperfasthash(builder:flatbuffers.Builder, PAUL_HSIEHS_SUPERFASTHASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(37, PAUL_HSIEHS_SUPERFASTHASHOffset, 0);
}

static addBuzhash(builder:flatbuffers.Builder, BUZHASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(38, BUZHASHOffset, 0);
}

static addFnvHash(builder:flatbuffers.Builder, FNV_HASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(39, FNV_HASHOffset, 0);
}

static addJenkinsHashFunction(builder:flatbuffers.Builder, JENKINS_HASH_FUNCTIONOffset:flatbuffers.Offset) {
  builder.addFieldOffset(40, JENKINS_HASH_FUNCTIONOffset, 0);
}

static addBernsteinsHashDjb2(builder:flatbuffers.Builder, BERNSTEINS_HASH_DJB2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(41, BERNSTEINS_HASH_DJB2Offset, 0);
}

static addPjwHashElfHash(builder:flatbuffers.Builder, PJW_HASH_ELF_HASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(42, PJW_HASH_ELF_HASHOffset, 0);
}

static addMurmurhash(builder:flatbuffers.Builder, MURMURHASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(43, MURMURHASHOffset, 0);
}

static addFastHash(builder:flatbuffers.Builder, FAST_HASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(44, FAST_HASHOffset, 0);
}

static addSpookyhash(builder:flatbuffers.Builder, SPOOKYHASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(45, SPOOKYHASHOffset, 0);
}

static addCityhash(builder:flatbuffers.Builder, CITYHASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(46, CITYHASHOffset, 0);
}

static addFarmhash(builder:flatbuffers.Builder, FARMHASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(47, FARMHASHOffset, 0);
}

static addMetrohash(builder:flatbuffers.Builder, METROHASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(48, METROHASHOffset, 0);
}

static addNumericHash(builder:flatbuffers.Builder, NUMERIC_HASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(49, NUMERIC_HASHOffset, 0);
}

static addXxhash(builder:flatbuffers.Builder, XXHASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(50, XXHASHOffset, 0);
}

static addT1Ha(builder:flatbuffers.Builder, T1HAOffset:flatbuffers.Offset) {
  builder.addFieldOffset(51, T1HAOffset, 0);
}

static addGxhash(builder:flatbuffers.Builder, GXHASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(52, GXHASHOffset, 0);
}

static addPhash(builder:flatbuffers.Builder, PHASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(53, PHASHOffset, 0);
}

static addDhash(builder:flatbuffers.Builder, DHASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(54, DHASHOffset, 0);
}

static addSdbm(builder:flatbuffers.Builder, SDBMOffset:flatbuffers.Offset) {
  builder.addFieldOffset(55, SDBMOffset, 0);
}

static addOsdbHash(builder:flatbuffers.Builder, OSDB_HASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(56, OSDB_HASHOffset, 0);
}

static addKomihash(builder:flatbuffers.Builder, KOMIHASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(57, KOMIHASHOffset, 0);
}

static addBlake3(builder:flatbuffers.Builder, BLAKE3Offset:flatbuffers.Offset) {
  builder.addFieldOffset(58, BLAKE3Offset, 0);
}

static addEcoh(builder:flatbuffers.Builder, ECOHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(59, ECOHOffset, 0);
}

static addFsb(builder:flatbuffers.Builder, FSBOffset:flatbuffers.Offset) {
  builder.addFieldOffset(60, FSBOffset, 0);
}

static addGost(builder:flatbuffers.Builder, GOSTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(61, GOSTOffset, 0);
}

static addGrostl(builder:flatbuffers.Builder, GROSTLOffset:flatbuffers.Offset) {
  builder.addFieldOffset(62, GROSTLOffset, 0);
}

static addHas160(builder:flatbuffers.Builder, HAS_160Offset:flatbuffers.Offset) {
  builder.addFieldOffset(63, HAS_160Offset, 0);
}

static addHaval(builder:flatbuffers.Builder, HAVALOffset:flatbuffers.Offset) {
  builder.addFieldOffset(64, HAVALOffset, 0);
}

static addJh(builder:flatbuffers.Builder, JHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(65, JHOffset, 0);
}

static addLsh(builder:flatbuffers.Builder, LSHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(66, LSHOffset, 0);
}

static addMd2(builder:flatbuffers.Builder, MD2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(67, MD2Offset, 0);
}

static addMd4(builder:flatbuffers.Builder, MD4Offset:flatbuffers.Offset) {
  builder.addFieldOffset(68, MD4Offset, 0);
}

static addMd5(builder:flatbuffers.Builder, MD5Offset:flatbuffers.Offset) {
  builder.addFieldOffset(69, MD5Offset, 0);
}

static addMd6(builder:flatbuffers.Builder, MD6Offset:flatbuffers.Offset) {
  builder.addFieldOffset(70, MD6Offset, 0);
}

static addRadiogatun(builder:flatbuffers.Builder, RADIOGATUNOffset:flatbuffers.Offset) {
  builder.addFieldOffset(71, RADIOGATUNOffset, 0);
}

static addRipemd(builder:flatbuffers.Builder, RIPEMDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(72, RIPEMDOffset, 0);
}

static addRipemd128(builder:flatbuffers.Builder, RIPEMD_128Offset:flatbuffers.Offset) {
  builder.addFieldOffset(73, RIPEMD_128Offset, 0);
}

static addRipemd256(builder:flatbuffers.Builder, RIPEMD_256Offset:flatbuffers.Offset) {
  builder.addFieldOffset(74, RIPEMD_256Offset, 0);
}

static addRipemd320(builder:flatbuffers.Builder, RIPEMD_320Offset:flatbuffers.Offset) {
  builder.addFieldOffset(75, RIPEMD_320Offset, 0);
}

static addSha1(builder:flatbuffers.Builder, SHA_1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(76, SHA_1Offset, 0);
}

static addSha224(builder:flatbuffers.Builder, SHA_224Offset:flatbuffers.Offset) {
  builder.addFieldOffset(77, SHA_224Offset, 0);
}

static addSha256(builder:flatbuffers.Builder, SHA_256Offset:flatbuffers.Offset) {
  builder.addFieldOffset(78, SHA_256Offset, 0);
}

static addSha384(builder:flatbuffers.Builder, SHA_384Offset:flatbuffers.Offset) {
  builder.addFieldOffset(79, SHA_384Offset, 0);
}

static addSha512(builder:flatbuffers.Builder, SHA_512Offset:flatbuffers.Offset) {
  builder.addFieldOffset(80, SHA_512Offset, 0);
}

static addSha3(builder:flatbuffers.Builder, SHA_3Offset:flatbuffers.Offset) {
  builder.addFieldOffset(81, SHA_3Offset, 0);
}

static addSkein(builder:flatbuffers.Builder, SKEINOffset:flatbuffers.Offset) {
  builder.addFieldOffset(82, SKEINOffset, 0);
}

static addSnefru(builder:flatbuffers.Builder, SNEFRUOffset:flatbuffers.Offset) {
  builder.addFieldOffset(83, SNEFRUOffset, 0);
}

static addSpectralHash(builder:flatbuffers.Builder, SPECTRAL_HASHOffset:flatbuffers.Offset) {
  builder.addFieldOffset(84, SPECTRAL_HASHOffset, 0);
}

static addStreebog(builder:flatbuffers.Builder, STREEBOGOffset:flatbuffers.Offset) {
  builder.addFieldOffset(85, STREEBOGOffset, 0);
}

static addSwifft(builder:flatbuffers.Builder, SWIFFTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(86, SWIFFTOffset, 0);
}

static addTiger(builder:flatbuffers.Builder, TIGEROffset:flatbuffers.Offset) {
  builder.addFieldOffset(87, TIGEROffset, 0);
}

static addWhirlpool(builder:flatbuffers.Builder, WHIRLPOOLOffset:flatbuffers.Offset) {
  builder.addFieldOffset(88, WHIRLPOOLOffset, 0);
}

static endPNM(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPNMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$PNM');
}

static finishSizePrefixedPNMBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$PNM', true);
}

static createPNM(builder:flatbuffers.Builder, IPFS_CIDOffset:flatbuffers.Offset, ETH_DIGITAL_SIGNATUREOffset:flatbuffers.Offset, SHA_512_FILE_HASHOffset:flatbuffers.Offset, SHA_256_FILE_HASHOffset:flatbuffers.Offset, MD5_FILE_DIGESTOffset:flatbuffers.Offset, SHA_1_FILE_HASHOffset:flatbuffers.Offset, ARGON2_FILE_HASHOffset:flatbuffers.Offset, BLAKE2B_FILE_HASHOffset:flatbuffers.Offset, SHA_3_FILE_HASHOffset:flatbuffers.Offset, RIPEMD_160_FILE_HASHOffset:flatbuffers.Offset, WHIRLPOOL_FILE_HASHOffset:flatbuffers.Offset, TIGER_FILE_HASHOffset:flatbuffers.Offset, CRC32Offset:flatbuffers.Offset, ADLER32_CHECKSUMOffset:flatbuffers.Offset, RABIN_FINGERPRINTOffset:flatbuffers.Offset, PEARSON_HASHINGOffset:flatbuffers.Offset, BLAKE2_KEYED_HASHOffset:flatbuffers.Offset, BLAKE_256Offset:flatbuffers.Offset, CRC8Offset:flatbuffers.Offset, CRC16Offset:flatbuffers.Offset, CRC64Offset:flatbuffers.Offset, BSD_CHECKSUMOffset:flatbuffers.Offset, SYSV_CHECKSUMOffset:flatbuffers.Offset, SUM8Offset:flatbuffers.Offset, INTERNET_CHECKSUMOffset:flatbuffers.Offset, SUM24Offset:flatbuffers.Offset, SUM32Offset:flatbuffers.Offset, FLETCHER_4Offset:flatbuffers.Offset, FLETCHER_8Offset:flatbuffers.Offset, FLETCHER_16Offset:flatbuffers.Offset, FLETCHER_32Offset:flatbuffers.Offset, LUNH_ALGORITHMOffset:flatbuffers.Offset, VERHOEFF_ALGORITHMOffset:flatbuffers.Offset, DAMM_ALGORITHMOffset:flatbuffers.Offset, TABULATION_HASHINGOffset:flatbuffers.Offset, UNIVERSAL_ONE_WAY_HASH_FUNCTIONOffset:flatbuffers.Offset, ZOBRIST_HASHINGOffset:flatbuffers.Offset, PAUL_HSIEHS_SUPERFASTHASHOffset:flatbuffers.Offset, BUZHASHOffset:flatbuffers.Offset, FNV_HASHOffset:flatbuffers.Offset, JENKINS_HASH_FUNCTIONOffset:flatbuffers.Offset, BERNSTEINS_HASH_DJB2Offset:flatbuffers.Offset, PJW_HASH_ELF_HASHOffset:flatbuffers.Offset, MURMURHASHOffset:flatbuffers.Offset, FAST_HASHOffset:flatbuffers.Offset, SPOOKYHASHOffset:flatbuffers.Offset, CITYHASHOffset:flatbuffers.Offset, FARMHASHOffset:flatbuffers.Offset, METROHASHOffset:flatbuffers.Offset, NUMERIC_HASHOffset:flatbuffers.Offset, XXHASHOffset:flatbuffers.Offset, T1HAOffset:flatbuffers.Offset, GXHASHOffset:flatbuffers.Offset, PHASHOffset:flatbuffers.Offset, DHASHOffset:flatbuffers.Offset, SDBMOffset:flatbuffers.Offset, OSDB_HASHOffset:flatbuffers.Offset, KOMIHASHOffset:flatbuffers.Offset, BLAKE3Offset:flatbuffers.Offset, ECOHOffset:flatbuffers.Offset, FSBOffset:flatbuffers.Offset, GOSTOffset:flatbuffers.Offset, GROSTLOffset:flatbuffers.Offset, HAS_160Offset:flatbuffers.Offset, HAVALOffset:flatbuffers.Offset, JHOffset:flatbuffers.Offset, LSHOffset:flatbuffers.Offset, MD2Offset:flatbuffers.Offset, MD4Offset:flatbuffers.Offset, MD5Offset:flatbuffers.Offset, MD6Offset:flatbuffers.Offset, RADIOGATUNOffset:flatbuffers.Offset, RIPEMDOffset:flatbuffers.Offset, RIPEMD_128Offset:flatbuffers.Offset, RIPEMD_256Offset:flatbuffers.Offset, RIPEMD_320Offset:flatbuffers.Offset, SHA_1Offset:flatbuffers.Offset, SHA_224Offset:flatbuffers.Offset, SHA_256Offset:flatbuffers.Offset, SHA_384Offset:flatbuffers.Offset, SHA_512Offset:flatbuffers.Offset, SHA_3Offset:flatbuffers.Offset, SKEINOffset:flatbuffers.Offset, SNEFRUOffset:flatbuffers.Offset, SPECTRAL_HASHOffset:flatbuffers.Offset, STREEBOGOffset:flatbuffers.Offset, SWIFFTOffset:flatbuffers.Offset, TIGEROffset:flatbuffers.Offset, WHIRLPOOLOffset:flatbuffers.Offset):flatbuffers.Offset {
  PNM.startPNM(builder);
  PNM.addIpfsCid(builder, IPFS_CIDOffset);
  PNM.addEthDigitalSignature(builder, ETH_DIGITAL_SIGNATUREOffset);
  PNM.addSha512FileHash(builder, SHA_512_FILE_HASHOffset);
  PNM.addSha256FileHash(builder, SHA_256_FILE_HASHOffset);
  PNM.addMd5FileDigest(builder, MD5_FILE_DIGESTOffset);
  PNM.addSha1FileHash(builder, SHA_1_FILE_HASHOffset);
  PNM.addArgon2FileHash(builder, ARGON2_FILE_HASHOffset);
  PNM.addBlake2BFileHash(builder, BLAKE2B_FILE_HASHOffset);
  PNM.addSha3FileHash(builder, SHA_3_FILE_HASHOffset);
  PNM.addRipemd160FileHash(builder, RIPEMD_160_FILE_HASHOffset);
  PNM.addWhirlpoolFileHash(builder, WHIRLPOOL_FILE_HASHOffset);
  PNM.addTigerFileHash(builder, TIGER_FILE_HASHOffset);
  PNM.addCrc32(builder, CRC32Offset);
  PNM.addAdler32Checksum(builder, ADLER32_CHECKSUMOffset);
  PNM.addRabinFingerprint(builder, RABIN_FINGERPRINTOffset);
  PNM.addPearsonHashing(builder, PEARSON_HASHINGOffset);
  PNM.addBlake2KeyedHash(builder, BLAKE2_KEYED_HASHOffset);
  PNM.addBlake256(builder, BLAKE_256Offset);
  PNM.addCrc8(builder, CRC8Offset);
  PNM.addCrc16(builder, CRC16Offset);
  PNM.addCrc64(builder, CRC64Offset);
  PNM.addBsdChecksum(builder, BSD_CHECKSUMOffset);
  PNM.addSysvChecksum(builder, SYSV_CHECKSUMOffset);
  PNM.addSum8(builder, SUM8Offset);
  PNM.addInternetChecksum(builder, INTERNET_CHECKSUMOffset);
  PNM.addSum24(builder, SUM24Offset);
  PNM.addSum32(builder, SUM32Offset);
  PNM.addFletcher4(builder, FLETCHER_4Offset);
  PNM.addFletcher8(builder, FLETCHER_8Offset);
  PNM.addFletcher16(builder, FLETCHER_16Offset);
  PNM.addFletcher32(builder, FLETCHER_32Offset);
  PNM.addLunhAlgorithm(builder, LUNH_ALGORITHMOffset);
  PNM.addVerhoeffAlgorithm(builder, VERHOEFF_ALGORITHMOffset);
  PNM.addDammAlgorithm(builder, DAMM_ALGORITHMOffset);
  PNM.addTabulationHashing(builder, TABULATION_HASHINGOffset);
  PNM.addUniversalOneWayHashFunction(builder, UNIVERSAL_ONE_WAY_HASH_FUNCTIONOffset);
  PNM.addZobristHashing(builder, ZOBRIST_HASHINGOffset);
  PNM.addPaulHsiehsSuperfasthash(builder, PAUL_HSIEHS_SUPERFASTHASHOffset);
  PNM.addBuzhash(builder, BUZHASHOffset);
  PNM.addFnvHash(builder, FNV_HASHOffset);
  PNM.addJenkinsHashFunction(builder, JENKINS_HASH_FUNCTIONOffset);
  PNM.addBernsteinsHashDjb2(builder, BERNSTEINS_HASH_DJB2Offset);
  PNM.addPjwHashElfHash(builder, PJW_HASH_ELF_HASHOffset);
  PNM.addMurmurhash(builder, MURMURHASHOffset);
  PNM.addFastHash(builder, FAST_HASHOffset);
  PNM.addSpookyhash(builder, SPOOKYHASHOffset);
  PNM.addCityhash(builder, CITYHASHOffset);
  PNM.addFarmhash(builder, FARMHASHOffset);
  PNM.addMetrohash(builder, METROHASHOffset);
  PNM.addNumericHash(builder, NUMERIC_HASHOffset);
  PNM.addXxhash(builder, XXHASHOffset);
  PNM.addT1Ha(builder, T1HAOffset);
  PNM.addGxhash(builder, GXHASHOffset);
  PNM.addPhash(builder, PHASHOffset);
  PNM.addDhash(builder, DHASHOffset);
  PNM.addSdbm(builder, SDBMOffset);
  PNM.addOsdbHash(builder, OSDB_HASHOffset);
  PNM.addKomihash(builder, KOMIHASHOffset);
  PNM.addBlake3(builder, BLAKE3Offset);
  PNM.addEcoh(builder, ECOHOffset);
  PNM.addFsb(builder, FSBOffset);
  PNM.addGost(builder, GOSTOffset);
  PNM.addGrostl(builder, GROSTLOffset);
  PNM.addHas160(builder, HAS_160Offset);
  PNM.addHaval(builder, HAVALOffset);
  PNM.addJh(builder, JHOffset);
  PNM.addLsh(builder, LSHOffset);
  PNM.addMd2(builder, MD2Offset);
  PNM.addMd4(builder, MD4Offset);
  PNM.addMd5(builder, MD5Offset);
  PNM.addMd6(builder, MD6Offset);
  PNM.addRadiogatun(builder, RADIOGATUNOffset);
  PNM.addRipemd(builder, RIPEMDOffset);
  PNM.addRipemd128(builder, RIPEMD_128Offset);
  PNM.addRipemd256(builder, RIPEMD_256Offset);
  PNM.addRipemd320(builder, RIPEMD_320Offset);
  PNM.addSha1(builder, SHA_1Offset);
  PNM.addSha224(builder, SHA_224Offset);
  PNM.addSha256(builder, SHA_256Offset);
  PNM.addSha384(builder, SHA_384Offset);
  PNM.addSha512(builder, SHA_512Offset);
  PNM.addSha3(builder, SHA_3Offset);
  PNM.addSkein(builder, SKEINOffset);
  PNM.addSnefru(builder, SNEFRUOffset);
  PNM.addSpectralHash(builder, SPECTRAL_HASHOffset);
  PNM.addStreebog(builder, STREEBOGOffset);
  PNM.addSwifft(builder, SWIFFTOffset);
  PNM.addTiger(builder, TIGEROffset);
  PNM.addWhirlpool(builder, WHIRLPOOLOffset);
  return PNM.endPNM(builder);
}

unpack(): PNMT {
  return new PNMT(
    this.IPFS_CID(),
    this.ETH_DIGITAL_SIGNATURE(),
    this.SHA_512_FILE_HASH(),
    this.SHA_256_FILE_HASH(),
    this.MD5_FILE_DIGEST(),
    this.SHA_1_FILE_HASH(),
    this.ARGON2_FILE_HASH(),
    this.BLAKE2B_FILE_HASH(),
    this.SHA_3_FILE_HASH(),
    this.RIPEMD_160_FILE_HASH(),
    this.WHIRLPOOL_FILE_HASH(),
    this.TIGER_FILE_HASH(),
    this.CRC32(),
    this.ADLER32_CHECKSUM(),
    this.RABIN_FINGERPRINT(),
    this.PEARSON_HASHING(),
    this.BLAKE2_KEYED_HASH(),
    this.BLAKE_256(),
    this.CRC8(),
    this.CRC16(),
    this.CRC64(),
    this.BSD_CHECKSUM(),
    this.SYSV_CHECKSUM(),
    this.SUM8(),
    this.INTERNET_CHECKSUM(),
    this.SUM24(),
    this.SUM32(),
    this.FLETCHER_4(),
    this.FLETCHER_8(),
    this.FLETCHER_16(),
    this.FLETCHER_32(),
    this.LUNH_ALGORITHM(),
    this.VERHOEFF_ALGORITHM(),
    this.DAMM_ALGORITHM(),
    this.TABULATION_HASHING(),
    this.UNIVERSAL_ONE_WAY_HASH_FUNCTION(),
    this.ZOBRIST_HASHING(),
    this.PAUL_HSIEHS_SUPERFASTHASH(),
    this.BUZHASH(),
    this.FNV_HASH(),
    this.JENKINS_HASH_FUNCTION(),
    this.BERNSTEINS_HASH_DJB2(),
    this.PJW_HASH_ELF_HASH(),
    this.MURMURHASH(),
    this.FAST_HASH(),
    this.SPOOKYHASH(),
    this.CITYHASH(),
    this.FARMHASH(),
    this.METROHASH(),
    this.NUMERIC_HASH(),
    this.XXHASH(),
    this.T1HA(),
    this.GXHASH(),
    this.PHASH(),
    this.DHASH(),
    this.SDBM(),
    this.OSDB_HASH(),
    this.KOMIHASH(),
    this.BLAKE3(),
    this.ECOH(),
    this.FSB(),
    this.GOST(),
    this.GROSTL(),
    this.HAS_160(),
    this.HAVAL(),
    this.JH(),
    this.LSH(),
    this.MD2(),
    this.MD4(),
    this.MD5(),
    this.MD6(),
    this.RADIOGATUN(),
    this.RIPEMD(),
    this.RIPEMD_128(),
    this.RIPEMD_256(),
    this.RIPEMD_320(),
    this.SHA_1(),
    this.SHA_224(),
    this.SHA_256(),
    this.SHA_384(),
    this.SHA_512(),
    this.SHA_3(),
    this.SKEIN(),
    this.SNEFRU(),
    this.SPECTRAL_HASH(),
    this.STREEBOG(),
    this.SWIFFT(),
    this.TIGER(),
    this.WHIRLPOOL()
  );
}


unpackTo(_o: PNMT): void {
  _o.IPFS_CID = this.IPFS_CID();
  _o.ETH_DIGITAL_SIGNATURE = this.ETH_DIGITAL_SIGNATURE();
  _o.SHA_512_FILE_HASH = this.SHA_512_FILE_HASH();
  _o.SHA_256_FILE_HASH = this.SHA_256_FILE_HASH();
  _o.MD5_FILE_DIGEST = this.MD5_FILE_DIGEST();
  _o.SHA_1_FILE_HASH = this.SHA_1_FILE_HASH();
  _o.ARGON2_FILE_HASH = this.ARGON2_FILE_HASH();
  _o.BLAKE2B_FILE_HASH = this.BLAKE2B_FILE_HASH();
  _o.SHA_3_FILE_HASH = this.SHA_3_FILE_HASH();
  _o.RIPEMD_160_FILE_HASH = this.RIPEMD_160_FILE_HASH();
  _o.WHIRLPOOL_FILE_HASH = this.WHIRLPOOL_FILE_HASH();
  _o.TIGER_FILE_HASH = this.TIGER_FILE_HASH();
  _o.CRC32 = this.CRC32();
  _o.ADLER32_CHECKSUM = this.ADLER32_CHECKSUM();
  _o.RABIN_FINGERPRINT = this.RABIN_FINGERPRINT();
  _o.PEARSON_HASHING = this.PEARSON_HASHING();
  _o.BLAKE2_KEYED_HASH = this.BLAKE2_KEYED_HASH();
  _o.BLAKE_256 = this.BLAKE_256();
  _o.CRC8 = this.CRC8();
  _o.CRC16 = this.CRC16();
  _o.CRC64 = this.CRC64();
  _o.BSD_CHECKSUM = this.BSD_CHECKSUM();
  _o.SYSV_CHECKSUM = this.SYSV_CHECKSUM();
  _o.SUM8 = this.SUM8();
  _o.INTERNET_CHECKSUM = this.INTERNET_CHECKSUM();
  _o.SUM24 = this.SUM24();
  _o.SUM32 = this.SUM32();
  _o.FLETCHER_4 = this.FLETCHER_4();
  _o.FLETCHER_8 = this.FLETCHER_8();
  _o.FLETCHER_16 = this.FLETCHER_16();
  _o.FLETCHER_32 = this.FLETCHER_32();
  _o.LUNH_ALGORITHM = this.LUNH_ALGORITHM();
  _o.VERHOEFF_ALGORITHM = this.VERHOEFF_ALGORITHM();
  _o.DAMM_ALGORITHM = this.DAMM_ALGORITHM();
  _o.TABULATION_HASHING = this.TABULATION_HASHING();
  _o.UNIVERSAL_ONE_WAY_HASH_FUNCTION = this.UNIVERSAL_ONE_WAY_HASH_FUNCTION();
  _o.ZOBRIST_HASHING = this.ZOBRIST_HASHING();
  _o.PAUL_HSIEHS_SUPERFASTHASH = this.PAUL_HSIEHS_SUPERFASTHASH();
  _o.BUZHASH = this.BUZHASH();
  _o.FNV_HASH = this.FNV_HASH();
  _o.JENKINS_HASH_FUNCTION = this.JENKINS_HASH_FUNCTION();
  _o.BERNSTEINS_HASH_DJB2 = this.BERNSTEINS_HASH_DJB2();
  _o.PJW_HASH_ELF_HASH = this.PJW_HASH_ELF_HASH();
  _o.MURMURHASH = this.MURMURHASH();
  _o.FAST_HASH = this.FAST_HASH();
  _o.SPOOKYHASH = this.SPOOKYHASH();
  _o.CITYHASH = this.CITYHASH();
  _o.FARMHASH = this.FARMHASH();
  _o.METROHASH = this.METROHASH();
  _o.NUMERIC_HASH = this.NUMERIC_HASH();
  _o.XXHASH = this.XXHASH();
  _o.T1HA = this.T1HA();
  _o.GXHASH = this.GXHASH();
  _o.PHASH = this.PHASH();
  _o.DHASH = this.DHASH();
  _o.SDBM = this.SDBM();
  _o.OSDB_HASH = this.OSDB_HASH();
  _o.KOMIHASH = this.KOMIHASH();
  _o.BLAKE3 = this.BLAKE3();
  _o.ECOH = this.ECOH();
  _o.FSB = this.FSB();
  _o.GOST = this.GOST();
  _o.GROSTL = this.GROSTL();
  _o.HAS_160 = this.HAS_160();
  _o.HAVAL = this.HAVAL();
  _o.JH = this.JH();
  _o.LSH = this.LSH();
  _o.MD2 = this.MD2();
  _o.MD4 = this.MD4();
  _o.MD5 = this.MD5();
  _o.MD6 = this.MD6();
  _o.RADIOGATUN = this.RADIOGATUN();
  _o.RIPEMD = this.RIPEMD();
  _o.RIPEMD_128 = this.RIPEMD_128();
  _o.RIPEMD_256 = this.RIPEMD_256();
  _o.RIPEMD_320 = this.RIPEMD_320();
  _o.SHA_1 = this.SHA_1();
  _o.SHA_224 = this.SHA_224();
  _o.SHA_256 = this.SHA_256();
  _o.SHA_384 = this.SHA_384();
  _o.SHA_512 = this.SHA_512();
  _o.SHA_3 = this.SHA_3();
  _o.SKEIN = this.SKEIN();
  _o.SNEFRU = this.SNEFRU();
  _o.SPECTRAL_HASH = this.SPECTRAL_HASH();
  _o.STREEBOG = this.STREEBOG();
  _o.SWIFFT = this.SWIFFT();
  _o.TIGER = this.TIGER();
  _o.WHIRLPOOL = this.WHIRLPOOL();
}
}

export class PNMT implements flatbuffers.IGeneratedObject {
constructor(
  public IPFS_CID: string|Uint8Array|null = null,
  public ETH_DIGITAL_SIGNATURE: string|Uint8Array|null = null,
  public SHA_512_FILE_HASH: string|Uint8Array|null = null,
  public SHA_256_FILE_HASH: string|Uint8Array|null = null,
  public MD5_FILE_DIGEST: string|Uint8Array|null = null,
  public SHA_1_FILE_HASH: string|Uint8Array|null = null,
  public ARGON2_FILE_HASH: string|Uint8Array|null = null,
  public BLAKE2B_FILE_HASH: string|Uint8Array|null = null,
  public SHA_3_FILE_HASH: string|Uint8Array|null = null,
  public RIPEMD_160_FILE_HASH: string|Uint8Array|null = null,
  public WHIRLPOOL_FILE_HASH: string|Uint8Array|null = null,
  public TIGER_FILE_HASH: string|Uint8Array|null = null,
  public CRC32: string|Uint8Array|null = null,
  public ADLER32_CHECKSUM: string|Uint8Array|null = null,
  public RABIN_FINGERPRINT: string|Uint8Array|null = null,
  public PEARSON_HASHING: string|Uint8Array|null = null,
  public BLAKE2_KEYED_HASH: string|Uint8Array|null = null,
  public BLAKE_256: string|Uint8Array|null = null,
  public CRC8: string|Uint8Array|null = null,
  public CRC16: string|Uint8Array|null = null,
  public CRC64: string|Uint8Array|null = null,
  public BSD_CHECKSUM: string|Uint8Array|null = null,
  public SYSV_CHECKSUM: string|Uint8Array|null = null,
  public SUM8: string|Uint8Array|null = null,
  public INTERNET_CHECKSUM: string|Uint8Array|null = null,
  public SUM24: string|Uint8Array|null = null,
  public SUM32: string|Uint8Array|null = null,
  public FLETCHER_4: string|Uint8Array|null = null,
  public FLETCHER_8: string|Uint8Array|null = null,
  public FLETCHER_16: string|Uint8Array|null = null,
  public FLETCHER_32: string|Uint8Array|null = null,
  public LUNH_ALGORITHM: string|Uint8Array|null = null,
  public VERHOEFF_ALGORITHM: string|Uint8Array|null = null,
  public DAMM_ALGORITHM: string|Uint8Array|null = null,
  public TABULATION_HASHING: string|Uint8Array|null = null,
  public UNIVERSAL_ONE_WAY_HASH_FUNCTION: string|Uint8Array|null = null,
  public ZOBRIST_HASHING: string|Uint8Array|null = null,
  public PAUL_HSIEHS_SUPERFASTHASH: string|Uint8Array|null = null,
  public BUZHASH: string|Uint8Array|null = null,
  public FNV_HASH: string|Uint8Array|null = null,
  public JENKINS_HASH_FUNCTION: string|Uint8Array|null = null,
  public BERNSTEINS_HASH_DJB2: string|Uint8Array|null = null,
  public PJW_HASH_ELF_HASH: string|Uint8Array|null = null,
  public MURMURHASH: string|Uint8Array|null = null,
  public FAST_HASH: string|Uint8Array|null = null,
  public SPOOKYHASH: string|Uint8Array|null = null,
  public CITYHASH: string|Uint8Array|null = null,
  public FARMHASH: string|Uint8Array|null = null,
  public METROHASH: string|Uint8Array|null = null,
  public NUMERIC_HASH: string|Uint8Array|null = null,
  public XXHASH: string|Uint8Array|null = null,
  public T1HA: string|Uint8Array|null = null,
  public GXHASH: string|Uint8Array|null = null,
  public PHASH: string|Uint8Array|null = null,
  public DHASH: string|Uint8Array|null = null,
  public SDBM: string|Uint8Array|null = null,
  public OSDB_HASH: string|Uint8Array|null = null,
  public KOMIHASH: string|Uint8Array|null = null,
  public BLAKE3: string|Uint8Array|null = null,
  public ECOH: string|Uint8Array|null = null,
  public FSB: string|Uint8Array|null = null,
  public GOST: string|Uint8Array|null = null,
  public GROSTL: string|Uint8Array|null = null,
  public HAS_160: string|Uint8Array|null = null,
  public HAVAL: string|Uint8Array|null = null,
  public JH: string|Uint8Array|null = null,
  public LSH: string|Uint8Array|null = null,
  public MD2: string|Uint8Array|null = null,
  public MD4: string|Uint8Array|null = null,
  public MD5: string|Uint8Array|null = null,
  public MD6: string|Uint8Array|null = null,
  public RADIOGATUN: string|Uint8Array|null = null,
  public RIPEMD: string|Uint8Array|null = null,
  public RIPEMD_128: string|Uint8Array|null = null,
  public RIPEMD_256: string|Uint8Array|null = null,
  public RIPEMD_320: string|Uint8Array|null = null,
  public SHA_1: string|Uint8Array|null = null,
  public SHA_224: string|Uint8Array|null = null,
  public SHA_256: string|Uint8Array|null = null,
  public SHA_384: string|Uint8Array|null = null,
  public SHA_512: string|Uint8Array|null = null,
  public SHA_3: string|Uint8Array|null = null,
  public SKEIN: string|Uint8Array|null = null,
  public SNEFRU: string|Uint8Array|null = null,
  public SPECTRAL_HASH: string|Uint8Array|null = null,
  public STREEBOG: string|Uint8Array|null = null,
  public SWIFFT: string|Uint8Array|null = null,
  public TIGER: string|Uint8Array|null = null,
  public WHIRLPOOL: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const IPFS_CID = (this.IPFS_CID !== null ? builder.createString(this.IPFS_CID!) : 0);
  const ETH_DIGITAL_SIGNATURE = (this.ETH_DIGITAL_SIGNATURE !== null ? builder.createString(this.ETH_DIGITAL_SIGNATURE!) : 0);
  const SHA_512_FILE_HASH = (this.SHA_512_FILE_HASH !== null ? builder.createString(this.SHA_512_FILE_HASH!) : 0);
  const SHA_256_FILE_HASH = (this.SHA_256_FILE_HASH !== null ? builder.createString(this.SHA_256_FILE_HASH!) : 0);
  const MD5_FILE_DIGEST = (this.MD5_FILE_DIGEST !== null ? builder.createString(this.MD5_FILE_DIGEST!) : 0);
  const SHA_1_FILE_HASH = (this.SHA_1_FILE_HASH !== null ? builder.createString(this.SHA_1_FILE_HASH!) : 0);
  const ARGON2_FILE_HASH = (this.ARGON2_FILE_HASH !== null ? builder.createString(this.ARGON2_FILE_HASH!) : 0);
  const BLAKE2B_FILE_HASH = (this.BLAKE2B_FILE_HASH !== null ? builder.createString(this.BLAKE2B_FILE_HASH!) : 0);
  const SHA_3_FILE_HASH = (this.SHA_3_FILE_HASH !== null ? builder.createString(this.SHA_3_FILE_HASH!) : 0);
  const RIPEMD_160_FILE_HASH = (this.RIPEMD_160_FILE_HASH !== null ? builder.createString(this.RIPEMD_160_FILE_HASH!) : 0);
  const WHIRLPOOL_FILE_HASH = (this.WHIRLPOOL_FILE_HASH !== null ? builder.createString(this.WHIRLPOOL_FILE_HASH!) : 0);
  const TIGER_FILE_HASH = (this.TIGER_FILE_HASH !== null ? builder.createString(this.TIGER_FILE_HASH!) : 0);
  const CRC32 = (this.CRC32 !== null ? builder.createString(this.CRC32!) : 0);
  const ADLER32_CHECKSUM = (this.ADLER32_CHECKSUM !== null ? builder.createString(this.ADLER32_CHECKSUM!) : 0);
  const RABIN_FINGERPRINT = (this.RABIN_FINGERPRINT !== null ? builder.createString(this.RABIN_FINGERPRINT!) : 0);
  const PEARSON_HASHING = (this.PEARSON_HASHING !== null ? builder.createString(this.PEARSON_HASHING!) : 0);
  const BLAKE2_KEYED_HASH = (this.BLAKE2_KEYED_HASH !== null ? builder.createString(this.BLAKE2_KEYED_HASH!) : 0);
  const BLAKE_256 = (this.BLAKE_256 !== null ? builder.createString(this.BLAKE_256!) : 0);
  const CRC8 = (this.CRC8 !== null ? builder.createString(this.CRC8!) : 0);
  const CRC16 = (this.CRC16 !== null ? builder.createString(this.CRC16!) : 0);
  const CRC64 = (this.CRC64 !== null ? builder.createString(this.CRC64!) : 0);
  const BSD_CHECKSUM = (this.BSD_CHECKSUM !== null ? builder.createString(this.BSD_CHECKSUM!) : 0);
  const SYSV_CHECKSUM = (this.SYSV_CHECKSUM !== null ? builder.createString(this.SYSV_CHECKSUM!) : 0);
  const SUM8 = (this.SUM8 !== null ? builder.createString(this.SUM8!) : 0);
  const INTERNET_CHECKSUM = (this.INTERNET_CHECKSUM !== null ? builder.createString(this.INTERNET_CHECKSUM!) : 0);
  const SUM24 = (this.SUM24 !== null ? builder.createString(this.SUM24!) : 0);
  const SUM32 = (this.SUM32 !== null ? builder.createString(this.SUM32!) : 0);
  const FLETCHER_4 = (this.FLETCHER_4 !== null ? builder.createString(this.FLETCHER_4!) : 0);
  const FLETCHER_8 = (this.FLETCHER_8 !== null ? builder.createString(this.FLETCHER_8!) : 0);
  const FLETCHER_16 = (this.FLETCHER_16 !== null ? builder.createString(this.FLETCHER_16!) : 0);
  const FLETCHER_32 = (this.FLETCHER_32 !== null ? builder.createString(this.FLETCHER_32!) : 0);
  const LUNH_ALGORITHM = (this.LUNH_ALGORITHM !== null ? builder.createString(this.LUNH_ALGORITHM!) : 0);
  const VERHOEFF_ALGORITHM = (this.VERHOEFF_ALGORITHM !== null ? builder.createString(this.VERHOEFF_ALGORITHM!) : 0);
  const DAMM_ALGORITHM = (this.DAMM_ALGORITHM !== null ? builder.createString(this.DAMM_ALGORITHM!) : 0);
  const TABULATION_HASHING = (this.TABULATION_HASHING !== null ? builder.createString(this.TABULATION_HASHING!) : 0);
  const UNIVERSAL_ONE_WAY_HASH_FUNCTION = (this.UNIVERSAL_ONE_WAY_HASH_FUNCTION !== null ? builder.createString(this.UNIVERSAL_ONE_WAY_HASH_FUNCTION!) : 0);
  const ZOBRIST_HASHING = (this.ZOBRIST_HASHING !== null ? builder.createString(this.ZOBRIST_HASHING!) : 0);
  const PAUL_HSIEHS_SUPERFASTHASH = (this.PAUL_HSIEHS_SUPERFASTHASH !== null ? builder.createString(this.PAUL_HSIEHS_SUPERFASTHASH!) : 0);
  const BUZHASH = (this.BUZHASH !== null ? builder.createString(this.BUZHASH!) : 0);
  const FNV_HASH = (this.FNV_HASH !== null ? builder.createString(this.FNV_HASH!) : 0);
  const JENKINS_HASH_FUNCTION = (this.JENKINS_HASH_FUNCTION !== null ? builder.createString(this.JENKINS_HASH_FUNCTION!) : 0);
  const BERNSTEINS_HASH_DJB2 = (this.BERNSTEINS_HASH_DJB2 !== null ? builder.createString(this.BERNSTEINS_HASH_DJB2!) : 0);
  const PJW_HASH_ELF_HASH = (this.PJW_HASH_ELF_HASH !== null ? builder.createString(this.PJW_HASH_ELF_HASH!) : 0);
  const MURMURHASH = (this.MURMURHASH !== null ? builder.createString(this.MURMURHASH!) : 0);
  const FAST_HASH = (this.FAST_HASH !== null ? builder.createString(this.FAST_HASH!) : 0);
  const SPOOKYHASH = (this.SPOOKYHASH !== null ? builder.createString(this.SPOOKYHASH!) : 0);
  const CITYHASH = (this.CITYHASH !== null ? builder.createString(this.CITYHASH!) : 0);
  const FARMHASH = (this.FARMHASH !== null ? builder.createString(this.FARMHASH!) : 0);
  const METROHASH = (this.METROHASH !== null ? builder.createString(this.METROHASH!) : 0);
  const NUMERIC_HASH = (this.NUMERIC_HASH !== null ? builder.createString(this.NUMERIC_HASH!) : 0);
  const XXHASH = (this.XXHASH !== null ? builder.createString(this.XXHASH!) : 0);
  const T1HA = (this.T1HA !== null ? builder.createString(this.T1HA!) : 0);
  const GXHASH = (this.GXHASH !== null ? builder.createString(this.GXHASH!) : 0);
  const PHASH = (this.PHASH !== null ? builder.createString(this.PHASH!) : 0);
  const DHASH = (this.DHASH !== null ? builder.createString(this.DHASH!) : 0);
  const SDBM = (this.SDBM !== null ? builder.createString(this.SDBM!) : 0);
  const OSDB_HASH = (this.OSDB_HASH !== null ? builder.createString(this.OSDB_HASH!) : 0);
  const KOMIHASH = (this.KOMIHASH !== null ? builder.createString(this.KOMIHASH!) : 0);
  const BLAKE3 = (this.BLAKE3 !== null ? builder.createString(this.BLAKE3!) : 0);
  const ECOH = (this.ECOH !== null ? builder.createString(this.ECOH!) : 0);
  const FSB = (this.FSB !== null ? builder.createString(this.FSB!) : 0);
  const GOST = (this.GOST !== null ? builder.createString(this.GOST!) : 0);
  const GROSTL = (this.GROSTL !== null ? builder.createString(this.GROSTL!) : 0);
  const HAS_160 = (this.HAS_160 !== null ? builder.createString(this.HAS_160!) : 0);
  const HAVAL = (this.HAVAL !== null ? builder.createString(this.HAVAL!) : 0);
  const JH = (this.JH !== null ? builder.createString(this.JH!) : 0);
  const LSH = (this.LSH !== null ? builder.createString(this.LSH!) : 0);
  const MD2 = (this.MD2 !== null ? builder.createString(this.MD2!) : 0);
  const MD4 = (this.MD4 !== null ? builder.createString(this.MD4!) : 0);
  const MD5 = (this.MD5 !== null ? builder.createString(this.MD5!) : 0);
  const MD6 = (this.MD6 !== null ? builder.createString(this.MD6!) : 0);
  const RADIOGATUN = (this.RADIOGATUN !== null ? builder.createString(this.RADIOGATUN!) : 0);
  const RIPEMD = (this.RIPEMD !== null ? builder.createString(this.RIPEMD!) : 0);
  const RIPEMD_128 = (this.RIPEMD_128 !== null ? builder.createString(this.RIPEMD_128!) : 0);
  const RIPEMD_256 = (this.RIPEMD_256 !== null ? builder.createString(this.RIPEMD_256!) : 0);
  const RIPEMD_320 = (this.RIPEMD_320 !== null ? builder.createString(this.RIPEMD_320!) : 0);
  const SHA_1 = (this.SHA_1 !== null ? builder.createString(this.SHA_1!) : 0);
  const SHA_224 = (this.SHA_224 !== null ? builder.createString(this.SHA_224!) : 0);
  const SHA_256 = (this.SHA_256 !== null ? builder.createString(this.SHA_256!) : 0);
  const SHA_384 = (this.SHA_384 !== null ? builder.createString(this.SHA_384!) : 0);
  const SHA_512 = (this.SHA_512 !== null ? builder.createString(this.SHA_512!) : 0);
  const SHA_3 = (this.SHA_3 !== null ? builder.createString(this.SHA_3!) : 0);
  const SKEIN = (this.SKEIN !== null ? builder.createString(this.SKEIN!) : 0);
  const SNEFRU = (this.SNEFRU !== null ? builder.createString(this.SNEFRU!) : 0);
  const SPECTRAL_HASH = (this.SPECTRAL_HASH !== null ? builder.createString(this.SPECTRAL_HASH!) : 0);
  const STREEBOG = (this.STREEBOG !== null ? builder.createString(this.STREEBOG!) : 0);
  const SWIFFT = (this.SWIFFT !== null ? builder.createString(this.SWIFFT!) : 0);
  const TIGER = (this.TIGER !== null ? builder.createString(this.TIGER!) : 0);
  const WHIRLPOOL = (this.WHIRLPOOL !== null ? builder.createString(this.WHIRLPOOL!) : 0);

  return PNM.createPNM(builder,
    IPFS_CID,
    ETH_DIGITAL_SIGNATURE,
    SHA_512_FILE_HASH,
    SHA_256_FILE_HASH,
    MD5_FILE_DIGEST,
    SHA_1_FILE_HASH,
    ARGON2_FILE_HASH,
    BLAKE2B_FILE_HASH,
    SHA_3_FILE_HASH,
    RIPEMD_160_FILE_HASH,
    WHIRLPOOL_FILE_HASH,
    TIGER_FILE_HASH,
    CRC32,
    ADLER32_CHECKSUM,
    RABIN_FINGERPRINT,
    PEARSON_HASHING,
    BLAKE2_KEYED_HASH,
    BLAKE_256,
    CRC8,
    CRC16,
    CRC64,
    BSD_CHECKSUM,
    SYSV_CHECKSUM,
    SUM8,
    INTERNET_CHECKSUM,
    SUM24,
    SUM32,
    FLETCHER_4,
    FLETCHER_8,
    FLETCHER_16,
    FLETCHER_32,
    LUNH_ALGORITHM,
    VERHOEFF_ALGORITHM,
    DAMM_ALGORITHM,
    TABULATION_HASHING,
    UNIVERSAL_ONE_WAY_HASH_FUNCTION,
    ZOBRIST_HASHING,
    PAUL_HSIEHS_SUPERFASTHASH,
    BUZHASH,
    FNV_HASH,
    JENKINS_HASH_FUNCTION,
    BERNSTEINS_HASH_DJB2,
    PJW_HASH_ELF_HASH,
    MURMURHASH,
    FAST_HASH,
    SPOOKYHASH,
    CITYHASH,
    FARMHASH,
    METROHASH,
    NUMERIC_HASH,
    XXHASH,
    T1HA,
    GXHASH,
    PHASH,
    DHASH,
    SDBM,
    OSDB_HASH,
    KOMIHASH,
    BLAKE3,
    ECOH,
    FSB,
    GOST,
    GROSTL,
    HAS_160,
    HAVAL,
    JH,
    LSH,
    MD2,
    MD4,
    MD5,
    MD6,
    RADIOGATUN,
    RIPEMD,
    RIPEMD_128,
    RIPEMD_256,
    RIPEMD_320,
    SHA_1,
    SHA_224,
    SHA_256,
    SHA_384,
    SHA_512,
    SHA_3,
    SKEIN,
    SNEFRU,
    SPECTRAL_HASH,
    STREEBOG,
    SWIFFT,
    TIGER,
    WHIRLPOOL
  );
}
}
