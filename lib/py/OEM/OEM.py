# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Orbit Ephemeris Message
class OEM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OEM()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOEM(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OEMBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x4F\x45\x4D", size_prefixed=size_prefixed)

    # OEM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OEM Header
    # OEM Version
    # OEM
    def CCSDS_OEM_VERS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Creation Date
    # OEM
    def CREATION_DATE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originator
    # OEM
    def ORIGINATOR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of ephemeris data blocks
    # OEM
    def EPHEMERIS_DATA_BLOCK(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from ephemerisDataBlock import ephemerisDataBlock
            obj = ephemerisDataBlock()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OEM
    def EPHEMERIS_DATA_BLOCKLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OEM
    def EPHEMERIS_DATA_BLOCKIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def OEMStart(builder):
    builder.StartObject(4)

def Start(builder):
    OEMStart(builder)

def OEMAddCCSDS_OEM_VERS(builder, CCSDS_OEM_VERS):
    builder.PrependFloat64Slot(0, CCSDS_OEM_VERS, 0.0)

def AddCCSDS_OEM_VERS(builder, CCSDS_OEM_VERS):
    OEMAddCCSDS_OEM_VERS(builder, CCSDS_OEM_VERS)

def OEMAddCREATION_DATE(builder, CREATION_DATE):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(CREATION_DATE), 0)

def AddCREATION_DATE(builder, CREATION_DATE):
    OEMAddCREATION_DATE(builder, CREATION_DATE)

def OEMAddORIGINATOR(builder, ORIGINATOR):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ORIGINATOR), 0)

def AddORIGINATOR(builder, ORIGINATOR):
    OEMAddORIGINATOR(builder, ORIGINATOR)

def OEMAddEPHEMERIS_DATA_BLOCK(builder, EPHEMERIS_DATA_BLOCK):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(EPHEMERIS_DATA_BLOCK), 0)

def AddEPHEMERIS_DATA_BLOCK(builder, EPHEMERIS_DATA_BLOCK):
    OEMAddEPHEMERIS_DATA_BLOCK(builder, EPHEMERIS_DATA_BLOCK)

def OEMStartEPHEMERIS_DATA_BLOCKVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEPHEMERIS_DATA_BLOCKVector(builder, numElems):
    return OEMStartEPHEMERIS_DATA_BLOCKVector(builder, numElems)

def OEMEnd(builder):
    return builder.EndObject()

def End(builder):
    return OEMEnd(builder)

import ephemerisDataBlock
try:
    from typing import List
except:
    pass

class OEMT(object):

    # OEMT
    def __init__(self):
        self.CCSDS_OEM_VERS = 0.0  # type: float
        self.CREATION_DATE = None  # type: str
        self.ORIGINATOR = None  # type: str
        self.EPHEMERIS_DATA_BLOCK = None  # type: List[ephemerisDataBlock.ephemerisDataBlockT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        OEM = OEM()
        OEM.Init(buf, pos)
        return cls.InitFromObj(OEM)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, OEM):
        x = OEMT()
        x._UnPack(OEM)
        return x

    # OEMT
    def _UnPack(self, OEM):
        if OEM is None:
            return
        self.CCSDS_OEM_VERS = OEM.CCSDS_OEM_VERS()
        self.CREATION_DATE = OEM.CREATION_DATE()
        self.ORIGINATOR = OEM.ORIGINATOR()
        if not OEM.EPHEMERIS_DATA_BLOCKIsNone():
            self.EPHEMERIS_DATA_BLOCK = []
            for i in range(OEM.EPHEMERIS_DATA_BLOCKLength()):
                if OEM.EPHEMERIS_DATA_BLOCK(i) is None:
                    self.EPHEMERIS_DATA_BLOCK.append(None)
                else:
                    ephemerisDataBlock_ = ephemerisDataBlock.ephemerisDataBlockT.InitFromObj(OEM.EPHEMERIS_DATA_BLOCK(i))
                    self.EPHEMERIS_DATA_BLOCK.append(ephemerisDataBlock_)

    # OEMT
    def Pack(self, builder):
        if self.CREATION_DATE is not None:
            CREATION_DATE = builder.CreateString(self.CREATION_DATE)
        if self.ORIGINATOR is not None:
            ORIGINATOR = builder.CreateString(self.ORIGINATOR)
        if self.EPHEMERIS_DATA_BLOCK is not None:
            EPHEMERIS_DATA_BLOCKlist = []
            for i in range(len(self.EPHEMERIS_DATA_BLOCK)):
                EPHEMERIS_DATA_BLOCKlist.append(self.EPHEMERIS_DATA_BLOCK[i].Pack(builder))
            OEMStartEPHEMERIS_DATA_BLOCKVector(builder, len(self.EPHEMERIS_DATA_BLOCK))
            for i in reversed(range(len(self.EPHEMERIS_DATA_BLOCK))):
                builder.PrependUOffsetTRelative(EPHEMERIS_DATA_BLOCKlist[i])
            EPHEMERIS_DATA_BLOCK = builder.EndVector()
        OEMStart(builder)
        OEMAddCCSDS_OEM_VERS(builder, self.CCSDS_OEM_VERS)
        if self.CREATION_DATE is not None:
            OEMAddCREATION_DATE(builder, CREATION_DATE)
        if self.ORIGINATOR is not None:
            OEMAddORIGINATOR(builder, ORIGINATOR)
        if self.EPHEMERIS_DATA_BLOCK is not None:
            OEMAddEPHEMERIS_DATA_BLOCK(builder, EPHEMERIS_DATA_BLOCK)
        OEM = OEMEnd(builder)
        return OEM
