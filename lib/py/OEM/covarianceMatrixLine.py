# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Position/Velocity Covariance Matrix Line
class covarianceMatrixLine(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = covarianceMatrixLine()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAscovarianceMatrixLine(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def covarianceMatrixLineBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x4F\x45\x4D", size_prefixed=size_prefixed)

    # covarianceMatrixLine
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Epoch
    # covarianceMatrixLine
    def EPOCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Reference frame for the covariance matrix
    # covarianceMatrixLine
    def COV_REF_FRAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Covariance matrix [1,1] km**2
    # covarianceMatrixLine
    def CX_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [2,1] km**2
    # covarianceMatrixLine
    def CY_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [2,2] km**2
    # covarianceMatrixLine
    def CY_Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [3,1] km**2
    # covarianceMatrixLine
    def CZ_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [3,2] km**2
    # covarianceMatrixLine
    def CZ_Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [3,3] km**2
    # covarianceMatrixLine
    def CZ_Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [4,1] km**2/s
    # covarianceMatrixLine
    def CX_DOT_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [4,2] km**2/s
    # covarianceMatrixLine
    def CX_DOT_Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [4,3] km**2/s
    # covarianceMatrixLine
    def CX_DOT_Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [4,4] km**2/s**2
    # covarianceMatrixLine
    def CX_DOT_X_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [5,1] km**2/s
    # covarianceMatrixLine
    def CY_DOT_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [5,2] km**2/s
    # covarianceMatrixLine
    def CY_DOT_Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [5,3] km**2/s
    # covarianceMatrixLine
    def CY_DOT_Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [5,4] km**2/s**2
    # covarianceMatrixLine
    def CY_DOT_X_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [5,5] km**2/s**2
    # covarianceMatrixLine
    def CY_DOT_Y_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [6,1] km**2/s
    # covarianceMatrixLine
    def CZ_DOT_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [6,2] km**2/s
    # covarianceMatrixLine
    def CZ_DOT_Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [6,3] km**2/s
    # covarianceMatrixLine
    def CZ_DOT_Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [6,4] km**2/s**2
    # covarianceMatrixLine
    def CZ_DOT_X_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [6,5] km**2/s**2
    # covarianceMatrixLine
    def CZ_DOT_Y_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [6,6] km**2/s**2
    # covarianceMatrixLine
    def CZ_DOT_Z_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def covarianceMatrixLineStart(builder): builder.StartObject(23)
def Start(builder):
    return covarianceMatrixLineStart(builder)
def covarianceMatrixLineAddEPOCH(builder, EPOCH): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(EPOCH), 0)
def AddEPOCH(builder, EPOCH):
    return covarianceMatrixLineAddEPOCH(builder, EPOCH)
def covarianceMatrixLineAddCOV_REF_FRAME(builder, COV_REF_FRAME): builder.PrependInt8Slot(1, COV_REF_FRAME, 0)
def AddCOV_REF_FRAME(builder, COV_REF_FRAME):
    return covarianceMatrixLineAddCOV_REF_FRAME(builder, COV_REF_FRAME)
def covarianceMatrixLineAddCX_X(builder, CX_X): builder.PrependFloat64Slot(2, CX_X, 0.0)
def AddCX_X(builder, CX_X):
    return covarianceMatrixLineAddCX_X(builder, CX_X)
def covarianceMatrixLineAddCY_X(builder, CY_X): builder.PrependFloat64Slot(3, CY_X, 0.0)
def AddCY_X(builder, CY_X):
    return covarianceMatrixLineAddCY_X(builder, CY_X)
def covarianceMatrixLineAddCY_Y(builder, CY_Y): builder.PrependFloat64Slot(4, CY_Y, 0.0)
def AddCY_Y(builder, CY_Y):
    return covarianceMatrixLineAddCY_Y(builder, CY_Y)
def covarianceMatrixLineAddCZ_X(builder, CZ_X): builder.PrependFloat64Slot(5, CZ_X, 0.0)
def AddCZ_X(builder, CZ_X):
    return covarianceMatrixLineAddCZ_X(builder, CZ_X)
def covarianceMatrixLineAddCZ_Y(builder, CZ_Y): builder.PrependFloat64Slot(6, CZ_Y, 0.0)
def AddCZ_Y(builder, CZ_Y):
    return covarianceMatrixLineAddCZ_Y(builder, CZ_Y)
def covarianceMatrixLineAddCZ_Z(builder, CZ_Z): builder.PrependFloat64Slot(7, CZ_Z, 0.0)
def AddCZ_Z(builder, CZ_Z):
    return covarianceMatrixLineAddCZ_Z(builder, CZ_Z)
def covarianceMatrixLineAddCX_DOT_X(builder, CX_DOT_X): builder.PrependFloat64Slot(8, CX_DOT_X, 0.0)
def AddCX_DOT_X(builder, CX_DOT_X):
    return covarianceMatrixLineAddCX_DOT_X(builder, CX_DOT_X)
def covarianceMatrixLineAddCX_DOT_Y(builder, CX_DOT_Y): builder.PrependFloat64Slot(9, CX_DOT_Y, 0.0)
def AddCX_DOT_Y(builder, CX_DOT_Y):
    return covarianceMatrixLineAddCX_DOT_Y(builder, CX_DOT_Y)
def covarianceMatrixLineAddCX_DOT_Z(builder, CX_DOT_Z): builder.PrependFloat64Slot(10, CX_DOT_Z, 0.0)
def AddCX_DOT_Z(builder, CX_DOT_Z):
    return covarianceMatrixLineAddCX_DOT_Z(builder, CX_DOT_Z)
def covarianceMatrixLineAddCX_DOT_X_DOT(builder, CX_DOT_X_DOT): builder.PrependFloat64Slot(11, CX_DOT_X_DOT, 0.0)
def AddCX_DOT_X_DOT(builder, CX_DOT_X_DOT):
    return covarianceMatrixLineAddCX_DOT_X_DOT(builder, CX_DOT_X_DOT)
def covarianceMatrixLineAddCY_DOT_X(builder, CY_DOT_X): builder.PrependFloat64Slot(12, CY_DOT_X, 0.0)
def AddCY_DOT_X(builder, CY_DOT_X):
    return covarianceMatrixLineAddCY_DOT_X(builder, CY_DOT_X)
def covarianceMatrixLineAddCY_DOT_Y(builder, CY_DOT_Y): builder.PrependFloat64Slot(13, CY_DOT_Y, 0.0)
def AddCY_DOT_Y(builder, CY_DOT_Y):
    return covarianceMatrixLineAddCY_DOT_Y(builder, CY_DOT_Y)
def covarianceMatrixLineAddCY_DOT_Z(builder, CY_DOT_Z): builder.PrependFloat64Slot(14, CY_DOT_Z, 0.0)
def AddCY_DOT_Z(builder, CY_DOT_Z):
    return covarianceMatrixLineAddCY_DOT_Z(builder, CY_DOT_Z)
def covarianceMatrixLineAddCY_DOT_X_DOT(builder, CY_DOT_X_DOT): builder.PrependFloat64Slot(15, CY_DOT_X_DOT, 0.0)
def AddCY_DOT_X_DOT(builder, CY_DOT_X_DOT):
    return covarianceMatrixLineAddCY_DOT_X_DOT(builder, CY_DOT_X_DOT)
def covarianceMatrixLineAddCY_DOT_Y_DOT(builder, CY_DOT_Y_DOT): builder.PrependFloat64Slot(16, CY_DOT_Y_DOT, 0.0)
def AddCY_DOT_Y_DOT(builder, CY_DOT_Y_DOT):
    return covarianceMatrixLineAddCY_DOT_Y_DOT(builder, CY_DOT_Y_DOT)
def covarianceMatrixLineAddCZ_DOT_X(builder, CZ_DOT_X): builder.PrependFloat64Slot(17, CZ_DOT_X, 0.0)
def AddCZ_DOT_X(builder, CZ_DOT_X):
    return covarianceMatrixLineAddCZ_DOT_X(builder, CZ_DOT_X)
def covarianceMatrixLineAddCZ_DOT_Y(builder, CZ_DOT_Y): builder.PrependFloat64Slot(18, CZ_DOT_Y, 0.0)
def AddCZ_DOT_Y(builder, CZ_DOT_Y):
    return covarianceMatrixLineAddCZ_DOT_Y(builder, CZ_DOT_Y)
def covarianceMatrixLineAddCZ_DOT_Z(builder, CZ_DOT_Z): builder.PrependFloat64Slot(19, CZ_DOT_Z, 0.0)
def AddCZ_DOT_Z(builder, CZ_DOT_Z):
    return covarianceMatrixLineAddCZ_DOT_Z(builder, CZ_DOT_Z)
def covarianceMatrixLineAddCZ_DOT_X_DOT(builder, CZ_DOT_X_DOT): builder.PrependFloat64Slot(20, CZ_DOT_X_DOT, 0.0)
def AddCZ_DOT_X_DOT(builder, CZ_DOT_X_DOT):
    return covarianceMatrixLineAddCZ_DOT_X_DOT(builder, CZ_DOT_X_DOT)
def covarianceMatrixLineAddCZ_DOT_Y_DOT(builder, CZ_DOT_Y_DOT): builder.PrependFloat64Slot(21, CZ_DOT_Y_DOT, 0.0)
def AddCZ_DOT_Y_DOT(builder, CZ_DOT_Y_DOT):
    return covarianceMatrixLineAddCZ_DOT_Y_DOT(builder, CZ_DOT_Y_DOT)
def covarianceMatrixLineAddCZ_DOT_Z_DOT(builder, CZ_DOT_Z_DOT): builder.PrependFloat64Slot(22, CZ_DOT_Z_DOT, 0.0)
def AddCZ_DOT_Z_DOT(builder, CZ_DOT_Z_DOT):
    return covarianceMatrixLineAddCZ_DOT_Z_DOT(builder, CZ_DOT_Z_DOT)
def covarianceMatrixLineEnd(builder): return builder.EndObject()
def End(builder):
    return covarianceMatrixLineEnd(builder)

class covarianceMatrixLineT(object):

    # covarianceMatrixLineT
    def __init__(self):
        self.EPOCH = None  # type: str
        self.COV_REF_FRAME = 0  # type: int
        self.CX_X = 0.0  # type: float
        self.CY_X = 0.0  # type: float
        self.CY_Y = 0.0  # type: float
        self.CZ_X = 0.0  # type: float
        self.CZ_Y = 0.0  # type: float
        self.CZ_Z = 0.0  # type: float
        self.CX_DOT_X = 0.0  # type: float
        self.CX_DOT_Y = 0.0  # type: float
        self.CX_DOT_Z = 0.0  # type: float
        self.CX_DOT_X_DOT = 0.0  # type: float
        self.CY_DOT_X = 0.0  # type: float
        self.CY_DOT_Y = 0.0  # type: float
        self.CY_DOT_Z = 0.0  # type: float
        self.CY_DOT_X_DOT = 0.0  # type: float
        self.CY_DOT_Y_DOT = 0.0  # type: float
        self.CZ_DOT_X = 0.0  # type: float
        self.CZ_DOT_Y = 0.0  # type: float
        self.CZ_DOT_Z = 0.0  # type: float
        self.CZ_DOT_X_DOT = 0.0  # type: float
        self.CZ_DOT_Y_DOT = 0.0  # type: float
        self.CZ_DOT_Z_DOT = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        covarianceMatrixLine = covarianceMatrixLine()
        covarianceMatrixLine.Init(buf, pos)
        return cls.InitFromObj(covarianceMatrixLine)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, covarianceMatrixLine):
        x = covarianceMatrixLineT()
        x._UnPack(covarianceMatrixLine)
        return x

    # covarianceMatrixLineT
    def _UnPack(self, covarianceMatrixLine):
        if covarianceMatrixLine is None:
            return
        self.EPOCH = covarianceMatrixLine.EPOCH()
        self.COV_REF_FRAME = covarianceMatrixLine.COV_REF_FRAME()
        self.CX_X = covarianceMatrixLine.CX_X()
        self.CY_X = covarianceMatrixLine.CY_X()
        self.CY_Y = covarianceMatrixLine.CY_Y()
        self.CZ_X = covarianceMatrixLine.CZ_X()
        self.CZ_Y = covarianceMatrixLine.CZ_Y()
        self.CZ_Z = covarianceMatrixLine.CZ_Z()
        self.CX_DOT_X = covarianceMatrixLine.CX_DOT_X()
        self.CX_DOT_Y = covarianceMatrixLine.CX_DOT_Y()
        self.CX_DOT_Z = covarianceMatrixLine.CX_DOT_Z()
        self.CX_DOT_X_DOT = covarianceMatrixLine.CX_DOT_X_DOT()
        self.CY_DOT_X = covarianceMatrixLine.CY_DOT_X()
        self.CY_DOT_Y = covarianceMatrixLine.CY_DOT_Y()
        self.CY_DOT_Z = covarianceMatrixLine.CY_DOT_Z()
        self.CY_DOT_X_DOT = covarianceMatrixLine.CY_DOT_X_DOT()
        self.CY_DOT_Y_DOT = covarianceMatrixLine.CY_DOT_Y_DOT()
        self.CZ_DOT_X = covarianceMatrixLine.CZ_DOT_X()
        self.CZ_DOT_Y = covarianceMatrixLine.CZ_DOT_Y()
        self.CZ_DOT_Z = covarianceMatrixLine.CZ_DOT_Z()
        self.CZ_DOT_X_DOT = covarianceMatrixLine.CZ_DOT_X_DOT()
        self.CZ_DOT_Y_DOT = covarianceMatrixLine.CZ_DOT_Y_DOT()
        self.CZ_DOT_Z_DOT = covarianceMatrixLine.CZ_DOT_Z_DOT()

    # covarianceMatrixLineT
    def Pack(self, builder):
        if self.EPOCH is not None:
            EPOCH = builder.CreateString(self.EPOCH)
        covarianceMatrixLineStart(builder)
        if self.EPOCH is not None:
            covarianceMatrixLineAddEPOCH(builder, EPOCH)
        covarianceMatrixLineAddCOV_REF_FRAME(builder, self.COV_REF_FRAME)
        covarianceMatrixLineAddCX_X(builder, self.CX_X)
        covarianceMatrixLineAddCY_X(builder, self.CY_X)
        covarianceMatrixLineAddCY_Y(builder, self.CY_Y)
        covarianceMatrixLineAddCZ_X(builder, self.CZ_X)
        covarianceMatrixLineAddCZ_Y(builder, self.CZ_Y)
        covarianceMatrixLineAddCZ_Z(builder, self.CZ_Z)
        covarianceMatrixLineAddCX_DOT_X(builder, self.CX_DOT_X)
        covarianceMatrixLineAddCX_DOT_Y(builder, self.CX_DOT_Y)
        covarianceMatrixLineAddCX_DOT_Z(builder, self.CX_DOT_Z)
        covarianceMatrixLineAddCX_DOT_X_DOT(builder, self.CX_DOT_X_DOT)
        covarianceMatrixLineAddCY_DOT_X(builder, self.CY_DOT_X)
        covarianceMatrixLineAddCY_DOT_Y(builder, self.CY_DOT_Y)
        covarianceMatrixLineAddCY_DOT_Z(builder, self.CY_DOT_Z)
        covarianceMatrixLineAddCY_DOT_X_DOT(builder, self.CY_DOT_X_DOT)
        covarianceMatrixLineAddCY_DOT_Y_DOT(builder, self.CY_DOT_Y_DOT)
        covarianceMatrixLineAddCZ_DOT_X(builder, self.CZ_DOT_X)
        covarianceMatrixLineAddCZ_DOT_Y(builder, self.CZ_DOT_Y)
        covarianceMatrixLineAddCZ_DOT_Z(builder, self.CZ_DOT_Z)
        covarianceMatrixLineAddCZ_DOT_X_DOT(builder, self.CZ_DOT_X_DOT)
        covarianceMatrixLineAddCZ_DOT_Y_DOT(builder, self.CZ_DOT_Y_DOT)
        covarianceMatrixLineAddCZ_DOT_Z_DOT(builder, self.CZ_DOT_Z_DOT)
        covarianceMatrixLine = covarianceMatrixLineEnd(builder)
        return covarianceMatrixLine
