# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Time System
class TIM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TIM()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTIM(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def TIMBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x54\x49\x4D", size_prefixed=size_prefixed)

    # TIM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TIM
    def TIME_SYSTEM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def TIMStart(builder):
    builder.StartObject(1)

def Start(builder):
    TIMStart(builder)

def TIMAddTIME_SYSTEM(builder, TIME_SYSTEM):
    builder.PrependInt8Slot(0, TIME_SYSTEM, 0)

def AddTIME_SYSTEM(builder, TIME_SYSTEM):
    TIMAddTIME_SYSTEM(builder, TIME_SYSTEM)

def TIMEnd(builder):
    return builder.EndObject()

def End(builder):
    return TIMEnd(builder)


class TIMT(object):

    # TIMT
    def __init__(self):
        self.TIME_SYSTEM = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        TIM = TIM()
        TIM.Init(buf, pos)
        return cls.InitFromObj(TIM)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, TIM):
        x = TIMT()
        x._UnPack(TIM)
        return x

    # TIMT
    def _UnPack(self, TIM):
        if TIM is None:
            return
        self.TIME_SYSTEM = TIM.TIME_SYSTEM()

    # TIMT
    def Pack(self, builder):
        TIMStart(builder)
        TIMAddTIME_SYSTEM(builder, self.TIME_SYSTEM)
        TIM = TIMEnd(builder)
        return TIM
