# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# VCM Covariance Matrix Line
class VCMCovarianceMatrixLine(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VCMCovarianceMatrixLine()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVCMCovarianceMatrixLine(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VCMCovarianceMatrixLine
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VCMCovarianceMatrixLine
    def CX_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VCMCovarianceMatrixLine
    def CY_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VCMCovarianceMatrixLine
    def CZ_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VCMCovarianceMatrixLine
    def CX_DOT_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def VCMCovarianceMatrixLineStart(builder):
    builder.StartObject(4)

def Start(builder):
    VCMCovarianceMatrixLineStart(builder)

def VCMCovarianceMatrixLineAddCX_X(builder, CX_X):
    builder.PrependFloat64Slot(0, CX_X, 0.0)

def AddCX_X(builder, CX_X):
    VCMCovarianceMatrixLineAddCX_X(builder, CX_X)

def VCMCovarianceMatrixLineAddCY_X(builder, CY_X):
    builder.PrependFloat64Slot(1, CY_X, 0.0)

def AddCY_X(builder, CY_X):
    VCMCovarianceMatrixLineAddCY_X(builder, CY_X)

def VCMCovarianceMatrixLineAddCZ_X(builder, CZ_X):
    builder.PrependFloat64Slot(2, CZ_X, 0.0)

def AddCZ_X(builder, CZ_X):
    VCMCovarianceMatrixLineAddCZ_X(builder, CZ_X)

def VCMCovarianceMatrixLineAddCX_DOT_X(builder, CX_DOT_X):
    builder.PrependFloat64Slot(3, CX_DOT_X, 0.0)

def AddCX_DOT_X(builder, CX_DOT_X):
    VCMCovarianceMatrixLineAddCX_DOT_X(builder, CX_DOT_X)

def VCMCovarianceMatrixLineEnd(builder):
    return builder.EndObject()

def End(builder):
    return VCMCovarianceMatrixLineEnd(builder)


class VCMCovarianceMatrixLineT(object):

    # VCMCovarianceMatrixLineT
    def __init__(self):
        self.CX_X = 0.0  # type: float
        self.CY_X = 0.0  # type: float
        self.CZ_X = 0.0  # type: float
        self.CX_DOT_X = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vcmcovarianceMatrixLine = VCMCovarianceMatrixLine()
        vcmcovarianceMatrixLine.Init(buf, pos)
        return cls.InitFromObj(vcmcovarianceMatrixLine)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vcmcovarianceMatrixLine):
        x = VCMCovarianceMatrixLineT()
        x._UnPack(vcmcovarianceMatrixLine)
        return x

    # VCMCovarianceMatrixLineT
    def _UnPack(self, vcmcovarianceMatrixLine):
        if vcmcovarianceMatrixLine is None:
            return
        self.CX_X = vcmcovarianceMatrixLine.CX_X()
        self.CY_X = vcmcovarianceMatrixLine.CY_X()
        self.CZ_X = vcmcovarianceMatrixLine.CZ_X()
        self.CX_DOT_X = vcmcovarianceMatrixLine.CX_DOT_X()

    # VCMCovarianceMatrixLineT
    def Pack(self, builder):
        VCMCovarianceMatrixLineStart(builder)
        VCMCovarianceMatrixLineAddCX_X(builder, self.CX_X)
        VCMCovarianceMatrixLineAddCY_X(builder, self.CY_X)
        VCMCovarianceMatrixLineAddCZ_X(builder, self.CZ_X)
        VCMCovarianceMatrixLineAddCX_DOT_X(builder, self.CX_DOT_X)
        vcmcovarianceMatrixLine = VCMCovarianceMatrixLineEnd(builder)
        return vcmcovarianceMatrixLine
