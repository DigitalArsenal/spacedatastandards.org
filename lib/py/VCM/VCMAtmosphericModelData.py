# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# VCM Atmospheric and Perturbation Model Data
class VCMAtmosphericModelData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VCMAtmosphericModelData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVCMAtmosphericModelData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VCMAtmosphericModelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VCMAtmosphericModelData
    def ATMOSPHERIC_MODEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # VCMAtmosphericModelData
    def GEOPOTENTIAL_MODEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # VCMAtmosphericModelData
    def LUNAR_SOLAR_PERTURBATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # VCMAtmosphericModelData
    def LUNAR_PERTURBATION_MODEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # VCMAtmosphericModelData
    def SOLAR_PERTURBATION_MODEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # VCMAtmosphericModelData
    def SOLAR_RADIATION_PRESSURE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # VCMAtmosphericModelData
    def SRP_MODEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # VCMAtmosphericModelData
    def RESONANCE_MODEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def VCMAtmosphericModelDataStart(builder):
    builder.StartObject(8)

def Start(builder):
    VCMAtmosphericModelDataStart(builder)

def VCMAtmosphericModelDataAddATMOSPHERIC_MODEL(builder, ATMOSPHERIC_MODEL):
    builder.PrependInt8Slot(0, ATMOSPHERIC_MODEL, 0)

def AddATMOSPHERIC_MODEL(builder, ATMOSPHERIC_MODEL):
    VCMAtmosphericModelDataAddATMOSPHERIC_MODEL(builder, ATMOSPHERIC_MODEL)

def VCMAtmosphericModelDataAddGEOPOTENTIAL_MODEL(builder, GEOPOTENTIAL_MODEL):
    builder.PrependInt8Slot(1, GEOPOTENTIAL_MODEL, 0)

def AddGEOPOTENTIAL_MODEL(builder, GEOPOTENTIAL_MODEL):
    VCMAtmosphericModelDataAddGEOPOTENTIAL_MODEL(builder, GEOPOTENTIAL_MODEL)

def VCMAtmosphericModelDataAddLUNAR_SOLAR_PERTURBATION(builder, LUNAR_SOLAR_PERTURBATION):
    builder.PrependInt8Slot(2, LUNAR_SOLAR_PERTURBATION, 0)

def AddLUNAR_SOLAR_PERTURBATION(builder, LUNAR_SOLAR_PERTURBATION):
    VCMAtmosphericModelDataAddLUNAR_SOLAR_PERTURBATION(builder, LUNAR_SOLAR_PERTURBATION)

def VCMAtmosphericModelDataAddLUNAR_PERTURBATION_MODEL(builder, LUNAR_PERTURBATION_MODEL):
    builder.PrependInt8Slot(3, LUNAR_PERTURBATION_MODEL, 0)

def AddLUNAR_PERTURBATION_MODEL(builder, LUNAR_PERTURBATION_MODEL):
    VCMAtmosphericModelDataAddLUNAR_PERTURBATION_MODEL(builder, LUNAR_PERTURBATION_MODEL)

def VCMAtmosphericModelDataAddSOLAR_PERTURBATION_MODEL(builder, SOLAR_PERTURBATION_MODEL):
    builder.PrependInt8Slot(4, SOLAR_PERTURBATION_MODEL, 0)

def AddSOLAR_PERTURBATION_MODEL(builder, SOLAR_PERTURBATION_MODEL):
    VCMAtmosphericModelDataAddSOLAR_PERTURBATION_MODEL(builder, SOLAR_PERTURBATION_MODEL)

def VCMAtmosphericModelDataAddSOLAR_RADIATION_PRESSURE(builder, SOLAR_RADIATION_PRESSURE):
    builder.PrependInt8Slot(5, SOLAR_RADIATION_PRESSURE, 0)

def AddSOLAR_RADIATION_PRESSURE(builder, SOLAR_RADIATION_PRESSURE):
    VCMAtmosphericModelDataAddSOLAR_RADIATION_PRESSURE(builder, SOLAR_RADIATION_PRESSURE)

def VCMAtmosphericModelDataAddSRP_MODEL(builder, SRP_MODEL):
    builder.PrependInt8Slot(6, SRP_MODEL, 0)

def AddSRP_MODEL(builder, SRP_MODEL):
    VCMAtmosphericModelDataAddSRP_MODEL(builder, SRP_MODEL)

def VCMAtmosphericModelDataAddRESONANCE_MODEL(builder, RESONANCE_MODEL):
    builder.PrependInt8Slot(7, RESONANCE_MODEL, 0)

def AddRESONANCE_MODEL(builder, RESONANCE_MODEL):
    VCMAtmosphericModelDataAddRESONANCE_MODEL(builder, RESONANCE_MODEL)

def VCMAtmosphericModelDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return VCMAtmosphericModelDataEnd(builder)


class VCMAtmosphericModelDataT(object):

    # VCMAtmosphericModelDataT
    def __init__(self):
        self.ATMOSPHERIC_MODEL = 0  # type: int
        self.GEOPOTENTIAL_MODEL = 0  # type: int
        self.LUNAR_SOLAR_PERTURBATION = 0  # type: int
        self.LUNAR_PERTURBATION_MODEL = 0  # type: int
        self.SOLAR_PERTURBATION_MODEL = 0  # type: int
        self.SOLAR_RADIATION_PRESSURE = 0  # type: int
        self.SRP_MODEL = 0  # type: int
        self.RESONANCE_MODEL = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vcmatmosphericModelData = VCMAtmosphericModelData()
        vcmatmosphericModelData.Init(buf, pos)
        return cls.InitFromObj(vcmatmosphericModelData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vcmatmosphericModelData):
        x = VCMAtmosphericModelDataT()
        x._UnPack(vcmatmosphericModelData)
        return x

    # VCMAtmosphericModelDataT
    def _UnPack(self, vcmatmosphericModelData):
        if vcmatmosphericModelData is None:
            return
        self.ATMOSPHERIC_MODEL = vcmatmosphericModelData.ATMOSPHERIC_MODEL()
        self.GEOPOTENTIAL_MODEL = vcmatmosphericModelData.GEOPOTENTIAL_MODEL()
        self.LUNAR_SOLAR_PERTURBATION = vcmatmosphericModelData.LUNAR_SOLAR_PERTURBATION()
        self.LUNAR_PERTURBATION_MODEL = vcmatmosphericModelData.LUNAR_PERTURBATION_MODEL()
        self.SOLAR_PERTURBATION_MODEL = vcmatmosphericModelData.SOLAR_PERTURBATION_MODEL()
        self.SOLAR_RADIATION_PRESSURE = vcmatmosphericModelData.SOLAR_RADIATION_PRESSURE()
        self.SRP_MODEL = vcmatmosphericModelData.SRP_MODEL()
        self.RESONANCE_MODEL = vcmatmosphericModelData.RESONANCE_MODEL()

    # VCMAtmosphericModelDataT
    def Pack(self, builder):
        VCMAtmosphericModelDataStart(builder)
        VCMAtmosphericModelDataAddATMOSPHERIC_MODEL(builder, self.ATMOSPHERIC_MODEL)
        VCMAtmosphericModelDataAddGEOPOTENTIAL_MODEL(builder, self.GEOPOTENTIAL_MODEL)
        VCMAtmosphericModelDataAddLUNAR_SOLAR_PERTURBATION(builder, self.LUNAR_SOLAR_PERTURBATION)
        VCMAtmosphericModelDataAddLUNAR_PERTURBATION_MODEL(builder, self.LUNAR_PERTURBATION_MODEL)
        VCMAtmosphericModelDataAddSOLAR_PERTURBATION_MODEL(builder, self.SOLAR_PERTURBATION_MODEL)
        VCMAtmosphericModelDataAddSOLAR_RADIATION_PRESSURE(builder, self.SOLAR_RADIATION_PRESSURE)
        VCMAtmosphericModelDataAddSRP_MODEL(builder, self.SRP_MODEL)
        VCMAtmosphericModelDataAddRESONANCE_MODEL(builder, self.RESONANCE_MODEL)
        vcmatmosphericModelData = VCMAtmosphericModelDataEnd(builder)
        return vcmatmosphericModelData
