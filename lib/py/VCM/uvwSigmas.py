# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# UVW Sigmas (Covariance matrix in UVW frame)
class uvwSigmas(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = uvwSigmas()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsuvwSigmas(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # uvwSigmas
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # uvwSigmas
    def U_SIGMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # uvwSigmas
    def V_SIGMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # uvwSigmas
    def W_SIGMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # uvwSigmas
    def UD_SIGMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # uvwSigmas
    def VD_SIGMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # uvwSigmas
    def WD_SIGMA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def uvwSigmasStart(builder):
    builder.StartObject(6)

def Start(builder):
    uvwSigmasStart(builder)

def uvwSigmasAddU_SIGMA(builder, U_SIGMA):
    builder.PrependFloat64Slot(0, U_SIGMA, 0.0)

def AddU_SIGMA(builder, U_SIGMA):
    uvwSigmasAddU_SIGMA(builder, U_SIGMA)

def uvwSigmasAddV_SIGMA(builder, V_SIGMA):
    builder.PrependFloat64Slot(1, V_SIGMA, 0.0)

def AddV_SIGMA(builder, V_SIGMA):
    uvwSigmasAddV_SIGMA(builder, V_SIGMA)

def uvwSigmasAddW_SIGMA(builder, W_SIGMA):
    builder.PrependFloat64Slot(2, W_SIGMA, 0.0)

def AddW_SIGMA(builder, W_SIGMA):
    uvwSigmasAddW_SIGMA(builder, W_SIGMA)

def uvwSigmasAddUD_SIGMA(builder, UD_SIGMA):
    builder.PrependFloat64Slot(3, UD_SIGMA, 0.0)

def AddUD_SIGMA(builder, UD_SIGMA):
    uvwSigmasAddUD_SIGMA(builder, UD_SIGMA)

def uvwSigmasAddVD_SIGMA(builder, VD_SIGMA):
    builder.PrependFloat64Slot(4, VD_SIGMA, 0.0)

def AddVD_SIGMA(builder, VD_SIGMA):
    uvwSigmasAddVD_SIGMA(builder, VD_SIGMA)

def uvwSigmasAddWD_SIGMA(builder, WD_SIGMA):
    builder.PrependFloat64Slot(5, WD_SIGMA, 0.0)

def AddWD_SIGMA(builder, WD_SIGMA):
    uvwSigmasAddWD_SIGMA(builder, WD_SIGMA)

def uvwSigmasEnd(builder):
    return builder.EndObject()

def End(builder):
    return uvwSigmasEnd(builder)


class uvwSigmasT(object):

    # uvwSigmasT
    def __init__(self):
        self.U_SIGMA = 0.0  # type: float
        self.V_SIGMA = 0.0  # type: float
        self.W_SIGMA = 0.0  # type: float
        self.UD_SIGMA = 0.0  # type: float
        self.VD_SIGMA = 0.0  # type: float
        self.WD_SIGMA = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        uvwSigmas = uvwSigmas()
        uvwSigmas.Init(buf, pos)
        return cls.InitFromObj(uvwSigmas)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, uvwSigmas):
        x = uvwSigmasT()
        x._UnPack(uvwSigmas)
        return x

    # uvwSigmasT
    def _UnPack(self, uvwSigmas):
        if uvwSigmas is None:
            return
        self.U_SIGMA = uvwSigmas.U_SIGMA()
        self.V_SIGMA = uvwSigmas.V_SIGMA()
        self.W_SIGMA = uvwSigmas.W_SIGMA()
        self.UD_SIGMA = uvwSigmas.UD_SIGMA()
        self.VD_SIGMA = uvwSigmas.VD_SIGMA()
        self.WD_SIGMA = uvwSigmas.WD_SIGMA()

    # uvwSigmasT
    def Pack(self, builder):
        uvwSigmasStart(builder)
        uvwSigmasAddU_SIGMA(builder, self.U_SIGMA)
        uvwSigmasAddV_SIGMA(builder, self.V_SIGMA)
        uvwSigmasAddW_SIGMA(builder, self.W_SIGMA)
        uvwSigmasAddUD_SIGMA(builder, self.UD_SIGMA)
        uvwSigmasAddVD_SIGMA(builder, self.VD_SIGMA)
        uvwSigmasAddWD_SIGMA(builder, self.WD_SIGMA)
        uvwSigmas = uvwSigmasEnd(builder)
        return uvwSigmas
