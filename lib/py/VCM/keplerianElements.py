# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Keplerian Elements
class keplerianElements(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = keplerianElements()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAskeplerianElements(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # keplerianElements
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # keplerianElements
    def SEMI_MAJOR_AXIS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # keplerianElements
    def ECCENTRICITY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # keplerianElements
    def INCLINATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # keplerianElements
    def RA_OF_ASC_NODE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # keplerianElements
    def ARG_OF_PERICENTER(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # keplerianElements
    def ANOMALY_TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # keplerianElements
    def ANOMALY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def keplerianElementsStart(builder):
    builder.StartObject(7)

def Start(builder):
    keplerianElementsStart(builder)

def keplerianElementsAddSEMI_MAJOR_AXIS(builder, SEMI_MAJOR_AXIS):
    builder.PrependFloat64Slot(0, SEMI_MAJOR_AXIS, 0.0)

def AddSEMI_MAJOR_AXIS(builder, SEMI_MAJOR_AXIS):
    keplerianElementsAddSEMI_MAJOR_AXIS(builder, SEMI_MAJOR_AXIS)

def keplerianElementsAddECCENTRICITY(builder, ECCENTRICITY):
    builder.PrependFloat64Slot(1, ECCENTRICITY, 0.0)

def AddECCENTRICITY(builder, ECCENTRICITY):
    keplerianElementsAddECCENTRICITY(builder, ECCENTRICITY)

def keplerianElementsAddINCLINATION(builder, INCLINATION):
    builder.PrependFloat64Slot(2, INCLINATION, 0.0)

def AddINCLINATION(builder, INCLINATION):
    keplerianElementsAddINCLINATION(builder, INCLINATION)

def keplerianElementsAddRA_OF_ASC_NODE(builder, RA_OF_ASC_NODE):
    builder.PrependFloat64Slot(3, RA_OF_ASC_NODE, 0.0)

def AddRA_OF_ASC_NODE(builder, RA_OF_ASC_NODE):
    keplerianElementsAddRA_OF_ASC_NODE(builder, RA_OF_ASC_NODE)

def keplerianElementsAddARG_OF_PERICENTER(builder, ARG_OF_PERICENTER):
    builder.PrependFloat64Slot(4, ARG_OF_PERICENTER, 0.0)

def AddARG_OF_PERICENTER(builder, ARG_OF_PERICENTER):
    keplerianElementsAddARG_OF_PERICENTER(builder, ARG_OF_PERICENTER)

def keplerianElementsAddANOMALY_TYPE(builder, ANOMALY_TYPE):
    builder.PrependInt8Slot(5, ANOMALY_TYPE, 0)

def AddANOMALY_TYPE(builder, ANOMALY_TYPE):
    keplerianElementsAddANOMALY_TYPE(builder, ANOMALY_TYPE)

def keplerianElementsAddANOMALY(builder, ANOMALY):
    builder.PrependFloat64Slot(6, ANOMALY, 0.0)

def AddANOMALY(builder, ANOMALY):
    keplerianElementsAddANOMALY(builder, ANOMALY)

def keplerianElementsEnd(builder):
    return builder.EndObject()

def End(builder):
    return keplerianElementsEnd(builder)


class keplerianElementsT(object):

    # keplerianElementsT
    def __init__(self):
        self.SEMI_MAJOR_AXIS = 0.0  # type: float
        self.ECCENTRICITY = 0.0  # type: float
        self.INCLINATION = 0.0  # type: float
        self.RA_OF_ASC_NODE = 0.0  # type: float
        self.ARG_OF_PERICENTER = 0.0  # type: float
        self.ANOMALY_TYPE = 0  # type: int
        self.ANOMALY = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        keplerianElements = keplerianElements()
        keplerianElements.Init(buf, pos)
        return cls.InitFromObj(keplerianElements)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, keplerianElements):
        x = keplerianElementsT()
        x._UnPack(keplerianElements)
        return x

    # keplerianElementsT
    def _UnPack(self, keplerianElements):
        if keplerianElements is None:
            return
        self.SEMI_MAJOR_AXIS = keplerianElements.SEMI_MAJOR_AXIS()
        self.ECCENTRICITY = keplerianElements.ECCENTRICITY()
        self.INCLINATION = keplerianElements.INCLINATION()
        self.RA_OF_ASC_NODE = keplerianElements.RA_OF_ASC_NODE()
        self.ARG_OF_PERICENTER = keplerianElements.ARG_OF_PERICENTER()
        self.ANOMALY_TYPE = keplerianElements.ANOMALY_TYPE()
        self.ANOMALY = keplerianElements.ANOMALY()

    # keplerianElementsT
    def Pack(self, builder):
        keplerianElementsStart(builder)
        keplerianElementsAddSEMI_MAJOR_AXIS(builder, self.SEMI_MAJOR_AXIS)
        keplerianElementsAddECCENTRICITY(builder, self.ECCENTRICITY)
        keplerianElementsAddINCLINATION(builder, self.INCLINATION)
        keplerianElementsAddRA_OF_ASC_NODE(builder, self.RA_OF_ASC_NODE)
        keplerianElementsAddARG_OF_PERICENTER(builder, self.ARG_OF_PERICENTER)
        keplerianElementsAddANOMALY_TYPE(builder, self.ANOMALY_TYPE)
        keplerianElementsAddANOMALY(builder, self.ANOMALY)
        keplerianElements = keplerianElementsEnd(builder)
        return keplerianElements
