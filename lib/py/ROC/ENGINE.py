# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Engine Details
class ENGINE(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ENGINE()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsENGINE(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ENGINEBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x52\x4F\x43", size_prefixed=size_prefixed)

    # ENGINE
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Engine Name
    # ENGINE
    def ENGINE_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of Engine
    # ENGINE
    def TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Thrust Produced by the Engine (in Newtons)
    # ENGINE
    def THRUST(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def ENGINEStart(builder):
    builder.StartObject(3)

def Start(builder):
    ENGINEStart(builder)

def ENGINEAddENGINE_NAME(builder, ENGINE_NAME):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ENGINE_NAME), 0)

def AddENGINE_NAME(builder, ENGINE_NAME):
    ENGINEAddENGINE_NAME(builder, ENGINE_NAME)

def ENGINEAddTYPE(builder, TYPE):
    builder.PrependInt8Slot(1, TYPE, 0)

def AddTYPE(builder, TYPE):
    ENGINEAddTYPE(builder, TYPE)

def ENGINEAddTHRUST(builder, THRUST):
    builder.PrependFloat64Slot(2, THRUST, 0.0)

def AddTHRUST(builder, THRUST):
    ENGINEAddTHRUST(builder, THRUST)

def ENGINEEnd(builder):
    return builder.EndObject()

def End(builder):
    return ENGINEEnd(builder)


class ENGINET(object):

    # ENGINET
    def __init__(self):
        self.ENGINE_NAME = None  # type: str
        self.TYPE = 0  # type: int
        self.THRUST = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ENGINE = ENGINE()
        ENGINE.Init(buf, pos)
        return cls.InitFromObj(ENGINE)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ENGINE):
        x = ENGINET()
        x._UnPack(ENGINE)
        return x

    # ENGINET
    def _UnPack(self, ENGINE):
        if ENGINE is None:
            return
        self.ENGINE_NAME = ENGINE.ENGINE_NAME()
        self.TYPE = ENGINE.TYPE()
        self.THRUST = ENGINE.THRUST()

    # ENGINET
    def Pack(self, builder):
        if self.ENGINE_NAME is not None:
            ENGINE_NAME = builder.CreateString(self.ENGINE_NAME)
        ENGINEStart(builder)
        if self.ENGINE_NAME is not None:
            ENGINEAddENGINE_NAME(builder, ENGINE_NAME)
        ENGINEAddTYPE(builder, self.TYPE)
        ENGINEAddTHRUST(builder, self.THRUST)
        ENGINE = ENGINEEnd(builder)
        return ENGINE
