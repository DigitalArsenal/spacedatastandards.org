# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SITCOLLECTION(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SITCOLLECTION()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSITCOLLECTION(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SITCOLLECTIONBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x53\x49\x54", size_prefixed=size_prefixed)

    # SITCOLLECTION
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SITCOLLECTION
    def RECORDS(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from SIT import SIT
            obj = SIT()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SITCOLLECTION
    def RECORDSLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SITCOLLECTION
    def RECORDSIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def SITCOLLECTIONStart(builder):
    builder.StartObject(1)

def Start(builder):
    SITCOLLECTIONStart(builder)

def SITCOLLECTIONAddRECORDS(builder, RECORDS):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(RECORDS), 0)

def AddRECORDS(builder, RECORDS):
    SITCOLLECTIONAddRECORDS(builder, RECORDS)

def SITCOLLECTIONStartRECORDSVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRECORDSVector(builder, numElems):
    return SITCOLLECTIONStartRECORDSVector(builder, numElems)

def SITCOLLECTIONEnd(builder):
    return builder.EndObject()

def End(builder):
    return SITCOLLECTIONEnd(builder)

import SIT
try:
    from typing import List
except:
    pass

class SITCOLLECTIONT(object):

    # SITCOLLECTIONT
    def __init__(self):
        self.RECORDS = None  # type: List[SIT.SITT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        SITCOLLECTION = SITCOLLECTION()
        SITCOLLECTION.Init(buf, pos)
        return cls.InitFromObj(SITCOLLECTION)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, SITCOLLECTION):
        x = SITCOLLECTIONT()
        x._UnPack(SITCOLLECTION)
        return x

    # SITCOLLECTIONT
    def _UnPack(self, SITCOLLECTION):
        if SITCOLLECTION is None:
            return
        if not SITCOLLECTION.RECORDSIsNone():
            self.RECORDS = []
            for i in range(SITCOLLECTION.RECORDSLength()):
                if SITCOLLECTION.RECORDS(i) is None:
                    self.RECORDS.append(None)
                else:
                    sIT_ = SIT.SITT.InitFromObj(SITCOLLECTION.RECORDS(i))
                    self.RECORDS.append(sIT_)

    # SITCOLLECTIONT
    def Pack(self, builder):
        if self.RECORDS is not None:
            RECORDSlist = []
            for i in range(len(self.RECORDS)):
                RECORDSlist.append(self.RECORDS[i].Pack(builder))
            SITCOLLECTIONStartRECORDSVector(builder, len(self.RECORDS))
            for i in reversed(range(len(self.RECORDS))):
                builder.PrependUOffsetTRelative(RECORDSlist[i])
            RECORDS = builder.EndVector()
        SITCOLLECTIONStart(builder)
        if self.RECORDS is not None:
            SITCOLLECTIONAddRECORDS(builder, RECORDS)
        SITCOLLECTION = SITCOLLECTIONEnd(builder)
        return SITCOLLECTION
