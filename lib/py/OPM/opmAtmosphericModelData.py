# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# OPM Atmospheric and Perturbation Model Data
class opmAtmosphericModelData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = opmAtmosphericModelData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsopmAtmosphericModelData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # opmAtmosphericModelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # opmAtmosphericModelData
    def ATMOSPHERIC_MODEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # opmAtmosphericModelData
    def GEOPOTENTIAL_MODEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # opmAtmosphericModelData
    def LUNAR_SOLAR_PERTURBATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # opmAtmosphericModelData
    def LUNAR_PERTURBATION_MODEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # opmAtmosphericModelData
    def SOLAR_PERTURBATION_MODEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # opmAtmosphericModelData
    def SOLAR_RADIATION_PRESSURE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # opmAtmosphericModelData
    def SRP_MODEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # opmAtmosphericModelData
    def RESONANCE_MODEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def opmAtmosphericModelDataStart(builder):
    builder.StartObject(8)

def Start(builder):
    opmAtmosphericModelDataStart(builder)

def opmAtmosphericModelDataAddATMOSPHERIC_MODEL(builder, ATMOSPHERIC_MODEL):
    builder.PrependInt8Slot(0, ATMOSPHERIC_MODEL, 0)

def AddATMOSPHERIC_MODEL(builder, ATMOSPHERIC_MODEL):
    opmAtmosphericModelDataAddATMOSPHERIC_MODEL(builder, ATMOSPHERIC_MODEL)

def opmAtmosphericModelDataAddGEOPOTENTIAL_MODEL(builder, GEOPOTENTIAL_MODEL):
    builder.PrependInt8Slot(1, GEOPOTENTIAL_MODEL, 0)

def AddGEOPOTENTIAL_MODEL(builder, GEOPOTENTIAL_MODEL):
    opmAtmosphericModelDataAddGEOPOTENTIAL_MODEL(builder, GEOPOTENTIAL_MODEL)

def opmAtmosphericModelDataAddLUNAR_SOLAR_PERTURBATION(builder, LUNAR_SOLAR_PERTURBATION):
    builder.PrependInt8Slot(2, LUNAR_SOLAR_PERTURBATION, 0)

def AddLUNAR_SOLAR_PERTURBATION(builder, LUNAR_SOLAR_PERTURBATION):
    opmAtmosphericModelDataAddLUNAR_SOLAR_PERTURBATION(builder, LUNAR_SOLAR_PERTURBATION)

def opmAtmosphericModelDataAddLUNAR_PERTURBATION_MODEL(builder, LUNAR_PERTURBATION_MODEL):
    builder.PrependInt8Slot(3, LUNAR_PERTURBATION_MODEL, 0)

def AddLUNAR_PERTURBATION_MODEL(builder, LUNAR_PERTURBATION_MODEL):
    opmAtmosphericModelDataAddLUNAR_PERTURBATION_MODEL(builder, LUNAR_PERTURBATION_MODEL)

def opmAtmosphericModelDataAddSOLAR_PERTURBATION_MODEL(builder, SOLAR_PERTURBATION_MODEL):
    builder.PrependInt8Slot(4, SOLAR_PERTURBATION_MODEL, 0)

def AddSOLAR_PERTURBATION_MODEL(builder, SOLAR_PERTURBATION_MODEL):
    opmAtmosphericModelDataAddSOLAR_PERTURBATION_MODEL(builder, SOLAR_PERTURBATION_MODEL)

def opmAtmosphericModelDataAddSOLAR_RADIATION_PRESSURE(builder, SOLAR_RADIATION_PRESSURE):
    builder.PrependInt8Slot(5, SOLAR_RADIATION_PRESSURE, 0)

def AddSOLAR_RADIATION_PRESSURE(builder, SOLAR_RADIATION_PRESSURE):
    opmAtmosphericModelDataAddSOLAR_RADIATION_PRESSURE(builder, SOLAR_RADIATION_PRESSURE)

def opmAtmosphericModelDataAddSRP_MODEL(builder, SRP_MODEL):
    builder.PrependInt8Slot(6, SRP_MODEL, 0)

def AddSRP_MODEL(builder, SRP_MODEL):
    opmAtmosphericModelDataAddSRP_MODEL(builder, SRP_MODEL)

def opmAtmosphericModelDataAddRESONANCE_MODEL(builder, RESONANCE_MODEL):
    builder.PrependInt8Slot(7, RESONANCE_MODEL, 0)

def AddRESONANCE_MODEL(builder, RESONANCE_MODEL):
    opmAtmosphericModelDataAddRESONANCE_MODEL(builder, RESONANCE_MODEL)

def opmAtmosphericModelDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return opmAtmosphericModelDataEnd(builder)


class opmAtmosphericModelDataT(object):

    # opmAtmosphericModelDataT
    def __init__(self):
        self.ATMOSPHERIC_MODEL = 0  # type: int
        self.GEOPOTENTIAL_MODEL = 0  # type: int
        self.LUNAR_SOLAR_PERTURBATION = 0  # type: int
        self.LUNAR_PERTURBATION_MODEL = 0  # type: int
        self.SOLAR_PERTURBATION_MODEL = 0  # type: int
        self.SOLAR_RADIATION_PRESSURE = 0  # type: int
        self.SRP_MODEL = 0  # type: int
        self.RESONANCE_MODEL = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        opmAtmosphericModelData = opmAtmosphericModelData()
        opmAtmosphericModelData.Init(buf, pos)
        return cls.InitFromObj(opmAtmosphericModelData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, opmAtmosphericModelData):
        x = opmAtmosphericModelDataT()
        x._UnPack(opmAtmosphericModelData)
        return x

    # opmAtmosphericModelDataT
    def _UnPack(self, opmAtmosphericModelData):
        if opmAtmosphericModelData is None:
            return
        self.ATMOSPHERIC_MODEL = opmAtmosphericModelData.ATMOSPHERIC_MODEL()
        self.GEOPOTENTIAL_MODEL = opmAtmosphericModelData.GEOPOTENTIAL_MODEL()
        self.LUNAR_SOLAR_PERTURBATION = opmAtmosphericModelData.LUNAR_SOLAR_PERTURBATION()
        self.LUNAR_PERTURBATION_MODEL = opmAtmosphericModelData.LUNAR_PERTURBATION_MODEL()
        self.SOLAR_PERTURBATION_MODEL = opmAtmosphericModelData.SOLAR_PERTURBATION_MODEL()
        self.SOLAR_RADIATION_PRESSURE = opmAtmosphericModelData.SOLAR_RADIATION_PRESSURE()
        self.SRP_MODEL = opmAtmosphericModelData.SRP_MODEL()
        self.RESONANCE_MODEL = opmAtmosphericModelData.RESONANCE_MODEL()

    # opmAtmosphericModelDataT
    def Pack(self, builder):
        opmAtmosphericModelDataStart(builder)
        opmAtmosphericModelDataAddATMOSPHERIC_MODEL(builder, self.ATMOSPHERIC_MODEL)
        opmAtmosphericModelDataAddGEOPOTENTIAL_MODEL(builder, self.GEOPOTENTIAL_MODEL)
        opmAtmosphericModelDataAddLUNAR_SOLAR_PERTURBATION(builder, self.LUNAR_SOLAR_PERTURBATION)
        opmAtmosphericModelDataAddLUNAR_PERTURBATION_MODEL(builder, self.LUNAR_PERTURBATION_MODEL)
        opmAtmosphericModelDataAddSOLAR_PERTURBATION_MODEL(builder, self.SOLAR_PERTURBATION_MODEL)
        opmAtmosphericModelDataAddSOLAR_RADIATION_PRESSURE(builder, self.SOLAR_RADIATION_PRESSURE)
        opmAtmosphericModelDataAddSRP_MODEL(builder, self.SRP_MODEL)
        opmAtmosphericModelDataAddRESONANCE_MODEL(builder, self.RESONANCE_MODEL)
        opmAtmosphericModelData = opmAtmosphericModelDataEnd(builder)
        return opmAtmosphericModelData
