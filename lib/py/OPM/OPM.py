# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Orbit Parameter Message
class OPM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OPM()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOPM(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OPM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OPM
    def CCSDS_OMM_VERS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OPM
    def CREATION_DATE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OPM
    def ORIGINATOR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OPM
    def OBJECT_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OPM
    def OBJECT_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OPM
    def CENTER_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OPM
    def REF_FRAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OPM
    def TIME_SYSTEM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OPM
    def STATE_VECTOR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from opmStateVector import opmStateVector
            obj = opmStateVector()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OPM
    def KEPLERIAN_ELEMENTS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from keplerianElements import keplerianElements
            obj = keplerianElements()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OPM
    def EQUINOCTIAL_ELEMENTS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from equinoctialElements import equinoctialElements
            obj = equinoctialElements()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OPM
    def GM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OPM
    def ATMOSPHERIC_MODEL_DATA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from opmAtmosphericModelData import opmAtmosphericModelData
            obj = opmAtmosphericModelData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OPM
    def PROPAGATOR_SETTINGS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from propagatorConfig import propagatorConfig
            obj = propagatorConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OPM
    def COVARIANCE_MATRIX(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from opmCovarianceMatrixLine import opmCovarianceMatrixLine
            obj = opmCovarianceMatrixLine()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OPM
    def COVARIANCE_MATRIXLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OPM
    def COVARIANCE_MATRIXIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # OPM
    def UVW_SIGMAS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from uvwSigmas import uvwSigmas
            obj = uvwSigmas()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OPM
    def MASS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OPM
    def SOLAR_RAD_AREA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OPM
    def SOLAR_RAD_COEFF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OPM
    def DRAG_AREA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OPM
    def DRAG_COEFF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OPM
    def SRP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # OPM
    def CLASSIFICATION_TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OPM
    def NORAD_CAT_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OPM
    def ELEMENT_SET_NO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OPM
    def REV_AT_EPOCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OPM
    def BSTAR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OPM
    def MEAN_MOTION_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OPM
    def MEAN_MOTION_DDOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OPM
    def COV_REFERENCE_FRAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OPM
    def CX_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OPM
    def CY_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OPM
    def CZ_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OPM
    def CX_DOT_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OPM
    def USER_DEFINED_BIP_0044_TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OPM
    def USER_DEFINED_OBJECT_DESIGNATOR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OPM
    def USER_DEFINED_EARTH_MODEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OPM
    def USER_DEFINED_EPOCH_TIMESTAMP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OPM
    def USER_DEFINED_MICROSECONDS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def OPMStart(builder):
    builder.StartObject(39)

def Start(builder):
    OPMStart(builder)

def OPMAddCCSDS_OMM_VERS(builder, CCSDS_OMM_VERS):
    builder.PrependFloat64Slot(0, CCSDS_OMM_VERS, 0.0)

def AddCCSDS_OMM_VERS(builder, CCSDS_OMM_VERS):
    OPMAddCCSDS_OMM_VERS(builder, CCSDS_OMM_VERS)

def OPMAddCREATION_DATE(builder, CREATION_DATE):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(CREATION_DATE), 0)

def AddCREATION_DATE(builder, CREATION_DATE):
    OPMAddCREATION_DATE(builder, CREATION_DATE)

def OPMAddORIGINATOR(builder, ORIGINATOR):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ORIGINATOR), 0)

def AddORIGINATOR(builder, ORIGINATOR):
    OPMAddORIGINATOR(builder, ORIGINATOR)

def OPMAddOBJECT_NAME(builder, OBJECT_NAME):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(OBJECT_NAME), 0)

def AddOBJECT_NAME(builder, OBJECT_NAME):
    OPMAddOBJECT_NAME(builder, OBJECT_NAME)

def OPMAddOBJECT_ID(builder, OBJECT_ID):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(OBJECT_ID), 0)

def AddOBJECT_ID(builder, OBJECT_ID):
    OPMAddOBJECT_ID(builder, OBJECT_ID)

def OPMAddCENTER_NAME(builder, CENTER_NAME):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(CENTER_NAME), 0)

def AddCENTER_NAME(builder, CENTER_NAME):
    OPMAddCENTER_NAME(builder, CENTER_NAME)

def OPMAddREF_FRAME(builder, REF_FRAME):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(REF_FRAME), 0)

def AddREF_FRAME(builder, REF_FRAME):
    OPMAddREF_FRAME(builder, REF_FRAME)

def OPMAddTIME_SYSTEM(builder, TIME_SYSTEM):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(TIME_SYSTEM), 0)

def AddTIME_SYSTEM(builder, TIME_SYSTEM):
    OPMAddTIME_SYSTEM(builder, TIME_SYSTEM)

def OPMAddSTATE_VECTOR(builder, STATE_VECTOR):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(STATE_VECTOR), 0)

def AddSTATE_VECTOR(builder, STATE_VECTOR):
    OPMAddSTATE_VECTOR(builder, STATE_VECTOR)

def OPMAddKEPLERIAN_ELEMENTS(builder, KEPLERIAN_ELEMENTS):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(KEPLERIAN_ELEMENTS), 0)

def AddKEPLERIAN_ELEMENTS(builder, KEPLERIAN_ELEMENTS):
    OPMAddKEPLERIAN_ELEMENTS(builder, KEPLERIAN_ELEMENTS)

def OPMAddEQUINOCTIAL_ELEMENTS(builder, EQUINOCTIAL_ELEMENTS):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(EQUINOCTIAL_ELEMENTS), 0)

def AddEQUINOCTIAL_ELEMENTS(builder, EQUINOCTIAL_ELEMENTS):
    OPMAddEQUINOCTIAL_ELEMENTS(builder, EQUINOCTIAL_ELEMENTS)

def OPMAddGM(builder, GM):
    builder.PrependFloat64Slot(11, GM, 0.0)

def AddGM(builder, GM):
    OPMAddGM(builder, GM)

def OPMAddATMOSPHERIC_MODEL_DATA(builder, ATMOSPHERIC_MODEL_DATA):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(ATMOSPHERIC_MODEL_DATA), 0)

def AddATMOSPHERIC_MODEL_DATA(builder, ATMOSPHERIC_MODEL_DATA):
    OPMAddATMOSPHERIC_MODEL_DATA(builder, ATMOSPHERIC_MODEL_DATA)

def OPMAddPROPAGATOR_SETTINGS(builder, PROPAGATOR_SETTINGS):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(PROPAGATOR_SETTINGS), 0)

def AddPROPAGATOR_SETTINGS(builder, PROPAGATOR_SETTINGS):
    OPMAddPROPAGATOR_SETTINGS(builder, PROPAGATOR_SETTINGS)

def OPMAddCOVARIANCE_MATRIX(builder, COVARIANCE_MATRIX):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(COVARIANCE_MATRIX), 0)

def AddCOVARIANCE_MATRIX(builder, COVARIANCE_MATRIX):
    OPMAddCOVARIANCE_MATRIX(builder, COVARIANCE_MATRIX)

def OPMStartCOVARIANCE_MATRIXVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCOVARIANCE_MATRIXVector(builder, numElems):
    return OPMStartCOVARIANCE_MATRIXVector(builder, numElems)

def OPMAddUVW_SIGMAS(builder, UVW_SIGMAS):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(UVW_SIGMAS), 0)

def AddUVW_SIGMAS(builder, UVW_SIGMAS):
    OPMAddUVW_SIGMAS(builder, UVW_SIGMAS)

def OPMAddMASS(builder, MASS):
    builder.PrependFloat64Slot(16, MASS, 0.0)

def AddMASS(builder, MASS):
    OPMAddMASS(builder, MASS)

def OPMAddSOLAR_RAD_AREA(builder, SOLAR_RAD_AREA):
    builder.PrependFloat64Slot(17, SOLAR_RAD_AREA, 0.0)

def AddSOLAR_RAD_AREA(builder, SOLAR_RAD_AREA):
    OPMAddSOLAR_RAD_AREA(builder, SOLAR_RAD_AREA)

def OPMAddSOLAR_RAD_COEFF(builder, SOLAR_RAD_COEFF):
    builder.PrependFloat64Slot(18, SOLAR_RAD_COEFF, 0.0)

def AddSOLAR_RAD_COEFF(builder, SOLAR_RAD_COEFF):
    OPMAddSOLAR_RAD_COEFF(builder, SOLAR_RAD_COEFF)

def OPMAddDRAG_AREA(builder, DRAG_AREA):
    builder.PrependFloat64Slot(19, DRAG_AREA, 0.0)

def AddDRAG_AREA(builder, DRAG_AREA):
    OPMAddDRAG_AREA(builder, DRAG_AREA)

def OPMAddDRAG_COEFF(builder, DRAG_COEFF):
    builder.PrependFloat64Slot(20, DRAG_COEFF, 0.0)

def AddDRAG_COEFF(builder, DRAG_COEFF):
    OPMAddDRAG_COEFF(builder, DRAG_COEFF)

def OPMAddSRP(builder, SRP):
    builder.PrependInt8Slot(21, SRP, 0)

def AddSRP(builder, SRP):
    OPMAddSRP(builder, SRP)

def OPMAddCLASSIFICATION_TYPE(builder, CLASSIFICATION_TYPE):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(CLASSIFICATION_TYPE), 0)

def AddCLASSIFICATION_TYPE(builder, CLASSIFICATION_TYPE):
    OPMAddCLASSIFICATION_TYPE(builder, CLASSIFICATION_TYPE)

def OPMAddNORAD_CAT_ID(builder, NORAD_CAT_ID):
    builder.PrependUint32Slot(23, NORAD_CAT_ID, 0)

def AddNORAD_CAT_ID(builder, NORAD_CAT_ID):
    OPMAddNORAD_CAT_ID(builder, NORAD_CAT_ID)

def OPMAddELEMENT_SET_NO(builder, ELEMENT_SET_NO):
    builder.PrependUint32Slot(24, ELEMENT_SET_NO, 0)

def AddELEMENT_SET_NO(builder, ELEMENT_SET_NO):
    OPMAddELEMENT_SET_NO(builder, ELEMENT_SET_NO)

def OPMAddREV_AT_EPOCH(builder, REV_AT_EPOCH):
    builder.PrependFloat64Slot(25, REV_AT_EPOCH, 0.0)

def AddREV_AT_EPOCH(builder, REV_AT_EPOCH):
    OPMAddREV_AT_EPOCH(builder, REV_AT_EPOCH)

def OPMAddBSTAR(builder, BSTAR):
    builder.PrependFloat64Slot(26, BSTAR, 0.0)

def AddBSTAR(builder, BSTAR):
    OPMAddBSTAR(builder, BSTAR)

def OPMAddMEAN_MOTION_DOT(builder, MEAN_MOTION_DOT):
    builder.PrependFloat64Slot(27, MEAN_MOTION_DOT, 0.0)

def AddMEAN_MOTION_DOT(builder, MEAN_MOTION_DOT):
    OPMAddMEAN_MOTION_DOT(builder, MEAN_MOTION_DOT)

def OPMAddMEAN_MOTION_DDOT(builder, MEAN_MOTION_DDOT):
    builder.PrependFloat64Slot(28, MEAN_MOTION_DDOT, 0.0)

def AddMEAN_MOTION_DDOT(builder, MEAN_MOTION_DDOT):
    OPMAddMEAN_MOTION_DDOT(builder, MEAN_MOTION_DDOT)

def OPMAddCOV_REFERENCE_FRAME(builder, COV_REFERENCE_FRAME):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(COV_REFERENCE_FRAME), 0)

def AddCOV_REFERENCE_FRAME(builder, COV_REFERENCE_FRAME):
    OPMAddCOV_REFERENCE_FRAME(builder, COV_REFERENCE_FRAME)

def OPMAddCX_X(builder, CX_X):
    builder.PrependFloat64Slot(30, CX_X, 0.0)

def AddCX_X(builder, CX_X):
    OPMAddCX_X(builder, CX_X)

def OPMAddCY_X(builder, CY_X):
    builder.PrependFloat64Slot(31, CY_X, 0.0)

def AddCY_X(builder, CY_X):
    OPMAddCY_X(builder, CY_X)

def OPMAddCZ_X(builder, CZ_X):
    builder.PrependFloat64Slot(32, CZ_X, 0.0)

def AddCZ_X(builder, CZ_X):
    OPMAddCZ_X(builder, CZ_X)

def OPMAddCX_DOT_X(builder, CX_DOT_X):
    builder.PrependFloat64Slot(33, CX_DOT_X, 0.0)

def AddCX_DOT_X(builder, CX_DOT_X):
    OPMAddCX_DOT_X(builder, CX_DOT_X)

def OPMAddUSER_DEFINED_BIP_0044_TYPE(builder, USER_DEFINED_BIP_0044_TYPE):
    builder.PrependUint32Slot(34, USER_DEFINED_BIP_0044_TYPE, 0)

def AddUSER_DEFINED_BIP_0044_TYPE(builder, USER_DEFINED_BIP_0044_TYPE):
    OPMAddUSER_DEFINED_BIP_0044_TYPE(builder, USER_DEFINED_BIP_0044_TYPE)

def OPMAddUSER_DEFINED_OBJECT_DESIGNATOR(builder, USER_DEFINED_OBJECT_DESIGNATOR):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(USER_DEFINED_OBJECT_DESIGNATOR), 0)

def AddUSER_DEFINED_OBJECT_DESIGNATOR(builder, USER_DEFINED_OBJECT_DESIGNATOR):
    OPMAddUSER_DEFINED_OBJECT_DESIGNATOR(builder, USER_DEFINED_OBJECT_DESIGNATOR)

def OPMAddUSER_DEFINED_EARTH_MODEL(builder, USER_DEFINED_EARTH_MODEL):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(USER_DEFINED_EARTH_MODEL), 0)

def AddUSER_DEFINED_EARTH_MODEL(builder, USER_DEFINED_EARTH_MODEL):
    OPMAddUSER_DEFINED_EARTH_MODEL(builder, USER_DEFINED_EARTH_MODEL)

def OPMAddUSER_DEFINED_EPOCH_TIMESTAMP(builder, USER_DEFINED_EPOCH_TIMESTAMP):
    builder.PrependFloat64Slot(37, USER_DEFINED_EPOCH_TIMESTAMP, 0.0)

def AddUSER_DEFINED_EPOCH_TIMESTAMP(builder, USER_DEFINED_EPOCH_TIMESTAMP):
    OPMAddUSER_DEFINED_EPOCH_TIMESTAMP(builder, USER_DEFINED_EPOCH_TIMESTAMP)

def OPMAddUSER_DEFINED_MICROSECONDS(builder, USER_DEFINED_MICROSECONDS):
    builder.PrependFloat64Slot(38, USER_DEFINED_MICROSECONDS, 0.0)

def AddUSER_DEFINED_MICROSECONDS(builder, USER_DEFINED_MICROSECONDS):
    OPMAddUSER_DEFINED_MICROSECONDS(builder, USER_DEFINED_MICROSECONDS)

def OPMEnd(builder):
    return builder.EndObject()

def End(builder):
    return OPMEnd(builder)

import equinoctialElements
import keplerianElements
import opmAtmosphericModelData
import opmCovarianceMatrixLine
import opmStateVector
import propagatorConfig
import uvwSigmas
try:
    from typing import List, Optional
except:
    pass

class OPMT(object):

    # OPMT
    def __init__(self):
        self.CCSDS_OMM_VERS = 0.0  # type: float
        self.CREATION_DATE = None  # type: str
        self.ORIGINATOR = None  # type: str
        self.OBJECT_NAME = None  # type: str
        self.OBJECT_ID = None  # type: str
        self.CENTER_NAME = None  # type: str
        self.REF_FRAME = None  # type: str
        self.TIME_SYSTEM = None  # type: str
        self.STATE_VECTOR = None  # type: Optional[opmStateVector.opmStateVectorT]
        self.KEPLERIAN_ELEMENTS = None  # type: Optional[keplerianElements.keplerianElementsT]
        self.EQUINOCTIAL_ELEMENTS = None  # type: Optional[equinoctialElements.equinoctialElementsT]
        self.GM = 0.0  # type: float
        self.ATMOSPHERIC_MODEL_DATA = None  # type: Optional[opmAtmosphericModelData.opmAtmosphericModelDataT]
        self.PROPAGATOR_SETTINGS = None  # type: Optional[propagatorConfig.propagatorConfigT]
        self.COVARIANCE_MATRIX = None  # type: List[opmCovarianceMatrixLine.opmCovarianceMatrixLineT]
        self.UVW_SIGMAS = None  # type: Optional[uvwSigmas.uvwSigmasT]
        self.MASS = 0.0  # type: float
        self.SOLAR_RAD_AREA = 0.0  # type: float
        self.SOLAR_RAD_COEFF = 0.0  # type: float
        self.DRAG_AREA = 0.0  # type: float
        self.DRAG_COEFF = 0.0  # type: float
        self.SRP = 0  # type: int
        self.CLASSIFICATION_TYPE = None  # type: str
        self.NORAD_CAT_ID = 0  # type: int
        self.ELEMENT_SET_NO = 0  # type: int
        self.REV_AT_EPOCH = 0.0  # type: float
        self.BSTAR = 0.0  # type: float
        self.MEAN_MOTION_DOT = 0.0  # type: float
        self.MEAN_MOTION_DDOT = 0.0  # type: float
        self.COV_REFERENCE_FRAME = None  # type: str
        self.CX_X = 0.0  # type: float
        self.CY_X = 0.0  # type: float
        self.CZ_X = 0.0  # type: float
        self.CX_DOT_X = 0.0  # type: float
        self.USER_DEFINED_BIP_0044_TYPE = 0  # type: int
        self.USER_DEFINED_OBJECT_DESIGNATOR = None  # type: str
        self.USER_DEFINED_EARTH_MODEL = None  # type: str
        self.USER_DEFINED_EPOCH_TIMESTAMP = 0.0  # type: float
        self.USER_DEFINED_MICROSECONDS = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        OPM = OPM()
        OPM.Init(buf, pos)
        return cls.InitFromObj(OPM)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, OPM):
        x = OPMT()
        x._UnPack(OPM)
        return x

    # OPMT
    def _UnPack(self, OPM):
        if OPM is None:
            return
        self.CCSDS_OMM_VERS = OPM.CCSDS_OMM_VERS()
        self.CREATION_DATE = OPM.CREATION_DATE()
        self.ORIGINATOR = OPM.ORIGINATOR()
        self.OBJECT_NAME = OPM.OBJECT_NAME()
        self.OBJECT_ID = OPM.OBJECT_ID()
        self.CENTER_NAME = OPM.CENTER_NAME()
        self.REF_FRAME = OPM.REF_FRAME()
        self.TIME_SYSTEM = OPM.TIME_SYSTEM()
        if OPM.STATE_VECTOR() is not None:
            self.STATE_VECTOR = opmStateVector.opmStateVectorT.InitFromObj(OPM.STATE_VECTOR())
        if OPM.KEPLERIAN_ELEMENTS() is not None:
            self.KEPLERIAN_ELEMENTS = keplerianElements.keplerianElementsT.InitFromObj(OPM.KEPLERIAN_ELEMENTS())
        if OPM.EQUINOCTIAL_ELEMENTS() is not None:
            self.EQUINOCTIAL_ELEMENTS = equinoctialElements.equinoctialElementsT.InitFromObj(OPM.EQUINOCTIAL_ELEMENTS())
        self.GM = OPM.GM()
        if OPM.ATMOSPHERIC_MODEL_DATA() is not None:
            self.ATMOSPHERIC_MODEL_DATA = opmAtmosphericModelData.opmAtmosphericModelDataT.InitFromObj(OPM.ATMOSPHERIC_MODEL_DATA())
        if OPM.PROPAGATOR_SETTINGS() is not None:
            self.PROPAGATOR_SETTINGS = propagatorConfig.propagatorConfigT.InitFromObj(OPM.PROPAGATOR_SETTINGS())
        if not OPM.COVARIANCE_MATRIXIsNone():
            self.COVARIANCE_MATRIX = []
            for i in range(OPM.COVARIANCE_MATRIXLength()):
                if OPM.COVARIANCE_MATRIX(i) is None:
                    self.COVARIANCE_MATRIX.append(None)
                else:
                    opmCovarianceMatrixLine_ = opmCovarianceMatrixLine.opmCovarianceMatrixLineT.InitFromObj(OPM.COVARIANCE_MATRIX(i))
                    self.COVARIANCE_MATRIX.append(opmCovarianceMatrixLine_)
        if OPM.UVW_SIGMAS() is not None:
            self.UVW_SIGMAS = uvwSigmas.uvwSigmasT.InitFromObj(OPM.UVW_SIGMAS())
        self.MASS = OPM.MASS()
        self.SOLAR_RAD_AREA = OPM.SOLAR_RAD_AREA()
        self.SOLAR_RAD_COEFF = OPM.SOLAR_RAD_COEFF()
        self.DRAG_AREA = OPM.DRAG_AREA()
        self.DRAG_COEFF = OPM.DRAG_COEFF()
        self.SRP = OPM.SRP()
        self.CLASSIFICATION_TYPE = OPM.CLASSIFICATION_TYPE()
        self.NORAD_CAT_ID = OPM.NORAD_CAT_ID()
        self.ELEMENT_SET_NO = OPM.ELEMENT_SET_NO()
        self.REV_AT_EPOCH = OPM.REV_AT_EPOCH()
        self.BSTAR = OPM.BSTAR()
        self.MEAN_MOTION_DOT = OPM.MEAN_MOTION_DOT()
        self.MEAN_MOTION_DDOT = OPM.MEAN_MOTION_DDOT()
        self.COV_REFERENCE_FRAME = OPM.COV_REFERENCE_FRAME()
        self.CX_X = OPM.CX_X()
        self.CY_X = OPM.CY_X()
        self.CZ_X = OPM.CZ_X()
        self.CX_DOT_X = OPM.CX_DOT_X()
        self.USER_DEFINED_BIP_0044_TYPE = OPM.USER_DEFINED_BIP_0044_TYPE()
        self.USER_DEFINED_OBJECT_DESIGNATOR = OPM.USER_DEFINED_OBJECT_DESIGNATOR()
        self.USER_DEFINED_EARTH_MODEL = OPM.USER_DEFINED_EARTH_MODEL()
        self.USER_DEFINED_EPOCH_TIMESTAMP = OPM.USER_DEFINED_EPOCH_TIMESTAMP()
        self.USER_DEFINED_MICROSECONDS = OPM.USER_DEFINED_MICROSECONDS()

    # OPMT
    def Pack(self, builder):
        if self.CREATION_DATE is not None:
            CREATION_DATE = builder.CreateString(self.CREATION_DATE)
        if self.ORIGINATOR is not None:
            ORIGINATOR = builder.CreateString(self.ORIGINATOR)
        if self.OBJECT_NAME is not None:
            OBJECT_NAME = builder.CreateString(self.OBJECT_NAME)
        if self.OBJECT_ID is not None:
            OBJECT_ID = builder.CreateString(self.OBJECT_ID)
        if self.CENTER_NAME is not None:
            CENTER_NAME = builder.CreateString(self.CENTER_NAME)
        if self.REF_FRAME is not None:
            REF_FRAME = builder.CreateString(self.REF_FRAME)
        if self.TIME_SYSTEM is not None:
            TIME_SYSTEM = builder.CreateString(self.TIME_SYSTEM)
        if self.STATE_VECTOR is not None:
            STATE_VECTOR = self.STATE_VECTOR.Pack(builder)
        if self.KEPLERIAN_ELEMENTS is not None:
            KEPLERIAN_ELEMENTS = self.KEPLERIAN_ELEMENTS.Pack(builder)
        if self.EQUINOCTIAL_ELEMENTS is not None:
            EQUINOCTIAL_ELEMENTS = self.EQUINOCTIAL_ELEMENTS.Pack(builder)
        if self.ATMOSPHERIC_MODEL_DATA is not None:
            ATMOSPHERIC_MODEL_DATA = self.ATMOSPHERIC_MODEL_DATA.Pack(builder)
        if self.PROPAGATOR_SETTINGS is not None:
            PROPAGATOR_SETTINGS = self.PROPAGATOR_SETTINGS.Pack(builder)
        if self.COVARIANCE_MATRIX is not None:
            COVARIANCE_MATRIXlist = []
            for i in range(len(self.COVARIANCE_MATRIX)):
                COVARIANCE_MATRIXlist.append(self.COVARIANCE_MATRIX[i].Pack(builder))
            OPMStartCOVARIANCE_MATRIXVector(builder, len(self.COVARIANCE_MATRIX))
            for i in reversed(range(len(self.COVARIANCE_MATRIX))):
                builder.PrependUOffsetTRelative(COVARIANCE_MATRIXlist[i])
            COVARIANCE_MATRIX = builder.EndVector()
        if self.UVW_SIGMAS is not None:
            UVW_SIGMAS = self.UVW_SIGMAS.Pack(builder)
        if self.CLASSIFICATION_TYPE is not None:
            CLASSIFICATION_TYPE = builder.CreateString(self.CLASSIFICATION_TYPE)
        if self.COV_REFERENCE_FRAME is not None:
            COV_REFERENCE_FRAME = builder.CreateString(self.COV_REFERENCE_FRAME)
        if self.USER_DEFINED_OBJECT_DESIGNATOR is not None:
            USER_DEFINED_OBJECT_DESIGNATOR = builder.CreateString(self.USER_DEFINED_OBJECT_DESIGNATOR)
        if self.USER_DEFINED_EARTH_MODEL is not None:
            USER_DEFINED_EARTH_MODEL = builder.CreateString(self.USER_DEFINED_EARTH_MODEL)
        OPMStart(builder)
        OPMAddCCSDS_OMM_VERS(builder, self.CCSDS_OMM_VERS)
        if self.CREATION_DATE is not None:
            OPMAddCREATION_DATE(builder, CREATION_DATE)
        if self.ORIGINATOR is not None:
            OPMAddORIGINATOR(builder, ORIGINATOR)
        if self.OBJECT_NAME is not None:
            OPMAddOBJECT_NAME(builder, OBJECT_NAME)
        if self.OBJECT_ID is not None:
            OPMAddOBJECT_ID(builder, OBJECT_ID)
        if self.CENTER_NAME is not None:
            OPMAddCENTER_NAME(builder, CENTER_NAME)
        if self.REF_FRAME is not None:
            OPMAddREF_FRAME(builder, REF_FRAME)
        if self.TIME_SYSTEM is not None:
            OPMAddTIME_SYSTEM(builder, TIME_SYSTEM)
        if self.STATE_VECTOR is not None:
            OPMAddSTATE_VECTOR(builder, STATE_VECTOR)
        if self.KEPLERIAN_ELEMENTS is not None:
            OPMAddKEPLERIAN_ELEMENTS(builder, KEPLERIAN_ELEMENTS)
        if self.EQUINOCTIAL_ELEMENTS is not None:
            OPMAddEQUINOCTIAL_ELEMENTS(builder, EQUINOCTIAL_ELEMENTS)
        OPMAddGM(builder, self.GM)
        if self.ATMOSPHERIC_MODEL_DATA is not None:
            OPMAddATMOSPHERIC_MODEL_DATA(builder, ATMOSPHERIC_MODEL_DATA)
        if self.PROPAGATOR_SETTINGS is not None:
            OPMAddPROPAGATOR_SETTINGS(builder, PROPAGATOR_SETTINGS)
        if self.COVARIANCE_MATRIX is not None:
            OPMAddCOVARIANCE_MATRIX(builder, COVARIANCE_MATRIX)
        if self.UVW_SIGMAS is not None:
            OPMAddUVW_SIGMAS(builder, UVW_SIGMAS)
        OPMAddMASS(builder, self.MASS)
        OPMAddSOLAR_RAD_AREA(builder, self.SOLAR_RAD_AREA)
        OPMAddSOLAR_RAD_COEFF(builder, self.SOLAR_RAD_COEFF)
        OPMAddDRAG_AREA(builder, self.DRAG_AREA)
        OPMAddDRAG_COEFF(builder, self.DRAG_COEFF)
        OPMAddSRP(builder, self.SRP)
        if self.CLASSIFICATION_TYPE is not None:
            OPMAddCLASSIFICATION_TYPE(builder, CLASSIFICATION_TYPE)
        OPMAddNORAD_CAT_ID(builder, self.NORAD_CAT_ID)
        OPMAddELEMENT_SET_NO(builder, self.ELEMENT_SET_NO)
        OPMAddREV_AT_EPOCH(builder, self.REV_AT_EPOCH)
        OPMAddBSTAR(builder, self.BSTAR)
        OPMAddMEAN_MOTION_DOT(builder, self.MEAN_MOTION_DOT)
        OPMAddMEAN_MOTION_DDOT(builder, self.MEAN_MOTION_DDOT)
        if self.COV_REFERENCE_FRAME is not None:
            OPMAddCOV_REFERENCE_FRAME(builder, COV_REFERENCE_FRAME)
        OPMAddCX_X(builder, self.CX_X)
        OPMAddCY_X(builder, self.CY_X)
        OPMAddCZ_X(builder, self.CZ_X)
        OPMAddCX_DOT_X(builder, self.CX_DOT_X)
        OPMAddUSER_DEFINED_BIP_0044_TYPE(builder, self.USER_DEFINED_BIP_0044_TYPE)
        if self.USER_DEFINED_OBJECT_DESIGNATOR is not None:
            OPMAddUSER_DEFINED_OBJECT_DESIGNATOR(builder, USER_DEFINED_OBJECT_DESIGNATOR)
        if self.USER_DEFINED_EARTH_MODEL is not None:
            OPMAddUSER_DEFINED_EARTH_MODEL(builder, USER_DEFINED_EARTH_MODEL)
        OPMAddUSER_DEFINED_EPOCH_TIMESTAMP(builder, self.USER_DEFINED_EPOCH_TIMESTAMP)
        OPMAddUSER_DEFINED_MICROSECONDS(builder, self.USER_DEFINED_MICROSECONDS)
        OPM = OPMEnd(builder)
        return OPM
