# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# OPM Covariance Matrix Line
class opmCovarianceMatrixLine(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = opmCovarianceMatrixLine()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsopmCovarianceMatrixLine(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # opmCovarianceMatrixLine
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # opmCovarianceMatrixLine
    def CX_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # opmCovarianceMatrixLine
    def CY_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # opmCovarianceMatrixLine
    def CZ_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # opmCovarianceMatrixLine
    def CX_DOT_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def opmCovarianceMatrixLineStart(builder):
    builder.StartObject(4)

def Start(builder):
    opmCovarianceMatrixLineStart(builder)

def opmCovarianceMatrixLineAddCX_X(builder, CX_X):
    builder.PrependFloat64Slot(0, CX_X, 0.0)

def AddCX_X(builder, CX_X):
    opmCovarianceMatrixLineAddCX_X(builder, CX_X)

def opmCovarianceMatrixLineAddCY_X(builder, CY_X):
    builder.PrependFloat64Slot(1, CY_X, 0.0)

def AddCY_X(builder, CY_X):
    opmCovarianceMatrixLineAddCY_X(builder, CY_X)

def opmCovarianceMatrixLineAddCZ_X(builder, CZ_X):
    builder.PrependFloat64Slot(2, CZ_X, 0.0)

def AddCZ_X(builder, CZ_X):
    opmCovarianceMatrixLineAddCZ_X(builder, CZ_X)

def opmCovarianceMatrixLineAddCX_DOT_X(builder, CX_DOT_X):
    builder.PrependFloat64Slot(3, CX_DOT_X, 0.0)

def AddCX_DOT_X(builder, CX_DOT_X):
    opmCovarianceMatrixLineAddCX_DOT_X(builder, CX_DOT_X)

def opmCovarianceMatrixLineEnd(builder):
    return builder.EndObject()

def End(builder):
    return opmCovarianceMatrixLineEnd(builder)


class opmCovarianceMatrixLineT(object):

    # opmCovarianceMatrixLineT
    def __init__(self):
        self.CX_X = 0.0  # type: float
        self.CY_X = 0.0  # type: float
        self.CZ_X = 0.0  # type: float
        self.CX_DOT_X = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        opmCovarianceMatrixLine = opmCovarianceMatrixLine()
        opmCovarianceMatrixLine.Init(buf, pos)
        return cls.InitFromObj(opmCovarianceMatrixLine)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, opmCovarianceMatrixLine):
        x = opmCovarianceMatrixLineT()
        x._UnPack(opmCovarianceMatrixLine)
        return x

    # opmCovarianceMatrixLineT
    def _UnPack(self, opmCovarianceMatrixLine):
        if opmCovarianceMatrixLine is None:
            return
        self.CX_X = opmCovarianceMatrixLine.CX_X()
        self.CY_X = opmCovarianceMatrixLine.CY_X()
        self.CZ_X = opmCovarianceMatrixLine.CZ_X()
        self.CX_DOT_X = opmCovarianceMatrixLine.CX_DOT_X()

    # opmCovarianceMatrixLineT
    def Pack(self, builder):
        opmCovarianceMatrixLineStart(builder)
        opmCovarianceMatrixLineAddCX_X(builder, self.CX_X)
        opmCovarianceMatrixLineAddCY_X(builder, self.CY_X)
        opmCovarianceMatrixLineAddCZ_X(builder, self.CZ_X)
        opmCovarianceMatrixLineAddCX_DOT_X(builder, self.CX_DOT_X)
        opmCovarianceMatrixLine = opmCovarianceMatrixLineEnd(builder)
        return opmCovarianceMatrixLine
