# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Earth Orientation Parameters
class EOP(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EOP()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEOP(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EOPBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x45\x4F\x50", size_prefixed=size_prefixed)

    # EOP
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Date in ISO 8601 format
    # EOP
    def DATE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Modified Julian Date
    # EOP
    def MJD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # x pole coordinate in arcseconds
    # EOP
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # y pole coordinate in arcseconds
    # EOP
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # UT1-UTC in seconds
    # EOP
    def UT1_MINUS_UTC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Length of Day correction in seconds
    # EOP
    def LOD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Nutation correction in longitude (δΔψ) in arcseconds
    # EOP
    def DPSI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Nutation correction in obliquity (δΔε) in arcseconds
    # EOP
    def DEPS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Celestial pole offset in x (δX) in arcseconds
    # EOP
    def DX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Celestial pole offset in y (δY) in arcseconds
    # EOP
    def DY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Delta Atomic Time (TAI-UTC) in seconds
    # EOP
    def DAT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Data type (O = Observed, P = Predicted)
    # EOP
    def DATA_TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def EOPStart(builder):
    builder.StartObject(12)

def Start(builder):
    EOPStart(builder)

def EOPAddDATE(builder, DATE):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(DATE), 0)

def AddDATE(builder, DATE):
    EOPAddDATE(builder, DATE)

def EOPAddMJD(builder, MJD):
    builder.PrependUint32Slot(1, MJD, 0)

def AddMJD(builder, MJD):
    EOPAddMJD(builder, MJD)

def EOPAddX(builder, X):
    builder.PrependFloat32Slot(2, X, 0.0)

def AddX(builder, X):
    EOPAddX(builder, X)

def EOPAddY(builder, Y):
    builder.PrependFloat32Slot(3, Y, 0.0)

def AddY(builder, Y):
    EOPAddY(builder, Y)

def EOPAddUT1_MINUS_UTC(builder, UT1_MINUS_UTC):
    builder.PrependFloat32Slot(4, UT1_MINUS_UTC, 0.0)

def AddUT1_MINUS_UTC(builder, UT1_MINUS_UTC):
    EOPAddUT1_MINUS_UTC(builder, UT1_MINUS_UTC)

def EOPAddLOD(builder, LOD):
    builder.PrependFloat32Slot(5, LOD, 0.0)

def AddLOD(builder, LOD):
    EOPAddLOD(builder, LOD)

def EOPAddDPSI(builder, DPSI):
    builder.PrependFloat32Slot(6, DPSI, 0.0)

def AddDPSI(builder, DPSI):
    EOPAddDPSI(builder, DPSI)

def EOPAddDEPS(builder, DEPS):
    builder.PrependFloat32Slot(7, DEPS, 0.0)

def AddDEPS(builder, DEPS):
    EOPAddDEPS(builder, DEPS)

def EOPAddDX(builder, DX):
    builder.PrependFloat32Slot(8, DX, 0.0)

def AddDX(builder, DX):
    EOPAddDX(builder, DX)

def EOPAddDY(builder, DY):
    builder.PrependFloat32Slot(9, DY, 0.0)

def AddDY(builder, DY):
    EOPAddDY(builder, DY)

def EOPAddDAT(builder, DAT):
    builder.PrependUint16Slot(10, DAT, 0)

def AddDAT(builder, DAT):
    EOPAddDAT(builder, DAT)

def EOPAddDATA_TYPE(builder, DATA_TYPE):
    builder.PrependInt8Slot(11, DATA_TYPE, 0)

def AddDATA_TYPE(builder, DATA_TYPE):
    EOPAddDATA_TYPE(builder, DATA_TYPE)

def EOPEnd(builder):
    return builder.EndObject()

def End(builder):
    return EOPEnd(builder)


class EOPT(object):

    # EOPT
    def __init__(self):
        self.DATE = None  # type: str
        self.MJD = 0  # type: int
        self.X = 0.0  # type: float
        self.Y = 0.0  # type: float
        self.UT1_MINUS_UTC = 0.0  # type: float
        self.LOD = 0.0  # type: float
        self.DPSI = 0.0  # type: float
        self.DEPS = 0.0  # type: float
        self.DX = 0.0  # type: float
        self.DY = 0.0  # type: float
        self.DAT = 0  # type: int
        self.DATA_TYPE = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        EOP = EOP()
        EOP.Init(buf, pos)
        return cls.InitFromObj(EOP)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, EOP):
        x = EOPT()
        x._UnPack(EOP)
        return x

    # EOPT
    def _UnPack(self, EOP):
        if EOP is None:
            return
        self.DATE = EOP.DATE()
        self.MJD = EOP.MJD()
        self.X = EOP.X()
        self.Y = EOP.Y()
        self.UT1_MINUS_UTC = EOP.UT1_MINUS_UTC()
        self.LOD = EOP.LOD()
        self.DPSI = EOP.DPSI()
        self.DEPS = EOP.DEPS()
        self.DX = EOP.DX()
        self.DY = EOP.DY()
        self.DAT = EOP.DAT()
        self.DATA_TYPE = EOP.DATA_TYPE()

    # EOPT
    def Pack(self, builder):
        if self.DATE is not None:
            DATE = builder.CreateString(self.DATE)
        EOPStart(builder)
        if self.DATE is not None:
            EOPAddDATE(builder, DATE)
        EOPAddMJD(builder, self.MJD)
        EOPAddX(builder, self.X)
        EOPAddY(builder, self.Y)
        EOPAddUT1_MINUS_UTC(builder, self.UT1_MINUS_UTC)
        EOPAddLOD(builder, self.LOD)
        EOPAddDPSI(builder, self.DPSI)
        EOPAddDEPS(builder, self.DEPS)
        EOPAddDX(builder, self.DX)
        EOPAddDY(builder, self.DY)
        EOPAddDAT(builder, self.DAT)
        EOPAddDATA_TYPE(builder, self.DATA_TYPE)
        EOP = EOPEnd(builder)
        return EOP
