# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Header(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Header()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHeader(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def HeaderBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x4F\x43\x4D", size_prefixed=size_prefixed)

    # Header
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Format version in the form of 'x.y', where 'y' is incremented for minor changes, and 'x' for major changes.
    # Header
    def CCSDS_OCM_VERS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Comments (a contiguous set of one or more comment lines may be provided immediately after the version number).
    # Header
    def COMMENT(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Header
    def COMMENTLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Header
    def COMMENTIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # User-defined free-text message classification/caveats of this OCM.
    # Header
    def CLASSIFICATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # File creation date/time in UTC.
    # Header
    def CREATION_DATE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Creating agency or operator.
    # Header
    def ORIGINATOR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Free-text field containing an ID that uniquely identifies a message from this originator.
    # Header
    def MESSAGE_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def HeaderStart(builder):
    builder.StartObject(6)

def Start(builder):
    HeaderStart(builder)

def HeaderAddCCSDS_OCM_VERS(builder, CCSDS_OCM_VERS):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(CCSDS_OCM_VERS), 0)

def AddCCSDS_OCM_VERS(builder, CCSDS_OCM_VERS):
    HeaderAddCCSDS_OCM_VERS(builder, CCSDS_OCM_VERS)

def HeaderAddCOMMENT(builder, COMMENT):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(COMMENT), 0)

def AddCOMMENT(builder, COMMENT):
    HeaderAddCOMMENT(builder, COMMENT)

def HeaderStartCOMMENTVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCOMMENTVector(builder, numElems):
    return HeaderStartCOMMENTVector(builder, numElems)

def HeaderAddCLASSIFICATION(builder, CLASSIFICATION):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(CLASSIFICATION), 0)

def AddCLASSIFICATION(builder, CLASSIFICATION):
    HeaderAddCLASSIFICATION(builder, CLASSIFICATION)

def HeaderAddCREATION_DATE(builder, CREATION_DATE):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(CREATION_DATE), 0)

def AddCREATION_DATE(builder, CREATION_DATE):
    HeaderAddCREATION_DATE(builder, CREATION_DATE)

def HeaderAddORIGINATOR(builder, ORIGINATOR):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ORIGINATOR), 0)

def AddORIGINATOR(builder, ORIGINATOR):
    HeaderAddORIGINATOR(builder, ORIGINATOR)

def HeaderAddMESSAGE_ID(builder, MESSAGE_ID):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(MESSAGE_ID), 0)

def AddMESSAGE_ID(builder, MESSAGE_ID):
    HeaderAddMESSAGE_ID(builder, MESSAGE_ID)

def HeaderEnd(builder):
    return builder.EndObject()

def End(builder):
    return HeaderEnd(builder)

try:
    from typing import List
except:
    pass

class HeaderT(object):

    # HeaderT
    def __init__(self):
        self.CCSDS_OCM_VERS = None  # type: str
        self.COMMENT = None  # type: List[str]
        self.CLASSIFICATION = None  # type: str
        self.CREATION_DATE = None  # type: str
        self.ORIGINATOR = None  # type: str
        self.MESSAGE_ID = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        header = Header()
        header.Init(buf, pos)
        return cls.InitFromObj(header)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, header):
        x = HeaderT()
        x._UnPack(header)
        return x

    # HeaderT
    def _UnPack(self, header):
        if header is None:
            return
        self.CCSDS_OCM_VERS = header.CCSDS_OCM_VERS()
        if not header.COMMENTIsNone():
            self.COMMENT = []
            for i in range(header.COMMENTLength()):
                self.COMMENT.append(header.COMMENT(i))
        self.CLASSIFICATION = header.CLASSIFICATION()
        self.CREATION_DATE = header.CREATION_DATE()
        self.ORIGINATOR = header.ORIGINATOR()
        self.MESSAGE_ID = header.MESSAGE_ID()

    # HeaderT
    def Pack(self, builder):
        if self.CCSDS_OCM_VERS is not None:
            CCSDS_OCM_VERS = builder.CreateString(self.CCSDS_OCM_VERS)
        if self.COMMENT is not None:
            COMMENTlist = []
            for i in range(len(self.COMMENT)):
                COMMENTlist.append(builder.CreateString(self.COMMENT[i]))
            HeaderStartCOMMENTVector(builder, len(self.COMMENT))
            for i in reversed(range(len(self.COMMENT))):
                builder.PrependUOffsetTRelative(COMMENTlist[i])
            COMMENT = builder.EndVector()
        if self.CLASSIFICATION is not None:
            CLASSIFICATION = builder.CreateString(self.CLASSIFICATION)
        if self.CREATION_DATE is not None:
            CREATION_DATE = builder.CreateString(self.CREATION_DATE)
        if self.ORIGINATOR is not None:
            ORIGINATOR = builder.CreateString(self.ORIGINATOR)
        if self.MESSAGE_ID is not None:
            MESSAGE_ID = builder.CreateString(self.MESSAGE_ID)
        HeaderStart(builder)
        if self.CCSDS_OCM_VERS is not None:
            HeaderAddCCSDS_OCM_VERS(builder, CCSDS_OCM_VERS)
        if self.COMMENT is not None:
            HeaderAddCOMMENT(builder, COMMENT)
        if self.CLASSIFICATION is not None:
            HeaderAddCLASSIFICATION(builder, CLASSIFICATION)
        if self.CREATION_DATE is not None:
            HeaderAddCREATION_DATE(builder, CREATION_DATE)
        if self.ORIGINATOR is not None:
            HeaderAddORIGINATOR(builder, ORIGINATOR)
        if self.MESSAGE_ID is not None:
            HeaderAddMESSAGE_ID(builder, MESSAGE_ID)
        header = HeaderEnd(builder)
        return header
