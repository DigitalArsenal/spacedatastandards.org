# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserDefinedParameters(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserDefinedParameters()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserDefinedParameters(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def UserDefinedParametersBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x4F\x43\x4D", size_prefixed=size_prefixed)

    # UserDefinedParameters
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the user-defined parameter.
    # UserDefinedParameters
    def PARAM_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Value of the user-defined parameter.
    # UserDefinedParameters
    def PARAM_VALUE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def UserDefinedParametersStart(builder):
    builder.StartObject(2)

def Start(builder):
    UserDefinedParametersStart(builder)

def UserDefinedParametersAddPARAM_NAME(builder, PARAM_NAME):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(PARAM_NAME), 0)

def AddPARAM_NAME(builder, PARAM_NAME):
    UserDefinedParametersAddPARAM_NAME(builder, PARAM_NAME)

def UserDefinedParametersAddPARAM_VALUE(builder, PARAM_VALUE):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(PARAM_VALUE), 0)

def AddPARAM_VALUE(builder, PARAM_VALUE):
    UserDefinedParametersAddPARAM_VALUE(builder, PARAM_VALUE)

def UserDefinedParametersEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserDefinedParametersEnd(builder)


class UserDefinedParametersT(object):

    # UserDefinedParametersT
    def __init__(self):
        self.PARAM_NAME = None  # type: str
        self.PARAM_VALUE = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        userDefinedParameters = UserDefinedParameters()
        userDefinedParameters.Init(buf, pos)
        return cls.InitFromObj(userDefinedParameters)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, userDefinedParameters):
        x = UserDefinedParametersT()
        x._UnPack(userDefinedParameters)
        return x

    # UserDefinedParametersT
    def _UnPack(self, userDefinedParameters):
        if userDefinedParameters is None:
            return
        self.PARAM_NAME = userDefinedParameters.PARAM_NAME()
        self.PARAM_VALUE = userDefinedParameters.PARAM_VALUE()

    # UserDefinedParametersT
    def Pack(self, builder):
        if self.PARAM_NAME is not None:
            PARAM_NAME = builder.CreateString(self.PARAM_NAME)
        if self.PARAM_VALUE is not None:
            PARAM_VALUE = builder.CreateString(self.PARAM_VALUE)
        UserDefinedParametersStart(builder)
        if self.PARAM_NAME is not None:
            UserDefinedParametersAddPARAM_NAME(builder, PARAM_NAME)
        if self.PARAM_VALUE is not None:
            UserDefinedParametersAddPARAM_VALUE(builder, PARAM_VALUE)
        userDefinedParameters = UserDefinedParametersEnd(builder)
        return userDefinedParameters
