# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StateVector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StateVector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStateVector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StateVectorBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x4F\x43\x4D", size_prefixed=size_prefixed)

    # StateVector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Epoch of the state vector.
    # StateVector
    def EPOCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # X component of position in the specified reference frame.
    # StateVector
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Y component of position.
    # StateVector
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Z component of position.
    # StateVector
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # X component of velocity.
    # StateVector
    def X_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Y component of velocity.
    # StateVector
    def Y_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Z component of velocity.
    # StateVector
    def Z_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # X component of acceleration.
    # StateVector
    def X_DDOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Y component of acceleration.
    # StateVector
    def Y_DDOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Z component of acceleration.
    # StateVector
    def Z_DDOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def StateVectorStart(builder):
    builder.StartObject(10)

def Start(builder):
    StateVectorStart(builder)

def StateVectorAddEPOCH(builder, EPOCH):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(EPOCH), 0)

def AddEPOCH(builder, EPOCH):
    StateVectorAddEPOCH(builder, EPOCH)

def StateVectorAddX(builder, X):
    builder.PrependFloat64Slot(1, X, 0.0)

def AddX(builder, X):
    StateVectorAddX(builder, X)

def StateVectorAddY(builder, Y):
    builder.PrependFloat64Slot(2, Y, 0.0)

def AddY(builder, Y):
    StateVectorAddY(builder, Y)

def StateVectorAddZ(builder, Z):
    builder.PrependFloat64Slot(3, Z, 0.0)

def AddZ(builder, Z):
    StateVectorAddZ(builder, Z)

def StateVectorAddX_DOT(builder, X_DOT):
    builder.PrependFloat64Slot(4, X_DOT, 0.0)

def AddX_DOT(builder, X_DOT):
    StateVectorAddX_DOT(builder, X_DOT)

def StateVectorAddY_DOT(builder, Y_DOT):
    builder.PrependFloat64Slot(5, Y_DOT, 0.0)

def AddY_DOT(builder, Y_DOT):
    StateVectorAddY_DOT(builder, Y_DOT)

def StateVectorAddZ_DOT(builder, Z_DOT):
    builder.PrependFloat64Slot(6, Z_DOT, 0.0)

def AddZ_DOT(builder, Z_DOT):
    StateVectorAddZ_DOT(builder, Z_DOT)

def StateVectorAddX_DDOT(builder, X_DDOT):
    builder.PrependFloat64Slot(7, X_DDOT, 0.0)

def AddX_DDOT(builder, X_DDOT):
    StateVectorAddX_DDOT(builder, X_DDOT)

def StateVectorAddY_DDOT(builder, Y_DDOT):
    builder.PrependFloat64Slot(8, Y_DDOT, 0.0)

def AddY_DDOT(builder, Y_DDOT):
    StateVectorAddY_DDOT(builder, Y_DDOT)

def StateVectorAddZ_DDOT(builder, Z_DDOT):
    builder.PrependFloat64Slot(9, Z_DDOT, 0.0)

def AddZ_DDOT(builder, Z_DDOT):
    StateVectorAddZ_DDOT(builder, Z_DDOT)

def StateVectorEnd(builder):
    return builder.EndObject()

def End(builder):
    return StateVectorEnd(builder)


class StateVectorT(object):

    # StateVectorT
    def __init__(self):
        self.EPOCH = None  # type: str
        self.X = 0.0  # type: float
        self.Y = 0.0  # type: float
        self.Z = 0.0  # type: float
        self.X_DOT = 0.0  # type: float
        self.Y_DOT = 0.0  # type: float
        self.Z_DOT = 0.0  # type: float
        self.X_DDOT = 0.0  # type: float
        self.Y_DDOT = 0.0  # type: float
        self.Z_DDOT = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateVector = StateVector()
        stateVector.Init(buf, pos)
        return cls.InitFromObj(stateVector)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stateVector):
        x = StateVectorT()
        x._UnPack(stateVector)
        return x

    # StateVectorT
    def _UnPack(self, stateVector):
        if stateVector is None:
            return
        self.EPOCH = stateVector.EPOCH()
        self.X = stateVector.X()
        self.Y = stateVector.Y()
        self.Z = stateVector.Z()
        self.X_DOT = stateVector.X_DOT()
        self.Y_DOT = stateVector.Y_DOT()
        self.Z_DOT = stateVector.Z_DOT()
        self.X_DDOT = stateVector.X_DDOT()
        self.Y_DDOT = stateVector.Y_DDOT()
        self.Z_DDOT = stateVector.Z_DDOT()

    # StateVectorT
    def Pack(self, builder):
        if self.EPOCH is not None:
            EPOCH = builder.CreateString(self.EPOCH)
        StateVectorStart(builder)
        if self.EPOCH is not None:
            StateVectorAddEPOCH(builder, EPOCH)
        StateVectorAddX(builder, self.X)
        StateVectorAddY(builder, self.Y)
        StateVectorAddZ(builder, self.Z)
        StateVectorAddX_DOT(builder, self.X_DOT)
        StateVectorAddY_DOT(builder, self.Y_DOT)
        StateVectorAddZ_DOT(builder, self.Z_DOT)
        StateVectorAddX_DDOT(builder, self.X_DDOT)
        StateVectorAddY_DDOT(builder, self.Y_DDOT)
        StateVectorAddZ_DDOT(builder, self.Z_DDOT)
        stateVector = StateVectorEnd(builder)
        return stateVector
