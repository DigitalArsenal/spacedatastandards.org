# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Sustainer Details
class SUSTAINER(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SUSTAINER()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSUSTAINER(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SUSTAINERBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x52\x4F\x43", size_prefixed=size_prefixed)

    # SUSTAINER
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the Sustainer
    # SUSTAINER
    def SUSTAINER_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Thrust Produced by the Sustainer (in Newtons)
    # SUSTAINER
    def THRUST(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Duration of the Burn (in Seconds)
    # SUSTAINER
    def BURN_DURATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def SUSTAINERStart(builder): builder.StartObject(3)
def Start(builder):
    return SUSTAINERStart(builder)
def SUSTAINERAddSUSTAINER_NAME(builder, SUSTAINER_NAME): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(SUSTAINER_NAME), 0)
def AddSUSTAINER_NAME(builder, SUSTAINER_NAME):
    return SUSTAINERAddSUSTAINER_NAME(builder, SUSTAINER_NAME)
def SUSTAINERAddTHRUST(builder, THRUST): builder.PrependFloat64Slot(1, THRUST, 0.0)
def AddTHRUST(builder, THRUST):
    return SUSTAINERAddTHRUST(builder, THRUST)
def SUSTAINERAddBURN_DURATION(builder, BURN_DURATION): builder.PrependFloat64Slot(2, BURN_DURATION, 0.0)
def AddBURN_DURATION(builder, BURN_DURATION):
    return SUSTAINERAddBURN_DURATION(builder, BURN_DURATION)
def SUSTAINEREnd(builder): return builder.EndObject()
def End(builder):
    return SUSTAINEREnd(builder)

class SUSTAINERT(object):

    # SUSTAINERT
    def __init__(self):
        self.SUSTAINER_NAME = None  # type: str
        self.THRUST = 0.0  # type: float
        self.BURN_DURATION = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        SUSTAINER = SUSTAINER()
        SUSTAINER.Init(buf, pos)
        return cls.InitFromObj(SUSTAINER)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, SUSTAINER):
        x = SUSTAINERT()
        x._UnPack(SUSTAINER)
        return x

    # SUSTAINERT
    def _UnPack(self, SUSTAINER):
        if SUSTAINER is None:
            return
        self.SUSTAINER_NAME = SUSTAINER.SUSTAINER_NAME()
        self.THRUST = SUSTAINER.THRUST()
        self.BURN_DURATION = SUSTAINER.BURN_DURATION()

    # SUSTAINERT
    def Pack(self, builder):
        if self.SUSTAINER_NAME is not None:
            SUSTAINER_NAME = builder.CreateString(self.SUSTAINER_NAME)
        SUSTAINERStart(builder)
        if self.SUSTAINER_NAME is not None:
            SUSTAINERAddSUSTAINER_NAME(builder, SUSTAINER_NAME)
        SUSTAINERAddTHRUST(builder, self.THRUST)
        SUSTAINERAddBURN_DURATION(builder, self.BURN_DURATION)
        SUSTAINER = SUSTAINEREnd(builder)
        return SUSTAINER
