# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CATCOLLECTION(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CATCOLLECTION()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCATCOLLECTION(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CATCOLLECTIONBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x43\x41\x54", size_prefixed=size_prefixed)

    # CATCOLLECTION
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CATCOLLECTION
    def RECORDS(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CAT import CAT
            obj = CAT()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CATCOLLECTION
    def RECORDSLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CATCOLLECTION
    def RECORDSIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def CATCOLLECTIONStart(builder): builder.StartObject(1)
def Start(builder):
    return CATCOLLECTIONStart(builder)
def CATCOLLECTIONAddRECORDS(builder, RECORDS): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(RECORDS), 0)
def AddRECORDS(builder, RECORDS):
    return CATCOLLECTIONAddRECORDS(builder, RECORDS)
def CATCOLLECTIONStartRECORDSVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRECORDSVector(builder, numElems):
    return CATCOLLECTIONStartRECORDSVector(builder, numElems)
def CATCOLLECTIONEnd(builder): return builder.EndObject()
def End(builder):
    return CATCOLLECTIONEnd(builder)
import CAT
try:
    from typing import List
except:
    pass

class CATCOLLECTIONT(object):

    # CATCOLLECTIONT
    def __init__(self):
        self.RECORDS = None  # type: List[CAT.CATT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        CATCOLLECTION = CATCOLLECTION()
        CATCOLLECTION.Init(buf, pos)
        return cls.InitFromObj(CATCOLLECTION)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, CATCOLLECTION):
        x = CATCOLLECTIONT()
        x._UnPack(CATCOLLECTION)
        return x

    # CATCOLLECTIONT
    def _UnPack(self, CATCOLLECTION):
        if CATCOLLECTION is None:
            return
        if not CATCOLLECTION.RECORDSIsNone():
            self.RECORDS = []
            for i in range(CATCOLLECTION.RECORDSLength()):
                if CATCOLLECTION.RECORDS(i) is None:
                    self.RECORDS.append(None)
                else:
                    cAT_ = CAT.CATT.InitFromObj(CATCOLLECTION.RECORDS(i))
                    self.RECORDS.append(cAT_)

    # CATCOLLECTIONT
    def Pack(self, builder):
        if self.RECORDS is not None:
            RECORDSlist = []
            for i in range(len(self.RECORDS)):
                RECORDSlist.append(self.RECORDS[i].Pack(builder))
            CATCOLLECTIONStartRECORDSVector(builder, len(self.RECORDS))
            for i in reversed(range(len(self.RECORDS))):
                builder.PrependUOffsetTRelative(RECORDSlist[i])
            RECORDS = builder.EndVector()
        CATCOLLECTIONStart(builder)
        if self.RECORDS is not None:
            CATCOLLECTIONAddRECORDS(builder, RECORDS)
        CATCOLLECTION = CATCOLLECTIONEnd(builder)
        return CATCOLLECTION
