# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# IPFS CID and Account Identifier
class IPFS_CID_ADDRESS(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IPFS_CID_ADDRESS()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIPFS_CID_ADDRESS(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def IPFS_CID_ADDRESSBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x50\x4E\x4D", size_prefixed=size_prefixed)

    # IPFS_CID_ADDRESS
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IPFS_CID_ADDRESS
    def IPFS_CID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # IPFS_CID_ADDRESS
    def KEY_ADDRESS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def IPFS_CID_ADDRESSStart(builder): builder.StartObject(2)
def Start(builder):
    return IPFS_CID_ADDRESSStart(builder)
def IPFS_CID_ADDRESSAddIPFS_CID(builder, IPFS_CID): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IPFS_CID), 0)
def AddIPFS_CID(builder, IPFS_CID):
    return IPFS_CID_ADDRESSAddIPFS_CID(builder, IPFS_CID)
def IPFS_CID_ADDRESSAddKEY_ADDRESS(builder, KEY_ADDRESS): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(KEY_ADDRESS), 0)
def AddKEY_ADDRESS(builder, KEY_ADDRESS):
    return IPFS_CID_ADDRESSAddKEY_ADDRESS(builder, KEY_ADDRESS)
def IPFS_CID_ADDRESSEnd(builder): return builder.EndObject()
def End(builder):
    return IPFS_CID_ADDRESSEnd(builder)

class IPFS_CID_ADDRESST(object):

    # IPFS_CID_ADDRESST
    def __init__(self):
        self.IPFS_CID = None  # type: str
        self.KEY_ADDRESS = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        IPFS_CID_ADDRESS = IPFS_CID_ADDRESS()
        IPFS_CID_ADDRESS.Init(buf, pos)
        return cls.InitFromObj(IPFS_CID_ADDRESS)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, IPFS_CID_ADDRESS):
        x = IPFS_CID_ADDRESST()
        x._UnPack(IPFS_CID_ADDRESS)
        return x

    # IPFS_CID_ADDRESST
    def _UnPack(self, IPFS_CID_ADDRESS):
        if IPFS_CID_ADDRESS is None:
            return
        self.IPFS_CID = IPFS_CID_ADDRESS.IPFS_CID()
        self.KEY_ADDRESS = IPFS_CID_ADDRESS.KEY_ADDRESS()

    # IPFS_CID_ADDRESST
    def Pack(self, builder):
        if self.IPFS_CID is not None:
            IPFS_CID = builder.CreateString(self.IPFS_CID)
        if self.KEY_ADDRESS is not None:
            KEY_ADDRESS = builder.CreateString(self.KEY_ADDRESS)
        IPFS_CID_ADDRESSStart(builder)
        if self.IPFS_CID is not None:
            IPFS_CID_ADDRESSAddIPFS_CID(builder, IPFS_CID)
        if self.KEY_ADDRESS is not None:
            IPFS_CID_ADDRESSAddKEY_ADDRESS(builder, KEY_ADDRESS)
        IPFS_CID_ADDRESS = IPFS_CID_ADDRESSEnd(builder)
        return IPFS_CID_ADDRESS
