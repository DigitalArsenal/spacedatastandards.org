# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Publish Notification Message
class PNM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PNM()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPNM(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PNMBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x50\x4E\x4D", size_prefixed=size_prefixed)

    # PNM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IPFS Content Identifier (CID)
    # The hash of a file stored on the InterPlanetary File System (IPFS).
    # Refer to the section on IPFS integration for details.
    # PNM
    def IPFS_CID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier generated from the data provider's public key
    # PNM
    def KEY_ADDRESS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SpaceDataStandards 4 Character File Identifier
    # PNM
    def FILE_IDENTIFIER(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def PNMStart(builder): builder.StartObject(3)
def Start(builder):
    return PNMStart(builder)
def PNMAddIPFS_CID(builder, IPFS_CID): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IPFS_CID), 0)
def AddIPFS_CID(builder, IPFS_CID):
    return PNMAddIPFS_CID(builder, IPFS_CID)
def PNMAddKEY_ADDRESS(builder, KEY_ADDRESS): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(KEY_ADDRESS), 0)
def AddKEY_ADDRESS(builder, KEY_ADDRESS):
    return PNMAddKEY_ADDRESS(builder, KEY_ADDRESS)
def PNMAddFILE_IDENTIFIER(builder, FILE_IDENTIFIER): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(FILE_IDENTIFIER), 0)
def AddFILE_IDENTIFIER(builder, FILE_IDENTIFIER):
    return PNMAddFILE_IDENTIFIER(builder, FILE_IDENTIFIER)
def PNMEnd(builder): return builder.EndObject()
def End(builder):
    return PNMEnd(builder)

class PNMT(object):

    # PNMT
    def __init__(self):
        self.IPFS_CID = None  # type: str
        self.KEY_ADDRESS = None  # type: str
        self.FILE_IDENTIFIER = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        PNM = PNM()
        PNM.Init(buf, pos)
        return cls.InitFromObj(PNM)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, PNM):
        x = PNMT()
        x._UnPack(PNM)
        return x

    # PNMT
    def _UnPack(self, PNM):
        if PNM is None:
            return
        self.IPFS_CID = PNM.IPFS_CID()
        self.KEY_ADDRESS = PNM.KEY_ADDRESS()
        self.FILE_IDENTIFIER = PNM.FILE_IDENTIFIER()

    # PNMT
    def Pack(self, builder):
        if self.IPFS_CID is not None:
            IPFS_CID = builder.CreateString(self.IPFS_CID)
        if self.KEY_ADDRESS is not None:
            KEY_ADDRESS = builder.CreateString(self.KEY_ADDRESS)
        if self.FILE_IDENTIFIER is not None:
            FILE_IDENTIFIER = builder.CreateString(self.FILE_IDENTIFIER)
        PNMStart(builder)
        if self.IPFS_CID is not None:
            PNMAddIPFS_CID(builder, IPFS_CID)
        if self.KEY_ADDRESS is not None:
            PNMAddKEY_ADDRESS(builder, KEY_ADDRESS)
        if self.FILE_IDENTIFIER is not None:
            PNMAddFILE_IDENTIFIER(builder, FILE_IDENTIFIER)
        PNM = PNMEnd(builder)
        return PNM
