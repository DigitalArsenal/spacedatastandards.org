# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Publish Notification Message
class PNM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PNM()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPNM(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PNMBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x50\x4E\x4D", size_prefixed=size_prefixed)

    # PNM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unencrypted PNM Details
    # This field contains the details of the Publish Notification Message without encryption.
    # PNM
    def FILE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Detail import Detail
            obj = Detail()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Encrypted PNM Details
    # This field contains the details of the Publish Notification Message with encryption.
    # PNM
    def FILE_ENCRYPTED(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Detail import Detail
            obj = Detail()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PNMStart(builder): builder.StartObject(2)
def Start(builder):
    return PNMStart(builder)
def PNMAddFILE(builder, FILE): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(FILE), 0)
def AddFILE(builder, FILE):
    return PNMAddFILE(builder, FILE)
def PNMAddFILE_ENCRYPTED(builder, FILE_ENCRYPTED): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(FILE_ENCRYPTED), 0)
def AddFILE_ENCRYPTED(builder, FILE_ENCRYPTED):
    return PNMAddFILE_ENCRYPTED(builder, FILE_ENCRYPTED)
def PNMEnd(builder): return builder.EndObject()
def End(builder):
    return PNMEnd(builder)
import Detail
try:
    from typing import Optional
except:
    pass

class PNMT(object):

    # PNMT
    def __init__(self):
        self.FILE = None  # type: Optional[Detail.DetailT]
        self.FILE_ENCRYPTED = None  # type: Optional[Detail.DetailT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        PNM = PNM()
        PNM.Init(buf, pos)
        return cls.InitFromObj(PNM)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, PNM):
        x = PNMT()
        x._UnPack(PNM)
        return x

    # PNMT
    def _UnPack(self, PNM):
        if PNM is None:
            return
        if PNM.FILE() is not None:
            self.FILE = Detail.DetailT.InitFromObj(PNM.FILE())
        if PNM.FILE_ENCRYPTED() is not None:
            self.FILE_ENCRYPTED = Detail.DetailT.InitFromObj(PNM.FILE_ENCRYPTED())

    # PNMT
    def Pack(self, builder):
        if self.FILE is not None:
            FILE = self.FILE.Pack(builder)
        if self.FILE_ENCRYPTED is not None:
            FILE_ENCRYPTED = self.FILE_ENCRYPTED.Pack(builder)
        PNMStart(builder)
        if self.FILE is not None:
            PNMAddFILE(builder, FILE)
        if self.FILE_ENCRYPTED is not None:
            PNMAddFILE_ENCRYPTED(builder, FILE_ENCRYPTED)
        PNM = PNMEnd(builder)
        return PNM
