# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Details of Published Message
class PNM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PNM()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPNM(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PNMBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x50\x4E\x4D", size_prefixed=size_prefixed)

    # PNM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Multiformat Address
    # https://multiformats.io/multiaddr/
    # A universal address format for representing multiple network protocols. Examples include:
    # - /ip4/192.168.1.1/tcp/80 for an IPv4 address with TCP protocol
    # - /ip6zone/x/ip6/::1 for an IPv6 address with a zone
    # - /dns4/example.com for a domain name resolvable only to IPv4 addresses
    # - /ipfs/bafybeiccfclkdtucu6y4yc5cpr6y3yuinr67svmii46v5cfcrkp47ihehy/README.txt -IPFS address w/CID and path to `README.txt`.
    # PNM
    def MULTIFORMAT_ADDRESS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Publish Time OF THE Publish Notification Message
    # PNM
    def PUBLISH_TIMESTAMP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Concatenated Content Identifier (CID)
    # This field is a unique ID for distributed systems (CID).
    # The CID provides a unique identifier within distributed systems, as detailed at https://github.com/multiformats/cid. 
    # PNM
    def CID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # File ID
    # This field is the file ID / Name
    # PNM
    def FID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Digital Signature of the CID
    # This is the digital signature of the CID, signed using the specified cryptographic method.
    # PNM
    def SIGNATURE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Timestamp Signature
    # Digital signature of the publish timestamp, using the specified cryptographic method for timestamp verification.
    # PNM
    def TIMESTAMP_SIGNATURE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of Cryptographic Signature Used
    # Specifies the type of cryptographic signature used for the SIGNATURE field, indicating the specific blockchain technology, such as Ethereum or BTC.
    # PNM
    def SIGNATURE_TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of Cryptographic Signature Used for Timestamp
    # Specifies the type of cryptographic signature used for the TIMESTAMP_SIGNATURE field, indicating the specific blockchain technology, such as Ethereum or BTC.
    # PNM
    def TIMESTAMP_SIGNATURE_TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def PNMStart(builder): builder.StartObject(8)
def Start(builder):
    return PNMStart(builder)
def PNMAddMULTIFORMAT_ADDRESS(builder, MULTIFORMAT_ADDRESS): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(MULTIFORMAT_ADDRESS), 0)
def AddMULTIFORMAT_ADDRESS(builder, MULTIFORMAT_ADDRESS):
    return PNMAddMULTIFORMAT_ADDRESS(builder, MULTIFORMAT_ADDRESS)
def PNMAddPUBLISH_TIMESTAMP(builder, PUBLISH_TIMESTAMP): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(PUBLISH_TIMESTAMP), 0)
def AddPUBLISH_TIMESTAMP(builder, PUBLISH_TIMESTAMP):
    return PNMAddPUBLISH_TIMESTAMP(builder, PUBLISH_TIMESTAMP)
def PNMAddCID(builder, CID): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(CID), 0)
def AddCID(builder, CID):
    return PNMAddCID(builder, CID)
def PNMAddFID(builder, FID): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(FID), 0)
def AddFID(builder, FID):
    return PNMAddFID(builder, FID)
def PNMAddSIGNATURE(builder, SIGNATURE): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(SIGNATURE), 0)
def AddSIGNATURE(builder, SIGNATURE):
    return PNMAddSIGNATURE(builder, SIGNATURE)
def PNMAddTIMESTAMP_SIGNATURE(builder, TIMESTAMP_SIGNATURE): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(TIMESTAMP_SIGNATURE), 0)
def AddTIMESTAMP_SIGNATURE(builder, TIMESTAMP_SIGNATURE):
    return PNMAddTIMESTAMP_SIGNATURE(builder, TIMESTAMP_SIGNATURE)
def PNMAddSIGNATURE_TYPE(builder, SIGNATURE_TYPE): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(SIGNATURE_TYPE), 0)
def AddSIGNATURE_TYPE(builder, SIGNATURE_TYPE):
    return PNMAddSIGNATURE_TYPE(builder, SIGNATURE_TYPE)
def PNMAddTIMESTAMP_SIGNATURE_TYPE(builder, TIMESTAMP_SIGNATURE_TYPE): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(TIMESTAMP_SIGNATURE_TYPE), 0)
def AddTIMESTAMP_SIGNATURE_TYPE(builder, TIMESTAMP_SIGNATURE_TYPE):
    return PNMAddTIMESTAMP_SIGNATURE_TYPE(builder, TIMESTAMP_SIGNATURE_TYPE)
def PNMEnd(builder): return builder.EndObject()
def End(builder):
    return PNMEnd(builder)

class PNMT(object):

    # PNMT
    def __init__(self):
        self.MULTIFORMAT_ADDRESS = None  # type: str
        self.PUBLISH_TIMESTAMP = None  # type: str
        self.CID = None  # type: str
        self.FID = None  # type: str
        self.SIGNATURE = None  # type: str
        self.TIMESTAMP_SIGNATURE = None  # type: str
        self.SIGNATURE_TYPE = None  # type: str
        self.TIMESTAMP_SIGNATURE_TYPE = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        PNM = PNM()
        PNM.Init(buf, pos)
        return cls.InitFromObj(PNM)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, PNM):
        x = PNMT()
        x._UnPack(PNM)
        return x

    # PNMT
    def _UnPack(self, PNM):
        if PNM is None:
            return
        self.MULTIFORMAT_ADDRESS = PNM.MULTIFORMAT_ADDRESS()
        self.PUBLISH_TIMESTAMP = PNM.PUBLISH_TIMESTAMP()
        self.CID = PNM.CID()
        self.FID = PNM.FID()
        self.SIGNATURE = PNM.SIGNATURE()
        self.TIMESTAMP_SIGNATURE = PNM.TIMESTAMP_SIGNATURE()
        self.SIGNATURE_TYPE = PNM.SIGNATURE_TYPE()
        self.TIMESTAMP_SIGNATURE_TYPE = PNM.TIMESTAMP_SIGNATURE_TYPE()

    # PNMT
    def Pack(self, builder):
        if self.MULTIFORMAT_ADDRESS is not None:
            MULTIFORMAT_ADDRESS = builder.CreateString(self.MULTIFORMAT_ADDRESS)
        if self.PUBLISH_TIMESTAMP is not None:
            PUBLISH_TIMESTAMP = builder.CreateString(self.PUBLISH_TIMESTAMP)
        if self.CID is not None:
            CID = builder.CreateString(self.CID)
        if self.FID is not None:
            FID = builder.CreateString(self.FID)
        if self.SIGNATURE is not None:
            SIGNATURE = builder.CreateString(self.SIGNATURE)
        if self.TIMESTAMP_SIGNATURE is not None:
            TIMESTAMP_SIGNATURE = builder.CreateString(self.TIMESTAMP_SIGNATURE)
        if self.SIGNATURE_TYPE is not None:
            SIGNATURE_TYPE = builder.CreateString(self.SIGNATURE_TYPE)
        if self.TIMESTAMP_SIGNATURE_TYPE is not None:
            TIMESTAMP_SIGNATURE_TYPE = builder.CreateString(self.TIMESTAMP_SIGNATURE_TYPE)
        PNMStart(builder)
        if self.MULTIFORMAT_ADDRESS is not None:
            PNMAddMULTIFORMAT_ADDRESS(builder, MULTIFORMAT_ADDRESS)
        if self.PUBLISH_TIMESTAMP is not None:
            PNMAddPUBLISH_TIMESTAMP(builder, PUBLISH_TIMESTAMP)
        if self.CID is not None:
            PNMAddCID(builder, CID)
        if self.FID is not None:
            PNMAddFID(builder, FID)
        if self.SIGNATURE is not None:
            PNMAddSIGNATURE(builder, SIGNATURE)
        if self.TIMESTAMP_SIGNATURE is not None:
            PNMAddTIMESTAMP_SIGNATURE(builder, TIMESTAMP_SIGNATURE)
        if self.SIGNATURE_TYPE is not None:
            PNMAddSIGNATURE_TYPE(builder, SIGNATURE_TYPE)
        if self.TIMESTAMP_SIGNATURE_TYPE is not None:
            PNMAddTIMESTAMP_SIGNATURE_TYPE(builder, TIMESTAMP_SIGNATURE_TYPE)
        PNM = PNMEnd(builder)
        return PNM
