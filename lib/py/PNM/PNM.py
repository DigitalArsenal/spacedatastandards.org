# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Publish Notification Message
# This table includes a comprehensive set of cryptographic hashes and a digital signature for file publication.
class PNM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PNM()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPNM(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PNMBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x50\x4E\x4D", size_prefixed=size_prefixed)

    # PNM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IPFS Content Identifier (CID)
    # The hash of a file stored on the InterPlanetary File System (IPFS).
    # Refer to the section on IPFS integration for details.
    # PNM
    def IPFS_CID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ethereum Digital Signature
    # Digital signature of the IPFS file hash using Ethereum's signing mechanism.
    # Refer to the Ethereum Blockchain integration section for details.
    # PNM
    def ETH_DIGITAL_SIGNATURE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SHA-512 File Hash
    # SHA-512 hash of the file for additional security verification.
    # Detailed in the security features section of the document.
    # PNM
    def SHA_512_FILE_HASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SHA-256 File Hash
    # SHA-256 hash of the file for additional security verification.
    # Detailed in the security features section of the document.
    # PNM
    def SHA_256_FILE_HASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MD5 File Digest
    # MD5 digest of the file for backward compatibility with older systems.
    # Located in the legacy support section of the document.
    # PNM
    def MD5_FILE_DIGEST(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SHA-1 File Hash
    # SHA-1 hash of the file, used in certain legacy systems for compatibility.
    # Refer to the legacy systems integration section for more information.
    # PNM
    def SHA_1_FILE_HASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Argon2 File Hash
    # Argon2 hash of the file, providing state-of-the-art password hashing.
    # This is mentioned in the advanced security measures section.
    # PNM
    def ARGON2_FILE_HASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Blake2b File Hash
    # Blake2b hash of the file, known for high-speed cryptographic hashing.
    # Refer to the high-performance security solutions section.
    # PNM
    def BLAKE2B_FILE_HASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SHA-3 File Hash
    # SHA-3 hash of the file, offering a stronger alternative to SHA-2.
    # Located in the modern cryptographic standards section.
    # PNM
    def SHA_3_FILE_HASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RIPEMD-160 File Hash
    # RIPEMD-160 hash of the file, often used in blockchain applications for address generation.
    # Discussed in the blockchain compatibility section.
    # PNM
    def RIPEMD_160_FILE_HASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Whirlpool File Hash
    # Whirlpool hash of the file, designed for integrity protection and digital fingerprinting.
    # Refer to the data integrity and authentication section.
    # PNM
    def WHIRLPOOL_FILE_HASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Tiger File Hash
    # Tiger hash of the file, optimized for fast hashing on 64-bit platforms.
    # Detailed in the high-speed cryptographic operations section.
    # PNM
    def TIGER_FILE_HASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Cyclic Redundancy Check (CRC) 32
    # Cyclic redundancy check with a length of 32 bits.
    # Refer to CRC section for more details.
    # PNM
    def CRC32(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Adler-32 Checksum
    # Adler-32 checksum with a length of 32 bits.
    # Refer to the checksum section for more details.
    # PNM
    def ADLER32_CHECKSUM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Universal Hash Function Family - Rabin Fingerprint
    # Variable-length hash function using Rabin fingerprinting.
    # Refer to the Universal hash function families section for details.
    # PNM
    def RABIN_FINGERPRINT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - Pearson Hashing
    # Non-cryptographic hash function with a length of 8 bits or more, using XOR or table lookup.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def PEARSON_HASHING(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Keyed Cryptographic Hash Function - BLAKE2
    # Keyed hash function (prefix-MAC) with variable length.
    # Refer to the Keyed cryptographic hash functions section for details.
    # PNM
    def BLAKE2_KEYED_HASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - BLAKE-256
    # Cryptographic hash function with a length of 256 bits, based on HAIFA structure.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def BLAKE_256(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CRC-8
    # Cyclic redundancy check with a length of 8 bits.
    # Refer to CRC section for more details.
    # PNM
    def CRC8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CRC-16
    # Cyclic redundancy check with a length of 16 bits.
    # Refer to CRC section for more details.
    # PNM
    def CRC16(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CRC-64
    # Cyclic redundancy check with a length of 64 bits.
    # Refer to CRC section for more details.
    # PNM
    def CRC64(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BSD Checksum
    # BSD checksum with a length of 16 bits.
    # Refer to the checksum section for more details.
    # PNM
    def BSD_CHECKSUM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SYSV Checksum
    # SYSV checksum with a length of 16 bits.
    # Refer to the checksum section for more details.
    # PNM
    def SYSV_CHECKSUM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sum8
    # Sum with a length of 8 bits.
    # Refer to the checksum section for more details.
    # PNM
    def SUM8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Internet Checksum
    # Internet checksum with a length of 16 bits.
    # Refer to the checksum section for more details.
    # PNM
    def INTERNET_CHECKSUM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sum24
    # Sum with a length of 24 bits.
    # Refer to the checksum section for more details.
    # PNM
    def SUM24(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sum32
    # Sum with a length of 32 bits.
    # Refer to the checksum section for more details.
    # PNM
    def SUM32(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Fletcher-4
    # Sum with a length of 4 bits.
    # Refer to the checksum section for more details.
    # PNM
    def FLETCHER_4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Fletcher-8
    # Sum with a length of 8 bits.
    # Refer to the checksum section for more details.
    # PNM
    def FLETCHER_8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Fletcher-16
    # Sum with a length of 16 bits.
    # Refer to the checksum section for more details.
    # PNM
    def FLETCHER_16(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Fletcher-32
    # Sum with a length of 32 bits.
    # Refer to the checksum section for more details.
    # PNM
    def FLETCHER_32(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Luhn Algorithm
    # Luhn algorithm with a length of 1 decimal digit.
    # Refer to the checksum section for more details.
    # PNM
    def LUNH_ALGORITHM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Verhoeff Algorithm
    # Verhoeff algorithm with a length of 1 decimal digit.
    # Refer to the checksum section for more details.
    # PNM
    def VERHOEFF_ALGORITHM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Damm Algorithm
    # Damm algorithm with a length of 1 decimal digit.
    # Refer to the checksum section for more details.
    # PNM
    def DAMM_ALGORITHM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Universal Hash Function Family - Tabulation Hashing
    # Variable-length hash function using tabulation hashing.
    # Refer to the Universal hash function families section for details.
    # PNM
    def TABULATION_HASHING(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Universal Hash Function Family - Universal One-Way Hash Function
    # Universal one-way hash function with arbitrary length.
    # Refer to the Universal hash function families section for details.
    # PNM
    def UNIVERSAL_ONE_WAY_HASH_FUNCTION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Universal Hash Function Family - Zobrist Hashing
    # Variable-length hash function using Zobrist hashing.
    # Refer to the Universal hash function families section for details.
    # PNM
    def ZOBRIST_HASHING(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - Paul Hsieh's SuperFastHash
    # Non-cryptographic hash function with a length of 32 bits.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def PAUL_HSIEHS_SUPERFASTHASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - Buzhash
    # Non-cryptographic hash function with variable length.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def BUZHASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - Fowler-Noll-Vo Hash Function (FNV Hash)
    # Non-cryptographic hash function with variable length.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def FNV_HASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - Jenkins Hash Function
    # Non-cryptographic hash function with a length of 32 or 64 bits.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def JENKINS_HASH_FUNCTION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - Bernstein's Hash (djb2)
    # Non-cryptographic hash function with a length of 32 or 64 bits.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def BERNSTEINS_HASH_DJB2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - PJW Hash / Elf Hash
    # Non-cryptographic hash function with a length of 32 or 64 bits.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def PJW_HASH_ELF_HASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - MurmurHash
    # Non-cryptographic hash function with a length of 32, 64, or 128 bits.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def MURMURHASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - Fast-Hash
    # Non-cryptographic hash function with a length of 32 or 64 bits.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def FAST_HASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - SpookyHash
    # Non-cryptographic hash function with a length of 32, 64, or 128 bits.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def SPOOKYHASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - CityHash
    # Non-cryptographic hash function with a length of 32, 64, 128, or 256 bits.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def CITYHASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - FarmHash
    # Non-cryptographic hash function with a length of 32, 64, or 128 bits.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def FARMHASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - MetroHash
    # Non-cryptographic hash function with a length of 64 or 128 bits.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def METROHASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - Numeric Hash (nhash)
    # Non-cryptographic hash function with variable length.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def NUMERIC_HASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - xxHash
    # Non-cryptographic hash function with a length of 32, 64, or 128 bits.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def XXHASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - t1ha (Fast Positive Hash)
    # Non-cryptographic hash function with a length of 64 or 128 bits.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def T1HA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - GxHash
    # Non-cryptographic hash function with a length of 32, 64, or 128 bits.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def GXHASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - pHash
    # Non-cryptographic hash function with fixed or variable length.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def PHASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - dhash
    # Non-cryptographic hash function with a length of 128 bits.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def DHASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Non-Cryptographic Hash Function - SDBM
    # Non-cryptographic hash function with a length of 32 or 64 bits.
    # Refer to the Non-cryptographic hash functions section for details.
    # PNM
    def SDBM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - OSDB Hash
    # Cryptographic hash function with a length of 64 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def OSDB_HASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - komihash
    # Cryptographic hash function with a length of 64 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def KOMIHASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Keyed Cryptographic Hash Function - BLAKE3
    # Keyed hash function with arbitrary length.
    # Refer to the Keyed cryptographic hash functions section for details.
    # PNM
    def BLAKE3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - ECOH
    # Cryptographic hash function with a length of 224 to 512 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def ECOH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - FSB
    # Cryptographic hash function with a length of 160 to 512 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def FSB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - GOST
    # Cryptographic hash function with a length of 256 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def GOST(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - Grøstl
    # Cryptographic hash function with a length of up to 512 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def GROSTL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - HAS-160
    # Cryptographic hash function with a length of 160 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def HAS_160(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - HAVAL
    # Cryptographic hash function with a length of 128 to 256 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def HAVAL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - JH
    # Cryptographic hash function with a length of 224 to 512 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def JH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - LSH
    # Cryptographic hash function with a length of 256 to 512 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def LSH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - MD2
    # Cryptographic hash function with a length of 128 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def MD2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - MD4
    # Cryptographic hash function with a length of 128 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def MD4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - MD5
    # Cryptographic hash function with a length of 128 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def MD5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - MD6
    # Cryptographic hash function with a length of up to 512 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def MD6(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - RadioGatún
    # Cryptographic hash function with arbitrary length.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def RADIOGATUN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - RIPEMD
    # Cryptographic hash function with a length of 128 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def RIPEMD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - RIPEMD-128
    # Cryptographic hash function with a length of 128 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def RIPEMD_128(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - RIPEMD-256
    # Cryptographic hash function with a length of 256 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def RIPEMD_256(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - RIPEMD-320
    # Cryptographic hash function with a length of 320 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def RIPEMD_320(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - SHA-1
    # Cryptographic hash function with a length of 160 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def SHA_1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - SHA-224
    # Cryptographic hash function with a length of 224 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def SHA_224(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - SHA-256
    # Cryptographic hash function with a length of 256 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def SHA_256(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - SHA-384
    # Cryptographic hash function with a length of 384 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def SHA_384(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - SHA-512
    # Cryptographic hash function with a length of 512 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def SHA_512(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - SHA-3
    # Cryptographic hash function with arbitrary length.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def SHA_3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - Skein
    # Cryptographic hash function with arbitrary length.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def SKEIN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - Snefru
    # Cryptographic hash function with a length of 128 or 256 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def SNEFRU(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - Spectral Hash
    # Cryptographic hash function with a length of 512 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def SPECTRAL_HASH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - Streebog
    # Cryptographic hash function with a length of 256 or 512 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def STREEBOG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - SWIFFT
    # Cryptographic hash function with a length of 512 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def SWIFFT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - Tiger
    # Cryptographic hash function with a length of 192 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def TIGER(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unkeyed Cryptographic Hash Function - Whirlpool
    # Cryptographic hash function with a length of 512 bits.
    # Refer to the Unkeyed cryptographic hash functions section for details.
    # PNM
    def WHIRLPOOL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def PNMStart(builder): builder.StartObject(89)
def Start(builder):
    return PNMStart(builder)
def PNMAddIPFS_CID(builder, IPFS_CID): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IPFS_CID), 0)
def AddIPFS_CID(builder, IPFS_CID):
    return PNMAddIPFS_CID(builder, IPFS_CID)
def PNMAddETH_DIGITAL_SIGNATURE(builder, ETH_DIGITAL_SIGNATURE): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ETH_DIGITAL_SIGNATURE), 0)
def AddETH_DIGITAL_SIGNATURE(builder, ETH_DIGITAL_SIGNATURE):
    return PNMAddETH_DIGITAL_SIGNATURE(builder, ETH_DIGITAL_SIGNATURE)
def PNMAddSHA_512_FILE_HASH(builder, SHA_512_FILE_HASH): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(SHA_512_FILE_HASH), 0)
def AddSHA_512_FILE_HASH(builder, SHA_512_FILE_HASH):
    return PNMAddSHA_512_FILE_HASH(builder, SHA_512_FILE_HASH)
def PNMAddSHA_256_FILE_HASH(builder, SHA_256_FILE_HASH): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(SHA_256_FILE_HASH), 0)
def AddSHA_256_FILE_HASH(builder, SHA_256_FILE_HASH):
    return PNMAddSHA_256_FILE_HASH(builder, SHA_256_FILE_HASH)
def PNMAddMD5_FILE_DIGEST(builder, MD5_FILE_DIGEST): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(MD5_FILE_DIGEST), 0)
def AddMD5_FILE_DIGEST(builder, MD5_FILE_DIGEST):
    return PNMAddMD5_FILE_DIGEST(builder, MD5_FILE_DIGEST)
def PNMAddSHA_1_FILE_HASH(builder, SHA_1_FILE_HASH): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(SHA_1_FILE_HASH), 0)
def AddSHA_1_FILE_HASH(builder, SHA_1_FILE_HASH):
    return PNMAddSHA_1_FILE_HASH(builder, SHA_1_FILE_HASH)
def PNMAddARGON2_FILE_HASH(builder, ARGON2_FILE_HASH): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ARGON2_FILE_HASH), 0)
def AddARGON2_FILE_HASH(builder, ARGON2_FILE_HASH):
    return PNMAddARGON2_FILE_HASH(builder, ARGON2_FILE_HASH)
def PNMAddBLAKE2B_FILE_HASH(builder, BLAKE2B_FILE_HASH): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(BLAKE2B_FILE_HASH), 0)
def AddBLAKE2B_FILE_HASH(builder, BLAKE2B_FILE_HASH):
    return PNMAddBLAKE2B_FILE_HASH(builder, BLAKE2B_FILE_HASH)
def PNMAddSHA_3_FILE_HASH(builder, SHA_3_FILE_HASH): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(SHA_3_FILE_HASH), 0)
def AddSHA_3_FILE_HASH(builder, SHA_3_FILE_HASH):
    return PNMAddSHA_3_FILE_HASH(builder, SHA_3_FILE_HASH)
def PNMAddRIPEMD_160_FILE_HASH(builder, RIPEMD_160_FILE_HASH): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(RIPEMD_160_FILE_HASH), 0)
def AddRIPEMD_160_FILE_HASH(builder, RIPEMD_160_FILE_HASH):
    return PNMAddRIPEMD_160_FILE_HASH(builder, RIPEMD_160_FILE_HASH)
def PNMAddWHIRLPOOL_FILE_HASH(builder, WHIRLPOOL_FILE_HASH): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(WHIRLPOOL_FILE_HASH), 0)
def AddWHIRLPOOL_FILE_HASH(builder, WHIRLPOOL_FILE_HASH):
    return PNMAddWHIRLPOOL_FILE_HASH(builder, WHIRLPOOL_FILE_HASH)
def PNMAddTIGER_FILE_HASH(builder, TIGER_FILE_HASH): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(TIGER_FILE_HASH), 0)
def AddTIGER_FILE_HASH(builder, TIGER_FILE_HASH):
    return PNMAddTIGER_FILE_HASH(builder, TIGER_FILE_HASH)
def PNMAddCRC32(builder, CRC32): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(CRC32), 0)
def AddCRC32(builder, CRC32):
    return PNMAddCRC32(builder, CRC32)
def PNMAddADLER32_CHECKSUM(builder, ADLER32_CHECKSUM): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(ADLER32_CHECKSUM), 0)
def AddADLER32_CHECKSUM(builder, ADLER32_CHECKSUM):
    return PNMAddADLER32_CHECKSUM(builder, ADLER32_CHECKSUM)
def PNMAddRABIN_FINGERPRINT(builder, RABIN_FINGERPRINT): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(RABIN_FINGERPRINT), 0)
def AddRABIN_FINGERPRINT(builder, RABIN_FINGERPRINT):
    return PNMAddRABIN_FINGERPRINT(builder, RABIN_FINGERPRINT)
def PNMAddPEARSON_HASHING(builder, PEARSON_HASHING): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(PEARSON_HASHING), 0)
def AddPEARSON_HASHING(builder, PEARSON_HASHING):
    return PNMAddPEARSON_HASHING(builder, PEARSON_HASHING)
def PNMAddBLAKE2_KEYED_HASH(builder, BLAKE2_KEYED_HASH): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(BLAKE2_KEYED_HASH), 0)
def AddBLAKE2_KEYED_HASH(builder, BLAKE2_KEYED_HASH):
    return PNMAddBLAKE2_KEYED_HASH(builder, BLAKE2_KEYED_HASH)
def PNMAddBLAKE_256(builder, BLAKE_256): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(BLAKE_256), 0)
def AddBLAKE_256(builder, BLAKE_256):
    return PNMAddBLAKE_256(builder, BLAKE_256)
def PNMAddCRC8(builder, CRC8): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(CRC8), 0)
def AddCRC8(builder, CRC8):
    return PNMAddCRC8(builder, CRC8)
def PNMAddCRC16(builder, CRC16): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(CRC16), 0)
def AddCRC16(builder, CRC16):
    return PNMAddCRC16(builder, CRC16)
def PNMAddCRC64(builder, CRC64): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(CRC64), 0)
def AddCRC64(builder, CRC64):
    return PNMAddCRC64(builder, CRC64)
def PNMAddBSD_CHECKSUM(builder, BSD_CHECKSUM): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(BSD_CHECKSUM), 0)
def AddBSD_CHECKSUM(builder, BSD_CHECKSUM):
    return PNMAddBSD_CHECKSUM(builder, BSD_CHECKSUM)
def PNMAddSYSV_CHECKSUM(builder, SYSV_CHECKSUM): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(SYSV_CHECKSUM), 0)
def AddSYSV_CHECKSUM(builder, SYSV_CHECKSUM):
    return PNMAddSYSV_CHECKSUM(builder, SYSV_CHECKSUM)
def PNMAddSUM8(builder, SUM8): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(SUM8), 0)
def AddSUM8(builder, SUM8):
    return PNMAddSUM8(builder, SUM8)
def PNMAddINTERNET_CHECKSUM(builder, INTERNET_CHECKSUM): builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(INTERNET_CHECKSUM), 0)
def AddINTERNET_CHECKSUM(builder, INTERNET_CHECKSUM):
    return PNMAddINTERNET_CHECKSUM(builder, INTERNET_CHECKSUM)
def PNMAddSUM24(builder, SUM24): builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(SUM24), 0)
def AddSUM24(builder, SUM24):
    return PNMAddSUM24(builder, SUM24)
def PNMAddSUM32(builder, SUM32): builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(SUM32), 0)
def AddSUM32(builder, SUM32):
    return PNMAddSUM32(builder, SUM32)
def PNMAddFLETCHER_4(builder, FLETCHER_4): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(FLETCHER_4), 0)
def AddFLETCHER_4(builder, FLETCHER_4):
    return PNMAddFLETCHER_4(builder, FLETCHER_4)
def PNMAddFLETCHER_8(builder, FLETCHER_8): builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(FLETCHER_8), 0)
def AddFLETCHER_8(builder, FLETCHER_8):
    return PNMAddFLETCHER_8(builder, FLETCHER_8)
def PNMAddFLETCHER_16(builder, FLETCHER_16): builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(FLETCHER_16), 0)
def AddFLETCHER_16(builder, FLETCHER_16):
    return PNMAddFLETCHER_16(builder, FLETCHER_16)
def PNMAddFLETCHER_32(builder, FLETCHER_32): builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(FLETCHER_32), 0)
def AddFLETCHER_32(builder, FLETCHER_32):
    return PNMAddFLETCHER_32(builder, FLETCHER_32)
def PNMAddLUNH_ALGORITHM(builder, LUNH_ALGORITHM): builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(LUNH_ALGORITHM), 0)
def AddLUNH_ALGORITHM(builder, LUNH_ALGORITHM):
    return PNMAddLUNH_ALGORITHM(builder, LUNH_ALGORITHM)
def PNMAddVERHOEFF_ALGORITHM(builder, VERHOEFF_ALGORITHM): builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(VERHOEFF_ALGORITHM), 0)
def AddVERHOEFF_ALGORITHM(builder, VERHOEFF_ALGORITHM):
    return PNMAddVERHOEFF_ALGORITHM(builder, VERHOEFF_ALGORITHM)
def PNMAddDAMM_ALGORITHM(builder, DAMM_ALGORITHM): builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(DAMM_ALGORITHM), 0)
def AddDAMM_ALGORITHM(builder, DAMM_ALGORITHM):
    return PNMAddDAMM_ALGORITHM(builder, DAMM_ALGORITHM)
def PNMAddTABULATION_HASHING(builder, TABULATION_HASHING): builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(TABULATION_HASHING), 0)
def AddTABULATION_HASHING(builder, TABULATION_HASHING):
    return PNMAddTABULATION_HASHING(builder, TABULATION_HASHING)
def PNMAddUNIVERSAL_ONE_WAY_HASH_FUNCTION(builder, UNIVERSAL_ONE_WAY_HASH_FUNCTION): builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(UNIVERSAL_ONE_WAY_HASH_FUNCTION), 0)
def AddUNIVERSAL_ONE_WAY_HASH_FUNCTION(builder, UNIVERSAL_ONE_WAY_HASH_FUNCTION):
    return PNMAddUNIVERSAL_ONE_WAY_HASH_FUNCTION(builder, UNIVERSAL_ONE_WAY_HASH_FUNCTION)
def PNMAddZOBRIST_HASHING(builder, ZOBRIST_HASHING): builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(ZOBRIST_HASHING), 0)
def AddZOBRIST_HASHING(builder, ZOBRIST_HASHING):
    return PNMAddZOBRIST_HASHING(builder, ZOBRIST_HASHING)
def PNMAddPAUL_HSIEHS_SUPERFASTHASH(builder, PAUL_HSIEHS_SUPERFASTHASH): builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(PAUL_HSIEHS_SUPERFASTHASH), 0)
def AddPAUL_HSIEHS_SUPERFASTHASH(builder, PAUL_HSIEHS_SUPERFASTHASH):
    return PNMAddPAUL_HSIEHS_SUPERFASTHASH(builder, PAUL_HSIEHS_SUPERFASTHASH)
def PNMAddBUZHASH(builder, BUZHASH): builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(BUZHASH), 0)
def AddBUZHASH(builder, BUZHASH):
    return PNMAddBUZHASH(builder, BUZHASH)
def PNMAddFNV_HASH(builder, FNV_HASH): builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(FNV_HASH), 0)
def AddFNV_HASH(builder, FNV_HASH):
    return PNMAddFNV_HASH(builder, FNV_HASH)
def PNMAddJENKINS_HASH_FUNCTION(builder, JENKINS_HASH_FUNCTION): builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(JENKINS_HASH_FUNCTION), 0)
def AddJENKINS_HASH_FUNCTION(builder, JENKINS_HASH_FUNCTION):
    return PNMAddJENKINS_HASH_FUNCTION(builder, JENKINS_HASH_FUNCTION)
def PNMAddBERNSTEINS_HASH_DJB2(builder, BERNSTEINS_HASH_DJB2): builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(BERNSTEINS_HASH_DJB2), 0)
def AddBERNSTEINS_HASH_DJB2(builder, BERNSTEINS_HASH_DJB2):
    return PNMAddBERNSTEINS_HASH_DJB2(builder, BERNSTEINS_HASH_DJB2)
def PNMAddPJW_HASH_ELF_HASH(builder, PJW_HASH_ELF_HASH): builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(PJW_HASH_ELF_HASH), 0)
def AddPJW_HASH_ELF_HASH(builder, PJW_HASH_ELF_HASH):
    return PNMAddPJW_HASH_ELF_HASH(builder, PJW_HASH_ELF_HASH)
def PNMAddMURMURHASH(builder, MURMURHASH): builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(MURMURHASH), 0)
def AddMURMURHASH(builder, MURMURHASH):
    return PNMAddMURMURHASH(builder, MURMURHASH)
def PNMAddFAST_HASH(builder, FAST_HASH): builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(FAST_HASH), 0)
def AddFAST_HASH(builder, FAST_HASH):
    return PNMAddFAST_HASH(builder, FAST_HASH)
def PNMAddSPOOKYHASH(builder, SPOOKYHASH): builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(SPOOKYHASH), 0)
def AddSPOOKYHASH(builder, SPOOKYHASH):
    return PNMAddSPOOKYHASH(builder, SPOOKYHASH)
def PNMAddCITYHASH(builder, CITYHASH): builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(CITYHASH), 0)
def AddCITYHASH(builder, CITYHASH):
    return PNMAddCITYHASH(builder, CITYHASH)
def PNMAddFARMHASH(builder, FARMHASH): builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(FARMHASH), 0)
def AddFARMHASH(builder, FARMHASH):
    return PNMAddFARMHASH(builder, FARMHASH)
def PNMAddMETROHASH(builder, METROHASH): builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(METROHASH), 0)
def AddMETROHASH(builder, METROHASH):
    return PNMAddMETROHASH(builder, METROHASH)
def PNMAddNUMERIC_HASH(builder, NUMERIC_HASH): builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(NUMERIC_HASH), 0)
def AddNUMERIC_HASH(builder, NUMERIC_HASH):
    return PNMAddNUMERIC_HASH(builder, NUMERIC_HASH)
def PNMAddXXHASH(builder, XXHASH): builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(XXHASH), 0)
def AddXXHASH(builder, XXHASH):
    return PNMAddXXHASH(builder, XXHASH)
def PNMAddT1HA(builder, T1HA): builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(T1HA), 0)
def AddT1HA(builder, T1HA):
    return PNMAddT1HA(builder, T1HA)
def PNMAddGXHASH(builder, GXHASH): builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(GXHASH), 0)
def AddGXHASH(builder, GXHASH):
    return PNMAddGXHASH(builder, GXHASH)
def PNMAddPHASH(builder, PHASH): builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(PHASH), 0)
def AddPHASH(builder, PHASH):
    return PNMAddPHASH(builder, PHASH)
def PNMAddDHASH(builder, DHASH): builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(DHASH), 0)
def AddDHASH(builder, DHASH):
    return PNMAddDHASH(builder, DHASH)
def PNMAddSDBM(builder, SDBM): builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(SDBM), 0)
def AddSDBM(builder, SDBM):
    return PNMAddSDBM(builder, SDBM)
def PNMAddOSDB_HASH(builder, OSDB_HASH): builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(OSDB_HASH), 0)
def AddOSDB_HASH(builder, OSDB_HASH):
    return PNMAddOSDB_HASH(builder, OSDB_HASH)
def PNMAddKOMIHASH(builder, KOMIHASH): builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(KOMIHASH), 0)
def AddKOMIHASH(builder, KOMIHASH):
    return PNMAddKOMIHASH(builder, KOMIHASH)
def PNMAddBLAKE3(builder, BLAKE3): builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(BLAKE3), 0)
def AddBLAKE3(builder, BLAKE3):
    return PNMAddBLAKE3(builder, BLAKE3)
def PNMAddECOH(builder, ECOH): builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(ECOH), 0)
def AddECOH(builder, ECOH):
    return PNMAddECOH(builder, ECOH)
def PNMAddFSB(builder, FSB): builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(FSB), 0)
def AddFSB(builder, FSB):
    return PNMAddFSB(builder, FSB)
def PNMAddGOST(builder, GOST): builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(GOST), 0)
def AddGOST(builder, GOST):
    return PNMAddGOST(builder, GOST)
def PNMAddGROSTL(builder, GROSTL): builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(GROSTL), 0)
def AddGROSTL(builder, GROSTL):
    return PNMAddGROSTL(builder, GROSTL)
def PNMAddHAS_160(builder, HAS_160): builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(HAS_160), 0)
def AddHAS_160(builder, HAS_160):
    return PNMAddHAS_160(builder, HAS_160)
def PNMAddHAVAL(builder, HAVAL): builder.PrependUOffsetTRelativeSlot(64, flatbuffers.number_types.UOffsetTFlags.py_type(HAVAL), 0)
def AddHAVAL(builder, HAVAL):
    return PNMAddHAVAL(builder, HAVAL)
def PNMAddJH(builder, JH): builder.PrependUOffsetTRelativeSlot(65, flatbuffers.number_types.UOffsetTFlags.py_type(JH), 0)
def AddJH(builder, JH):
    return PNMAddJH(builder, JH)
def PNMAddLSH(builder, LSH): builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(LSH), 0)
def AddLSH(builder, LSH):
    return PNMAddLSH(builder, LSH)
def PNMAddMD2(builder, MD2): builder.PrependUOffsetTRelativeSlot(67, flatbuffers.number_types.UOffsetTFlags.py_type(MD2), 0)
def AddMD2(builder, MD2):
    return PNMAddMD2(builder, MD2)
def PNMAddMD4(builder, MD4): builder.PrependUOffsetTRelativeSlot(68, flatbuffers.number_types.UOffsetTFlags.py_type(MD4), 0)
def AddMD4(builder, MD4):
    return PNMAddMD4(builder, MD4)
def PNMAddMD5(builder, MD5): builder.PrependUOffsetTRelativeSlot(69, flatbuffers.number_types.UOffsetTFlags.py_type(MD5), 0)
def AddMD5(builder, MD5):
    return PNMAddMD5(builder, MD5)
def PNMAddMD6(builder, MD6): builder.PrependUOffsetTRelativeSlot(70, flatbuffers.number_types.UOffsetTFlags.py_type(MD6), 0)
def AddMD6(builder, MD6):
    return PNMAddMD6(builder, MD6)
def PNMAddRADIOGATUN(builder, RADIOGATUN): builder.PrependUOffsetTRelativeSlot(71, flatbuffers.number_types.UOffsetTFlags.py_type(RADIOGATUN), 0)
def AddRADIOGATUN(builder, RADIOGATUN):
    return PNMAddRADIOGATUN(builder, RADIOGATUN)
def PNMAddRIPEMD(builder, RIPEMD): builder.PrependUOffsetTRelativeSlot(72, flatbuffers.number_types.UOffsetTFlags.py_type(RIPEMD), 0)
def AddRIPEMD(builder, RIPEMD):
    return PNMAddRIPEMD(builder, RIPEMD)
def PNMAddRIPEMD_128(builder, RIPEMD_128): builder.PrependUOffsetTRelativeSlot(73, flatbuffers.number_types.UOffsetTFlags.py_type(RIPEMD_128), 0)
def AddRIPEMD_128(builder, RIPEMD_128):
    return PNMAddRIPEMD_128(builder, RIPEMD_128)
def PNMAddRIPEMD_256(builder, RIPEMD_256): builder.PrependUOffsetTRelativeSlot(74, flatbuffers.number_types.UOffsetTFlags.py_type(RIPEMD_256), 0)
def AddRIPEMD_256(builder, RIPEMD_256):
    return PNMAddRIPEMD_256(builder, RIPEMD_256)
def PNMAddRIPEMD_320(builder, RIPEMD_320): builder.PrependUOffsetTRelativeSlot(75, flatbuffers.number_types.UOffsetTFlags.py_type(RIPEMD_320), 0)
def AddRIPEMD_320(builder, RIPEMD_320):
    return PNMAddRIPEMD_320(builder, RIPEMD_320)
def PNMAddSHA_1(builder, SHA_1): builder.PrependUOffsetTRelativeSlot(76, flatbuffers.number_types.UOffsetTFlags.py_type(SHA_1), 0)
def AddSHA_1(builder, SHA_1):
    return PNMAddSHA_1(builder, SHA_1)
def PNMAddSHA_224(builder, SHA_224): builder.PrependUOffsetTRelativeSlot(77, flatbuffers.number_types.UOffsetTFlags.py_type(SHA_224), 0)
def AddSHA_224(builder, SHA_224):
    return PNMAddSHA_224(builder, SHA_224)
def PNMAddSHA_256(builder, SHA_256): builder.PrependUOffsetTRelativeSlot(78, flatbuffers.number_types.UOffsetTFlags.py_type(SHA_256), 0)
def AddSHA_256(builder, SHA_256):
    return PNMAddSHA_256(builder, SHA_256)
def PNMAddSHA_384(builder, SHA_384): builder.PrependUOffsetTRelativeSlot(79, flatbuffers.number_types.UOffsetTFlags.py_type(SHA_384), 0)
def AddSHA_384(builder, SHA_384):
    return PNMAddSHA_384(builder, SHA_384)
def PNMAddSHA_512(builder, SHA_512): builder.PrependUOffsetTRelativeSlot(80, flatbuffers.number_types.UOffsetTFlags.py_type(SHA_512), 0)
def AddSHA_512(builder, SHA_512):
    return PNMAddSHA_512(builder, SHA_512)
def PNMAddSHA_3(builder, SHA_3): builder.PrependUOffsetTRelativeSlot(81, flatbuffers.number_types.UOffsetTFlags.py_type(SHA_3), 0)
def AddSHA_3(builder, SHA_3):
    return PNMAddSHA_3(builder, SHA_3)
def PNMAddSKEIN(builder, SKEIN): builder.PrependUOffsetTRelativeSlot(82, flatbuffers.number_types.UOffsetTFlags.py_type(SKEIN), 0)
def AddSKEIN(builder, SKEIN):
    return PNMAddSKEIN(builder, SKEIN)
def PNMAddSNEFRU(builder, SNEFRU): builder.PrependUOffsetTRelativeSlot(83, flatbuffers.number_types.UOffsetTFlags.py_type(SNEFRU), 0)
def AddSNEFRU(builder, SNEFRU):
    return PNMAddSNEFRU(builder, SNEFRU)
def PNMAddSPECTRAL_HASH(builder, SPECTRAL_HASH): builder.PrependUOffsetTRelativeSlot(84, flatbuffers.number_types.UOffsetTFlags.py_type(SPECTRAL_HASH), 0)
def AddSPECTRAL_HASH(builder, SPECTRAL_HASH):
    return PNMAddSPECTRAL_HASH(builder, SPECTRAL_HASH)
def PNMAddSTREEBOG(builder, STREEBOG): builder.PrependUOffsetTRelativeSlot(85, flatbuffers.number_types.UOffsetTFlags.py_type(STREEBOG), 0)
def AddSTREEBOG(builder, STREEBOG):
    return PNMAddSTREEBOG(builder, STREEBOG)
def PNMAddSWIFFT(builder, SWIFFT): builder.PrependUOffsetTRelativeSlot(86, flatbuffers.number_types.UOffsetTFlags.py_type(SWIFFT), 0)
def AddSWIFFT(builder, SWIFFT):
    return PNMAddSWIFFT(builder, SWIFFT)
def PNMAddTIGER(builder, TIGER): builder.PrependUOffsetTRelativeSlot(87, flatbuffers.number_types.UOffsetTFlags.py_type(TIGER), 0)
def AddTIGER(builder, TIGER):
    return PNMAddTIGER(builder, TIGER)
def PNMAddWHIRLPOOL(builder, WHIRLPOOL): builder.PrependUOffsetTRelativeSlot(88, flatbuffers.number_types.UOffsetTFlags.py_type(WHIRLPOOL), 0)
def AddWHIRLPOOL(builder, WHIRLPOOL):
    return PNMAddWHIRLPOOL(builder, WHIRLPOOL)
def PNMEnd(builder): return builder.EndObject()
def End(builder):
    return PNMEnd(builder)

class PNMT(object):

    # PNMT
    def __init__(self):
        self.IPFS_CID = None  # type: str
        self.ETH_DIGITAL_SIGNATURE = None  # type: str
        self.SHA_512_FILE_HASH = None  # type: str
        self.SHA_256_FILE_HASH = None  # type: str
        self.MD5_FILE_DIGEST = None  # type: str
        self.SHA_1_FILE_HASH = None  # type: str
        self.ARGON2_FILE_HASH = None  # type: str
        self.BLAKE2B_FILE_HASH = None  # type: str
        self.SHA_3_FILE_HASH = None  # type: str
        self.RIPEMD_160_FILE_HASH = None  # type: str
        self.WHIRLPOOL_FILE_HASH = None  # type: str
        self.TIGER_FILE_HASH = None  # type: str
        self.CRC32 = None  # type: str
        self.ADLER32_CHECKSUM = None  # type: str
        self.RABIN_FINGERPRINT = None  # type: str
        self.PEARSON_HASHING = None  # type: str
        self.BLAKE2_KEYED_HASH = None  # type: str
        self.BLAKE_256 = None  # type: str
        self.CRC8 = None  # type: str
        self.CRC16 = None  # type: str
        self.CRC64 = None  # type: str
        self.BSD_CHECKSUM = None  # type: str
        self.SYSV_CHECKSUM = None  # type: str
        self.SUM8 = None  # type: str
        self.INTERNET_CHECKSUM = None  # type: str
        self.SUM24 = None  # type: str
        self.SUM32 = None  # type: str
        self.FLETCHER_4 = None  # type: str
        self.FLETCHER_8 = None  # type: str
        self.FLETCHER_16 = None  # type: str
        self.FLETCHER_32 = None  # type: str
        self.LUNH_ALGORITHM = None  # type: str
        self.VERHOEFF_ALGORITHM = None  # type: str
        self.DAMM_ALGORITHM = None  # type: str
        self.TABULATION_HASHING = None  # type: str
        self.UNIVERSAL_ONE_WAY_HASH_FUNCTION = None  # type: str
        self.ZOBRIST_HASHING = None  # type: str
        self.PAUL_HSIEHS_SUPERFASTHASH = None  # type: str
        self.BUZHASH = None  # type: str
        self.FNV_HASH = None  # type: str
        self.JENKINS_HASH_FUNCTION = None  # type: str
        self.BERNSTEINS_HASH_DJB2 = None  # type: str
        self.PJW_HASH_ELF_HASH = None  # type: str
        self.MURMURHASH = None  # type: str
        self.FAST_HASH = None  # type: str
        self.SPOOKYHASH = None  # type: str
        self.CITYHASH = None  # type: str
        self.FARMHASH = None  # type: str
        self.METROHASH = None  # type: str
        self.NUMERIC_HASH = None  # type: str
        self.XXHASH = None  # type: str
        self.T1HA = None  # type: str
        self.GXHASH = None  # type: str
        self.PHASH = None  # type: str
        self.DHASH = None  # type: str
        self.SDBM = None  # type: str
        self.OSDB_HASH = None  # type: str
        self.KOMIHASH = None  # type: str
        self.BLAKE3 = None  # type: str
        self.ECOH = None  # type: str
        self.FSB = None  # type: str
        self.GOST = None  # type: str
        self.GROSTL = None  # type: str
        self.HAS_160 = None  # type: str
        self.HAVAL = None  # type: str
        self.JH = None  # type: str
        self.LSH = None  # type: str
        self.MD2 = None  # type: str
        self.MD4 = None  # type: str
        self.MD5 = None  # type: str
        self.MD6 = None  # type: str
        self.RADIOGATUN = None  # type: str
        self.RIPEMD = None  # type: str
        self.RIPEMD_128 = None  # type: str
        self.RIPEMD_256 = None  # type: str
        self.RIPEMD_320 = None  # type: str
        self.SHA_1 = None  # type: str
        self.SHA_224 = None  # type: str
        self.SHA_256 = None  # type: str
        self.SHA_384 = None  # type: str
        self.SHA_512 = None  # type: str
        self.SHA_3 = None  # type: str
        self.SKEIN = None  # type: str
        self.SNEFRU = None  # type: str
        self.SPECTRAL_HASH = None  # type: str
        self.STREEBOG = None  # type: str
        self.SWIFFT = None  # type: str
        self.TIGER = None  # type: str
        self.WHIRLPOOL = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        PNM = PNM()
        PNM.Init(buf, pos)
        return cls.InitFromObj(PNM)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, PNM):
        x = PNMT()
        x._UnPack(PNM)
        return x

    # PNMT
    def _UnPack(self, PNM):
        if PNM is None:
            return
        self.IPFS_CID = PNM.IPFS_CID()
        self.ETH_DIGITAL_SIGNATURE = PNM.ETH_DIGITAL_SIGNATURE()
        self.SHA_512_FILE_HASH = PNM.SHA_512_FILE_HASH()
        self.SHA_256_FILE_HASH = PNM.SHA_256_FILE_HASH()
        self.MD5_FILE_DIGEST = PNM.MD5_FILE_DIGEST()
        self.SHA_1_FILE_HASH = PNM.SHA_1_FILE_HASH()
        self.ARGON2_FILE_HASH = PNM.ARGON2_FILE_HASH()
        self.BLAKE2B_FILE_HASH = PNM.BLAKE2B_FILE_HASH()
        self.SHA_3_FILE_HASH = PNM.SHA_3_FILE_HASH()
        self.RIPEMD_160_FILE_HASH = PNM.RIPEMD_160_FILE_HASH()
        self.WHIRLPOOL_FILE_HASH = PNM.WHIRLPOOL_FILE_HASH()
        self.TIGER_FILE_HASH = PNM.TIGER_FILE_HASH()
        self.CRC32 = PNM.CRC32()
        self.ADLER32_CHECKSUM = PNM.ADLER32_CHECKSUM()
        self.RABIN_FINGERPRINT = PNM.RABIN_FINGERPRINT()
        self.PEARSON_HASHING = PNM.PEARSON_HASHING()
        self.BLAKE2_KEYED_HASH = PNM.BLAKE2_KEYED_HASH()
        self.BLAKE_256 = PNM.BLAKE_256()
        self.CRC8 = PNM.CRC8()
        self.CRC16 = PNM.CRC16()
        self.CRC64 = PNM.CRC64()
        self.BSD_CHECKSUM = PNM.BSD_CHECKSUM()
        self.SYSV_CHECKSUM = PNM.SYSV_CHECKSUM()
        self.SUM8 = PNM.SUM8()
        self.INTERNET_CHECKSUM = PNM.INTERNET_CHECKSUM()
        self.SUM24 = PNM.SUM24()
        self.SUM32 = PNM.SUM32()
        self.FLETCHER_4 = PNM.FLETCHER_4()
        self.FLETCHER_8 = PNM.FLETCHER_8()
        self.FLETCHER_16 = PNM.FLETCHER_16()
        self.FLETCHER_32 = PNM.FLETCHER_32()
        self.LUNH_ALGORITHM = PNM.LUNH_ALGORITHM()
        self.VERHOEFF_ALGORITHM = PNM.VERHOEFF_ALGORITHM()
        self.DAMM_ALGORITHM = PNM.DAMM_ALGORITHM()
        self.TABULATION_HASHING = PNM.TABULATION_HASHING()
        self.UNIVERSAL_ONE_WAY_HASH_FUNCTION = PNM.UNIVERSAL_ONE_WAY_HASH_FUNCTION()
        self.ZOBRIST_HASHING = PNM.ZOBRIST_HASHING()
        self.PAUL_HSIEHS_SUPERFASTHASH = PNM.PAUL_HSIEHS_SUPERFASTHASH()
        self.BUZHASH = PNM.BUZHASH()
        self.FNV_HASH = PNM.FNV_HASH()
        self.JENKINS_HASH_FUNCTION = PNM.JENKINS_HASH_FUNCTION()
        self.BERNSTEINS_HASH_DJB2 = PNM.BERNSTEINS_HASH_DJB2()
        self.PJW_HASH_ELF_HASH = PNM.PJW_HASH_ELF_HASH()
        self.MURMURHASH = PNM.MURMURHASH()
        self.FAST_HASH = PNM.FAST_HASH()
        self.SPOOKYHASH = PNM.SPOOKYHASH()
        self.CITYHASH = PNM.CITYHASH()
        self.FARMHASH = PNM.FARMHASH()
        self.METROHASH = PNM.METROHASH()
        self.NUMERIC_HASH = PNM.NUMERIC_HASH()
        self.XXHASH = PNM.XXHASH()
        self.T1HA = PNM.T1HA()
        self.GXHASH = PNM.GXHASH()
        self.PHASH = PNM.PHASH()
        self.DHASH = PNM.DHASH()
        self.SDBM = PNM.SDBM()
        self.OSDB_HASH = PNM.OSDB_HASH()
        self.KOMIHASH = PNM.KOMIHASH()
        self.BLAKE3 = PNM.BLAKE3()
        self.ECOH = PNM.ECOH()
        self.FSB = PNM.FSB()
        self.GOST = PNM.GOST()
        self.GROSTL = PNM.GROSTL()
        self.HAS_160 = PNM.HAS_160()
        self.HAVAL = PNM.HAVAL()
        self.JH = PNM.JH()
        self.LSH = PNM.LSH()
        self.MD2 = PNM.MD2()
        self.MD4 = PNM.MD4()
        self.MD5 = PNM.MD5()
        self.MD6 = PNM.MD6()
        self.RADIOGATUN = PNM.RADIOGATUN()
        self.RIPEMD = PNM.RIPEMD()
        self.RIPEMD_128 = PNM.RIPEMD_128()
        self.RIPEMD_256 = PNM.RIPEMD_256()
        self.RIPEMD_320 = PNM.RIPEMD_320()
        self.SHA_1 = PNM.SHA_1()
        self.SHA_224 = PNM.SHA_224()
        self.SHA_256 = PNM.SHA_256()
        self.SHA_384 = PNM.SHA_384()
        self.SHA_512 = PNM.SHA_512()
        self.SHA_3 = PNM.SHA_3()
        self.SKEIN = PNM.SKEIN()
        self.SNEFRU = PNM.SNEFRU()
        self.SPECTRAL_HASH = PNM.SPECTRAL_HASH()
        self.STREEBOG = PNM.STREEBOG()
        self.SWIFFT = PNM.SWIFFT()
        self.TIGER = PNM.TIGER()
        self.WHIRLPOOL = PNM.WHIRLPOOL()

    # PNMT
    def Pack(self, builder):
        if self.IPFS_CID is not None:
            IPFS_CID = builder.CreateString(self.IPFS_CID)
        if self.ETH_DIGITAL_SIGNATURE is not None:
            ETH_DIGITAL_SIGNATURE = builder.CreateString(self.ETH_DIGITAL_SIGNATURE)
        if self.SHA_512_FILE_HASH is not None:
            SHA_512_FILE_HASH = builder.CreateString(self.SHA_512_FILE_HASH)
        if self.SHA_256_FILE_HASH is not None:
            SHA_256_FILE_HASH = builder.CreateString(self.SHA_256_FILE_HASH)
        if self.MD5_FILE_DIGEST is not None:
            MD5_FILE_DIGEST = builder.CreateString(self.MD5_FILE_DIGEST)
        if self.SHA_1_FILE_HASH is not None:
            SHA_1_FILE_HASH = builder.CreateString(self.SHA_1_FILE_HASH)
        if self.ARGON2_FILE_HASH is not None:
            ARGON2_FILE_HASH = builder.CreateString(self.ARGON2_FILE_HASH)
        if self.BLAKE2B_FILE_HASH is not None:
            BLAKE2B_FILE_HASH = builder.CreateString(self.BLAKE2B_FILE_HASH)
        if self.SHA_3_FILE_HASH is not None:
            SHA_3_FILE_HASH = builder.CreateString(self.SHA_3_FILE_HASH)
        if self.RIPEMD_160_FILE_HASH is not None:
            RIPEMD_160_FILE_HASH = builder.CreateString(self.RIPEMD_160_FILE_HASH)
        if self.WHIRLPOOL_FILE_HASH is not None:
            WHIRLPOOL_FILE_HASH = builder.CreateString(self.WHIRLPOOL_FILE_HASH)
        if self.TIGER_FILE_HASH is not None:
            TIGER_FILE_HASH = builder.CreateString(self.TIGER_FILE_HASH)
        if self.CRC32 is not None:
            CRC32 = builder.CreateString(self.CRC32)
        if self.ADLER32_CHECKSUM is not None:
            ADLER32_CHECKSUM = builder.CreateString(self.ADLER32_CHECKSUM)
        if self.RABIN_FINGERPRINT is not None:
            RABIN_FINGERPRINT = builder.CreateString(self.RABIN_FINGERPRINT)
        if self.PEARSON_HASHING is not None:
            PEARSON_HASHING = builder.CreateString(self.PEARSON_HASHING)
        if self.BLAKE2_KEYED_HASH is not None:
            BLAKE2_KEYED_HASH = builder.CreateString(self.BLAKE2_KEYED_HASH)
        if self.BLAKE_256 is not None:
            BLAKE_256 = builder.CreateString(self.BLAKE_256)
        if self.CRC8 is not None:
            CRC8 = builder.CreateString(self.CRC8)
        if self.CRC16 is not None:
            CRC16 = builder.CreateString(self.CRC16)
        if self.CRC64 is not None:
            CRC64 = builder.CreateString(self.CRC64)
        if self.BSD_CHECKSUM is not None:
            BSD_CHECKSUM = builder.CreateString(self.BSD_CHECKSUM)
        if self.SYSV_CHECKSUM is not None:
            SYSV_CHECKSUM = builder.CreateString(self.SYSV_CHECKSUM)
        if self.SUM8 is not None:
            SUM8 = builder.CreateString(self.SUM8)
        if self.INTERNET_CHECKSUM is not None:
            INTERNET_CHECKSUM = builder.CreateString(self.INTERNET_CHECKSUM)
        if self.SUM24 is not None:
            SUM24 = builder.CreateString(self.SUM24)
        if self.SUM32 is not None:
            SUM32 = builder.CreateString(self.SUM32)
        if self.FLETCHER_4 is not None:
            FLETCHER_4 = builder.CreateString(self.FLETCHER_4)
        if self.FLETCHER_8 is not None:
            FLETCHER_8 = builder.CreateString(self.FLETCHER_8)
        if self.FLETCHER_16 is not None:
            FLETCHER_16 = builder.CreateString(self.FLETCHER_16)
        if self.FLETCHER_32 is not None:
            FLETCHER_32 = builder.CreateString(self.FLETCHER_32)
        if self.LUNH_ALGORITHM is not None:
            LUNH_ALGORITHM = builder.CreateString(self.LUNH_ALGORITHM)
        if self.VERHOEFF_ALGORITHM is not None:
            VERHOEFF_ALGORITHM = builder.CreateString(self.VERHOEFF_ALGORITHM)
        if self.DAMM_ALGORITHM is not None:
            DAMM_ALGORITHM = builder.CreateString(self.DAMM_ALGORITHM)
        if self.TABULATION_HASHING is not None:
            TABULATION_HASHING = builder.CreateString(self.TABULATION_HASHING)
        if self.UNIVERSAL_ONE_WAY_HASH_FUNCTION is not None:
            UNIVERSAL_ONE_WAY_HASH_FUNCTION = builder.CreateString(self.UNIVERSAL_ONE_WAY_HASH_FUNCTION)
        if self.ZOBRIST_HASHING is not None:
            ZOBRIST_HASHING = builder.CreateString(self.ZOBRIST_HASHING)
        if self.PAUL_HSIEHS_SUPERFASTHASH is not None:
            PAUL_HSIEHS_SUPERFASTHASH = builder.CreateString(self.PAUL_HSIEHS_SUPERFASTHASH)
        if self.BUZHASH is not None:
            BUZHASH = builder.CreateString(self.BUZHASH)
        if self.FNV_HASH is not None:
            FNV_HASH = builder.CreateString(self.FNV_HASH)
        if self.JENKINS_HASH_FUNCTION is not None:
            JENKINS_HASH_FUNCTION = builder.CreateString(self.JENKINS_HASH_FUNCTION)
        if self.BERNSTEINS_HASH_DJB2 is not None:
            BERNSTEINS_HASH_DJB2 = builder.CreateString(self.BERNSTEINS_HASH_DJB2)
        if self.PJW_HASH_ELF_HASH is not None:
            PJW_HASH_ELF_HASH = builder.CreateString(self.PJW_HASH_ELF_HASH)
        if self.MURMURHASH is not None:
            MURMURHASH = builder.CreateString(self.MURMURHASH)
        if self.FAST_HASH is not None:
            FAST_HASH = builder.CreateString(self.FAST_HASH)
        if self.SPOOKYHASH is not None:
            SPOOKYHASH = builder.CreateString(self.SPOOKYHASH)
        if self.CITYHASH is not None:
            CITYHASH = builder.CreateString(self.CITYHASH)
        if self.FARMHASH is not None:
            FARMHASH = builder.CreateString(self.FARMHASH)
        if self.METROHASH is not None:
            METROHASH = builder.CreateString(self.METROHASH)
        if self.NUMERIC_HASH is not None:
            NUMERIC_HASH = builder.CreateString(self.NUMERIC_HASH)
        if self.XXHASH is not None:
            XXHASH = builder.CreateString(self.XXHASH)
        if self.T1HA is not None:
            T1HA = builder.CreateString(self.T1HA)
        if self.GXHASH is not None:
            GXHASH = builder.CreateString(self.GXHASH)
        if self.PHASH is not None:
            PHASH = builder.CreateString(self.PHASH)
        if self.DHASH is not None:
            DHASH = builder.CreateString(self.DHASH)
        if self.SDBM is not None:
            SDBM = builder.CreateString(self.SDBM)
        if self.OSDB_HASH is not None:
            OSDB_HASH = builder.CreateString(self.OSDB_HASH)
        if self.KOMIHASH is not None:
            KOMIHASH = builder.CreateString(self.KOMIHASH)
        if self.BLAKE3 is not None:
            BLAKE3 = builder.CreateString(self.BLAKE3)
        if self.ECOH is not None:
            ECOH = builder.CreateString(self.ECOH)
        if self.FSB is not None:
            FSB = builder.CreateString(self.FSB)
        if self.GOST is not None:
            GOST = builder.CreateString(self.GOST)
        if self.GROSTL is not None:
            GROSTL = builder.CreateString(self.GROSTL)
        if self.HAS_160 is not None:
            HAS_160 = builder.CreateString(self.HAS_160)
        if self.HAVAL is not None:
            HAVAL = builder.CreateString(self.HAVAL)
        if self.JH is not None:
            JH = builder.CreateString(self.JH)
        if self.LSH is not None:
            LSH = builder.CreateString(self.LSH)
        if self.MD2 is not None:
            MD2 = builder.CreateString(self.MD2)
        if self.MD4 is not None:
            MD4 = builder.CreateString(self.MD4)
        if self.MD5 is not None:
            MD5 = builder.CreateString(self.MD5)
        if self.MD6 is not None:
            MD6 = builder.CreateString(self.MD6)
        if self.RADIOGATUN is not None:
            RADIOGATUN = builder.CreateString(self.RADIOGATUN)
        if self.RIPEMD is not None:
            RIPEMD = builder.CreateString(self.RIPEMD)
        if self.RIPEMD_128 is not None:
            RIPEMD_128 = builder.CreateString(self.RIPEMD_128)
        if self.RIPEMD_256 is not None:
            RIPEMD_256 = builder.CreateString(self.RIPEMD_256)
        if self.RIPEMD_320 is not None:
            RIPEMD_320 = builder.CreateString(self.RIPEMD_320)
        if self.SHA_1 is not None:
            SHA_1 = builder.CreateString(self.SHA_1)
        if self.SHA_224 is not None:
            SHA_224 = builder.CreateString(self.SHA_224)
        if self.SHA_256 is not None:
            SHA_256 = builder.CreateString(self.SHA_256)
        if self.SHA_384 is not None:
            SHA_384 = builder.CreateString(self.SHA_384)
        if self.SHA_512 is not None:
            SHA_512 = builder.CreateString(self.SHA_512)
        if self.SHA_3 is not None:
            SHA_3 = builder.CreateString(self.SHA_3)
        if self.SKEIN is not None:
            SKEIN = builder.CreateString(self.SKEIN)
        if self.SNEFRU is not None:
            SNEFRU = builder.CreateString(self.SNEFRU)
        if self.SPECTRAL_HASH is not None:
            SPECTRAL_HASH = builder.CreateString(self.SPECTRAL_HASH)
        if self.STREEBOG is not None:
            STREEBOG = builder.CreateString(self.STREEBOG)
        if self.SWIFFT is not None:
            SWIFFT = builder.CreateString(self.SWIFFT)
        if self.TIGER is not None:
            TIGER = builder.CreateString(self.TIGER)
        if self.WHIRLPOOL is not None:
            WHIRLPOOL = builder.CreateString(self.WHIRLPOOL)
        PNMStart(builder)
        if self.IPFS_CID is not None:
            PNMAddIPFS_CID(builder, IPFS_CID)
        if self.ETH_DIGITAL_SIGNATURE is not None:
            PNMAddETH_DIGITAL_SIGNATURE(builder, ETH_DIGITAL_SIGNATURE)
        if self.SHA_512_FILE_HASH is not None:
            PNMAddSHA_512_FILE_HASH(builder, SHA_512_FILE_HASH)
        if self.SHA_256_FILE_HASH is not None:
            PNMAddSHA_256_FILE_HASH(builder, SHA_256_FILE_HASH)
        if self.MD5_FILE_DIGEST is not None:
            PNMAddMD5_FILE_DIGEST(builder, MD5_FILE_DIGEST)
        if self.SHA_1_FILE_HASH is not None:
            PNMAddSHA_1_FILE_HASH(builder, SHA_1_FILE_HASH)
        if self.ARGON2_FILE_HASH is not None:
            PNMAddARGON2_FILE_HASH(builder, ARGON2_FILE_HASH)
        if self.BLAKE2B_FILE_HASH is not None:
            PNMAddBLAKE2B_FILE_HASH(builder, BLAKE2B_FILE_HASH)
        if self.SHA_3_FILE_HASH is not None:
            PNMAddSHA_3_FILE_HASH(builder, SHA_3_FILE_HASH)
        if self.RIPEMD_160_FILE_HASH is not None:
            PNMAddRIPEMD_160_FILE_HASH(builder, RIPEMD_160_FILE_HASH)
        if self.WHIRLPOOL_FILE_HASH is not None:
            PNMAddWHIRLPOOL_FILE_HASH(builder, WHIRLPOOL_FILE_HASH)
        if self.TIGER_FILE_HASH is not None:
            PNMAddTIGER_FILE_HASH(builder, TIGER_FILE_HASH)
        if self.CRC32 is not None:
            PNMAddCRC32(builder, CRC32)
        if self.ADLER32_CHECKSUM is not None:
            PNMAddADLER32_CHECKSUM(builder, ADLER32_CHECKSUM)
        if self.RABIN_FINGERPRINT is not None:
            PNMAddRABIN_FINGERPRINT(builder, RABIN_FINGERPRINT)
        if self.PEARSON_HASHING is not None:
            PNMAddPEARSON_HASHING(builder, PEARSON_HASHING)
        if self.BLAKE2_KEYED_HASH is not None:
            PNMAddBLAKE2_KEYED_HASH(builder, BLAKE2_KEYED_HASH)
        if self.BLAKE_256 is not None:
            PNMAddBLAKE_256(builder, BLAKE_256)
        if self.CRC8 is not None:
            PNMAddCRC8(builder, CRC8)
        if self.CRC16 is not None:
            PNMAddCRC16(builder, CRC16)
        if self.CRC64 is not None:
            PNMAddCRC64(builder, CRC64)
        if self.BSD_CHECKSUM is not None:
            PNMAddBSD_CHECKSUM(builder, BSD_CHECKSUM)
        if self.SYSV_CHECKSUM is not None:
            PNMAddSYSV_CHECKSUM(builder, SYSV_CHECKSUM)
        if self.SUM8 is not None:
            PNMAddSUM8(builder, SUM8)
        if self.INTERNET_CHECKSUM is not None:
            PNMAddINTERNET_CHECKSUM(builder, INTERNET_CHECKSUM)
        if self.SUM24 is not None:
            PNMAddSUM24(builder, SUM24)
        if self.SUM32 is not None:
            PNMAddSUM32(builder, SUM32)
        if self.FLETCHER_4 is not None:
            PNMAddFLETCHER_4(builder, FLETCHER_4)
        if self.FLETCHER_8 is not None:
            PNMAddFLETCHER_8(builder, FLETCHER_8)
        if self.FLETCHER_16 is not None:
            PNMAddFLETCHER_16(builder, FLETCHER_16)
        if self.FLETCHER_32 is not None:
            PNMAddFLETCHER_32(builder, FLETCHER_32)
        if self.LUNH_ALGORITHM is not None:
            PNMAddLUNH_ALGORITHM(builder, LUNH_ALGORITHM)
        if self.VERHOEFF_ALGORITHM is not None:
            PNMAddVERHOEFF_ALGORITHM(builder, VERHOEFF_ALGORITHM)
        if self.DAMM_ALGORITHM is not None:
            PNMAddDAMM_ALGORITHM(builder, DAMM_ALGORITHM)
        if self.TABULATION_HASHING is not None:
            PNMAddTABULATION_HASHING(builder, TABULATION_HASHING)
        if self.UNIVERSAL_ONE_WAY_HASH_FUNCTION is not None:
            PNMAddUNIVERSAL_ONE_WAY_HASH_FUNCTION(builder, UNIVERSAL_ONE_WAY_HASH_FUNCTION)
        if self.ZOBRIST_HASHING is not None:
            PNMAddZOBRIST_HASHING(builder, ZOBRIST_HASHING)
        if self.PAUL_HSIEHS_SUPERFASTHASH is not None:
            PNMAddPAUL_HSIEHS_SUPERFASTHASH(builder, PAUL_HSIEHS_SUPERFASTHASH)
        if self.BUZHASH is not None:
            PNMAddBUZHASH(builder, BUZHASH)
        if self.FNV_HASH is not None:
            PNMAddFNV_HASH(builder, FNV_HASH)
        if self.JENKINS_HASH_FUNCTION is not None:
            PNMAddJENKINS_HASH_FUNCTION(builder, JENKINS_HASH_FUNCTION)
        if self.BERNSTEINS_HASH_DJB2 is not None:
            PNMAddBERNSTEINS_HASH_DJB2(builder, BERNSTEINS_HASH_DJB2)
        if self.PJW_HASH_ELF_HASH is not None:
            PNMAddPJW_HASH_ELF_HASH(builder, PJW_HASH_ELF_HASH)
        if self.MURMURHASH is not None:
            PNMAddMURMURHASH(builder, MURMURHASH)
        if self.FAST_HASH is not None:
            PNMAddFAST_HASH(builder, FAST_HASH)
        if self.SPOOKYHASH is not None:
            PNMAddSPOOKYHASH(builder, SPOOKYHASH)
        if self.CITYHASH is not None:
            PNMAddCITYHASH(builder, CITYHASH)
        if self.FARMHASH is not None:
            PNMAddFARMHASH(builder, FARMHASH)
        if self.METROHASH is not None:
            PNMAddMETROHASH(builder, METROHASH)
        if self.NUMERIC_HASH is not None:
            PNMAddNUMERIC_HASH(builder, NUMERIC_HASH)
        if self.XXHASH is not None:
            PNMAddXXHASH(builder, XXHASH)
        if self.T1HA is not None:
            PNMAddT1HA(builder, T1HA)
        if self.GXHASH is not None:
            PNMAddGXHASH(builder, GXHASH)
        if self.PHASH is not None:
            PNMAddPHASH(builder, PHASH)
        if self.DHASH is not None:
            PNMAddDHASH(builder, DHASH)
        if self.SDBM is not None:
            PNMAddSDBM(builder, SDBM)
        if self.OSDB_HASH is not None:
            PNMAddOSDB_HASH(builder, OSDB_HASH)
        if self.KOMIHASH is not None:
            PNMAddKOMIHASH(builder, KOMIHASH)
        if self.BLAKE3 is not None:
            PNMAddBLAKE3(builder, BLAKE3)
        if self.ECOH is not None:
            PNMAddECOH(builder, ECOH)
        if self.FSB is not None:
            PNMAddFSB(builder, FSB)
        if self.GOST is not None:
            PNMAddGOST(builder, GOST)
        if self.GROSTL is not None:
            PNMAddGROSTL(builder, GROSTL)
        if self.HAS_160 is not None:
            PNMAddHAS_160(builder, HAS_160)
        if self.HAVAL is not None:
            PNMAddHAVAL(builder, HAVAL)
        if self.JH is not None:
            PNMAddJH(builder, JH)
        if self.LSH is not None:
            PNMAddLSH(builder, LSH)
        if self.MD2 is not None:
            PNMAddMD2(builder, MD2)
        if self.MD4 is not None:
            PNMAddMD4(builder, MD4)
        if self.MD5 is not None:
            PNMAddMD5(builder, MD5)
        if self.MD6 is not None:
            PNMAddMD6(builder, MD6)
        if self.RADIOGATUN is not None:
            PNMAddRADIOGATUN(builder, RADIOGATUN)
        if self.RIPEMD is not None:
            PNMAddRIPEMD(builder, RIPEMD)
        if self.RIPEMD_128 is not None:
            PNMAddRIPEMD_128(builder, RIPEMD_128)
        if self.RIPEMD_256 is not None:
            PNMAddRIPEMD_256(builder, RIPEMD_256)
        if self.RIPEMD_320 is not None:
            PNMAddRIPEMD_320(builder, RIPEMD_320)
        if self.SHA_1 is not None:
            PNMAddSHA_1(builder, SHA_1)
        if self.SHA_224 is not None:
            PNMAddSHA_224(builder, SHA_224)
        if self.SHA_256 is not None:
            PNMAddSHA_256(builder, SHA_256)
        if self.SHA_384 is not None:
            PNMAddSHA_384(builder, SHA_384)
        if self.SHA_512 is not None:
            PNMAddSHA_512(builder, SHA_512)
        if self.SHA_3 is not None:
            PNMAddSHA_3(builder, SHA_3)
        if self.SKEIN is not None:
            PNMAddSKEIN(builder, SKEIN)
        if self.SNEFRU is not None:
            PNMAddSNEFRU(builder, SNEFRU)
        if self.SPECTRAL_HASH is not None:
            PNMAddSPECTRAL_HASH(builder, SPECTRAL_HASH)
        if self.STREEBOG is not None:
            PNMAddSTREEBOG(builder, STREEBOG)
        if self.SWIFFT is not None:
            PNMAddSWIFFT(builder, SWIFFT)
        if self.TIGER is not None:
            PNMAddTIGER(builder, TIGER)
        if self.WHIRLPOOL is not None:
            PNMAddWHIRLPOOL(builder, WHIRLPOOL)
        PNM = PNMEnd(builder)
        return PNM
