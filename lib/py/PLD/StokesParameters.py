# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Stokes parameters, representing different aspects of polarization
class StokesParameters(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StokesParameters()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStokesParameters(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StokesParametersBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x49\x44\x4D", size_prefixed=size_prefixed)

    # StokesParameters
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Intensity
    # StokesParameters
    def I(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Linear polarization
    # StokesParameters
    def Q(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Another linear polarization, orthogonal to Q
    # StokesParameters
    def U(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Circular polarization
    # StokesParameters
    def V(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def StokesParametersStart(builder): builder.StartObject(4)
def Start(builder):
    return StokesParametersStart(builder)
def StokesParametersAddI(builder, I): builder.PrependFloat64Slot(0, I, 0.0)
def AddI(builder, I):
    return StokesParametersAddI(builder, I)
def StokesParametersAddQ(builder, Q): builder.PrependFloat64Slot(1, Q, 0.0)
def AddQ(builder, Q):
    return StokesParametersAddQ(builder, Q)
def StokesParametersAddU(builder, U): builder.PrependFloat64Slot(2, U, 0.0)
def AddU(builder, U):
    return StokesParametersAddU(builder, U)
def StokesParametersAddV(builder, V): builder.PrependFloat64Slot(3, V, 0.0)
def AddV(builder, V):
    return StokesParametersAddV(builder, V)
def StokesParametersEnd(builder): return builder.EndObject()
def End(builder):
    return StokesParametersEnd(builder)

class StokesParametersT(object):

    # StokesParametersT
    def __init__(self):
        self.I = 0.0  # type: float
        self.Q = 0.0  # type: float
        self.U = 0.0  # type: float
        self.V = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stokesParameters = StokesParameters()
        stokesParameters.Init(buf, pos)
        return cls.InitFromObj(stokesParameters)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stokesParameters):
        x = StokesParametersT()
        x._UnPack(stokesParameters)
        return x

    # StokesParametersT
    def _UnPack(self, stokesParameters):
        if stokesParameters is None:
            return
        self.I = stokesParameters.I()
        self.Q = stokesParameters.Q()
        self.U = stokesParameters.U()
        self.V = stokesParameters.V()

    # StokesParametersT
    def Pack(self, builder):
        StokesParametersStart(builder)
        StokesParametersAddI(builder, self.I)
        StokesParametersAddQ(builder, self.Q)
        StokesParametersAddU(builder, self.U)
        StokesParametersAddV(builder, self.V)
        stokesParameters = StokesParametersEnd(builder)
        return stokesParameters
