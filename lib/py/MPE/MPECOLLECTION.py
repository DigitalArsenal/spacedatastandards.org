# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Collection of MPE Records
class MPECOLLECTION(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MPECOLLECTION()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMPECOLLECTION(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def MPECOLLECTIONBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x4D\x50\x45", size_prefixed=size_prefixed)

    # MPECOLLECTION
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Default value = U
    # MPECOLLECTION
    def CLASSIFICATION_TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the reference frame (TEME, EME2000, etc.)
    # MPECOLLECTION
    def REF_FRAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 9

    # Epoch of the Reference Frame. (UNIX TimeStamp)
    # MPECOLLECTION
    def REF_FRAME_EPOCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time system used for the orbit state and covariance matrix. (UTC)
    # MPECOLLECTION
    def TIME_SYSTEM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 11

    # Description of the Mean Element Theory. (SGP4,DSST,USM)
    # MPECOLLECTION
    def MEAN_ELEMENT_THEORY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Array of MPE records
    # MPECOLLECTION
    def RECORDS(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MPE import MPE
            obj = MPE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MPECOLLECTION
    def RECORDSLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MPECOLLECTION
    def RECORDSIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def MPECOLLECTIONStart(builder): builder.StartObject(6)
def Start(builder):
    return MPECOLLECTIONStart(builder)
def MPECOLLECTIONAddCLASSIFICATION_TYPE(builder, CLASSIFICATION_TYPE): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(CLASSIFICATION_TYPE), 0)
def AddCLASSIFICATION_TYPE(builder, CLASSIFICATION_TYPE):
    return MPECOLLECTIONAddCLASSIFICATION_TYPE(builder, CLASSIFICATION_TYPE)
def MPECOLLECTIONAddREF_FRAME(builder, REF_FRAME): builder.PrependInt8Slot(1, REF_FRAME, 9)
def AddREF_FRAME(builder, REF_FRAME):
    return MPECOLLECTIONAddREF_FRAME(builder, REF_FRAME)
def MPECOLLECTIONAddREF_FRAME_EPOCH(builder, REF_FRAME_EPOCH): builder.PrependFloat64Slot(2, REF_FRAME_EPOCH, 0.0)
def AddREF_FRAME_EPOCH(builder, REF_FRAME_EPOCH):
    return MPECOLLECTIONAddREF_FRAME_EPOCH(builder, REF_FRAME_EPOCH)
def MPECOLLECTIONAddTIME_SYSTEM(builder, TIME_SYSTEM): builder.PrependInt8Slot(3, TIME_SYSTEM, 11)
def AddTIME_SYSTEM(builder, TIME_SYSTEM):
    return MPECOLLECTIONAddTIME_SYSTEM(builder, TIME_SYSTEM)
def MPECOLLECTIONAddMEAN_ELEMENT_THEORY(builder, MEAN_ELEMENT_THEORY): builder.PrependInt8Slot(4, MEAN_ELEMENT_THEORY, 0)
def AddMEAN_ELEMENT_THEORY(builder, MEAN_ELEMENT_THEORY):
    return MPECOLLECTIONAddMEAN_ELEMENT_THEORY(builder, MEAN_ELEMENT_THEORY)
def MPECOLLECTIONAddRECORDS(builder, RECORDS): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(RECORDS), 0)
def AddRECORDS(builder, RECORDS):
    return MPECOLLECTIONAddRECORDS(builder, RECORDS)
def MPECOLLECTIONStartRECORDSVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRECORDSVector(builder, numElems):
    return MPECOLLECTIONStartRECORDSVector(builder, numElems)
def MPECOLLECTIONEnd(builder): return builder.EndObject()
def End(builder):
    return MPECOLLECTIONEnd(builder)
import MPE
try:
    from typing import List
except:
    pass

class MPECOLLECTIONT(object):

    # MPECOLLECTIONT
    def __init__(self):
        self.CLASSIFICATION_TYPE = None  # type: str
        self.REF_FRAME = 9  # type: int
        self.REF_FRAME_EPOCH = 0.0  # type: float
        self.TIME_SYSTEM = 11  # type: int
        self.MEAN_ELEMENT_THEORY = 0  # type: int
        self.RECORDS = None  # type: List[MPE.MPET]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        MPECOLLECTION = MPECOLLECTION()
        MPECOLLECTION.Init(buf, pos)
        return cls.InitFromObj(MPECOLLECTION)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, MPECOLLECTION):
        x = MPECOLLECTIONT()
        x._UnPack(MPECOLLECTION)
        return x

    # MPECOLLECTIONT
    def _UnPack(self, MPECOLLECTION):
        if MPECOLLECTION is None:
            return
        self.CLASSIFICATION_TYPE = MPECOLLECTION.CLASSIFICATION_TYPE()
        self.REF_FRAME = MPECOLLECTION.REF_FRAME()
        self.REF_FRAME_EPOCH = MPECOLLECTION.REF_FRAME_EPOCH()
        self.TIME_SYSTEM = MPECOLLECTION.TIME_SYSTEM()
        self.MEAN_ELEMENT_THEORY = MPECOLLECTION.MEAN_ELEMENT_THEORY()
        if not MPECOLLECTION.RECORDSIsNone():
            self.RECORDS = []
            for i in range(MPECOLLECTION.RECORDSLength()):
                if MPECOLLECTION.RECORDS(i) is None:
                    self.RECORDS.append(None)
                else:
                    mPE_ = MPE.MPET.InitFromObj(MPECOLLECTION.RECORDS(i))
                    self.RECORDS.append(mPE_)

    # MPECOLLECTIONT
    def Pack(self, builder):
        if self.CLASSIFICATION_TYPE is not None:
            CLASSIFICATION_TYPE = builder.CreateString(self.CLASSIFICATION_TYPE)
        if self.RECORDS is not None:
            RECORDSlist = []
            for i in range(len(self.RECORDS)):
                RECORDSlist.append(self.RECORDS[i].Pack(builder))
            MPECOLLECTIONStartRECORDSVector(builder, len(self.RECORDS))
            for i in reversed(range(len(self.RECORDS))):
                builder.PrependUOffsetTRelative(RECORDSlist[i])
            RECORDS = builder.EndVector()
        MPECOLLECTIONStart(builder)
        if self.CLASSIFICATION_TYPE is not None:
            MPECOLLECTIONAddCLASSIFICATION_TYPE(builder, CLASSIFICATION_TYPE)
        MPECOLLECTIONAddREF_FRAME(builder, self.REF_FRAME)
        MPECOLLECTIONAddREF_FRAME_EPOCH(builder, self.REF_FRAME_EPOCH)
        MPECOLLECTIONAddTIME_SYSTEM(builder, self.TIME_SYSTEM)
        MPECOLLECTIONAddMEAN_ELEMENT_THEORY(builder, self.MEAN_ELEMENT_THEORY)
        if self.RECORDS is not None:
            MPECOLLECTIONAddRECORDS(builder, RECORDS)
        MPECOLLECTION = MPECOLLECTIONEnd(builder)
        return MPECOLLECTION
