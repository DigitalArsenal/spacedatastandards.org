# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Minimum Propagatable Element Set
class MPE(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MPE()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMPE(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def MPEBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x4D\x50\x45", size_prefixed=size_prefixed)

    # MPE
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique ID as a String
    # MPE
    def ENTITY_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Epoch of Mean Keplerian elements. (UNIX TimeStamp)
    # MPE
    def EPOCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Semi-major axis in km or mean motion in rev/day
    # MPE
    def MEAN_MOTION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Eccentricity
    # MPE
    def ECCENTRICITY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Inclination
    # MPE
    def INCLINATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Right ascension of ascending node
    # MPE
    def RA_OF_ASC_NODE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Argument of pericenter
    # MPE
    def ARG_OF_PERICENTER(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Mean anomaly
    # MPE
    def MEAN_ANOMALY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SGP/SGP4 drag-like coefficient (in units 1/[Earth radii])
    # MPE
    def BSTAR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def MPEStart(builder): builder.StartObject(9)
def Start(builder):
    return MPEStart(builder)
def MPEAddENTITY_ID(builder, ENTITY_ID): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ENTITY_ID), 0)
def AddENTITY_ID(builder, ENTITY_ID):
    return MPEAddENTITY_ID(builder, ENTITY_ID)
def MPEAddEPOCH(builder, EPOCH): builder.PrependFloat64Slot(1, EPOCH, 0.0)
def AddEPOCH(builder, EPOCH):
    return MPEAddEPOCH(builder, EPOCH)
def MPEAddMEAN_MOTION(builder, MEAN_MOTION): builder.PrependFloat64Slot(2, MEAN_MOTION, 0.0)
def AddMEAN_MOTION(builder, MEAN_MOTION):
    return MPEAddMEAN_MOTION(builder, MEAN_MOTION)
def MPEAddECCENTRICITY(builder, ECCENTRICITY): builder.PrependFloat64Slot(3, ECCENTRICITY, 0.0)
def AddECCENTRICITY(builder, ECCENTRICITY):
    return MPEAddECCENTRICITY(builder, ECCENTRICITY)
def MPEAddINCLINATION(builder, INCLINATION): builder.PrependFloat64Slot(4, INCLINATION, 0.0)
def AddINCLINATION(builder, INCLINATION):
    return MPEAddINCLINATION(builder, INCLINATION)
def MPEAddRA_OF_ASC_NODE(builder, RA_OF_ASC_NODE): builder.PrependFloat64Slot(5, RA_OF_ASC_NODE, 0.0)
def AddRA_OF_ASC_NODE(builder, RA_OF_ASC_NODE):
    return MPEAddRA_OF_ASC_NODE(builder, RA_OF_ASC_NODE)
def MPEAddARG_OF_PERICENTER(builder, ARG_OF_PERICENTER): builder.PrependFloat64Slot(6, ARG_OF_PERICENTER, 0.0)
def AddARG_OF_PERICENTER(builder, ARG_OF_PERICENTER):
    return MPEAddARG_OF_PERICENTER(builder, ARG_OF_PERICENTER)
def MPEAddMEAN_ANOMALY(builder, MEAN_ANOMALY): builder.PrependFloat64Slot(7, MEAN_ANOMALY, 0.0)
def AddMEAN_ANOMALY(builder, MEAN_ANOMALY):
    return MPEAddMEAN_ANOMALY(builder, MEAN_ANOMALY)
def MPEAddBSTAR(builder, BSTAR): builder.PrependFloat64Slot(8, BSTAR, 0.0)
def AddBSTAR(builder, BSTAR):
    return MPEAddBSTAR(builder, BSTAR)
def MPEEnd(builder): return builder.EndObject()
def End(builder):
    return MPEEnd(builder)

class MPET(object):

    # MPET
    def __init__(self):
        self.ENTITY_ID = None  # type: str
        self.EPOCH = 0.0  # type: float
        self.MEAN_MOTION = 0.0  # type: float
        self.ECCENTRICITY = 0.0  # type: float
        self.INCLINATION = 0.0  # type: float
        self.RA_OF_ASC_NODE = 0.0  # type: float
        self.ARG_OF_PERICENTER = 0.0  # type: float
        self.MEAN_ANOMALY = 0.0  # type: float
        self.BSTAR = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        MPE = MPE()
        MPE.Init(buf, pos)
        return cls.InitFromObj(MPE)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, MPE):
        x = MPET()
        x._UnPack(MPE)
        return x

    # MPET
    def _UnPack(self, MPE):
        if MPE is None:
            return
        self.ENTITY_ID = MPE.ENTITY_ID()
        self.EPOCH = MPE.EPOCH()
        self.MEAN_MOTION = MPE.MEAN_MOTION()
        self.ECCENTRICITY = MPE.ECCENTRICITY()
        self.INCLINATION = MPE.INCLINATION()
        self.RA_OF_ASC_NODE = MPE.RA_OF_ASC_NODE()
        self.ARG_OF_PERICENTER = MPE.ARG_OF_PERICENTER()
        self.MEAN_ANOMALY = MPE.MEAN_ANOMALY()
        self.BSTAR = MPE.BSTAR()

    # MPET
    def Pack(self, builder):
        if self.ENTITY_ID is not None:
            ENTITY_ID = builder.CreateString(self.ENTITY_ID)
        MPEStart(builder)
        if self.ENTITY_ID is not None:
            MPEAddENTITY_ID(builder, ENTITY_ID)
        MPEAddEPOCH(builder, self.EPOCH)
        MPEAddMEAN_MOTION(builder, self.MEAN_MOTION)
        MPEAddECCENTRICITY(builder, self.ECCENTRICITY)
        MPEAddINCLINATION(builder, self.INCLINATION)
        MPEAddRA_OF_ASC_NODE(builder, self.RA_OF_ASC_NODE)
        MPEAddARG_OF_PERICENTER(builder, self.ARG_OF_PERICENTER)
        MPEAddMEAN_ANOMALY(builder, self.MEAN_ANOMALY)
        MPEAddBSTAR(builder, self.BSTAR)
        MPE = MPEEnd(builder)
        return MPE
