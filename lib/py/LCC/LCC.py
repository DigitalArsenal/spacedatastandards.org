# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LCC(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LCC()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLCC(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LCCBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x4C\x43\x43", size_prefixed=size_prefixed)

    # LCC
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LCC
    def OWNER(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def LCCStart(builder): builder.StartObject(1)
def Start(builder):
    return LCCStart(builder)
def LCCAddOWNER(builder, OWNER): builder.PrependInt8Slot(0, OWNER, 0)
def AddOWNER(builder, OWNER):
    return LCCAddOWNER(builder, OWNER)
def LCCEnd(builder): return builder.EndObject()
def End(builder):
    return LCCEnd(builder)

class LCCT(object):

    # LCCT
    def __init__(self):
        self.OWNER = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        LCC = LCC()
        LCC.Init(buf, pos)
        return cls.InitFromObj(LCC)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, LCC):
        x = LCCT()
        x._UnPack(LCC)
        return x

    # LCCT
    def _UnPack(self, LCC):
        if LCC is None:
            return
        self.OWNER = LCC.OWNER()

    # LCCT
    def Pack(self, builder):
        LCCStart(builder)
        LCCAddOWNER(builder, self.OWNER)
        LCC = LCCEnd(builder)
        return LCC
