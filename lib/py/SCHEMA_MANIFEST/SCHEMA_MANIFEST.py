# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Schema Manifest
class SCHEMA_MANIFEST(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SCHEMA_MANIFEST()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSCHEMA_MANIFEST(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SCHEMA_MANIFESTBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x53\x43\x4D", size_prefixed=size_prefixed)

    # SCHEMA_MANIFEST
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Version of Space Data Standards
    # SCHEMA_MANIFEST
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Standards Dictionary
    # SCHEMA_MANIFEST
    def RECORDS(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from SCHEMA_STANDARD import SCHEMA_STANDARD
            obj = SCHEMA_STANDARD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SCHEMA_MANIFEST
    def RECORDSLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SCHEMA_MANIFEST
    def RECORDSIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def SCHEMA_MANIFESTStart(builder): builder.StartObject(2)
def Start(builder):
    return SCHEMA_MANIFESTStart(builder)
def SCHEMA_MANIFESTAddVersion(builder, version): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)
def AddVersion(builder, version):
    return SCHEMA_MANIFESTAddVersion(builder, version)
def SCHEMA_MANIFESTAddRECORDS(builder, RECORDS): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(RECORDS), 0)
def AddRECORDS(builder, RECORDS):
    return SCHEMA_MANIFESTAddRECORDS(builder, RECORDS)
def SCHEMA_MANIFESTStartRECORDSVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRECORDSVector(builder, numElems):
    return SCHEMA_MANIFESTStartRECORDSVector(builder, numElems)
def SCHEMA_MANIFESTEnd(builder): return builder.EndObject()
def End(builder):
    return SCHEMA_MANIFESTEnd(builder)
import SCHEMA_STANDARD
try:
    from typing import List
except:
    pass

class SCHEMA_MANIFESTT(object):

    # SCHEMA_MANIFESTT
    def __init__(self):
        self.version = None  # type: str
        self.RECORDS = None  # type: List[SCHEMA_STANDARD.SCHEMA_STANDARDT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        SCHEMA_MANIFEST = SCHEMA_MANIFEST()
        SCHEMA_MANIFEST.Init(buf, pos)
        return cls.InitFromObj(SCHEMA_MANIFEST)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, SCHEMA_MANIFEST):
        x = SCHEMA_MANIFESTT()
        x._UnPack(SCHEMA_MANIFEST)
        return x

    # SCHEMA_MANIFESTT
    def _UnPack(self, SCHEMA_MANIFEST):
        if SCHEMA_MANIFEST is None:
            return
        self.version = SCHEMA_MANIFEST.Version()
        if not SCHEMA_MANIFEST.RECORDSIsNone():
            self.RECORDS = []
            for i in range(SCHEMA_MANIFEST.RECORDSLength()):
                if SCHEMA_MANIFEST.RECORDS(i) is None:
                    self.RECORDS.append(None)
                else:
                    sCHEMA_STANDARD_ = SCHEMA_STANDARD.SCHEMA_STANDARDT.InitFromObj(SCHEMA_MANIFEST.RECORDS(i))
                    self.RECORDS.append(sCHEMA_STANDARD_)

    # SCHEMA_MANIFESTT
    def Pack(self, builder):
        if self.version is not None:
            version = builder.CreateString(self.version)
        if self.RECORDS is not None:
            RECORDSlist = []
            for i in range(len(self.RECORDS)):
                RECORDSlist.append(self.RECORDS[i].Pack(builder))
            SCHEMA_MANIFESTStartRECORDSVector(builder, len(self.RECORDS))
            for i in reversed(range(len(self.RECORDS))):
                builder.PrependUOffsetTRelative(RECORDSlist[i])
            RECORDS = builder.EndVector()
        SCHEMA_MANIFESTStart(builder)
        if self.version is not None:
            SCHEMA_MANIFESTAddVersion(builder, version)
        if self.RECORDS is not None:
            SCHEMA_MANIFESTAddRECORDS(builder, RECORDS)
        SCHEMA_MANIFEST = SCHEMA_MANIFESTEnd(builder)
        return SCHEMA_MANIFEST
