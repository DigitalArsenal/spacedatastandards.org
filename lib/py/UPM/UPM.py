# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# User Profile Message
class UPM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UPM()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUPM(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def UPMBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x55\x50\x4D", size_prefixed=size_prefixed)

    # UPM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UPM
    def NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UPM
    def ALTERNATE_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UPM
    def DESCRIPTION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UPM
    def IMAGE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UPM
    def SAME_AS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UPM
    def URL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UPM
    def TELEPHONE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UPM
    def EMAIL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UPM
    def KEY(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CryptoKey import CryptoKey
            obj = CryptoKey()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UPM
    def KEYLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UPM
    def KEYIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # UPM
    def CONTACT_POINT(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from ContactPoint import ContactPoint
            obj = ContactPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UPM
    def CONTACT_POINTLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UPM
    def CONTACT_POINTIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # UPM
    def ADDRESS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from ContactPoint import ContactPoint
            obj = ContactPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UPM
    def JOB_TITLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UPM
    def AFFILIATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Organization import Organization
            obj = Organization()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UPM
    def HAS_OCCUPATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Occupation import Occupation
            obj = Occupation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UPM
    def FAMILY_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UPM
    def GIVEN_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UPM
    def ADDITIONAL_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UPM
    def HONORIFIC_PREFIX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UPM
    def HONORIFIC_SUFFIX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def UPMStart(builder): builder.StartObject(19)
def Start(builder):
    return UPMStart(builder)
def UPMAddNAME(builder, NAME): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(NAME), 0)
def AddNAME(builder, NAME):
    return UPMAddNAME(builder, NAME)
def UPMAddALTERNATE_NAME(builder, ALTERNATE_NAME): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ALTERNATE_NAME), 0)
def AddALTERNATE_NAME(builder, ALTERNATE_NAME):
    return UPMAddALTERNATE_NAME(builder, ALTERNATE_NAME)
def UPMAddDESCRIPTION(builder, DESCRIPTION): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(DESCRIPTION), 0)
def AddDESCRIPTION(builder, DESCRIPTION):
    return UPMAddDESCRIPTION(builder, DESCRIPTION)
def UPMAddIMAGE(builder, IMAGE): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(IMAGE), 0)
def AddIMAGE(builder, IMAGE):
    return UPMAddIMAGE(builder, IMAGE)
def UPMAddSAME_AS(builder, SAME_AS): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(SAME_AS), 0)
def AddSAME_AS(builder, SAME_AS):
    return UPMAddSAME_AS(builder, SAME_AS)
def UPMAddURL(builder, URL): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(URL), 0)
def AddURL(builder, URL):
    return UPMAddURL(builder, URL)
def UPMAddTELEPHONE(builder, TELEPHONE): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(TELEPHONE), 0)
def AddTELEPHONE(builder, TELEPHONE):
    return UPMAddTELEPHONE(builder, TELEPHONE)
def UPMAddEMAIL(builder, EMAIL): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(EMAIL), 0)
def AddEMAIL(builder, EMAIL):
    return UPMAddEMAIL(builder, EMAIL)
def UPMAddKEY(builder, KEY): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(KEY), 0)
def AddKEY(builder, KEY):
    return UPMAddKEY(builder, KEY)
def UPMStartKEYVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartKEYVector(builder, numElems):
    return UPMStartKEYVector(builder, numElems)
def UPMAddCONTACT_POINT(builder, CONTACT_POINT): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(CONTACT_POINT), 0)
def AddCONTACT_POINT(builder, CONTACT_POINT):
    return UPMAddCONTACT_POINT(builder, CONTACT_POINT)
def UPMStartCONTACT_POINTVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCONTACT_POINTVector(builder, numElems):
    return UPMStartCONTACT_POINTVector(builder, numElems)
def UPMAddADDRESS(builder, ADDRESS): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(ADDRESS), 0)
def AddADDRESS(builder, ADDRESS):
    return UPMAddADDRESS(builder, ADDRESS)
def UPMAddJOB_TITLE(builder, JOB_TITLE): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(JOB_TITLE), 0)
def AddJOB_TITLE(builder, JOB_TITLE):
    return UPMAddJOB_TITLE(builder, JOB_TITLE)
def UPMAddAFFILIATION(builder, AFFILIATION): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(AFFILIATION), 0)
def AddAFFILIATION(builder, AFFILIATION):
    return UPMAddAFFILIATION(builder, AFFILIATION)
def UPMAddHAS_OCCUPATION(builder, HAS_OCCUPATION): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(HAS_OCCUPATION), 0)
def AddHAS_OCCUPATION(builder, HAS_OCCUPATION):
    return UPMAddHAS_OCCUPATION(builder, HAS_OCCUPATION)
def UPMAddFAMILY_NAME(builder, FAMILY_NAME): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(FAMILY_NAME), 0)
def AddFAMILY_NAME(builder, FAMILY_NAME):
    return UPMAddFAMILY_NAME(builder, FAMILY_NAME)
def UPMAddGIVEN_NAME(builder, GIVEN_NAME): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(GIVEN_NAME), 0)
def AddGIVEN_NAME(builder, GIVEN_NAME):
    return UPMAddGIVEN_NAME(builder, GIVEN_NAME)
def UPMAddADDITIONAL_NAME(builder, ADDITIONAL_NAME): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(ADDITIONAL_NAME), 0)
def AddADDITIONAL_NAME(builder, ADDITIONAL_NAME):
    return UPMAddADDITIONAL_NAME(builder, ADDITIONAL_NAME)
def UPMAddHONORIFIC_PREFIX(builder, HONORIFIC_PREFIX): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(HONORIFIC_PREFIX), 0)
def AddHONORIFIC_PREFIX(builder, HONORIFIC_PREFIX):
    return UPMAddHONORIFIC_PREFIX(builder, HONORIFIC_PREFIX)
def UPMAddHONORIFIC_SUFFIX(builder, HONORIFIC_SUFFIX): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(HONORIFIC_SUFFIX), 0)
def AddHONORIFIC_SUFFIX(builder, HONORIFIC_SUFFIX):
    return UPMAddHONORIFIC_SUFFIX(builder, HONORIFIC_SUFFIX)
def UPMEnd(builder): return builder.EndObject()
def End(builder):
    return UPMEnd(builder)
import ContactPoint
import CryptoKey
import Occupation
import Organization
try:
    from typing import List, Optional
except:
    pass

class UPMT(object):

    # UPMT
    def __init__(self):
        self.NAME = None  # type: str
        self.ALTERNATE_NAME = None  # type: str
        self.DESCRIPTION = None  # type: str
        self.IMAGE = None  # type: str
        self.SAME_AS = None  # type: str
        self.URL = None  # type: str
        self.TELEPHONE = None  # type: str
        self.EMAIL = None  # type: str
        self.KEY = None  # type: List[CryptoKey.CryptoKeyT]
        self.CONTACT_POINT = None  # type: List[ContactPoint.ContactPointT]
        self.ADDRESS = None  # type: Optional[ContactPoint.ContactPointT]
        self.JOB_TITLE = None  # type: str
        self.AFFILIATION = None  # type: Optional[Organization.OrganizationT]
        self.HAS_OCCUPATION = None  # type: Optional[Occupation.OccupationT]
        self.FAMILY_NAME = None  # type: str
        self.GIVEN_NAME = None  # type: str
        self.ADDITIONAL_NAME = None  # type: str
        self.HONORIFIC_PREFIX = None  # type: str
        self.HONORIFIC_SUFFIX = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        UPM = UPM()
        UPM.Init(buf, pos)
        return cls.InitFromObj(UPM)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, UPM):
        x = UPMT()
        x._UnPack(UPM)
        return x

    # UPMT
    def _UnPack(self, UPM):
        if UPM is None:
            return
        self.NAME = UPM.NAME()
        self.ALTERNATE_NAME = UPM.ALTERNATE_NAME()
        self.DESCRIPTION = UPM.DESCRIPTION()
        self.IMAGE = UPM.IMAGE()
        self.SAME_AS = UPM.SAME_AS()
        self.URL = UPM.URL()
        self.TELEPHONE = UPM.TELEPHONE()
        self.EMAIL = UPM.EMAIL()
        if not UPM.KEYIsNone():
            self.KEY = []
            for i in range(UPM.KEYLength()):
                if UPM.KEY(i) is None:
                    self.KEY.append(None)
                else:
                    cryptoKey_ = CryptoKey.CryptoKeyT.InitFromObj(UPM.KEY(i))
                    self.KEY.append(cryptoKey_)
        if not UPM.CONTACT_POINTIsNone():
            self.CONTACT_POINT = []
            for i in range(UPM.CONTACT_POINTLength()):
                if UPM.CONTACT_POINT(i) is None:
                    self.CONTACT_POINT.append(None)
                else:
                    contactPoint_ = ContactPoint.ContactPointT.InitFromObj(UPM.CONTACT_POINT(i))
                    self.CONTACT_POINT.append(contactPoint_)
        if UPM.ADDRESS() is not None:
            self.ADDRESS = ContactPoint.ContactPointT.InitFromObj(UPM.ADDRESS())
        self.JOB_TITLE = UPM.JOB_TITLE()
        if UPM.AFFILIATION() is not None:
            self.AFFILIATION = Organization.OrganizationT.InitFromObj(UPM.AFFILIATION())
        if UPM.HAS_OCCUPATION() is not None:
            self.HAS_OCCUPATION = Occupation.OccupationT.InitFromObj(UPM.HAS_OCCUPATION())
        self.FAMILY_NAME = UPM.FAMILY_NAME()
        self.GIVEN_NAME = UPM.GIVEN_NAME()
        self.ADDITIONAL_NAME = UPM.ADDITIONAL_NAME()
        self.HONORIFIC_PREFIX = UPM.HONORIFIC_PREFIX()
        self.HONORIFIC_SUFFIX = UPM.HONORIFIC_SUFFIX()

    # UPMT
    def Pack(self, builder):
        if self.NAME is not None:
            NAME = builder.CreateString(self.NAME)
        if self.ALTERNATE_NAME is not None:
            ALTERNATE_NAME = builder.CreateString(self.ALTERNATE_NAME)
        if self.DESCRIPTION is not None:
            DESCRIPTION = builder.CreateString(self.DESCRIPTION)
        if self.IMAGE is not None:
            IMAGE = builder.CreateString(self.IMAGE)
        if self.SAME_AS is not None:
            SAME_AS = builder.CreateString(self.SAME_AS)
        if self.URL is not None:
            URL = builder.CreateString(self.URL)
        if self.TELEPHONE is not None:
            TELEPHONE = builder.CreateString(self.TELEPHONE)
        if self.EMAIL is not None:
            EMAIL = builder.CreateString(self.EMAIL)
        if self.KEY is not None:
            KEYlist = []
            for i in range(len(self.KEY)):
                KEYlist.append(self.KEY[i].Pack(builder))
            UPMStartKEYVector(builder, len(self.KEY))
            for i in reversed(range(len(self.KEY))):
                builder.PrependUOffsetTRelative(KEYlist[i])
            KEY = builder.EndVector()
        if self.CONTACT_POINT is not None:
            CONTACT_POINTlist = []
            for i in range(len(self.CONTACT_POINT)):
                CONTACT_POINTlist.append(self.CONTACT_POINT[i].Pack(builder))
            UPMStartCONTACT_POINTVector(builder, len(self.CONTACT_POINT))
            for i in reversed(range(len(self.CONTACT_POINT))):
                builder.PrependUOffsetTRelative(CONTACT_POINTlist[i])
            CONTACT_POINT = builder.EndVector()
        if self.ADDRESS is not None:
            ADDRESS = self.ADDRESS.Pack(builder)
        if self.JOB_TITLE is not None:
            JOB_TITLE = builder.CreateString(self.JOB_TITLE)
        if self.AFFILIATION is not None:
            AFFILIATION = self.AFFILIATION.Pack(builder)
        if self.HAS_OCCUPATION is not None:
            HAS_OCCUPATION = self.HAS_OCCUPATION.Pack(builder)
        if self.FAMILY_NAME is not None:
            FAMILY_NAME = builder.CreateString(self.FAMILY_NAME)
        if self.GIVEN_NAME is not None:
            GIVEN_NAME = builder.CreateString(self.GIVEN_NAME)
        if self.ADDITIONAL_NAME is not None:
            ADDITIONAL_NAME = builder.CreateString(self.ADDITIONAL_NAME)
        if self.HONORIFIC_PREFIX is not None:
            HONORIFIC_PREFIX = builder.CreateString(self.HONORIFIC_PREFIX)
        if self.HONORIFIC_SUFFIX is not None:
            HONORIFIC_SUFFIX = builder.CreateString(self.HONORIFIC_SUFFIX)
        UPMStart(builder)
        if self.NAME is not None:
            UPMAddNAME(builder, NAME)
        if self.ALTERNATE_NAME is not None:
            UPMAddALTERNATE_NAME(builder, ALTERNATE_NAME)
        if self.DESCRIPTION is not None:
            UPMAddDESCRIPTION(builder, DESCRIPTION)
        if self.IMAGE is not None:
            UPMAddIMAGE(builder, IMAGE)
        if self.SAME_AS is not None:
            UPMAddSAME_AS(builder, SAME_AS)
        if self.URL is not None:
            UPMAddURL(builder, URL)
        if self.TELEPHONE is not None:
            UPMAddTELEPHONE(builder, TELEPHONE)
        if self.EMAIL is not None:
            UPMAddEMAIL(builder, EMAIL)
        if self.KEY is not None:
            UPMAddKEY(builder, KEY)
        if self.CONTACT_POINT is not None:
            UPMAddCONTACT_POINT(builder, CONTACT_POINT)
        if self.ADDRESS is not None:
            UPMAddADDRESS(builder, ADDRESS)
        if self.JOB_TITLE is not None:
            UPMAddJOB_TITLE(builder, JOB_TITLE)
        if self.AFFILIATION is not None:
            UPMAddAFFILIATION(builder, AFFILIATION)
        if self.HAS_OCCUPATION is not None:
            UPMAddHAS_OCCUPATION(builder, HAS_OCCUPATION)
        if self.FAMILY_NAME is not None:
            UPMAddFAMILY_NAME(builder, FAMILY_NAME)
        if self.GIVEN_NAME is not None:
            UPMAddGIVEN_NAME(builder, GIVEN_NAME)
        if self.ADDITIONAL_NAME is not None:
            UPMAddADDITIONAL_NAME(builder, ADDITIONAL_NAME)
        if self.HONORIFIC_PREFIX is not None:
            UPMAddHONORIFIC_PREFIX(builder, HONORIFIC_PREFIX)
        if self.HONORIFIC_SUFFIX is not None:
            UPMAddHONORIFIC_SUFFIX(builder, HONORIFIC_SUFFIX)
        UPM = UPMEnd(builder)
        return UPM
