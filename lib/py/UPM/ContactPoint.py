# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ContactPoint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ContactPoint()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsContactPoint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ContactPointBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x55\x50\x4D", size_prefixed=size_prefixed)

    # ContactPoint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ContactPoint
    def NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContactPoint
    def CONTACT_TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContactPoint
    def EMAIL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContactPoint
    def TELEPHONE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContactPoint
    def CONTACT_OPTION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContactPoint
    def AREA_SERVED(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContactPoint
    def AVAILABLE_LANGUAGE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContactPoint
    def ADDRESS_COUNTRY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContactPoint
    def ADDRESS_REGION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContactPoint
    def ADDRESS_LOCALITY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContactPoint
    def POSTAL_CODE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContactPoint
    def STREET_ADDRESS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContactPoint
    def POST_OFFICE_BOX_NUMBER(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ContactPointStart(builder): builder.StartObject(13)
def Start(builder):
    return ContactPointStart(builder)
def ContactPointAddNAME(builder, NAME): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(NAME), 0)
def AddNAME(builder, NAME):
    return ContactPointAddNAME(builder, NAME)
def ContactPointAddCONTACT_TYPE(builder, CONTACT_TYPE): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(CONTACT_TYPE), 0)
def AddCONTACT_TYPE(builder, CONTACT_TYPE):
    return ContactPointAddCONTACT_TYPE(builder, CONTACT_TYPE)
def ContactPointAddEMAIL(builder, EMAIL): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(EMAIL), 0)
def AddEMAIL(builder, EMAIL):
    return ContactPointAddEMAIL(builder, EMAIL)
def ContactPointAddTELEPHONE(builder, TELEPHONE): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(TELEPHONE), 0)
def AddTELEPHONE(builder, TELEPHONE):
    return ContactPointAddTELEPHONE(builder, TELEPHONE)
def ContactPointAddCONTACT_OPTION(builder, CONTACT_OPTION): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(CONTACT_OPTION), 0)
def AddCONTACT_OPTION(builder, CONTACT_OPTION):
    return ContactPointAddCONTACT_OPTION(builder, CONTACT_OPTION)
def ContactPointAddAREA_SERVED(builder, AREA_SERVED): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(AREA_SERVED), 0)
def AddAREA_SERVED(builder, AREA_SERVED):
    return ContactPointAddAREA_SERVED(builder, AREA_SERVED)
def ContactPointAddAVAILABLE_LANGUAGE(builder, AVAILABLE_LANGUAGE): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(AVAILABLE_LANGUAGE), 0)
def AddAVAILABLE_LANGUAGE(builder, AVAILABLE_LANGUAGE):
    return ContactPointAddAVAILABLE_LANGUAGE(builder, AVAILABLE_LANGUAGE)
def ContactPointAddADDRESS_COUNTRY(builder, ADDRESS_COUNTRY): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ADDRESS_COUNTRY), 0)
def AddADDRESS_COUNTRY(builder, ADDRESS_COUNTRY):
    return ContactPointAddADDRESS_COUNTRY(builder, ADDRESS_COUNTRY)
def ContactPointAddADDRESS_REGION(builder, ADDRESS_REGION): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(ADDRESS_REGION), 0)
def AddADDRESS_REGION(builder, ADDRESS_REGION):
    return ContactPointAddADDRESS_REGION(builder, ADDRESS_REGION)
def ContactPointAddADDRESS_LOCALITY(builder, ADDRESS_LOCALITY): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(ADDRESS_LOCALITY), 0)
def AddADDRESS_LOCALITY(builder, ADDRESS_LOCALITY):
    return ContactPointAddADDRESS_LOCALITY(builder, ADDRESS_LOCALITY)
def ContactPointAddPOSTAL_CODE(builder, POSTAL_CODE): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(POSTAL_CODE), 0)
def AddPOSTAL_CODE(builder, POSTAL_CODE):
    return ContactPointAddPOSTAL_CODE(builder, POSTAL_CODE)
def ContactPointAddSTREET_ADDRESS(builder, STREET_ADDRESS): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(STREET_ADDRESS), 0)
def AddSTREET_ADDRESS(builder, STREET_ADDRESS):
    return ContactPointAddSTREET_ADDRESS(builder, STREET_ADDRESS)
def ContactPointAddPOST_OFFICE_BOX_NUMBER(builder, POST_OFFICE_BOX_NUMBER): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(POST_OFFICE_BOX_NUMBER), 0)
def AddPOST_OFFICE_BOX_NUMBER(builder, POST_OFFICE_BOX_NUMBER):
    return ContactPointAddPOST_OFFICE_BOX_NUMBER(builder, POST_OFFICE_BOX_NUMBER)
def ContactPointEnd(builder): return builder.EndObject()
def End(builder):
    return ContactPointEnd(builder)

class ContactPointT(object):

    # ContactPointT
    def __init__(self):
        self.NAME = None  # type: str
        self.CONTACT_TYPE = None  # type: str
        self.EMAIL = None  # type: str
        self.TELEPHONE = None  # type: str
        self.CONTACT_OPTION = None  # type: str
        self.AREA_SERVED = None  # type: str
        self.AVAILABLE_LANGUAGE = None  # type: str
        self.ADDRESS_COUNTRY = None  # type: str
        self.ADDRESS_REGION = None  # type: str
        self.ADDRESS_LOCALITY = None  # type: str
        self.POSTAL_CODE = None  # type: str
        self.STREET_ADDRESS = None  # type: str
        self.POST_OFFICE_BOX_NUMBER = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        contactPoint = ContactPoint()
        contactPoint.Init(buf, pos)
        return cls.InitFromObj(contactPoint)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, contactPoint):
        x = ContactPointT()
        x._UnPack(contactPoint)
        return x

    # ContactPointT
    def _UnPack(self, contactPoint):
        if contactPoint is None:
            return
        self.NAME = contactPoint.NAME()
        self.CONTACT_TYPE = contactPoint.CONTACT_TYPE()
        self.EMAIL = contactPoint.EMAIL()
        self.TELEPHONE = contactPoint.TELEPHONE()
        self.CONTACT_OPTION = contactPoint.CONTACT_OPTION()
        self.AREA_SERVED = contactPoint.AREA_SERVED()
        self.AVAILABLE_LANGUAGE = contactPoint.AVAILABLE_LANGUAGE()
        self.ADDRESS_COUNTRY = contactPoint.ADDRESS_COUNTRY()
        self.ADDRESS_REGION = contactPoint.ADDRESS_REGION()
        self.ADDRESS_LOCALITY = contactPoint.ADDRESS_LOCALITY()
        self.POSTAL_CODE = contactPoint.POSTAL_CODE()
        self.STREET_ADDRESS = contactPoint.STREET_ADDRESS()
        self.POST_OFFICE_BOX_NUMBER = contactPoint.POST_OFFICE_BOX_NUMBER()

    # ContactPointT
    def Pack(self, builder):
        if self.NAME is not None:
            NAME = builder.CreateString(self.NAME)
        if self.CONTACT_TYPE is not None:
            CONTACT_TYPE = builder.CreateString(self.CONTACT_TYPE)
        if self.EMAIL is not None:
            EMAIL = builder.CreateString(self.EMAIL)
        if self.TELEPHONE is not None:
            TELEPHONE = builder.CreateString(self.TELEPHONE)
        if self.CONTACT_OPTION is not None:
            CONTACT_OPTION = builder.CreateString(self.CONTACT_OPTION)
        if self.AREA_SERVED is not None:
            AREA_SERVED = builder.CreateString(self.AREA_SERVED)
        if self.AVAILABLE_LANGUAGE is not None:
            AVAILABLE_LANGUAGE = builder.CreateString(self.AVAILABLE_LANGUAGE)
        if self.ADDRESS_COUNTRY is not None:
            ADDRESS_COUNTRY = builder.CreateString(self.ADDRESS_COUNTRY)
        if self.ADDRESS_REGION is not None:
            ADDRESS_REGION = builder.CreateString(self.ADDRESS_REGION)
        if self.ADDRESS_LOCALITY is not None:
            ADDRESS_LOCALITY = builder.CreateString(self.ADDRESS_LOCALITY)
        if self.POSTAL_CODE is not None:
            POSTAL_CODE = builder.CreateString(self.POSTAL_CODE)
        if self.STREET_ADDRESS is not None:
            STREET_ADDRESS = builder.CreateString(self.STREET_ADDRESS)
        if self.POST_OFFICE_BOX_NUMBER is not None:
            POST_OFFICE_BOX_NUMBER = builder.CreateString(self.POST_OFFICE_BOX_NUMBER)
        ContactPointStart(builder)
        if self.NAME is not None:
            ContactPointAddNAME(builder, NAME)
        if self.CONTACT_TYPE is not None:
            ContactPointAddCONTACT_TYPE(builder, CONTACT_TYPE)
        if self.EMAIL is not None:
            ContactPointAddEMAIL(builder, EMAIL)
        if self.TELEPHONE is not None:
            ContactPointAddTELEPHONE(builder, TELEPHONE)
        if self.CONTACT_OPTION is not None:
            ContactPointAddCONTACT_OPTION(builder, CONTACT_OPTION)
        if self.AREA_SERVED is not None:
            ContactPointAddAREA_SERVED(builder, AREA_SERVED)
        if self.AVAILABLE_LANGUAGE is not None:
            ContactPointAddAVAILABLE_LANGUAGE(builder, AVAILABLE_LANGUAGE)
        if self.ADDRESS_COUNTRY is not None:
            ContactPointAddADDRESS_COUNTRY(builder, ADDRESS_COUNTRY)
        if self.ADDRESS_REGION is not None:
            ContactPointAddADDRESS_REGION(builder, ADDRESS_REGION)
        if self.ADDRESS_LOCALITY is not None:
            ContactPointAddADDRESS_LOCALITY(builder, ADDRESS_LOCALITY)
        if self.POSTAL_CODE is not None:
            ContactPointAddPOSTAL_CODE(builder, POSTAL_CODE)
        if self.STREET_ADDRESS is not None:
            ContactPointAddSTREET_ADDRESS(builder, STREET_ADDRESS)
        if self.POST_OFFICE_BOX_NUMBER is not None:
            ContactPointAddPOST_OFFICE_BOX_NUMBER(builder, POST_OFFICE_BOX_NUMBER)
        contactPoint = ContactPointEnd(builder)
        return contactPoint
