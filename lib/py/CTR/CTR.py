# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Country Identity Message
class CTR(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CTR()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCTR(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CTRBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x43\x54\x52", size_prefixed=size_prefixed)

    # CTR
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ISO 3166 Numeric code
    # CTR
    def ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Country name
    # CTR
    def NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GENC code
    # CTR
    def GENC_CODE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ISO 3166 Alpha-2 code
    # CTR
    def ALPHA_2_CODE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ISO 3166 Alpha-3 code
    # CTR
    def ALPHA_3_CODE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Stanag code
    # CTR
    def STANAG_CODE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Internet country code top-level domain (ccTLD)
    # CTR
    def INTERNET_CCTLD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional comments
    # CTR
    def COMMENT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CTRStart(builder): builder.StartObject(8)
def Start(builder):
    return CTRStart(builder)
def CTRAddID(builder, ID): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ID), 0)
def AddID(builder, ID):
    return CTRAddID(builder, ID)
def CTRAddNAME(builder, NAME): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(NAME), 0)
def AddNAME(builder, NAME):
    return CTRAddNAME(builder, NAME)
def CTRAddGENC_CODE(builder, GENC_CODE): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(GENC_CODE), 0)
def AddGENC_CODE(builder, GENC_CODE):
    return CTRAddGENC_CODE(builder, GENC_CODE)
def CTRAddALPHA_2_CODE(builder, ALPHA_2_CODE): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ALPHA_2_CODE), 0)
def AddALPHA_2_CODE(builder, ALPHA_2_CODE):
    return CTRAddALPHA_2_CODE(builder, ALPHA_2_CODE)
def CTRAddALPHA_3_CODE(builder, ALPHA_3_CODE): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ALPHA_3_CODE), 0)
def AddALPHA_3_CODE(builder, ALPHA_3_CODE):
    return CTRAddALPHA_3_CODE(builder, ALPHA_3_CODE)
def CTRAddSTANAG_CODE(builder, STANAG_CODE): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(STANAG_CODE), 0)
def AddSTANAG_CODE(builder, STANAG_CODE):
    return CTRAddSTANAG_CODE(builder, STANAG_CODE)
def CTRAddINTERNET_CCTLD(builder, INTERNET_CCTLD): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(INTERNET_CCTLD), 0)
def AddINTERNET_CCTLD(builder, INTERNET_CCTLD):
    return CTRAddINTERNET_CCTLD(builder, INTERNET_CCTLD)
def CTRAddCOMMENT(builder, COMMENT): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(COMMENT), 0)
def AddCOMMENT(builder, COMMENT):
    return CTRAddCOMMENT(builder, COMMENT)
def CTREnd(builder): return builder.EndObject()
def End(builder):
    return CTREnd(builder)

class CTRT(object):

    # CTRT
    def __init__(self):
        self.ID = None  # type: str
        self.NAME = None  # type: str
        self.GENC_CODE = None  # type: str
        self.ALPHA_2_CODE = None  # type: str
        self.ALPHA_3_CODE = None  # type: str
        self.STANAG_CODE = None  # type: str
        self.INTERNET_CCTLD = None  # type: str
        self.COMMENT = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        CTR = CTR()
        CTR.Init(buf, pos)
        return cls.InitFromObj(CTR)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, CTR):
        x = CTRT()
        x._UnPack(CTR)
        return x

    # CTRT
    def _UnPack(self, CTR):
        if CTR is None:
            return
        self.ID = CTR.ID()
        self.NAME = CTR.NAME()
        self.GENC_CODE = CTR.GENC_CODE()
        self.ALPHA_2_CODE = CTR.ALPHA_2_CODE()
        self.ALPHA_3_CODE = CTR.ALPHA_3_CODE()
        self.STANAG_CODE = CTR.STANAG_CODE()
        self.INTERNET_CCTLD = CTR.INTERNET_CCTLD()
        self.COMMENT = CTR.COMMENT()

    # CTRT
    def Pack(self, builder):
        if self.ID is not None:
            ID = builder.CreateString(self.ID)
        if self.NAME is not None:
            NAME = builder.CreateString(self.NAME)
        if self.GENC_CODE is not None:
            GENC_CODE = builder.CreateString(self.GENC_CODE)
        if self.ALPHA_2_CODE is not None:
            ALPHA_2_CODE = builder.CreateString(self.ALPHA_2_CODE)
        if self.ALPHA_3_CODE is not None:
            ALPHA_3_CODE = builder.CreateString(self.ALPHA_3_CODE)
        if self.STANAG_CODE is not None:
            STANAG_CODE = builder.CreateString(self.STANAG_CODE)
        if self.INTERNET_CCTLD is not None:
            INTERNET_CCTLD = builder.CreateString(self.INTERNET_CCTLD)
        if self.COMMENT is not None:
            COMMENT = builder.CreateString(self.COMMENT)
        CTRStart(builder)
        if self.ID is not None:
            CTRAddID(builder, ID)
        if self.NAME is not None:
            CTRAddNAME(builder, NAME)
        if self.GENC_CODE is not None:
            CTRAddGENC_CODE(builder, GENC_CODE)
        if self.ALPHA_2_CODE is not None:
            CTRAddALPHA_2_CODE(builder, ALPHA_2_CODE)
        if self.ALPHA_3_CODE is not None:
            CTRAddALPHA_3_CODE(builder, ALPHA_3_CODE)
        if self.STANAG_CODE is not None:
            CTRAddSTANAG_CODE(builder, STANAG_CODE)
        if self.INTERNET_CCTLD is not None:
            CTRAddINTERNET_CCTLD(builder, INTERNET_CCTLD)
        if self.COMMENT is not None:
            CTRAddCOMMENT(builder, COMMENT)
        CTR = CTREnd(builder)
        return CTR
