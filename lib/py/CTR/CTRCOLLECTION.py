# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CTRCOLLECTION(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CTRCOLLECTION()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCTRCOLLECTION(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CTRCOLLECTIONBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x43\x54\x52", size_prefixed=size_prefixed)

    # CTRCOLLECTION
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CTRCOLLECTION
    def RECORDS(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CTR import CTR
            obj = CTR()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CTRCOLLECTION
    def RECORDSLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CTRCOLLECTION
    def RECORDSIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def CTRCOLLECTIONStart(builder):
    builder.StartObject(1)

def Start(builder):
    CTRCOLLECTIONStart(builder)

def CTRCOLLECTIONAddRECORDS(builder, RECORDS):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(RECORDS), 0)

def AddRECORDS(builder, RECORDS):
    CTRCOLLECTIONAddRECORDS(builder, RECORDS)

def CTRCOLLECTIONStartRECORDSVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRECORDSVector(builder, numElems):
    return CTRCOLLECTIONStartRECORDSVector(builder, numElems)

def CTRCOLLECTIONEnd(builder):
    return builder.EndObject()

def End(builder):
    return CTRCOLLECTIONEnd(builder)

import CTR
try:
    from typing import List
except:
    pass

class CTRCOLLECTIONT(object):

    # CTRCOLLECTIONT
    def __init__(self):
        self.RECORDS = None  # type: List[CTR.CTRT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        CTRCOLLECTION = CTRCOLLECTION()
        CTRCOLLECTION.Init(buf, pos)
        return cls.InitFromObj(CTRCOLLECTION)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, CTRCOLLECTION):
        x = CTRCOLLECTIONT()
        x._UnPack(CTRCOLLECTION)
        return x

    # CTRCOLLECTIONT
    def _UnPack(self, CTRCOLLECTION):
        if CTRCOLLECTION is None:
            return
        if not CTRCOLLECTION.RECORDSIsNone():
            self.RECORDS = []
            for i in range(CTRCOLLECTION.RECORDSLength()):
                if CTRCOLLECTION.RECORDS(i) is None:
                    self.RECORDS.append(None)
                else:
                    cTR_ = CTR.CTRT.InitFromObj(CTRCOLLECTION.RECORDS(i))
                    self.RECORDS.append(cTR_)

    # CTRCOLLECTIONT
    def Pack(self, builder):
        if self.RECORDS is not None:
            RECORDSlist = []
            for i in range(len(self.RECORDS)):
                RECORDSlist.append(self.RECORDS[i].Pack(builder))
            CTRCOLLECTIONStartRECORDSVector(builder, len(self.RECORDS))
            for i in reversed(range(len(self.RECORDS))):
                builder.PrependUOffsetTRelative(RECORDSlist[i])
            RECORDS = builder.EndVector()
        CTRCOLLECTIONStart(builder)
        if self.RECORDS is not None:
            CTRCOLLECTIONAddRECORDS(builder, RECORDS)
        CTRCOLLECTION = CTRCOLLECTIONEnd(builder)
        return CTRCOLLECTION
