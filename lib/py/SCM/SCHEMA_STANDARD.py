# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Schema Standard Definition
class SCHEMA_STANDARD(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SCHEMA_STANDARD()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSCHEMA_STANDARD(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SCHEMA_STANDARDBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x53\x43\x4D", size_prefixed=size_prefixed)

    # SCHEMA_STANDARD
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier for the standard
    # SCHEMA_STANDARD
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # IDL
    # SCHEMA_STANDARD
    def Idl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # List Of File Paths
    # SCHEMA_STANDARD
    def Files(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SCHEMA_STANDARD
    def FilesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SCHEMA_STANDARD
    def FilesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def SCHEMA_STANDARDStart(builder): builder.StartObject(3)
def Start(builder):
    return SCHEMA_STANDARDStart(builder)
def SCHEMA_STANDARDAddKey(builder, key): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)
def AddKey(builder, key):
    return SCHEMA_STANDARDAddKey(builder, key)
def SCHEMA_STANDARDAddIdl(builder, idl): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idl), 0)
def AddIdl(builder, idl):
    return SCHEMA_STANDARDAddIdl(builder, idl)
def SCHEMA_STANDARDAddFiles(builder, files): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(files), 0)
def AddFiles(builder, files):
    return SCHEMA_STANDARDAddFiles(builder, files)
def SCHEMA_STANDARDStartFilesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartFilesVector(builder, numElems):
    return SCHEMA_STANDARDStartFilesVector(builder, numElems)
def SCHEMA_STANDARDEnd(builder): return builder.EndObject()
def End(builder):
    return SCHEMA_STANDARDEnd(builder)
try:
    from typing import List
except:
    pass

class SCHEMA_STANDARDT(object):

    # SCHEMA_STANDARDT
    def __init__(self):
        self.key = None  # type: str
        self.idl = None  # type: str
        self.files = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        SCHEMA_STANDARD = SCHEMA_STANDARD()
        SCHEMA_STANDARD.Init(buf, pos)
        return cls.InitFromObj(SCHEMA_STANDARD)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, SCHEMA_STANDARD):
        x = SCHEMA_STANDARDT()
        x._UnPack(SCHEMA_STANDARD)
        return x

    # SCHEMA_STANDARDT
    def _UnPack(self, SCHEMA_STANDARD):
        if SCHEMA_STANDARD is None:
            return
        self.key = SCHEMA_STANDARD.Key()
        self.idl = SCHEMA_STANDARD.Idl()
        if not SCHEMA_STANDARD.FilesIsNone():
            self.files = []
            for i in range(SCHEMA_STANDARD.FilesLength()):
                self.files.append(SCHEMA_STANDARD.Files(i))

    # SCHEMA_STANDARDT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.idl is not None:
            idl = builder.CreateString(self.idl)
        if self.files is not None:
            fileslist = []
            for i in range(len(self.files)):
                fileslist.append(builder.CreateString(self.files[i]))
            SCHEMA_STANDARDStartFilesVector(builder, len(self.files))
            for i in reversed(range(len(self.files))):
                builder.PrependUOffsetTRelative(fileslist[i])
            files = builder.EndVector()
        SCHEMA_STANDARDStart(builder)
        if self.key is not None:
            SCHEMA_STANDARDAddKey(builder, key)
        if self.idl is not None:
            SCHEMA_STANDARDAddIdl(builder, idl)
        if self.files is not None:
            SCHEMA_STANDARDAddFiles(builder, files)
        SCHEMA_STANDARD = SCHEMA_STANDARDEnd(builder)
        return SCHEMA_STANDARD
