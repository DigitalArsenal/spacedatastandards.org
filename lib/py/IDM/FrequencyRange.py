# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Frequency range with lower and upper limits
class FrequencyRange(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FrequencyRange()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFrequencyRange(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FrequencyRangeBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x49\x44\x4D", size_prefixed=size_prefixed)

    # FrequencyRange
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Lower frequency in MHz
    # FrequencyRange
    def LOWER(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Upper frequency in MHz
    # FrequencyRange
    def UPPER(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def FrequencyRangeStart(builder):
    builder.StartObject(2)

def Start(builder):
    FrequencyRangeStart(builder)

def FrequencyRangeAddLOWER(builder, LOWER):
    builder.PrependFloat64Slot(0, LOWER, 0.0)

def AddLOWER(builder, LOWER):
    FrequencyRangeAddLOWER(builder, LOWER)

def FrequencyRangeAddUPPER(builder, UPPER):
    builder.PrependFloat64Slot(1, UPPER, 0.0)

def AddUPPER(builder, UPPER):
    FrequencyRangeAddUPPER(builder, UPPER)

def FrequencyRangeEnd(builder):
    return builder.EndObject()

def End(builder):
    return FrequencyRangeEnd(builder)


class FrequencyRangeT(object):

    # FrequencyRangeT
    def __init__(self):
        self.LOWER = 0.0  # type: float
        self.UPPER = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        frequencyRange = FrequencyRange()
        frequencyRange.Init(buf, pos)
        return cls.InitFromObj(frequencyRange)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, frequencyRange):
        x = FrequencyRangeT()
        x._UnPack(frequencyRange)
        return x

    # FrequencyRangeT
    def _UnPack(self, frequencyRange):
        if frequencyRange is None:
            return
        self.LOWER = frequencyRange.LOWER()
        self.UPPER = frequencyRange.UPPER()

    # FrequencyRangeT
    def Pack(self, builder):
        FrequencyRangeStart(builder)
        FrequencyRangeAddLOWER(builder, self.LOWER)
        FrequencyRangeAddUPPER(builder, self.UPPER)
        frequencyRange = FrequencyRangeEnd(builder)
        return frequencyRange
