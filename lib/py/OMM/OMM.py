# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Orbit Mean Elements Message
class OMM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OMM()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOMM(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OMMBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x4F\x4D\x4D", size_prefixed=size_prefixed)

    # OMM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OMM Header
    # OMM
    def CCSDS_OMM_VERS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Creation Date
    # OMM
    def CREATION_DATE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originator
    # OMM
    def ORIGINATOR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OMM Metadata
    # Satellite Name(s)
    # OMM
    def OBJECT_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # International Designator (YYYY-NNNAAA)
    # OMM
    def OBJECT_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Origin of reference frame (EARTH, MARS, MOON, etc.)
    # OMM
    def CENTER_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the reference frame (TEME, EME2000, etc.)
    # OMM
    def REFERENCE_FRAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 2

    # REFERENCE_FRAME_EPOCH
    # OMM
    def REFERENCE_FRAME_EPOCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time system used for the orbit state and covariance matrix. (UTC)
    # OMM
    def TIME_SYSTEM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 11

    # Description of the Mean Element Theory. (SGP4,DSST,USM)
    # OMM
    def MEAN_ELEMENT_THEORY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Mean Keplerian Elements in the Specified Reference Frame
    # Plain-Text Comment
    # OMM
    def COMMENT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Epoch time, in ISO 8601 UTC format
    # OMM
    def EPOCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Semi-major axis in km or mean motion in rev/day
    # OMM
    def SEMI_MAJOR_AXIS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Mean motion
    # OMM
    def MEAN_MOTION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Eccentricity
    # OMM
    def ECCENTRICITY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Inclination
    # OMM
    def INCLINATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Right ascension of ascending node
    # OMM
    def RA_OF_ASC_NODE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Argument of pericenter
    # OMM
    def ARG_OF_PERICENTER(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Mean anomaly
    # OMM
    def MEAN_ANOMALY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Gravitational Coefficient (Gravitational Constant x Central Mass)
    # OMM
    def GM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spacecraft Parameters
    # S/C Mass
    # OMM
    def MASS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Solar Radiation Pressure Area (AR) m**2
    # OMM
    def SOLAR_RAD_AREA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Solar Radiation Pressure Coefficient (CR)
    # OMM
    def SOLAR_RAD_COEFF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Drag Area (AD) m**2
    # OMM
    def DRAG_AREA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Drag Coefficient (CD)
    # OMM
    def DRAG_COEFF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # TLE Related Parameters (This section is only required if MEAN_ELEMENT_THEORY=SGP/SGP4)
    # Default value = 0
    # OMM
    def EPHEMERIS_TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # Default value = U
    # OMM
    def CLASSIFICATION_TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NORAD Catalog Number (Satellite Number) an integer
    # OMM
    def NORAD_CAT_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Element set number for this satellite
    # OMM
    def ELEMENT_SET_NO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Revolution Number
    # OMM
    def REV_AT_EPOCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SGP/SGP4 drag-like coefficient (in units 1/[Earth radii])
    # OMM
    def BSTAR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # First Time Derivative of the Mean Motion
    # OMM
    def MEAN_MOTION_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Second Time Derivative of Mean Motion
    # OMM
    def MEAN_MOTION_DDOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Position/Velocity Covariance Matrix
    # Reference frame for the covariance matrix
    # OMM
    def COV_REFERENCE_FRAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 23

    # Covariance matrix [1,1] km**2
    # OMM
    def CX_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [2,1] km**2
    # OMM
    def CY_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [2,2] km**2
    # OMM
    def CY_Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [3,1] km**2
    # OMM
    def CZ_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [3,2] km**2
    # OMM
    def CZ_Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [3,3] km**2
    # OMM
    def CZ_Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [4,1] km**2/s
    # OMM
    def CX_DOT_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [4,2] km**2/s
    # OMM
    def CX_DOT_Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [4,3] km**2/s
    # OMM
    def CX_DOT_Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [4,4] km**2/s**2
    # OMM
    def CX_DOT_X_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [5,1] km**2/s
    # OMM
    def CY_DOT_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [5,2] km**2/s
    # OMM
    def CY_DOT_Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [5,3] km**2/s
    # OMM
    def CY_DOT_Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [5,4] km**2/s**2
    # OMM
    def CY_DOT_X_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [5,5] km**2/s**2
    # OMM
    def CY_DOT_Y_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [6,1] km**2/s
    # OMM
    def CZ_DOT_X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [6,2] km**2/s
    # OMM
    def CZ_DOT_Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [6,3] km**2/s
    # OMM
    def CZ_DOT_Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [6,4] km**2/s**2
    # OMM
    def CZ_DOT_X_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [6,5] km**2/s**2
    # OMM
    def CZ_DOT_Y_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix [6,6] km**2/s**2
    # OMM
    def CZ_DOT_Z_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # User defined parameter, must be described in an ICD
    # OMM
    def USER_DEFINED_BIP_0044_TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # User defined parameter, must be described in an ICD
    # OMM
    def USER_DEFINED_OBJECT_DESIGNATOR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # User defined parameter, must be described in an ICD
    # OMM
    def USER_DEFINED_EARTH_MODEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # User defined parameter, must be described in an ICD
    # OMM
    def USER_DEFINED_EPOCH_TIMESTAMP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # User defined parameter, must be described in an ICD
    # OMM
    def USER_DEFINED_MICROSECONDS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def OMMStart(builder):
    builder.StartObject(60)

def Start(builder):
    OMMStart(builder)

def OMMAddCCSDS_OMM_VERS(builder, CCSDS_OMM_VERS):
    builder.PrependFloat64Slot(0, CCSDS_OMM_VERS, 0.0)

def AddCCSDS_OMM_VERS(builder, CCSDS_OMM_VERS):
    OMMAddCCSDS_OMM_VERS(builder, CCSDS_OMM_VERS)

def OMMAddCREATION_DATE(builder, CREATION_DATE):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(CREATION_DATE), 0)

def AddCREATION_DATE(builder, CREATION_DATE):
    OMMAddCREATION_DATE(builder, CREATION_DATE)

def OMMAddORIGINATOR(builder, ORIGINATOR):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ORIGINATOR), 0)

def AddORIGINATOR(builder, ORIGINATOR):
    OMMAddORIGINATOR(builder, ORIGINATOR)

def OMMAddOBJECT_NAME(builder, OBJECT_NAME):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(OBJECT_NAME), 0)

def AddOBJECT_NAME(builder, OBJECT_NAME):
    OMMAddOBJECT_NAME(builder, OBJECT_NAME)

def OMMAddOBJECT_ID(builder, OBJECT_ID):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(OBJECT_ID), 0)

def AddOBJECT_ID(builder, OBJECT_ID):
    OMMAddOBJECT_ID(builder, OBJECT_ID)

def OMMAddCENTER_NAME(builder, CENTER_NAME):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(CENTER_NAME), 0)

def AddCENTER_NAME(builder, CENTER_NAME):
    OMMAddCENTER_NAME(builder, CENTER_NAME)

def OMMAddREFERENCE_FRAME(builder, REFERENCE_FRAME):
    builder.PrependInt8Slot(6, REFERENCE_FRAME, 2)

def AddREFERENCE_FRAME(builder, REFERENCE_FRAME):
    OMMAddREFERENCE_FRAME(builder, REFERENCE_FRAME)

def OMMAddREFERENCE_FRAME_EPOCH(builder, REFERENCE_FRAME_EPOCH):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(REFERENCE_FRAME_EPOCH), 0)

def AddREFERENCE_FRAME_EPOCH(builder, REFERENCE_FRAME_EPOCH):
    OMMAddREFERENCE_FRAME_EPOCH(builder, REFERENCE_FRAME_EPOCH)

def OMMAddTIME_SYSTEM(builder, TIME_SYSTEM):
    builder.PrependInt8Slot(8, TIME_SYSTEM, 11)

def AddTIME_SYSTEM(builder, TIME_SYSTEM):
    OMMAddTIME_SYSTEM(builder, TIME_SYSTEM)

def OMMAddMEAN_ELEMENT_THEORY(builder, MEAN_ELEMENT_THEORY):
    builder.PrependInt8Slot(9, MEAN_ELEMENT_THEORY, 0)

def AddMEAN_ELEMENT_THEORY(builder, MEAN_ELEMENT_THEORY):
    OMMAddMEAN_ELEMENT_THEORY(builder, MEAN_ELEMENT_THEORY)

def OMMAddCOMMENT(builder, COMMENT):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(COMMENT), 0)

def AddCOMMENT(builder, COMMENT):
    OMMAddCOMMENT(builder, COMMENT)

def OMMAddEPOCH(builder, EPOCH):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(EPOCH), 0)

def AddEPOCH(builder, EPOCH):
    OMMAddEPOCH(builder, EPOCH)

def OMMAddSEMI_MAJOR_AXIS(builder, SEMI_MAJOR_AXIS):
    builder.PrependFloat64Slot(12, SEMI_MAJOR_AXIS, 0.0)

def AddSEMI_MAJOR_AXIS(builder, SEMI_MAJOR_AXIS):
    OMMAddSEMI_MAJOR_AXIS(builder, SEMI_MAJOR_AXIS)

def OMMAddMEAN_MOTION(builder, MEAN_MOTION):
    builder.PrependFloat64Slot(13, MEAN_MOTION, 0.0)

def AddMEAN_MOTION(builder, MEAN_MOTION):
    OMMAddMEAN_MOTION(builder, MEAN_MOTION)

def OMMAddECCENTRICITY(builder, ECCENTRICITY):
    builder.PrependFloat64Slot(14, ECCENTRICITY, 0.0)

def AddECCENTRICITY(builder, ECCENTRICITY):
    OMMAddECCENTRICITY(builder, ECCENTRICITY)

def OMMAddINCLINATION(builder, INCLINATION):
    builder.PrependFloat64Slot(15, INCLINATION, 0.0)

def AddINCLINATION(builder, INCLINATION):
    OMMAddINCLINATION(builder, INCLINATION)

def OMMAddRA_OF_ASC_NODE(builder, RA_OF_ASC_NODE):
    builder.PrependFloat64Slot(16, RA_OF_ASC_NODE, 0.0)

def AddRA_OF_ASC_NODE(builder, RA_OF_ASC_NODE):
    OMMAddRA_OF_ASC_NODE(builder, RA_OF_ASC_NODE)

def OMMAddARG_OF_PERICENTER(builder, ARG_OF_PERICENTER):
    builder.PrependFloat64Slot(17, ARG_OF_PERICENTER, 0.0)

def AddARG_OF_PERICENTER(builder, ARG_OF_PERICENTER):
    OMMAddARG_OF_PERICENTER(builder, ARG_OF_PERICENTER)

def OMMAddMEAN_ANOMALY(builder, MEAN_ANOMALY):
    builder.PrependFloat64Slot(18, MEAN_ANOMALY, 0.0)

def AddMEAN_ANOMALY(builder, MEAN_ANOMALY):
    OMMAddMEAN_ANOMALY(builder, MEAN_ANOMALY)

def OMMAddGM(builder, GM):
    builder.PrependFloat64Slot(19, GM, 0.0)

def AddGM(builder, GM):
    OMMAddGM(builder, GM)

def OMMAddMASS(builder, MASS):
    builder.PrependFloat64Slot(20, MASS, 0.0)

def AddMASS(builder, MASS):
    OMMAddMASS(builder, MASS)

def OMMAddSOLAR_RAD_AREA(builder, SOLAR_RAD_AREA):
    builder.PrependFloat64Slot(21, SOLAR_RAD_AREA, 0.0)

def AddSOLAR_RAD_AREA(builder, SOLAR_RAD_AREA):
    OMMAddSOLAR_RAD_AREA(builder, SOLAR_RAD_AREA)

def OMMAddSOLAR_RAD_COEFF(builder, SOLAR_RAD_COEFF):
    builder.PrependFloat64Slot(22, SOLAR_RAD_COEFF, 0.0)

def AddSOLAR_RAD_COEFF(builder, SOLAR_RAD_COEFF):
    OMMAddSOLAR_RAD_COEFF(builder, SOLAR_RAD_COEFF)

def OMMAddDRAG_AREA(builder, DRAG_AREA):
    builder.PrependFloat64Slot(23, DRAG_AREA, 0.0)

def AddDRAG_AREA(builder, DRAG_AREA):
    OMMAddDRAG_AREA(builder, DRAG_AREA)

def OMMAddDRAG_COEFF(builder, DRAG_COEFF):
    builder.PrependFloat64Slot(24, DRAG_COEFF, 0.0)

def AddDRAG_COEFF(builder, DRAG_COEFF):
    OMMAddDRAG_COEFF(builder, DRAG_COEFF)

def OMMAddEPHEMERIS_TYPE(builder, EPHEMERIS_TYPE):
    builder.PrependInt8Slot(25, EPHEMERIS_TYPE, 1)

def AddEPHEMERIS_TYPE(builder, EPHEMERIS_TYPE):
    OMMAddEPHEMERIS_TYPE(builder, EPHEMERIS_TYPE)

def OMMAddCLASSIFICATION_TYPE(builder, CLASSIFICATION_TYPE):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(CLASSIFICATION_TYPE), 0)

def AddCLASSIFICATION_TYPE(builder, CLASSIFICATION_TYPE):
    OMMAddCLASSIFICATION_TYPE(builder, CLASSIFICATION_TYPE)

def OMMAddNORAD_CAT_ID(builder, NORAD_CAT_ID):
    builder.PrependUint32Slot(27, NORAD_CAT_ID, 0)

def AddNORAD_CAT_ID(builder, NORAD_CAT_ID):
    OMMAddNORAD_CAT_ID(builder, NORAD_CAT_ID)

def OMMAddELEMENT_SET_NO(builder, ELEMENT_SET_NO):
    builder.PrependUint32Slot(28, ELEMENT_SET_NO, 0)

def AddELEMENT_SET_NO(builder, ELEMENT_SET_NO):
    OMMAddELEMENT_SET_NO(builder, ELEMENT_SET_NO)

def OMMAddREV_AT_EPOCH(builder, REV_AT_EPOCH):
    builder.PrependFloat64Slot(29, REV_AT_EPOCH, 0.0)

def AddREV_AT_EPOCH(builder, REV_AT_EPOCH):
    OMMAddREV_AT_EPOCH(builder, REV_AT_EPOCH)

def OMMAddBSTAR(builder, BSTAR):
    builder.PrependFloat64Slot(30, BSTAR, 0.0)

def AddBSTAR(builder, BSTAR):
    OMMAddBSTAR(builder, BSTAR)

def OMMAddMEAN_MOTION_DOT(builder, MEAN_MOTION_DOT):
    builder.PrependFloat64Slot(31, MEAN_MOTION_DOT, 0.0)

def AddMEAN_MOTION_DOT(builder, MEAN_MOTION_DOT):
    OMMAddMEAN_MOTION_DOT(builder, MEAN_MOTION_DOT)

def OMMAddMEAN_MOTION_DDOT(builder, MEAN_MOTION_DDOT):
    builder.PrependFloat64Slot(32, MEAN_MOTION_DDOT, 0.0)

def AddMEAN_MOTION_DDOT(builder, MEAN_MOTION_DDOT):
    OMMAddMEAN_MOTION_DDOT(builder, MEAN_MOTION_DDOT)

def OMMAddCOV_REFERENCE_FRAME(builder, COV_REFERENCE_FRAME):
    builder.PrependInt8Slot(33, COV_REFERENCE_FRAME, 23)

def AddCOV_REFERENCE_FRAME(builder, COV_REFERENCE_FRAME):
    OMMAddCOV_REFERENCE_FRAME(builder, COV_REFERENCE_FRAME)

def OMMAddCX_X(builder, CX_X):
    builder.PrependFloat64Slot(34, CX_X, 0.0)

def AddCX_X(builder, CX_X):
    OMMAddCX_X(builder, CX_X)

def OMMAddCY_X(builder, CY_X):
    builder.PrependFloat64Slot(35, CY_X, 0.0)

def AddCY_X(builder, CY_X):
    OMMAddCY_X(builder, CY_X)

def OMMAddCY_Y(builder, CY_Y):
    builder.PrependFloat64Slot(36, CY_Y, 0.0)

def AddCY_Y(builder, CY_Y):
    OMMAddCY_Y(builder, CY_Y)

def OMMAddCZ_X(builder, CZ_X):
    builder.PrependFloat64Slot(37, CZ_X, 0.0)

def AddCZ_X(builder, CZ_X):
    OMMAddCZ_X(builder, CZ_X)

def OMMAddCZ_Y(builder, CZ_Y):
    builder.PrependFloat64Slot(38, CZ_Y, 0.0)

def AddCZ_Y(builder, CZ_Y):
    OMMAddCZ_Y(builder, CZ_Y)

def OMMAddCZ_Z(builder, CZ_Z):
    builder.PrependFloat64Slot(39, CZ_Z, 0.0)

def AddCZ_Z(builder, CZ_Z):
    OMMAddCZ_Z(builder, CZ_Z)

def OMMAddCX_DOT_X(builder, CX_DOT_X):
    builder.PrependFloat64Slot(40, CX_DOT_X, 0.0)

def AddCX_DOT_X(builder, CX_DOT_X):
    OMMAddCX_DOT_X(builder, CX_DOT_X)

def OMMAddCX_DOT_Y(builder, CX_DOT_Y):
    builder.PrependFloat64Slot(41, CX_DOT_Y, 0.0)

def AddCX_DOT_Y(builder, CX_DOT_Y):
    OMMAddCX_DOT_Y(builder, CX_DOT_Y)

def OMMAddCX_DOT_Z(builder, CX_DOT_Z):
    builder.PrependFloat64Slot(42, CX_DOT_Z, 0.0)

def AddCX_DOT_Z(builder, CX_DOT_Z):
    OMMAddCX_DOT_Z(builder, CX_DOT_Z)

def OMMAddCX_DOT_X_DOT(builder, CX_DOT_X_DOT):
    builder.PrependFloat64Slot(43, CX_DOT_X_DOT, 0.0)

def AddCX_DOT_X_DOT(builder, CX_DOT_X_DOT):
    OMMAddCX_DOT_X_DOT(builder, CX_DOT_X_DOT)

def OMMAddCY_DOT_X(builder, CY_DOT_X):
    builder.PrependFloat64Slot(44, CY_DOT_X, 0.0)

def AddCY_DOT_X(builder, CY_DOT_X):
    OMMAddCY_DOT_X(builder, CY_DOT_X)

def OMMAddCY_DOT_Y(builder, CY_DOT_Y):
    builder.PrependFloat64Slot(45, CY_DOT_Y, 0.0)

def AddCY_DOT_Y(builder, CY_DOT_Y):
    OMMAddCY_DOT_Y(builder, CY_DOT_Y)

def OMMAddCY_DOT_Z(builder, CY_DOT_Z):
    builder.PrependFloat64Slot(46, CY_DOT_Z, 0.0)

def AddCY_DOT_Z(builder, CY_DOT_Z):
    OMMAddCY_DOT_Z(builder, CY_DOT_Z)

def OMMAddCY_DOT_X_DOT(builder, CY_DOT_X_DOT):
    builder.PrependFloat64Slot(47, CY_DOT_X_DOT, 0.0)

def AddCY_DOT_X_DOT(builder, CY_DOT_X_DOT):
    OMMAddCY_DOT_X_DOT(builder, CY_DOT_X_DOT)

def OMMAddCY_DOT_Y_DOT(builder, CY_DOT_Y_DOT):
    builder.PrependFloat64Slot(48, CY_DOT_Y_DOT, 0.0)

def AddCY_DOT_Y_DOT(builder, CY_DOT_Y_DOT):
    OMMAddCY_DOT_Y_DOT(builder, CY_DOT_Y_DOT)

def OMMAddCZ_DOT_X(builder, CZ_DOT_X):
    builder.PrependFloat64Slot(49, CZ_DOT_X, 0.0)

def AddCZ_DOT_X(builder, CZ_DOT_X):
    OMMAddCZ_DOT_X(builder, CZ_DOT_X)

def OMMAddCZ_DOT_Y(builder, CZ_DOT_Y):
    builder.PrependFloat64Slot(50, CZ_DOT_Y, 0.0)

def AddCZ_DOT_Y(builder, CZ_DOT_Y):
    OMMAddCZ_DOT_Y(builder, CZ_DOT_Y)

def OMMAddCZ_DOT_Z(builder, CZ_DOT_Z):
    builder.PrependFloat64Slot(51, CZ_DOT_Z, 0.0)

def AddCZ_DOT_Z(builder, CZ_DOT_Z):
    OMMAddCZ_DOT_Z(builder, CZ_DOT_Z)

def OMMAddCZ_DOT_X_DOT(builder, CZ_DOT_X_DOT):
    builder.PrependFloat64Slot(52, CZ_DOT_X_DOT, 0.0)

def AddCZ_DOT_X_DOT(builder, CZ_DOT_X_DOT):
    OMMAddCZ_DOT_X_DOT(builder, CZ_DOT_X_DOT)

def OMMAddCZ_DOT_Y_DOT(builder, CZ_DOT_Y_DOT):
    builder.PrependFloat64Slot(53, CZ_DOT_Y_DOT, 0.0)

def AddCZ_DOT_Y_DOT(builder, CZ_DOT_Y_DOT):
    OMMAddCZ_DOT_Y_DOT(builder, CZ_DOT_Y_DOT)

def OMMAddCZ_DOT_Z_DOT(builder, CZ_DOT_Z_DOT):
    builder.PrependFloat64Slot(54, CZ_DOT_Z_DOT, 0.0)

def AddCZ_DOT_Z_DOT(builder, CZ_DOT_Z_DOT):
    OMMAddCZ_DOT_Z_DOT(builder, CZ_DOT_Z_DOT)

def OMMAddUSER_DEFINED_BIP_0044_TYPE(builder, USER_DEFINED_BIP_0044_TYPE):
    builder.PrependUint32Slot(55, USER_DEFINED_BIP_0044_TYPE, 0)

def AddUSER_DEFINED_BIP_0044_TYPE(builder, USER_DEFINED_BIP_0044_TYPE):
    OMMAddUSER_DEFINED_BIP_0044_TYPE(builder, USER_DEFINED_BIP_0044_TYPE)

def OMMAddUSER_DEFINED_OBJECT_DESIGNATOR(builder, USER_DEFINED_OBJECT_DESIGNATOR):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(USER_DEFINED_OBJECT_DESIGNATOR), 0)

def AddUSER_DEFINED_OBJECT_DESIGNATOR(builder, USER_DEFINED_OBJECT_DESIGNATOR):
    OMMAddUSER_DEFINED_OBJECT_DESIGNATOR(builder, USER_DEFINED_OBJECT_DESIGNATOR)

def OMMAddUSER_DEFINED_EARTH_MODEL(builder, USER_DEFINED_EARTH_MODEL):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(USER_DEFINED_EARTH_MODEL), 0)

def AddUSER_DEFINED_EARTH_MODEL(builder, USER_DEFINED_EARTH_MODEL):
    OMMAddUSER_DEFINED_EARTH_MODEL(builder, USER_DEFINED_EARTH_MODEL)

def OMMAddUSER_DEFINED_EPOCH_TIMESTAMP(builder, USER_DEFINED_EPOCH_TIMESTAMP):
    builder.PrependFloat64Slot(58, USER_DEFINED_EPOCH_TIMESTAMP, 0.0)

def AddUSER_DEFINED_EPOCH_TIMESTAMP(builder, USER_DEFINED_EPOCH_TIMESTAMP):
    OMMAddUSER_DEFINED_EPOCH_TIMESTAMP(builder, USER_DEFINED_EPOCH_TIMESTAMP)

def OMMAddUSER_DEFINED_MICROSECONDS(builder, USER_DEFINED_MICROSECONDS):
    builder.PrependFloat64Slot(59, USER_DEFINED_MICROSECONDS, 0.0)

def AddUSER_DEFINED_MICROSECONDS(builder, USER_DEFINED_MICROSECONDS):
    OMMAddUSER_DEFINED_MICROSECONDS(builder, USER_DEFINED_MICROSECONDS)

def OMMEnd(builder):
    return builder.EndObject()

def End(builder):
    return OMMEnd(builder)


class OMMT(object):

    # OMMT
    def __init__(self):
        self.CCSDS_OMM_VERS = 0.0  # type: float
        self.CREATION_DATE = None  # type: str
        self.ORIGINATOR = None  # type: str
        self.OBJECT_NAME = None  # type: str
        self.OBJECT_ID = None  # type: str
        self.CENTER_NAME = None  # type: str
        self.REFERENCE_FRAME = 2  # type: int
        self.REFERENCE_FRAME_EPOCH = None  # type: str
        self.TIME_SYSTEM = 11  # type: int
        self.MEAN_ELEMENT_THEORY = 0  # type: int
        self.COMMENT = None  # type: str
        self.EPOCH = None  # type: str
        self.SEMI_MAJOR_AXIS = 0.0  # type: float
        self.MEAN_MOTION = 0.0  # type: float
        self.ECCENTRICITY = 0.0  # type: float
        self.INCLINATION = 0.0  # type: float
        self.RA_OF_ASC_NODE = 0.0  # type: float
        self.ARG_OF_PERICENTER = 0.0  # type: float
        self.MEAN_ANOMALY = 0.0  # type: float
        self.GM = 0.0  # type: float
        self.MASS = 0.0  # type: float
        self.SOLAR_RAD_AREA = 0.0  # type: float
        self.SOLAR_RAD_COEFF = 0.0  # type: float
        self.DRAG_AREA = 0.0  # type: float
        self.DRAG_COEFF = 0.0  # type: float
        self.EPHEMERIS_TYPE = 1  # type: int
        self.CLASSIFICATION_TYPE = None  # type: str
        self.NORAD_CAT_ID = 0  # type: int
        self.ELEMENT_SET_NO = 0  # type: int
        self.REV_AT_EPOCH = 0.0  # type: float
        self.BSTAR = 0.0  # type: float
        self.MEAN_MOTION_DOT = 0.0  # type: float
        self.MEAN_MOTION_DDOT = 0.0  # type: float
        self.COV_REFERENCE_FRAME = 23  # type: int
        self.CX_X = 0.0  # type: float
        self.CY_X = 0.0  # type: float
        self.CY_Y = 0.0  # type: float
        self.CZ_X = 0.0  # type: float
        self.CZ_Y = 0.0  # type: float
        self.CZ_Z = 0.0  # type: float
        self.CX_DOT_X = 0.0  # type: float
        self.CX_DOT_Y = 0.0  # type: float
        self.CX_DOT_Z = 0.0  # type: float
        self.CX_DOT_X_DOT = 0.0  # type: float
        self.CY_DOT_X = 0.0  # type: float
        self.CY_DOT_Y = 0.0  # type: float
        self.CY_DOT_Z = 0.0  # type: float
        self.CY_DOT_X_DOT = 0.0  # type: float
        self.CY_DOT_Y_DOT = 0.0  # type: float
        self.CZ_DOT_X = 0.0  # type: float
        self.CZ_DOT_Y = 0.0  # type: float
        self.CZ_DOT_Z = 0.0  # type: float
        self.CZ_DOT_X_DOT = 0.0  # type: float
        self.CZ_DOT_Y_DOT = 0.0  # type: float
        self.CZ_DOT_Z_DOT = 0.0  # type: float
        self.USER_DEFINED_BIP_0044_TYPE = 0  # type: int
        self.USER_DEFINED_OBJECT_DESIGNATOR = None  # type: str
        self.USER_DEFINED_EARTH_MODEL = None  # type: str
        self.USER_DEFINED_EPOCH_TIMESTAMP = 0.0  # type: float
        self.USER_DEFINED_MICROSECONDS = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        OMM = OMM()
        OMM.Init(buf, pos)
        return cls.InitFromObj(OMM)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, OMM):
        x = OMMT()
        x._UnPack(OMM)
        return x

    # OMMT
    def _UnPack(self, OMM):
        if OMM is None:
            return
        self.CCSDS_OMM_VERS = OMM.CCSDS_OMM_VERS()
        self.CREATION_DATE = OMM.CREATION_DATE()
        self.ORIGINATOR = OMM.ORIGINATOR()
        self.OBJECT_NAME = OMM.OBJECT_NAME()
        self.OBJECT_ID = OMM.OBJECT_ID()
        self.CENTER_NAME = OMM.CENTER_NAME()
        self.REFERENCE_FRAME = OMM.REFERENCE_FRAME()
        self.REFERENCE_FRAME_EPOCH = OMM.REFERENCE_FRAME_EPOCH()
        self.TIME_SYSTEM = OMM.TIME_SYSTEM()
        self.MEAN_ELEMENT_THEORY = OMM.MEAN_ELEMENT_THEORY()
        self.COMMENT = OMM.COMMENT()
        self.EPOCH = OMM.EPOCH()
        self.SEMI_MAJOR_AXIS = OMM.SEMI_MAJOR_AXIS()
        self.MEAN_MOTION = OMM.MEAN_MOTION()
        self.ECCENTRICITY = OMM.ECCENTRICITY()
        self.INCLINATION = OMM.INCLINATION()
        self.RA_OF_ASC_NODE = OMM.RA_OF_ASC_NODE()
        self.ARG_OF_PERICENTER = OMM.ARG_OF_PERICENTER()
        self.MEAN_ANOMALY = OMM.MEAN_ANOMALY()
        self.GM = OMM.GM()
        self.MASS = OMM.MASS()
        self.SOLAR_RAD_AREA = OMM.SOLAR_RAD_AREA()
        self.SOLAR_RAD_COEFF = OMM.SOLAR_RAD_COEFF()
        self.DRAG_AREA = OMM.DRAG_AREA()
        self.DRAG_COEFF = OMM.DRAG_COEFF()
        self.EPHEMERIS_TYPE = OMM.EPHEMERIS_TYPE()
        self.CLASSIFICATION_TYPE = OMM.CLASSIFICATION_TYPE()
        self.NORAD_CAT_ID = OMM.NORAD_CAT_ID()
        self.ELEMENT_SET_NO = OMM.ELEMENT_SET_NO()
        self.REV_AT_EPOCH = OMM.REV_AT_EPOCH()
        self.BSTAR = OMM.BSTAR()
        self.MEAN_MOTION_DOT = OMM.MEAN_MOTION_DOT()
        self.MEAN_MOTION_DDOT = OMM.MEAN_MOTION_DDOT()
        self.COV_REFERENCE_FRAME = OMM.COV_REFERENCE_FRAME()
        self.CX_X = OMM.CX_X()
        self.CY_X = OMM.CY_X()
        self.CY_Y = OMM.CY_Y()
        self.CZ_X = OMM.CZ_X()
        self.CZ_Y = OMM.CZ_Y()
        self.CZ_Z = OMM.CZ_Z()
        self.CX_DOT_X = OMM.CX_DOT_X()
        self.CX_DOT_Y = OMM.CX_DOT_Y()
        self.CX_DOT_Z = OMM.CX_DOT_Z()
        self.CX_DOT_X_DOT = OMM.CX_DOT_X_DOT()
        self.CY_DOT_X = OMM.CY_DOT_X()
        self.CY_DOT_Y = OMM.CY_DOT_Y()
        self.CY_DOT_Z = OMM.CY_DOT_Z()
        self.CY_DOT_X_DOT = OMM.CY_DOT_X_DOT()
        self.CY_DOT_Y_DOT = OMM.CY_DOT_Y_DOT()
        self.CZ_DOT_X = OMM.CZ_DOT_X()
        self.CZ_DOT_Y = OMM.CZ_DOT_Y()
        self.CZ_DOT_Z = OMM.CZ_DOT_Z()
        self.CZ_DOT_X_DOT = OMM.CZ_DOT_X_DOT()
        self.CZ_DOT_Y_DOT = OMM.CZ_DOT_Y_DOT()
        self.CZ_DOT_Z_DOT = OMM.CZ_DOT_Z_DOT()
        self.USER_DEFINED_BIP_0044_TYPE = OMM.USER_DEFINED_BIP_0044_TYPE()
        self.USER_DEFINED_OBJECT_DESIGNATOR = OMM.USER_DEFINED_OBJECT_DESIGNATOR()
        self.USER_DEFINED_EARTH_MODEL = OMM.USER_DEFINED_EARTH_MODEL()
        self.USER_DEFINED_EPOCH_TIMESTAMP = OMM.USER_DEFINED_EPOCH_TIMESTAMP()
        self.USER_DEFINED_MICROSECONDS = OMM.USER_DEFINED_MICROSECONDS()

    # OMMT
    def Pack(self, builder):
        if self.CREATION_DATE is not None:
            CREATION_DATE = builder.CreateString(self.CREATION_DATE)
        if self.ORIGINATOR is not None:
            ORIGINATOR = builder.CreateString(self.ORIGINATOR)
        if self.OBJECT_NAME is not None:
            OBJECT_NAME = builder.CreateString(self.OBJECT_NAME)
        if self.OBJECT_ID is not None:
            OBJECT_ID = builder.CreateString(self.OBJECT_ID)
        if self.CENTER_NAME is not None:
            CENTER_NAME = builder.CreateString(self.CENTER_NAME)
        if self.REFERENCE_FRAME_EPOCH is not None:
            REFERENCE_FRAME_EPOCH = builder.CreateString(self.REFERENCE_FRAME_EPOCH)
        if self.COMMENT is not None:
            COMMENT = builder.CreateString(self.COMMENT)
        if self.EPOCH is not None:
            EPOCH = builder.CreateString(self.EPOCH)
        if self.CLASSIFICATION_TYPE is not None:
            CLASSIFICATION_TYPE = builder.CreateString(self.CLASSIFICATION_TYPE)
        if self.USER_DEFINED_OBJECT_DESIGNATOR is not None:
            USER_DEFINED_OBJECT_DESIGNATOR = builder.CreateString(self.USER_DEFINED_OBJECT_DESIGNATOR)
        if self.USER_DEFINED_EARTH_MODEL is not None:
            USER_DEFINED_EARTH_MODEL = builder.CreateString(self.USER_DEFINED_EARTH_MODEL)
        OMMStart(builder)
        OMMAddCCSDS_OMM_VERS(builder, self.CCSDS_OMM_VERS)
        if self.CREATION_DATE is not None:
            OMMAddCREATION_DATE(builder, CREATION_DATE)
        if self.ORIGINATOR is not None:
            OMMAddORIGINATOR(builder, ORIGINATOR)
        if self.OBJECT_NAME is not None:
            OMMAddOBJECT_NAME(builder, OBJECT_NAME)
        if self.OBJECT_ID is not None:
            OMMAddOBJECT_ID(builder, OBJECT_ID)
        if self.CENTER_NAME is not None:
            OMMAddCENTER_NAME(builder, CENTER_NAME)
        OMMAddREFERENCE_FRAME(builder, self.REFERENCE_FRAME)
        if self.REFERENCE_FRAME_EPOCH is not None:
            OMMAddREFERENCE_FRAME_EPOCH(builder, REFERENCE_FRAME_EPOCH)
        OMMAddTIME_SYSTEM(builder, self.TIME_SYSTEM)
        OMMAddMEAN_ELEMENT_THEORY(builder, self.MEAN_ELEMENT_THEORY)
        if self.COMMENT is not None:
            OMMAddCOMMENT(builder, COMMENT)
        if self.EPOCH is not None:
            OMMAddEPOCH(builder, EPOCH)
        OMMAddSEMI_MAJOR_AXIS(builder, self.SEMI_MAJOR_AXIS)
        OMMAddMEAN_MOTION(builder, self.MEAN_MOTION)
        OMMAddECCENTRICITY(builder, self.ECCENTRICITY)
        OMMAddINCLINATION(builder, self.INCLINATION)
        OMMAddRA_OF_ASC_NODE(builder, self.RA_OF_ASC_NODE)
        OMMAddARG_OF_PERICENTER(builder, self.ARG_OF_PERICENTER)
        OMMAddMEAN_ANOMALY(builder, self.MEAN_ANOMALY)
        OMMAddGM(builder, self.GM)
        OMMAddMASS(builder, self.MASS)
        OMMAddSOLAR_RAD_AREA(builder, self.SOLAR_RAD_AREA)
        OMMAddSOLAR_RAD_COEFF(builder, self.SOLAR_RAD_COEFF)
        OMMAddDRAG_AREA(builder, self.DRAG_AREA)
        OMMAddDRAG_COEFF(builder, self.DRAG_COEFF)
        OMMAddEPHEMERIS_TYPE(builder, self.EPHEMERIS_TYPE)
        if self.CLASSIFICATION_TYPE is not None:
            OMMAddCLASSIFICATION_TYPE(builder, CLASSIFICATION_TYPE)
        OMMAddNORAD_CAT_ID(builder, self.NORAD_CAT_ID)
        OMMAddELEMENT_SET_NO(builder, self.ELEMENT_SET_NO)
        OMMAddREV_AT_EPOCH(builder, self.REV_AT_EPOCH)
        OMMAddBSTAR(builder, self.BSTAR)
        OMMAddMEAN_MOTION_DOT(builder, self.MEAN_MOTION_DOT)
        OMMAddMEAN_MOTION_DDOT(builder, self.MEAN_MOTION_DDOT)
        OMMAddCOV_REFERENCE_FRAME(builder, self.COV_REFERENCE_FRAME)
        OMMAddCX_X(builder, self.CX_X)
        OMMAddCY_X(builder, self.CY_X)
        OMMAddCY_Y(builder, self.CY_Y)
        OMMAddCZ_X(builder, self.CZ_X)
        OMMAddCZ_Y(builder, self.CZ_Y)
        OMMAddCZ_Z(builder, self.CZ_Z)
        OMMAddCX_DOT_X(builder, self.CX_DOT_X)
        OMMAddCX_DOT_Y(builder, self.CX_DOT_Y)
        OMMAddCX_DOT_Z(builder, self.CX_DOT_Z)
        OMMAddCX_DOT_X_DOT(builder, self.CX_DOT_X_DOT)
        OMMAddCY_DOT_X(builder, self.CY_DOT_X)
        OMMAddCY_DOT_Y(builder, self.CY_DOT_Y)
        OMMAddCY_DOT_Z(builder, self.CY_DOT_Z)
        OMMAddCY_DOT_X_DOT(builder, self.CY_DOT_X_DOT)
        OMMAddCY_DOT_Y_DOT(builder, self.CY_DOT_Y_DOT)
        OMMAddCZ_DOT_X(builder, self.CZ_DOT_X)
        OMMAddCZ_DOT_Y(builder, self.CZ_DOT_Y)
        OMMAddCZ_DOT_Z(builder, self.CZ_DOT_Z)
        OMMAddCZ_DOT_X_DOT(builder, self.CZ_DOT_X_DOT)
        OMMAddCZ_DOT_Y_DOT(builder, self.CZ_DOT_Y_DOT)
        OMMAddCZ_DOT_Z_DOT(builder, self.CZ_DOT_Z_DOT)
        OMMAddUSER_DEFINED_BIP_0044_TYPE(builder, self.USER_DEFINED_BIP_0044_TYPE)
        if self.USER_DEFINED_OBJECT_DESIGNATOR is not None:
            OMMAddUSER_DEFINED_OBJECT_DESIGNATOR(builder, USER_DEFINED_OBJECT_DESIGNATOR)
        if self.USER_DEFINED_EARTH_MODEL is not None:
            OMMAddUSER_DEFINED_EARTH_MODEL(builder, USER_DEFINED_EARTH_MODEL)
        OMMAddUSER_DEFINED_EPOCH_TIMESTAMP(builder, self.USER_DEFINED_EPOCH_TIMESTAMP)
        OMMAddUSER_DEFINED_MICROSECONDS(builder, self.USER_DEFINED_MICROSECONDS)
        OMM = OMMEnd(builder)
        return OMM
