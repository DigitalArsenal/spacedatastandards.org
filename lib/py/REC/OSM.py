# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Observation Stability Message
class OSM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OSM()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOSM(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OSMBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x4F\x53\x4D", size_prefixed=size_prefixed)

    # OSM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Indicates whether the observation is stable or not
    # OSM
    def IS_STABLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The number of observations
    # OSM
    def NUM_OBS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Unique identifier for the object being observed
    # OSM
    def OBJECT_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the sensor
    # OSM
    def ID_SENSOR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Timestamp of data creation
    # OSM
    def PASS_START(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Duration of the observation pass in seconds
    # OSM
    def PASS_DURATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def OSMStart(builder): builder.StartObject(6)
def Start(builder):
    return OSMStart(builder)
def OSMAddIS_STABLE(builder, IS_STABLE): builder.PrependBoolSlot(0, IS_STABLE, 0)
def AddIS_STABLE(builder, IS_STABLE):
    return OSMAddIS_STABLE(builder, IS_STABLE)
def OSMAddNUM_OBS(builder, NUM_OBS): builder.PrependInt32Slot(1, NUM_OBS, 0)
def AddNUM_OBS(builder, NUM_OBS):
    return OSMAddNUM_OBS(builder, NUM_OBS)
def OSMAddOBJECT_ID(builder, OBJECT_ID): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(OBJECT_ID), 0)
def AddOBJECT_ID(builder, OBJECT_ID):
    return OSMAddOBJECT_ID(builder, OBJECT_ID)
def OSMAddID_SENSOR(builder, ID_SENSOR): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ID_SENSOR), 0)
def AddID_SENSOR(builder, ID_SENSOR):
    return OSMAddID_SENSOR(builder, ID_SENSOR)
def OSMAddPASS_START(builder, PASS_START): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(PASS_START), 0)
def AddPASS_START(builder, PASS_START):
    return OSMAddPASS_START(builder, PASS_START)
def OSMAddPASS_DURATION(builder, PASS_DURATION): builder.PrependInt32Slot(5, PASS_DURATION, 0)
def AddPASS_DURATION(builder, PASS_DURATION):
    return OSMAddPASS_DURATION(builder, PASS_DURATION)
def OSMEnd(builder): return builder.EndObject()
def End(builder):
    return OSMEnd(builder)

class OSMT(object):

    # OSMT
    def __init__(self):
        self.IS_STABLE = False  # type: bool
        self.NUM_OBS = 0  # type: int
        self.OBJECT_ID = None  # type: str
        self.ID_SENSOR = None  # type: str
        self.PASS_START = None  # type: str
        self.PASS_DURATION = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        OSM = OSM()
        OSM.Init(buf, pos)
        return cls.InitFromObj(OSM)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, OSM):
        x = OSMT()
        x._UnPack(OSM)
        return x

    # OSMT
    def _UnPack(self, OSM):
        if OSM is None:
            return
        self.IS_STABLE = OSM.IS_STABLE()
        self.NUM_OBS = OSM.NUM_OBS()
        self.OBJECT_ID = OSM.OBJECT_ID()
        self.ID_SENSOR = OSM.ID_SENSOR()
        self.PASS_START = OSM.PASS_START()
        self.PASS_DURATION = OSM.PASS_DURATION()

    # OSMT
    def Pack(self, builder):
        if self.OBJECT_ID is not None:
            OBJECT_ID = builder.CreateString(self.OBJECT_ID)
        if self.ID_SENSOR is not None:
            ID_SENSOR = builder.CreateString(self.ID_SENSOR)
        if self.PASS_START is not None:
            PASS_START = builder.CreateString(self.PASS_START)
        OSMStart(builder)
        OSMAddIS_STABLE(builder, self.IS_STABLE)
        OSMAddNUM_OBS(builder, self.NUM_OBS)
        if self.OBJECT_ID is not None:
            OSMAddOBJECT_ID(builder, OBJECT_ID)
        if self.ID_SENSOR is not None:
            OSMAddID_SENSOR(builder, ID_SENSOR)
        if self.PASS_START is not None:
            OSMAddPASS_START(builder, PASS_START)
        OSMAddPASS_DURATION(builder, self.PASS_DURATION)
        OSM = OSMEnd(builder)
        return OSM
