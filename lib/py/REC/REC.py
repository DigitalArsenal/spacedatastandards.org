# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Collection of Standard Records
class REC(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = REC()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsREC(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RECBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x52\x45\x43", size_prefixed=size_prefixed)

    # REC
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # REC
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # REC
    def Standard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # REC
    def RECORDS(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Record import Record
            obj = Record()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # REC
    def RECORDSLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # REC
    def RECORDSIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def RECStart(builder): builder.StartObject(3)
def Start(builder):
    return RECStart(builder)
def RECAddVersion(builder, version): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)
def AddVersion(builder, version):
    return RECAddVersion(builder, version)
def RECAddStandard(builder, standard): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(standard), 0)
def AddStandard(builder, standard):
    return RECAddStandard(builder, standard)
def RECAddRECORDS(builder, RECORDS): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(RECORDS), 0)
def AddRECORDS(builder, RECORDS):
    return RECAddRECORDS(builder, RECORDS)
def RECStartRECORDSVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRECORDSVector(builder, numElems):
    return RECStartRECORDSVector(builder, numElems)
def RECEnd(builder): return builder.EndObject()
def End(builder):
    return RECEnd(builder)
import Record
try:
    from typing import List
except:
    pass

class RECT(object):

    # RECT
    def __init__(self):
        self.version = None  # type: str
        self.standard = None  # type: str
        self.RECORDS = None  # type: List[Record.RecordT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        REC = REC()
        REC.Init(buf, pos)
        return cls.InitFromObj(REC)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, REC):
        x = RECT()
        x._UnPack(REC)
        return x

    # RECT
    def _UnPack(self, REC):
        if REC is None:
            return
        self.version = REC.Version()
        self.standard = REC.Standard()
        if not REC.RECORDSIsNone():
            self.RECORDS = []
            for i in range(REC.RECORDSLength()):
                if REC.RECORDS(i) is None:
                    self.RECORDS.append(None)
                else:
                    record_ = Record.RecordT.InitFromObj(REC.RECORDS(i))
                    self.RECORDS.append(record_)

    # RECT
    def Pack(self, builder):
        if self.version is not None:
            version = builder.CreateString(self.version)
        if self.standard is not None:
            standard = builder.CreateString(self.standard)
        if self.RECORDS is not None:
            RECORDSlist = []
            for i in range(len(self.RECORDS)):
                RECORDSlist.append(self.RECORDS[i].Pack(builder))
            RECStartRECORDSVector(builder, len(self.RECORDS))
            for i in reversed(range(len(self.RECORDS))):
                builder.PrependUOffsetTRelative(RECORDSlist[i])
            RECORDS = builder.EndVector()
        RECStart(builder)
        if self.version is not None:
            RECAddVersion(builder, version)
        if self.standard is not None:
            RECAddStandard(builder, standard)
        if self.RECORDS is not None:
            RECAddRECORDS(builder, RECORDS)
        REC = RECEnd(builder)
        return REC
