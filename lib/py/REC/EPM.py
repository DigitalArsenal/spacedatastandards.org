# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Entity Profile Message
class EPM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EPM()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEPM(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EPMBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x45\x50\x4D", size_prefixed=size_prefixed)

    # EPM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Distinguished Name of the entity
    # EPM
    def DN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Common name of the entity (person or organization)
    # EPM
    def LEGAL_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Family name or surname of the person
    # EPM
    def FAMILY_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Given name or first name of the person
    # EPM
    def GIVEN_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional name or middle name of the person
    # EPM
    def ADDITIONAL_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Honorific prefix preceding the person's name (e.g., Mr., Dr.)
    # EPM
    def HONORIFIC_PREFIX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Honorific suffix following the person's name (e.g., Jr., Sr.)
    # EPM
    def HONORIFIC_SUFFIX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Job title of the person
    # EPM
    def JOB_TITLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Occupation of the person
    # EPM
    def OCCUPATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Physical Address
    # EPM
    def ADDRESS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Address import Address
            obj = Address()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Alternate names for the entity
    # EPM
    def ALTERNATE_NAMES(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EPM
    def ALTERNATE_NAMESLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EPM
    def ALTERNATE_NAMESIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # Email address of the entity
    # EPM
    def EMAIL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Telephone number of the entity
    # EPM
    def TELEPHONE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Cryptographic keys associated with the entity
    # EPM
    def KEYS(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CryptoKey import CryptoKey
            obj = CryptoKey()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EPM
    def KEYSLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EPM
    def KEYSIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # Multiformat addresses associated with the entity
    # EPM
    def MULTIFORMAT_ADDRESS(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EPM
    def MULTIFORMAT_ADDRESSLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EPM
    def MULTIFORMAT_ADDRESSIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

def EPMStart(builder): builder.StartObject(15)
def Start(builder):
    return EPMStart(builder)
def EPMAddDN(builder, DN): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(DN), 0)
def AddDN(builder, DN):
    return EPMAddDN(builder, DN)
def EPMAddLEGAL_NAME(builder, LEGAL_NAME): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(LEGAL_NAME), 0)
def AddLEGAL_NAME(builder, LEGAL_NAME):
    return EPMAddLEGAL_NAME(builder, LEGAL_NAME)
def EPMAddFAMILY_NAME(builder, FAMILY_NAME): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(FAMILY_NAME), 0)
def AddFAMILY_NAME(builder, FAMILY_NAME):
    return EPMAddFAMILY_NAME(builder, FAMILY_NAME)
def EPMAddGIVEN_NAME(builder, GIVEN_NAME): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(GIVEN_NAME), 0)
def AddGIVEN_NAME(builder, GIVEN_NAME):
    return EPMAddGIVEN_NAME(builder, GIVEN_NAME)
def EPMAddADDITIONAL_NAME(builder, ADDITIONAL_NAME): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ADDITIONAL_NAME), 0)
def AddADDITIONAL_NAME(builder, ADDITIONAL_NAME):
    return EPMAddADDITIONAL_NAME(builder, ADDITIONAL_NAME)
def EPMAddHONORIFIC_PREFIX(builder, HONORIFIC_PREFIX): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(HONORIFIC_PREFIX), 0)
def AddHONORIFIC_PREFIX(builder, HONORIFIC_PREFIX):
    return EPMAddHONORIFIC_PREFIX(builder, HONORIFIC_PREFIX)
def EPMAddHONORIFIC_SUFFIX(builder, HONORIFIC_SUFFIX): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(HONORIFIC_SUFFIX), 0)
def AddHONORIFIC_SUFFIX(builder, HONORIFIC_SUFFIX):
    return EPMAddHONORIFIC_SUFFIX(builder, HONORIFIC_SUFFIX)
def EPMAddJOB_TITLE(builder, JOB_TITLE): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(JOB_TITLE), 0)
def AddJOB_TITLE(builder, JOB_TITLE):
    return EPMAddJOB_TITLE(builder, JOB_TITLE)
def EPMAddOCCUPATION(builder, OCCUPATION): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(OCCUPATION), 0)
def AddOCCUPATION(builder, OCCUPATION):
    return EPMAddOCCUPATION(builder, OCCUPATION)
def EPMAddADDRESS(builder, ADDRESS): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(ADDRESS), 0)
def AddADDRESS(builder, ADDRESS):
    return EPMAddADDRESS(builder, ADDRESS)
def EPMAddALTERNATE_NAMES(builder, ALTERNATE_NAMES): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(ALTERNATE_NAMES), 0)
def AddALTERNATE_NAMES(builder, ALTERNATE_NAMES):
    return EPMAddALTERNATE_NAMES(builder, ALTERNATE_NAMES)
def EPMStartALTERNATE_NAMESVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartALTERNATE_NAMESVector(builder, numElems):
    return EPMStartALTERNATE_NAMESVector(builder, numElems)
def EPMAddEMAIL(builder, EMAIL): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(EMAIL), 0)
def AddEMAIL(builder, EMAIL):
    return EPMAddEMAIL(builder, EMAIL)
def EPMAddTELEPHONE(builder, TELEPHONE): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(TELEPHONE), 0)
def AddTELEPHONE(builder, TELEPHONE):
    return EPMAddTELEPHONE(builder, TELEPHONE)
def EPMAddKEYS(builder, KEYS): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(KEYS), 0)
def AddKEYS(builder, KEYS):
    return EPMAddKEYS(builder, KEYS)
def EPMStartKEYSVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartKEYSVector(builder, numElems):
    return EPMStartKEYSVector(builder, numElems)
def EPMAddMULTIFORMAT_ADDRESS(builder, MULTIFORMAT_ADDRESS): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(MULTIFORMAT_ADDRESS), 0)
def AddMULTIFORMAT_ADDRESS(builder, MULTIFORMAT_ADDRESS):
    return EPMAddMULTIFORMAT_ADDRESS(builder, MULTIFORMAT_ADDRESS)
def EPMStartMULTIFORMAT_ADDRESSVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMULTIFORMAT_ADDRESSVector(builder, numElems):
    return EPMStartMULTIFORMAT_ADDRESSVector(builder, numElems)
def EPMEnd(builder): return builder.EndObject()
def End(builder):
    return EPMEnd(builder)
import Address
import CryptoKey
try:
    from typing import List, Optional
except:
    pass

class EPMT(object):

    # EPMT
    def __init__(self):
        self.DN = None  # type: str
        self.LEGAL_NAME = None  # type: str
        self.FAMILY_NAME = None  # type: str
        self.GIVEN_NAME = None  # type: str
        self.ADDITIONAL_NAME = None  # type: str
        self.HONORIFIC_PREFIX = None  # type: str
        self.HONORIFIC_SUFFIX = None  # type: str
        self.JOB_TITLE = None  # type: str
        self.OCCUPATION = None  # type: str
        self.ADDRESS = None  # type: Optional[Address.AddressT]
        self.ALTERNATE_NAMES = None  # type: List[str]
        self.EMAIL = None  # type: str
        self.TELEPHONE = None  # type: str
        self.KEYS = None  # type: List[CryptoKey.CryptoKeyT]
        self.MULTIFORMAT_ADDRESS = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        EPM = EPM()
        EPM.Init(buf, pos)
        return cls.InitFromObj(EPM)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, EPM):
        x = EPMT()
        x._UnPack(EPM)
        return x

    # EPMT
    def _UnPack(self, EPM):
        if EPM is None:
            return
        self.DN = EPM.DN()
        self.LEGAL_NAME = EPM.LEGAL_NAME()
        self.FAMILY_NAME = EPM.FAMILY_NAME()
        self.GIVEN_NAME = EPM.GIVEN_NAME()
        self.ADDITIONAL_NAME = EPM.ADDITIONAL_NAME()
        self.HONORIFIC_PREFIX = EPM.HONORIFIC_PREFIX()
        self.HONORIFIC_SUFFIX = EPM.HONORIFIC_SUFFIX()
        self.JOB_TITLE = EPM.JOB_TITLE()
        self.OCCUPATION = EPM.OCCUPATION()
        if EPM.ADDRESS() is not None:
            self.ADDRESS = Address.AddressT.InitFromObj(EPM.ADDRESS())
        if not EPM.ALTERNATE_NAMESIsNone():
            self.ALTERNATE_NAMES = []
            for i in range(EPM.ALTERNATE_NAMESLength()):
                self.ALTERNATE_NAMES.append(EPM.ALTERNATE_NAMES(i))
        self.EMAIL = EPM.EMAIL()
        self.TELEPHONE = EPM.TELEPHONE()
        if not EPM.KEYSIsNone():
            self.KEYS = []
            for i in range(EPM.KEYSLength()):
                if EPM.KEYS(i) is None:
                    self.KEYS.append(None)
                else:
                    cryptoKey_ = CryptoKey.CryptoKeyT.InitFromObj(EPM.KEYS(i))
                    self.KEYS.append(cryptoKey_)
        if not EPM.MULTIFORMAT_ADDRESSIsNone():
            self.MULTIFORMAT_ADDRESS = []
            for i in range(EPM.MULTIFORMAT_ADDRESSLength()):
                self.MULTIFORMAT_ADDRESS.append(EPM.MULTIFORMAT_ADDRESS(i))

    # EPMT
    def Pack(self, builder):
        if self.DN is not None:
            DN = builder.CreateString(self.DN)
        if self.LEGAL_NAME is not None:
            LEGAL_NAME = builder.CreateString(self.LEGAL_NAME)
        if self.FAMILY_NAME is not None:
            FAMILY_NAME = builder.CreateString(self.FAMILY_NAME)
        if self.GIVEN_NAME is not None:
            GIVEN_NAME = builder.CreateString(self.GIVEN_NAME)
        if self.ADDITIONAL_NAME is not None:
            ADDITIONAL_NAME = builder.CreateString(self.ADDITIONAL_NAME)
        if self.HONORIFIC_PREFIX is not None:
            HONORIFIC_PREFIX = builder.CreateString(self.HONORIFIC_PREFIX)
        if self.HONORIFIC_SUFFIX is not None:
            HONORIFIC_SUFFIX = builder.CreateString(self.HONORIFIC_SUFFIX)
        if self.JOB_TITLE is not None:
            JOB_TITLE = builder.CreateString(self.JOB_TITLE)
        if self.OCCUPATION is not None:
            OCCUPATION = builder.CreateString(self.OCCUPATION)
        if self.ADDRESS is not None:
            ADDRESS = self.ADDRESS.Pack(builder)
        if self.ALTERNATE_NAMES is not None:
            ALTERNATE_NAMESlist = []
            for i in range(len(self.ALTERNATE_NAMES)):
                ALTERNATE_NAMESlist.append(builder.CreateString(self.ALTERNATE_NAMES[i]))
            EPMStartALTERNATE_NAMESVector(builder, len(self.ALTERNATE_NAMES))
            for i in reversed(range(len(self.ALTERNATE_NAMES))):
                builder.PrependUOffsetTRelative(ALTERNATE_NAMESlist[i])
            ALTERNATE_NAMES = builder.EndVector()
        if self.EMAIL is not None:
            EMAIL = builder.CreateString(self.EMAIL)
        if self.TELEPHONE is not None:
            TELEPHONE = builder.CreateString(self.TELEPHONE)
        if self.KEYS is not None:
            KEYSlist = []
            for i in range(len(self.KEYS)):
                KEYSlist.append(self.KEYS[i].Pack(builder))
            EPMStartKEYSVector(builder, len(self.KEYS))
            for i in reversed(range(len(self.KEYS))):
                builder.PrependUOffsetTRelative(KEYSlist[i])
            KEYS = builder.EndVector()
        if self.MULTIFORMAT_ADDRESS is not None:
            MULTIFORMAT_ADDRESSlist = []
            for i in range(len(self.MULTIFORMAT_ADDRESS)):
                MULTIFORMAT_ADDRESSlist.append(builder.CreateString(self.MULTIFORMAT_ADDRESS[i]))
            EPMStartMULTIFORMAT_ADDRESSVector(builder, len(self.MULTIFORMAT_ADDRESS))
            for i in reversed(range(len(self.MULTIFORMAT_ADDRESS))):
                builder.PrependUOffsetTRelative(MULTIFORMAT_ADDRESSlist[i])
            MULTIFORMAT_ADDRESS = builder.EndVector()
        EPMStart(builder)
        if self.DN is not None:
            EPMAddDN(builder, DN)
        if self.LEGAL_NAME is not None:
            EPMAddLEGAL_NAME(builder, LEGAL_NAME)
        if self.FAMILY_NAME is not None:
            EPMAddFAMILY_NAME(builder, FAMILY_NAME)
        if self.GIVEN_NAME is not None:
            EPMAddGIVEN_NAME(builder, GIVEN_NAME)
        if self.ADDITIONAL_NAME is not None:
            EPMAddADDITIONAL_NAME(builder, ADDITIONAL_NAME)
        if self.HONORIFIC_PREFIX is not None:
            EPMAddHONORIFIC_PREFIX(builder, HONORIFIC_PREFIX)
        if self.HONORIFIC_SUFFIX is not None:
            EPMAddHONORIFIC_SUFFIX(builder, HONORIFIC_SUFFIX)
        if self.JOB_TITLE is not None:
            EPMAddJOB_TITLE(builder, JOB_TITLE)
        if self.OCCUPATION is not None:
            EPMAddOCCUPATION(builder, OCCUPATION)
        if self.ADDRESS is not None:
            EPMAddADDRESS(builder, ADDRESS)
        if self.ALTERNATE_NAMES is not None:
            EPMAddALTERNATE_NAMES(builder, ALTERNATE_NAMES)
        if self.EMAIL is not None:
            EPMAddEMAIL(builder, EMAIL)
        if self.TELEPHONE is not None:
            EPMAddTELEPHONE(builder, TELEPHONE)
        if self.KEYS is not None:
            EPMAddKEYS(builder, KEYS)
        if self.MULTIFORMAT_ADDRESS is not None:
            EPMAddMULTIFORMAT_ADDRESS(builder, MULTIFORMAT_ADDRESS)
        EPM = EPMEnd(builder)
        return EPM
