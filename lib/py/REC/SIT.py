# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Site Information Message
class SIT(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SIT()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSIT(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SITBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x53\x49\x54", size_prefixed=size_prefixed)

    # SIT
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier for the site, BE_NUMBER
    # SIT
    def ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the site
    # SIT
    def NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Abbreviation
    # SIT
    def ABBREVIATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Site type as defined in SiteType enum
    # SIT
    def SITE_TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Site type CATCODE
    # SIT
    def CATCODE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Network identifier
    # SIT
    def NETWORK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Latitude of the site
    # SIT
    def LATITUDE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Longitude of the site
    # SIT
    def LONGITUDE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Altitude of the site
    # SIT
    def ALTITUDE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Geometry of the site
    # SIT
    def GEOMETRY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Geometry import Geometry
            obj = Geometry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Center point geometry coordinates
    # SIT
    def CENTER_POINT_GEOMETRY(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # SIT
    def CENTER_POINT_GEOMETRYAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # SIT
    def CENTER_POINT_GEOMETRYLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SIT
    def CENTER_POINT_GEOMETRYIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # Classification marking of the site
    # SIT
    def CLASSIFICATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CTR ISO 3166 Numeric code as string
    # SIT
    def CTR_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the user who created the site data
    # SIT
    def CREATED_BY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the site
    # SIT
    def DESCRIPTION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # URL for the 3D model of the site
    # SIT
    def MODEL_URL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the site data
    # SIT
    def SOURCE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates if the site is taskable
    # SIT
    def TASKABLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Operational status of the site (e.g., active, inactive, under construction)
    # SIT
    def OPERATIONAL_STATUS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date of establishment
    # SIT
    def ESTABLISHMENT_DATE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Contact information for the site
    # SIT
    def CONTACT_INFO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Environmental impact or considerations
    # SIT
    def ENVIRONMENTAL_IMPACT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Accessibility and infrastructure details
    # SIT
    def ACCESSIBILITY_INFRA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Vector of Integrated Devices (IDM)
    # SIT
    def INTEGRATED_DEVICES(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from IDM import IDM
            obj = IDM()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SIT
    def INTEGRATED_DEVICESLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SIT
    def INTEGRATED_DEVICESIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

def SITStart(builder): builder.StartObject(24)
def Start(builder):
    return SITStart(builder)
def SITAddID(builder, ID): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ID), 0)
def AddID(builder, ID):
    return SITAddID(builder, ID)
def SITAddNAME(builder, NAME): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(NAME), 0)
def AddNAME(builder, NAME):
    return SITAddNAME(builder, NAME)
def SITAddABBREVIATION(builder, ABBREVIATION): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ABBREVIATION), 0)
def AddABBREVIATION(builder, ABBREVIATION):
    return SITAddABBREVIATION(builder, ABBREVIATION)
def SITAddSITE_TYPE(builder, SITE_TYPE): builder.PrependInt8Slot(3, SITE_TYPE, 0)
def AddSITE_TYPE(builder, SITE_TYPE):
    return SITAddSITE_TYPE(builder, SITE_TYPE)
def SITAddCATCODE(builder, CATCODE): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(CATCODE), 0)
def AddCATCODE(builder, CATCODE):
    return SITAddCATCODE(builder, CATCODE)
def SITAddNETWORK(builder, NETWORK): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(NETWORK), 0)
def AddNETWORK(builder, NETWORK):
    return SITAddNETWORK(builder, NETWORK)
def SITAddLATITUDE(builder, LATITUDE): builder.PrependFloat32Slot(6, LATITUDE, 0.0)
def AddLATITUDE(builder, LATITUDE):
    return SITAddLATITUDE(builder, LATITUDE)
def SITAddLONGITUDE(builder, LONGITUDE): builder.PrependFloat32Slot(7, LONGITUDE, 0.0)
def AddLONGITUDE(builder, LONGITUDE):
    return SITAddLONGITUDE(builder, LONGITUDE)
def SITAddALTITUDE(builder, ALTITUDE): builder.PrependFloat32Slot(8, ALTITUDE, 0.0)
def AddALTITUDE(builder, ALTITUDE):
    return SITAddALTITUDE(builder, ALTITUDE)
def SITAddGEOMETRY(builder, GEOMETRY): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(GEOMETRY), 0)
def AddGEOMETRY(builder, GEOMETRY):
    return SITAddGEOMETRY(builder, GEOMETRY)
def SITAddCENTER_POINT_GEOMETRY(builder, CENTER_POINT_GEOMETRY): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(CENTER_POINT_GEOMETRY), 0)
def AddCENTER_POINT_GEOMETRY(builder, CENTER_POINT_GEOMETRY):
    return SITAddCENTER_POINT_GEOMETRY(builder, CENTER_POINT_GEOMETRY)
def SITStartCENTER_POINT_GEOMETRYVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCENTER_POINT_GEOMETRYVector(builder, numElems):
    return SITStartCENTER_POINT_GEOMETRYVector(builder, numElems)
def SITAddCLASSIFICATION(builder, CLASSIFICATION): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(CLASSIFICATION), 0)
def AddCLASSIFICATION(builder, CLASSIFICATION):
    return SITAddCLASSIFICATION(builder, CLASSIFICATION)
def SITAddCTR_ID(builder, CTR_ID): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(CTR_ID), 0)
def AddCTR_ID(builder, CTR_ID):
    return SITAddCTR_ID(builder, CTR_ID)
def SITAddCREATED_BY(builder, CREATED_BY): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(CREATED_BY), 0)
def AddCREATED_BY(builder, CREATED_BY):
    return SITAddCREATED_BY(builder, CREATED_BY)
def SITAddDESCRIPTION(builder, DESCRIPTION): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(DESCRIPTION), 0)
def AddDESCRIPTION(builder, DESCRIPTION):
    return SITAddDESCRIPTION(builder, DESCRIPTION)
def SITAddMODEL_URL(builder, MODEL_URL): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(MODEL_URL), 0)
def AddMODEL_URL(builder, MODEL_URL):
    return SITAddMODEL_URL(builder, MODEL_URL)
def SITAddSOURCE(builder, SOURCE): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(SOURCE), 0)
def AddSOURCE(builder, SOURCE):
    return SITAddSOURCE(builder, SOURCE)
def SITAddTASKABLE(builder, TASKABLE): builder.PrependBoolSlot(17, TASKABLE, 0)
def AddTASKABLE(builder, TASKABLE):
    return SITAddTASKABLE(builder, TASKABLE)
def SITAddOPERATIONAL_STATUS(builder, OPERATIONAL_STATUS): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(OPERATIONAL_STATUS), 0)
def AddOPERATIONAL_STATUS(builder, OPERATIONAL_STATUS):
    return SITAddOPERATIONAL_STATUS(builder, OPERATIONAL_STATUS)
def SITAddESTABLISHMENT_DATE(builder, ESTABLISHMENT_DATE): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(ESTABLISHMENT_DATE), 0)
def AddESTABLISHMENT_DATE(builder, ESTABLISHMENT_DATE):
    return SITAddESTABLISHMENT_DATE(builder, ESTABLISHMENT_DATE)
def SITAddCONTACT_INFO(builder, CONTACT_INFO): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(CONTACT_INFO), 0)
def AddCONTACT_INFO(builder, CONTACT_INFO):
    return SITAddCONTACT_INFO(builder, CONTACT_INFO)
def SITAddENVIRONMENTAL_IMPACT(builder, ENVIRONMENTAL_IMPACT): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(ENVIRONMENTAL_IMPACT), 0)
def AddENVIRONMENTAL_IMPACT(builder, ENVIRONMENTAL_IMPACT):
    return SITAddENVIRONMENTAL_IMPACT(builder, ENVIRONMENTAL_IMPACT)
def SITAddACCESSIBILITY_INFRA(builder, ACCESSIBILITY_INFRA): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(ACCESSIBILITY_INFRA), 0)
def AddACCESSIBILITY_INFRA(builder, ACCESSIBILITY_INFRA):
    return SITAddACCESSIBILITY_INFRA(builder, ACCESSIBILITY_INFRA)
def SITAddINTEGRATED_DEVICES(builder, INTEGRATED_DEVICES): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(INTEGRATED_DEVICES), 0)
def AddINTEGRATED_DEVICES(builder, INTEGRATED_DEVICES):
    return SITAddINTEGRATED_DEVICES(builder, INTEGRATED_DEVICES)
def SITStartINTEGRATED_DEVICESVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartINTEGRATED_DEVICESVector(builder, numElems):
    return SITStartINTEGRATED_DEVICESVector(builder, numElems)
def SITEnd(builder): return builder.EndObject()
def End(builder):
    return SITEnd(builder)
import Geometry
import IDM
try:
    from typing import List, Optional
except:
    pass

class SITT(object):

    # SITT
    def __init__(self):
        self.ID = None  # type: str
        self.NAME = None  # type: str
        self.ABBREVIATION = None  # type: str
        self.SITE_TYPE = 0  # type: int
        self.CATCODE = None  # type: str
        self.NETWORK = None  # type: str
        self.LATITUDE = 0.0  # type: float
        self.LONGITUDE = 0.0  # type: float
        self.ALTITUDE = 0.0  # type: float
        self.GEOMETRY = None  # type: Optional[Geometry.GeometryT]
        self.CENTER_POINT_GEOMETRY = None  # type: List[float]
        self.CLASSIFICATION = None  # type: str
        self.CTR_ID = None  # type: str
        self.CREATED_BY = None  # type: str
        self.DESCRIPTION = None  # type: str
        self.MODEL_URL = None  # type: str
        self.SOURCE = None  # type: str
        self.TASKABLE = False  # type: bool
        self.OPERATIONAL_STATUS = None  # type: str
        self.ESTABLISHMENT_DATE = None  # type: str
        self.CONTACT_INFO = None  # type: str
        self.ENVIRONMENTAL_IMPACT = None  # type: str
        self.ACCESSIBILITY_INFRA = None  # type: str
        self.INTEGRATED_DEVICES = None  # type: List[IDM.IDMT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        SIT = SIT()
        SIT.Init(buf, pos)
        return cls.InitFromObj(SIT)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, SIT):
        x = SITT()
        x._UnPack(SIT)
        return x

    # SITT
    def _UnPack(self, SIT):
        if SIT is None:
            return
        self.ID = SIT.ID()
        self.NAME = SIT.NAME()
        self.ABBREVIATION = SIT.ABBREVIATION()
        self.SITE_TYPE = SIT.SITE_TYPE()
        self.CATCODE = SIT.CATCODE()
        self.NETWORK = SIT.NETWORK()
        self.LATITUDE = SIT.LATITUDE()
        self.LONGITUDE = SIT.LONGITUDE()
        self.ALTITUDE = SIT.ALTITUDE()
        if SIT.GEOMETRY() is not None:
            self.GEOMETRY = Geometry.GeometryT.InitFromObj(SIT.GEOMETRY())
        if not SIT.CENTER_POINT_GEOMETRYIsNone():
            if np is None:
                self.CENTER_POINT_GEOMETRY = []
                for i in range(SIT.CENTER_POINT_GEOMETRYLength()):
                    self.CENTER_POINT_GEOMETRY.append(SIT.CENTER_POINT_GEOMETRY(i))
            else:
                self.CENTER_POINT_GEOMETRY = SIT.CENTER_POINT_GEOMETRYAsNumpy()
        self.CLASSIFICATION = SIT.CLASSIFICATION()
        self.CTR_ID = SIT.CTR_ID()
        self.CREATED_BY = SIT.CREATED_BY()
        self.DESCRIPTION = SIT.DESCRIPTION()
        self.MODEL_URL = SIT.MODEL_URL()
        self.SOURCE = SIT.SOURCE()
        self.TASKABLE = SIT.TASKABLE()
        self.OPERATIONAL_STATUS = SIT.OPERATIONAL_STATUS()
        self.ESTABLISHMENT_DATE = SIT.ESTABLISHMENT_DATE()
        self.CONTACT_INFO = SIT.CONTACT_INFO()
        self.ENVIRONMENTAL_IMPACT = SIT.ENVIRONMENTAL_IMPACT()
        self.ACCESSIBILITY_INFRA = SIT.ACCESSIBILITY_INFRA()
        if not SIT.INTEGRATED_DEVICESIsNone():
            self.INTEGRATED_DEVICES = []
            for i in range(SIT.INTEGRATED_DEVICESLength()):
                if SIT.INTEGRATED_DEVICES(i) is None:
                    self.INTEGRATED_DEVICES.append(None)
                else:
                    iDM_ = IDM.IDMT.InitFromObj(SIT.INTEGRATED_DEVICES(i))
                    self.INTEGRATED_DEVICES.append(iDM_)

    # SITT
    def Pack(self, builder):
        if self.ID is not None:
            ID = builder.CreateString(self.ID)
        if self.NAME is not None:
            NAME = builder.CreateString(self.NAME)
        if self.ABBREVIATION is not None:
            ABBREVIATION = builder.CreateString(self.ABBREVIATION)
        if self.CATCODE is not None:
            CATCODE = builder.CreateString(self.CATCODE)
        if self.NETWORK is not None:
            NETWORK = builder.CreateString(self.NETWORK)
        if self.GEOMETRY is not None:
            GEOMETRY = self.GEOMETRY.Pack(builder)
        if self.CENTER_POINT_GEOMETRY is not None:
            if np is not None and type(self.CENTER_POINT_GEOMETRY) is np.ndarray:
                CENTER_POINT_GEOMETRY = builder.CreateNumpyVector(self.CENTER_POINT_GEOMETRY)
            else:
                SITStartCENTER_POINT_GEOMETRYVector(builder, len(self.CENTER_POINT_GEOMETRY))
                for i in reversed(range(len(self.CENTER_POINT_GEOMETRY))):
                    builder.PrependFloat32(self.CENTER_POINT_GEOMETRY[i])
                CENTER_POINT_GEOMETRY = builder.EndVector()
        if self.CLASSIFICATION is not None:
            CLASSIFICATION = builder.CreateString(self.CLASSIFICATION)
        if self.CTR_ID is not None:
            CTR_ID = builder.CreateString(self.CTR_ID)
        if self.CREATED_BY is not None:
            CREATED_BY = builder.CreateString(self.CREATED_BY)
        if self.DESCRIPTION is not None:
            DESCRIPTION = builder.CreateString(self.DESCRIPTION)
        if self.MODEL_URL is not None:
            MODEL_URL = builder.CreateString(self.MODEL_URL)
        if self.SOURCE is not None:
            SOURCE = builder.CreateString(self.SOURCE)
        if self.OPERATIONAL_STATUS is not None:
            OPERATIONAL_STATUS = builder.CreateString(self.OPERATIONAL_STATUS)
        if self.ESTABLISHMENT_DATE is not None:
            ESTABLISHMENT_DATE = builder.CreateString(self.ESTABLISHMENT_DATE)
        if self.CONTACT_INFO is not None:
            CONTACT_INFO = builder.CreateString(self.CONTACT_INFO)
        if self.ENVIRONMENTAL_IMPACT is not None:
            ENVIRONMENTAL_IMPACT = builder.CreateString(self.ENVIRONMENTAL_IMPACT)
        if self.ACCESSIBILITY_INFRA is not None:
            ACCESSIBILITY_INFRA = builder.CreateString(self.ACCESSIBILITY_INFRA)
        if self.INTEGRATED_DEVICES is not None:
            INTEGRATED_DEVICESlist = []
            for i in range(len(self.INTEGRATED_DEVICES)):
                INTEGRATED_DEVICESlist.append(self.INTEGRATED_DEVICES[i].Pack(builder))
            SITStartINTEGRATED_DEVICESVector(builder, len(self.INTEGRATED_DEVICES))
            for i in reversed(range(len(self.INTEGRATED_DEVICES))):
                builder.PrependUOffsetTRelative(INTEGRATED_DEVICESlist[i])
            INTEGRATED_DEVICES = builder.EndVector()
        SITStart(builder)
        if self.ID is not None:
            SITAddID(builder, ID)
        if self.NAME is not None:
            SITAddNAME(builder, NAME)
        if self.ABBREVIATION is not None:
            SITAddABBREVIATION(builder, ABBREVIATION)
        SITAddSITE_TYPE(builder, self.SITE_TYPE)
        if self.CATCODE is not None:
            SITAddCATCODE(builder, CATCODE)
        if self.NETWORK is not None:
            SITAddNETWORK(builder, NETWORK)
        SITAddLATITUDE(builder, self.LATITUDE)
        SITAddLONGITUDE(builder, self.LONGITUDE)
        SITAddALTITUDE(builder, self.ALTITUDE)
        if self.GEOMETRY is not None:
            SITAddGEOMETRY(builder, GEOMETRY)
        if self.CENTER_POINT_GEOMETRY is not None:
            SITAddCENTER_POINT_GEOMETRY(builder, CENTER_POINT_GEOMETRY)
        if self.CLASSIFICATION is not None:
            SITAddCLASSIFICATION(builder, CLASSIFICATION)
        if self.CTR_ID is not None:
            SITAddCTR_ID(builder, CTR_ID)
        if self.CREATED_BY is not None:
            SITAddCREATED_BY(builder, CREATED_BY)
        if self.DESCRIPTION is not None:
            SITAddDESCRIPTION(builder, DESCRIPTION)
        if self.MODEL_URL is not None:
            SITAddMODEL_URL(builder, MODEL_URL)
        if self.SOURCE is not None:
            SITAddSOURCE(builder, SOURCE)
        SITAddTASKABLE(builder, self.TASKABLE)
        if self.OPERATIONAL_STATUS is not None:
            SITAddOPERATIONAL_STATUS(builder, OPERATIONAL_STATUS)
        if self.ESTABLISHMENT_DATE is not None:
            SITAddESTABLISHMENT_DATE(builder, ESTABLISHMENT_DATE)
        if self.CONTACT_INFO is not None:
            SITAddCONTACT_INFO(builder, CONTACT_INFO)
        if self.ENVIRONMENTAL_IMPACT is not None:
            SITAddENVIRONMENTAL_IMPACT(builder, ENVIRONMENTAL_IMPACT)
        if self.ACCESSIBILITY_INFRA is not None:
            SITAddACCESSIBILITY_INFRA(builder, ACCESSIBILITY_INFRA)
        if self.INTEGRATED_DEVICES is not None:
            SITAddINTEGRATED_DEVICES(builder, INTEGRATED_DEVICES)
        SIT = SITEnd(builder)
        return SIT
