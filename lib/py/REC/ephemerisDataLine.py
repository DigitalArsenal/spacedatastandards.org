# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# A single ephemeris data line
class ephemerisDataLine(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ephemerisDataLine()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsephemerisDataLine(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ephemerisDataLineBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x4F\x45\x4D", size_prefixed=size_prefixed)

    # ephemerisDataLine
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Epoch of state vector (ISO 8601)
    # ephemerisDataLine
    def EPOCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Position vector X-component km
    # ephemerisDataLine
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Position vector Y-component km
    # ephemerisDataLine
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Position vector Z-component km
    # ephemerisDataLine
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Velocity vector X-component km/s
    # ephemerisDataLine
    def X_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Velocity vector Y-component km/s
    # ephemerisDataLine
    def Y_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Velocity vector Z-component km/s
    # ephemerisDataLine
    def Z_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional: Acceleration vector X-component km/s/s
    # ephemerisDataLine
    def X_DDOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional: Acceleration vector Y-component km/s/s
    # ephemerisDataLine
    def Y_DDOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional: Acceleration vector Z-component km/s/s
    # ephemerisDataLine
    def Z_DDOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def ephemerisDataLineStart(builder): builder.StartObject(10)
def Start(builder):
    return ephemerisDataLineStart(builder)
def ephemerisDataLineAddEPOCH(builder, EPOCH): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(EPOCH), 0)
def AddEPOCH(builder, EPOCH):
    return ephemerisDataLineAddEPOCH(builder, EPOCH)
def ephemerisDataLineAddX(builder, X): builder.PrependFloat64Slot(1, X, 0.0)
def AddX(builder, X):
    return ephemerisDataLineAddX(builder, X)
def ephemerisDataLineAddY(builder, Y): builder.PrependFloat64Slot(2, Y, 0.0)
def AddY(builder, Y):
    return ephemerisDataLineAddY(builder, Y)
def ephemerisDataLineAddZ(builder, Z): builder.PrependFloat64Slot(3, Z, 0.0)
def AddZ(builder, Z):
    return ephemerisDataLineAddZ(builder, Z)
def ephemerisDataLineAddX_DOT(builder, X_DOT): builder.PrependFloat64Slot(4, X_DOT, 0.0)
def AddX_DOT(builder, X_DOT):
    return ephemerisDataLineAddX_DOT(builder, X_DOT)
def ephemerisDataLineAddY_DOT(builder, Y_DOT): builder.PrependFloat64Slot(5, Y_DOT, 0.0)
def AddY_DOT(builder, Y_DOT):
    return ephemerisDataLineAddY_DOT(builder, Y_DOT)
def ephemerisDataLineAddZ_DOT(builder, Z_DOT): builder.PrependFloat64Slot(6, Z_DOT, 0.0)
def AddZ_DOT(builder, Z_DOT):
    return ephemerisDataLineAddZ_DOT(builder, Z_DOT)
def ephemerisDataLineAddX_DDOT(builder, X_DDOT): builder.PrependFloat64Slot(7, X_DDOT, 0.0)
def AddX_DDOT(builder, X_DDOT):
    return ephemerisDataLineAddX_DDOT(builder, X_DDOT)
def ephemerisDataLineAddY_DDOT(builder, Y_DDOT): builder.PrependFloat64Slot(8, Y_DDOT, 0.0)
def AddY_DDOT(builder, Y_DDOT):
    return ephemerisDataLineAddY_DDOT(builder, Y_DDOT)
def ephemerisDataLineAddZ_DDOT(builder, Z_DDOT): builder.PrependFloat64Slot(9, Z_DDOT, 0.0)
def AddZ_DDOT(builder, Z_DDOT):
    return ephemerisDataLineAddZ_DDOT(builder, Z_DDOT)
def ephemerisDataLineEnd(builder): return builder.EndObject()
def End(builder):
    return ephemerisDataLineEnd(builder)

class ephemerisDataLineT(object):

    # ephemerisDataLineT
    def __init__(self):
        self.EPOCH = None  # type: str
        self.X = 0.0  # type: float
        self.Y = 0.0  # type: float
        self.Z = 0.0  # type: float
        self.X_DOT = 0.0  # type: float
        self.Y_DOT = 0.0  # type: float
        self.Z_DOT = 0.0  # type: float
        self.X_DDOT = 0.0  # type: float
        self.Y_DDOT = 0.0  # type: float
        self.Z_DDOT = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ephemerisDataLine = ephemerisDataLine()
        ephemerisDataLine.Init(buf, pos)
        return cls.InitFromObj(ephemerisDataLine)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ephemerisDataLine):
        x = ephemerisDataLineT()
        x._UnPack(ephemerisDataLine)
        return x

    # ephemerisDataLineT
    def _UnPack(self, ephemerisDataLine):
        if ephemerisDataLine is None:
            return
        self.EPOCH = ephemerisDataLine.EPOCH()
        self.X = ephemerisDataLine.X()
        self.Y = ephemerisDataLine.Y()
        self.Z = ephemerisDataLine.Z()
        self.X_DOT = ephemerisDataLine.X_DOT()
        self.Y_DOT = ephemerisDataLine.Y_DOT()
        self.Z_DOT = ephemerisDataLine.Z_DOT()
        self.X_DDOT = ephemerisDataLine.X_DDOT()
        self.Y_DDOT = ephemerisDataLine.Y_DDOT()
        self.Z_DDOT = ephemerisDataLine.Z_DDOT()

    # ephemerisDataLineT
    def Pack(self, builder):
        if self.EPOCH is not None:
            EPOCH = builder.CreateString(self.EPOCH)
        ephemerisDataLineStart(builder)
        if self.EPOCH is not None:
            ephemerisDataLineAddEPOCH(builder, EPOCH)
        ephemerisDataLineAddX(builder, self.X)
        ephemerisDataLineAddY(builder, self.Y)
        ephemerisDataLineAddZ(builder, self.Z)
        ephemerisDataLineAddX_DOT(builder, self.X_DOT)
        ephemerisDataLineAddY_DOT(builder, self.Y_DOT)
        ephemerisDataLineAddZ_DOT(builder, self.Z_DOT)
        ephemerisDataLineAddX_DDOT(builder, self.X_DDOT)
        ephemerisDataLineAddY_DDOT(builder, self.Y_DDOT)
        ephemerisDataLineAddZ_DDOT(builder, self.Z_DDOT)
        ephemerisDataLine = ephemerisDataLineEnd(builder)
        return ephemerisDataLine
