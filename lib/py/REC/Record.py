# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Record(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Record()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRecord(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RecordBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x52\x45\x43", size_prefixed=size_prefixed)

    # Record
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Record
    def ValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Record
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Record
    def Standard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def RecordStart(builder):
    builder.StartObject(3)

def Start(builder):
    RecordStart(builder)

def RecordAddValueType(builder, valueType):
    builder.PrependUint8Slot(0, valueType, 0)

def AddValueType(builder, valueType):
    RecordAddValueType(builder, valueType)

def RecordAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder, value):
    RecordAddValue(builder, value)

def RecordAddStandard(builder, standard):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(standard), 0)

def AddStandard(builder, standard):
    RecordAddStandard(builder, standard)

def RecordEnd(builder):
    return builder.EndObject()

def End(builder):
    return RecordEnd(builder)

import ATM
import BOV
import CAT
import CDM
import CRM
import CSM
import CTR
import EME
import EOO
import EOP
import EPM
import HYP
import IDM
import LCC
import LDM
import MET
import MPE
import OCM
import OEM
import OMM
import OSM
import PLD
import PNM
import PRG
import RFM
import ROC
import RecordType
import SCM
import SIT
import TDM
import TIM
import VCM
try:
    from typing import Union
except:
    pass

class RecordT(object):

    # RecordT
    def __init__(self):
        self.valueType = 0  # type: int
        self.value = None  # type: Union[None, ATM.ATMT, BOV.BOVT, CAT.CATT, CDM.CDMT, CRM.CRMT, CSM.CSMT, CTR.CTRT, EME.EMET, EOO.EOOT, EOP.EOPT, EPM.EPMT, HYP.HYPT, IDM.IDMT, LCC.LCCT, LDM.LDMT, MET.METT, MPE.MPET, OCM.OCMT, OEM.OEMT, OMM.OMMT, OSM.OSMT, PLD.PLDT, PNM.PNMT, PRG.PRGT, RFM.RFMT, ROC.ROCT, SCM.SCMT, SIT.SITT, TDM.TDMT, TIM.TIMT, VCM.VCMT]
        self.standard = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        record = Record()
        record.Init(buf, pos)
        return cls.InitFromObj(record)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, record):
        x = RecordT()
        x._UnPack(record)
        return x

    # RecordT
    def _UnPack(self, record):
        if record is None:
            return
        self.valueType = record.ValueType()
        self.value = RecordType.RecordTypeCreator(self.valueType, record.Value())
        self.standard = record.Standard()

    # RecordT
    def Pack(self, builder):
        if self.value is not None:
            value = self.value.Pack(builder)
        if self.standard is not None:
            standard = builder.CreateString(self.standard)
        RecordStart(builder)
        RecordAddValueType(builder, self.valueType)
        if self.value is not None:
            RecordAddValue(builder, value)
        if self.standard is not None:
            RecordAddStandard(builder, standard)
        record = RecordEnd(builder)
        return record
