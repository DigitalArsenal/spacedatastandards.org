# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Burn Out Vector Message
class BOV(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BOV()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBOV(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def BOVBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x42\x4F\x56", size_prefixed=size_prefixed)

    # BOV
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BOV
    def E_COORDINATE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # BOV
    def F_COORDINATE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # BOV
    def G_COORDINATE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # BOV
    def E_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # BOV
    def F_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # BOV
    def G_DOT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # BOV
    def EPOCH_TIME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BOV
    def TIME_FROM_LAUNCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def BOVStart(builder): builder.StartObject(8)
def Start(builder):
    return BOVStart(builder)
def BOVAddE_COORDINATE(builder, E_COORDINATE): builder.PrependFloat64Slot(0, E_COORDINATE, 0.0)
def AddE_COORDINATE(builder, E_COORDINATE):
    return BOVAddE_COORDINATE(builder, E_COORDINATE)
def BOVAddF_COORDINATE(builder, F_COORDINATE): builder.PrependFloat64Slot(1, F_COORDINATE, 0.0)
def AddF_COORDINATE(builder, F_COORDINATE):
    return BOVAddF_COORDINATE(builder, F_COORDINATE)
def BOVAddG_COORDINATE(builder, G_COORDINATE): builder.PrependFloat64Slot(2, G_COORDINATE, 0.0)
def AddG_COORDINATE(builder, G_COORDINATE):
    return BOVAddG_COORDINATE(builder, G_COORDINATE)
def BOVAddE_DOT(builder, E_DOT): builder.PrependFloat64Slot(3, E_DOT, 0.0)
def AddE_DOT(builder, E_DOT):
    return BOVAddE_DOT(builder, E_DOT)
def BOVAddF_DOT(builder, F_DOT): builder.PrependFloat64Slot(4, F_DOT, 0.0)
def AddF_DOT(builder, F_DOT):
    return BOVAddF_DOT(builder, F_DOT)
def BOVAddG_DOT(builder, G_DOT): builder.PrependFloat64Slot(5, G_DOT, 0.0)
def AddG_DOT(builder, G_DOT):
    return BOVAddG_DOT(builder, G_DOT)
def BOVAddEPOCH_TIME(builder, EPOCH_TIME): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(EPOCH_TIME), 0)
def AddEPOCH_TIME(builder, EPOCH_TIME):
    return BOVAddEPOCH_TIME(builder, EPOCH_TIME)
def BOVAddTIME_FROM_LAUNCH(builder, TIME_FROM_LAUNCH): builder.PrependFloat64Slot(7, TIME_FROM_LAUNCH, 0.0)
def AddTIME_FROM_LAUNCH(builder, TIME_FROM_LAUNCH):
    return BOVAddTIME_FROM_LAUNCH(builder, TIME_FROM_LAUNCH)
def BOVEnd(builder): return builder.EndObject()
def End(builder):
    return BOVEnd(builder)

class BOVT(object):

    # BOVT
    def __init__(self):
        self.E_COORDINATE = 0.0  # type: float
        self.F_COORDINATE = 0.0  # type: float
        self.G_COORDINATE = 0.0  # type: float
        self.E_DOT = 0.0  # type: float
        self.F_DOT = 0.0  # type: float
        self.G_DOT = 0.0  # type: float
        self.EPOCH_TIME = None  # type: str
        self.TIME_FROM_LAUNCH = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        BOV = BOV()
        BOV.Init(buf, pos)
        return cls.InitFromObj(BOV)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, BOV):
        x = BOVT()
        x._UnPack(BOV)
        return x

    # BOVT
    def _UnPack(self, BOV):
        if BOV is None:
            return
        self.E_COORDINATE = BOV.E_COORDINATE()
        self.F_COORDINATE = BOV.F_COORDINATE()
        self.G_COORDINATE = BOV.G_COORDINATE()
        self.E_DOT = BOV.E_DOT()
        self.F_DOT = BOV.F_DOT()
        self.G_DOT = BOV.G_DOT()
        self.EPOCH_TIME = BOV.EPOCH_TIME()
        self.TIME_FROM_LAUNCH = BOV.TIME_FROM_LAUNCH()

    # BOVT
    def Pack(self, builder):
        if self.EPOCH_TIME is not None:
            EPOCH_TIME = builder.CreateString(self.EPOCH_TIME)
        BOVStart(builder)
        BOVAddE_COORDINATE(builder, self.E_COORDINATE)
        BOVAddF_COORDINATE(builder, self.F_COORDINATE)
        BOVAddG_COORDINATE(builder, self.G_COORDINATE)
        BOVAddE_DOT(builder, self.E_DOT)
        BOVAddF_DOT(builder, self.F_DOT)
        BOVAddG_DOT(builder, self.G_DOT)
        if self.EPOCH_TIME is not None:
            BOVAddEPOCH_TIME(builder, EPOCH_TIME)
        BOVAddTIME_FROM_LAUNCH(builder, self.TIME_FROM_LAUNCH)
        BOV = BOVEnd(builder)
        return BOV
