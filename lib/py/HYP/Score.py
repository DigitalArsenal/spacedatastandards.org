# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Score(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Score()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScore(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ScoreBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x48\x59\x50", size_prefixed=size_prefixed)

    # Score
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Score
    def NORAD_CAT_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Score
    def TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Score
    def TAG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Score
    def SCORE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def ScoreStart(builder):
    builder.StartObject(4)

def Start(builder):
    ScoreStart(builder)

def ScoreAddNORAD_CAT_ID(builder, NORAD_CAT_ID):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(NORAD_CAT_ID), 0)

def AddNORAD_CAT_ID(builder, NORAD_CAT_ID):
    ScoreAddNORAD_CAT_ID(builder, NORAD_CAT_ID)

def ScoreAddTYPE(builder, TYPE):
    builder.PrependInt8Slot(1, TYPE, 0)

def AddTYPE(builder, TYPE):
    ScoreAddTYPE(builder, TYPE)

def ScoreAddTAG(builder, TAG):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(TAG), 0)

def AddTAG(builder, TAG):
    ScoreAddTAG(builder, TAG)

def ScoreAddSCORE(builder, SCORE):
    builder.PrependFloat32Slot(3, SCORE, 0.0)

def AddSCORE(builder, SCORE):
    ScoreAddSCORE(builder, SCORE)

def ScoreEnd(builder):
    return builder.EndObject()

def End(builder):
    return ScoreEnd(builder)


class ScoreT(object):

    # ScoreT
    def __init__(self):
        self.NORAD_CAT_ID = None  # type: str
        self.TYPE = 0  # type: int
        self.TAG = None  # type: str
        self.SCORE = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        score = Score()
        score.Init(buf, pos)
        return cls.InitFromObj(score)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, score):
        x = ScoreT()
        x._UnPack(score)
        return x

    # ScoreT
    def _UnPack(self, score):
        if score is None:
            return
        self.NORAD_CAT_ID = score.NORAD_CAT_ID()
        self.TYPE = score.TYPE()
        self.TAG = score.TAG()
        self.SCORE = score.SCORE()

    # ScoreT
    def Pack(self, builder):
        if self.NORAD_CAT_ID is not None:
            NORAD_CAT_ID = builder.CreateString(self.NORAD_CAT_ID)
        if self.TAG is not None:
            TAG = builder.CreateString(self.TAG)
        ScoreStart(builder)
        if self.NORAD_CAT_ID is not None:
            ScoreAddNORAD_CAT_ID(builder, NORAD_CAT_ID)
        ScoreAddTYPE(builder, self.TYPE)
        if self.TAG is not None:
            ScoreAddTAG(builder, TAG)
        ScoreAddSCORE(builder, self.SCORE)
        score = ScoreEnd(builder)
        return score
