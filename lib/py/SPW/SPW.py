# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Space Weather Data Record
class SPW(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SPW()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSPW(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SPWBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x53\x50\x57", size_prefixed=size_prefixed)

    # SPW
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Date in ISO 8601 format
    # SPW
    def DATE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Bartels Solar Rotation Number
    # SPW
    def BSRN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Day within Bartels cycle (1-27)
    # SPW
    def ND(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary 3-hour Range Index (Kp) for 0000-0300 UT, multiplied by 10
    # SPW
    def KP1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary 3-hour Range Index (Kp) for 0300-0600 UT, multiplied by 10
    # SPW
    def KP2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary 3-hour Range Index (Kp) for 0600-0900 UT, multiplied by 10
    # SPW
    def KP3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary 3-hour Range Index (Kp) for 0900-1200 UT, multiplied by 10
    # SPW
    def KP4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary 3-hour Range Index (Kp) for 1200-1500 UT, multiplied by 10
    # SPW
    def KP5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary 3-hour Range Index (Kp) for 1500-1800 UT, multiplied by 10
    # SPW
    def KP6(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary 3-hour Range Index (Kp) for 1800-2100 UT, multiplied by 10
    # SPW
    def KP7(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary 3-hour Range Index (Kp) for 2100-0000 UT, multiplied by 10
    # SPW
    def KP8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Sum of the 8 Kp indices for the day
    # SPW
    def KP_SUM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary Equivalent Amplitude (Ap) for 0000-0300 UT
    # SPW
    def AP1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary Equivalent Amplitude (Ap) for 0300-0600 UT
    # SPW
    def AP2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary Equivalent Amplitude (Ap) for 0600-0900 UT
    # SPW
    def AP3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary Equivalent Amplitude (Ap) for 0900-1200 UT
    # SPW
    def AP4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary Equivalent Amplitude (Ap) for 1200-1500 UT
    # SPW
    def AP5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary Equivalent Amplitude (Ap) for 1500-1800 UT
    # SPW
    def AP6(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary Equivalent Amplitude (Ap) for 1800-2100 UT
    # SPW
    def AP7(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary Equivalent Amplitude (Ap) for 2100-0000 UT
    # SPW
    def AP8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Arithmetic average of the 8 Ap indices for the day
    # SPW
    def AP_AVG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Planetary Daily Character Figure (0.0 to 2.5)
    # SPW
    def CP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # C9 index (0-9)
    # SPW
    def C9(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # International Sunspot Number
    # SPW
    def ISN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Observed 10.7cm Solar Radio Flux
    # SPW
    def F107_OBS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Adjusted 10.7cm Solar Radio Flux (to 1 AU)
    # SPW
    def F107_ADJ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # F10.7 Data Type
    # SPW
    def F107_DATA_TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # 81-day centered average of observed F10.7
    # SPW
    def F107_OBS_CENTER81(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # 81-day trailing average of observed F10.7
    # SPW
    def F107_OBS_LAST81(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # 81-day centered average of adjusted F10.7
    # SPW
    def F107_ADJ_CENTER81(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # 81-day trailing average of adjusted F10.7
    # SPW
    def F107_ADJ_LAST81(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def SPWStart(builder):
    builder.StartObject(31)

def Start(builder):
    SPWStart(builder)

def SPWAddDATE(builder, DATE):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(DATE), 0)

def AddDATE(builder, DATE):
    SPWAddDATE(builder, DATE)

def SPWAddBSRN(builder, BSRN):
    builder.PrependInt32Slot(1, BSRN, 0)

def AddBSRN(builder, BSRN):
    SPWAddBSRN(builder, BSRN)

def SPWAddND(builder, ND):
    builder.PrependInt32Slot(2, ND, 0)

def AddND(builder, ND):
    SPWAddND(builder, ND)

def SPWAddKP1(builder, KP1):
    builder.PrependInt32Slot(3, KP1, 0)

def AddKP1(builder, KP1):
    SPWAddKP1(builder, KP1)

def SPWAddKP2(builder, KP2):
    builder.PrependInt32Slot(4, KP2, 0)

def AddKP2(builder, KP2):
    SPWAddKP2(builder, KP2)

def SPWAddKP3(builder, KP3):
    builder.PrependInt32Slot(5, KP3, 0)

def AddKP3(builder, KP3):
    SPWAddKP3(builder, KP3)

def SPWAddKP4(builder, KP4):
    builder.PrependInt32Slot(6, KP4, 0)

def AddKP4(builder, KP4):
    SPWAddKP4(builder, KP4)

def SPWAddKP5(builder, KP5):
    builder.PrependInt32Slot(7, KP5, 0)

def AddKP5(builder, KP5):
    SPWAddKP5(builder, KP5)

def SPWAddKP6(builder, KP6):
    builder.PrependInt32Slot(8, KP6, 0)

def AddKP6(builder, KP6):
    SPWAddKP6(builder, KP6)

def SPWAddKP7(builder, KP7):
    builder.PrependInt32Slot(9, KP7, 0)

def AddKP7(builder, KP7):
    SPWAddKP7(builder, KP7)

def SPWAddKP8(builder, KP8):
    builder.PrependInt32Slot(10, KP8, 0)

def AddKP8(builder, KP8):
    SPWAddKP8(builder, KP8)

def SPWAddKP_SUM(builder, KP_SUM):
    builder.PrependInt32Slot(11, KP_SUM, 0)

def AddKP_SUM(builder, KP_SUM):
    SPWAddKP_SUM(builder, KP_SUM)

def SPWAddAP1(builder, AP1):
    builder.PrependInt32Slot(12, AP1, 0)

def AddAP1(builder, AP1):
    SPWAddAP1(builder, AP1)

def SPWAddAP2(builder, AP2):
    builder.PrependInt32Slot(13, AP2, 0)

def AddAP2(builder, AP2):
    SPWAddAP2(builder, AP2)

def SPWAddAP3(builder, AP3):
    builder.PrependInt32Slot(14, AP3, 0)

def AddAP3(builder, AP3):
    SPWAddAP3(builder, AP3)

def SPWAddAP4(builder, AP4):
    builder.PrependInt32Slot(15, AP4, 0)

def AddAP4(builder, AP4):
    SPWAddAP4(builder, AP4)

def SPWAddAP5(builder, AP5):
    builder.PrependInt32Slot(16, AP5, 0)

def AddAP5(builder, AP5):
    SPWAddAP5(builder, AP5)

def SPWAddAP6(builder, AP6):
    builder.PrependInt32Slot(17, AP6, 0)

def AddAP6(builder, AP6):
    SPWAddAP6(builder, AP6)

def SPWAddAP7(builder, AP7):
    builder.PrependInt32Slot(18, AP7, 0)

def AddAP7(builder, AP7):
    SPWAddAP7(builder, AP7)

def SPWAddAP8(builder, AP8):
    builder.PrependInt32Slot(19, AP8, 0)

def AddAP8(builder, AP8):
    SPWAddAP8(builder, AP8)

def SPWAddAP_AVG(builder, AP_AVG):
    builder.PrependInt32Slot(20, AP_AVG, 0)

def AddAP_AVG(builder, AP_AVG):
    SPWAddAP_AVG(builder, AP_AVG)

def SPWAddCP(builder, CP):
    builder.PrependFloat32Slot(21, CP, 0.0)

def AddCP(builder, CP):
    SPWAddCP(builder, CP)

def SPWAddC9(builder, C9):
    builder.PrependInt32Slot(22, C9, 0)

def AddC9(builder, C9):
    SPWAddC9(builder, C9)

def SPWAddISN(builder, ISN):
    builder.PrependInt32Slot(23, ISN, 0)

def AddISN(builder, ISN):
    SPWAddISN(builder, ISN)

def SPWAddF107_OBS(builder, F107_OBS):
    builder.PrependFloat32Slot(24, F107_OBS, 0.0)

def AddF107_OBS(builder, F107_OBS):
    SPWAddF107_OBS(builder, F107_OBS)

def SPWAddF107_ADJ(builder, F107_ADJ):
    builder.PrependFloat32Slot(25, F107_ADJ, 0.0)

def AddF107_ADJ(builder, F107_ADJ):
    SPWAddF107_ADJ(builder, F107_ADJ)

def SPWAddF107_DATA_TYPE(builder, F107_DATA_TYPE):
    builder.PrependInt8Slot(26, F107_DATA_TYPE, 0)

def AddF107_DATA_TYPE(builder, F107_DATA_TYPE):
    SPWAddF107_DATA_TYPE(builder, F107_DATA_TYPE)

def SPWAddF107_OBS_CENTER81(builder, F107_OBS_CENTER81):
    builder.PrependFloat32Slot(27, F107_OBS_CENTER81, 0.0)

def AddF107_OBS_CENTER81(builder, F107_OBS_CENTER81):
    SPWAddF107_OBS_CENTER81(builder, F107_OBS_CENTER81)

def SPWAddF107_OBS_LAST81(builder, F107_OBS_LAST81):
    builder.PrependFloat32Slot(28, F107_OBS_LAST81, 0.0)

def AddF107_OBS_LAST81(builder, F107_OBS_LAST81):
    SPWAddF107_OBS_LAST81(builder, F107_OBS_LAST81)

def SPWAddF107_ADJ_CENTER81(builder, F107_ADJ_CENTER81):
    builder.PrependFloat32Slot(29, F107_ADJ_CENTER81, 0.0)

def AddF107_ADJ_CENTER81(builder, F107_ADJ_CENTER81):
    SPWAddF107_ADJ_CENTER81(builder, F107_ADJ_CENTER81)

def SPWAddF107_ADJ_LAST81(builder, F107_ADJ_LAST81):
    builder.PrependFloat32Slot(30, F107_ADJ_LAST81, 0.0)

def AddF107_ADJ_LAST81(builder, F107_ADJ_LAST81):
    SPWAddF107_ADJ_LAST81(builder, F107_ADJ_LAST81)

def SPWEnd(builder):
    return builder.EndObject()

def End(builder):
    return SPWEnd(builder)


class SPWT(object):

    # SPWT
    def __init__(self):
        self.DATE = None  # type: str
        self.BSRN = 0  # type: int
        self.ND = 0  # type: int
        self.KP1 = 0  # type: int
        self.KP2 = 0  # type: int
        self.KP3 = 0  # type: int
        self.KP4 = 0  # type: int
        self.KP5 = 0  # type: int
        self.KP6 = 0  # type: int
        self.KP7 = 0  # type: int
        self.KP8 = 0  # type: int
        self.KP_SUM = 0  # type: int
        self.AP1 = 0  # type: int
        self.AP2 = 0  # type: int
        self.AP3 = 0  # type: int
        self.AP4 = 0  # type: int
        self.AP5 = 0  # type: int
        self.AP6 = 0  # type: int
        self.AP7 = 0  # type: int
        self.AP8 = 0  # type: int
        self.AP_AVG = 0  # type: int
        self.CP = 0.0  # type: float
        self.C9 = 0  # type: int
        self.ISN = 0  # type: int
        self.F107_OBS = 0.0  # type: float
        self.F107_ADJ = 0.0  # type: float
        self.F107_DATA_TYPE = 0  # type: int
        self.F107_OBS_CENTER81 = 0.0  # type: float
        self.F107_OBS_LAST81 = 0.0  # type: float
        self.F107_ADJ_CENTER81 = 0.0  # type: float
        self.F107_ADJ_LAST81 = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        SPW = SPW()
        SPW.Init(buf, pos)
        return cls.InitFromObj(SPW)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, SPW):
        x = SPWT()
        x._UnPack(SPW)
        return x

    # SPWT
    def _UnPack(self, SPW):
        if SPW is None:
            return
        self.DATE = SPW.DATE()
        self.BSRN = SPW.BSRN()
        self.ND = SPW.ND()
        self.KP1 = SPW.KP1()
        self.KP2 = SPW.KP2()
        self.KP3 = SPW.KP3()
        self.KP4 = SPW.KP4()
        self.KP5 = SPW.KP5()
        self.KP6 = SPW.KP6()
        self.KP7 = SPW.KP7()
        self.KP8 = SPW.KP8()
        self.KP_SUM = SPW.KP_SUM()
        self.AP1 = SPW.AP1()
        self.AP2 = SPW.AP2()
        self.AP3 = SPW.AP3()
        self.AP4 = SPW.AP4()
        self.AP5 = SPW.AP5()
        self.AP6 = SPW.AP6()
        self.AP7 = SPW.AP7()
        self.AP8 = SPW.AP8()
        self.AP_AVG = SPW.AP_AVG()
        self.CP = SPW.CP()
        self.C9 = SPW.C9()
        self.ISN = SPW.ISN()
        self.F107_OBS = SPW.F107_OBS()
        self.F107_ADJ = SPW.F107_ADJ()
        self.F107_DATA_TYPE = SPW.F107_DATA_TYPE()
        self.F107_OBS_CENTER81 = SPW.F107_OBS_CENTER81()
        self.F107_OBS_LAST81 = SPW.F107_OBS_LAST81()
        self.F107_ADJ_CENTER81 = SPW.F107_ADJ_CENTER81()
        self.F107_ADJ_LAST81 = SPW.F107_ADJ_LAST81()

    # SPWT
    def Pack(self, builder):
        if self.DATE is not None:
            DATE = builder.CreateString(self.DATE)
        SPWStart(builder)
        if self.DATE is not None:
            SPWAddDATE(builder, DATE)
        SPWAddBSRN(builder, self.BSRN)
        SPWAddND(builder, self.ND)
        SPWAddKP1(builder, self.KP1)
        SPWAddKP2(builder, self.KP2)
        SPWAddKP3(builder, self.KP3)
        SPWAddKP4(builder, self.KP4)
        SPWAddKP5(builder, self.KP5)
        SPWAddKP6(builder, self.KP6)
        SPWAddKP7(builder, self.KP7)
        SPWAddKP8(builder, self.KP8)
        SPWAddKP_SUM(builder, self.KP_SUM)
        SPWAddAP1(builder, self.AP1)
        SPWAddAP2(builder, self.AP2)
        SPWAddAP3(builder, self.AP3)
        SPWAddAP4(builder, self.AP4)
        SPWAddAP5(builder, self.AP5)
        SPWAddAP6(builder, self.AP6)
        SPWAddAP7(builder, self.AP7)
        SPWAddAP8(builder, self.AP8)
        SPWAddAP_AVG(builder, self.AP_AVG)
        SPWAddCP(builder, self.CP)
        SPWAddC9(builder, self.C9)
        SPWAddISN(builder, self.ISN)
        SPWAddF107_OBS(builder, self.F107_OBS)
        SPWAddF107_ADJ(builder, self.F107_ADJ)
        SPWAddF107_DATA_TYPE(builder, self.F107_DATA_TYPE)
        SPWAddF107_OBS_CENTER81(builder, self.F107_OBS_CENTER81)
        SPWAddF107_OBS_LAST81(builder, self.F107_OBS_LAST81)
        SPWAddF107_ADJ_CENTER81(builder, self.F107_ADJ_CENTER81)
        SPWAddF107_ADJ_LAST81(builder, self.F107_ADJ_LAST81)
        SPW = SPWEnd(builder)
        return SPW
