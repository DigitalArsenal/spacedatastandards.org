# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Collection Request Message
class CRM(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CRM()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCRM(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CRMBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x43\x52\x4D", size_prefixed=size_prefixed)

    # CRM
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # CRM
    def ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # CRM
    def CLASSIFICATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of this collect or contact request.
    # CRM
    def TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent plan or schedule associated with this request.
    # CRM
    def ID_PLAN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Index number for records within a collection plan or schedule.
    # CRM
    def PLAN_INDEX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Task ID associated with this request.
    # CRM
    def TASK_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The dwell ID associated with this request.
    # CRM
    def DWELL_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional ID from external systems.
    # CRM
    def EXTERNAL_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the requested/scheduled/planned sensor associated with this request.
    # CRM
    def ID_SENSOR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request.
    # CRM
    def ORIG_SENSOR_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional type of observation requested.
    # CRM
    def OB_TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The priority of the collect request.
    # CRM
    def PRIORITY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The tasking category associated with this request.
    # CRM
    def TASK_CATEGORY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The tasking suffix associated with this request.
    # CRM
    def SUFFIX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Boolean indicating that this collect request is UCT follow-up.
    # CRM
    def UCT_FOLLOW_UP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The start time of the collect or contact request window, in ISO 8601 UTC format.
    # CRM
    def START_TIME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The end time of the collect or contact request window, in ISO 8601 UTC format.
    # CRM
    def END_TIME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the target on-orbit object for this request.
    # CRM
    def NORAD_CAT_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier provided by the data source to indicate the target object of this request.
    # CRM
    def ORIG_OBJECT_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The tasking group to which the target object is assigned.
    # CRM
    def TASK_GROUP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Inter-Range Operations Number.
    # CRM
    def IRON(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The orbit regime of the target.
    # CRM
    def ORBIT_REGIME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The minimum object (diameter) size, in meters, to be reported.
    # CRM
    def TARGET_SIZE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The minimum Radar Cross-Section of the target, in m^2.
    # CRM
    def RCS_MIN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Radar Cross-Section of the target, in m^2.
    # CRM
    def RCS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The maximum Radar Cross-Section of the target, in m^2.
    # CRM
    def RCS_MAX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The minimum frequency of interest, in MHz.
    # CRM
    def FREQ_MIN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The estimated or expected emission frequency of the target, in MHz.
    # CRM
    def FREQ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The maximum frequency of interest, in MHz.
    # CRM
    def FREQ_MAX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The RF polarization.
    # CRM
    def POLARIZATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).
    # CRM
    def VIS_MAG_MIN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The estimated or expected visual magnitude of the target, in Magnitudes (M).
    # CRM
    def VIS_MAG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).
    # CRM
    def VIS_MAG_MAX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The spectral model used for the irradiance calculation.
    # CRM
    def SPECTRAL_MODEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The fraction of solar energy reflected from target.
    # CRM
    def REFLECTANCE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The target object irradiance value.
    # CRM
    def IRRADIANCE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For optical sensors, the requested number of frames to capture at each sensor step.
    # CRM
    def NUM_FRAMES(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # For optical sensors, the frame rate of the camera, in Hz.
    # CRM
    def FRAME_RATE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For optical sensors, the integration time per camera frame, in milliseconds.
    # CRM
    def INTEGRATION_TIME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The number of requested tracks on the target.
    # CRM
    def NUM_TRACKS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The number of requested observations on the target.
    # CRM
    def NUM_OBS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The duration of the collect request, in seconds.
    # CRM
    def DURATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The search pattern to be executed for this request.
    # CRM
    def SRCH_PATTERN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.
    # CRM
    def SCENARIO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the Elset of the object associated with this request.
    # CRM
    def ID_ELSET(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the Manifold Elset of the object associated with this request.
    # CRM
    def ID_MANIFOLD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the State Vector of the object or central vector associated with this request.
    # CRM
    def ID_STATE_VECTOR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the Ephemeris Set of the object associated with this request.
    # CRM
    def ES_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Epoch time, in ISO 8601 UTC format, of the orbital elements.
    # CRM
    def EPOCH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The average of the periapsis and apoapsis distances, in kilometers.
    # CRM
    def SEMI_MAJOR_AXIS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The orbital eccentricity of an astronomical object.
    # CRM
    def ECCENTRICITY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The angle, in degrees, between the equator and the orbit plane.
    # CRM
    def INCLINATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Right ascension of the ascending node, in degrees.
    # CRM
    def RAAN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The argument of perigee, in degrees.
    # CRM
    def ARG_OF_PERIGEE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The mean anomaly defines the angular position, in degrees, of the object on its orbital path.
    # CRM
    def MEAN_ANOMALY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The expected or directed right ascension angle, in degrees.
    # CRM
    def RA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The expected or directed declination angle, in degrees.
    # CRM
    def DEC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The expected or directed azimuth angle, in degrees.
    # CRM
    def AZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The expected or directed elevation angle, in degrees.
    # CRM
    def EL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The expected acquisition range or defined center range, in km.
    # CRM
    def RANGE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The extent of the azimuth angle, in degrees, from center azimuth.
    # CRM
    def EXTENT_AZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The extent of the elevation angle, in degrees, from center elevation.
    # CRM
    def EXTENT_EL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The extent of the range, in km, from center range.
    # CRM
    def EXTENT_RANGE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 latitude, in degrees.
    # CRM
    def LAT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude, in degrees.
    # CRM
    def LON(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Height above WGS-84 ellipsoid (HAE), in kilometers.
    # CRM
    def ALT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The stopping WGS-84 latitude of a volume definition, in degrees.
    # CRM
    def STOP_LAT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The stopping WGS-84 longitude of a volume definition, in degrees.
    # CRM
    def STOP_LON(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The stopping HAE WGS-84 height above ellipsoid (HAE), in kilometers.
    # CRM
    def STOP_ALT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The maximum inclination, in degrees, to be used in search operations.
    # CRM
    def SRCH_INC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The angular distance, in degrees, in the sensor-x direction from scan center.
    # CRM
    def X_ANGLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The angular distance, in degrees, in the sensor-y direction from scan center.
    # CRM
    def Y_ANGLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.
    # CRM
    def ORIENT_ANGLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The customer for this request.
    # CRM
    def CUSTOMER(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Notes or comments associated with this request.
    # CRM
    def NOTES(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #  Source of the data.
    # CRM
    def SOURCE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #  Originating system or organization which produced the data, if different from the source.
    # CRM
    def ORIGIN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data.
    # CRM
    def DATA_MODE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CRMStart(builder):
    builder.StartObject(78)

def Start(builder):
    CRMStart(builder)

def CRMAddID(builder, ID):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ID), 0)

def AddID(builder, ID):
    CRMAddID(builder, ID)

def CRMAddCLASSIFICATION(builder, CLASSIFICATION):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(CLASSIFICATION), 0)

def AddCLASSIFICATION(builder, CLASSIFICATION):
    CRMAddCLASSIFICATION(builder, CLASSIFICATION)

def CRMAddTYPE(builder, TYPE):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(TYPE), 0)

def AddTYPE(builder, TYPE):
    CRMAddTYPE(builder, TYPE)

def CRMAddID_PLAN(builder, ID_PLAN):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ID_PLAN), 0)

def AddID_PLAN(builder, ID_PLAN):
    CRMAddID_PLAN(builder, ID_PLAN)

def CRMAddPLAN_INDEX(builder, PLAN_INDEX):
    builder.PrependInt32Slot(4, PLAN_INDEX, 0)

def AddPLAN_INDEX(builder, PLAN_INDEX):
    CRMAddPLAN_INDEX(builder, PLAN_INDEX)

def CRMAddTASK_ID(builder, TASK_ID):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(TASK_ID), 0)

def AddTASK_ID(builder, TASK_ID):
    CRMAddTASK_ID(builder, TASK_ID)

def CRMAddDWELL_ID(builder, DWELL_ID):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(DWELL_ID), 0)

def AddDWELL_ID(builder, DWELL_ID):
    CRMAddDWELL_ID(builder, DWELL_ID)

def CRMAddEXTERNAL_ID(builder, EXTERNAL_ID):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(EXTERNAL_ID), 0)

def AddEXTERNAL_ID(builder, EXTERNAL_ID):
    CRMAddEXTERNAL_ID(builder, EXTERNAL_ID)

def CRMAddID_SENSOR(builder, ID_SENSOR):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(ID_SENSOR), 0)

def AddID_SENSOR(builder, ID_SENSOR):
    CRMAddID_SENSOR(builder, ID_SENSOR)

def CRMAddORIG_SENSOR_ID(builder, ORIG_SENSOR_ID):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(ORIG_SENSOR_ID), 0)

def AddORIG_SENSOR_ID(builder, ORIG_SENSOR_ID):
    CRMAddORIG_SENSOR_ID(builder, ORIG_SENSOR_ID)

def CRMAddOB_TYPE(builder, OB_TYPE):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(OB_TYPE), 0)

def AddOB_TYPE(builder, OB_TYPE):
    CRMAddOB_TYPE(builder, OB_TYPE)

def CRMAddPRIORITY(builder, PRIORITY):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(PRIORITY), 0)

def AddPRIORITY(builder, PRIORITY):
    CRMAddPRIORITY(builder, PRIORITY)

def CRMAddTASK_CATEGORY(builder, TASK_CATEGORY):
    builder.PrependInt32Slot(12, TASK_CATEGORY, 0)

def AddTASK_CATEGORY(builder, TASK_CATEGORY):
    CRMAddTASK_CATEGORY(builder, TASK_CATEGORY)

def CRMAddSUFFIX(builder, SUFFIX):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(SUFFIX), 0)

def AddSUFFIX(builder, SUFFIX):
    CRMAddSUFFIX(builder, SUFFIX)

def CRMAddUCT_FOLLOW_UP(builder, UCT_FOLLOW_UP):
    builder.PrependBoolSlot(14, UCT_FOLLOW_UP, 0)

def AddUCT_FOLLOW_UP(builder, UCT_FOLLOW_UP):
    CRMAddUCT_FOLLOW_UP(builder, UCT_FOLLOW_UP)

def CRMAddSTART_TIME(builder, START_TIME):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(START_TIME), 0)

def AddSTART_TIME(builder, START_TIME):
    CRMAddSTART_TIME(builder, START_TIME)

def CRMAddEND_TIME(builder, END_TIME):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(END_TIME), 0)

def AddEND_TIME(builder, END_TIME):
    CRMAddEND_TIME(builder, END_TIME)

def CRMAddNORAD_CAT_ID(builder, NORAD_CAT_ID):
    builder.PrependUint32Slot(17, NORAD_CAT_ID, 0)

def AddNORAD_CAT_ID(builder, NORAD_CAT_ID):
    CRMAddNORAD_CAT_ID(builder, NORAD_CAT_ID)

def CRMAddORIG_OBJECT_ID(builder, ORIG_OBJECT_ID):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(ORIG_OBJECT_ID), 0)

def AddORIG_OBJECT_ID(builder, ORIG_OBJECT_ID):
    CRMAddORIG_OBJECT_ID(builder, ORIG_OBJECT_ID)

def CRMAddTASK_GROUP(builder, TASK_GROUP):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(TASK_GROUP), 0)

def AddTASK_GROUP(builder, TASK_GROUP):
    CRMAddTASK_GROUP(builder, TASK_GROUP)

def CRMAddIRON(builder, IRON):
    builder.PrependInt32Slot(20, IRON, 0)

def AddIRON(builder, IRON):
    CRMAddIRON(builder, IRON)

def CRMAddORBIT_REGIME(builder, ORBIT_REGIME):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(ORBIT_REGIME), 0)

def AddORBIT_REGIME(builder, ORBIT_REGIME):
    CRMAddORBIT_REGIME(builder, ORBIT_REGIME)

def CRMAddTARGET_SIZE(builder, TARGET_SIZE):
    builder.PrependFloat64Slot(22, TARGET_SIZE, 0.0)

def AddTARGET_SIZE(builder, TARGET_SIZE):
    CRMAddTARGET_SIZE(builder, TARGET_SIZE)

def CRMAddRCS_MIN(builder, RCS_MIN):
    builder.PrependFloat64Slot(23, RCS_MIN, 0.0)

def AddRCS_MIN(builder, RCS_MIN):
    CRMAddRCS_MIN(builder, RCS_MIN)

def CRMAddRCS(builder, RCS):
    builder.PrependFloat64Slot(24, RCS, 0.0)

def AddRCS(builder, RCS):
    CRMAddRCS(builder, RCS)

def CRMAddRCS_MAX(builder, RCS_MAX):
    builder.PrependFloat64Slot(25, RCS_MAX, 0.0)

def AddRCS_MAX(builder, RCS_MAX):
    CRMAddRCS_MAX(builder, RCS_MAX)

def CRMAddFREQ_MIN(builder, FREQ_MIN):
    builder.PrependFloat64Slot(26, FREQ_MIN, 0.0)

def AddFREQ_MIN(builder, FREQ_MIN):
    CRMAddFREQ_MIN(builder, FREQ_MIN)

def CRMAddFREQ(builder, FREQ):
    builder.PrependFloat64Slot(27, FREQ, 0.0)

def AddFREQ(builder, FREQ):
    CRMAddFREQ(builder, FREQ)

def CRMAddFREQ_MAX(builder, FREQ_MAX):
    builder.PrependFloat64Slot(28, FREQ_MAX, 0.0)

def AddFREQ_MAX(builder, FREQ_MAX):
    CRMAddFREQ_MAX(builder, FREQ_MAX)

def CRMAddPOLARIZATION(builder, POLARIZATION):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(POLARIZATION), 0)

def AddPOLARIZATION(builder, POLARIZATION):
    CRMAddPOLARIZATION(builder, POLARIZATION)

def CRMAddVIS_MAG_MIN(builder, VIS_MAG_MIN):
    builder.PrependFloat64Slot(30, VIS_MAG_MIN, 0.0)

def AddVIS_MAG_MIN(builder, VIS_MAG_MIN):
    CRMAddVIS_MAG_MIN(builder, VIS_MAG_MIN)

def CRMAddVIS_MAG(builder, VIS_MAG):
    builder.PrependFloat64Slot(31, VIS_MAG, 0.0)

def AddVIS_MAG(builder, VIS_MAG):
    CRMAddVIS_MAG(builder, VIS_MAG)

def CRMAddVIS_MAG_MAX(builder, VIS_MAG_MAX):
    builder.PrependFloat64Slot(32, VIS_MAG_MAX, 0.0)

def AddVIS_MAG_MAX(builder, VIS_MAG_MAX):
    CRMAddVIS_MAG_MAX(builder, VIS_MAG_MAX)

def CRMAddSPECTRAL_MODEL(builder, SPECTRAL_MODEL):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(SPECTRAL_MODEL), 0)

def AddSPECTRAL_MODEL(builder, SPECTRAL_MODEL):
    CRMAddSPECTRAL_MODEL(builder, SPECTRAL_MODEL)

def CRMAddREFLECTANCE(builder, REFLECTANCE):
    builder.PrependFloat64Slot(34, REFLECTANCE, 0.0)

def AddREFLECTANCE(builder, REFLECTANCE):
    CRMAddREFLECTANCE(builder, REFLECTANCE)

def CRMAddIRRADIANCE(builder, IRRADIANCE):
    builder.PrependFloat64Slot(35, IRRADIANCE, 0.0)

def AddIRRADIANCE(builder, IRRADIANCE):
    CRMAddIRRADIANCE(builder, IRRADIANCE)

def CRMAddNUM_FRAMES(builder, NUM_FRAMES):
    builder.PrependInt32Slot(36, NUM_FRAMES, 0)

def AddNUM_FRAMES(builder, NUM_FRAMES):
    CRMAddNUM_FRAMES(builder, NUM_FRAMES)

def CRMAddFRAME_RATE(builder, FRAME_RATE):
    builder.PrependFloat64Slot(37, FRAME_RATE, 0.0)

def AddFRAME_RATE(builder, FRAME_RATE):
    CRMAddFRAME_RATE(builder, FRAME_RATE)

def CRMAddINTEGRATION_TIME(builder, INTEGRATION_TIME):
    builder.PrependFloat64Slot(38, INTEGRATION_TIME, 0.0)

def AddINTEGRATION_TIME(builder, INTEGRATION_TIME):
    CRMAddINTEGRATION_TIME(builder, INTEGRATION_TIME)

def CRMAddNUM_TRACKS(builder, NUM_TRACKS):
    builder.PrependInt32Slot(39, NUM_TRACKS, 0)

def AddNUM_TRACKS(builder, NUM_TRACKS):
    CRMAddNUM_TRACKS(builder, NUM_TRACKS)

def CRMAddNUM_OBS(builder, NUM_OBS):
    builder.PrependInt32Slot(40, NUM_OBS, 0)

def AddNUM_OBS(builder, NUM_OBS):
    CRMAddNUM_OBS(builder, NUM_OBS)

def CRMAddDURATION(builder, DURATION):
    builder.PrependInt32Slot(41, DURATION, 0)

def AddDURATION(builder, DURATION):
    CRMAddDURATION(builder, DURATION)

def CRMAddSRCH_PATTERN(builder, SRCH_PATTERN):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(SRCH_PATTERN), 0)

def AddSRCH_PATTERN(builder, SRCH_PATTERN):
    CRMAddSRCH_PATTERN(builder, SRCH_PATTERN)

def CRMAddSCENARIO(builder, SCENARIO):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(SCENARIO), 0)

def AddSCENARIO(builder, SCENARIO):
    CRMAddSCENARIO(builder, SCENARIO)

def CRMAddID_ELSET(builder, ID_ELSET):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(ID_ELSET), 0)

def AddID_ELSET(builder, ID_ELSET):
    CRMAddID_ELSET(builder, ID_ELSET)

def CRMAddID_MANIFOLD(builder, ID_MANIFOLD):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(ID_MANIFOLD), 0)

def AddID_MANIFOLD(builder, ID_MANIFOLD):
    CRMAddID_MANIFOLD(builder, ID_MANIFOLD)

def CRMAddID_STATE_VECTOR(builder, ID_STATE_VECTOR):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(ID_STATE_VECTOR), 0)

def AddID_STATE_VECTOR(builder, ID_STATE_VECTOR):
    CRMAddID_STATE_VECTOR(builder, ID_STATE_VECTOR)

def CRMAddES_ID(builder, ES_ID):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(ES_ID), 0)

def AddES_ID(builder, ES_ID):
    CRMAddES_ID(builder, ES_ID)

def CRMAddEPOCH(builder, EPOCH):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(EPOCH), 0)

def AddEPOCH(builder, EPOCH):
    CRMAddEPOCH(builder, EPOCH)

def CRMAddSEMI_MAJOR_AXIS(builder, SEMI_MAJOR_AXIS):
    builder.PrependFloat64Slot(49, SEMI_MAJOR_AXIS, 0.0)

def AddSEMI_MAJOR_AXIS(builder, SEMI_MAJOR_AXIS):
    CRMAddSEMI_MAJOR_AXIS(builder, SEMI_MAJOR_AXIS)

def CRMAddECCENTRICITY(builder, ECCENTRICITY):
    builder.PrependFloat64Slot(50, ECCENTRICITY, 0.0)

def AddECCENTRICITY(builder, ECCENTRICITY):
    CRMAddECCENTRICITY(builder, ECCENTRICITY)

def CRMAddINCLINATION(builder, INCLINATION):
    builder.PrependFloat64Slot(51, INCLINATION, 0.0)

def AddINCLINATION(builder, INCLINATION):
    CRMAddINCLINATION(builder, INCLINATION)

def CRMAddRAAN(builder, RAAN):
    builder.PrependFloat64Slot(52, RAAN, 0.0)

def AddRAAN(builder, RAAN):
    CRMAddRAAN(builder, RAAN)

def CRMAddARG_OF_PERIGEE(builder, ARG_OF_PERIGEE):
    builder.PrependFloat64Slot(53, ARG_OF_PERIGEE, 0.0)

def AddARG_OF_PERIGEE(builder, ARG_OF_PERIGEE):
    CRMAddARG_OF_PERIGEE(builder, ARG_OF_PERIGEE)

def CRMAddMEAN_ANOMALY(builder, MEAN_ANOMALY):
    builder.PrependFloat64Slot(54, MEAN_ANOMALY, 0.0)

def AddMEAN_ANOMALY(builder, MEAN_ANOMALY):
    CRMAddMEAN_ANOMALY(builder, MEAN_ANOMALY)

def CRMAddRA(builder, RA):
    builder.PrependFloat64Slot(55, RA, 0.0)

def AddRA(builder, RA):
    CRMAddRA(builder, RA)

def CRMAddDEC(builder, DEC):
    builder.PrependFloat64Slot(56, DEC, 0.0)

def AddDEC(builder, DEC):
    CRMAddDEC(builder, DEC)

def CRMAddAZ(builder, AZ):
    builder.PrependFloat64Slot(57, AZ, 0.0)

def AddAZ(builder, AZ):
    CRMAddAZ(builder, AZ)

def CRMAddEL(builder, EL):
    builder.PrependFloat64Slot(58, EL, 0.0)

def AddEL(builder, EL):
    CRMAddEL(builder, EL)

def CRMAddRANGE(builder, RANGE):
    builder.PrependFloat64Slot(59, RANGE, 0.0)

def AddRANGE(builder, RANGE):
    CRMAddRANGE(builder, RANGE)

def CRMAddEXTENT_AZ(builder, EXTENT_AZ):
    builder.PrependFloat64Slot(60, EXTENT_AZ, 0.0)

def AddEXTENT_AZ(builder, EXTENT_AZ):
    CRMAddEXTENT_AZ(builder, EXTENT_AZ)

def CRMAddEXTENT_EL(builder, EXTENT_EL):
    builder.PrependFloat64Slot(61, EXTENT_EL, 0.0)

def AddEXTENT_EL(builder, EXTENT_EL):
    CRMAddEXTENT_EL(builder, EXTENT_EL)

def CRMAddEXTENT_RANGE(builder, EXTENT_RANGE):
    builder.PrependFloat64Slot(62, EXTENT_RANGE, 0.0)

def AddEXTENT_RANGE(builder, EXTENT_RANGE):
    CRMAddEXTENT_RANGE(builder, EXTENT_RANGE)

def CRMAddLAT(builder, LAT):
    builder.PrependFloat64Slot(63, LAT, 0.0)

def AddLAT(builder, LAT):
    CRMAddLAT(builder, LAT)

def CRMAddLON(builder, LON):
    builder.PrependFloat64Slot(64, LON, 0.0)

def AddLON(builder, LON):
    CRMAddLON(builder, LON)

def CRMAddALT(builder, ALT):
    builder.PrependFloat64Slot(65, ALT, 0.0)

def AddALT(builder, ALT):
    CRMAddALT(builder, ALT)

def CRMAddSTOP_LAT(builder, STOP_LAT):
    builder.PrependFloat64Slot(66, STOP_LAT, 0.0)

def AddSTOP_LAT(builder, STOP_LAT):
    CRMAddSTOP_LAT(builder, STOP_LAT)

def CRMAddSTOP_LON(builder, STOP_LON):
    builder.PrependFloat64Slot(67, STOP_LON, 0.0)

def AddSTOP_LON(builder, STOP_LON):
    CRMAddSTOP_LON(builder, STOP_LON)

def CRMAddSTOP_ALT(builder, STOP_ALT):
    builder.PrependFloat64Slot(68, STOP_ALT, 0.0)

def AddSTOP_ALT(builder, STOP_ALT):
    CRMAddSTOP_ALT(builder, STOP_ALT)

def CRMAddSRCH_INC(builder, SRCH_INC):
    builder.PrependFloat64Slot(69, SRCH_INC, 0.0)

def AddSRCH_INC(builder, SRCH_INC):
    CRMAddSRCH_INC(builder, SRCH_INC)

def CRMAddX_ANGLE(builder, X_ANGLE):
    builder.PrependFloat64Slot(70, X_ANGLE, 0.0)

def AddX_ANGLE(builder, X_ANGLE):
    CRMAddX_ANGLE(builder, X_ANGLE)

def CRMAddY_ANGLE(builder, Y_ANGLE):
    builder.PrependFloat64Slot(71, Y_ANGLE, 0.0)

def AddY_ANGLE(builder, Y_ANGLE):
    CRMAddY_ANGLE(builder, Y_ANGLE)

def CRMAddORIENT_ANGLE(builder, ORIENT_ANGLE):
    builder.PrependFloat64Slot(72, ORIENT_ANGLE, 0.0)

def AddORIENT_ANGLE(builder, ORIENT_ANGLE):
    CRMAddORIENT_ANGLE(builder, ORIENT_ANGLE)

def CRMAddCUSTOMER(builder, CUSTOMER):
    builder.PrependUOffsetTRelativeSlot(73, flatbuffers.number_types.UOffsetTFlags.py_type(CUSTOMER), 0)

def AddCUSTOMER(builder, CUSTOMER):
    CRMAddCUSTOMER(builder, CUSTOMER)

def CRMAddNOTES(builder, NOTES):
    builder.PrependUOffsetTRelativeSlot(74, flatbuffers.number_types.UOffsetTFlags.py_type(NOTES), 0)

def AddNOTES(builder, NOTES):
    CRMAddNOTES(builder, NOTES)

def CRMAddSOURCE(builder, SOURCE):
    builder.PrependUOffsetTRelativeSlot(75, flatbuffers.number_types.UOffsetTFlags.py_type(SOURCE), 0)

def AddSOURCE(builder, SOURCE):
    CRMAddSOURCE(builder, SOURCE)

def CRMAddORIGIN(builder, ORIGIN):
    builder.PrependUOffsetTRelativeSlot(76, flatbuffers.number_types.UOffsetTFlags.py_type(ORIGIN), 0)

def AddORIGIN(builder, ORIGIN):
    CRMAddORIGIN(builder, ORIGIN)

def CRMAddDATA_MODE(builder, DATA_MODE):
    builder.PrependUOffsetTRelativeSlot(77, flatbuffers.number_types.UOffsetTFlags.py_type(DATA_MODE), 0)

def AddDATA_MODE(builder, DATA_MODE):
    CRMAddDATA_MODE(builder, DATA_MODE)

def CRMEnd(builder):
    return builder.EndObject()

def End(builder):
    return CRMEnd(builder)


class CRMT(object):

    # CRMT
    def __init__(self):
        self.ID = None  # type: str
        self.CLASSIFICATION = None  # type: str
        self.TYPE = None  # type: str
        self.ID_PLAN = None  # type: str
        self.PLAN_INDEX = 0  # type: int
        self.TASK_ID = None  # type: str
        self.DWELL_ID = None  # type: str
        self.EXTERNAL_ID = None  # type: str
        self.ID_SENSOR = None  # type: str
        self.ORIG_SENSOR_ID = None  # type: str
        self.OB_TYPE = None  # type: str
        self.PRIORITY = None  # type: str
        self.TASK_CATEGORY = 0  # type: int
        self.SUFFIX = None  # type: str
        self.UCT_FOLLOW_UP = False  # type: bool
        self.START_TIME = None  # type: str
        self.END_TIME = None  # type: str
        self.NORAD_CAT_ID = 0  # type: int
        self.ORIG_OBJECT_ID = None  # type: str
        self.TASK_GROUP = None  # type: str
        self.IRON = 0  # type: int
        self.ORBIT_REGIME = None  # type: str
        self.TARGET_SIZE = 0.0  # type: float
        self.RCS_MIN = 0.0  # type: float
        self.RCS = 0.0  # type: float
        self.RCS_MAX = 0.0  # type: float
        self.FREQ_MIN = 0.0  # type: float
        self.FREQ = 0.0  # type: float
        self.FREQ_MAX = 0.0  # type: float
        self.POLARIZATION = None  # type: str
        self.VIS_MAG_MIN = 0.0  # type: float
        self.VIS_MAG = 0.0  # type: float
        self.VIS_MAG_MAX = 0.0  # type: float
        self.SPECTRAL_MODEL = None  # type: str
        self.REFLECTANCE = 0.0  # type: float
        self.IRRADIANCE = 0.0  # type: float
        self.NUM_FRAMES = 0  # type: int
        self.FRAME_RATE = 0.0  # type: float
        self.INTEGRATION_TIME = 0.0  # type: float
        self.NUM_TRACKS = 0  # type: int
        self.NUM_OBS = 0  # type: int
        self.DURATION = 0  # type: int
        self.SRCH_PATTERN = None  # type: str
        self.SCENARIO = None  # type: str
        self.ID_ELSET = None  # type: str
        self.ID_MANIFOLD = None  # type: str
        self.ID_STATE_VECTOR = None  # type: str
        self.ES_ID = None  # type: str
        self.EPOCH = None  # type: str
        self.SEMI_MAJOR_AXIS = 0.0  # type: float
        self.ECCENTRICITY = 0.0  # type: float
        self.INCLINATION = 0.0  # type: float
        self.RAAN = 0.0  # type: float
        self.ARG_OF_PERIGEE = 0.0  # type: float
        self.MEAN_ANOMALY = 0.0  # type: float
        self.RA = 0.0  # type: float
        self.DEC = 0.0  # type: float
        self.AZ = 0.0  # type: float
        self.EL = 0.0  # type: float
        self.RANGE = 0.0  # type: float
        self.EXTENT_AZ = 0.0  # type: float
        self.EXTENT_EL = 0.0  # type: float
        self.EXTENT_RANGE = 0.0  # type: float
        self.LAT = 0.0  # type: float
        self.LON = 0.0  # type: float
        self.ALT = 0.0  # type: float
        self.STOP_LAT = 0.0  # type: float
        self.STOP_LON = 0.0  # type: float
        self.STOP_ALT = 0.0  # type: float
        self.SRCH_INC = 0.0  # type: float
        self.X_ANGLE = 0.0  # type: float
        self.Y_ANGLE = 0.0  # type: float
        self.ORIENT_ANGLE = 0.0  # type: float
        self.CUSTOMER = None  # type: str
        self.NOTES = None  # type: str
        self.SOURCE = None  # type: str
        self.ORIGIN = None  # type: str
        self.DATA_MODE = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        CRM = CRM()
        CRM.Init(buf, pos)
        return cls.InitFromObj(CRM)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, CRM):
        x = CRMT()
        x._UnPack(CRM)
        return x

    # CRMT
    def _UnPack(self, CRM):
        if CRM is None:
            return
        self.ID = CRM.ID()
        self.CLASSIFICATION = CRM.CLASSIFICATION()
        self.TYPE = CRM.TYPE()
        self.ID_PLAN = CRM.ID_PLAN()
        self.PLAN_INDEX = CRM.PLAN_INDEX()
        self.TASK_ID = CRM.TASK_ID()
        self.DWELL_ID = CRM.DWELL_ID()
        self.EXTERNAL_ID = CRM.EXTERNAL_ID()
        self.ID_SENSOR = CRM.ID_SENSOR()
        self.ORIG_SENSOR_ID = CRM.ORIG_SENSOR_ID()
        self.OB_TYPE = CRM.OB_TYPE()
        self.PRIORITY = CRM.PRIORITY()
        self.TASK_CATEGORY = CRM.TASK_CATEGORY()
        self.SUFFIX = CRM.SUFFIX()
        self.UCT_FOLLOW_UP = CRM.UCT_FOLLOW_UP()
        self.START_TIME = CRM.START_TIME()
        self.END_TIME = CRM.END_TIME()
        self.NORAD_CAT_ID = CRM.NORAD_CAT_ID()
        self.ORIG_OBJECT_ID = CRM.ORIG_OBJECT_ID()
        self.TASK_GROUP = CRM.TASK_GROUP()
        self.IRON = CRM.IRON()
        self.ORBIT_REGIME = CRM.ORBIT_REGIME()
        self.TARGET_SIZE = CRM.TARGET_SIZE()
        self.RCS_MIN = CRM.RCS_MIN()
        self.RCS = CRM.RCS()
        self.RCS_MAX = CRM.RCS_MAX()
        self.FREQ_MIN = CRM.FREQ_MIN()
        self.FREQ = CRM.FREQ()
        self.FREQ_MAX = CRM.FREQ_MAX()
        self.POLARIZATION = CRM.POLARIZATION()
        self.VIS_MAG_MIN = CRM.VIS_MAG_MIN()
        self.VIS_MAG = CRM.VIS_MAG()
        self.VIS_MAG_MAX = CRM.VIS_MAG_MAX()
        self.SPECTRAL_MODEL = CRM.SPECTRAL_MODEL()
        self.REFLECTANCE = CRM.REFLECTANCE()
        self.IRRADIANCE = CRM.IRRADIANCE()
        self.NUM_FRAMES = CRM.NUM_FRAMES()
        self.FRAME_RATE = CRM.FRAME_RATE()
        self.INTEGRATION_TIME = CRM.INTEGRATION_TIME()
        self.NUM_TRACKS = CRM.NUM_TRACKS()
        self.NUM_OBS = CRM.NUM_OBS()
        self.DURATION = CRM.DURATION()
        self.SRCH_PATTERN = CRM.SRCH_PATTERN()
        self.SCENARIO = CRM.SCENARIO()
        self.ID_ELSET = CRM.ID_ELSET()
        self.ID_MANIFOLD = CRM.ID_MANIFOLD()
        self.ID_STATE_VECTOR = CRM.ID_STATE_VECTOR()
        self.ES_ID = CRM.ES_ID()
        self.EPOCH = CRM.EPOCH()
        self.SEMI_MAJOR_AXIS = CRM.SEMI_MAJOR_AXIS()
        self.ECCENTRICITY = CRM.ECCENTRICITY()
        self.INCLINATION = CRM.INCLINATION()
        self.RAAN = CRM.RAAN()
        self.ARG_OF_PERIGEE = CRM.ARG_OF_PERIGEE()
        self.MEAN_ANOMALY = CRM.MEAN_ANOMALY()
        self.RA = CRM.RA()
        self.DEC = CRM.DEC()
        self.AZ = CRM.AZ()
        self.EL = CRM.EL()
        self.RANGE = CRM.RANGE()
        self.EXTENT_AZ = CRM.EXTENT_AZ()
        self.EXTENT_EL = CRM.EXTENT_EL()
        self.EXTENT_RANGE = CRM.EXTENT_RANGE()
        self.LAT = CRM.LAT()
        self.LON = CRM.LON()
        self.ALT = CRM.ALT()
        self.STOP_LAT = CRM.STOP_LAT()
        self.STOP_LON = CRM.STOP_LON()
        self.STOP_ALT = CRM.STOP_ALT()
        self.SRCH_INC = CRM.SRCH_INC()
        self.X_ANGLE = CRM.X_ANGLE()
        self.Y_ANGLE = CRM.Y_ANGLE()
        self.ORIENT_ANGLE = CRM.ORIENT_ANGLE()
        self.CUSTOMER = CRM.CUSTOMER()
        self.NOTES = CRM.NOTES()
        self.SOURCE = CRM.SOURCE()
        self.ORIGIN = CRM.ORIGIN()
        self.DATA_MODE = CRM.DATA_MODE()

    # CRMT
    def Pack(self, builder):
        if self.ID is not None:
            ID = builder.CreateString(self.ID)
        if self.CLASSIFICATION is not None:
            CLASSIFICATION = builder.CreateString(self.CLASSIFICATION)
        if self.TYPE is not None:
            TYPE = builder.CreateString(self.TYPE)
        if self.ID_PLAN is not None:
            ID_PLAN = builder.CreateString(self.ID_PLAN)
        if self.TASK_ID is not None:
            TASK_ID = builder.CreateString(self.TASK_ID)
        if self.DWELL_ID is not None:
            DWELL_ID = builder.CreateString(self.DWELL_ID)
        if self.EXTERNAL_ID is not None:
            EXTERNAL_ID = builder.CreateString(self.EXTERNAL_ID)
        if self.ID_SENSOR is not None:
            ID_SENSOR = builder.CreateString(self.ID_SENSOR)
        if self.ORIG_SENSOR_ID is not None:
            ORIG_SENSOR_ID = builder.CreateString(self.ORIG_SENSOR_ID)
        if self.OB_TYPE is not None:
            OB_TYPE = builder.CreateString(self.OB_TYPE)
        if self.PRIORITY is not None:
            PRIORITY = builder.CreateString(self.PRIORITY)
        if self.SUFFIX is not None:
            SUFFIX = builder.CreateString(self.SUFFIX)
        if self.START_TIME is not None:
            START_TIME = builder.CreateString(self.START_TIME)
        if self.END_TIME is not None:
            END_TIME = builder.CreateString(self.END_TIME)
        if self.ORIG_OBJECT_ID is not None:
            ORIG_OBJECT_ID = builder.CreateString(self.ORIG_OBJECT_ID)
        if self.TASK_GROUP is not None:
            TASK_GROUP = builder.CreateString(self.TASK_GROUP)
        if self.ORBIT_REGIME is not None:
            ORBIT_REGIME = builder.CreateString(self.ORBIT_REGIME)
        if self.POLARIZATION is not None:
            POLARIZATION = builder.CreateString(self.POLARIZATION)
        if self.SPECTRAL_MODEL is not None:
            SPECTRAL_MODEL = builder.CreateString(self.SPECTRAL_MODEL)
        if self.SRCH_PATTERN is not None:
            SRCH_PATTERN = builder.CreateString(self.SRCH_PATTERN)
        if self.SCENARIO is not None:
            SCENARIO = builder.CreateString(self.SCENARIO)
        if self.ID_ELSET is not None:
            ID_ELSET = builder.CreateString(self.ID_ELSET)
        if self.ID_MANIFOLD is not None:
            ID_MANIFOLD = builder.CreateString(self.ID_MANIFOLD)
        if self.ID_STATE_VECTOR is not None:
            ID_STATE_VECTOR = builder.CreateString(self.ID_STATE_VECTOR)
        if self.ES_ID is not None:
            ES_ID = builder.CreateString(self.ES_ID)
        if self.EPOCH is not None:
            EPOCH = builder.CreateString(self.EPOCH)
        if self.CUSTOMER is not None:
            CUSTOMER = builder.CreateString(self.CUSTOMER)
        if self.NOTES is not None:
            NOTES = builder.CreateString(self.NOTES)
        if self.SOURCE is not None:
            SOURCE = builder.CreateString(self.SOURCE)
        if self.ORIGIN is not None:
            ORIGIN = builder.CreateString(self.ORIGIN)
        if self.DATA_MODE is not None:
            DATA_MODE = builder.CreateString(self.DATA_MODE)
        CRMStart(builder)
        if self.ID is not None:
            CRMAddID(builder, ID)
        if self.CLASSIFICATION is not None:
            CRMAddCLASSIFICATION(builder, CLASSIFICATION)
        if self.TYPE is not None:
            CRMAddTYPE(builder, TYPE)
        if self.ID_PLAN is not None:
            CRMAddID_PLAN(builder, ID_PLAN)
        CRMAddPLAN_INDEX(builder, self.PLAN_INDEX)
        if self.TASK_ID is not None:
            CRMAddTASK_ID(builder, TASK_ID)
        if self.DWELL_ID is not None:
            CRMAddDWELL_ID(builder, DWELL_ID)
        if self.EXTERNAL_ID is not None:
            CRMAddEXTERNAL_ID(builder, EXTERNAL_ID)
        if self.ID_SENSOR is not None:
            CRMAddID_SENSOR(builder, ID_SENSOR)
        if self.ORIG_SENSOR_ID is not None:
            CRMAddORIG_SENSOR_ID(builder, ORIG_SENSOR_ID)
        if self.OB_TYPE is not None:
            CRMAddOB_TYPE(builder, OB_TYPE)
        if self.PRIORITY is not None:
            CRMAddPRIORITY(builder, PRIORITY)
        CRMAddTASK_CATEGORY(builder, self.TASK_CATEGORY)
        if self.SUFFIX is not None:
            CRMAddSUFFIX(builder, SUFFIX)
        CRMAddUCT_FOLLOW_UP(builder, self.UCT_FOLLOW_UP)
        if self.START_TIME is not None:
            CRMAddSTART_TIME(builder, START_TIME)
        if self.END_TIME is not None:
            CRMAddEND_TIME(builder, END_TIME)
        CRMAddNORAD_CAT_ID(builder, self.NORAD_CAT_ID)
        if self.ORIG_OBJECT_ID is not None:
            CRMAddORIG_OBJECT_ID(builder, ORIG_OBJECT_ID)
        if self.TASK_GROUP is not None:
            CRMAddTASK_GROUP(builder, TASK_GROUP)
        CRMAddIRON(builder, self.IRON)
        if self.ORBIT_REGIME is not None:
            CRMAddORBIT_REGIME(builder, ORBIT_REGIME)
        CRMAddTARGET_SIZE(builder, self.TARGET_SIZE)
        CRMAddRCS_MIN(builder, self.RCS_MIN)
        CRMAddRCS(builder, self.RCS)
        CRMAddRCS_MAX(builder, self.RCS_MAX)
        CRMAddFREQ_MIN(builder, self.FREQ_MIN)
        CRMAddFREQ(builder, self.FREQ)
        CRMAddFREQ_MAX(builder, self.FREQ_MAX)
        if self.POLARIZATION is not None:
            CRMAddPOLARIZATION(builder, POLARIZATION)
        CRMAddVIS_MAG_MIN(builder, self.VIS_MAG_MIN)
        CRMAddVIS_MAG(builder, self.VIS_MAG)
        CRMAddVIS_MAG_MAX(builder, self.VIS_MAG_MAX)
        if self.SPECTRAL_MODEL is not None:
            CRMAddSPECTRAL_MODEL(builder, SPECTRAL_MODEL)
        CRMAddREFLECTANCE(builder, self.REFLECTANCE)
        CRMAddIRRADIANCE(builder, self.IRRADIANCE)
        CRMAddNUM_FRAMES(builder, self.NUM_FRAMES)
        CRMAddFRAME_RATE(builder, self.FRAME_RATE)
        CRMAddINTEGRATION_TIME(builder, self.INTEGRATION_TIME)
        CRMAddNUM_TRACKS(builder, self.NUM_TRACKS)
        CRMAddNUM_OBS(builder, self.NUM_OBS)
        CRMAddDURATION(builder, self.DURATION)
        if self.SRCH_PATTERN is not None:
            CRMAddSRCH_PATTERN(builder, SRCH_PATTERN)
        if self.SCENARIO is not None:
            CRMAddSCENARIO(builder, SCENARIO)
        if self.ID_ELSET is not None:
            CRMAddID_ELSET(builder, ID_ELSET)
        if self.ID_MANIFOLD is not None:
            CRMAddID_MANIFOLD(builder, ID_MANIFOLD)
        if self.ID_STATE_VECTOR is not None:
            CRMAddID_STATE_VECTOR(builder, ID_STATE_VECTOR)
        if self.ES_ID is not None:
            CRMAddES_ID(builder, ES_ID)
        if self.EPOCH is not None:
            CRMAddEPOCH(builder, EPOCH)
        CRMAddSEMI_MAJOR_AXIS(builder, self.SEMI_MAJOR_AXIS)
        CRMAddECCENTRICITY(builder, self.ECCENTRICITY)
        CRMAddINCLINATION(builder, self.INCLINATION)
        CRMAddRAAN(builder, self.RAAN)
        CRMAddARG_OF_PERIGEE(builder, self.ARG_OF_PERIGEE)
        CRMAddMEAN_ANOMALY(builder, self.MEAN_ANOMALY)
        CRMAddRA(builder, self.RA)
        CRMAddDEC(builder, self.DEC)
        CRMAddAZ(builder, self.AZ)
        CRMAddEL(builder, self.EL)
        CRMAddRANGE(builder, self.RANGE)
        CRMAddEXTENT_AZ(builder, self.EXTENT_AZ)
        CRMAddEXTENT_EL(builder, self.EXTENT_EL)
        CRMAddEXTENT_RANGE(builder, self.EXTENT_RANGE)
        CRMAddLAT(builder, self.LAT)
        CRMAddLON(builder, self.LON)
        CRMAddALT(builder, self.ALT)
        CRMAddSTOP_LAT(builder, self.STOP_LAT)
        CRMAddSTOP_LON(builder, self.STOP_LON)
        CRMAddSTOP_ALT(builder, self.STOP_ALT)
        CRMAddSRCH_INC(builder, self.SRCH_INC)
        CRMAddX_ANGLE(builder, self.X_ANGLE)
        CRMAddY_ANGLE(builder, self.Y_ANGLE)
        CRMAddORIENT_ANGLE(builder, self.ORIENT_ANGLE)
        if self.CUSTOMER is not None:
            CRMAddCUSTOMER(builder, CUSTOMER)
        if self.NOTES is not None:
            CRMAddNOTES(builder, NOTES)
        if self.SOURCE is not None:
            CRMAddSOURCE(builder, SOURCE)
        if self.ORIGIN is not None:
            CRMAddORIGIN(builder, ORIGIN)
        if self.DATA_MODE is not None:
            CRMAddDATA_MODE(builder, DATA_MODE)
        CRM = CRMEnd(builder)
        return CRM
