# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Electro-Optical Observation
class EOO(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EOO()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEOO(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EOOBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x45\x4F\x4F", size_prefixed=size_prefixed)

    # EOO
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier for Earth Observation Observation
    # EOO
    def EOBSERVATION_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data
    # EOO
    def CLASSIFICATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Observation time in UTC
    # EOO
    def OB_TIME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Quality of the correlation
    # EOO
    def CORR_QUALITY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Identifier for the satellite on orbit
    # EOO
    def ID_ON_ORBIT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier for the sensor
    # EOO
    def SENSOR_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Method of data collection
    # EOO
    def COLLECT_METHOD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NORAD catalog identifier for the satellite
    # EOO
    def NORAD_CAT_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Identifier for the task
    # EOO
    def TASK_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier for the transaction
    # EOO
    def TRANSACTION_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier for the track
    # EOO
    def TRACK_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Position of the observation
    # EOO
    def OB_POSITION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Original object identifier
    # EOO
    def ORIG_OBJECT_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Original sensor identifier
    # EOO
    def ORIG_SENSOR_ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Universal Coordinated Time flag
    # EOO
    def UCT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Azimuth angle
    # EOO
    def AZIMUTH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Uncertainty in azimuth angle
    # EOO
    def AZIMUTH_UNC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Bias in azimuth angle
    # EOO
    def AZIMUTH_BIAS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change in azimuth
    # EOO
    def AZIMUTH_RATE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Elevation angle
    # EOO
    def ELEVATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Uncertainty in elevation angle
    # EOO
    def ELEVATION_UNC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Bias in elevation angle
    # EOO
    def ELEVATION_BIAS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change in elevation
    # EOO
    def ELEVATION_RATE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Range to the target
    # EOO
    def RANGE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Uncertainty in range
    # EOO
    def RANGE_UNC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Bias in range measurement
    # EOO
    def RANGE_BIAS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change in range
    # EOO
    def RANGE_RATE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Uncertainty in range rate
    # EOO
    def RANGE_RATE_UNC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Right ascension
    # EOO
    def RA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change in right ascension
    # EOO
    def RA_RATE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Uncertainty in right ascension
    # EOO
    def RA_UNC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Bias in right ascension
    # EOO
    def RA_BIAS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Declination angle
    # EOO
    def DECLINATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change in declination
    # EOO
    def DECLINATION_RATE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Uncertainty in declination
    # EOO
    def DECLINATION_UNC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Bias in declination
    # EOO
    def DECLINATION_BIAS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # X-component of line-of-sight vector
    # EOO
    def LOSX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Y-component of line-of-sight vector
    # EOO
    def LOSY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Z-component of line-of-sight vector
    # EOO
    def LOSZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Uncertainty in line-of-sight vector
    # EOO
    def LOS_UNC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # X-component of line-of-sight velocity
    # EOO
    def LOSXVEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Y-component of line-of-sight velocity
    # EOO
    def LOSYVEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Z-component of line-of-sight velocity
    # EOO
    def LOSZVEL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Latitude of sensor
    # EOO
    def SENLAT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Longitude of sensor
    # EOO
    def SENLON(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Altitude of sensor
    # EOO
    def SENALT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # X-coordinate of sensor position
    # EOO
    def SENX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Y-coordinate of sensor position
    # EOO
    def SENY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Z-coordinate of sensor position
    # EOO
    def SENZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Number of fields of view
    # EOO
    def FOV_COUNT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Duration of the exposure
    # EOO
    def EXP_DURATION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Zero-point displacement
    # EOO
    def ZEROPTD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Net object signal
    # EOO
    def NET_OBJ_SIG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Uncertainty in net object signal
    # EOO
    def NET_OBJ_SIG_UNC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Magnitude of the observation
    # EOO
    def MAG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Uncertainty in magnitude
    # EOO
    def MAG_UNC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Normalized range for magnitude
    # EOO
    def MAG_NORM_RANGE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Geocentric latitude
    # EOO
    def GEOLAT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Geocentric longitude
    # EOO
    def GEOLON(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Geocentric altitude
    # EOO
    def GEOALT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Geocentric range
    # EOO
    def GEORANGE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Sky background level
    # EOO
    def SKY_BKGRND(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Primary extinction
    # EOO
    def PRIMARY_EXTINCTION(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Uncertainty in primary extinction
    # EOO
    def PRIMARY_EXTINCTION_UNC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Solar phase angle
    # EOO
    def SOLAR_PHASE_ANGLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Solar equatorial phase angle
    # EOO
    def SOLAR_EQ_PHASE_ANGLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Solar declination angle
    # EOO
    def SOLAR_DEC_ANGLE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Shutter delay
    # EOO
    def SHUTTER_DELAY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Timing bias
    # EOO
    def TIMING_BIAS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # URI of the raw data file
    # EOO
    def RAW_FILE_URI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Intensity of the observation
    # EOO
    def INTENSITY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Background intensity
    # EOO
    def BG_INTENSITY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Descriptor of the provided data
    # EOO
    def DESCRIPTOR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data
    # EOO
    def SOURCE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Origin of the data
    # EOO
    def ORIGIN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mode of the data
    # EOO
    def DATA_MODE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Creation time of the record
    # EOO
    def CREATED_AT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # User who created the record
    # EOO
    def CREATED_BY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Reference frame of the observation
    # EOO
    def REFERENCE_FRAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Reference frame of the sensor
    # EOO
    def SEN_REFERENCE_FRAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag for umbra (total eclipse)
    # EOO
    def UMBRA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag for penumbra (partial eclipse)
    # EOO
    def PENUMBRA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Original network identifier
    # EOO
    def ORIG_NETWORK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Data link source
    # EOO
    def SOURCE_DL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of the observation
    # EOO
    def TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EOOStart(builder): builder.StartObject(85)
def Start(builder):
    return EOOStart(builder)
def EOOAddEOBSERVATION_ID(builder, EOBSERVATION_ID): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(EOBSERVATION_ID), 0)
def AddEOBSERVATION_ID(builder, EOBSERVATION_ID):
    return EOOAddEOBSERVATION_ID(builder, EOBSERVATION_ID)
def EOOAddCLASSIFICATION(builder, CLASSIFICATION): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(CLASSIFICATION), 0)
def AddCLASSIFICATION(builder, CLASSIFICATION):
    return EOOAddCLASSIFICATION(builder, CLASSIFICATION)
def EOOAddOB_TIME(builder, OB_TIME): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(OB_TIME), 0)
def AddOB_TIME(builder, OB_TIME):
    return EOOAddOB_TIME(builder, OB_TIME)
def EOOAddCORR_QUALITY(builder, CORR_QUALITY): builder.PrependFloat32Slot(3, CORR_QUALITY, 0.0)
def AddCORR_QUALITY(builder, CORR_QUALITY):
    return EOOAddCORR_QUALITY(builder, CORR_QUALITY)
def EOOAddID_ON_ORBIT(builder, ID_ON_ORBIT): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ID_ON_ORBIT), 0)
def AddID_ON_ORBIT(builder, ID_ON_ORBIT):
    return EOOAddID_ON_ORBIT(builder, ID_ON_ORBIT)
def EOOAddSENSOR_ID(builder, SENSOR_ID): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(SENSOR_ID), 0)
def AddSENSOR_ID(builder, SENSOR_ID):
    return EOOAddSENSOR_ID(builder, SENSOR_ID)
def EOOAddCOLLECT_METHOD(builder, COLLECT_METHOD): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(COLLECT_METHOD), 0)
def AddCOLLECT_METHOD(builder, COLLECT_METHOD):
    return EOOAddCOLLECT_METHOD(builder, COLLECT_METHOD)
def EOOAddNORAD_CAT_ID(builder, NORAD_CAT_ID): builder.PrependInt32Slot(7, NORAD_CAT_ID, 0)
def AddNORAD_CAT_ID(builder, NORAD_CAT_ID):
    return EOOAddNORAD_CAT_ID(builder, NORAD_CAT_ID)
def EOOAddTASK_ID(builder, TASK_ID): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(TASK_ID), 0)
def AddTASK_ID(builder, TASK_ID):
    return EOOAddTASK_ID(builder, TASK_ID)
def EOOAddTRANSACTION_ID(builder, TRANSACTION_ID): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(TRANSACTION_ID), 0)
def AddTRANSACTION_ID(builder, TRANSACTION_ID):
    return EOOAddTRANSACTION_ID(builder, TRANSACTION_ID)
def EOOAddTRACK_ID(builder, TRACK_ID): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(TRACK_ID), 0)
def AddTRACK_ID(builder, TRACK_ID):
    return EOOAddTRACK_ID(builder, TRACK_ID)
def EOOAddOB_POSITION(builder, OB_POSITION): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(OB_POSITION), 0)
def AddOB_POSITION(builder, OB_POSITION):
    return EOOAddOB_POSITION(builder, OB_POSITION)
def EOOAddORIG_OBJECT_ID(builder, ORIG_OBJECT_ID): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(ORIG_OBJECT_ID), 0)
def AddORIG_OBJECT_ID(builder, ORIG_OBJECT_ID):
    return EOOAddORIG_OBJECT_ID(builder, ORIG_OBJECT_ID)
def EOOAddORIG_SENSOR_ID(builder, ORIG_SENSOR_ID): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(ORIG_SENSOR_ID), 0)
def AddORIG_SENSOR_ID(builder, ORIG_SENSOR_ID):
    return EOOAddORIG_SENSOR_ID(builder, ORIG_SENSOR_ID)
def EOOAddUCT(builder, UCT): builder.PrependBoolSlot(14, UCT, 0)
def AddUCT(builder, UCT):
    return EOOAddUCT(builder, UCT)
def EOOAddAZIMUTH(builder, AZIMUTH): builder.PrependFloat32Slot(15, AZIMUTH, 0.0)
def AddAZIMUTH(builder, AZIMUTH):
    return EOOAddAZIMUTH(builder, AZIMUTH)
def EOOAddAZIMUTH_UNC(builder, AZIMUTH_UNC): builder.PrependFloat32Slot(16, AZIMUTH_UNC, 0.0)
def AddAZIMUTH_UNC(builder, AZIMUTH_UNC):
    return EOOAddAZIMUTH_UNC(builder, AZIMUTH_UNC)
def EOOAddAZIMUTH_BIAS(builder, AZIMUTH_BIAS): builder.PrependFloat32Slot(17, AZIMUTH_BIAS, 0.0)
def AddAZIMUTH_BIAS(builder, AZIMUTH_BIAS):
    return EOOAddAZIMUTH_BIAS(builder, AZIMUTH_BIAS)
def EOOAddAZIMUTH_RATE(builder, AZIMUTH_RATE): builder.PrependFloat32Slot(18, AZIMUTH_RATE, 0.0)
def AddAZIMUTH_RATE(builder, AZIMUTH_RATE):
    return EOOAddAZIMUTH_RATE(builder, AZIMUTH_RATE)
def EOOAddELEVATION(builder, ELEVATION): builder.PrependFloat32Slot(19, ELEVATION, 0.0)
def AddELEVATION(builder, ELEVATION):
    return EOOAddELEVATION(builder, ELEVATION)
def EOOAddELEVATION_UNC(builder, ELEVATION_UNC): builder.PrependFloat32Slot(20, ELEVATION_UNC, 0.0)
def AddELEVATION_UNC(builder, ELEVATION_UNC):
    return EOOAddELEVATION_UNC(builder, ELEVATION_UNC)
def EOOAddELEVATION_BIAS(builder, ELEVATION_BIAS): builder.PrependFloat32Slot(21, ELEVATION_BIAS, 0.0)
def AddELEVATION_BIAS(builder, ELEVATION_BIAS):
    return EOOAddELEVATION_BIAS(builder, ELEVATION_BIAS)
def EOOAddELEVATION_RATE(builder, ELEVATION_RATE): builder.PrependFloat32Slot(22, ELEVATION_RATE, 0.0)
def AddELEVATION_RATE(builder, ELEVATION_RATE):
    return EOOAddELEVATION_RATE(builder, ELEVATION_RATE)
def EOOAddRANGE(builder, RANGE): builder.PrependFloat32Slot(23, RANGE, 0.0)
def AddRANGE(builder, RANGE):
    return EOOAddRANGE(builder, RANGE)
def EOOAddRANGE_UNC(builder, RANGE_UNC): builder.PrependFloat32Slot(24, RANGE_UNC, 0.0)
def AddRANGE_UNC(builder, RANGE_UNC):
    return EOOAddRANGE_UNC(builder, RANGE_UNC)
def EOOAddRANGE_BIAS(builder, RANGE_BIAS): builder.PrependFloat32Slot(25, RANGE_BIAS, 0.0)
def AddRANGE_BIAS(builder, RANGE_BIAS):
    return EOOAddRANGE_BIAS(builder, RANGE_BIAS)
def EOOAddRANGE_RATE(builder, RANGE_RATE): builder.PrependFloat32Slot(26, RANGE_RATE, 0.0)
def AddRANGE_RATE(builder, RANGE_RATE):
    return EOOAddRANGE_RATE(builder, RANGE_RATE)
def EOOAddRANGE_RATE_UNC(builder, RANGE_RATE_UNC): builder.PrependFloat32Slot(27, RANGE_RATE_UNC, 0.0)
def AddRANGE_RATE_UNC(builder, RANGE_RATE_UNC):
    return EOOAddRANGE_RATE_UNC(builder, RANGE_RATE_UNC)
def EOOAddRA(builder, RA): builder.PrependFloat32Slot(28, RA, 0.0)
def AddRA(builder, RA):
    return EOOAddRA(builder, RA)
def EOOAddRA_RATE(builder, RA_RATE): builder.PrependFloat32Slot(29, RA_RATE, 0.0)
def AddRA_RATE(builder, RA_RATE):
    return EOOAddRA_RATE(builder, RA_RATE)
def EOOAddRA_UNC(builder, RA_UNC): builder.PrependFloat32Slot(30, RA_UNC, 0.0)
def AddRA_UNC(builder, RA_UNC):
    return EOOAddRA_UNC(builder, RA_UNC)
def EOOAddRA_BIAS(builder, RA_BIAS): builder.PrependFloat32Slot(31, RA_BIAS, 0.0)
def AddRA_BIAS(builder, RA_BIAS):
    return EOOAddRA_BIAS(builder, RA_BIAS)
def EOOAddDECLINATION(builder, DECLINATION): builder.PrependFloat32Slot(32, DECLINATION, 0.0)
def AddDECLINATION(builder, DECLINATION):
    return EOOAddDECLINATION(builder, DECLINATION)
def EOOAddDECLINATION_RATE(builder, DECLINATION_RATE): builder.PrependFloat32Slot(33, DECLINATION_RATE, 0.0)
def AddDECLINATION_RATE(builder, DECLINATION_RATE):
    return EOOAddDECLINATION_RATE(builder, DECLINATION_RATE)
def EOOAddDECLINATION_UNC(builder, DECLINATION_UNC): builder.PrependFloat32Slot(34, DECLINATION_UNC, 0.0)
def AddDECLINATION_UNC(builder, DECLINATION_UNC):
    return EOOAddDECLINATION_UNC(builder, DECLINATION_UNC)
def EOOAddDECLINATION_BIAS(builder, DECLINATION_BIAS): builder.PrependFloat32Slot(35, DECLINATION_BIAS, 0.0)
def AddDECLINATION_BIAS(builder, DECLINATION_BIAS):
    return EOOAddDECLINATION_BIAS(builder, DECLINATION_BIAS)
def EOOAddLOSX(builder, LOSX): builder.PrependFloat32Slot(36, LOSX, 0.0)
def AddLOSX(builder, LOSX):
    return EOOAddLOSX(builder, LOSX)
def EOOAddLOSY(builder, LOSY): builder.PrependFloat32Slot(37, LOSY, 0.0)
def AddLOSY(builder, LOSY):
    return EOOAddLOSY(builder, LOSY)
def EOOAddLOSZ(builder, LOSZ): builder.PrependFloat32Slot(38, LOSZ, 0.0)
def AddLOSZ(builder, LOSZ):
    return EOOAddLOSZ(builder, LOSZ)
def EOOAddLOS_UNC(builder, LOS_UNC): builder.PrependFloat32Slot(39, LOS_UNC, 0.0)
def AddLOS_UNC(builder, LOS_UNC):
    return EOOAddLOS_UNC(builder, LOS_UNC)
def EOOAddLOSXVEL(builder, LOSXVEL): builder.PrependFloat32Slot(40, LOSXVEL, 0.0)
def AddLOSXVEL(builder, LOSXVEL):
    return EOOAddLOSXVEL(builder, LOSXVEL)
def EOOAddLOSYVEL(builder, LOSYVEL): builder.PrependFloat32Slot(41, LOSYVEL, 0.0)
def AddLOSYVEL(builder, LOSYVEL):
    return EOOAddLOSYVEL(builder, LOSYVEL)
def EOOAddLOSZVEL(builder, LOSZVEL): builder.PrependFloat32Slot(42, LOSZVEL, 0.0)
def AddLOSZVEL(builder, LOSZVEL):
    return EOOAddLOSZVEL(builder, LOSZVEL)
def EOOAddSENLAT(builder, SENLAT): builder.PrependFloat32Slot(43, SENLAT, 0.0)
def AddSENLAT(builder, SENLAT):
    return EOOAddSENLAT(builder, SENLAT)
def EOOAddSENLON(builder, SENLON): builder.PrependFloat32Slot(44, SENLON, 0.0)
def AddSENLON(builder, SENLON):
    return EOOAddSENLON(builder, SENLON)
def EOOAddSENALT(builder, SENALT): builder.PrependFloat32Slot(45, SENALT, 0.0)
def AddSENALT(builder, SENALT):
    return EOOAddSENALT(builder, SENALT)
def EOOAddSENX(builder, SENX): builder.PrependFloat32Slot(46, SENX, 0.0)
def AddSENX(builder, SENX):
    return EOOAddSENX(builder, SENX)
def EOOAddSENY(builder, SENY): builder.PrependFloat32Slot(47, SENY, 0.0)
def AddSENY(builder, SENY):
    return EOOAddSENY(builder, SENY)
def EOOAddSENZ(builder, SENZ): builder.PrependFloat32Slot(48, SENZ, 0.0)
def AddSENZ(builder, SENZ):
    return EOOAddSENZ(builder, SENZ)
def EOOAddFOV_COUNT(builder, FOV_COUNT): builder.PrependInt32Slot(49, FOV_COUNT, 0)
def AddFOV_COUNT(builder, FOV_COUNT):
    return EOOAddFOV_COUNT(builder, FOV_COUNT)
def EOOAddEXP_DURATION(builder, EXP_DURATION): builder.PrependFloat32Slot(50, EXP_DURATION, 0.0)
def AddEXP_DURATION(builder, EXP_DURATION):
    return EOOAddEXP_DURATION(builder, EXP_DURATION)
def EOOAddZEROPTD(builder, ZEROPTD): builder.PrependFloat32Slot(51, ZEROPTD, 0.0)
def AddZEROPTD(builder, ZEROPTD):
    return EOOAddZEROPTD(builder, ZEROPTD)
def EOOAddNET_OBJ_SIG(builder, NET_OBJ_SIG): builder.PrependFloat32Slot(52, NET_OBJ_SIG, 0.0)
def AddNET_OBJ_SIG(builder, NET_OBJ_SIG):
    return EOOAddNET_OBJ_SIG(builder, NET_OBJ_SIG)
def EOOAddNET_OBJ_SIG_UNC(builder, NET_OBJ_SIG_UNC): builder.PrependFloat32Slot(53, NET_OBJ_SIG_UNC, 0.0)
def AddNET_OBJ_SIG_UNC(builder, NET_OBJ_SIG_UNC):
    return EOOAddNET_OBJ_SIG_UNC(builder, NET_OBJ_SIG_UNC)
def EOOAddMAG(builder, MAG): builder.PrependFloat32Slot(54, MAG, 0.0)
def AddMAG(builder, MAG):
    return EOOAddMAG(builder, MAG)
def EOOAddMAG_UNC(builder, MAG_UNC): builder.PrependFloat32Slot(55, MAG_UNC, 0.0)
def AddMAG_UNC(builder, MAG_UNC):
    return EOOAddMAG_UNC(builder, MAG_UNC)
def EOOAddMAG_NORM_RANGE(builder, MAG_NORM_RANGE): builder.PrependFloat32Slot(56, MAG_NORM_RANGE, 0.0)
def AddMAG_NORM_RANGE(builder, MAG_NORM_RANGE):
    return EOOAddMAG_NORM_RANGE(builder, MAG_NORM_RANGE)
def EOOAddGEOLAT(builder, GEOLAT): builder.PrependFloat32Slot(57, GEOLAT, 0.0)
def AddGEOLAT(builder, GEOLAT):
    return EOOAddGEOLAT(builder, GEOLAT)
def EOOAddGEOLON(builder, GEOLON): builder.PrependFloat32Slot(58, GEOLON, 0.0)
def AddGEOLON(builder, GEOLON):
    return EOOAddGEOLON(builder, GEOLON)
def EOOAddGEOALT(builder, GEOALT): builder.PrependFloat32Slot(59, GEOALT, 0.0)
def AddGEOALT(builder, GEOALT):
    return EOOAddGEOALT(builder, GEOALT)
def EOOAddGEORANGE(builder, GEORANGE): builder.PrependFloat32Slot(60, GEORANGE, 0.0)
def AddGEORANGE(builder, GEORANGE):
    return EOOAddGEORANGE(builder, GEORANGE)
def EOOAddSKY_BKGRND(builder, SKY_BKGRND): builder.PrependFloat32Slot(61, SKY_BKGRND, 0.0)
def AddSKY_BKGRND(builder, SKY_BKGRND):
    return EOOAddSKY_BKGRND(builder, SKY_BKGRND)
def EOOAddPRIMARY_EXTINCTION(builder, PRIMARY_EXTINCTION): builder.PrependFloat32Slot(62, PRIMARY_EXTINCTION, 0.0)
def AddPRIMARY_EXTINCTION(builder, PRIMARY_EXTINCTION):
    return EOOAddPRIMARY_EXTINCTION(builder, PRIMARY_EXTINCTION)
def EOOAddPRIMARY_EXTINCTION_UNC(builder, PRIMARY_EXTINCTION_UNC): builder.PrependFloat32Slot(63, PRIMARY_EXTINCTION_UNC, 0.0)
def AddPRIMARY_EXTINCTION_UNC(builder, PRIMARY_EXTINCTION_UNC):
    return EOOAddPRIMARY_EXTINCTION_UNC(builder, PRIMARY_EXTINCTION_UNC)
def EOOAddSOLAR_PHASE_ANGLE(builder, SOLAR_PHASE_ANGLE): builder.PrependFloat32Slot(64, SOLAR_PHASE_ANGLE, 0.0)
def AddSOLAR_PHASE_ANGLE(builder, SOLAR_PHASE_ANGLE):
    return EOOAddSOLAR_PHASE_ANGLE(builder, SOLAR_PHASE_ANGLE)
def EOOAddSOLAR_EQ_PHASE_ANGLE(builder, SOLAR_EQ_PHASE_ANGLE): builder.PrependFloat32Slot(65, SOLAR_EQ_PHASE_ANGLE, 0.0)
def AddSOLAR_EQ_PHASE_ANGLE(builder, SOLAR_EQ_PHASE_ANGLE):
    return EOOAddSOLAR_EQ_PHASE_ANGLE(builder, SOLAR_EQ_PHASE_ANGLE)
def EOOAddSOLAR_DEC_ANGLE(builder, SOLAR_DEC_ANGLE): builder.PrependFloat32Slot(66, SOLAR_DEC_ANGLE, 0.0)
def AddSOLAR_DEC_ANGLE(builder, SOLAR_DEC_ANGLE):
    return EOOAddSOLAR_DEC_ANGLE(builder, SOLAR_DEC_ANGLE)
def EOOAddSHUTTER_DELAY(builder, SHUTTER_DELAY): builder.PrependFloat32Slot(67, SHUTTER_DELAY, 0.0)
def AddSHUTTER_DELAY(builder, SHUTTER_DELAY):
    return EOOAddSHUTTER_DELAY(builder, SHUTTER_DELAY)
def EOOAddTIMING_BIAS(builder, TIMING_BIAS): builder.PrependFloat32Slot(68, TIMING_BIAS, 0.0)
def AddTIMING_BIAS(builder, TIMING_BIAS):
    return EOOAddTIMING_BIAS(builder, TIMING_BIAS)
def EOOAddRAW_FILE_URI(builder, RAW_FILE_URI): builder.PrependUOffsetTRelativeSlot(69, flatbuffers.number_types.UOffsetTFlags.py_type(RAW_FILE_URI), 0)
def AddRAW_FILE_URI(builder, RAW_FILE_URI):
    return EOOAddRAW_FILE_URI(builder, RAW_FILE_URI)
def EOOAddINTENSITY(builder, INTENSITY): builder.PrependFloat32Slot(70, INTENSITY, 0.0)
def AddINTENSITY(builder, INTENSITY):
    return EOOAddINTENSITY(builder, INTENSITY)
def EOOAddBG_INTENSITY(builder, BG_INTENSITY): builder.PrependFloat32Slot(71, BG_INTENSITY, 0.0)
def AddBG_INTENSITY(builder, BG_INTENSITY):
    return EOOAddBG_INTENSITY(builder, BG_INTENSITY)
def EOOAddDESCRIPTOR(builder, DESCRIPTOR): builder.PrependUOffsetTRelativeSlot(72, flatbuffers.number_types.UOffsetTFlags.py_type(DESCRIPTOR), 0)
def AddDESCRIPTOR(builder, DESCRIPTOR):
    return EOOAddDESCRIPTOR(builder, DESCRIPTOR)
def EOOAddSOURCE(builder, SOURCE): builder.PrependUOffsetTRelativeSlot(73, flatbuffers.number_types.UOffsetTFlags.py_type(SOURCE), 0)
def AddSOURCE(builder, SOURCE):
    return EOOAddSOURCE(builder, SOURCE)
def EOOAddORIGIN(builder, ORIGIN): builder.PrependUOffsetTRelativeSlot(74, flatbuffers.number_types.UOffsetTFlags.py_type(ORIGIN), 0)
def AddORIGIN(builder, ORIGIN):
    return EOOAddORIGIN(builder, ORIGIN)
def EOOAddDATA_MODE(builder, DATA_MODE): builder.PrependUOffsetTRelativeSlot(75, flatbuffers.number_types.UOffsetTFlags.py_type(DATA_MODE), 0)
def AddDATA_MODE(builder, DATA_MODE):
    return EOOAddDATA_MODE(builder, DATA_MODE)
def EOOAddCREATED_AT(builder, CREATED_AT): builder.PrependUOffsetTRelativeSlot(76, flatbuffers.number_types.UOffsetTFlags.py_type(CREATED_AT), 0)
def AddCREATED_AT(builder, CREATED_AT):
    return EOOAddCREATED_AT(builder, CREATED_AT)
def EOOAddCREATED_BY(builder, CREATED_BY): builder.PrependUOffsetTRelativeSlot(77, flatbuffers.number_types.UOffsetTFlags.py_type(CREATED_BY), 0)
def AddCREATED_BY(builder, CREATED_BY):
    return EOOAddCREATED_BY(builder, CREATED_BY)
def EOOAddREFERENCE_FRAME(builder, REFERENCE_FRAME): builder.PrependUOffsetTRelativeSlot(78, flatbuffers.number_types.UOffsetTFlags.py_type(REFERENCE_FRAME), 0)
def AddREFERENCE_FRAME(builder, REFERENCE_FRAME):
    return EOOAddREFERENCE_FRAME(builder, REFERENCE_FRAME)
def EOOAddSEN_REFERENCE_FRAME(builder, SEN_REFERENCE_FRAME): builder.PrependUOffsetTRelativeSlot(79, flatbuffers.number_types.UOffsetTFlags.py_type(SEN_REFERENCE_FRAME), 0)
def AddSEN_REFERENCE_FRAME(builder, SEN_REFERENCE_FRAME):
    return EOOAddSEN_REFERENCE_FRAME(builder, SEN_REFERENCE_FRAME)
def EOOAddUMBRA(builder, UMBRA): builder.PrependBoolSlot(80, UMBRA, 0)
def AddUMBRA(builder, UMBRA):
    return EOOAddUMBRA(builder, UMBRA)
def EOOAddPENUMBRA(builder, PENUMBRA): builder.PrependBoolSlot(81, PENUMBRA, 0)
def AddPENUMBRA(builder, PENUMBRA):
    return EOOAddPENUMBRA(builder, PENUMBRA)
def EOOAddORIG_NETWORK(builder, ORIG_NETWORK): builder.PrependUOffsetTRelativeSlot(82, flatbuffers.number_types.UOffsetTFlags.py_type(ORIG_NETWORK), 0)
def AddORIG_NETWORK(builder, ORIG_NETWORK):
    return EOOAddORIG_NETWORK(builder, ORIG_NETWORK)
def EOOAddSOURCE_DL(builder, SOURCE_DL): builder.PrependUOffsetTRelativeSlot(83, flatbuffers.number_types.UOffsetTFlags.py_type(SOURCE_DL), 0)
def AddSOURCE_DL(builder, SOURCE_DL):
    return EOOAddSOURCE_DL(builder, SOURCE_DL)
def EOOAddTYPE(builder, TYPE): builder.PrependUOffsetTRelativeSlot(84, flatbuffers.number_types.UOffsetTFlags.py_type(TYPE), 0)
def AddTYPE(builder, TYPE):
    return EOOAddTYPE(builder, TYPE)
def EOOEnd(builder): return builder.EndObject()
def End(builder):
    return EOOEnd(builder)

class EOOT(object):

    # EOOT
    def __init__(self):
        self.EOBSERVATION_ID = None  # type: str
        self.CLASSIFICATION = None  # type: str
        self.OB_TIME = None  # type: str
        self.CORR_QUALITY = 0.0  # type: float
        self.ID_ON_ORBIT = None  # type: str
        self.SENSOR_ID = None  # type: str
        self.COLLECT_METHOD = None  # type: str
        self.NORAD_CAT_ID = 0  # type: int
        self.TASK_ID = None  # type: str
        self.TRANSACTION_ID = None  # type: str
        self.TRACK_ID = None  # type: str
        self.OB_POSITION = None  # type: str
        self.ORIG_OBJECT_ID = None  # type: str
        self.ORIG_SENSOR_ID = None  # type: str
        self.UCT = False  # type: bool
        self.AZIMUTH = 0.0  # type: float
        self.AZIMUTH_UNC = 0.0  # type: float
        self.AZIMUTH_BIAS = 0.0  # type: float
        self.AZIMUTH_RATE = 0.0  # type: float
        self.ELEVATION = 0.0  # type: float
        self.ELEVATION_UNC = 0.0  # type: float
        self.ELEVATION_BIAS = 0.0  # type: float
        self.ELEVATION_RATE = 0.0  # type: float
        self.RANGE = 0.0  # type: float
        self.RANGE_UNC = 0.0  # type: float
        self.RANGE_BIAS = 0.0  # type: float
        self.RANGE_RATE = 0.0  # type: float
        self.RANGE_RATE_UNC = 0.0  # type: float
        self.RA = 0.0  # type: float
        self.RA_RATE = 0.0  # type: float
        self.RA_UNC = 0.0  # type: float
        self.RA_BIAS = 0.0  # type: float
        self.DECLINATION = 0.0  # type: float
        self.DECLINATION_RATE = 0.0  # type: float
        self.DECLINATION_UNC = 0.0  # type: float
        self.DECLINATION_BIAS = 0.0  # type: float
        self.LOSX = 0.0  # type: float
        self.LOSY = 0.0  # type: float
        self.LOSZ = 0.0  # type: float
        self.LOS_UNC = 0.0  # type: float
        self.LOSXVEL = 0.0  # type: float
        self.LOSYVEL = 0.0  # type: float
        self.LOSZVEL = 0.0  # type: float
        self.SENLAT = 0.0  # type: float
        self.SENLON = 0.0  # type: float
        self.SENALT = 0.0  # type: float
        self.SENX = 0.0  # type: float
        self.SENY = 0.0  # type: float
        self.SENZ = 0.0  # type: float
        self.FOV_COUNT = 0  # type: int
        self.EXP_DURATION = 0.0  # type: float
        self.ZEROPTD = 0.0  # type: float
        self.NET_OBJ_SIG = 0.0  # type: float
        self.NET_OBJ_SIG_UNC = 0.0  # type: float
        self.MAG = 0.0  # type: float
        self.MAG_UNC = 0.0  # type: float
        self.MAG_NORM_RANGE = 0.0  # type: float
        self.GEOLAT = 0.0  # type: float
        self.GEOLON = 0.0  # type: float
        self.GEOALT = 0.0  # type: float
        self.GEORANGE = 0.0  # type: float
        self.SKY_BKGRND = 0.0  # type: float
        self.PRIMARY_EXTINCTION = 0.0  # type: float
        self.PRIMARY_EXTINCTION_UNC = 0.0  # type: float
        self.SOLAR_PHASE_ANGLE = 0.0  # type: float
        self.SOLAR_EQ_PHASE_ANGLE = 0.0  # type: float
        self.SOLAR_DEC_ANGLE = 0.0  # type: float
        self.SHUTTER_DELAY = 0.0  # type: float
        self.TIMING_BIAS = 0.0  # type: float
        self.RAW_FILE_URI = None  # type: str
        self.INTENSITY = 0.0  # type: float
        self.BG_INTENSITY = 0.0  # type: float
        self.DESCRIPTOR = None  # type: str
        self.SOURCE = None  # type: str
        self.ORIGIN = None  # type: str
        self.DATA_MODE = None  # type: str
        self.CREATED_AT = None  # type: str
        self.CREATED_BY = None  # type: str
        self.REFERENCE_FRAME = None  # type: str
        self.SEN_REFERENCE_FRAME = None  # type: str
        self.UMBRA = False  # type: bool
        self.PENUMBRA = False  # type: bool
        self.ORIG_NETWORK = None  # type: str
        self.SOURCE_DL = None  # type: str
        self.TYPE = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        EOO = EOO()
        EOO.Init(buf, pos)
        return cls.InitFromObj(EOO)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, EOO):
        x = EOOT()
        x._UnPack(EOO)
        return x

    # EOOT
    def _UnPack(self, EOO):
        if EOO is None:
            return
        self.EOBSERVATION_ID = EOO.EOBSERVATION_ID()
        self.CLASSIFICATION = EOO.CLASSIFICATION()
        self.OB_TIME = EOO.OB_TIME()
        self.CORR_QUALITY = EOO.CORR_QUALITY()
        self.ID_ON_ORBIT = EOO.ID_ON_ORBIT()
        self.SENSOR_ID = EOO.SENSOR_ID()
        self.COLLECT_METHOD = EOO.COLLECT_METHOD()
        self.NORAD_CAT_ID = EOO.NORAD_CAT_ID()
        self.TASK_ID = EOO.TASK_ID()
        self.TRANSACTION_ID = EOO.TRANSACTION_ID()
        self.TRACK_ID = EOO.TRACK_ID()
        self.OB_POSITION = EOO.OB_POSITION()
        self.ORIG_OBJECT_ID = EOO.ORIG_OBJECT_ID()
        self.ORIG_SENSOR_ID = EOO.ORIG_SENSOR_ID()
        self.UCT = EOO.UCT()
        self.AZIMUTH = EOO.AZIMUTH()
        self.AZIMUTH_UNC = EOO.AZIMUTH_UNC()
        self.AZIMUTH_BIAS = EOO.AZIMUTH_BIAS()
        self.AZIMUTH_RATE = EOO.AZIMUTH_RATE()
        self.ELEVATION = EOO.ELEVATION()
        self.ELEVATION_UNC = EOO.ELEVATION_UNC()
        self.ELEVATION_BIAS = EOO.ELEVATION_BIAS()
        self.ELEVATION_RATE = EOO.ELEVATION_RATE()
        self.RANGE = EOO.RANGE()
        self.RANGE_UNC = EOO.RANGE_UNC()
        self.RANGE_BIAS = EOO.RANGE_BIAS()
        self.RANGE_RATE = EOO.RANGE_RATE()
        self.RANGE_RATE_UNC = EOO.RANGE_RATE_UNC()
        self.RA = EOO.RA()
        self.RA_RATE = EOO.RA_RATE()
        self.RA_UNC = EOO.RA_UNC()
        self.RA_BIAS = EOO.RA_BIAS()
        self.DECLINATION = EOO.DECLINATION()
        self.DECLINATION_RATE = EOO.DECLINATION_RATE()
        self.DECLINATION_UNC = EOO.DECLINATION_UNC()
        self.DECLINATION_BIAS = EOO.DECLINATION_BIAS()
        self.LOSX = EOO.LOSX()
        self.LOSY = EOO.LOSY()
        self.LOSZ = EOO.LOSZ()
        self.LOS_UNC = EOO.LOS_UNC()
        self.LOSXVEL = EOO.LOSXVEL()
        self.LOSYVEL = EOO.LOSYVEL()
        self.LOSZVEL = EOO.LOSZVEL()
        self.SENLAT = EOO.SENLAT()
        self.SENLON = EOO.SENLON()
        self.SENALT = EOO.SENALT()
        self.SENX = EOO.SENX()
        self.SENY = EOO.SENY()
        self.SENZ = EOO.SENZ()
        self.FOV_COUNT = EOO.FOV_COUNT()
        self.EXP_DURATION = EOO.EXP_DURATION()
        self.ZEROPTD = EOO.ZEROPTD()
        self.NET_OBJ_SIG = EOO.NET_OBJ_SIG()
        self.NET_OBJ_SIG_UNC = EOO.NET_OBJ_SIG_UNC()
        self.MAG = EOO.MAG()
        self.MAG_UNC = EOO.MAG_UNC()
        self.MAG_NORM_RANGE = EOO.MAG_NORM_RANGE()
        self.GEOLAT = EOO.GEOLAT()
        self.GEOLON = EOO.GEOLON()
        self.GEOALT = EOO.GEOALT()
        self.GEORANGE = EOO.GEORANGE()
        self.SKY_BKGRND = EOO.SKY_BKGRND()
        self.PRIMARY_EXTINCTION = EOO.PRIMARY_EXTINCTION()
        self.PRIMARY_EXTINCTION_UNC = EOO.PRIMARY_EXTINCTION_UNC()
        self.SOLAR_PHASE_ANGLE = EOO.SOLAR_PHASE_ANGLE()
        self.SOLAR_EQ_PHASE_ANGLE = EOO.SOLAR_EQ_PHASE_ANGLE()
        self.SOLAR_DEC_ANGLE = EOO.SOLAR_DEC_ANGLE()
        self.SHUTTER_DELAY = EOO.SHUTTER_DELAY()
        self.TIMING_BIAS = EOO.TIMING_BIAS()
        self.RAW_FILE_URI = EOO.RAW_FILE_URI()
        self.INTENSITY = EOO.INTENSITY()
        self.BG_INTENSITY = EOO.BG_INTENSITY()
        self.DESCRIPTOR = EOO.DESCRIPTOR()
        self.SOURCE = EOO.SOURCE()
        self.ORIGIN = EOO.ORIGIN()
        self.DATA_MODE = EOO.DATA_MODE()
        self.CREATED_AT = EOO.CREATED_AT()
        self.CREATED_BY = EOO.CREATED_BY()
        self.REFERENCE_FRAME = EOO.REFERENCE_FRAME()
        self.SEN_REFERENCE_FRAME = EOO.SEN_REFERENCE_FRAME()
        self.UMBRA = EOO.UMBRA()
        self.PENUMBRA = EOO.PENUMBRA()
        self.ORIG_NETWORK = EOO.ORIG_NETWORK()
        self.SOURCE_DL = EOO.SOURCE_DL()
        self.TYPE = EOO.TYPE()

    # EOOT
    def Pack(self, builder):
        if self.EOBSERVATION_ID is not None:
            EOBSERVATION_ID = builder.CreateString(self.EOBSERVATION_ID)
        if self.CLASSIFICATION is not None:
            CLASSIFICATION = builder.CreateString(self.CLASSIFICATION)
        if self.OB_TIME is not None:
            OB_TIME = builder.CreateString(self.OB_TIME)
        if self.ID_ON_ORBIT is not None:
            ID_ON_ORBIT = builder.CreateString(self.ID_ON_ORBIT)
        if self.SENSOR_ID is not None:
            SENSOR_ID = builder.CreateString(self.SENSOR_ID)
        if self.COLLECT_METHOD is not None:
            COLLECT_METHOD = builder.CreateString(self.COLLECT_METHOD)
        if self.TASK_ID is not None:
            TASK_ID = builder.CreateString(self.TASK_ID)
        if self.TRANSACTION_ID is not None:
            TRANSACTION_ID = builder.CreateString(self.TRANSACTION_ID)
        if self.TRACK_ID is not None:
            TRACK_ID = builder.CreateString(self.TRACK_ID)
        if self.OB_POSITION is not None:
            OB_POSITION = builder.CreateString(self.OB_POSITION)
        if self.ORIG_OBJECT_ID is not None:
            ORIG_OBJECT_ID = builder.CreateString(self.ORIG_OBJECT_ID)
        if self.ORIG_SENSOR_ID is not None:
            ORIG_SENSOR_ID = builder.CreateString(self.ORIG_SENSOR_ID)
        if self.RAW_FILE_URI is not None:
            RAW_FILE_URI = builder.CreateString(self.RAW_FILE_URI)
        if self.DESCRIPTOR is not None:
            DESCRIPTOR = builder.CreateString(self.DESCRIPTOR)
        if self.SOURCE is not None:
            SOURCE = builder.CreateString(self.SOURCE)
        if self.ORIGIN is not None:
            ORIGIN = builder.CreateString(self.ORIGIN)
        if self.DATA_MODE is not None:
            DATA_MODE = builder.CreateString(self.DATA_MODE)
        if self.CREATED_AT is not None:
            CREATED_AT = builder.CreateString(self.CREATED_AT)
        if self.CREATED_BY is not None:
            CREATED_BY = builder.CreateString(self.CREATED_BY)
        if self.REFERENCE_FRAME is not None:
            REFERENCE_FRAME = builder.CreateString(self.REFERENCE_FRAME)
        if self.SEN_REFERENCE_FRAME is not None:
            SEN_REFERENCE_FRAME = builder.CreateString(self.SEN_REFERENCE_FRAME)
        if self.ORIG_NETWORK is not None:
            ORIG_NETWORK = builder.CreateString(self.ORIG_NETWORK)
        if self.SOURCE_DL is not None:
            SOURCE_DL = builder.CreateString(self.SOURCE_DL)
        if self.TYPE is not None:
            TYPE = builder.CreateString(self.TYPE)
        EOOStart(builder)
        if self.EOBSERVATION_ID is not None:
            EOOAddEOBSERVATION_ID(builder, EOBSERVATION_ID)
        if self.CLASSIFICATION is not None:
            EOOAddCLASSIFICATION(builder, CLASSIFICATION)
        if self.OB_TIME is not None:
            EOOAddOB_TIME(builder, OB_TIME)
        EOOAddCORR_QUALITY(builder, self.CORR_QUALITY)
        if self.ID_ON_ORBIT is not None:
            EOOAddID_ON_ORBIT(builder, ID_ON_ORBIT)
        if self.SENSOR_ID is not None:
            EOOAddSENSOR_ID(builder, SENSOR_ID)
        if self.COLLECT_METHOD is not None:
            EOOAddCOLLECT_METHOD(builder, COLLECT_METHOD)
        EOOAddNORAD_CAT_ID(builder, self.NORAD_CAT_ID)
        if self.TASK_ID is not None:
            EOOAddTASK_ID(builder, TASK_ID)
        if self.TRANSACTION_ID is not None:
            EOOAddTRANSACTION_ID(builder, TRANSACTION_ID)
        if self.TRACK_ID is not None:
            EOOAddTRACK_ID(builder, TRACK_ID)
        if self.OB_POSITION is not None:
            EOOAddOB_POSITION(builder, OB_POSITION)
        if self.ORIG_OBJECT_ID is not None:
            EOOAddORIG_OBJECT_ID(builder, ORIG_OBJECT_ID)
        if self.ORIG_SENSOR_ID is not None:
            EOOAddORIG_SENSOR_ID(builder, ORIG_SENSOR_ID)
        EOOAddUCT(builder, self.UCT)
        EOOAddAZIMUTH(builder, self.AZIMUTH)
        EOOAddAZIMUTH_UNC(builder, self.AZIMUTH_UNC)
        EOOAddAZIMUTH_BIAS(builder, self.AZIMUTH_BIAS)
        EOOAddAZIMUTH_RATE(builder, self.AZIMUTH_RATE)
        EOOAddELEVATION(builder, self.ELEVATION)
        EOOAddELEVATION_UNC(builder, self.ELEVATION_UNC)
        EOOAddELEVATION_BIAS(builder, self.ELEVATION_BIAS)
        EOOAddELEVATION_RATE(builder, self.ELEVATION_RATE)
        EOOAddRANGE(builder, self.RANGE)
        EOOAddRANGE_UNC(builder, self.RANGE_UNC)
        EOOAddRANGE_BIAS(builder, self.RANGE_BIAS)
        EOOAddRANGE_RATE(builder, self.RANGE_RATE)
        EOOAddRANGE_RATE_UNC(builder, self.RANGE_RATE_UNC)
        EOOAddRA(builder, self.RA)
        EOOAddRA_RATE(builder, self.RA_RATE)
        EOOAddRA_UNC(builder, self.RA_UNC)
        EOOAddRA_BIAS(builder, self.RA_BIAS)
        EOOAddDECLINATION(builder, self.DECLINATION)
        EOOAddDECLINATION_RATE(builder, self.DECLINATION_RATE)
        EOOAddDECLINATION_UNC(builder, self.DECLINATION_UNC)
        EOOAddDECLINATION_BIAS(builder, self.DECLINATION_BIAS)
        EOOAddLOSX(builder, self.LOSX)
        EOOAddLOSY(builder, self.LOSY)
        EOOAddLOSZ(builder, self.LOSZ)
        EOOAddLOS_UNC(builder, self.LOS_UNC)
        EOOAddLOSXVEL(builder, self.LOSXVEL)
        EOOAddLOSYVEL(builder, self.LOSYVEL)
        EOOAddLOSZVEL(builder, self.LOSZVEL)
        EOOAddSENLAT(builder, self.SENLAT)
        EOOAddSENLON(builder, self.SENLON)
        EOOAddSENALT(builder, self.SENALT)
        EOOAddSENX(builder, self.SENX)
        EOOAddSENY(builder, self.SENY)
        EOOAddSENZ(builder, self.SENZ)
        EOOAddFOV_COUNT(builder, self.FOV_COUNT)
        EOOAddEXP_DURATION(builder, self.EXP_DURATION)
        EOOAddZEROPTD(builder, self.ZEROPTD)
        EOOAddNET_OBJ_SIG(builder, self.NET_OBJ_SIG)
        EOOAddNET_OBJ_SIG_UNC(builder, self.NET_OBJ_SIG_UNC)
        EOOAddMAG(builder, self.MAG)
        EOOAddMAG_UNC(builder, self.MAG_UNC)
        EOOAddMAG_NORM_RANGE(builder, self.MAG_NORM_RANGE)
        EOOAddGEOLAT(builder, self.GEOLAT)
        EOOAddGEOLON(builder, self.GEOLON)
        EOOAddGEOALT(builder, self.GEOALT)
        EOOAddGEORANGE(builder, self.GEORANGE)
        EOOAddSKY_BKGRND(builder, self.SKY_BKGRND)
        EOOAddPRIMARY_EXTINCTION(builder, self.PRIMARY_EXTINCTION)
        EOOAddPRIMARY_EXTINCTION_UNC(builder, self.PRIMARY_EXTINCTION_UNC)
        EOOAddSOLAR_PHASE_ANGLE(builder, self.SOLAR_PHASE_ANGLE)
        EOOAddSOLAR_EQ_PHASE_ANGLE(builder, self.SOLAR_EQ_PHASE_ANGLE)
        EOOAddSOLAR_DEC_ANGLE(builder, self.SOLAR_DEC_ANGLE)
        EOOAddSHUTTER_DELAY(builder, self.SHUTTER_DELAY)
        EOOAddTIMING_BIAS(builder, self.TIMING_BIAS)
        if self.RAW_FILE_URI is not None:
            EOOAddRAW_FILE_URI(builder, RAW_FILE_URI)
        EOOAddINTENSITY(builder, self.INTENSITY)
        EOOAddBG_INTENSITY(builder, self.BG_INTENSITY)
        if self.DESCRIPTOR is not None:
            EOOAddDESCRIPTOR(builder, DESCRIPTOR)
        if self.SOURCE is not None:
            EOOAddSOURCE(builder, SOURCE)
        if self.ORIGIN is not None:
            EOOAddORIGIN(builder, ORIGIN)
        if self.DATA_MODE is not None:
            EOOAddDATA_MODE(builder, DATA_MODE)
        if self.CREATED_AT is not None:
            EOOAddCREATED_AT(builder, CREATED_AT)
        if self.CREATED_BY is not None:
            EOOAddCREATED_BY(builder, CREATED_BY)
        if self.REFERENCE_FRAME is not None:
            EOOAddREFERENCE_FRAME(builder, REFERENCE_FRAME)
        if self.SEN_REFERENCE_FRAME is not None:
            EOOAddSEN_REFERENCE_FRAME(builder, SEN_REFERENCE_FRAME)
        EOOAddUMBRA(builder, self.UMBRA)
        EOOAddPENUMBRA(builder, self.PENUMBRA)
        if self.ORIG_NETWORK is not None:
            EOOAddORIG_NETWORK(builder, ORIG_NETWORK)
        if self.SOURCE_DL is not None:
            EOOAddSOURCE_DL(builder, SOURCE_DL)
        if self.TYPE is not None:
            EOOAddTYPE(builder, TYPE)
        EOO = EOOEnd(builder)
        return EOO
