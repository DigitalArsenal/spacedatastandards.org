# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Information about a person
class Person(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Person()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPerson(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PersonBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x45\x50\x4D", size_prefixed=size_prefixed)

    # Person
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Family name or surname of the person
    # Person
    def FAMILY_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Given name or first name of the person
    # Person
    def GIVEN_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional name or middle name of the person
    # Person
    def ADDITIONAL_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Honorific prefix preceding the person's name
    # Person
    def HONORIFIC_PREFIX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Honorific suffix following the person's name
    # Person
    def HONORIFIC_SUFFIX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def PersonStart(builder): builder.StartObject(5)
def Start(builder):
    return PersonStart(builder)
def PersonAddFAMILY_NAME(builder, FAMILY_NAME): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(FAMILY_NAME), 0)
def AddFAMILY_NAME(builder, FAMILY_NAME):
    return PersonAddFAMILY_NAME(builder, FAMILY_NAME)
def PersonAddGIVEN_NAME(builder, GIVEN_NAME): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(GIVEN_NAME), 0)
def AddGIVEN_NAME(builder, GIVEN_NAME):
    return PersonAddGIVEN_NAME(builder, GIVEN_NAME)
def PersonAddADDITIONAL_NAME(builder, ADDITIONAL_NAME): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ADDITIONAL_NAME), 0)
def AddADDITIONAL_NAME(builder, ADDITIONAL_NAME):
    return PersonAddADDITIONAL_NAME(builder, ADDITIONAL_NAME)
def PersonAddHONORIFIC_PREFIX(builder, HONORIFIC_PREFIX): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(HONORIFIC_PREFIX), 0)
def AddHONORIFIC_PREFIX(builder, HONORIFIC_PREFIX):
    return PersonAddHONORIFIC_PREFIX(builder, HONORIFIC_PREFIX)
def PersonAddHONORIFIC_SUFFIX(builder, HONORIFIC_SUFFIX): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(HONORIFIC_SUFFIX), 0)
def AddHONORIFIC_SUFFIX(builder, HONORIFIC_SUFFIX):
    return PersonAddHONORIFIC_SUFFIX(builder, HONORIFIC_SUFFIX)
def PersonEnd(builder): return builder.EndObject()
def End(builder):
    return PersonEnd(builder)

class PersonT(object):

    # PersonT
    def __init__(self):
        self.FAMILY_NAME = None  # type: str
        self.GIVEN_NAME = None  # type: str
        self.ADDITIONAL_NAME = None  # type: str
        self.HONORIFIC_PREFIX = None  # type: str
        self.HONORIFIC_SUFFIX = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        person = Person()
        person.Init(buf, pos)
        return cls.InitFromObj(person)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, person):
        x = PersonT()
        x._UnPack(person)
        return x

    # PersonT
    def _UnPack(self, person):
        if person is None:
            return
        self.FAMILY_NAME = person.FAMILY_NAME()
        self.GIVEN_NAME = person.GIVEN_NAME()
        self.ADDITIONAL_NAME = person.ADDITIONAL_NAME()
        self.HONORIFIC_PREFIX = person.HONORIFIC_PREFIX()
        self.HONORIFIC_SUFFIX = person.HONORIFIC_SUFFIX()

    # PersonT
    def Pack(self, builder):
        if self.FAMILY_NAME is not None:
            FAMILY_NAME = builder.CreateString(self.FAMILY_NAME)
        if self.GIVEN_NAME is not None:
            GIVEN_NAME = builder.CreateString(self.GIVEN_NAME)
        if self.ADDITIONAL_NAME is not None:
            ADDITIONAL_NAME = builder.CreateString(self.ADDITIONAL_NAME)
        if self.HONORIFIC_PREFIX is not None:
            HONORIFIC_PREFIX = builder.CreateString(self.HONORIFIC_PREFIX)
        if self.HONORIFIC_SUFFIX is not None:
            HONORIFIC_SUFFIX = builder.CreateString(self.HONORIFIC_SUFFIX)
        PersonStart(builder)
        if self.FAMILY_NAME is not None:
            PersonAddFAMILY_NAME(builder, FAMILY_NAME)
        if self.GIVEN_NAME is not None:
            PersonAddGIVEN_NAME(builder, GIVEN_NAME)
        if self.ADDITIONAL_NAME is not None:
            PersonAddADDITIONAL_NAME(builder, ADDITIONAL_NAME)
        if self.HONORIFIC_PREFIX is not None:
            PersonAddHONORIFIC_PREFIX(builder, HONORIFIC_PREFIX)
        if self.HONORIFIC_SUFFIX is not None:
            PersonAddHONORIFIC_SUFFIX(builder, HONORIFIC_SUFFIX)
        person = PersonEnd(builder)
        return person
