# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Represents a Distinguished Name composed of DNComponents
class DistinguishedName(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DistinguishedName()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDistinguishedName(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DistinguishedNameBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x45\x50\x4D", size_prefixed=size_prefixed)

    # DistinguishedName
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The sequence of components making up the DN
    # DistinguishedName
    def COMPONENTS(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DNComponent import DNComponent
            obj = DNComponent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DistinguishedName
    def COMPONENTSLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DistinguishedName
    def COMPONENTSIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def DistinguishedNameStart(builder): builder.StartObject(1)
def Start(builder):
    return DistinguishedNameStart(builder)
def DistinguishedNameAddCOMPONENTS(builder, COMPONENTS): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(COMPONENTS), 0)
def AddCOMPONENTS(builder, COMPONENTS):
    return DistinguishedNameAddCOMPONENTS(builder, COMPONENTS)
def DistinguishedNameStartCOMPONENTSVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCOMPONENTSVector(builder, numElems):
    return DistinguishedNameStartCOMPONENTSVector(builder, numElems)
def DistinguishedNameEnd(builder): return builder.EndObject()
def End(builder):
    return DistinguishedNameEnd(builder)
import DNComponent
try:
    from typing import List
except:
    pass

class DistinguishedNameT(object):

    # DistinguishedNameT
    def __init__(self):
        self.COMPONENTS = None  # type: List[DNComponent.DNComponentT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        distinguishedName = DistinguishedName()
        distinguishedName.Init(buf, pos)
        return cls.InitFromObj(distinguishedName)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, distinguishedName):
        x = DistinguishedNameT()
        x._UnPack(distinguishedName)
        return x

    # DistinguishedNameT
    def _UnPack(self, distinguishedName):
        if distinguishedName is None:
            return
        if not distinguishedName.COMPONENTSIsNone():
            self.COMPONENTS = []
            for i in range(distinguishedName.COMPONENTSLength()):
                if distinguishedName.COMPONENTS(i) is None:
                    self.COMPONENTS.append(None)
                else:
                    dNComponent_ = DNComponent.DNComponentT.InitFromObj(distinguishedName.COMPONENTS(i))
                    self.COMPONENTS.append(dNComponent_)

    # DistinguishedNameT
    def Pack(self, builder):
        if self.COMPONENTS is not None:
            COMPONENTSlist = []
            for i in range(len(self.COMPONENTS)):
                COMPONENTSlist.append(self.COMPONENTS[i].Pack(builder))
            DistinguishedNameStartCOMPONENTSVector(builder, len(self.COMPONENTS))
            for i in reversed(range(len(self.COMPONENTS))):
                builder.PrependUOffsetTRelative(COMPONENTSlist[i])
            COMPONENTS = builder.EndVector()
        DistinguishedNameStart(builder)
        if self.COMPONENTS is not None:
            DistinguishedNameAddCOMPONENTS(builder, COMPONENTS)
        distinguishedName = DistinguishedNameEnd(builder)
        return distinguishedName
