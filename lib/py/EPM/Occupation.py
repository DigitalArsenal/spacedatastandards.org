# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Information about a person's occupation
class Occupation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Occupation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOccupation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OccupationBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x45\x50\x4D", size_prefixed=size_prefixed)

    # Occupation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the occupation
    # Occupation
    def NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OccupationStart(builder): builder.StartObject(1)
def Start(builder):
    return OccupationStart(builder)
def OccupationAddNAME(builder, NAME): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(NAME), 0)
def AddNAME(builder, NAME):
    return OccupationAddNAME(builder, NAME)
def OccupationEnd(builder): return builder.EndObject()
def End(builder):
    return OccupationEnd(builder)

class OccupationT(object):

    # OccupationT
    def __init__(self):
        self.NAME = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        occupation = Occupation()
        occupation.Init(buf, pos)
        return cls.InitFromObj(occupation)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, occupation):
        x = OccupationT()
        x._UnPack(occupation)
        return x

    # OccupationT
    def _UnPack(self, occupation):
        if occupation is None:
            return
        self.NAME = occupation.NAME()

    # OccupationT
    def Pack(self, builder):
        if self.NAME is not None:
            NAME = builder.CreateString(self.NAME)
        OccupationStart(builder)
        if self.NAME is not None:
            OccupationAddNAME(builder, NAME)
        occupation = OccupationEnd(builder)
        return occupation
