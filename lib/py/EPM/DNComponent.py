# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Represents a component of a Distinguished Name (DN) in LDAP
class DNComponent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DNComponent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDNComponent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DNComponentBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x45\x50\x4D", size_prefixed=size_prefixed)

    # DNComponent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The type of the DN component
    # DNComponent
    def TYPE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The value of the DN component
    # DNComponent
    def VALUE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DNComponentStart(builder): builder.StartObject(2)
def Start(builder):
    return DNComponentStart(builder)
def DNComponentAddTYPE(builder, TYPE): builder.PrependInt8Slot(0, TYPE, 0)
def AddTYPE(builder, TYPE):
    return DNComponentAddTYPE(builder, TYPE)
def DNComponentAddVALUE(builder, VALUE): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(VALUE), 0)
def AddVALUE(builder, VALUE):
    return DNComponentAddVALUE(builder, VALUE)
def DNComponentEnd(builder): return builder.EndObject()
def End(builder):
    return DNComponentEnd(builder)

class DNComponentT(object):

    # DNComponentT
    def __init__(self):
        self.TYPE = 0  # type: int
        self.VALUE = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dncomponent = DNComponent()
        dncomponent.Init(buf, pos)
        return cls.InitFromObj(dncomponent)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dncomponent):
        x = DNComponentT()
        x._UnPack(dncomponent)
        return x

    # DNComponentT
    def _UnPack(self, dncomponent):
        if dncomponent is None:
            return
        self.TYPE = dncomponent.TYPE()
        self.VALUE = dncomponent.VALUE()

    # DNComponentT
    def Pack(self, builder):
        if self.VALUE is not None:
            VALUE = builder.CreateString(self.VALUE)
        DNComponentStart(builder)
        DNComponentAddTYPE(builder, self.TYPE)
        if self.VALUE is not None:
            DNComponentAddVALUE(builder, VALUE)
        dncomponent = DNComponentEnd(builder)
        return dncomponent
