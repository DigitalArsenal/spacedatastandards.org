# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Basic information about an organization
class Organization(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Organization()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOrganization(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OrganizationBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x45\x50\x4D", size_prefixed=size_prefixed)

    # Organization
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Common name of the organization
    # Organization
    def NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Legal name of the organization
    # Organization
    def LEGAL_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OrganizationStart(builder): builder.StartObject(2)
def Start(builder):
    return OrganizationStart(builder)
def OrganizationAddNAME(builder, NAME): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(NAME), 0)
def AddNAME(builder, NAME):
    return OrganizationAddNAME(builder, NAME)
def OrganizationAddLEGAL_NAME(builder, LEGAL_NAME): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(LEGAL_NAME), 0)
def AddLEGAL_NAME(builder, LEGAL_NAME):
    return OrganizationAddLEGAL_NAME(builder, LEGAL_NAME)
def OrganizationEnd(builder): return builder.EndObject()
def End(builder):
    return OrganizationEnd(builder)

class OrganizationT(object):

    # OrganizationT
    def __init__(self):
        self.NAME = None  # type: str
        self.LEGAL_NAME = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        organization = Organization()
        organization.Init(buf, pos)
        return cls.InitFromObj(organization)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, organization):
        x = OrganizationT()
        x._UnPack(organization)
        return x

    # OrganizationT
    def _UnPack(self, organization):
        if organization is None:
            return
        self.NAME = organization.NAME()
        self.LEGAL_NAME = organization.LEGAL_NAME()

    # OrganizationT
    def Pack(self, builder):
        if self.NAME is not None:
            NAME = builder.CreateString(self.NAME)
        if self.LEGAL_NAME is not None:
            LEGAL_NAME = builder.CreateString(self.LEGAL_NAME)
        OrganizationStart(builder)
        if self.NAME is not None:
            OrganizationAddNAME(builder, NAME)
        if self.LEGAL_NAME is not None:
            OrganizationAddLEGAL_NAME(builder, LEGAL_NAME)
        organization = OrganizationEnd(builder)
        return organization
