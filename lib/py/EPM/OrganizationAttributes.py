# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Specific attributes for an Organization
class OrganizationAttributes(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OrganizationAttributes()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOrganizationAttributes(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OrganizationAttributesBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x24\x45\x50\x4D", size_prefixed=size_prefixed)

    # OrganizationAttributes
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Legal name of the organization
    # OrganizationAttributes
    def LEGAL_NAME(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OrganizationAttributesStart(builder): builder.StartObject(1)
def Start(builder):
    return OrganizationAttributesStart(builder)
def OrganizationAttributesAddLEGAL_NAME(builder, LEGAL_NAME): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(LEGAL_NAME), 0)
def AddLEGAL_NAME(builder, LEGAL_NAME):
    return OrganizationAttributesAddLEGAL_NAME(builder, LEGAL_NAME)
def OrganizationAttributesEnd(builder): return builder.EndObject()
def End(builder):
    return OrganizationAttributesEnd(builder)

class OrganizationAttributesT(object):

    # OrganizationAttributesT
    def __init__(self):
        self.LEGAL_NAME = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        organizationAttributes = OrganizationAttributes()
        organizationAttributes.Init(buf, pos)
        return cls.InitFromObj(organizationAttributes)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, organizationAttributes):
        x = OrganizationAttributesT()
        x._UnPack(organizationAttributes)
        return x

    # OrganizationAttributesT
    def _UnPack(self, organizationAttributes):
        if organizationAttributes is None:
            return
        self.LEGAL_NAME = organizationAttributes.LEGAL_NAME()

    # OrganizationAttributesT
    def Pack(self, builder):
        if self.LEGAL_NAME is not None:
            LEGAL_NAME = builder.CreateString(self.LEGAL_NAME)
        OrganizationAttributesStart(builder)
        if self.LEGAL_NAME is not None:
            OrganizationAttributesAddLEGAL_NAME(builder, LEGAL_NAME)
        organizationAttributes = OrganizationAttributesEnd(builder)
        return organizationAttributes
