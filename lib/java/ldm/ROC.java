// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Rocket Configuration
 */
@SuppressWarnings("unused")
public final class ROC extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static ROC getRootAsROC(ByteBuffer _bb) { return getRootAsROC(_bb, new ROC()); }
  public static ROC getRootAsROC(ByteBuffer _bb, ROC obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean ROCBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "$ROC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ROC __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Rocket Name
   */
  public String NAME() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer NAMEAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Rocket Family
   */
  public String FAMILY() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer FAMILYAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer FAMILYInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Rocket Variant
   */
  public String VARIANT() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer VARIANTAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer VARIANTInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Stages in the Rocket
   */
  public STAGE STAGES(int j) { return STAGES(new STAGE(), j); }
  public STAGE STAGES(STAGE obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int STAGESLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public STAGE.Vector stagesVector() { return stagesVector(new STAGE.Vector()); }
  public STAGE.Vector stagesVector(STAGE.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Sustainers in the Rocket
   */
  public SUSTAINER SUSTAINERS(int j) { return SUSTAINERS(new SUSTAINER(), j); }
  public SUSTAINER SUSTAINERS(SUSTAINER obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int SUSTAINERSLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public SUSTAINER.Vector sustainersVector() { return sustainersVector(new SUSTAINER.Vector()); }
  public SUSTAINER.Vector sustainersVector(SUSTAINER.Vector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createROC(FlatBufferBuilder builder,
      int NAMEOffset,
      int FAMILYOffset,
      int VARIANTOffset,
      int STAGESOffset,
      int SUSTAINERSOffset) {
    builder.startTable(5);
    ROC.addSustainers(builder, SUSTAINERSOffset);
    ROC.addStages(builder, STAGESOffset);
    ROC.addVariant(builder, VARIANTOffset);
    ROC.addFamily(builder, FAMILYOffset);
    ROC.addName(builder, NAMEOffset);
    return ROC.endROC(builder);
  }

  public static void startROC(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addName(FlatBufferBuilder builder, int NAMEOffset) { builder.addOffset(0, NAMEOffset, 0); }
  public static void addFamily(FlatBufferBuilder builder, int FAMILYOffset) { builder.addOffset(1, FAMILYOffset, 0); }
  public static void addVariant(FlatBufferBuilder builder, int VARIANTOffset) { builder.addOffset(2, VARIANTOffset, 0); }
  public static void addStages(FlatBufferBuilder builder, int STAGESOffset) { builder.addOffset(3, STAGESOffset, 0); }
  public static int createStagesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startStagesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSustainers(FlatBufferBuilder builder, int SUSTAINERSOffset) { builder.addOffset(4, SUSTAINERSOffset, 0); }
  public static int createSustainersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSustainersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endROC(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishROCBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "$ROC"); }
  public static void finishSizePrefixedROCBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "$ROC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ROC get(int j) { return get(new ROC(), j); }
    public ROC get(ROC obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

