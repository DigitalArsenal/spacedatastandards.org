// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Entity Profile Message
 */
@SuppressWarnings("unused")
public final class EPM extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static EPM getRootAsEPM(ByteBuffer _bb) { return getRootAsEPM(_bb, new EPM()); }
  public static EPM getRootAsEPM(ByteBuffer _bb, EPM obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean EPMBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "$EPM"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EPM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Distinguished Name of the entity
   */
  public String DN() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer DNAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer DNInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Common name of the entity (person or organization)
   */
  public String LEGAL_NAME() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer LEGAL_NAMEAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer LEGAL_NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Family name or surname of the person
   */
  public String FAMILY_NAME() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer FAMILY_NAMEAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer FAMILY_NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Given name or first name of the person
   */
  public String GIVEN_NAME() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer GIVEN_NAMEAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer GIVEN_NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Additional name or middle name of the person
   */
  public String ADDITIONAL_NAME() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ADDITIONAL_NAMEAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer ADDITIONAL_NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Honorific prefix preceding the person's name (e.g., Mr., Dr.)
   */
  public String HONORIFIC_PREFIX() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer HONORIFIC_PREFIXAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer HONORIFIC_PREFIXInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Honorific suffix following the person's name (e.g., Jr., Sr.)
   */
  public String HONORIFIC_SUFFIX() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer HONORIFIC_SUFFIXAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer HONORIFIC_SUFFIXInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Job title of the person
   */
  public String JOB_TITLE() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer JOB_TITLEAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer JOB_TITLEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Occupation of the person
   */
  public String OCCUPATION() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OCCUPATIONAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer OCCUPATIONInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Physical Address
   */
  public Address ADDRESS() { return ADDRESS(new Address()); }
  public Address ADDRESS(Address obj) { int o = __offset(22); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * Alternate names for the entity
   */
  public String ALTERNATE_NAMES(int j) { int o = __offset(24); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int ALTERNATE_NAMESLength() { int o = __offset(24); return o != 0 ? __vector_len(o) : 0; }
  public StringVector alternateNamesVector() { return alternateNamesVector(new StringVector()); }
  public StringVector alternateNamesVector(StringVector obj) { int o = __offset(24); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Email address of the entity
   */
  public String EMAIL() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer EMAILAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer EMAILInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Telephone number of the entity
   */
  public String TELEPHONE() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TELEPHONEAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer TELEPHONEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Cryptographic keys associated with the entity
   */
  public CryptoKey KEYS(int j) { return KEYS(new CryptoKey(), j); }
  public CryptoKey KEYS(CryptoKey obj, int j) { int o = __offset(30); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int KEYSLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public CryptoKey.Vector keysVector() { return keysVector(new CryptoKey.Vector()); }
  public CryptoKey.Vector keysVector(CryptoKey.Vector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Multiformat addresses associated with the entity
   */
  public String MULTIFORMAT_ADDRESS(int j) { int o = __offset(32); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int MULTIFORMAT_ADDRESSLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public StringVector multiformatAddressVector() { return multiformatAddressVector(new StringVector()); }
  public StringVector multiformatAddressVector(StringVector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createEPM(FlatBufferBuilder builder,
      int DNOffset,
      int LEGAL_NAMEOffset,
      int FAMILY_NAMEOffset,
      int GIVEN_NAMEOffset,
      int ADDITIONAL_NAMEOffset,
      int HONORIFIC_PREFIXOffset,
      int HONORIFIC_SUFFIXOffset,
      int JOB_TITLEOffset,
      int OCCUPATIONOffset,
      int ADDRESSOffset,
      int ALTERNATE_NAMESOffset,
      int EMAILOffset,
      int TELEPHONEOffset,
      int KEYSOffset,
      int MULTIFORMAT_ADDRESSOffset) {
    builder.startTable(15);
    EPM.addMultiformatAddress(builder, MULTIFORMAT_ADDRESSOffset);
    EPM.addKeys(builder, KEYSOffset);
    EPM.addTelephone(builder, TELEPHONEOffset);
    EPM.addEmail(builder, EMAILOffset);
    EPM.addAlternateNames(builder, ALTERNATE_NAMESOffset);
    EPM.addAddress(builder, ADDRESSOffset);
    EPM.addOccupation(builder, OCCUPATIONOffset);
    EPM.addJobTitle(builder, JOB_TITLEOffset);
    EPM.addHonorificSuffix(builder, HONORIFIC_SUFFIXOffset);
    EPM.addHonorificPrefix(builder, HONORIFIC_PREFIXOffset);
    EPM.addAdditionalName(builder, ADDITIONAL_NAMEOffset);
    EPM.addGivenName(builder, GIVEN_NAMEOffset);
    EPM.addFamilyName(builder, FAMILY_NAMEOffset);
    EPM.addLegalName(builder, LEGAL_NAMEOffset);
    EPM.addDn(builder, DNOffset);
    return EPM.endEPM(builder);
  }

  public static void startEPM(FlatBufferBuilder builder) { builder.startTable(15); }
  public static void addDn(FlatBufferBuilder builder, int DNOffset) { builder.addOffset(0, DNOffset, 0); }
  public static void addLegalName(FlatBufferBuilder builder, int LEGAL_NAMEOffset) { builder.addOffset(1, LEGAL_NAMEOffset, 0); }
  public static void addFamilyName(FlatBufferBuilder builder, int FAMILY_NAMEOffset) { builder.addOffset(2, FAMILY_NAMEOffset, 0); }
  public static void addGivenName(FlatBufferBuilder builder, int GIVEN_NAMEOffset) { builder.addOffset(3, GIVEN_NAMEOffset, 0); }
  public static void addAdditionalName(FlatBufferBuilder builder, int ADDITIONAL_NAMEOffset) { builder.addOffset(4, ADDITIONAL_NAMEOffset, 0); }
  public static void addHonorificPrefix(FlatBufferBuilder builder, int HONORIFIC_PREFIXOffset) { builder.addOffset(5, HONORIFIC_PREFIXOffset, 0); }
  public static void addHonorificSuffix(FlatBufferBuilder builder, int HONORIFIC_SUFFIXOffset) { builder.addOffset(6, HONORIFIC_SUFFIXOffset, 0); }
  public static void addJobTitle(FlatBufferBuilder builder, int JOB_TITLEOffset) { builder.addOffset(7, JOB_TITLEOffset, 0); }
  public static void addOccupation(FlatBufferBuilder builder, int OCCUPATIONOffset) { builder.addOffset(8, OCCUPATIONOffset, 0); }
  public static void addAddress(FlatBufferBuilder builder, int ADDRESSOffset) { builder.addOffset(9, ADDRESSOffset, 0); }
  public static void addAlternateNames(FlatBufferBuilder builder, int ALTERNATE_NAMESOffset) { builder.addOffset(10, ALTERNATE_NAMESOffset, 0); }
  public static int createAlternateNamesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAlternateNamesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addEmail(FlatBufferBuilder builder, int EMAILOffset) { builder.addOffset(11, EMAILOffset, 0); }
  public static void addTelephone(FlatBufferBuilder builder, int TELEPHONEOffset) { builder.addOffset(12, TELEPHONEOffset, 0); }
  public static void addKeys(FlatBufferBuilder builder, int KEYSOffset) { builder.addOffset(13, KEYSOffset, 0); }
  public static int createKeysVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startKeysVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMultiformatAddress(FlatBufferBuilder builder, int MULTIFORMAT_ADDRESSOffset) { builder.addOffset(14, MULTIFORMAT_ADDRESSOffset, 0); }
  public static int createMultiformatAddressVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMultiformatAddressVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endEPM(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEPMBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "$EPM"); }
  public static void finishSizePrefixedEPMBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "$EPM"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EPM get(int j) { return get(new EPM(), j); }
    public EPM get(EPM obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

