// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Score extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static Score getRootAsScore(ByteBuffer _bb) { return getRootAsScore(_bb, new Score()); }
  public static Score getRootAsScore(ByteBuffer _bb, Score obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Score __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String NORAD_CAT_ID() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer NORAD_CAT_IDAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer NORAD_CAT_IDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public byte TYPE() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public String TAG() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TAGAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer TAGInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public float SCORE() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createScore(FlatBufferBuilder builder,
      int NORAD_CAT_IDOffset,
      byte TYPE,
      int TAGOffset,
      float SCORE) {
    builder.startTable(4);
    Score.addScore(builder, SCORE);
    Score.addTag(builder, TAGOffset);
    Score.addNoradCatId(builder, NORAD_CAT_IDOffset);
    Score.addType(builder, TYPE);
    return Score.endScore(builder);
  }

  public static void startScore(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addNoradCatId(FlatBufferBuilder builder, int NORAD_CAT_IDOffset) { builder.addOffset(0, NORAD_CAT_IDOffset, 0); }
  public static void addType(FlatBufferBuilder builder, byte TYPE) { builder.addByte(1, TYPE, 0); }
  public static void addTag(FlatBufferBuilder builder, int TAGOffset) { builder.addOffset(2, TAGOffset, 0); }
  public static void addScore(FlatBufferBuilder builder, float SCORE) { builder.addFloat(3, SCORE, 0.0f); }
  public static int endScore(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Score get(int j) { return get(new Score(), j); }
    public Score get(Score obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

