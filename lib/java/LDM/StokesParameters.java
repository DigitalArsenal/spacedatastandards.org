// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Stokes parameters, representing different aspects of polarization
 */
@SuppressWarnings("unused")
public final class StokesParameters extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static StokesParameters getRootAsStokesParameters(ByteBuffer _bb) { return getRootAsStokesParameters(_bb, new StokesParameters()); }
  public static StokesParameters getRootAsStokesParameters(ByteBuffer _bb, StokesParameters obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public StokesParameters __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Intensity
   */
  public double I() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Linear polarization
   */
  public double Q() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Another linear polarization, orthogonal to Q
   */
  public double U() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Circular polarization
   */
  public double V() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createStokesParameters(FlatBufferBuilder builder,
      double I,
      double Q,
      double U,
      double V) {
    builder.startTable(4);
    StokesParameters.addV(builder, V);
    StokesParameters.addU(builder, U);
    StokesParameters.addQ(builder, Q);
    StokesParameters.addI(builder, I);
    return StokesParameters.endStokesParameters(builder);
  }

  public static void startStokesParameters(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addI(FlatBufferBuilder builder, double I) { builder.addDouble(0, I, 0.0); }
  public static void addQ(FlatBufferBuilder builder, double Q) { builder.addDouble(1, Q, 0.0); }
  public static void addU(FlatBufferBuilder builder, double U) { builder.addDouble(2, U, 0.0); }
  public static void addV(FlatBufferBuilder builder, double V) { builder.addDouble(3, V, 0.0); }
  public static int endStokesParameters(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public StokesParameters get(int j) { return get(new StokesParameters(), j); }
    public StokesParameters get(StokesParameters obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

