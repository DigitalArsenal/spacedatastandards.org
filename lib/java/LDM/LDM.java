// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Launch Data Message
 */
@SuppressWarnings("unused")
public final class LDM extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static LDM getRootAsLDM(ByteBuffer _bb) { return getRootAsLDM(_bb, new LDM()); }
  public static LDM getRootAsLDM(ByteBuffer _bb, LDM obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean LDMBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "$LDM"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LDM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Launch Site Information
   */
  public SIT SITE() { return SITE(new SIT()); }
  public SIT SITE(SIT obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * Azimuth at Launch (in Degrees)
   */
  public float AZIMUTH() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * References for Launch Data
   */
  public String REFERENCES() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer REFERENCESAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer REFERENCESInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Launching Agency Name
   */
  public String AGENCY_NAME() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer AGENCY_NAMEAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer AGENCY_NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Points of Contact for Launch
   */
  public EPM POINTS_OF_CONTACT(int j) { return POINTS_OF_CONTACT(new EPM(), j); }
  public EPM POINTS_OF_CONTACT(EPM obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int POINTS_OF_CONTACTLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public EPM.Vector pointsOfContactVector() { return pointsOfContactVector(new EPM.Vector()); }
  public EPM.Vector pointsOfContactVector(EPM.Vector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Operations Points of Contact for Launch
   */
  public EPM OPERATIONS_POINTS_OF_CONTACT(int j) { return OPERATIONS_POINTS_OF_CONTACT(new EPM(), j); }
  public EPM OPERATIONS_POINTS_OF_CONTACT(EPM obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int OPERATIONS_POINTS_OF_CONTACTLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public EPM.Vector operationsPointsOfContactVector() { return operationsPointsOfContactVector(new EPM.Vector()); }
  public EPM.Vector operationsPointsOfContactVector(EPM.Vector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Net Launch Time (UTC Format)
   */
  public String NET() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer NETAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer NETInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Rocket Configuration Details
   */
  public ROC ROCKET_CONFIGURATION() { return ROCKET_CONFIGURATION(new ROC()); }
  public ROC ROCKET_CONFIGURATION(ROC obj) { int o = __offset(18); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * Mission Name
   */
  public String MISSION_NAME() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MISSION_NAMEAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer MISSION_NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Description of the Mission
   */
  public String MISSION_DESCRIPTION() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MISSION_DESCRIPTIONAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer MISSION_DESCRIPTIONInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Type of the Mission (e.g., Test Flight, Satellite Deployment)
   */
  public String MISSION_TYPE() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MISSION_TYPEAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer MISSION_TYPEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Target Orbit Type (e.g., LEO, GEO)
   */
  public String ORBIT_TYPE() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ORBIT_TYPEAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer ORBIT_TYPEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Weather and Environmental Conditions at Launch
   */
  public String WEATHER_CONDITIONS() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer WEATHER_CONDITIONSAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer WEATHER_CONDITIONSInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Launch Outcome and Status (e.g., Successful, Failed)
   */
  public String LAUNCH_STATUS() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer LAUNCH_STATUSAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer LAUNCH_STATUSInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Webcast URL for the Launch
   */
  public String WEBCAST_URL() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer WEBCAST_URLAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer WEBCAST_URLInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Media Links Related to the Launch
   */
  public String MEDIA_LINKS(int j) { int o = __offset(34); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int MEDIA_LINKSLength() { int o = __offset(34); return o != 0 ? __vector_len(o) : 0; }
  public StringVector mediaLinksVector() { return mediaLinksVector(new StringVector()); }
  public StringVector mediaLinksVector(StringVector obj) { int o = __offset(34); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Earliest Possible Launch Times
   */
  public String EARLIEST_LAUNCH_TIMES(int j) { int o = __offset(36); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int EARLIEST_LAUNCH_TIMESLength() { int o = __offset(36); return o != 0 ? __vector_len(o) : 0; }
  public StringVector earliestLaunchTimesVector() { return earliestLaunchTimesVector(new StringVector()); }
  public StringVector earliestLaunchTimesVector(StringVector obj) { int o = __offset(36); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Latest Possible Launch Times
   */
  public String LATEST_LAUNCH_TIMES(int j) { int o = __offset(38); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int LATEST_LAUNCH_TIMESLength() { int o = __offset(38); return o != 0 ? __vector_len(o) : 0; }
  public StringVector latestLaunchTimesVector() { return latestLaunchTimesVector(new StringVector()); }
  public StringVector latestLaunchTimesVector(StringVector obj) { int o = __offset(38); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Launch Collision Avoidance Information
   */
  public String LCOLA_WINDOW_CLOSURES(int j) { int o = __offset(40); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int LCOLA_WINDOW_CLOSURESLength() { int o = __offset(40); return o != 0 ? __vector_len(o) : 0; }
  public StringVector lcolaWindowClosuresVector() { return lcolaWindowClosuresVector(new StringVector()); }
  public StringVector lcolaWindowClosuresVector(StringVector obj) { int o = __offset(40); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Payload Information (Catalog Entities)
   */
  public CAT OBJECTS(int j) { return OBJECTS(new CAT(), j); }
  public CAT OBJECTS(CAT obj, int j) { int o = __offset(42); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int OBJECTSLength() { int o = __offset(42); return o != 0 ? __vector_len(o) : 0; }
  public CAT.Vector objectsVector() { return objectsVector(new CAT.Vector()); }
  public CAT.Vector objectsVector(CAT.Vector obj) { int o = __offset(42); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Tracking and Collision Avoidance Requirements
   */
  public String TRACKING_REQUIREMENTS(int j) { int o = __offset(44); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int TRACKING_REQUIREMENTSLength() { int o = __offset(44); return o != 0 ? __vector_len(o) : 0; }
  public StringVector trackingRequirementsVector() { return trackingRequirementsVector(new StringVector()); }
  public StringVector trackingRequirementsVector(StringVector obj) { int o = __offset(44); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Duration of Collision Avoidance Screen (in Seconds)
   */
  public String COLA_SCREEN_DURATION() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer COLA_SCREEN_DURATIONAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer COLA_SCREEN_DURATIONInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Probability of Collision Threshold (Percentage)
   */
  public String PROBABILITY_OF_COLLISION_THRESHOLD() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer PROBABILITY_OF_COLLISION_THRESHOLDAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer PROBABILITY_OF_COLLISION_THRESHOLDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Number of Required Collision Avoidance Runs
   */
  public String COLA_RUNS_REQUIRED() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer COLA_RUNS_REQUIREDAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer COLA_RUNS_REQUIREDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Points of Contact for Collision Avoidance
   */
  public EPM COLA_POINTS_OF_CONTACT(int j) { return COLA_POINTS_OF_CONTACT(new EPM(), j); }
  public EPM COLA_POINTS_OF_CONTACT(EPM obj, int j) { int o = __offset(52); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int COLA_POINTS_OF_CONTACTLength() { int o = __offset(52); return o != 0 ? __vector_len(o) : 0; }
  public EPM.Vector colaPointsOfContactVector() { return colaPointsOfContactVector(new EPM.Vector()); }
  public EPM.Vector colaPointsOfContactVector(EPM.Vector obj) { int o = __offset(52); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Orbital Parameters of the Launch
   */
  public String ORBITAL_PARAMETERS(int j) { int o = __offset(54); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int ORBITAL_PARAMETERSLength() { int o = __offset(54); return o != 0 ? __vector_len(o) : 0; }
  public StringVector orbitalParametersVector() { return orbitalParametersVector(new StringVector()); }
  public StringVector orbitalParametersVector(StringVector obj) { int o = __offset(54); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Burn Out Vectors for the Launch
   */
  public BOV BURN_OUT_VECTORS(int j) { return BURN_OUT_VECTORS(new BOV(), j); }
  public BOV BURN_OUT_VECTORS(BOV obj, int j) { int o = __offset(56); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int BURN_OUT_VECTORSLength() { int o = __offset(56); return o != 0 ? __vector_len(o) : 0; }
  public BOV.Vector burnOutVectorsVector() { return burnOutVectorsVector(new BOV.Vector()); }
  public BOV.Vector burnOutVectorsVector(BOV.Vector obj) { int o = __offset(56); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createLDM(FlatBufferBuilder builder,
      int SITEOffset,
      float AZIMUTH,
      int REFERENCESOffset,
      int AGENCY_NAMEOffset,
      int POINTS_OF_CONTACTOffset,
      int OPERATIONS_POINTS_OF_CONTACTOffset,
      int NETOffset,
      int ROCKET_CONFIGURATIONOffset,
      int MISSION_NAMEOffset,
      int MISSION_DESCRIPTIONOffset,
      int MISSION_TYPEOffset,
      int ORBIT_TYPEOffset,
      int WEATHER_CONDITIONSOffset,
      int LAUNCH_STATUSOffset,
      int WEBCAST_URLOffset,
      int MEDIA_LINKSOffset,
      int EARLIEST_LAUNCH_TIMESOffset,
      int LATEST_LAUNCH_TIMESOffset,
      int LCOLA_WINDOW_CLOSURESOffset,
      int OBJECTSOffset,
      int TRACKING_REQUIREMENTSOffset,
      int COLA_SCREEN_DURATIONOffset,
      int PROBABILITY_OF_COLLISION_THRESHOLDOffset,
      int COLA_RUNS_REQUIREDOffset,
      int COLA_POINTS_OF_CONTACTOffset,
      int ORBITAL_PARAMETERSOffset,
      int BURN_OUT_VECTORSOffset) {
    builder.startTable(27);
    LDM.addBurnOutVectors(builder, BURN_OUT_VECTORSOffset);
    LDM.addOrbitalParameters(builder, ORBITAL_PARAMETERSOffset);
    LDM.addColaPointsOfContact(builder, COLA_POINTS_OF_CONTACTOffset);
    LDM.addColaRunsRequired(builder, COLA_RUNS_REQUIREDOffset);
    LDM.addProbabilityOfCollisionThreshold(builder, PROBABILITY_OF_COLLISION_THRESHOLDOffset);
    LDM.addColaScreenDuration(builder, COLA_SCREEN_DURATIONOffset);
    LDM.addTrackingRequirements(builder, TRACKING_REQUIREMENTSOffset);
    LDM.addObjects(builder, OBJECTSOffset);
    LDM.addLcolaWindowClosures(builder, LCOLA_WINDOW_CLOSURESOffset);
    LDM.addLatestLaunchTimes(builder, LATEST_LAUNCH_TIMESOffset);
    LDM.addEarliestLaunchTimes(builder, EARLIEST_LAUNCH_TIMESOffset);
    LDM.addMediaLinks(builder, MEDIA_LINKSOffset);
    LDM.addWebcastUrl(builder, WEBCAST_URLOffset);
    LDM.addLaunchStatus(builder, LAUNCH_STATUSOffset);
    LDM.addWeatherConditions(builder, WEATHER_CONDITIONSOffset);
    LDM.addOrbitType(builder, ORBIT_TYPEOffset);
    LDM.addMissionType(builder, MISSION_TYPEOffset);
    LDM.addMissionDescription(builder, MISSION_DESCRIPTIONOffset);
    LDM.addMissionName(builder, MISSION_NAMEOffset);
    LDM.addRocketConfiguration(builder, ROCKET_CONFIGURATIONOffset);
    LDM.addNet(builder, NETOffset);
    LDM.addOperationsPointsOfContact(builder, OPERATIONS_POINTS_OF_CONTACTOffset);
    LDM.addPointsOfContact(builder, POINTS_OF_CONTACTOffset);
    LDM.addAgencyName(builder, AGENCY_NAMEOffset);
    LDM.addReferences(builder, REFERENCESOffset);
    LDM.addAzimuth(builder, AZIMUTH);
    LDM.addSite(builder, SITEOffset);
    return LDM.endLDM(builder);
  }

  public static void startLDM(FlatBufferBuilder builder) { builder.startTable(27); }
  public static void addSite(FlatBufferBuilder builder, int SITEOffset) { builder.addOffset(0, SITEOffset, 0); }
  public static void addAzimuth(FlatBufferBuilder builder, float AZIMUTH) { builder.addFloat(1, AZIMUTH, 0.0f); }
  public static void addReferences(FlatBufferBuilder builder, int REFERENCESOffset) { builder.addOffset(2, REFERENCESOffset, 0); }
  public static void addAgencyName(FlatBufferBuilder builder, int AGENCY_NAMEOffset) { builder.addOffset(3, AGENCY_NAMEOffset, 0); }
  public static void addPointsOfContact(FlatBufferBuilder builder, int POINTS_OF_CONTACTOffset) { builder.addOffset(4, POINTS_OF_CONTACTOffset, 0); }
  public static int createPointsOfContactVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPointsOfContactVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOperationsPointsOfContact(FlatBufferBuilder builder, int OPERATIONS_POINTS_OF_CONTACTOffset) { builder.addOffset(5, OPERATIONS_POINTS_OF_CONTACTOffset, 0); }
  public static int createOperationsPointsOfContactVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOperationsPointsOfContactVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNet(FlatBufferBuilder builder, int NETOffset) { builder.addOffset(6, NETOffset, 0); }
  public static void addRocketConfiguration(FlatBufferBuilder builder, int ROCKET_CONFIGURATIONOffset) { builder.addOffset(7, ROCKET_CONFIGURATIONOffset, 0); }
  public static void addMissionName(FlatBufferBuilder builder, int MISSION_NAMEOffset) { builder.addOffset(8, MISSION_NAMEOffset, 0); }
  public static void addMissionDescription(FlatBufferBuilder builder, int MISSION_DESCRIPTIONOffset) { builder.addOffset(9, MISSION_DESCRIPTIONOffset, 0); }
  public static void addMissionType(FlatBufferBuilder builder, int MISSION_TYPEOffset) { builder.addOffset(10, MISSION_TYPEOffset, 0); }
  public static void addOrbitType(FlatBufferBuilder builder, int ORBIT_TYPEOffset) { builder.addOffset(11, ORBIT_TYPEOffset, 0); }
  public static void addWeatherConditions(FlatBufferBuilder builder, int WEATHER_CONDITIONSOffset) { builder.addOffset(12, WEATHER_CONDITIONSOffset, 0); }
  public static void addLaunchStatus(FlatBufferBuilder builder, int LAUNCH_STATUSOffset) { builder.addOffset(13, LAUNCH_STATUSOffset, 0); }
  public static void addWebcastUrl(FlatBufferBuilder builder, int WEBCAST_URLOffset) { builder.addOffset(14, WEBCAST_URLOffset, 0); }
  public static void addMediaLinks(FlatBufferBuilder builder, int MEDIA_LINKSOffset) { builder.addOffset(15, MEDIA_LINKSOffset, 0); }
  public static int createMediaLinksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMediaLinksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addEarliestLaunchTimes(FlatBufferBuilder builder, int EARLIEST_LAUNCH_TIMESOffset) { builder.addOffset(16, EARLIEST_LAUNCH_TIMESOffset, 0); }
  public static int createEarliestLaunchTimesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEarliestLaunchTimesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLatestLaunchTimes(FlatBufferBuilder builder, int LATEST_LAUNCH_TIMESOffset) { builder.addOffset(17, LATEST_LAUNCH_TIMESOffset, 0); }
  public static int createLatestLaunchTimesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLatestLaunchTimesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLcolaWindowClosures(FlatBufferBuilder builder, int LCOLA_WINDOW_CLOSURESOffset) { builder.addOffset(18, LCOLA_WINDOW_CLOSURESOffset, 0); }
  public static int createLcolaWindowClosuresVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLcolaWindowClosuresVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addObjects(FlatBufferBuilder builder, int OBJECTSOffset) { builder.addOffset(19, OBJECTSOffset, 0); }
  public static int createObjectsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startObjectsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTrackingRequirements(FlatBufferBuilder builder, int TRACKING_REQUIREMENTSOffset) { builder.addOffset(20, TRACKING_REQUIREMENTSOffset, 0); }
  public static int createTrackingRequirementsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTrackingRequirementsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addColaScreenDuration(FlatBufferBuilder builder, int COLA_SCREEN_DURATIONOffset) { builder.addOffset(21, COLA_SCREEN_DURATIONOffset, 0); }
  public static void addProbabilityOfCollisionThreshold(FlatBufferBuilder builder, int PROBABILITY_OF_COLLISION_THRESHOLDOffset) { builder.addOffset(22, PROBABILITY_OF_COLLISION_THRESHOLDOffset, 0); }
  public static void addColaRunsRequired(FlatBufferBuilder builder, int COLA_RUNS_REQUIREDOffset) { builder.addOffset(23, COLA_RUNS_REQUIREDOffset, 0); }
  public static void addColaPointsOfContact(FlatBufferBuilder builder, int COLA_POINTS_OF_CONTACTOffset) { builder.addOffset(24, COLA_POINTS_OF_CONTACTOffset, 0); }
  public static int createColaPointsOfContactVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startColaPointsOfContactVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOrbitalParameters(FlatBufferBuilder builder, int ORBITAL_PARAMETERSOffset) { builder.addOffset(25, ORBITAL_PARAMETERSOffset, 0); }
  public static int createOrbitalParametersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOrbitalParametersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBurnOutVectors(FlatBufferBuilder builder, int BURN_OUT_VECTORSOffset) { builder.addOffset(26, BURN_OUT_VECTORSOffset, 0); }
  public static int createBurnOutVectorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBurnOutVectorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endLDM(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishLDMBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "$LDM"); }
  public static void finishSizePrefixedLDMBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "$LDM"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LDM get(int j) { return get(new LDM(), j); }
    public LDM get(LDM obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

