// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Table representing a frequency band with a name and frequency range
 */
@SuppressWarnings("unused")
public final class Band extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static Band getRootAsBand(ByteBuffer _bb) { return getRootAsBand(_bb, new Band()); }
  public static Band getRootAsBand(ByteBuffer _bb, Band obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Band __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Name of the band
   */
  public String NAME() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer NAMEAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Frequency range of the band
   */
  public FrequencyRange FREQUENCY_RANGE() { return FREQUENCY_RANGE(new FrequencyRange()); }
  public FrequencyRange FREQUENCY_RANGE(FrequencyRange obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createBand(FlatBufferBuilder builder,
      int NAMEOffset,
      int FREQUENCY_RANGEOffset) {
    builder.startTable(2);
    Band.addFrequencyRange(builder, FREQUENCY_RANGEOffset);
    Band.addName(builder, NAMEOffset);
    return Band.endBand(builder);
  }

  public static void startBand(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addName(FlatBufferBuilder builder, int NAMEOffset) { builder.addOffset(0, NAMEOffset, 0); }
  public static void addFrequencyRange(FlatBufferBuilder builder, int FREQUENCY_RANGEOffset) { builder.addOffset(1, FREQUENCY_RANGEOffset, 0); }
  public static int endBand(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Band get(int j) { return get(new Band(), j); }
    public Band get(Band obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

