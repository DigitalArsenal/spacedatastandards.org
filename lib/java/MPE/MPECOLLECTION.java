// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Collection of MPE Records
 */
@SuppressWarnings("unused")
public final class MPECOLLECTION extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static MPECOLLECTION getRootAsMPECOLLECTION(ByteBuffer _bb) { return getRootAsMPECOLLECTION(_bb, new MPECOLLECTION()); }
  public static MPECOLLECTION getRootAsMPECOLLECTION(ByteBuffer _bb, MPECOLLECTION obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MPECOLLECTION __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Default value = U
   */
  public String CLASSIFICATION_TYPE() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CLASSIFICATION_TYPEAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer CLASSIFICATION_TYPEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Name of the reference frame (TEME, EME2000, etc.)
   */
  public byte REF_FRAME() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 9; }
  /**
   * Epoch of the Reference Frame. (UNIX TimeStamp)
   */
  public double REF_FRAME_EPOCH() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Time system used for the orbit state and covariance matrix. (UTC)
   */
  public byte TIME_SYSTEM() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) : 11; }
  /**
   * Description of the Mean Element Theory. (SGP4,DSST,USM)
   */
  public byte MEAN_ELEMENT_THEORY() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Array of MPE records
   */
  public MPE RECORDS(int j) { return RECORDS(new MPE(), j); }
  public MPE RECORDS(MPE obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int RECORDSLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public MPE.Vector recordsVector() { return recordsVector(new MPE.Vector()); }
  public MPE.Vector recordsVector(MPE.Vector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createMPECOLLECTION(FlatBufferBuilder builder,
      int CLASSIFICATION_TYPEOffset,
      byte REF_FRAME,
      double REF_FRAME_EPOCH,
      byte TIME_SYSTEM,
      byte MEAN_ELEMENT_THEORY,
      int RECORDSOffset) {
    builder.startTable(6);
    MPECOLLECTION.addRefFrameEpoch(builder, REF_FRAME_EPOCH);
    MPECOLLECTION.addRecords(builder, RECORDSOffset);
    MPECOLLECTION.addClassificationType(builder, CLASSIFICATION_TYPEOffset);
    MPECOLLECTION.addMeanElementTheory(builder, MEAN_ELEMENT_THEORY);
    MPECOLLECTION.addTimeSystem(builder, TIME_SYSTEM);
    MPECOLLECTION.addRefFrame(builder, REF_FRAME);
    return MPECOLLECTION.endMPECOLLECTION(builder);
  }

  public static void startMPECOLLECTION(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addClassificationType(FlatBufferBuilder builder, int CLASSIFICATION_TYPEOffset) { builder.addOffset(0, CLASSIFICATION_TYPEOffset, 0); }
  public static void addRefFrame(FlatBufferBuilder builder, byte REF_FRAME) { builder.addByte(1, REF_FRAME, 9); }
  public static void addRefFrameEpoch(FlatBufferBuilder builder, double REF_FRAME_EPOCH) { builder.addDouble(2, REF_FRAME_EPOCH, 0.0); }
  public static void addTimeSystem(FlatBufferBuilder builder, byte TIME_SYSTEM) { builder.addByte(3, TIME_SYSTEM, 11); }
  public static void addMeanElementTheory(FlatBufferBuilder builder, byte MEAN_ELEMENT_THEORY) { builder.addByte(4, MEAN_ELEMENT_THEORY, 0); }
  public static void addRecords(FlatBufferBuilder builder, int RECORDSOffset) { builder.addOffset(5, RECORDSOffset, 0); }
  public static int createRecordsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRecordsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endMPECOLLECTION(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MPECOLLECTION get(int j) { return get(new MPECOLLECTION(), j); }
    public MPECOLLECTION get(MPECOLLECTION obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

