// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Earth Orientation Parameters
 */
@SuppressWarnings("unused")
public final class EOP extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static EOP getRootAsEOP(ByteBuffer _bb) { return getRootAsEOP(_bb, new EOP()); }
  public static EOP getRootAsEOP(ByteBuffer _bb, EOP obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EOP __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   *  Date in ISO 8601 format, e.g., "2018-01-01T00:00:00Z"
   */
  public String DATE() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer DATEAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer DATEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   *  Modified Julian Date in UTC, e.g., 58119
   */
  public long MJD() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   *  x component of Pole Wander in radians, e.g., 2.872908911518888E-7
   */
  public float X_POLE_WANDER_RADIANS() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   *  y component of Pole Wander in radians, e.g., 1.2003259523750447E-6
   */
  public float Y_POLE_WANDER_RADIANS() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   *  x component of Celestial Pole Offset in radians, e.g., 5.720801437092525E-10
   */
  public float X_CELESTIAL_POLE_OFFSET_RADIANS() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   *  y component of Celestial Pole Offset in radians, e.g., -8.484239419416879E-10
   */
  public float Y_CELESTIAL_POLE_OFFSET_RADIANS() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   *  UT1 minus UTC in seconds, e.g., 0.2163567
   */
  public float UT1_MINUS_UTC_SECONDS() { int o = __offset(16); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   *  TAI minus UTC in seconds, e.g., 37
   */
  public int TAI_MINUS_UTC_SECONDS() { int o = __offset(18); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  /**
   *  Correction to Length of Day in seconds, e.g., 8.094E-4
   */
  public float LENGTH_OF_DAY_CORRECTION_SECONDS() { int o = __offset(20); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   *  Data type (O = Observed, P = Predicted)
   */
  public byte DATA_TYPE() { int o = __offset(22); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createEOP(FlatBufferBuilder builder,
      int DATEOffset,
      long MJD,
      float X_POLE_WANDER_RADIANS,
      float Y_POLE_WANDER_RADIANS,
      float X_CELESTIAL_POLE_OFFSET_RADIANS,
      float Y_CELESTIAL_POLE_OFFSET_RADIANS,
      float UT1_MINUS_UTC_SECONDS,
      int TAI_MINUS_UTC_SECONDS,
      float LENGTH_OF_DAY_CORRECTION_SECONDS,
      byte DATA_TYPE) {
    builder.startTable(10);
    EOP.addLengthOfDayCorrectionSeconds(builder, LENGTH_OF_DAY_CORRECTION_SECONDS);
    EOP.addUt1MinusUtcSeconds(builder, UT1_MINUS_UTC_SECONDS);
    EOP.addYCelestialPoleOffsetRadians(builder, Y_CELESTIAL_POLE_OFFSET_RADIANS);
    EOP.addXCelestialPoleOffsetRadians(builder, X_CELESTIAL_POLE_OFFSET_RADIANS);
    EOP.addYPoleWanderRadians(builder, Y_POLE_WANDER_RADIANS);
    EOP.addXPoleWanderRadians(builder, X_POLE_WANDER_RADIANS);
    EOP.addMjd(builder, MJD);
    EOP.addDate(builder, DATEOffset);
    EOP.addTaiMinusUtcSeconds(builder, TAI_MINUS_UTC_SECONDS);
    EOP.addDataType(builder, DATA_TYPE);
    return EOP.endEOP(builder);
  }

  public static void startEOP(FlatBufferBuilder builder) { builder.startTable(10); }
  public static void addDate(FlatBufferBuilder builder, int DATEOffset) { builder.addOffset(0, DATEOffset, 0); }
  public static void addMjd(FlatBufferBuilder builder, long MJD) { builder.addInt(1, (int) MJD, (int) 0L); }
  public static void addXPoleWanderRadians(FlatBufferBuilder builder, float X_POLE_WANDER_RADIANS) { builder.addFloat(2, X_POLE_WANDER_RADIANS, 0.0f); }
  public static void addYPoleWanderRadians(FlatBufferBuilder builder, float Y_POLE_WANDER_RADIANS) { builder.addFloat(3, Y_POLE_WANDER_RADIANS, 0.0f); }
  public static void addXCelestialPoleOffsetRadians(FlatBufferBuilder builder, float X_CELESTIAL_POLE_OFFSET_RADIANS) { builder.addFloat(4, X_CELESTIAL_POLE_OFFSET_RADIANS, 0.0f); }
  public static void addYCelestialPoleOffsetRadians(FlatBufferBuilder builder, float Y_CELESTIAL_POLE_OFFSET_RADIANS) { builder.addFloat(5, Y_CELESTIAL_POLE_OFFSET_RADIANS, 0.0f); }
  public static void addUt1MinusUtcSeconds(FlatBufferBuilder builder, float UT1_MINUS_UTC_SECONDS) { builder.addFloat(6, UT1_MINUS_UTC_SECONDS, 0.0f); }
  public static void addTaiMinusUtcSeconds(FlatBufferBuilder builder, int TAI_MINUS_UTC_SECONDS) { builder.addShort(7, (short) TAI_MINUS_UTC_SECONDS, (short) 0); }
  public static void addLengthOfDayCorrectionSeconds(FlatBufferBuilder builder, float LENGTH_OF_DAY_CORRECTION_SECONDS) { builder.addFloat(8, LENGTH_OF_DAY_CORRECTION_SECONDS, 0.0f); }
  public static void addDataType(FlatBufferBuilder builder, byte DATA_TYPE) { builder.addByte(9, DATA_TYPE, 0); }
  public static int endEOP(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EOP get(int j) { return get(new EOP(), j); }
    public EOP get(EOP obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

