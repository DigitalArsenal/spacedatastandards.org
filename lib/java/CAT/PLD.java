// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Payload Information
 */
@SuppressWarnings("unused")
public final class PLD extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static PLD getRootAsPLD(ByteBuffer _bb) { return getRootAsPLD(_bb, new PLD()); }
  public static PLD getRootAsPLD(ByteBuffer _bb, PLD obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean PLDBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "$PLD"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PLD __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String PAYLOAD_DURATION() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer PAYLOAD_DURATIONAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer PAYLOAD_DURATIONInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public float MASS_AT_LAUNCH() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public String DIMENSIONS() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer DIMENSIONSAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer DIMENSIONSInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public float SOLAR_ARRAY_AREA() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public String SOLAR_ARRAY_DIMENSIONS() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer SOLAR_ARRAY_DIMENSIONSAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer SOLAR_ARRAY_DIMENSIONSInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public String NOMINAL_OPERATIONAL_LIFETIME() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer NOMINAL_OPERATIONAL_LIFETIMEAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer NOMINAL_OPERATIONAL_LIFETIMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public IDM INSTRUMENTS(int j) { return INSTRUMENTS(new IDM(), j); }
  public IDM INSTRUMENTS(IDM obj, int j) { int o = __offset(16); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int INSTRUMENTSLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public IDM.Vector instrumentsVector() { return instrumentsVector(new IDM.Vector()); }
  public IDM.Vector instrumentsVector(IDM.Vector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createPLD(FlatBufferBuilder builder,
      int PAYLOAD_DURATIONOffset,
      float MASS_AT_LAUNCH,
      int DIMENSIONSOffset,
      float SOLAR_ARRAY_AREA,
      int SOLAR_ARRAY_DIMENSIONSOffset,
      int NOMINAL_OPERATIONAL_LIFETIMEOffset,
      int INSTRUMENTSOffset) {
    builder.startTable(7);
    PLD.addInstruments(builder, INSTRUMENTSOffset);
    PLD.addNominalOperationalLifetime(builder, NOMINAL_OPERATIONAL_LIFETIMEOffset);
    PLD.addSolarArrayDimensions(builder, SOLAR_ARRAY_DIMENSIONSOffset);
    PLD.addSolarArrayArea(builder, SOLAR_ARRAY_AREA);
    PLD.addDimensions(builder, DIMENSIONSOffset);
    PLD.addMassAtLaunch(builder, MASS_AT_LAUNCH);
    PLD.addPayloadDuration(builder, PAYLOAD_DURATIONOffset);
    return PLD.endPLD(builder);
  }

  public static void startPLD(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addPayloadDuration(FlatBufferBuilder builder, int PAYLOAD_DURATIONOffset) { builder.addOffset(0, PAYLOAD_DURATIONOffset, 0); }
  public static void addMassAtLaunch(FlatBufferBuilder builder, float MASS_AT_LAUNCH) { builder.addFloat(1, MASS_AT_LAUNCH, 0.0f); }
  public static void addDimensions(FlatBufferBuilder builder, int DIMENSIONSOffset) { builder.addOffset(2, DIMENSIONSOffset, 0); }
  public static void addSolarArrayArea(FlatBufferBuilder builder, float SOLAR_ARRAY_AREA) { builder.addFloat(3, SOLAR_ARRAY_AREA, 0.0f); }
  public static void addSolarArrayDimensions(FlatBufferBuilder builder, int SOLAR_ARRAY_DIMENSIONSOffset) { builder.addOffset(4, SOLAR_ARRAY_DIMENSIONSOffset, 0); }
  public static void addNominalOperationalLifetime(FlatBufferBuilder builder, int NOMINAL_OPERATIONAL_LIFETIMEOffset) { builder.addOffset(5, NOMINAL_OPERATIONAL_LIFETIMEOffset, 0); }
  public static void addInstruments(FlatBufferBuilder builder, int INSTRUMENTSOffset) { builder.addOffset(6, INSTRUMENTSOffset, 0); }
  public static int createInstrumentsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInstrumentsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPLD(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishPLDBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "$PLD"); }
  public static void finishSizePrefixedPLDBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "$PLD"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PLD get(int j) { return get(new PLD(), j); }
    public PLD get(PLD obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

