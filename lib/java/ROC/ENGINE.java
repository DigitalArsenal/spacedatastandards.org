// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Engine Details
 */
@SuppressWarnings("unused")
public final class ENGINE extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static ENGINE getRootAsENGINE(ByteBuffer _bb) { return getRootAsENGINE(_bb, new ENGINE()); }
  public static ENGINE getRootAsENGINE(ByteBuffer _bb, ENGINE obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ENGINE __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Engine Name
   */
  public String ENGINE_NAME() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ENGINE_NAMEAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer ENGINE_NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Type of Engine
   */
  public byte TYPE() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Thrust Produced by the Engine (in Newtons)
   */
  public double THRUST() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createENGINE(FlatBufferBuilder builder,
      int ENGINE_NAMEOffset,
      byte TYPE,
      double THRUST) {
    builder.startTable(3);
    ENGINE.addThrust(builder, THRUST);
    ENGINE.addEngineName(builder, ENGINE_NAMEOffset);
    ENGINE.addType(builder, TYPE);
    return ENGINE.endENGINE(builder);
  }

  public static void startENGINE(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addEngineName(FlatBufferBuilder builder, int ENGINE_NAMEOffset) { builder.addOffset(0, ENGINE_NAMEOffset, 0); }
  public static void addType(FlatBufferBuilder builder, byte TYPE) { builder.addByte(1, TYPE, 0); }
  public static void addThrust(FlatBufferBuilder builder, double THRUST) { builder.addDouble(2, THRUST, 0.0); }
  public static int endENGINE(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ENGINE get(int j) { return get(new ENGINE(), j); }
    public ENGINE get(ENGINE obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

