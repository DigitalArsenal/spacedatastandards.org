// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Tracking Data Message
 */
@SuppressWarnings("unused")
public final class TDM extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static TDM getRootAsTDM(ByteBuffer _bb) { return getRootAsTDM(_bb, new TDM()); }
  public static TDM getRootAsTDM(ByteBuffer _bb, TDM obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean TDMBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "$TDM"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TDM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier for the observation OBSERVER -  [Specific CCSDS Document]
   */
  public String OBSERVER_ID() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OBSERVER_IDAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer OBSERVER_IDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Cartesian X coordinate of the OBSERVER location in chosen reference frame
   */
  public double OBSERVER_X() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian Y coordinate of the OBSERVER location in chosen reference frame 
   */
  public double OBSERVER_Y() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian Z coordinate of the OBSERVER location in chosen reference frame 
   */
  public double OBSERVER_Z() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian X coordinate of the OBSERVER velocity in chosen reference frame
   */
  public double OBSERVER_VX() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian Y coordinate of the OBSERVER velocity in chosen reference frame 
   */
  public double OBSERVER_VY() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian Z coordinate of the OBSERVER velocity in chosen reference frame 
   */
  public double OBSERVER_VZ() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Reference frame used for OBSERVER location Cartesian coordinates (e.g., ECEF, ECI)
   */
  public byte OBSERVER_POSITION_REFERENCE_FRAME() { int o = __offset(18); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Reference frame used for obs location Cartesian coordinates (e.g., ECEF, ECI)
   */
  public byte OBS_REFERENCE_FRAME() { int o = __offset(20); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Epoch or observation time -  CCSDS 503.0-B-1
   */
  public String EPOCH() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer EPOCHAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer EPOCHInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * TDM version number -  CCSDS 503.0-B-1, Page D-9
   */
  public String CCSDS_TDM_VERS() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CCSDS_TDM_VERSAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer CCSDS_TDM_VERSInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Comments regarding TDM -  various sections, e.g., Page D-9
   */
  public String COMMENT(int j) { int o = __offset(26); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int COMMENTLength() { int o = __offset(26); return o != 0 ? __vector_len(o) : 0; }
  public StringVector commentVector() { return commentVector(new StringVector()); }
  public StringVector commentVector(StringVector obj) { int o = __offset(26); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Date of TDM creation -  CCSDS 503.0-B-1, Page D-9
   */
  public String CREATION_DATE() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CREATION_DATEAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer CREATION_DATEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Originator of the TDM -  CCSDS 503.0-B-1, Page D-9
   */
  public String ORIGINATOR() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ORIGINATORAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer ORIGINATORInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Start of metadata section -  CCSDS 503.0-B-1, Page D-9
   */
  public String META_START() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer META_STARTAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer META_STARTInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Time system used -  CCSDS 503.0-B-1, Page D-9
   */
  public String TIME_SYSTEM() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TIME_SYSTEMAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer TIME_SYSTEMInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Start time of the data -  CCSDS 503.0-B-1, Page D-9
   */
  public String START_TIME() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer START_TIMEAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer START_TIMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Stop time of the data -  CCSDS 503.0-B-1, Page D-9
   */
  public String STOP_TIME() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer STOP_TIMEAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer STOP_TIMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * First participant in the TDM -  CCSDS 503.0-B-1, Page D-9
   */
  public String PARTICIPANT_1() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer PARTICIPANT_1AsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer PARTICIPANT_1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Second participant in the TDM -  CCSDS 503.0-B-1, Page D-9
   */
  public String PARTICIPANT_2() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer PARTICIPANT_2AsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer PARTICIPANT_2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Third participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
   */
  public String PARTICIPANT_3() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer PARTICIPANT_3AsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer PARTICIPANT_3InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Fourth participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
   */
  public String PARTICIPANT_4() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer PARTICIPANT_4AsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer PARTICIPANT_4InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Fifth participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9, max participants
   */
  public String PARTICIPANT_5() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer PARTICIPANT_5AsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer PARTICIPANT_5InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Mode of TDM -  CCSDS 503.0-B-1, Page D-9
   */
  public String MODE() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MODEAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer MODEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * First path in TDM -  CCSDS 503.0-B-1, Page D-9
   */
  public int PATH_1() { int o = __offset(52); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  /**
   * Second path in TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
   */
  public int PATH_2() { int o = __offset(54); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  /**
   * Transmit band -  CCSDS 503.0-B-1, Page D-9
   */
  public String TRANSMIT_BAND() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TRANSMIT_BANDAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer TRANSMIT_BANDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Receive band -  CCSDS 503.0-B-1, Page D-9
   */
  public String RECEIVE_BAND() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer RECEIVE_BANDAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer RECEIVE_BANDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Integration interval -  CCSDS 503.0-B-1, Page D-9
   */
  public float INTEGRATION_INTERVAL() { int o = __offset(60); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Integration reference -  CCSDS 503.0-B-1, Page D-9
   */
  public String INTEGRATION_REF() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer INTEGRATION_REFAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer INTEGRATION_REFInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Receive delay for second participant -  CCSDS 503.0-B-1, Page D-9
   */
  public double RECEIVE_DELAY_2() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Receive delay for third participant -  CCSDS 503.0-B-1, Page D-9
   */
  public double RECEIVE_DELAY_3() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Data quality -  CCSDS 503.0-B-1, Page D-9
   */
  public String DATA_QUALITY() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer DATA_QUALITYAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer DATA_QUALITYInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * End of metadata section -  CCSDS 503.0-B-1, Page D-9
   */
  public String META_STOP() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer META_STOPAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer META_STOPInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * Start of data section -  CCSDS 503.0-B-1, Page D-9
   */
  public String DATA_START() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer DATA_STARTAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer DATA_STARTInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Transmit frequency for first participant -  CCSDS 503.0-B-1, Page D-9
   */
  public double TRANSMIT_FREQ_1() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Receive frequency -  CCSDS 503.0-B-1, Page D-9
   */
  public double RECEIVE_FREQ(int j) { int o = __offset(76); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int RECEIVE_FREQLength() { int o = __offset(76); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector receiveFreqVector() { return receiveFreqVector(new DoubleVector()); }
  public DoubleVector receiveFreqVector(DoubleVector obj) { int o = __offset(76); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer RECEIVE_FREQAsByteBuffer() { return __vector_as_bytebuffer(76, 8); }
  public ByteBuffer RECEIVE_FREQInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 8); }
  /**
   * End of data section -  CCSDS 503.0-B-1, Page D-9
   */
  public String DATA_STOP() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer DATA_STOPAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer DATA_STOPInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * Additional properties as required by the specific application of the TDM...
   * Reference for time tagging -  CCSDS 503.0-B-1, Page D-10
   */
  public String TIMETAG_REF() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TIMETAG_REFAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer TIMETAG_REFInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * Type of angle data -  CCSDS 503.0-B-1, Page D-12
   * Can be AZEL, RADEC, XEYN, XSYE, or another value with provided ICD
   */
  public String ANGLE_TYPE() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ANGLE_TYPEAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer ANGLE_TYPEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * First angle value -  CCSDS 503.0-B-1, Page D-12
   */
  public float ANGLE_1(int j) { int o = __offset(84); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int ANGLE_1Length() { int o = __offset(84); return o != 0 ? __vector_len(o) : 0; }
  public FloatVector angle1Vector() { return angle1Vector(new FloatVector()); }
  public FloatVector angle1Vector(FloatVector obj) { int o = __offset(84); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer ANGLE_1AsByteBuffer() { return __vector_as_bytebuffer(84, 4); }
  public ByteBuffer ANGLE_1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 4); }
  /**
   * Second angle value -  CCSDS 503.0-B-1, Page D-12
   */
  public float ANGLE_2(int j) { int o = __offset(86); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int ANGLE_2Length() { int o = __offset(86); return o != 0 ? __vector_len(o) : 0; }
  public FloatVector angle2Vector() { return angle2Vector(new FloatVector()); }
  public FloatVector angle2Vector(FloatVector obj) { int o = __offset(86); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer ANGLE_2AsByteBuffer() { return __vector_as_bytebuffer(86, 4); }
  public ByteBuffer ANGLE_2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 4); }
  /**
   * Uncertainty of first angle -  CCSDS 503.0-B-1
   */
  public float ANGLE_UNCERTAINTY_1() { int o = __offset(88); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Uncertainty of second angle -  CCSDS 503.0-B-1
   */
  public float ANGLE_UNCERTAINTY_2() { int o = __offset(90); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Rate of change of range -  CCSDS 503.0-B-1
   */
  public double RANGE_RATE() { int o = __offset(92); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Uncertainty in range -  CCSDS 503.0-B-1
   */
  public double RANGE_UNCERTAINTY() { int o = __offset(94); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Mode of range data -  CCSDS 503.0-B-1, Page D-10
   */
  public String RANGE_MODE() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer RANGE_MODEAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer RANGE_MODEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * Modulus value for range data -  CCSDS 503.0-B-1, Page D-10
   */
  public double RANGE_MODULUS() { int o = __offset(98); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * First correction angle -  CCSDS 503.0-B-1, Page D-12
   */
  public float CORRECTION_ANGLE_1() { int o = __offset(100); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Second correction angle -  CCSDS 503.0-B-1, Page D-12
   */
  public float CORRECTION_ANGLE_2() { int o = __offset(102); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Indicator of corrections applied -  CCSDS 503.0-B-1, Page D-12
   */
  public String CORRECTIONS_APPLIED() { int o = __offset(104); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CORRECTIONS_APPLIEDAsByteBuffer() { return __vector_as_bytebuffer(104, 1); }
  public ByteBuffer CORRECTIONS_APPLIEDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 104, 1); }
  /**
   * Dry component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
   */
  public double TROPO_DRY(int j) { int o = __offset(106); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int TROPO_DRYLength() { int o = __offset(106); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector tropoDryVector() { return tropoDryVector(new DoubleVector()); }
  public DoubleVector tropoDryVector(DoubleVector obj) { int o = __offset(106); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer TROPO_DRYAsByteBuffer() { return __vector_as_bytebuffer(106, 8); }
  public ByteBuffer TROPO_DRYInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 106, 8); }
  /**
   * Wet component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
   */
  public double TROPO_WET(int j) { int o = __offset(108); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int TROPO_WETLength() { int o = __offset(108); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector tropoWetVector() { return tropoWetVector(new DoubleVector()); }
  public DoubleVector tropoWetVector(DoubleVector obj) { int o = __offset(108); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer TROPO_WETAsByteBuffer() { return __vector_as_bytebuffer(108, 8); }
  public ByteBuffer TROPO_WETInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 108, 8); }
  /**
   * Slant total electron content -  CCSDS 503.0-B-1, Page D-13
   */
  public double STEC(int j) { int o = __offset(110); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int STECLength() { int o = __offset(110); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector stecVector() { return stecVector(new DoubleVector()); }
  public DoubleVector stecVector(DoubleVector obj) { int o = __offset(110); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer STECAsByteBuffer() { return __vector_as_bytebuffer(110, 8); }
  public ByteBuffer STECInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 110, 8); }
  /**
   * Atmospheric pressure -  CCSDS 503.0-B-1, Page D-14
   */
  public double PRESSURE(int j) { int o = __offset(112); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int PRESSURELength() { int o = __offset(112); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector pressureVector() { return pressureVector(new DoubleVector()); }
  public DoubleVector pressureVector(DoubleVector obj) { int o = __offset(112); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer PRESSUREAsByteBuffer() { return __vector_as_bytebuffer(112, 8); }
  public ByteBuffer PRESSUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 112, 8); }
  /**
   * Relative humidity -  CCSDS 503.0-B-1, Page D-14
   */
  public double RHUMIDITY(int j) { int o = __offset(114); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int RHUMIDITYLength() { int o = __offset(114); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector rhumidityVector() { return rhumidityVector(new DoubleVector()); }
  public DoubleVector rhumidityVector(DoubleVector obj) { int o = __offset(114); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer RHUMIDITYAsByteBuffer() { return __vector_as_bytebuffer(114, 8); }
  public ByteBuffer RHUMIDITYInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 114, 8); }
  /**
   * Ambient temperature -  CCSDS 503.0-B-1, Page D-14
   */
  public double TEMPERATURE(int j) { int o = __offset(116); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int TEMPERATURELength() { int o = __offset(116); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector temperatureVector() { return temperatureVector(new DoubleVector()); }
  public DoubleVector temperatureVector(DoubleVector obj) { int o = __offset(116); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer TEMPERATUREAsByteBuffer() { return __vector_as_bytebuffer(116, 8); }
  public ByteBuffer TEMPERATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 116, 8); }
  /**
   * Clock bias values -  CCSDS 503.0-B-1, Page D-15
   */
  public double CLOCK_BIAS(int j) { int o = __offset(118); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int CLOCK_BIASLength() { int o = __offset(118); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector clockBiasVector() { return clockBiasVector(new DoubleVector()); }
  public DoubleVector clockBiasVector(DoubleVector obj) { int o = __offset(118); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer CLOCK_BIASAsByteBuffer() { return __vector_as_bytebuffer(118, 8); }
  public ByteBuffer CLOCK_BIASInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 118, 8); }
  /**
   * Clock drift values -  CCSDS 503.0-B-1, Page D-15
   */
  public double CLOCK_DRIFT(int j) { int o = __offset(120); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int CLOCK_DRIFTLength() { int o = __offset(120); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector clockDriftVector() { return clockDriftVector(new DoubleVector()); }
  public DoubleVector clockDriftVector(DoubleVector obj) { int o = __offset(120); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer CLOCK_DRIFTAsByteBuffer() { return __vector_as_bytebuffer(120, 8); }
  public ByteBuffer CLOCK_DRIFTInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 120, 8); }

  public static int createTDM(FlatBufferBuilder builder,
      int OBSERVER_IDOffset,
      double OBSERVER_X,
      double OBSERVER_Y,
      double OBSERVER_Z,
      double OBSERVER_VX,
      double OBSERVER_VY,
      double OBSERVER_VZ,
      byte OBSERVER_POSITION_REFERENCE_FRAME,
      byte OBS_REFERENCE_FRAME,
      int EPOCHOffset,
      int CCSDS_TDM_VERSOffset,
      int COMMENTOffset,
      int CREATION_DATEOffset,
      int ORIGINATOROffset,
      int META_STARTOffset,
      int TIME_SYSTEMOffset,
      int START_TIMEOffset,
      int STOP_TIMEOffset,
      int PARTICIPANT_1Offset,
      int PARTICIPANT_2Offset,
      int PARTICIPANT_3Offset,
      int PARTICIPANT_4Offset,
      int PARTICIPANT_5Offset,
      int MODEOffset,
      int PATH_1,
      int PATH_2,
      int TRANSMIT_BANDOffset,
      int RECEIVE_BANDOffset,
      float INTEGRATION_INTERVAL,
      int INTEGRATION_REFOffset,
      double RECEIVE_DELAY_2,
      double RECEIVE_DELAY_3,
      int DATA_QUALITYOffset,
      int META_STOPOffset,
      int DATA_STARTOffset,
      double TRANSMIT_FREQ_1,
      int RECEIVE_FREQOffset,
      int DATA_STOPOffset,
      int TIMETAG_REFOffset,
      int ANGLE_TYPEOffset,
      int ANGLE_1Offset,
      int ANGLE_2Offset,
      float ANGLE_UNCERTAINTY_1,
      float ANGLE_UNCERTAINTY_2,
      double RANGE_RATE,
      double RANGE_UNCERTAINTY,
      int RANGE_MODEOffset,
      double RANGE_MODULUS,
      float CORRECTION_ANGLE_1,
      float CORRECTION_ANGLE_2,
      int CORRECTIONS_APPLIEDOffset,
      int TROPO_DRYOffset,
      int TROPO_WETOffset,
      int STECOffset,
      int PRESSUREOffset,
      int RHUMIDITYOffset,
      int TEMPERATUREOffset,
      int CLOCK_BIASOffset,
      int CLOCK_DRIFTOffset) {
    builder.startTable(59);
    TDM.addRangeModulus(builder, RANGE_MODULUS);
    TDM.addRangeUncertainty(builder, RANGE_UNCERTAINTY);
    TDM.addRangeRate(builder, RANGE_RATE);
    TDM.addTransmitFreq1(builder, TRANSMIT_FREQ_1);
    TDM.addReceiveDelay3(builder, RECEIVE_DELAY_3);
    TDM.addReceiveDelay2(builder, RECEIVE_DELAY_2);
    TDM.addObserverVz(builder, OBSERVER_VZ);
    TDM.addObserverVy(builder, OBSERVER_VY);
    TDM.addObserverVx(builder, OBSERVER_VX);
    TDM.addObserverZ(builder, OBSERVER_Z);
    TDM.addObserverY(builder, OBSERVER_Y);
    TDM.addObserverX(builder, OBSERVER_X);
    TDM.addClockDrift(builder, CLOCK_DRIFTOffset);
    TDM.addClockBias(builder, CLOCK_BIASOffset);
    TDM.addTemperature(builder, TEMPERATUREOffset);
    TDM.addRhumidity(builder, RHUMIDITYOffset);
    TDM.addPressure(builder, PRESSUREOffset);
    TDM.addStec(builder, STECOffset);
    TDM.addTropoWet(builder, TROPO_WETOffset);
    TDM.addTropoDry(builder, TROPO_DRYOffset);
    TDM.addCorrectionsApplied(builder, CORRECTIONS_APPLIEDOffset);
    TDM.addCorrectionAngle2(builder, CORRECTION_ANGLE_2);
    TDM.addCorrectionAngle1(builder, CORRECTION_ANGLE_1);
    TDM.addRangeMode(builder, RANGE_MODEOffset);
    TDM.addAngleUncertainty2(builder, ANGLE_UNCERTAINTY_2);
    TDM.addAngleUncertainty1(builder, ANGLE_UNCERTAINTY_1);
    TDM.addAngle2(builder, ANGLE_2Offset);
    TDM.addAngle1(builder, ANGLE_1Offset);
    TDM.addAngleType(builder, ANGLE_TYPEOffset);
    TDM.addTimetagRef(builder, TIMETAG_REFOffset);
    TDM.addDataStop(builder, DATA_STOPOffset);
    TDM.addReceiveFreq(builder, RECEIVE_FREQOffset);
    TDM.addDataStart(builder, DATA_STARTOffset);
    TDM.addMetaStop(builder, META_STOPOffset);
    TDM.addDataQuality(builder, DATA_QUALITYOffset);
    TDM.addIntegrationRef(builder, INTEGRATION_REFOffset);
    TDM.addIntegrationInterval(builder, INTEGRATION_INTERVAL);
    TDM.addReceiveBand(builder, RECEIVE_BANDOffset);
    TDM.addTransmitBand(builder, TRANSMIT_BANDOffset);
    TDM.addMode(builder, MODEOffset);
    TDM.addParticipant5(builder, PARTICIPANT_5Offset);
    TDM.addParticipant4(builder, PARTICIPANT_4Offset);
    TDM.addParticipant3(builder, PARTICIPANT_3Offset);
    TDM.addParticipant2(builder, PARTICIPANT_2Offset);
    TDM.addParticipant1(builder, PARTICIPANT_1Offset);
    TDM.addStopTime(builder, STOP_TIMEOffset);
    TDM.addStartTime(builder, START_TIMEOffset);
    TDM.addTimeSystem(builder, TIME_SYSTEMOffset);
    TDM.addMetaStart(builder, META_STARTOffset);
    TDM.addOriginator(builder, ORIGINATOROffset);
    TDM.addCreationDate(builder, CREATION_DATEOffset);
    TDM.addComment(builder, COMMENTOffset);
    TDM.addCcsdsTdmVers(builder, CCSDS_TDM_VERSOffset);
    TDM.addEpoch(builder, EPOCHOffset);
    TDM.addObserverId(builder, OBSERVER_IDOffset);
    TDM.addPath2(builder, PATH_2);
    TDM.addPath1(builder, PATH_1);
    TDM.addObsReferenceFrame(builder, OBS_REFERENCE_FRAME);
    TDM.addObserverPositionReferenceFrame(builder, OBSERVER_POSITION_REFERENCE_FRAME);
    return TDM.endTDM(builder);
  }

  public static void startTDM(FlatBufferBuilder builder) { builder.startTable(59); }
  public static void addObserverId(FlatBufferBuilder builder, int OBSERVER_IDOffset) { builder.addOffset(0, OBSERVER_IDOffset, 0); }
  public static void addObserverX(FlatBufferBuilder builder, double OBSERVER_X) { builder.addDouble(1, OBSERVER_X, 0.0); }
  public static void addObserverY(FlatBufferBuilder builder, double OBSERVER_Y) { builder.addDouble(2, OBSERVER_Y, 0.0); }
  public static void addObserverZ(FlatBufferBuilder builder, double OBSERVER_Z) { builder.addDouble(3, OBSERVER_Z, 0.0); }
  public static void addObserverVx(FlatBufferBuilder builder, double OBSERVER_VX) { builder.addDouble(4, OBSERVER_VX, 0.0); }
  public static void addObserverVy(FlatBufferBuilder builder, double OBSERVER_VY) { builder.addDouble(5, OBSERVER_VY, 0.0); }
  public static void addObserverVz(FlatBufferBuilder builder, double OBSERVER_VZ) { builder.addDouble(6, OBSERVER_VZ, 0.0); }
  public static void addObserverPositionReferenceFrame(FlatBufferBuilder builder, byte OBSERVER_POSITION_REFERENCE_FRAME) { builder.addByte(7, OBSERVER_POSITION_REFERENCE_FRAME, 0); }
  public static void addObsReferenceFrame(FlatBufferBuilder builder, byte OBS_REFERENCE_FRAME) { builder.addByte(8, OBS_REFERENCE_FRAME, 0); }
  public static void addEpoch(FlatBufferBuilder builder, int EPOCHOffset) { builder.addOffset(9, EPOCHOffset, 0); }
  public static void addCcsdsTdmVers(FlatBufferBuilder builder, int CCSDS_TDM_VERSOffset) { builder.addOffset(10, CCSDS_TDM_VERSOffset, 0); }
  public static void addComment(FlatBufferBuilder builder, int COMMENTOffset) { builder.addOffset(11, COMMENTOffset, 0); }
  public static int createCommentVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCommentVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreationDate(FlatBufferBuilder builder, int CREATION_DATEOffset) { builder.addOffset(12, CREATION_DATEOffset, 0); }
  public static void addOriginator(FlatBufferBuilder builder, int ORIGINATOROffset) { builder.addOffset(13, ORIGINATOROffset, 0); }
  public static void addMetaStart(FlatBufferBuilder builder, int META_STARTOffset) { builder.addOffset(14, META_STARTOffset, 0); }
  public static void addTimeSystem(FlatBufferBuilder builder, int TIME_SYSTEMOffset) { builder.addOffset(15, TIME_SYSTEMOffset, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int START_TIMEOffset) { builder.addOffset(16, START_TIMEOffset, 0); }
  public static void addStopTime(FlatBufferBuilder builder, int STOP_TIMEOffset) { builder.addOffset(17, STOP_TIMEOffset, 0); }
  public static void addParticipant1(FlatBufferBuilder builder, int PARTICIPANT_1Offset) { builder.addOffset(18, PARTICIPANT_1Offset, 0); }
  public static void addParticipant2(FlatBufferBuilder builder, int PARTICIPANT_2Offset) { builder.addOffset(19, PARTICIPANT_2Offset, 0); }
  public static void addParticipant3(FlatBufferBuilder builder, int PARTICIPANT_3Offset) { builder.addOffset(20, PARTICIPANT_3Offset, 0); }
  public static void addParticipant4(FlatBufferBuilder builder, int PARTICIPANT_4Offset) { builder.addOffset(21, PARTICIPANT_4Offset, 0); }
  public static void addParticipant5(FlatBufferBuilder builder, int PARTICIPANT_5Offset) { builder.addOffset(22, PARTICIPANT_5Offset, 0); }
  public static void addMode(FlatBufferBuilder builder, int MODEOffset) { builder.addOffset(23, MODEOffset, 0); }
  public static void addPath1(FlatBufferBuilder builder, int PATH_1) { builder.addShort(24, (short) PATH_1, (short) 0); }
  public static void addPath2(FlatBufferBuilder builder, int PATH_2) { builder.addShort(25, (short) PATH_2, (short) 0); }
  public static void addTransmitBand(FlatBufferBuilder builder, int TRANSMIT_BANDOffset) { builder.addOffset(26, TRANSMIT_BANDOffset, 0); }
  public static void addReceiveBand(FlatBufferBuilder builder, int RECEIVE_BANDOffset) { builder.addOffset(27, RECEIVE_BANDOffset, 0); }
  public static void addIntegrationInterval(FlatBufferBuilder builder, float INTEGRATION_INTERVAL) { builder.addFloat(28, INTEGRATION_INTERVAL, 0.0f); }
  public static void addIntegrationRef(FlatBufferBuilder builder, int INTEGRATION_REFOffset) { builder.addOffset(29, INTEGRATION_REFOffset, 0); }
  public static void addReceiveDelay2(FlatBufferBuilder builder, double RECEIVE_DELAY_2) { builder.addDouble(30, RECEIVE_DELAY_2, 0.0); }
  public static void addReceiveDelay3(FlatBufferBuilder builder, double RECEIVE_DELAY_3) { builder.addDouble(31, RECEIVE_DELAY_3, 0.0); }
  public static void addDataQuality(FlatBufferBuilder builder, int DATA_QUALITYOffset) { builder.addOffset(32, DATA_QUALITYOffset, 0); }
  public static void addMetaStop(FlatBufferBuilder builder, int META_STOPOffset) { builder.addOffset(33, META_STOPOffset, 0); }
  public static void addDataStart(FlatBufferBuilder builder, int DATA_STARTOffset) { builder.addOffset(34, DATA_STARTOffset, 0); }
  public static void addTransmitFreq1(FlatBufferBuilder builder, double TRANSMIT_FREQ_1) { builder.addDouble(35, TRANSMIT_FREQ_1, 0.0); }
  public static void addReceiveFreq(FlatBufferBuilder builder, int RECEIVE_FREQOffset) { builder.addOffset(36, RECEIVE_FREQOffset, 0); }
  public static int createReceiveFreqVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startReceiveFreqVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addDataStop(FlatBufferBuilder builder, int DATA_STOPOffset) { builder.addOffset(37, DATA_STOPOffset, 0); }
  public static void addTimetagRef(FlatBufferBuilder builder, int TIMETAG_REFOffset) { builder.addOffset(38, TIMETAG_REFOffset, 0); }
  public static void addAngleType(FlatBufferBuilder builder, int ANGLE_TYPEOffset) { builder.addOffset(39, ANGLE_TYPEOffset, 0); }
  public static void addAngle1(FlatBufferBuilder builder, int ANGLE_1Offset) { builder.addOffset(40, ANGLE_1Offset, 0); }
  public static int createAngle1Vector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startAngle1Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAngle2(FlatBufferBuilder builder, int ANGLE_2Offset) { builder.addOffset(41, ANGLE_2Offset, 0); }
  public static int createAngle2Vector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startAngle2Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAngleUncertainty1(FlatBufferBuilder builder, float ANGLE_UNCERTAINTY_1) { builder.addFloat(42, ANGLE_UNCERTAINTY_1, 0.0f); }
  public static void addAngleUncertainty2(FlatBufferBuilder builder, float ANGLE_UNCERTAINTY_2) { builder.addFloat(43, ANGLE_UNCERTAINTY_2, 0.0f); }
  public static void addRangeRate(FlatBufferBuilder builder, double RANGE_RATE) { builder.addDouble(44, RANGE_RATE, 0.0); }
  public static void addRangeUncertainty(FlatBufferBuilder builder, double RANGE_UNCERTAINTY) { builder.addDouble(45, RANGE_UNCERTAINTY, 0.0); }
  public static void addRangeMode(FlatBufferBuilder builder, int RANGE_MODEOffset) { builder.addOffset(46, RANGE_MODEOffset, 0); }
  public static void addRangeModulus(FlatBufferBuilder builder, double RANGE_MODULUS) { builder.addDouble(47, RANGE_MODULUS, 0.0); }
  public static void addCorrectionAngle1(FlatBufferBuilder builder, float CORRECTION_ANGLE_1) { builder.addFloat(48, CORRECTION_ANGLE_1, 0.0f); }
  public static void addCorrectionAngle2(FlatBufferBuilder builder, float CORRECTION_ANGLE_2) { builder.addFloat(49, CORRECTION_ANGLE_2, 0.0f); }
  public static void addCorrectionsApplied(FlatBufferBuilder builder, int CORRECTIONS_APPLIEDOffset) { builder.addOffset(50, CORRECTIONS_APPLIEDOffset, 0); }
  public static void addTropoDry(FlatBufferBuilder builder, int TROPO_DRYOffset) { builder.addOffset(51, TROPO_DRYOffset, 0); }
  public static int createTropoDryVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startTropoDryVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addTropoWet(FlatBufferBuilder builder, int TROPO_WETOffset) { builder.addOffset(52, TROPO_WETOffset, 0); }
  public static int createTropoWetVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startTropoWetVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addStec(FlatBufferBuilder builder, int STECOffset) { builder.addOffset(53, STECOffset, 0); }
  public static int createStecVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startStecVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addPressure(FlatBufferBuilder builder, int PRESSUREOffset) { builder.addOffset(54, PRESSUREOffset, 0); }
  public static int createPressureVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startPressureVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addRhumidity(FlatBufferBuilder builder, int RHUMIDITYOffset) { builder.addOffset(55, RHUMIDITYOffset, 0); }
  public static int createRhumidityVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startRhumidityVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addTemperature(FlatBufferBuilder builder, int TEMPERATUREOffset) { builder.addOffset(56, TEMPERATUREOffset, 0); }
  public static int createTemperatureVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startTemperatureVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addClockBias(FlatBufferBuilder builder, int CLOCK_BIASOffset) { builder.addOffset(57, CLOCK_BIASOffset, 0); }
  public static int createClockBiasVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startClockBiasVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addClockDrift(FlatBufferBuilder builder, int CLOCK_DRIFTOffset) { builder.addOffset(58, CLOCK_DRIFTOffset, 0); }
  public static int createClockDriftVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startClockDriftVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endTDM(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishTDMBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "$TDM"); }
  public static void finishSizePrefixedTDMBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "$TDM"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TDM get(int j) { return get(new TDM(), j); }
    public TDM get(TDM obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

