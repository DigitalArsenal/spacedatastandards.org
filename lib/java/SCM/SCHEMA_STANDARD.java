// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Schema Standard Definition
 */
@SuppressWarnings("unused")
public final class SCHEMA_STANDARD extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SCHEMA_STANDARD getRootAsSCHEMA_STANDARD(ByteBuffer _bb) { return getRootAsSCHEMA_STANDARD(_bb, new SCHEMA_STANDARD()); }
  public static SCHEMA_STANDARD getRootAsSCHEMA_STANDARD(ByteBuffer _bb, SCHEMA_STANDARD obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SCHEMA_STANDARD __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier for the standard
   */
  public String key() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer keyAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer keyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * IDL
   */
  public String idl() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idlAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * List Of File Paths
   */
  public String files(int j) { int o = __offset(8); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int filesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public StringVector filesVector() { return filesVector(new StringVector()); }
  public StringVector filesVector(StringVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createSCHEMA_STANDARD(FlatBufferBuilder builder,
      int keyOffset,
      int idlOffset,
      int filesOffset) {
    builder.startTable(3);
    SCHEMA_STANDARD.addFiles(builder, filesOffset);
    SCHEMA_STANDARD.addIdl(builder, idlOffset);
    SCHEMA_STANDARD.addKey(builder, keyOffset);
    return SCHEMA_STANDARD.endSCHEMA_STANDARD(builder);
  }

  public static void startSCHEMA_STANDARD(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addKey(FlatBufferBuilder builder, int keyOffset) { builder.addOffset(0, keyOffset, 0); }
  public static void addIdl(FlatBufferBuilder builder, int idlOffset) { builder.addOffset(1, idlOffset, 0); }
  public static void addFiles(FlatBufferBuilder builder, int filesOffset) { builder.addOffset(2, filesOffset, 0); }
  public static int createFilesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFilesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endSCHEMA_STANDARD(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SCHEMA_STANDARD get(int j) { return get(new SCHEMA_STANDARD(), j); }
    public SCHEMA_STANDARD get(SCHEMA_STANDARD obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

