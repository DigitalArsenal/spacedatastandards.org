// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Conjunction Data Message
 */
@SuppressWarnings("unused")
public final class CDM extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static CDM getRootAsCDM(ByteBuffer _bb) { return getRootAsCDM(_bb, new CDM()); }
  public static CDM getRootAsCDM(ByteBuffer _bb, CDM obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CDM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The version of the CCSDS CDM standard used
   */
  public double CCSDS_CDM_VERS() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The date the CDM message was created
   */
  public String CREATION_DATE() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CREATION_DATEAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer CREATION_DATEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The originator of the CDM message
   */
  public String ORIGINATOR() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ORIGINATORAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer ORIGINATORInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The intended recipient of the CDM message
   */
  public String MESSAGE_FOR() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MESSAGE_FORAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer MESSAGE_FORInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * A unique identifier for the CDM message
   */
  public String MESSAGE_ID() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MESSAGE_IDAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer MESSAGE_IDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Time of closest approach
   */
  public String TCA() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TCAAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer TCAInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The miss distance between the two objects
   */
  public double MISS_DISTANCE() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The relative speed between the two objects
   */
  public double RELATIVE_SPEED() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The relative position R component
   */
  public double RELATIVE_POSITION_R() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The relative position T component
   */
  public double RELATIVE_POSITION_T() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The relative position N component
   */
  public double RELATIVE_POSITION_N() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The relative velocity R component
   */
  public double RELATIVE_VELOCITY_R() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The relative velocity T component
   */
  public double RELATIVE_VELOCITY_T() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The relative velocity N component
   */
  public double RELATIVE_VELOCITY_N() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The start time of the screening period
   */
  public String START_SCREEN_PERIOD() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer START_SCREEN_PERIODAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer START_SCREEN_PERIODInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * The end time of the screening period
   */
  public String STOP_SCREEN_PERIOD() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer STOP_SCREEN_PERIODAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer STOP_SCREEN_PERIODInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * The reference frame for the screening volume
   */
  public byte SCREEN_VOLUME_FRAME() { int o = __offset(36); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The shape of the screening volume
   */
  public byte SCREEN_VOLUME_SHAPE() { int o = __offset(38); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The X dimension of the screening volume
   */
  public double SCREEN_VOLUME_X() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Y dimension of the screening volume
   */
  public double SCREEN_VOLUME_Y() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Z dimension of the screening volume
   */
  public double SCREEN_VOLUME_Z() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The time the objects entered the screening volume
   */
  public String SCREEN_ENTRY_TIME() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer SCREEN_ENTRY_TIMEAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer SCREEN_ENTRY_TIMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * The time the objects exited the screening volume
   */
  public String SCREEN_EXIT_TIME() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer SCREEN_EXIT_TIMEAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer SCREEN_EXIT_TIMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * The probability of collision between the two objects
   */
  public double COLLISION_PROBABILITY() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The method used to calculate the collision probability
   */
  public String COLLISION_PROBABILITY_METHOD() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer COLLISION_PROBABILITY_METHODAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer COLLISION_PROBABILITY_METHODInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * The first object in the CDM message
   */
  public CDMObject OBJECT1() { return OBJECT1(new CDMObject()); }
  public CDMObject OBJECT1(CDMObject obj) { int o = __offset(54); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * The second object in the CDM message
   */
  public CDMObject OBJECT2() { return OBJECT2(new CDMObject()); }
  public CDMObject OBJECT2(CDMObject obj) { int o = __offset(56); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * Data Source for the positional information for Object 1
   */
  public PNM OBJECT1_DATASOURCE() { return OBJECT1_DATASOURCE(new PNM()); }
  public PNM OBJECT1_DATASOURCE(PNM obj) { int o = __offset(58); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * Data Source for the positional information for Object 2
   */
  public PNM OBJECT2_DATASOURCE() { return OBJECT2_DATASOURCE(new PNM()); }
  public PNM OBJECT2_DATASOURCE(PNM obj) { int o = __offset(60); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createCDM(FlatBufferBuilder builder,
      double CCSDS_CDM_VERS,
      int CREATION_DATEOffset,
      int ORIGINATOROffset,
      int MESSAGE_FOROffset,
      int MESSAGE_IDOffset,
      int TCAOffset,
      double MISS_DISTANCE,
      double RELATIVE_SPEED,
      double RELATIVE_POSITION_R,
      double RELATIVE_POSITION_T,
      double RELATIVE_POSITION_N,
      double RELATIVE_VELOCITY_R,
      double RELATIVE_VELOCITY_T,
      double RELATIVE_VELOCITY_N,
      int START_SCREEN_PERIODOffset,
      int STOP_SCREEN_PERIODOffset,
      byte SCREEN_VOLUME_FRAME,
      byte SCREEN_VOLUME_SHAPE,
      double SCREEN_VOLUME_X,
      double SCREEN_VOLUME_Y,
      double SCREEN_VOLUME_Z,
      int SCREEN_ENTRY_TIMEOffset,
      int SCREEN_EXIT_TIMEOffset,
      double COLLISION_PROBABILITY,
      int COLLISION_PROBABILITY_METHODOffset,
      int OBJECT1Offset,
      int OBJECT2Offset,
      int OBJECT1_DATASOURCEOffset,
      int OBJECT2_DATASOURCEOffset) {
    builder.startTable(29);
    CDM.addCollisionProbability(builder, COLLISION_PROBABILITY);
    CDM.addScreenVolumeZ(builder, SCREEN_VOLUME_Z);
    CDM.addScreenVolumeY(builder, SCREEN_VOLUME_Y);
    CDM.addScreenVolumeX(builder, SCREEN_VOLUME_X);
    CDM.addRelativeVelocityN(builder, RELATIVE_VELOCITY_N);
    CDM.addRelativeVelocityT(builder, RELATIVE_VELOCITY_T);
    CDM.addRelativeVelocityR(builder, RELATIVE_VELOCITY_R);
    CDM.addRelativePositionN(builder, RELATIVE_POSITION_N);
    CDM.addRelativePositionT(builder, RELATIVE_POSITION_T);
    CDM.addRelativePositionR(builder, RELATIVE_POSITION_R);
    CDM.addRelativeSpeed(builder, RELATIVE_SPEED);
    CDM.addMissDistance(builder, MISS_DISTANCE);
    CDM.addCcsdsCdmVers(builder, CCSDS_CDM_VERS);
    CDM.addObject2Datasource(builder, OBJECT2_DATASOURCEOffset);
    CDM.addObject1Datasource(builder, OBJECT1_DATASOURCEOffset);
    CDM.addObject2(builder, OBJECT2Offset);
    CDM.addObject1(builder, OBJECT1Offset);
    CDM.addCollisionProbabilityMethod(builder, COLLISION_PROBABILITY_METHODOffset);
    CDM.addScreenExitTime(builder, SCREEN_EXIT_TIMEOffset);
    CDM.addScreenEntryTime(builder, SCREEN_ENTRY_TIMEOffset);
    CDM.addStopScreenPeriod(builder, STOP_SCREEN_PERIODOffset);
    CDM.addStartScreenPeriod(builder, START_SCREEN_PERIODOffset);
    CDM.addTca(builder, TCAOffset);
    CDM.addMessageId(builder, MESSAGE_IDOffset);
    CDM.addMessageFor(builder, MESSAGE_FOROffset);
    CDM.addOriginator(builder, ORIGINATOROffset);
    CDM.addCreationDate(builder, CREATION_DATEOffset);
    CDM.addScreenVolumeShape(builder, SCREEN_VOLUME_SHAPE);
    CDM.addScreenVolumeFrame(builder, SCREEN_VOLUME_FRAME);
    return CDM.endCDM(builder);
  }

  public static void startCDM(FlatBufferBuilder builder) { builder.startTable(29); }
  public static void addCcsdsCdmVers(FlatBufferBuilder builder, double CCSDS_CDM_VERS) { builder.addDouble(0, CCSDS_CDM_VERS, 0.0); }
  public static void addCreationDate(FlatBufferBuilder builder, int CREATION_DATEOffset) { builder.addOffset(1, CREATION_DATEOffset, 0); }
  public static void addOriginator(FlatBufferBuilder builder, int ORIGINATOROffset) { builder.addOffset(2, ORIGINATOROffset, 0); }
  public static void addMessageFor(FlatBufferBuilder builder, int MESSAGE_FOROffset) { builder.addOffset(3, MESSAGE_FOROffset, 0); }
  public static void addMessageId(FlatBufferBuilder builder, int MESSAGE_IDOffset) { builder.addOffset(4, MESSAGE_IDOffset, 0); }
  public static void addTca(FlatBufferBuilder builder, int TCAOffset) { builder.addOffset(5, TCAOffset, 0); }
  public static void addMissDistance(FlatBufferBuilder builder, double MISS_DISTANCE) { builder.addDouble(6, MISS_DISTANCE, 0.0); }
  public static void addRelativeSpeed(FlatBufferBuilder builder, double RELATIVE_SPEED) { builder.addDouble(7, RELATIVE_SPEED, 0.0); }
  public static void addRelativePositionR(FlatBufferBuilder builder, double RELATIVE_POSITION_R) { builder.addDouble(8, RELATIVE_POSITION_R, 0.0); }
  public static void addRelativePositionT(FlatBufferBuilder builder, double RELATIVE_POSITION_T) { builder.addDouble(9, RELATIVE_POSITION_T, 0.0); }
  public static void addRelativePositionN(FlatBufferBuilder builder, double RELATIVE_POSITION_N) { builder.addDouble(10, RELATIVE_POSITION_N, 0.0); }
  public static void addRelativeVelocityR(FlatBufferBuilder builder, double RELATIVE_VELOCITY_R) { builder.addDouble(11, RELATIVE_VELOCITY_R, 0.0); }
  public static void addRelativeVelocityT(FlatBufferBuilder builder, double RELATIVE_VELOCITY_T) { builder.addDouble(12, RELATIVE_VELOCITY_T, 0.0); }
  public static void addRelativeVelocityN(FlatBufferBuilder builder, double RELATIVE_VELOCITY_N) { builder.addDouble(13, RELATIVE_VELOCITY_N, 0.0); }
  public static void addStartScreenPeriod(FlatBufferBuilder builder, int START_SCREEN_PERIODOffset) { builder.addOffset(14, START_SCREEN_PERIODOffset, 0); }
  public static void addStopScreenPeriod(FlatBufferBuilder builder, int STOP_SCREEN_PERIODOffset) { builder.addOffset(15, STOP_SCREEN_PERIODOffset, 0); }
  public static void addScreenVolumeFrame(FlatBufferBuilder builder, byte SCREEN_VOLUME_FRAME) { builder.addByte(16, SCREEN_VOLUME_FRAME, 0); }
  public static void addScreenVolumeShape(FlatBufferBuilder builder, byte SCREEN_VOLUME_SHAPE) { builder.addByte(17, SCREEN_VOLUME_SHAPE, 0); }
  public static void addScreenVolumeX(FlatBufferBuilder builder, double SCREEN_VOLUME_X) { builder.addDouble(18, SCREEN_VOLUME_X, 0.0); }
  public static void addScreenVolumeY(FlatBufferBuilder builder, double SCREEN_VOLUME_Y) { builder.addDouble(19, SCREEN_VOLUME_Y, 0.0); }
  public static void addScreenVolumeZ(FlatBufferBuilder builder, double SCREEN_VOLUME_Z) { builder.addDouble(20, SCREEN_VOLUME_Z, 0.0); }
  public static void addScreenEntryTime(FlatBufferBuilder builder, int SCREEN_ENTRY_TIMEOffset) { builder.addOffset(21, SCREEN_ENTRY_TIMEOffset, 0); }
  public static void addScreenExitTime(FlatBufferBuilder builder, int SCREEN_EXIT_TIMEOffset) { builder.addOffset(22, SCREEN_EXIT_TIMEOffset, 0); }
  public static void addCollisionProbability(FlatBufferBuilder builder, double COLLISION_PROBABILITY) { builder.addDouble(23, COLLISION_PROBABILITY, 0.0); }
  public static void addCollisionProbabilityMethod(FlatBufferBuilder builder, int COLLISION_PROBABILITY_METHODOffset) { builder.addOffset(24, COLLISION_PROBABILITY_METHODOffset, 0); }
  public static void addObject1(FlatBufferBuilder builder, int OBJECT1Offset) { builder.addOffset(25, OBJECT1Offset, 0); }
  public static void addObject2(FlatBufferBuilder builder, int OBJECT2Offset) { builder.addOffset(26, OBJECT2Offset, 0); }
  public static void addObject1Datasource(FlatBufferBuilder builder, int OBJECT1_DATASOURCEOffset) { builder.addOffset(27, OBJECT1_DATASOURCEOffset, 0); }
  public static void addObject2Datasource(FlatBufferBuilder builder, int OBJECT2_DATASOURCEOffset) { builder.addOffset(28, OBJECT2_DATASOURCEOffset, 0); }
  public static int endCDM(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CDM get(int j) { return get(new CDM(), j); }
    public CDM get(CDM obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

