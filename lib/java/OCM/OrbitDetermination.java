// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class OrbitDetermination extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static OrbitDetermination getRootAsOrbitDetermination(ByteBuffer _bb) { return getRootAsOrbitDetermination(_bb, new OrbitDetermination()); }
  public static OrbitDetermination getRootAsOrbitDetermination(ByteBuffer _bb, OrbitDetermination obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OrbitDetermination __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier for the orbit determination.
   */
  public String OD_ID() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OD_IDAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer OD_IDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Identifier of the previous orbit determination.
   */
  public String OD_PREV_ID() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OD_PREV_IDAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer OD_PREV_IDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Algorithm used for orbit determination.
   */
  public String OD_ALGORITHM() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OD_ALGORITHMAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer OD_ALGORITHMInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Method used for orbit determination.
   */
  public String OD_METHOD() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OD_METHODAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer OD_METHODInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Epoch of the orbit determination.
   */
  public String OD_EPOCH() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OD_EPOCHAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer OD_EPOCHInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Time tag of the orbit determination.
   */
  public String OD_TIME_TAG() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OD_TIME_TAGAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer OD_TIME_TAGInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Process noise model used.
   */
  public String OD_PROCESS_NOISE() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OD_PROCESS_NOISEAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer OD_PROCESS_NOISEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Covariance reduction techniques used.
   */
  public String OD_COV_REDUCTION() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OD_COV_REDUCTIONAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer OD_COV_REDUCTIONInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Noise models used.
   */
  public String OD_NOISE_MODELS() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OD_NOISE_MODELSAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer OD_NOISE_MODELSInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Types of observations used (e.g., RANGE, DOPPLER).
   */
  public String OD_OBSERVATIONS_TYPE(int j) { int o = __offset(22); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int OD_OBSERVATIONS_TYPELength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public StringVector odObservationsTypeVector() { return odObservationsTypeVector(new StringVector()); }
  public StringVector odObservationsTypeVector(StringVector obj) { int o = __offset(22); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Number of observations used.
   */
  public int OD_OBSERVATIONS_USED() { int o = __offset(24); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of tracks used.
   */
  public int OD_TRACKS_USED() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Data weighting scheme used.
   */
  public String OD_DATA_WEIGHTING() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OD_DATA_WEIGHTINGAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer OD_DATA_WEIGHTINGInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Convergence criteria used.
   */
  public String OD_CONVERGENCE_CRITERIA() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OD_CONVERGENCE_CRITERIAAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer OD_CONVERGENCE_CRITERIAInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Parameters estimated during orbit determination.
   */
  public String OD_EST_PARAMETERS(int j) { int o = __offset(32); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int OD_EST_PARAMETERSLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public StringVector odEstParametersVector() { return odEstParametersVector(new StringVector()); }
  public StringVector odEstParametersVector(StringVector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * A priori data used for orbit determination.
   */
  public String OD_APRIORI_DATA() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OD_APRIORI_DATAAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer OD_APRIORI_DATAInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Residuals from the orbit determination.
   */
  public String OD_RESIDUALS() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OD_RESIDUALSAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer OD_RESIDUALSInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }

  public static int createOrbitDetermination(FlatBufferBuilder builder,
      int OD_IDOffset,
      int OD_PREV_IDOffset,
      int OD_ALGORITHMOffset,
      int OD_METHODOffset,
      int OD_EPOCHOffset,
      int OD_TIME_TAGOffset,
      int OD_PROCESS_NOISEOffset,
      int OD_COV_REDUCTIONOffset,
      int OD_NOISE_MODELSOffset,
      int OD_OBSERVATIONS_TYPEOffset,
      int OD_OBSERVATIONS_USED,
      int OD_TRACKS_USED,
      int OD_DATA_WEIGHTINGOffset,
      int OD_CONVERGENCE_CRITERIAOffset,
      int OD_EST_PARAMETERSOffset,
      int OD_APRIORI_DATAOffset,
      int OD_RESIDUALSOffset) {
    builder.startTable(17);
    OrbitDetermination.addOdResiduals(builder, OD_RESIDUALSOffset);
    OrbitDetermination.addOdAprioriData(builder, OD_APRIORI_DATAOffset);
    OrbitDetermination.addOdEstParameters(builder, OD_EST_PARAMETERSOffset);
    OrbitDetermination.addOdConvergenceCriteria(builder, OD_CONVERGENCE_CRITERIAOffset);
    OrbitDetermination.addOdDataWeighting(builder, OD_DATA_WEIGHTINGOffset);
    OrbitDetermination.addOdTracksUsed(builder, OD_TRACKS_USED);
    OrbitDetermination.addOdObservationsUsed(builder, OD_OBSERVATIONS_USED);
    OrbitDetermination.addOdObservationsType(builder, OD_OBSERVATIONS_TYPEOffset);
    OrbitDetermination.addOdNoiseModels(builder, OD_NOISE_MODELSOffset);
    OrbitDetermination.addOdCovReduction(builder, OD_COV_REDUCTIONOffset);
    OrbitDetermination.addOdProcessNoise(builder, OD_PROCESS_NOISEOffset);
    OrbitDetermination.addOdTimeTag(builder, OD_TIME_TAGOffset);
    OrbitDetermination.addOdEpoch(builder, OD_EPOCHOffset);
    OrbitDetermination.addOdMethod(builder, OD_METHODOffset);
    OrbitDetermination.addOdAlgorithm(builder, OD_ALGORITHMOffset);
    OrbitDetermination.addOdPrevId(builder, OD_PREV_IDOffset);
    OrbitDetermination.addOdId(builder, OD_IDOffset);
    return OrbitDetermination.endOrbitDetermination(builder);
  }

  public static void startOrbitDetermination(FlatBufferBuilder builder) { builder.startTable(17); }
  public static void addOdId(FlatBufferBuilder builder, int OD_IDOffset) { builder.addOffset(0, OD_IDOffset, 0); }
  public static void addOdPrevId(FlatBufferBuilder builder, int OD_PREV_IDOffset) { builder.addOffset(1, OD_PREV_IDOffset, 0); }
  public static void addOdAlgorithm(FlatBufferBuilder builder, int OD_ALGORITHMOffset) { builder.addOffset(2, OD_ALGORITHMOffset, 0); }
  public static void addOdMethod(FlatBufferBuilder builder, int OD_METHODOffset) { builder.addOffset(3, OD_METHODOffset, 0); }
  public static void addOdEpoch(FlatBufferBuilder builder, int OD_EPOCHOffset) { builder.addOffset(4, OD_EPOCHOffset, 0); }
  public static void addOdTimeTag(FlatBufferBuilder builder, int OD_TIME_TAGOffset) { builder.addOffset(5, OD_TIME_TAGOffset, 0); }
  public static void addOdProcessNoise(FlatBufferBuilder builder, int OD_PROCESS_NOISEOffset) { builder.addOffset(6, OD_PROCESS_NOISEOffset, 0); }
  public static void addOdCovReduction(FlatBufferBuilder builder, int OD_COV_REDUCTIONOffset) { builder.addOffset(7, OD_COV_REDUCTIONOffset, 0); }
  public static void addOdNoiseModels(FlatBufferBuilder builder, int OD_NOISE_MODELSOffset) { builder.addOffset(8, OD_NOISE_MODELSOffset, 0); }
  public static void addOdObservationsType(FlatBufferBuilder builder, int OD_OBSERVATIONS_TYPEOffset) { builder.addOffset(9, OD_OBSERVATIONS_TYPEOffset, 0); }
  public static int createOdObservationsTypeVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOdObservationsTypeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOdObservationsUsed(FlatBufferBuilder builder, int OD_OBSERVATIONS_USED) { builder.addInt(10, OD_OBSERVATIONS_USED, 0); }
  public static void addOdTracksUsed(FlatBufferBuilder builder, int OD_TRACKS_USED) { builder.addInt(11, OD_TRACKS_USED, 0); }
  public static void addOdDataWeighting(FlatBufferBuilder builder, int OD_DATA_WEIGHTINGOffset) { builder.addOffset(12, OD_DATA_WEIGHTINGOffset, 0); }
  public static void addOdConvergenceCriteria(FlatBufferBuilder builder, int OD_CONVERGENCE_CRITERIAOffset) { builder.addOffset(13, OD_CONVERGENCE_CRITERIAOffset, 0); }
  public static void addOdEstParameters(FlatBufferBuilder builder, int OD_EST_PARAMETERSOffset) { builder.addOffset(14, OD_EST_PARAMETERSOffset, 0); }
  public static int createOdEstParametersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOdEstParametersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOdAprioriData(FlatBufferBuilder builder, int OD_APRIORI_DATAOffset) { builder.addOffset(15, OD_APRIORI_DATAOffset, 0); }
  public static void addOdResiduals(FlatBufferBuilder builder, int OD_RESIDUALSOffset) { builder.addOffset(16, OD_RESIDUALSOffset, 0); }
  public static int endOrbitDetermination(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OrbitDetermination get(int j) { return get(new OrbitDetermination(), j); }
    public OrbitDetermination get(OrbitDetermination obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

