// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Perturbations extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Perturbations getRootAsPerturbations(ByteBuffer _bb) { return getRootAsPerturbations(_bb, new Perturbations()); }
  public static Perturbations getRootAsPerturbations(ByteBuffer _bb, Perturbations obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Perturbations __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Comments in the Perturbations section.
   */
  public String COMMENT(int j) { int o = __offset(4); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int COMMENTLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public StringVector commentVector() { return commentVector(new StringVector()); }
  public StringVector commentVector(StringVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Atmospheric model used.
   */
  public ATM ATMOSPHERIC_MODEL() { return ATMOSPHERIC_MODEL(new ATM()); }
  public ATM ATMOSPHERIC_MODEL(ATM obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * Gravity model used.
   */
  public String GRAVITY_MODEL() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer GRAVITY_MODELAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer GRAVITY_MODELInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Degree of the gravity model.
   */
  public int GRAVITY_DEGREE() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Order of the gravity model.
   */
  public int GRAVITY_ORDER() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Gravitational constant times the mass of the central body.
   */
  public double GM() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * List of celestial bodies included in n-body perturbations.
   */
  public String N_BODY_PERTURBATIONS(int j) { int o = __offset(16); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int N_BODY_PERTURBATIONSLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public StringVector nBodyPerturbationsVector() { return nBodyPerturbationsVector(new StringVector()); }
  public StringVector nBodyPerturbationsVector(StringVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Ocean tides model used.
   */
  public String OCEAN_TIDES_MODEL() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OCEAN_TIDES_MODELAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer OCEAN_TIDES_MODELInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Solid tides model used.
   */
  public String SOLID_TIDES_MODEL() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer SOLID_TIDES_MODELAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer SOLID_TIDES_MODELInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Atmospheric tides model used.
   */
  public String ATMOSPHERIC_TIDES_MODEL() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ATMOSPHERIC_TIDES_MODELAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer ATMOSPHERIC_TIDES_MODELInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Geopotential model used.
   */
  public String GEOPOTENTIAL_MODEL() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer GEOPOTENTIAL_MODELAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer GEOPOTENTIAL_MODELInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Solar radiation pressure model used.
   */
  public String SOLAR_RAD_PRESSURE() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer SOLAR_RAD_PRESSUREAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer SOLAR_RAD_PRESSUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Albedo model used.
   */
  public String ALBEDO() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ALBEDOAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer ALBEDOInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Thermal model used.
   */
  public String THERMAL() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer THERMALAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer THERMALInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Relativity model used.
   */
  public String RELATIVITY() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer RELATIVITYAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer RELATIVITYInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Atmospheric drag model used.
   */
  public String ATMOSPHERIC_DRAG() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ATMOSPHERIC_DRAGAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer ATMOSPHERIC_DRAGInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Fixed geomagnetic Kp index used.
   */
  public double FIXED_GEOMAG_KP() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fixed F10.7 solar flux value used.
   */
  public double FIXED_F10P7() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fixed mean F10.7 solar flux value used.
   */
  public double FIXED_F10P7_MEAN() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createPerturbations(FlatBufferBuilder builder,
      int COMMENTOffset,
      int ATMOSPHERIC_MODELOffset,
      int GRAVITY_MODELOffset,
      int GRAVITY_DEGREE,
      int GRAVITY_ORDER,
      double GM,
      int N_BODY_PERTURBATIONSOffset,
      int OCEAN_TIDES_MODELOffset,
      int SOLID_TIDES_MODELOffset,
      int ATMOSPHERIC_TIDES_MODELOffset,
      int GEOPOTENTIAL_MODELOffset,
      int SOLAR_RAD_PRESSUREOffset,
      int ALBEDOOffset,
      int THERMALOffset,
      int RELATIVITYOffset,
      int ATMOSPHERIC_DRAGOffset,
      double FIXED_GEOMAG_KP,
      double FIXED_F10P7,
      double FIXED_F10P7_MEAN) {
    builder.startTable(19);
    Perturbations.addFixedF10P7Mean(builder, FIXED_F10P7_MEAN);
    Perturbations.addFixedF10P7(builder, FIXED_F10P7);
    Perturbations.addFixedGeomagKp(builder, FIXED_GEOMAG_KP);
    Perturbations.addGm(builder, GM);
    Perturbations.addAtmosphericDrag(builder, ATMOSPHERIC_DRAGOffset);
    Perturbations.addRelativity(builder, RELATIVITYOffset);
    Perturbations.addThermal(builder, THERMALOffset);
    Perturbations.addAlbedo(builder, ALBEDOOffset);
    Perturbations.addSolarRadPressure(builder, SOLAR_RAD_PRESSUREOffset);
    Perturbations.addGeopotentialModel(builder, GEOPOTENTIAL_MODELOffset);
    Perturbations.addAtmosphericTidesModel(builder, ATMOSPHERIC_TIDES_MODELOffset);
    Perturbations.addSolidTidesModel(builder, SOLID_TIDES_MODELOffset);
    Perturbations.addOceanTidesModel(builder, OCEAN_TIDES_MODELOffset);
    Perturbations.addNBodyPerturbations(builder, N_BODY_PERTURBATIONSOffset);
    Perturbations.addGravityOrder(builder, GRAVITY_ORDER);
    Perturbations.addGravityDegree(builder, GRAVITY_DEGREE);
    Perturbations.addGravityModel(builder, GRAVITY_MODELOffset);
    Perturbations.addAtmosphericModel(builder, ATMOSPHERIC_MODELOffset);
    Perturbations.addComment(builder, COMMENTOffset);
    return Perturbations.endPerturbations(builder);
  }

  public static void startPerturbations(FlatBufferBuilder builder) { builder.startTable(19); }
  public static void addComment(FlatBufferBuilder builder, int COMMENTOffset) { builder.addOffset(0, COMMENTOffset, 0); }
  public static int createCommentVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCommentVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAtmosphericModel(FlatBufferBuilder builder, int ATMOSPHERIC_MODELOffset) { builder.addOffset(1, ATMOSPHERIC_MODELOffset, 0); }
  public static void addGravityModel(FlatBufferBuilder builder, int GRAVITY_MODELOffset) { builder.addOffset(2, GRAVITY_MODELOffset, 0); }
  public static void addGravityDegree(FlatBufferBuilder builder, int GRAVITY_DEGREE) { builder.addInt(3, GRAVITY_DEGREE, 0); }
  public static void addGravityOrder(FlatBufferBuilder builder, int GRAVITY_ORDER) { builder.addInt(4, GRAVITY_ORDER, 0); }
  public static void addGm(FlatBufferBuilder builder, double GM) { builder.addDouble(5, GM, 0.0); }
  public static void addNBodyPerturbations(FlatBufferBuilder builder, int N_BODY_PERTURBATIONSOffset) { builder.addOffset(6, N_BODY_PERTURBATIONSOffset, 0); }
  public static int createNBodyPerturbationsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startNBodyPerturbationsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOceanTidesModel(FlatBufferBuilder builder, int OCEAN_TIDES_MODELOffset) { builder.addOffset(7, OCEAN_TIDES_MODELOffset, 0); }
  public static void addSolidTidesModel(FlatBufferBuilder builder, int SOLID_TIDES_MODELOffset) { builder.addOffset(8, SOLID_TIDES_MODELOffset, 0); }
  public static void addAtmosphericTidesModel(FlatBufferBuilder builder, int ATMOSPHERIC_TIDES_MODELOffset) { builder.addOffset(9, ATMOSPHERIC_TIDES_MODELOffset, 0); }
  public static void addGeopotentialModel(FlatBufferBuilder builder, int GEOPOTENTIAL_MODELOffset) { builder.addOffset(10, GEOPOTENTIAL_MODELOffset, 0); }
  public static void addSolarRadPressure(FlatBufferBuilder builder, int SOLAR_RAD_PRESSUREOffset) { builder.addOffset(11, SOLAR_RAD_PRESSUREOffset, 0); }
  public static void addAlbedo(FlatBufferBuilder builder, int ALBEDOOffset) { builder.addOffset(12, ALBEDOOffset, 0); }
  public static void addThermal(FlatBufferBuilder builder, int THERMALOffset) { builder.addOffset(13, THERMALOffset, 0); }
  public static void addRelativity(FlatBufferBuilder builder, int RELATIVITYOffset) { builder.addOffset(14, RELATIVITYOffset, 0); }
  public static void addAtmosphericDrag(FlatBufferBuilder builder, int ATMOSPHERIC_DRAGOffset) { builder.addOffset(15, ATMOSPHERIC_DRAGOffset, 0); }
  public static void addFixedGeomagKp(FlatBufferBuilder builder, double FIXED_GEOMAG_KP) { builder.addDouble(16, FIXED_GEOMAG_KP, 0.0); }
  public static void addFixedF10P7(FlatBufferBuilder builder, double FIXED_F10P7) { builder.addDouble(17, FIXED_F10P7, 0.0); }
  public static void addFixedF10P7Mean(FlatBufferBuilder builder, double FIXED_F10P7_MEAN) { builder.addDouble(18, FIXED_F10P7_MEAN, 0.0); }
  public static int endPerturbations(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Perturbations get(int j) { return get(new Perturbations(), j); }
    public Perturbations get(Perturbations obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

