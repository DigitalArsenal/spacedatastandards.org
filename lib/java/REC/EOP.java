// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Earth Orientation Parameters
 */
@SuppressWarnings("unused")
public final class EOP extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static EOP getRootAsEOP(ByteBuffer _bb) { return getRootAsEOP(_bb, new EOP()); }
  public static EOP getRootAsEOP(ByteBuffer _bb, EOP obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean EOPBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "$EOP"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EOP __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Date in ISO 8601 format
   */
  public String DATE() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer DATEAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer DATEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Modified Julian Date
   */
  public long MJD() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * x pole coordinate in arcseconds
   */
  public float X() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * y pole coordinate in arcseconds
   */
  public float Y() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * UT1-UTC in seconds
   */
  public float UT1_MINUS_UTC() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Length of Day correction in seconds
   */
  public float LOD() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Nutation correction in longitude (δΔψ) in arcseconds
   */
  public float DPSI() { int o = __offset(16); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Nutation correction in obliquity (δΔε) in arcseconds
   */
  public float DEPS() { int o = __offset(18); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Celestial pole offset in x (δX) in arcseconds
   */
  public float DX() { int o = __offset(20); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Celestial pole offset in y (δY) in arcseconds
   */
  public float DY() { int o = __offset(22); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Delta Atomic Time (TAI-UTC) in seconds
   */
  public int DAT() { int o = __offset(24); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  /**
   * Data type (O = Observed, P = Predicted)
   */
  public byte DATA_TYPE() { int o = __offset(26); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createEOP(FlatBufferBuilder builder,
      int DATEOffset,
      long MJD,
      float X,
      float Y,
      float UT1_MINUS_UTC,
      float LOD,
      float DPSI,
      float DEPS,
      float DX,
      float DY,
      int DAT,
      byte DATA_TYPE) {
    builder.startTable(12);
    EOP.addDy(builder, DY);
    EOP.addDx(builder, DX);
    EOP.addDeps(builder, DEPS);
    EOP.addDpsi(builder, DPSI);
    EOP.addLod(builder, LOD);
    EOP.addUt1MinusUtc(builder, UT1_MINUS_UTC);
    EOP.addY(builder, Y);
    EOP.addX(builder, X);
    EOP.addMjd(builder, MJD);
    EOP.addDate(builder, DATEOffset);
    EOP.addDat(builder, DAT);
    EOP.addDataType(builder, DATA_TYPE);
    return EOP.endEOP(builder);
  }

  public static void startEOP(FlatBufferBuilder builder) { builder.startTable(12); }
  public static void addDate(FlatBufferBuilder builder, int DATEOffset) { builder.addOffset(0, DATEOffset, 0); }
  public static void addMjd(FlatBufferBuilder builder, long MJD) { builder.addInt(1, (int) MJD, (int) 0L); }
  public static void addX(FlatBufferBuilder builder, float X) { builder.addFloat(2, X, 0.0f); }
  public static void addY(FlatBufferBuilder builder, float Y) { builder.addFloat(3, Y, 0.0f); }
  public static void addUt1MinusUtc(FlatBufferBuilder builder, float UT1_MINUS_UTC) { builder.addFloat(4, UT1_MINUS_UTC, 0.0f); }
  public static void addLod(FlatBufferBuilder builder, float LOD) { builder.addFloat(5, LOD, 0.0f); }
  public static void addDpsi(FlatBufferBuilder builder, float DPSI) { builder.addFloat(6, DPSI, 0.0f); }
  public static void addDeps(FlatBufferBuilder builder, float DEPS) { builder.addFloat(7, DEPS, 0.0f); }
  public static void addDx(FlatBufferBuilder builder, float DX) { builder.addFloat(8, DX, 0.0f); }
  public static void addDy(FlatBufferBuilder builder, float DY) { builder.addFloat(9, DY, 0.0f); }
  public static void addDat(FlatBufferBuilder builder, int DAT) { builder.addShort(10, (short) DAT, (short) 0); }
  public static void addDataType(FlatBufferBuilder builder, byte DATA_TYPE) { builder.addByte(11, DATA_TYPE, 0); }
  public static int endEOP(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEOPBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "$EOP"); }
  public static void finishSizePrefixedEOPBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "$EOP"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EOP get(int j) { return get(new EOP(), j); }
    public EOP get(EOP obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

