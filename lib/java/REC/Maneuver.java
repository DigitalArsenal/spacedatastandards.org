// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Maneuver extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Maneuver getRootAsManeuver(ByteBuffer _bb) { return getRootAsManeuver(_bb, new Maneuver()); }
  public static Maneuver getRootAsManeuver(ByteBuffer _bb, Maneuver obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Maneuver __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier for the maneuver.
   */
  public String MAN_ID() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MAN_IDAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer MAN_IDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Basis of the maneuver plan (e.g., planned, predicted, estimated).
   */
  public String MAN_BASIS() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MAN_BASISAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer MAN_BASISInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Identifier of the maneuver device.
   */
  public String MAN_DEVICE_ID() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MAN_DEVICE_IDAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer MAN_DEVICE_IDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Identifier of the previous maneuver.
   */
  public String MAN_PREV_ID() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MAN_PREV_IDAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer MAN_PREV_IDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Purpose of the maneuver.
   */
  public String MAN_PURPOSE() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MAN_PURPOSEAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer MAN_PURPOSEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Reference frame for the maneuver data.
   */
  public String MAN_REF_FRAME() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MAN_REF_FRAMEAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer MAN_REF_FRAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Epoch of the maneuver reference frame.
   */
  public String MAN_FRAME_EPOCH() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MAN_FRAME_EPOCHAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer MAN_FRAME_EPOCHInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Type of maneuver (e.g., IMPULSIVE, FINITE).
   */
  public String MAN_TYPE() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MAN_TYPEAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer MAN_TYPEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Start epoch of the maneuver.
   */
  public String MAN_EPOCH_START() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MAN_EPOCH_STARTAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer MAN_EPOCH_STARTInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Duration of the maneuver.
   */
  public double MAN_DURATION() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Units for the maneuver data values.
   */
  public String MAN_UNITS(int j) { int o = __offset(24); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int MAN_UNITSLength() { int o = __offset(24); return o != 0 ? __vector_len(o) : 0; }
  public StringVector manUnitsVector() { return manUnitsVector(new StringVector()); }
  public StringVector manUnitsVector(StringVector obj) { int o = __offset(24); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Data associated with the maneuver.
   */
  public String DATA(int j) { int o = __offset(26); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int DATALength() { int o = __offset(26); return o != 0 ? __vector_len(o) : 0; }
  public StringVector dataVector() { return dataVector(new StringVector()); }
  public StringVector dataVector(StringVector obj) { int o = __offset(26); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Comments related to the maneuver.
   */
  public String MAN_COMMENT(int j) { int o = __offset(28); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int MAN_COMMENTLength() { int o = __offset(28); return o != 0 ? __vector_len(o) : 0; }
  public StringVector manCommentVector() { return manCommentVector(new StringVector()); }
  public StringVector manCommentVector(StringVector obj) { int o = __offset(28); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createManeuver(FlatBufferBuilder builder,
      int MAN_IDOffset,
      int MAN_BASISOffset,
      int MAN_DEVICE_IDOffset,
      int MAN_PREV_IDOffset,
      int MAN_PURPOSEOffset,
      int MAN_REF_FRAMEOffset,
      int MAN_FRAME_EPOCHOffset,
      int MAN_TYPEOffset,
      int MAN_EPOCH_STARTOffset,
      double MAN_DURATION,
      int MAN_UNITSOffset,
      int DATAOffset,
      int MAN_COMMENTOffset) {
    builder.startTable(13);
    Maneuver.addManDuration(builder, MAN_DURATION);
    Maneuver.addManComment(builder, MAN_COMMENTOffset);
    Maneuver.addData(builder, DATAOffset);
    Maneuver.addManUnits(builder, MAN_UNITSOffset);
    Maneuver.addManEpochStart(builder, MAN_EPOCH_STARTOffset);
    Maneuver.addManType(builder, MAN_TYPEOffset);
    Maneuver.addManFrameEpoch(builder, MAN_FRAME_EPOCHOffset);
    Maneuver.addManRefFrame(builder, MAN_REF_FRAMEOffset);
    Maneuver.addManPurpose(builder, MAN_PURPOSEOffset);
    Maneuver.addManPrevId(builder, MAN_PREV_IDOffset);
    Maneuver.addManDeviceId(builder, MAN_DEVICE_IDOffset);
    Maneuver.addManBasis(builder, MAN_BASISOffset);
    Maneuver.addManId(builder, MAN_IDOffset);
    return Maneuver.endManeuver(builder);
  }

  public static void startManeuver(FlatBufferBuilder builder) { builder.startTable(13); }
  public static void addManId(FlatBufferBuilder builder, int MAN_IDOffset) { builder.addOffset(0, MAN_IDOffset, 0); }
  public static void addManBasis(FlatBufferBuilder builder, int MAN_BASISOffset) { builder.addOffset(1, MAN_BASISOffset, 0); }
  public static void addManDeviceId(FlatBufferBuilder builder, int MAN_DEVICE_IDOffset) { builder.addOffset(2, MAN_DEVICE_IDOffset, 0); }
  public static void addManPrevId(FlatBufferBuilder builder, int MAN_PREV_IDOffset) { builder.addOffset(3, MAN_PREV_IDOffset, 0); }
  public static void addManPurpose(FlatBufferBuilder builder, int MAN_PURPOSEOffset) { builder.addOffset(4, MAN_PURPOSEOffset, 0); }
  public static void addManRefFrame(FlatBufferBuilder builder, int MAN_REF_FRAMEOffset) { builder.addOffset(5, MAN_REF_FRAMEOffset, 0); }
  public static void addManFrameEpoch(FlatBufferBuilder builder, int MAN_FRAME_EPOCHOffset) { builder.addOffset(6, MAN_FRAME_EPOCHOffset, 0); }
  public static void addManType(FlatBufferBuilder builder, int MAN_TYPEOffset) { builder.addOffset(7, MAN_TYPEOffset, 0); }
  public static void addManEpochStart(FlatBufferBuilder builder, int MAN_EPOCH_STARTOffset) { builder.addOffset(8, MAN_EPOCH_STARTOffset, 0); }
  public static void addManDuration(FlatBufferBuilder builder, double MAN_DURATION) { builder.addDouble(9, MAN_DURATION, 0.0); }
  public static void addManUnits(FlatBufferBuilder builder, int MAN_UNITSOffset) { builder.addOffset(10, MAN_UNITSOffset, 0); }
  public static int createManUnitsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startManUnitsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addData(FlatBufferBuilder builder, int DATAOffset) { builder.addOffset(11, DATAOffset, 0); }
  public static int createDataVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addManComment(FlatBufferBuilder builder, int MAN_COMMENTOffset) { builder.addOffset(12, MAN_COMMENTOffset, 0); }
  public static int createManCommentVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startManCommentVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endManeuver(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Maneuver get(int j) { return get(new Maneuver(), j); }
    public Maneuver get(Maneuver obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

