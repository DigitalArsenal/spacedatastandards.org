// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Observation Stability Message
 */
@SuppressWarnings("unused")
public final class OSM extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static OSM getRootAsOSM(ByteBuffer _bb) { return getRootAsOSM(_bb, new OSM()); }
  public static OSM getRootAsOSM(ByteBuffer _bb, OSM obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean OSMBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "$OSM"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OSM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Indicates whether the observation is stable or not
   */
  public boolean IS_STABLE() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The number of observations
   */
  public int NUM_OBS() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Unique identifier for the object being observed
   */
  public String OBJECT_ID() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OBJECT_IDAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer OBJECT_IDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Identifier of the sensor
   */
  public String ID_SENSOR() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ID_SENSORAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer ID_SENSORInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Timestamp of data creation
   */
  public String PASS_START() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer PASS_STARTAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer PASS_STARTInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Duration of the observation pass in seconds
   */
  public int PASS_DURATION() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createOSM(FlatBufferBuilder builder,
      boolean IS_STABLE,
      int NUM_OBS,
      int OBJECT_IDOffset,
      int ID_SENSOROffset,
      int PASS_STARTOffset,
      int PASS_DURATION) {
    builder.startTable(6);
    OSM.addPassDuration(builder, PASS_DURATION);
    OSM.addPassStart(builder, PASS_STARTOffset);
    OSM.addIdSensor(builder, ID_SENSOROffset);
    OSM.addObjectId(builder, OBJECT_IDOffset);
    OSM.addNumObs(builder, NUM_OBS);
    OSM.addIsStable(builder, IS_STABLE);
    return OSM.endOSM(builder);
  }

  public static void startOSM(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addIsStable(FlatBufferBuilder builder, boolean IS_STABLE) { builder.addBoolean(0, IS_STABLE, false); }
  public static void addNumObs(FlatBufferBuilder builder, int NUM_OBS) { builder.addInt(1, NUM_OBS, 0); }
  public static void addObjectId(FlatBufferBuilder builder, int OBJECT_IDOffset) { builder.addOffset(2, OBJECT_IDOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int ID_SENSOROffset) { builder.addOffset(3, ID_SENSOROffset, 0); }
  public static void addPassStart(FlatBufferBuilder builder, int PASS_STARTOffset) { builder.addOffset(4, PASS_STARTOffset, 0); }
  public static void addPassDuration(FlatBufferBuilder builder, int PASS_DURATION) { builder.addInt(5, PASS_DURATION, 0); }
  public static int endOSM(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishOSMBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "$OSM"); }
  public static void finishSizePrefixedOSMBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "$OSM"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OSM get(int j) { return get(new OSM(), j); }
    public OSM get(OSM obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

