// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * OPM Covariance Matrix Line
 */
@SuppressWarnings("unused")
public final class opmCovarianceMatrixLine extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static opmCovarianceMatrixLine getRootAsopmCovarianceMatrixLine(ByteBuffer _bb) { return getRootAsopmCovarianceMatrixLine(_bb, new opmCovarianceMatrixLine()); }
  public static opmCovarianceMatrixLine getRootAsopmCovarianceMatrixLine(ByteBuffer _bb, opmCovarianceMatrixLine obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public opmCovarianceMatrixLine __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double CX_X() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double CY_X() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double CZ_X() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double CX_DOT_X() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createopmCovarianceMatrixLine(FlatBufferBuilder builder,
      double CX_X,
      double CY_X,
      double CZ_X,
      double CX_DOT_X) {
    builder.startTable(4);
    opmCovarianceMatrixLine.addCxDotX(builder, CX_DOT_X);
    opmCovarianceMatrixLine.addCzX(builder, CZ_X);
    opmCovarianceMatrixLine.addCyX(builder, CY_X);
    opmCovarianceMatrixLine.addCxX(builder, CX_X);
    return opmCovarianceMatrixLine.endopmCovarianceMatrixLine(builder);
  }

  public static void startopmCovarianceMatrixLine(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addCxX(FlatBufferBuilder builder, double CX_X) { builder.addDouble(0, CX_X, 0.0); }
  public static void addCyX(FlatBufferBuilder builder, double CY_X) { builder.addDouble(1, CY_X, 0.0); }
  public static void addCzX(FlatBufferBuilder builder, double CZ_X) { builder.addDouble(2, CZ_X, 0.0); }
  public static void addCxDotX(FlatBufferBuilder builder, double CX_DOT_X) { builder.addDouble(3, CX_DOT_X, 0.0); }
  public static int endopmCovarianceMatrixLine(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public opmCovarianceMatrixLine get(int j) { return get(new opmCovarianceMatrixLine(), j); }
    public opmCovarianceMatrixLine get(opmCovarianceMatrixLine obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

