// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Geometry table with information about geometric properties
 */
@SuppressWarnings("unused")
public final class Geometry extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Geometry getRootAsGeometry(ByteBuffer _bb) { return getRootAsGeometry(_bb, new Geometry()); }
  public static Geometry getRootAsGeometry(ByteBuffer _bb, Geometry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Geometry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Type of geometry
   */
  public String GEOMETRY_TYPE() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer GEOMETRY_TYPEAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer GEOMETRY_TYPEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Coordinates of the geometry
   */
  public float COORDINATES(int j) { int o = __offset(6); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int COORDINATESLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public FloatVector coordinatesVector() { return coordinatesVector(new FloatVector()); }
  public FloatVector coordinatesVector(FloatVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer COORDINATESAsByteBuffer() { return __vector_as_bytebuffer(6, 4); }
  public ByteBuffer COORDINATESInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 4); }

  public static int createGeometry(FlatBufferBuilder builder,
      int GEOMETRY_TYPEOffset,
      int COORDINATESOffset) {
    builder.startTable(2);
    Geometry.addCoordinates(builder, COORDINATESOffset);
    Geometry.addGeometryType(builder, GEOMETRY_TYPEOffset);
    return Geometry.endGeometry(builder);
  }

  public static void startGeometry(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addGeometryType(FlatBufferBuilder builder, int GEOMETRY_TYPEOffset) { builder.addOffset(0, GEOMETRY_TYPEOffset, 0); }
  public static void addCoordinates(FlatBufferBuilder builder, int COORDINATESOffset) { builder.addOffset(1, COORDINATESOffset, 0); }
  public static int createCoordinatesVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startCoordinatesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endGeometry(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Geometry get(int j) { return get(new Geometry(), j); }
    public Geometry get(Geometry obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

