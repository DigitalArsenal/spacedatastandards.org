// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Orbit Ephemeris Message
 */
@SuppressWarnings("unused")
public final class OEM extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static OEM getRootAsOEM(ByteBuffer _bb) { return getRootAsOEM(_bb, new OEM()); }
  public static OEM getRootAsOEM(ByteBuffer _bb, OEM obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean OEMBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "$OEM"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OEM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * OEM Header
   * OEM Version
   */
  public double CCSDS_OEM_VERS() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Creation Date
   */
  public String CREATION_DATE() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CREATION_DATEAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer CREATION_DATEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Originator
   */
  public String ORIGINATOR() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ORIGINATORAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer ORIGINATORInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Array of ephemeris data blocks
   */
  public ephemerisDataBlock EPHEMERIS_DATA_BLOCK(int j) { return EPHEMERIS_DATA_BLOCK(new ephemerisDataBlock(), j); }
  public ephemerisDataBlock EPHEMERIS_DATA_BLOCK(ephemerisDataBlock obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int EPHEMERIS_DATA_BLOCKLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ephemerisDataBlock.Vector ephemerisDataBlockVector() { return ephemerisDataBlockVector(new ephemerisDataBlock.Vector()); }
  public ephemerisDataBlock.Vector ephemerisDataBlockVector(ephemerisDataBlock.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createOEM(FlatBufferBuilder builder,
      double CCSDS_OEM_VERS,
      int CREATION_DATEOffset,
      int ORIGINATOROffset,
      int EPHEMERIS_DATA_BLOCKOffset) {
    builder.startTable(4);
    OEM.addCcsdsOemVers(builder, CCSDS_OEM_VERS);
    OEM.addEphemerisDataBlock(builder, EPHEMERIS_DATA_BLOCKOffset);
    OEM.addOriginator(builder, ORIGINATOROffset);
    OEM.addCreationDate(builder, CREATION_DATEOffset);
    return OEM.endOEM(builder);
  }

  public static void startOEM(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addCcsdsOemVers(FlatBufferBuilder builder, double CCSDS_OEM_VERS) { builder.addDouble(0, CCSDS_OEM_VERS, 0.0); }
  public static void addCreationDate(FlatBufferBuilder builder, int CREATION_DATEOffset) { builder.addOffset(1, CREATION_DATEOffset, 0); }
  public static void addOriginator(FlatBufferBuilder builder, int ORIGINATOROffset) { builder.addOffset(2, ORIGINATOROffset, 0); }
  public static void addEphemerisDataBlock(FlatBufferBuilder builder, int EPHEMERIS_DATA_BLOCKOffset) { builder.addOffset(3, EPHEMERIS_DATA_BLOCKOffset, 0); }
  public static int createEphemerisDataBlockVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEphemerisDataBlockVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endOEM(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishOEMBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "$OEM"); }
  public static void finishSizePrefixedOEMBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "$OEM"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OEM get(int j) { return get(new OEM(), j); }
    public OEM get(OEM obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

