// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Space Weather Data Record
 */
@SuppressWarnings("unused")
public final class SPW extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SPW getRootAsSPW(ByteBuffer _bb) { return getRootAsSPW(_bb, new SPW()); }
  public static SPW getRootAsSPW(ByteBuffer _bb, SPW obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SPWBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "$SPW"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SPW __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Date in ISO 8601 format
   */
  public String DATE() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer DATEAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer DATEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Bartels Solar Rotation Number
   */
  public int BSRN() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Day within Bartels cycle (1-27)
   */
  public int ND() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary 3-hour Range Index (Kp) for 0000-0300 UT, multiplied by 10
   */
  public int KP1() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary 3-hour Range Index (Kp) for 0300-0600 UT, multiplied by 10
   */
  public int KP2() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary 3-hour Range Index (Kp) for 0600-0900 UT, multiplied by 10
   */
  public int KP3() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary 3-hour Range Index (Kp) for 0900-1200 UT, multiplied by 10
   */
  public int KP4() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary 3-hour Range Index (Kp) for 1200-1500 UT, multiplied by 10
   */
  public int KP5() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary 3-hour Range Index (Kp) for 1500-1800 UT, multiplied by 10
   */
  public int KP6() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary 3-hour Range Index (Kp) for 1800-2100 UT, multiplied by 10
   */
  public int KP7() { int o = __offset(22); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary 3-hour Range Index (Kp) for 2100-0000 UT, multiplied by 10
   */
  public int KP8() { int o = __offset(24); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Sum of the 8 Kp indices for the day
   */
  public int KP_SUM() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary Equivalent Amplitude (Ap) for 0000-0300 UT
   */
  public int AP1() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary Equivalent Amplitude (Ap) for 0300-0600 UT
   */
  public int AP2() { int o = __offset(30); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary Equivalent Amplitude (Ap) for 0600-0900 UT
   */
  public int AP3() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary Equivalent Amplitude (Ap) for 0900-1200 UT
   */
  public int AP4() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary Equivalent Amplitude (Ap) for 1200-1500 UT
   */
  public int AP5() { int o = __offset(36); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary Equivalent Amplitude (Ap) for 1500-1800 UT
   */
  public int AP6() { int o = __offset(38); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary Equivalent Amplitude (Ap) for 1800-2100 UT
   */
  public int AP7() { int o = __offset(40); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary Equivalent Amplitude (Ap) for 2100-0000 UT
   */
  public int AP8() { int o = __offset(42); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Arithmetic average of the 8 Ap indices for the day
   */
  public int AP_AVG() { int o = __offset(44); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Planetary Daily Character Figure (0.0 to 2.5)
   */
  public float CP() { int o = __offset(46); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * C9 index (0-9)
   */
  public int C9() { int o = __offset(48); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * International Sunspot Number
   */
  public int ISN() { int o = __offset(50); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Observed 10.7cm Solar Radio Flux
   */
  public float F107_OBS() { int o = __offset(52); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * Adjusted 10.7cm Solar Radio Flux (to 1 AU)
   */
  public float F107_ADJ() { int o = __offset(54); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * F10.7 Data Type
   */
  public byte F107_DATA_TYPE() { int o = __offset(56); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * 81-day centered average of observed F10.7
   */
  public float F107_OBS_CENTER81() { int o = __offset(58); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * 81-day trailing average of observed F10.7
   */
  public float F107_OBS_LAST81() { int o = __offset(60); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * 81-day centered average of adjusted F10.7
   */
  public float F107_ADJ_CENTER81() { int o = __offset(62); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * 81-day trailing average of adjusted F10.7
   */
  public float F107_ADJ_LAST81() { int o = __offset(64); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createSPW(FlatBufferBuilder builder,
      int DATEOffset,
      int BSRN,
      int ND,
      int KP1,
      int KP2,
      int KP3,
      int KP4,
      int KP5,
      int KP6,
      int KP7,
      int KP8,
      int KP_SUM,
      int AP1,
      int AP2,
      int AP3,
      int AP4,
      int AP5,
      int AP6,
      int AP7,
      int AP8,
      int AP_AVG,
      float CP,
      int C9,
      int ISN,
      float F107_OBS,
      float F107_ADJ,
      byte F107_DATA_TYPE,
      float F107_OBS_CENTER81,
      float F107_OBS_LAST81,
      float F107_ADJ_CENTER81,
      float F107_ADJ_LAST81) {
    builder.startTable(31);
    SPW.addF107AdjLast81(builder, F107_ADJ_LAST81);
    SPW.addF107AdjCenter81(builder, F107_ADJ_CENTER81);
    SPW.addF107ObsLast81(builder, F107_OBS_LAST81);
    SPW.addF107ObsCenter81(builder, F107_OBS_CENTER81);
    SPW.addF107Adj(builder, F107_ADJ);
    SPW.addF107Obs(builder, F107_OBS);
    SPW.addIsn(builder, ISN);
    SPW.addC9(builder, C9);
    SPW.addCp(builder, CP);
    SPW.addApAvg(builder, AP_AVG);
    SPW.addAp8(builder, AP8);
    SPW.addAp7(builder, AP7);
    SPW.addAp6(builder, AP6);
    SPW.addAp5(builder, AP5);
    SPW.addAp4(builder, AP4);
    SPW.addAp3(builder, AP3);
    SPW.addAp2(builder, AP2);
    SPW.addAp1(builder, AP1);
    SPW.addKpSum(builder, KP_SUM);
    SPW.addKp8(builder, KP8);
    SPW.addKp7(builder, KP7);
    SPW.addKp6(builder, KP6);
    SPW.addKp5(builder, KP5);
    SPW.addKp4(builder, KP4);
    SPW.addKp3(builder, KP3);
    SPW.addKp2(builder, KP2);
    SPW.addKp1(builder, KP1);
    SPW.addNd(builder, ND);
    SPW.addBsrn(builder, BSRN);
    SPW.addDate(builder, DATEOffset);
    SPW.addF107DataType(builder, F107_DATA_TYPE);
    return SPW.endSPW(builder);
  }

  public static void startSPW(FlatBufferBuilder builder) { builder.startTable(31); }
  public static void addDate(FlatBufferBuilder builder, int DATEOffset) { builder.addOffset(0, DATEOffset, 0); }
  public static void addBsrn(FlatBufferBuilder builder, int BSRN) { builder.addInt(1, BSRN, 0); }
  public static void addNd(FlatBufferBuilder builder, int ND) { builder.addInt(2, ND, 0); }
  public static void addKp1(FlatBufferBuilder builder, int KP1) { builder.addInt(3, KP1, 0); }
  public static void addKp2(FlatBufferBuilder builder, int KP2) { builder.addInt(4, KP2, 0); }
  public static void addKp3(FlatBufferBuilder builder, int KP3) { builder.addInt(5, KP3, 0); }
  public static void addKp4(FlatBufferBuilder builder, int KP4) { builder.addInt(6, KP4, 0); }
  public static void addKp5(FlatBufferBuilder builder, int KP5) { builder.addInt(7, KP5, 0); }
  public static void addKp6(FlatBufferBuilder builder, int KP6) { builder.addInt(8, KP6, 0); }
  public static void addKp7(FlatBufferBuilder builder, int KP7) { builder.addInt(9, KP7, 0); }
  public static void addKp8(FlatBufferBuilder builder, int KP8) { builder.addInt(10, KP8, 0); }
  public static void addKpSum(FlatBufferBuilder builder, int KP_SUM) { builder.addInt(11, KP_SUM, 0); }
  public static void addAp1(FlatBufferBuilder builder, int AP1) { builder.addInt(12, AP1, 0); }
  public static void addAp2(FlatBufferBuilder builder, int AP2) { builder.addInt(13, AP2, 0); }
  public static void addAp3(FlatBufferBuilder builder, int AP3) { builder.addInt(14, AP3, 0); }
  public static void addAp4(FlatBufferBuilder builder, int AP4) { builder.addInt(15, AP4, 0); }
  public static void addAp5(FlatBufferBuilder builder, int AP5) { builder.addInt(16, AP5, 0); }
  public static void addAp6(FlatBufferBuilder builder, int AP6) { builder.addInt(17, AP6, 0); }
  public static void addAp7(FlatBufferBuilder builder, int AP7) { builder.addInt(18, AP7, 0); }
  public static void addAp8(FlatBufferBuilder builder, int AP8) { builder.addInt(19, AP8, 0); }
  public static void addApAvg(FlatBufferBuilder builder, int AP_AVG) { builder.addInt(20, AP_AVG, 0); }
  public static void addCp(FlatBufferBuilder builder, float CP) { builder.addFloat(21, CP, 0.0f); }
  public static void addC9(FlatBufferBuilder builder, int C9) { builder.addInt(22, C9, 0); }
  public static void addIsn(FlatBufferBuilder builder, int ISN) { builder.addInt(23, ISN, 0); }
  public static void addF107Obs(FlatBufferBuilder builder, float F107_OBS) { builder.addFloat(24, F107_OBS, 0.0f); }
  public static void addF107Adj(FlatBufferBuilder builder, float F107_ADJ) { builder.addFloat(25, F107_ADJ, 0.0f); }
  public static void addF107DataType(FlatBufferBuilder builder, byte F107_DATA_TYPE) { builder.addByte(26, F107_DATA_TYPE, 0); }
  public static void addF107ObsCenter81(FlatBufferBuilder builder, float F107_OBS_CENTER81) { builder.addFloat(27, F107_OBS_CENTER81, 0.0f); }
  public static void addF107ObsLast81(FlatBufferBuilder builder, float F107_OBS_LAST81) { builder.addFloat(28, F107_OBS_LAST81, 0.0f); }
  public static void addF107AdjCenter81(FlatBufferBuilder builder, float F107_ADJ_CENTER81) { builder.addFloat(29, F107_ADJ_CENTER81, 0.0f); }
  public static void addF107AdjLast81(FlatBufferBuilder builder, float F107_ADJ_LAST81) { builder.addFloat(30, F107_ADJ_LAST81, 0.0f); }
  public static int endSPW(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSPWBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "$SPW"); }
  public static void finishSizePrefixedSPWBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "$SPW"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SPW get(int j) { return get(new SPW(), j); }
    public SPW get(SPW obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

