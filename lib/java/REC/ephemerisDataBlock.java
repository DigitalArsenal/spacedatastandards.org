// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * OEM Ephemeris Data Block
 */
@SuppressWarnings("unused")
public final class ephemerisDataBlock extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static ephemerisDataBlock getRootAsephemerisDataBlock(ByteBuffer _bb) { return getRootAsephemerisDataBlock(_bb, new ephemerisDataBlock()); }
  public static ephemerisDataBlock getRootAsephemerisDataBlock(ByteBuffer _bb, ephemerisDataBlock obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ephemerisDataBlock __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Plain-Text Comment
   */
  public String COMMENT() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer COMMENTAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer COMMENTInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Satellite Name(s)
   */
  public String OBJECT_NAME() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OBJECT_NAMEAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer OBJECT_NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * International Designator (YYYY-NNNAAA)
   */
  public String OBJECT_ID() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OBJECT_IDAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer OBJECT_IDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Origin of reference frame (EARTH, MARS, MOON, etc.)
   */
  public String CENTER_NAME() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CENTER_NAMEAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer CENTER_NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Name of the reference frame (TEME, EME2000, etc.)
   */
  public byte REFERENCE_FRAME() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Epoch of reference frame, if not intrinsic to the definition of the reference frame
   */
  public String REFERENCE_FRAME_EPOCH() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer REFERENCE_FRAME_EPOCHAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer REFERENCE_FRAME_EPOCHInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Time system used for the orbit state and covariance matrix. (UTC)
   */
  public byte TIME_SYSTEM() { int o = __offset(16); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Start of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)
   */
  public String START_TIME() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer START_TIMEAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer START_TIMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Optional start USEABLE time span covered by ephemeris data (ISO 8601)
   */
  public String USEABLE_START_TIME() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer USEABLE_START_TIMEAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer USEABLE_START_TIMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Optional end of USEABLE time span covered by ephemeris data (ISO 8601)
   */
  public String USEABLE_STOP_TIME() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer USEABLE_STOP_TIMEAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer USEABLE_STOP_TIMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * End of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)
   */
  public String STOP_TIME() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer STOP_TIMEAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer STOP_TIMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Recommended interpolation method for ephemeris data (Hermite, Linear, Lagrange, etc.)
   */
  public String INTERPOLATION() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer INTERPOLATIONAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer INTERPOLATIONInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Recommended interpolation degree for ephemeris data
   */
  public long INTERPOLATION_DEGREE() { int o = __offset(28); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * Array of ephemeris data lines
   */
  public ephemerisDataLine EPHEMERIS_DATA_LINES(int j) { return EPHEMERIS_DATA_LINES(new ephemerisDataLine(), j); }
  public ephemerisDataLine EPHEMERIS_DATA_LINES(ephemerisDataLine obj, int j) { int o = __offset(30); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int EPHEMERIS_DATA_LINESLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public ephemerisDataLine.Vector ephemerisDataLinesVector() { return ephemerisDataLinesVector(new ephemerisDataLine.Vector()); }
  public ephemerisDataLine.Vector ephemerisDataLinesVector(ephemerisDataLine.Vector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of covariance matrix lines
   */
  public covarianceMatrixLine COVARIANCE_MATRIX_LINES(int j) { return COVARIANCE_MATRIX_LINES(new covarianceMatrixLine(), j); }
  public covarianceMatrixLine COVARIANCE_MATRIX_LINES(covarianceMatrixLine obj, int j) { int o = __offset(32); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int COVARIANCE_MATRIX_LINESLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public covarianceMatrixLine.Vector covarianceMatrixLinesVector() { return covarianceMatrixLinesVector(new covarianceMatrixLine.Vector()); }
  public covarianceMatrixLine.Vector covarianceMatrixLinesVector(covarianceMatrixLine.Vector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createephemerisDataBlock(FlatBufferBuilder builder,
      int COMMENTOffset,
      int OBJECT_NAMEOffset,
      int OBJECT_IDOffset,
      int CENTER_NAMEOffset,
      byte REFERENCE_FRAME,
      int REFERENCE_FRAME_EPOCHOffset,
      byte TIME_SYSTEM,
      int START_TIMEOffset,
      int USEABLE_START_TIMEOffset,
      int USEABLE_STOP_TIMEOffset,
      int STOP_TIMEOffset,
      int INTERPOLATIONOffset,
      long INTERPOLATION_DEGREE,
      int EPHEMERIS_DATA_LINESOffset,
      int COVARIANCE_MATRIX_LINESOffset) {
    builder.startTable(15);
    ephemerisDataBlock.addCovarianceMatrixLines(builder, COVARIANCE_MATRIX_LINESOffset);
    ephemerisDataBlock.addEphemerisDataLines(builder, EPHEMERIS_DATA_LINESOffset);
    ephemerisDataBlock.addInterpolationDegree(builder, INTERPOLATION_DEGREE);
    ephemerisDataBlock.addInterpolation(builder, INTERPOLATIONOffset);
    ephemerisDataBlock.addStopTime(builder, STOP_TIMEOffset);
    ephemerisDataBlock.addUseableStopTime(builder, USEABLE_STOP_TIMEOffset);
    ephemerisDataBlock.addUseableStartTime(builder, USEABLE_START_TIMEOffset);
    ephemerisDataBlock.addStartTime(builder, START_TIMEOffset);
    ephemerisDataBlock.addReferenceFrameEpoch(builder, REFERENCE_FRAME_EPOCHOffset);
    ephemerisDataBlock.addCenterName(builder, CENTER_NAMEOffset);
    ephemerisDataBlock.addObjectId(builder, OBJECT_IDOffset);
    ephemerisDataBlock.addObjectName(builder, OBJECT_NAMEOffset);
    ephemerisDataBlock.addComment(builder, COMMENTOffset);
    ephemerisDataBlock.addTimeSystem(builder, TIME_SYSTEM);
    ephemerisDataBlock.addReferenceFrame(builder, REFERENCE_FRAME);
    return ephemerisDataBlock.endephemerisDataBlock(builder);
  }

  public static void startephemerisDataBlock(FlatBufferBuilder builder) { builder.startTable(15); }
  public static void addComment(FlatBufferBuilder builder, int COMMENTOffset) { builder.addOffset(0, COMMENTOffset, 0); }
  public static void addObjectName(FlatBufferBuilder builder, int OBJECT_NAMEOffset) { builder.addOffset(1, OBJECT_NAMEOffset, 0); }
  public static void addObjectId(FlatBufferBuilder builder, int OBJECT_IDOffset) { builder.addOffset(2, OBJECT_IDOffset, 0); }
  public static void addCenterName(FlatBufferBuilder builder, int CENTER_NAMEOffset) { builder.addOffset(3, CENTER_NAMEOffset, 0); }
  public static void addReferenceFrame(FlatBufferBuilder builder, byte REFERENCE_FRAME) { builder.addByte(4, REFERENCE_FRAME, 0); }
  public static void addReferenceFrameEpoch(FlatBufferBuilder builder, int REFERENCE_FRAME_EPOCHOffset) { builder.addOffset(5, REFERENCE_FRAME_EPOCHOffset, 0); }
  public static void addTimeSystem(FlatBufferBuilder builder, byte TIME_SYSTEM) { builder.addByte(6, TIME_SYSTEM, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int START_TIMEOffset) { builder.addOffset(7, START_TIMEOffset, 0); }
  public static void addUseableStartTime(FlatBufferBuilder builder, int USEABLE_START_TIMEOffset) { builder.addOffset(8, USEABLE_START_TIMEOffset, 0); }
  public static void addUseableStopTime(FlatBufferBuilder builder, int USEABLE_STOP_TIMEOffset) { builder.addOffset(9, USEABLE_STOP_TIMEOffset, 0); }
  public static void addStopTime(FlatBufferBuilder builder, int STOP_TIMEOffset) { builder.addOffset(10, STOP_TIMEOffset, 0); }
  public static void addInterpolation(FlatBufferBuilder builder, int INTERPOLATIONOffset) { builder.addOffset(11, INTERPOLATIONOffset, 0); }
  public static void addInterpolationDegree(FlatBufferBuilder builder, long INTERPOLATION_DEGREE) { builder.addInt(12, (int) INTERPOLATION_DEGREE, (int) 0L); }
  public static void addEphemerisDataLines(FlatBufferBuilder builder, int EPHEMERIS_DATA_LINESOffset) { builder.addOffset(13, EPHEMERIS_DATA_LINESOffset, 0); }
  public static int createEphemerisDataLinesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEphemerisDataLinesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCovarianceMatrixLines(FlatBufferBuilder builder, int COVARIANCE_MATRIX_LINESOffset) { builder.addOffset(14, COVARIANCE_MATRIX_LINESOffset, 0); }
  public static int createCovarianceMatrixLinesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCovarianceMatrixLinesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endephemerisDataBlock(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ephemerisDataBlock get(int j) { return get(new ephemerisDataBlock(), j); }
    public ephemerisDataBlock get(ephemerisDataBlock obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

