// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Catalog Entity Message
 */
@SuppressWarnings("unused")
public final class CAT extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static CAT getRootAsCAT(ByteBuffer _bb) { return getRootAsCAT(_bb, new CAT()); }
  public static CAT getRootAsCAT(ByteBuffer _bb, CAT obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean CATBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "$CAT"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CAT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Satellite Name(s)
   */
  public String OBJECT_NAME() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OBJECT_NAMEAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer OBJECT_NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * International Designator (YYYY-NNNAAA)
   */
  public String OBJECT_ID() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OBJECT_IDAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer OBJECT_IDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * NORAD Catalog Number
   */
  public long NORAD_CAT_ID() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * Object type (Payload, Rocket body, Debris, Unknown)
   */
  public byte OBJECT_TYPE() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) : 3; }
  /**
   * Operational Status Code
   */
  public byte OPS_STATUS_CODE() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) : 7; }
  /**
   * Ownership, typically country or company
   */
  public byte OWNER() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Launch Date [year-month-day] (ISO 8601)
   */
  public String LAUNCH_DATE() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer LAUNCH_DATEAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer LAUNCH_DATEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Launch Site
   */
  public String LAUNCH_SITE() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer LAUNCH_SITEAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer LAUNCH_SITEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Decay Date, if applicable [year-month-day] (ISO 8601)
   */
  public String DECAY_DATE() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer DECAY_DATEAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer DECAY_DATEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Orbital period [minutes]
   */
  public double PERIOD() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Inclination [degrees]
   */
  public double INCLINATION() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Apogee Altitude [kilometers]
   */
  public double APOGEE() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Perigee Altitude [kilometers]
   */
  public double PERIGEE() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Radar Cross Section [meters2]; blank if no data available
   */
  public double RCS() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Data status code; blank otherwise
   */
  public byte DATA_STATUS_CODE() { int o = __offset(32); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Orbit center
   */
  public String ORBIT_CENTER() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ORBIT_CENTERAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer ORBIT_CENTERInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Orbit type (Orbit, Landing, Impact, Docked to RSO, roundtrip)
   */
  public byte ORBIT_TYPE() { int o = __offset(36); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Deployment Date [year-month-day] (ISO 8601)
   */
  public String DEPLOYMENT_DATE() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer DEPLOYMENT_DATEAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer DEPLOYMENT_DATEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Indicates if the object is maneuverable
   */
  public boolean MANEUVERABLE() { int o = __offset(40); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Size [meters]; blank if no data available
   */
  public double SIZE() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Mass [kilograms]; blank if no data available
   */
  public double MASS() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Mass type (Dry, Wet)
   */
  public byte MASS_TYPE() { int o = __offset(46); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Vector of PAYLOADS
   */
  public PLD PAYLOADS(int j) { return PAYLOADS(new PLD(), j); }
  public PLD PAYLOADS(PLD obj, int j) { int o = __offset(48); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int PAYLOADSLength() { int o = __offset(48); return o != 0 ? __vector_len(o) : 0; }
  public PLD.Vector payloadsVector() { return payloadsVector(new PLD.Vector()); }
  public PLD.Vector payloadsVector(PLD.Vector obj) { int o = __offset(48); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createCAT(FlatBufferBuilder builder,
      int OBJECT_NAMEOffset,
      int OBJECT_IDOffset,
      long NORAD_CAT_ID,
      byte OBJECT_TYPE,
      byte OPS_STATUS_CODE,
      byte OWNER,
      int LAUNCH_DATEOffset,
      int LAUNCH_SITEOffset,
      int DECAY_DATEOffset,
      double PERIOD,
      double INCLINATION,
      double APOGEE,
      double PERIGEE,
      double RCS,
      byte DATA_STATUS_CODE,
      int ORBIT_CENTEROffset,
      byte ORBIT_TYPE,
      int DEPLOYMENT_DATEOffset,
      boolean MANEUVERABLE,
      double SIZE,
      double MASS,
      byte MASS_TYPE,
      int PAYLOADSOffset) {
    builder.startTable(23);
    CAT.addMass(builder, MASS);
    CAT.addSize(builder, SIZE);
    CAT.addRcs(builder, RCS);
    CAT.addPerigee(builder, PERIGEE);
    CAT.addApogee(builder, APOGEE);
    CAT.addInclination(builder, INCLINATION);
    CAT.addPeriod(builder, PERIOD);
    CAT.addPayloads(builder, PAYLOADSOffset);
    CAT.addDeploymentDate(builder, DEPLOYMENT_DATEOffset);
    CAT.addOrbitCenter(builder, ORBIT_CENTEROffset);
    CAT.addDecayDate(builder, DECAY_DATEOffset);
    CAT.addLaunchSite(builder, LAUNCH_SITEOffset);
    CAT.addLaunchDate(builder, LAUNCH_DATEOffset);
    CAT.addNoradCatId(builder, NORAD_CAT_ID);
    CAT.addObjectId(builder, OBJECT_IDOffset);
    CAT.addObjectName(builder, OBJECT_NAMEOffset);
    CAT.addMassType(builder, MASS_TYPE);
    CAT.addManeuverable(builder, MANEUVERABLE);
    CAT.addOrbitType(builder, ORBIT_TYPE);
    CAT.addDataStatusCode(builder, DATA_STATUS_CODE);
    CAT.addOwner(builder, OWNER);
    CAT.addOpsStatusCode(builder, OPS_STATUS_CODE);
    CAT.addObjectType(builder, OBJECT_TYPE);
    return CAT.endCAT(builder);
  }

  public static void startCAT(FlatBufferBuilder builder) { builder.startTable(23); }
  public static void addObjectName(FlatBufferBuilder builder, int OBJECT_NAMEOffset) { builder.addOffset(0, OBJECT_NAMEOffset, 0); }
  public static void addObjectId(FlatBufferBuilder builder, int OBJECT_IDOffset) { builder.addOffset(1, OBJECT_IDOffset, 0); }
  public static void addNoradCatId(FlatBufferBuilder builder, long NORAD_CAT_ID) { builder.addInt(2, (int) NORAD_CAT_ID, (int) 0L); }
  public static void addObjectType(FlatBufferBuilder builder, byte OBJECT_TYPE) { builder.addByte(3, OBJECT_TYPE, 3); }
  public static void addOpsStatusCode(FlatBufferBuilder builder, byte OPS_STATUS_CODE) { builder.addByte(4, OPS_STATUS_CODE, 7); }
  public static void addOwner(FlatBufferBuilder builder, byte OWNER) { builder.addByte(5, OWNER, 0); }
  public static void addLaunchDate(FlatBufferBuilder builder, int LAUNCH_DATEOffset) { builder.addOffset(6, LAUNCH_DATEOffset, 0); }
  public static void addLaunchSite(FlatBufferBuilder builder, int LAUNCH_SITEOffset) { builder.addOffset(7, LAUNCH_SITEOffset, 0); }
  public static void addDecayDate(FlatBufferBuilder builder, int DECAY_DATEOffset) { builder.addOffset(8, DECAY_DATEOffset, 0); }
  public static void addPeriod(FlatBufferBuilder builder, double PERIOD) { builder.addDouble(9, PERIOD, 0.0); }
  public static void addInclination(FlatBufferBuilder builder, double INCLINATION) { builder.addDouble(10, INCLINATION, 0.0); }
  public static void addApogee(FlatBufferBuilder builder, double APOGEE) { builder.addDouble(11, APOGEE, 0.0); }
  public static void addPerigee(FlatBufferBuilder builder, double PERIGEE) { builder.addDouble(12, PERIGEE, 0.0); }
  public static void addRcs(FlatBufferBuilder builder, double RCS) { builder.addDouble(13, RCS, 0.0); }
  public static void addDataStatusCode(FlatBufferBuilder builder, byte DATA_STATUS_CODE) { builder.addByte(14, DATA_STATUS_CODE, 0); }
  public static void addOrbitCenter(FlatBufferBuilder builder, int ORBIT_CENTEROffset) { builder.addOffset(15, ORBIT_CENTEROffset, 0); }
  public static void addOrbitType(FlatBufferBuilder builder, byte ORBIT_TYPE) { builder.addByte(16, ORBIT_TYPE, 0); }
  public static void addDeploymentDate(FlatBufferBuilder builder, int DEPLOYMENT_DATEOffset) { builder.addOffset(17, DEPLOYMENT_DATEOffset, 0); }
  public static void addManeuverable(FlatBufferBuilder builder, boolean MANEUVERABLE) { builder.addBoolean(18, MANEUVERABLE, false); }
  public static void addSize(FlatBufferBuilder builder, double SIZE) { builder.addDouble(19, SIZE, 0.0); }
  public static void addMass(FlatBufferBuilder builder, double MASS) { builder.addDouble(20, MASS, 0.0); }
  public static void addMassType(FlatBufferBuilder builder, byte MASS_TYPE) { builder.addByte(21, MASS_TYPE, 0); }
  public static void addPayloads(FlatBufferBuilder builder, int PAYLOADSOffset) { builder.addOffset(22, PAYLOADSOffset, 0); }
  public static int createPayloadsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPayloadsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endCAT(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishCATBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "$CAT"); }
  public static void finishSizePrefixedCATBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "$CAT"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CAT get(int j) { return get(new CAT(), j); }
    public CAT get(CAT obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

