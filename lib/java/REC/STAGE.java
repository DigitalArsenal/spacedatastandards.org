// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Stage Details
 */
@SuppressWarnings("unused")
public final class STAGE extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static STAGE getRootAsSTAGE(ByteBuffer _bb) { return getRootAsSTAGE(_bb, new STAGE()); }
  public static STAGE getRootAsSTAGE(ByteBuffer _bb, STAGE obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public STAGE __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Stage Number
   */
  public int STAGE_NUMBER() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Engines Used in This Stage
   */
  public ENGINE ENGINES(int j) { return ENGINES(new ENGINE(), j); }
  public ENGINE ENGINES(ENGINE obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int ENGINESLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ENGINE.Vector enginesVector() { return enginesVector(new ENGINE.Vector()); }
  public ENGINE.Vector enginesVector(ENGINE.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Fuel Type Used in This Stage
   */
  public String FUEL_TYPE() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer FUEL_TYPEAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer FUEL_TYPEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Thrust Produced by This Stage (in Newtons)
   */
  public double THRUST() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Duration of the Burn (in Seconds)
   */
  public double BURN_DURATION() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createSTAGE(FlatBufferBuilder builder,
      int STAGE_NUMBER,
      int ENGINESOffset,
      int FUEL_TYPEOffset,
      double THRUST,
      double BURN_DURATION) {
    builder.startTable(5);
    STAGE.addBurnDuration(builder, BURN_DURATION);
    STAGE.addThrust(builder, THRUST);
    STAGE.addFuelType(builder, FUEL_TYPEOffset);
    STAGE.addEngines(builder, ENGINESOffset);
    STAGE.addStageNumber(builder, STAGE_NUMBER);
    return STAGE.endSTAGE(builder);
  }

  public static void startSTAGE(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addStageNumber(FlatBufferBuilder builder, int STAGE_NUMBER) { builder.addInt(0, STAGE_NUMBER, 0); }
  public static void addEngines(FlatBufferBuilder builder, int ENGINESOffset) { builder.addOffset(1, ENGINESOffset, 0); }
  public static int createEnginesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEnginesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFuelType(FlatBufferBuilder builder, int FUEL_TYPEOffset) { builder.addOffset(2, FUEL_TYPEOffset, 0); }
  public static void addThrust(FlatBufferBuilder builder, double THRUST) { builder.addDouble(3, THRUST, 0.0); }
  public static void addBurnDuration(FlatBufferBuilder builder, double BURN_DURATION) { builder.addDouble(4, BURN_DURATION, 0.0); }
  public static int endSTAGE(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public STAGE get(int j) { return get(new STAGE(), j); }
    public STAGE get(STAGE obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

