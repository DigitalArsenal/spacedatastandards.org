// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Keplerian Elements
 */
@SuppressWarnings("unused")
public final class keplerianElements extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static keplerianElements getRootAskeplerianElements(ByteBuffer _bb) { return getRootAskeplerianElements(_bb, new keplerianElements()); }
  public static keplerianElements getRootAskeplerianElements(ByteBuffer _bb, keplerianElements obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public keplerianElements __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double SEMI_MAJOR_AXIS() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double ECCENTRICITY() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double INCLINATION() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double RA_OF_ASC_NODE() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double ARG_OF_PERICENTER() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public byte ANOMALY_TYPE() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public double ANOMALY() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createkeplerianElements(FlatBufferBuilder builder,
      double SEMI_MAJOR_AXIS,
      double ECCENTRICITY,
      double INCLINATION,
      double RA_OF_ASC_NODE,
      double ARG_OF_PERICENTER,
      byte ANOMALY_TYPE,
      double ANOMALY) {
    builder.startTable(7);
    keplerianElements.addAnomaly(builder, ANOMALY);
    keplerianElements.addArgOfPericenter(builder, ARG_OF_PERICENTER);
    keplerianElements.addRaOfAscNode(builder, RA_OF_ASC_NODE);
    keplerianElements.addInclination(builder, INCLINATION);
    keplerianElements.addEccentricity(builder, ECCENTRICITY);
    keplerianElements.addSemiMajorAxis(builder, SEMI_MAJOR_AXIS);
    keplerianElements.addAnomalyType(builder, ANOMALY_TYPE);
    return keplerianElements.endkeplerianElements(builder);
  }

  public static void startkeplerianElements(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addSemiMajorAxis(FlatBufferBuilder builder, double SEMI_MAJOR_AXIS) { builder.addDouble(0, SEMI_MAJOR_AXIS, 0.0); }
  public static void addEccentricity(FlatBufferBuilder builder, double ECCENTRICITY) { builder.addDouble(1, ECCENTRICITY, 0.0); }
  public static void addInclination(FlatBufferBuilder builder, double INCLINATION) { builder.addDouble(2, INCLINATION, 0.0); }
  public static void addRaOfAscNode(FlatBufferBuilder builder, double RA_OF_ASC_NODE) { builder.addDouble(3, RA_OF_ASC_NODE, 0.0); }
  public static void addArgOfPericenter(FlatBufferBuilder builder, double ARG_OF_PERICENTER) { builder.addDouble(4, ARG_OF_PERICENTER, 0.0); }
  public static void addAnomalyType(FlatBufferBuilder builder, byte ANOMALY_TYPE) { builder.addByte(5, ANOMALY_TYPE, 0); }
  public static void addAnomaly(FlatBufferBuilder builder, double ANOMALY) { builder.addDouble(6, ANOMALY, 0.0); }
  public static int endkeplerianElements(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public keplerianElements get(int j) { return get(new keplerianElements(), j); }
    public keplerianElements get(keplerianElements obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

