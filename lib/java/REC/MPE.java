// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Minimum Propagatable Element Set
 */
@SuppressWarnings("unused")
public final class MPE extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static MPE getRootAsMPE(ByteBuffer _bb) { return getRootAsMPE(_bb, new MPE()); }
  public static MPE getRootAsMPE(ByteBuffer _bb, MPE obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean MPEBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "$MPE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MPE __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique ID as a String [no units]
   */
  public String ENTITY_ID() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ENTITY_IDAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer ENTITY_IDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Epoch of Mean Keplerian elements (UNIX timestamp) [numeric seconds since 1970-01-01T00:00:00 UTC]
   */
  public double EPOCH() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Mean motion in rev/day [M if chosen to represent orbit size for SGP/SGP4 elements]
   */
  public double MEAN_MOTION() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Eccentricity (unitless)
   */
  public double ECCENTRICITY() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Inclination in degrees
   */
  public double INCLINATION() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Right ascension of ascending node in degrees
   */
  public double RA_OF_ASC_NODE() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Argument of pericenter in degrees
   */
  public double ARG_OF_PERICENTER() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Mean anomaly in degrees
   */
  public double MEAN_ANOMALY() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * SGP/SGP4 drag-like coefficient (BSTAR) in units of 1/[Earth radii]
   */
  public double BSTAR() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Description of the Mean Element Theory (SGP4, DSST, USM)
   */
  public byte MEAN_ELEMENT_THEORY() { int o = __offset(22); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createMPE(FlatBufferBuilder builder,
      int ENTITY_IDOffset,
      double EPOCH,
      double MEAN_MOTION,
      double ECCENTRICITY,
      double INCLINATION,
      double RA_OF_ASC_NODE,
      double ARG_OF_PERICENTER,
      double MEAN_ANOMALY,
      double BSTAR,
      byte MEAN_ELEMENT_THEORY) {
    builder.startTable(10);
    MPE.addBstar(builder, BSTAR);
    MPE.addMeanAnomaly(builder, MEAN_ANOMALY);
    MPE.addArgOfPericenter(builder, ARG_OF_PERICENTER);
    MPE.addRaOfAscNode(builder, RA_OF_ASC_NODE);
    MPE.addInclination(builder, INCLINATION);
    MPE.addEccentricity(builder, ECCENTRICITY);
    MPE.addMeanMotion(builder, MEAN_MOTION);
    MPE.addEpoch(builder, EPOCH);
    MPE.addEntityId(builder, ENTITY_IDOffset);
    MPE.addMeanElementTheory(builder, MEAN_ELEMENT_THEORY);
    return MPE.endMPE(builder);
  }

  public static void startMPE(FlatBufferBuilder builder) { builder.startTable(10); }
  public static void addEntityId(FlatBufferBuilder builder, int ENTITY_IDOffset) { builder.addOffset(0, ENTITY_IDOffset, 0); }
  public static void addEpoch(FlatBufferBuilder builder, double EPOCH) { builder.addDouble(1, EPOCH, 0.0); }
  public static void addMeanMotion(FlatBufferBuilder builder, double MEAN_MOTION) { builder.addDouble(2, MEAN_MOTION, 0.0); }
  public static void addEccentricity(FlatBufferBuilder builder, double ECCENTRICITY) { builder.addDouble(3, ECCENTRICITY, 0.0); }
  public static void addInclination(FlatBufferBuilder builder, double INCLINATION) { builder.addDouble(4, INCLINATION, 0.0); }
  public static void addRaOfAscNode(FlatBufferBuilder builder, double RA_OF_ASC_NODE) { builder.addDouble(5, RA_OF_ASC_NODE, 0.0); }
  public static void addArgOfPericenter(FlatBufferBuilder builder, double ARG_OF_PERICENTER) { builder.addDouble(6, ARG_OF_PERICENTER, 0.0); }
  public static void addMeanAnomaly(FlatBufferBuilder builder, double MEAN_ANOMALY) { builder.addDouble(7, MEAN_ANOMALY, 0.0); }
  public static void addBstar(FlatBufferBuilder builder, double BSTAR) { builder.addDouble(8, BSTAR, 0.0); }
  public static void addMeanElementTheory(FlatBufferBuilder builder, byte MEAN_ELEMENT_THEORY) { builder.addByte(9, MEAN_ELEMENT_THEORY, 0); }
  public static int endMPE(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishMPEBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "$MPE"); }
  public static void finishSizePrefixedMPEBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "$MPE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MPE get(int j) { return get(new MPE(), j); }
    public MPE get(MPE obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

