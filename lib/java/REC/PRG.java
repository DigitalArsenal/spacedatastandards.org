// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Program Description Message
 */
@SuppressWarnings("unused")
public final class PRG extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static PRG getRootAsPRG(ByteBuffer _bb) { return getRootAsPRG(_bb, new PRG()); }
  public static PRG getRootAsPRG(ByteBuffer _bb, PRG obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean PRGBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "$PRG"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PRG __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The name of the program
   */
  public String NAME() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer NAMEAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Hierarchical Deterministic (HD) derivation path for the program's key, used in cryptocurrency wallets
   */
  public String HD_KEY_PATH() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer HD_KEY_PATHAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer HD_KEY_PATHInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Vector of standard message types used by the program
   */
  public String MESSAGE_TYPES(int j) { int o = __offset(8); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int MESSAGE_TYPESLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public StringVector messageTypesVector() { return messageTypesVector(new StringVector()); }
  public StringVector messageTypesVector(StringVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Vector of users associated with the program, each user can have assigned message types
   */
  public USR USERS(int j) { return USERS(new USR(), j); }
  public USR USERS(USR obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int USERSLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public USR.Vector usersVector() { return usersVector(new USR.Vector()); }
  public USR.Vector usersVector(USR.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createPRG(FlatBufferBuilder builder,
      int NAMEOffset,
      int HD_KEY_PATHOffset,
      int MESSAGE_TYPESOffset,
      int USERSOffset) {
    builder.startTable(4);
    PRG.addUsers(builder, USERSOffset);
    PRG.addMessageTypes(builder, MESSAGE_TYPESOffset);
    PRG.addHdKeyPath(builder, HD_KEY_PATHOffset);
    PRG.addName(builder, NAMEOffset);
    return PRG.endPRG(builder);
  }

  public static void startPRG(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addName(FlatBufferBuilder builder, int NAMEOffset) { builder.addOffset(0, NAMEOffset, 0); }
  public static void addHdKeyPath(FlatBufferBuilder builder, int HD_KEY_PATHOffset) { builder.addOffset(1, HD_KEY_PATHOffset, 0); }
  public static void addMessageTypes(FlatBufferBuilder builder, int MESSAGE_TYPESOffset) { builder.addOffset(2, MESSAGE_TYPESOffset, 0); }
  public static int createMessageTypesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMessageTypesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUsers(FlatBufferBuilder builder, int USERSOffset) { builder.addOffset(3, USERSOffset, 0); }
  public static int createUsersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUsersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPRG(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishPRGBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "$PRG"); }
  public static void finishSizePrefixedPRGBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "$PRG"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PRG get(int j) { return get(new PRG(), j); }
    public PRG get(PRG obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

