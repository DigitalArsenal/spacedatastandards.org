// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Metadata extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Metadata getRootAsMetadata(ByteBuffer _bb) { return getRootAsMetadata(_bb, new Metadata()); }
  public static Metadata getRootAsMetadata(ByteBuffer _bb, Metadata obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Metadata __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Comments in the Metadata section.
   */
  public String COMMENT(int j) { int o = __offset(4); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int COMMENTLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public StringVector commentVector() { return commentVector(new StringVector()); }
  public StringVector commentVector(StringVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Free-text field containing the name of the object.
   */
  public String OBJECT_NAME() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OBJECT_NAMEAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer OBJECT_NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * International designator for the object as assigned by COSPAR.
   */
  public String INTERNATIONAL_DESIGNATOR() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer INTERNATIONAL_DESIGNATORAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer INTERNATIONAL_DESIGNATORInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Satellite catalog source from which 'OBJECT_DESIGNATOR' was obtained.
   */
  public String CATALOG_NAME() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CATALOG_NAMEAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer CATALOG_NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Unique satellite identification designator from the catalog.
   */
  public String OBJECT_DESIGNATOR() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OBJECT_DESIGNATORAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer OBJECT_DESIGNATORInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Alternate names of this space object.
   */
  public String ALTERNATE_NAMES(int j) { int o = __offset(14); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int ALTERNATE_NAMESLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public StringVector alternateNamesVector() { return alternateNamesVector(new StringVector()); }
  public StringVector alternateNamesVector(StringVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Originator or programmatic Point-of-Contact (PoC) for OCM.
   */
  public String ORIGINATOR_POC() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ORIGINATOR_POCAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer ORIGINATOR_POCInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Contact position of the originator PoC.
   */
  public String ORIGINATOR_POSITION() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ORIGINATOR_POSITIONAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer ORIGINATOR_POSITIONInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Originator PoC phone number.
   */
  public String ORIGINATOR_PHONE() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ORIGINATOR_PHONEAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer ORIGINATOR_PHONEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Originator PoC email address.
   */
  public String ORIGINATOR_EMAIL() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ORIGINATOR_EMAILAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer ORIGINATOR_EMAILInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Originator's physical address information.
   */
  public String ORIGINATOR_ADDRESS() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ORIGINATOR_ADDRESSAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer ORIGINATOR_ADDRESSInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Creating agency or operator for technical contact.
   */
  public String TECH_ORG() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TECH_ORGAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer TECH_ORGInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Technical Point-of-Contact (PoC) for OCM.
   */
  public String TECH_POC() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TECH_POCAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer TECH_POCInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Contact position of the technical PoC.
   */
  public String TECH_POSITION() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TECH_POSITIONAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer TECH_POSITIONInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Technical PoC phone number.
   */
  public String TECH_PHONE() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TECH_PHONEAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer TECH_PHONEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Technical PoC email address.
   */
  public String TECH_EMAIL() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TECH_EMAILAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer TECH_EMAILInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Technical PoC physical address information.
   */
  public String TECH_ADDRESS() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TECH_ADDRESSAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer TECH_ADDRESSInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * ID that uniquely identifies the previous message from this originator.
   */
  public String PREVIOUS_MESSAGE_ID() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer PREVIOUS_MESSAGE_IDAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer PREVIOUS_MESSAGE_IDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * ID that uniquely identifies the next message from this originator.
   */
  public String NEXT_MESSAGE_ID() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer NEXT_MESSAGE_IDAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer NEXT_MESSAGE_IDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Unique identifier of Attitude Data Messages linked to this OCM.
   */
  public String ADM_MSG_LINK() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ADM_MSG_LINKAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer ADM_MSG_LINKInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Unique identifier of Conjunction Data Messages linked to this OCM.
   */
  public String CDM_MSG_LINK() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CDM_MSG_LINKAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer CDM_MSG_LINKInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Unique identifier of Pointing Request Messages linked to this OCM.
   */
  public String PRM_MSG_LINK() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer PRM_MSG_LINKAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer PRM_MSG_LINKInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Unique identifier of Reentry Data Messages linked to this OCM.
   */
  public String RDM_MSG_LINK() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer RDM_MSG_LINKAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer RDM_MSG_LINKInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * List of Tracking Data Messages upon which this orbit determination is based.
   */
  public String TDM_MSG_LINK(int j) { int o = __offset(50); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int TDM_MSG_LINKLength() { int o = __offset(50); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tdmMsgLinkVector() { return tdmMsgLinkVector(new StringVector()); }
  public StringVector tdmMsgLinkVector(StringVector obj) { int o = __offset(50); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Operator of the space object.
   */
  public String OPERATOR() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OPERATORAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer OPERATORInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Owner of the space object.
   */
  public String OWNER() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OWNERAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer OWNERInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Country where the space object owner is based.
   */
  public String COUNTRY() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer COUNTRYAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer COUNTRYInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Name of the constellation to which this space object belongs.
   */
  public String CONSTELLATION() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CONSTELLATIONAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer CONSTELLATIONInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Specification of the type of object (e.g., PAYLOAD, ROCKET BODY, DEBRIS).
   */
  public String OBJECT_TYPE() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OBJECT_TYPEAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer OBJECT_TYPEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Time system for all absolute time stamps in this OCM, including EPOCH_TZERO.
   */
  public String TIME_SYSTEM() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TIME_SYSTEMAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer TIME_SYSTEMInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Default epoch to which all relative times are referenced in data blocks.
   */
  public String EPOCH_TZERO() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer EPOCH_TZEROAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer EPOCH_TZEROInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Specification of the operational status of the space object.
   */
  public String OPS_STATUS() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OPS_STATUSAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer OPS_STATUSInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Specification of the type of orbit (e.g., GEO, LEO).
   */
  public String ORBIT_CATEGORY() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ORBIT_CATEGORYAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer ORBIT_CATEGORYInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * List of elements of information data blocks included in this message.
   */
  public String OCM_DATA_ELEMENTS(int j) { int o = __offset(70); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int OCM_DATA_ELEMENTSLength() { int o = __offset(70); return o != 0 ? __vector_len(o) : 0; }
  public StringVector ocmDataElementsVector() { return ocmDataElementsVector(new StringVector()); }
  public StringVector ocmDataElementsVector(StringVector obj) { int o = __offset(70); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Number of spacecraft clock counts at EPOCH_TZERO (used if TIME_SYSTEM is SCLK).
   */
  public double SCLK_OFFSET_AT_EPOCH() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Number of clock seconds occurring during one SI second (used if TIME_SYSTEM is SCLK).
   */
  public double SCLK_SEC_PER_SI_SEC() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Creation epoch of the previous message from this originator.
   */
  public String PREVIOUS_MESSAGE_EPOCH() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer PREVIOUS_MESSAGE_EPOCHAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer PREVIOUS_MESSAGE_EPOCHInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Anticipated (or actual) epoch of the next message from this originator.
   */
  public String NEXT_MESSAGE_EPOCH() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer NEXT_MESSAGE_EPOCHAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer NEXT_MESSAGE_EPOCHInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * Time of the earliest data contained in the OCM.
   */
  public String START_TIME() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer START_TIMEAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer START_TIMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * Time of the latest data contained in the OCM.
   */
  public String STOP_TIME() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer STOP_TIMEAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer STOP_TIMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * Span of time that the OCM covers, measured in days.
   */
  public double TIME_SPAN() { int o = __offset(84); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Difference (TAI - UTC) in seconds at EPOCH_TZERO.
   */
  public double TAIMUTC_AT_TZERO() { int o = __offset(86); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Epoch of next leap second.
   */
  public String NEXT_LEAP_EPOCH() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer NEXT_LEAP_EPOCHAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer NEXT_LEAP_EPOCHInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * Difference (TAI - UTC) in seconds at NEXT_LEAP_EPOCH.
   */
  public double NEXT_LEAP_TAIMUTC() { int o = __offset(90); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Difference (UT1 - UTC) in seconds at EPOCH_TZERO.
   */
  public double UT1MUTC_AT_TZERO() { int o = __offset(92); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Source and version of Earth Orientation Parameters used.
   */
  public String EOP_SOURCE() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer EOP_SOURCEAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer EOP_SOURCEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * Method used to select or interpolate sequential EOP data.
   */
  public String INTERP_METHOD_EOP() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer INTERP_METHOD_EOPAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer INTERP_METHOD_EOPInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * Source and version of celestial body ephemeris data used.
   */
  public String CELESTIAL_SOURCE() { int o = __offset(98); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CELESTIAL_SOURCEAsByteBuffer() { return __vector_as_bytebuffer(98, 1); }
  public ByteBuffer CELESTIAL_SOURCEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 98, 1); }

  public static int createMetadata(FlatBufferBuilder builder,
      int COMMENTOffset,
      int OBJECT_NAMEOffset,
      int INTERNATIONAL_DESIGNATOROffset,
      int CATALOG_NAMEOffset,
      int OBJECT_DESIGNATOROffset,
      int ALTERNATE_NAMESOffset,
      int ORIGINATOR_POCOffset,
      int ORIGINATOR_POSITIONOffset,
      int ORIGINATOR_PHONEOffset,
      int ORIGINATOR_EMAILOffset,
      int ORIGINATOR_ADDRESSOffset,
      int TECH_ORGOffset,
      int TECH_POCOffset,
      int TECH_POSITIONOffset,
      int TECH_PHONEOffset,
      int TECH_EMAILOffset,
      int TECH_ADDRESSOffset,
      int PREVIOUS_MESSAGE_IDOffset,
      int NEXT_MESSAGE_IDOffset,
      int ADM_MSG_LINKOffset,
      int CDM_MSG_LINKOffset,
      int PRM_MSG_LINKOffset,
      int RDM_MSG_LINKOffset,
      int TDM_MSG_LINKOffset,
      int OPERATOROffset,
      int OWNEROffset,
      int COUNTRYOffset,
      int CONSTELLATIONOffset,
      int OBJECT_TYPEOffset,
      int TIME_SYSTEMOffset,
      int EPOCH_TZEROOffset,
      int OPS_STATUSOffset,
      int ORBIT_CATEGORYOffset,
      int OCM_DATA_ELEMENTSOffset,
      double SCLK_OFFSET_AT_EPOCH,
      double SCLK_SEC_PER_SI_SEC,
      int PREVIOUS_MESSAGE_EPOCHOffset,
      int NEXT_MESSAGE_EPOCHOffset,
      int START_TIMEOffset,
      int STOP_TIMEOffset,
      double TIME_SPAN,
      double TAIMUTC_AT_TZERO,
      int NEXT_LEAP_EPOCHOffset,
      double NEXT_LEAP_TAIMUTC,
      double UT1MUTC_AT_TZERO,
      int EOP_SOURCEOffset,
      int INTERP_METHOD_EOPOffset,
      int CELESTIAL_SOURCEOffset) {
    builder.startTable(48);
    Metadata.addUt1MutcAtTzero(builder, UT1MUTC_AT_TZERO);
    Metadata.addNextLeapTaimutc(builder, NEXT_LEAP_TAIMUTC);
    Metadata.addTaimutcAtTzero(builder, TAIMUTC_AT_TZERO);
    Metadata.addTimeSpan(builder, TIME_SPAN);
    Metadata.addSclkSecPerSiSec(builder, SCLK_SEC_PER_SI_SEC);
    Metadata.addSclkOffsetAtEpoch(builder, SCLK_OFFSET_AT_EPOCH);
    Metadata.addCelestialSource(builder, CELESTIAL_SOURCEOffset);
    Metadata.addInterpMethodEop(builder, INTERP_METHOD_EOPOffset);
    Metadata.addEopSource(builder, EOP_SOURCEOffset);
    Metadata.addNextLeapEpoch(builder, NEXT_LEAP_EPOCHOffset);
    Metadata.addStopTime(builder, STOP_TIMEOffset);
    Metadata.addStartTime(builder, START_TIMEOffset);
    Metadata.addNextMessageEpoch(builder, NEXT_MESSAGE_EPOCHOffset);
    Metadata.addPreviousMessageEpoch(builder, PREVIOUS_MESSAGE_EPOCHOffset);
    Metadata.addOcmDataElements(builder, OCM_DATA_ELEMENTSOffset);
    Metadata.addOrbitCategory(builder, ORBIT_CATEGORYOffset);
    Metadata.addOpsStatus(builder, OPS_STATUSOffset);
    Metadata.addEpochTzero(builder, EPOCH_TZEROOffset);
    Metadata.addTimeSystem(builder, TIME_SYSTEMOffset);
    Metadata.addObjectType(builder, OBJECT_TYPEOffset);
    Metadata.addConstellation(builder, CONSTELLATIONOffset);
    Metadata.addCountry(builder, COUNTRYOffset);
    Metadata.addOwner(builder, OWNEROffset);
    Metadata.addOperator(builder, OPERATOROffset);
    Metadata.addTdmMsgLink(builder, TDM_MSG_LINKOffset);
    Metadata.addRdmMsgLink(builder, RDM_MSG_LINKOffset);
    Metadata.addPrmMsgLink(builder, PRM_MSG_LINKOffset);
    Metadata.addCdmMsgLink(builder, CDM_MSG_LINKOffset);
    Metadata.addAdmMsgLink(builder, ADM_MSG_LINKOffset);
    Metadata.addNextMessageId(builder, NEXT_MESSAGE_IDOffset);
    Metadata.addPreviousMessageId(builder, PREVIOUS_MESSAGE_IDOffset);
    Metadata.addTechAddress(builder, TECH_ADDRESSOffset);
    Metadata.addTechEmail(builder, TECH_EMAILOffset);
    Metadata.addTechPhone(builder, TECH_PHONEOffset);
    Metadata.addTechPosition(builder, TECH_POSITIONOffset);
    Metadata.addTechPoc(builder, TECH_POCOffset);
    Metadata.addTechOrg(builder, TECH_ORGOffset);
    Metadata.addOriginatorAddress(builder, ORIGINATOR_ADDRESSOffset);
    Metadata.addOriginatorEmail(builder, ORIGINATOR_EMAILOffset);
    Metadata.addOriginatorPhone(builder, ORIGINATOR_PHONEOffset);
    Metadata.addOriginatorPosition(builder, ORIGINATOR_POSITIONOffset);
    Metadata.addOriginatorPoc(builder, ORIGINATOR_POCOffset);
    Metadata.addAlternateNames(builder, ALTERNATE_NAMESOffset);
    Metadata.addObjectDesignator(builder, OBJECT_DESIGNATOROffset);
    Metadata.addCatalogName(builder, CATALOG_NAMEOffset);
    Metadata.addInternationalDesignator(builder, INTERNATIONAL_DESIGNATOROffset);
    Metadata.addObjectName(builder, OBJECT_NAMEOffset);
    Metadata.addComment(builder, COMMENTOffset);
    return Metadata.endMetadata(builder);
  }

  public static void startMetadata(FlatBufferBuilder builder) { builder.startTable(48); }
  public static void addComment(FlatBufferBuilder builder, int COMMENTOffset) { builder.addOffset(0, COMMENTOffset, 0); }
  public static int createCommentVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCommentVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addObjectName(FlatBufferBuilder builder, int OBJECT_NAMEOffset) { builder.addOffset(1, OBJECT_NAMEOffset, 0); }
  public static void addInternationalDesignator(FlatBufferBuilder builder, int INTERNATIONAL_DESIGNATOROffset) { builder.addOffset(2, INTERNATIONAL_DESIGNATOROffset, 0); }
  public static void addCatalogName(FlatBufferBuilder builder, int CATALOG_NAMEOffset) { builder.addOffset(3, CATALOG_NAMEOffset, 0); }
  public static void addObjectDesignator(FlatBufferBuilder builder, int OBJECT_DESIGNATOROffset) { builder.addOffset(4, OBJECT_DESIGNATOROffset, 0); }
  public static void addAlternateNames(FlatBufferBuilder builder, int ALTERNATE_NAMESOffset) { builder.addOffset(5, ALTERNATE_NAMESOffset, 0); }
  public static int createAlternateNamesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAlternateNamesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOriginatorPoc(FlatBufferBuilder builder, int ORIGINATOR_POCOffset) { builder.addOffset(6, ORIGINATOR_POCOffset, 0); }
  public static void addOriginatorPosition(FlatBufferBuilder builder, int ORIGINATOR_POSITIONOffset) { builder.addOffset(7, ORIGINATOR_POSITIONOffset, 0); }
  public static void addOriginatorPhone(FlatBufferBuilder builder, int ORIGINATOR_PHONEOffset) { builder.addOffset(8, ORIGINATOR_PHONEOffset, 0); }
  public static void addOriginatorEmail(FlatBufferBuilder builder, int ORIGINATOR_EMAILOffset) { builder.addOffset(9, ORIGINATOR_EMAILOffset, 0); }
  public static void addOriginatorAddress(FlatBufferBuilder builder, int ORIGINATOR_ADDRESSOffset) { builder.addOffset(10, ORIGINATOR_ADDRESSOffset, 0); }
  public static void addTechOrg(FlatBufferBuilder builder, int TECH_ORGOffset) { builder.addOffset(11, TECH_ORGOffset, 0); }
  public static void addTechPoc(FlatBufferBuilder builder, int TECH_POCOffset) { builder.addOffset(12, TECH_POCOffset, 0); }
  public static void addTechPosition(FlatBufferBuilder builder, int TECH_POSITIONOffset) { builder.addOffset(13, TECH_POSITIONOffset, 0); }
  public static void addTechPhone(FlatBufferBuilder builder, int TECH_PHONEOffset) { builder.addOffset(14, TECH_PHONEOffset, 0); }
  public static void addTechEmail(FlatBufferBuilder builder, int TECH_EMAILOffset) { builder.addOffset(15, TECH_EMAILOffset, 0); }
  public static void addTechAddress(FlatBufferBuilder builder, int TECH_ADDRESSOffset) { builder.addOffset(16, TECH_ADDRESSOffset, 0); }
  public static void addPreviousMessageId(FlatBufferBuilder builder, int PREVIOUS_MESSAGE_IDOffset) { builder.addOffset(17, PREVIOUS_MESSAGE_IDOffset, 0); }
  public static void addNextMessageId(FlatBufferBuilder builder, int NEXT_MESSAGE_IDOffset) { builder.addOffset(18, NEXT_MESSAGE_IDOffset, 0); }
  public static void addAdmMsgLink(FlatBufferBuilder builder, int ADM_MSG_LINKOffset) { builder.addOffset(19, ADM_MSG_LINKOffset, 0); }
  public static void addCdmMsgLink(FlatBufferBuilder builder, int CDM_MSG_LINKOffset) { builder.addOffset(20, CDM_MSG_LINKOffset, 0); }
  public static void addPrmMsgLink(FlatBufferBuilder builder, int PRM_MSG_LINKOffset) { builder.addOffset(21, PRM_MSG_LINKOffset, 0); }
  public static void addRdmMsgLink(FlatBufferBuilder builder, int RDM_MSG_LINKOffset) { builder.addOffset(22, RDM_MSG_LINKOffset, 0); }
  public static void addTdmMsgLink(FlatBufferBuilder builder, int TDM_MSG_LINKOffset) { builder.addOffset(23, TDM_MSG_LINKOffset, 0); }
  public static int createTdmMsgLinkVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTdmMsgLinkVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOperator(FlatBufferBuilder builder, int OPERATOROffset) { builder.addOffset(24, OPERATOROffset, 0); }
  public static void addOwner(FlatBufferBuilder builder, int OWNEROffset) { builder.addOffset(25, OWNEROffset, 0); }
  public static void addCountry(FlatBufferBuilder builder, int COUNTRYOffset) { builder.addOffset(26, COUNTRYOffset, 0); }
  public static void addConstellation(FlatBufferBuilder builder, int CONSTELLATIONOffset) { builder.addOffset(27, CONSTELLATIONOffset, 0); }
  public static void addObjectType(FlatBufferBuilder builder, int OBJECT_TYPEOffset) { builder.addOffset(28, OBJECT_TYPEOffset, 0); }
  public static void addTimeSystem(FlatBufferBuilder builder, int TIME_SYSTEMOffset) { builder.addOffset(29, TIME_SYSTEMOffset, 0); }
  public static void addEpochTzero(FlatBufferBuilder builder, int EPOCH_TZEROOffset) { builder.addOffset(30, EPOCH_TZEROOffset, 0); }
  public static void addOpsStatus(FlatBufferBuilder builder, int OPS_STATUSOffset) { builder.addOffset(31, OPS_STATUSOffset, 0); }
  public static void addOrbitCategory(FlatBufferBuilder builder, int ORBIT_CATEGORYOffset) { builder.addOffset(32, ORBIT_CATEGORYOffset, 0); }
  public static void addOcmDataElements(FlatBufferBuilder builder, int OCM_DATA_ELEMENTSOffset) { builder.addOffset(33, OCM_DATA_ELEMENTSOffset, 0); }
  public static int createOcmDataElementsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOcmDataElementsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSclkOffsetAtEpoch(FlatBufferBuilder builder, double SCLK_OFFSET_AT_EPOCH) { builder.addDouble(34, SCLK_OFFSET_AT_EPOCH, 0.0); }
  public static void addSclkSecPerSiSec(FlatBufferBuilder builder, double SCLK_SEC_PER_SI_SEC) { builder.addDouble(35, SCLK_SEC_PER_SI_SEC, 0.0); }
  public static void addPreviousMessageEpoch(FlatBufferBuilder builder, int PREVIOUS_MESSAGE_EPOCHOffset) { builder.addOffset(36, PREVIOUS_MESSAGE_EPOCHOffset, 0); }
  public static void addNextMessageEpoch(FlatBufferBuilder builder, int NEXT_MESSAGE_EPOCHOffset) { builder.addOffset(37, NEXT_MESSAGE_EPOCHOffset, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int START_TIMEOffset) { builder.addOffset(38, START_TIMEOffset, 0); }
  public static void addStopTime(FlatBufferBuilder builder, int STOP_TIMEOffset) { builder.addOffset(39, STOP_TIMEOffset, 0); }
  public static void addTimeSpan(FlatBufferBuilder builder, double TIME_SPAN) { builder.addDouble(40, TIME_SPAN, 0.0); }
  public static void addTaimutcAtTzero(FlatBufferBuilder builder, double TAIMUTC_AT_TZERO) { builder.addDouble(41, TAIMUTC_AT_TZERO, 0.0); }
  public static void addNextLeapEpoch(FlatBufferBuilder builder, int NEXT_LEAP_EPOCHOffset) { builder.addOffset(42, NEXT_LEAP_EPOCHOffset, 0); }
  public static void addNextLeapTaimutc(FlatBufferBuilder builder, double NEXT_LEAP_TAIMUTC) { builder.addDouble(43, NEXT_LEAP_TAIMUTC, 0.0); }
  public static void addUt1MutcAtTzero(FlatBufferBuilder builder, double UT1MUTC_AT_TZERO) { builder.addDouble(44, UT1MUTC_AT_TZERO, 0.0); }
  public static void addEopSource(FlatBufferBuilder builder, int EOP_SOURCEOffset) { builder.addOffset(45, EOP_SOURCEOffset, 0); }
  public static void addInterpMethodEop(FlatBufferBuilder builder, int INTERP_METHOD_EOPOffset) { builder.addOffset(46, INTERP_METHOD_EOPOffset, 0); }
  public static void addCelestialSource(FlatBufferBuilder builder, int CELESTIAL_SOURCEOffset) { builder.addOffset(47, CELESTIAL_SOURCEOffset, 0); }
  public static int endMetadata(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Metadata get(int j) { return get(new Metadata(), j); }
    public Metadata get(Metadata obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

