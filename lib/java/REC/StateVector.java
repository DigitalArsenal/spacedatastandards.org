// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class StateVector extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static StateVector getRootAsStateVector(ByteBuffer _bb) { return getRootAsStateVector(_bb, new StateVector()); }
  public static StateVector getRootAsStateVector(ByteBuffer _bb, StateVector obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public StateVector __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Epoch of the state vector.
   */
  public String EPOCH() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer EPOCHAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer EPOCHInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * X component of position in the specified reference frame.
   */
  public double X() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Y component of position.
   */
  public double Y() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Z component of position.
   */
  public double Z() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * X component of velocity.
   */
  public double X_DOT() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Y component of velocity.
   */
  public double Y_DOT() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Z component of velocity.
   */
  public double Z_DOT() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * X component of acceleration.
   */
  public double X_DDOT() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Y component of acceleration.
   */
  public double Y_DDOT() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Z component of acceleration.
   */
  public double Z_DDOT() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createStateVector(FlatBufferBuilder builder,
      int EPOCHOffset,
      double X,
      double Y,
      double Z,
      double X_DOT,
      double Y_DOT,
      double Z_DOT,
      double X_DDOT,
      double Y_DDOT,
      double Z_DDOT) {
    builder.startTable(10);
    StateVector.addZDdot(builder, Z_DDOT);
    StateVector.addYDdot(builder, Y_DDOT);
    StateVector.addXDdot(builder, X_DDOT);
    StateVector.addZDot(builder, Z_DOT);
    StateVector.addYDot(builder, Y_DOT);
    StateVector.addXDot(builder, X_DOT);
    StateVector.addZ(builder, Z);
    StateVector.addY(builder, Y);
    StateVector.addX(builder, X);
    StateVector.addEpoch(builder, EPOCHOffset);
    return StateVector.endStateVector(builder);
  }

  public static void startStateVector(FlatBufferBuilder builder) { builder.startTable(10); }
  public static void addEpoch(FlatBufferBuilder builder, int EPOCHOffset) { builder.addOffset(0, EPOCHOffset, 0); }
  public static void addX(FlatBufferBuilder builder, double X) { builder.addDouble(1, X, 0.0); }
  public static void addY(FlatBufferBuilder builder, double Y) { builder.addDouble(2, Y, 0.0); }
  public static void addZ(FlatBufferBuilder builder, double Z) { builder.addDouble(3, Z, 0.0); }
  public static void addXDot(FlatBufferBuilder builder, double X_DOT) { builder.addDouble(4, X_DOT, 0.0); }
  public static void addYDot(FlatBufferBuilder builder, double Y_DOT) { builder.addDouble(5, Y_DOT, 0.0); }
  public static void addZDot(FlatBufferBuilder builder, double Z_DOT) { builder.addDouble(6, Z_DOT, 0.0); }
  public static void addXDdot(FlatBufferBuilder builder, double X_DDOT) { builder.addDouble(7, X_DDOT, 0.0); }
  public static void addYDdot(FlatBufferBuilder builder, double Y_DDOT) { builder.addDouble(8, Y_DDOT, 0.0); }
  public static void addZDdot(FlatBufferBuilder builder, double Z_DDOT) { builder.addDouble(9, Z_DDOT, 0.0); }
  public static int endStateVector(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public StateVector get(int j) { return get(new StateVector(), j); }
    public StateVector get(StateVector obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

