// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * UVW Sigmas (Covariance matrix in UVW frame)
 */
@SuppressWarnings("unused")
public final class uvwSigmas extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static uvwSigmas getRootAsuvwSigmas(ByteBuffer _bb) { return getRootAsuvwSigmas(_bb, new uvwSigmas()); }
  public static uvwSigmas getRootAsuvwSigmas(ByteBuffer _bb, uvwSigmas obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public uvwSigmas __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double U_SIGMA() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double V_SIGMA() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double W_SIGMA() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double UD_SIGMA() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double VD_SIGMA() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double WD_SIGMA() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createuvwSigmas(FlatBufferBuilder builder,
      double U_SIGMA,
      double V_SIGMA,
      double W_SIGMA,
      double UD_SIGMA,
      double VD_SIGMA,
      double WD_SIGMA) {
    builder.startTable(6);
    uvwSigmas.addWdSigma(builder, WD_SIGMA);
    uvwSigmas.addVdSigma(builder, VD_SIGMA);
    uvwSigmas.addUdSigma(builder, UD_SIGMA);
    uvwSigmas.addWSigma(builder, W_SIGMA);
    uvwSigmas.addVSigma(builder, V_SIGMA);
    uvwSigmas.addUSigma(builder, U_SIGMA);
    return uvwSigmas.enduvwSigmas(builder);
  }

  public static void startuvwSigmas(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addUSigma(FlatBufferBuilder builder, double U_SIGMA) { builder.addDouble(0, U_SIGMA, 0.0); }
  public static void addVSigma(FlatBufferBuilder builder, double V_SIGMA) { builder.addDouble(1, V_SIGMA, 0.0); }
  public static void addWSigma(FlatBufferBuilder builder, double W_SIGMA) { builder.addDouble(2, W_SIGMA, 0.0); }
  public static void addUdSigma(FlatBufferBuilder builder, double UD_SIGMA) { builder.addDouble(3, UD_SIGMA, 0.0); }
  public static void addVdSigma(FlatBufferBuilder builder, double VD_SIGMA) { builder.addDouble(4, VD_SIGMA, 0.0); }
  public static void addWdSigma(FlatBufferBuilder builder, double WD_SIGMA) { builder.addDouble(5, WD_SIGMA, 0.0); }
  public static int enduvwSigmas(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public uvwSigmas get(int j) { return get(new uvwSigmas(), j); }
    public uvwSigmas get(uvwSigmas obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

