// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Vector Covariance Message
 */
@SuppressWarnings("unused")
public final class VCM extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static VCM getRootAsVCM(ByteBuffer _bb) { return getRootAsVCM(_bb, new VCM()); }
  public static VCM getRootAsVCM(ByteBuffer _bb, VCM obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public VCM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double CCSDS_OMM_VERS() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public String CREATION_DATE() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CREATION_DATEAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer CREATION_DATEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String ORIGINATOR() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ORIGINATORAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer ORIGINATORInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String OBJECT_NAME() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OBJECT_NAMEAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer OBJECT_NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public String OBJECT_ID() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer OBJECT_IDAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer OBJECT_IDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public String CENTER_NAME() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CENTER_NAMEAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer CENTER_NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public String REF_FRAME() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer REF_FRAMEAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer REF_FRAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  public String TIME_SYSTEM() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TIME_SYSTEMAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer TIME_SYSTEMInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  public VCMStateVector STATE_VECTOR() { return STATE_VECTOR(new VCMStateVector()); }
  public VCMStateVector STATE_VECTOR(VCMStateVector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public keplerianElements KEPLERIAN_ELEMENTS() { return KEPLERIAN_ELEMENTS(new keplerianElements()); }
  public keplerianElements KEPLERIAN_ELEMENTS(keplerianElements obj) { int o = __offset(22); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public equinoctialElements EQUINOCTIAL_ELEMENTS() { return EQUINOCTIAL_ELEMENTS(new equinoctialElements()); }
  public equinoctialElements EQUINOCTIAL_ELEMENTS(equinoctialElements obj) { int o = __offset(24); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public double GM() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public VCMAtmosphericModelData ATMOSPHERIC_MODEL_DATA() { return ATMOSPHERIC_MODEL_DATA(new VCMAtmosphericModelData()); }
  public VCMAtmosphericModelData ATMOSPHERIC_MODEL_DATA(VCMAtmosphericModelData obj) { int o = __offset(28); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public propagatorConfig PROPAGATOR_SETTINGS() { return PROPAGATOR_SETTINGS(new propagatorConfig()); }
  public propagatorConfig PROPAGATOR_SETTINGS(propagatorConfig obj) { int o = __offset(30); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public VCMCovarianceMatrixLine COVARIANCE_MATRIX(int j) { return COVARIANCE_MATRIX(new VCMCovarianceMatrixLine(), j); }
  public VCMCovarianceMatrixLine COVARIANCE_MATRIX(VCMCovarianceMatrixLine obj, int j) { int o = __offset(32); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int COVARIANCE_MATRIXLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public VCMCovarianceMatrixLine.Vector covarianceMatrixVector() { return covarianceMatrixVector(new VCMCovarianceMatrixLine.Vector()); }
  public VCMCovarianceMatrixLine.Vector covarianceMatrixVector(VCMCovarianceMatrixLine.Vector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public uvwSigmas UVW_SIGMAS() { return UVW_SIGMAS(new uvwSigmas()); }
  public uvwSigmas UVW_SIGMAS(uvwSigmas obj) { int o = __offset(34); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public double MASS() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double SOLAR_RAD_AREA() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double SOLAR_RAD_COEFF() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double DRAG_AREA() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double DRAG_COEFF() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public byte SRP() { int o = __offset(46); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public String CLASSIFICATION_TYPE() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CLASSIFICATION_TYPEAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer CLASSIFICATION_TYPEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  public long NORAD_CAT_ID() { int o = __offset(50); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long ELEMENT_SET_NO() { int o = __offset(52); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public double REV_AT_EPOCH() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double BSTAR() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double MEAN_MOTION_DOT() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double MEAN_MOTION_DDOT() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public String COV_REFERENCE_FRAME() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer COV_REFERENCE_FRAMEAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer COV_REFERENCE_FRAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  public double CX_X() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double CY_X() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double CZ_X() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double CX_DOT_X() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public long USER_DEFINED_BIP_0044_TYPE() { int o = __offset(72); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public String USER_DEFINED_OBJECT_DESIGNATOR() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer USER_DEFINED_OBJECT_DESIGNATORAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer USER_DEFINED_OBJECT_DESIGNATORInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  public String USER_DEFINED_EARTH_MODEL() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer USER_DEFINED_EARTH_MODELAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer USER_DEFINED_EARTH_MODELInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  public double USER_DEFINED_EPOCH_TIMESTAMP() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double USER_DEFINED_MICROSECONDS() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createVCM(FlatBufferBuilder builder,
      double CCSDS_OMM_VERS,
      int CREATION_DATEOffset,
      int ORIGINATOROffset,
      int OBJECT_NAMEOffset,
      int OBJECT_IDOffset,
      int CENTER_NAMEOffset,
      int REF_FRAMEOffset,
      int TIME_SYSTEMOffset,
      int STATE_VECTOROffset,
      int KEPLERIAN_ELEMENTSOffset,
      int EQUINOCTIAL_ELEMENTSOffset,
      double GM,
      int ATMOSPHERIC_MODEL_DATAOffset,
      int PROPAGATOR_SETTINGSOffset,
      int COVARIANCE_MATRIXOffset,
      int UVW_SIGMASOffset,
      double MASS,
      double SOLAR_RAD_AREA,
      double SOLAR_RAD_COEFF,
      double DRAG_AREA,
      double DRAG_COEFF,
      byte SRP,
      int CLASSIFICATION_TYPEOffset,
      long NORAD_CAT_ID,
      long ELEMENT_SET_NO,
      double REV_AT_EPOCH,
      double BSTAR,
      double MEAN_MOTION_DOT,
      double MEAN_MOTION_DDOT,
      int COV_REFERENCE_FRAMEOffset,
      double CX_X,
      double CY_X,
      double CZ_X,
      double CX_DOT_X,
      long USER_DEFINED_BIP_0044_TYPE,
      int USER_DEFINED_OBJECT_DESIGNATOROffset,
      int USER_DEFINED_EARTH_MODELOffset,
      double USER_DEFINED_EPOCH_TIMESTAMP,
      double USER_DEFINED_MICROSECONDS) {
    builder.startTable(39);
    VCM.addUserDefinedMicroseconds(builder, USER_DEFINED_MICROSECONDS);
    VCM.addUserDefinedEpochTimestamp(builder, USER_DEFINED_EPOCH_TIMESTAMP);
    VCM.addCxDotX(builder, CX_DOT_X);
    VCM.addCzX(builder, CZ_X);
    VCM.addCyX(builder, CY_X);
    VCM.addCxX(builder, CX_X);
    VCM.addMeanMotionDdot(builder, MEAN_MOTION_DDOT);
    VCM.addMeanMotionDot(builder, MEAN_MOTION_DOT);
    VCM.addBstar(builder, BSTAR);
    VCM.addRevAtEpoch(builder, REV_AT_EPOCH);
    VCM.addDragCoeff(builder, DRAG_COEFF);
    VCM.addDragArea(builder, DRAG_AREA);
    VCM.addSolarRadCoeff(builder, SOLAR_RAD_COEFF);
    VCM.addSolarRadArea(builder, SOLAR_RAD_AREA);
    VCM.addMass(builder, MASS);
    VCM.addGm(builder, GM);
    VCM.addCcsdsOmmVers(builder, CCSDS_OMM_VERS);
    VCM.addUserDefinedEarthModel(builder, USER_DEFINED_EARTH_MODELOffset);
    VCM.addUserDefinedObjectDesignator(builder, USER_DEFINED_OBJECT_DESIGNATOROffset);
    VCM.addUserDefinedBip0044Type(builder, USER_DEFINED_BIP_0044_TYPE);
    VCM.addCovReferenceFrame(builder, COV_REFERENCE_FRAMEOffset);
    VCM.addElementSetNo(builder, ELEMENT_SET_NO);
    VCM.addNoradCatId(builder, NORAD_CAT_ID);
    VCM.addClassificationType(builder, CLASSIFICATION_TYPEOffset);
    VCM.addUvwSigmas(builder, UVW_SIGMASOffset);
    VCM.addCovarianceMatrix(builder, COVARIANCE_MATRIXOffset);
    VCM.addPropagatorSettings(builder, PROPAGATOR_SETTINGSOffset);
    VCM.addAtmosphericModelData(builder, ATMOSPHERIC_MODEL_DATAOffset);
    VCM.addEquinoctialElements(builder, EQUINOCTIAL_ELEMENTSOffset);
    VCM.addKeplerianElements(builder, KEPLERIAN_ELEMENTSOffset);
    VCM.addStateVector(builder, STATE_VECTOROffset);
    VCM.addTimeSystem(builder, TIME_SYSTEMOffset);
    VCM.addRefFrame(builder, REF_FRAMEOffset);
    VCM.addCenterName(builder, CENTER_NAMEOffset);
    VCM.addObjectId(builder, OBJECT_IDOffset);
    VCM.addObjectName(builder, OBJECT_NAMEOffset);
    VCM.addOriginator(builder, ORIGINATOROffset);
    VCM.addCreationDate(builder, CREATION_DATEOffset);
    VCM.addSrp(builder, SRP);
    return VCM.endVCM(builder);
  }

  public static void startVCM(FlatBufferBuilder builder) { builder.startTable(39); }
  public static void addCcsdsOmmVers(FlatBufferBuilder builder, double CCSDS_OMM_VERS) { builder.addDouble(0, CCSDS_OMM_VERS, 0.0); }
  public static void addCreationDate(FlatBufferBuilder builder, int CREATION_DATEOffset) { builder.addOffset(1, CREATION_DATEOffset, 0); }
  public static void addOriginator(FlatBufferBuilder builder, int ORIGINATOROffset) { builder.addOffset(2, ORIGINATOROffset, 0); }
  public static void addObjectName(FlatBufferBuilder builder, int OBJECT_NAMEOffset) { builder.addOffset(3, OBJECT_NAMEOffset, 0); }
  public static void addObjectId(FlatBufferBuilder builder, int OBJECT_IDOffset) { builder.addOffset(4, OBJECT_IDOffset, 0); }
  public static void addCenterName(FlatBufferBuilder builder, int CENTER_NAMEOffset) { builder.addOffset(5, CENTER_NAMEOffset, 0); }
  public static void addRefFrame(FlatBufferBuilder builder, int REF_FRAMEOffset) { builder.addOffset(6, REF_FRAMEOffset, 0); }
  public static void addTimeSystem(FlatBufferBuilder builder, int TIME_SYSTEMOffset) { builder.addOffset(7, TIME_SYSTEMOffset, 0); }
  public static void addStateVector(FlatBufferBuilder builder, int STATE_VECTOROffset) { builder.addOffset(8, STATE_VECTOROffset, 0); }
  public static void addKeplerianElements(FlatBufferBuilder builder, int KEPLERIAN_ELEMENTSOffset) { builder.addOffset(9, KEPLERIAN_ELEMENTSOffset, 0); }
  public static void addEquinoctialElements(FlatBufferBuilder builder, int EQUINOCTIAL_ELEMENTSOffset) { builder.addOffset(10, EQUINOCTIAL_ELEMENTSOffset, 0); }
  public static void addGm(FlatBufferBuilder builder, double GM) { builder.addDouble(11, GM, 0.0); }
  public static void addAtmosphericModelData(FlatBufferBuilder builder, int ATMOSPHERIC_MODEL_DATAOffset) { builder.addOffset(12, ATMOSPHERIC_MODEL_DATAOffset, 0); }
  public static void addPropagatorSettings(FlatBufferBuilder builder, int PROPAGATOR_SETTINGSOffset) { builder.addOffset(13, PROPAGATOR_SETTINGSOffset, 0); }
  public static void addCovarianceMatrix(FlatBufferBuilder builder, int COVARIANCE_MATRIXOffset) { builder.addOffset(14, COVARIANCE_MATRIXOffset, 0); }
  public static int createCovarianceMatrixVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCovarianceMatrixVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUvwSigmas(FlatBufferBuilder builder, int UVW_SIGMASOffset) { builder.addOffset(15, UVW_SIGMASOffset, 0); }
  public static void addMass(FlatBufferBuilder builder, double MASS) { builder.addDouble(16, MASS, 0.0); }
  public static void addSolarRadArea(FlatBufferBuilder builder, double SOLAR_RAD_AREA) { builder.addDouble(17, SOLAR_RAD_AREA, 0.0); }
  public static void addSolarRadCoeff(FlatBufferBuilder builder, double SOLAR_RAD_COEFF) { builder.addDouble(18, SOLAR_RAD_COEFF, 0.0); }
  public static void addDragArea(FlatBufferBuilder builder, double DRAG_AREA) { builder.addDouble(19, DRAG_AREA, 0.0); }
  public static void addDragCoeff(FlatBufferBuilder builder, double DRAG_COEFF) { builder.addDouble(20, DRAG_COEFF, 0.0); }
  public static void addSrp(FlatBufferBuilder builder, byte SRP) { builder.addByte(21, SRP, 0); }
  public static void addClassificationType(FlatBufferBuilder builder, int CLASSIFICATION_TYPEOffset) { builder.addOffset(22, CLASSIFICATION_TYPEOffset, 0); }
  public static void addNoradCatId(FlatBufferBuilder builder, long NORAD_CAT_ID) { builder.addInt(23, (int) NORAD_CAT_ID, (int) 0L); }
  public static void addElementSetNo(FlatBufferBuilder builder, long ELEMENT_SET_NO) { builder.addInt(24, (int) ELEMENT_SET_NO, (int) 0L); }
  public static void addRevAtEpoch(FlatBufferBuilder builder, double REV_AT_EPOCH) { builder.addDouble(25, REV_AT_EPOCH, 0.0); }
  public static void addBstar(FlatBufferBuilder builder, double BSTAR) { builder.addDouble(26, BSTAR, 0.0); }
  public static void addMeanMotionDot(FlatBufferBuilder builder, double MEAN_MOTION_DOT) { builder.addDouble(27, MEAN_MOTION_DOT, 0.0); }
  public static void addMeanMotionDdot(FlatBufferBuilder builder, double MEAN_MOTION_DDOT) { builder.addDouble(28, MEAN_MOTION_DDOT, 0.0); }
  public static void addCovReferenceFrame(FlatBufferBuilder builder, int COV_REFERENCE_FRAMEOffset) { builder.addOffset(29, COV_REFERENCE_FRAMEOffset, 0); }
  public static void addCxX(FlatBufferBuilder builder, double CX_X) { builder.addDouble(30, CX_X, 0.0); }
  public static void addCyX(FlatBufferBuilder builder, double CY_X) { builder.addDouble(31, CY_X, 0.0); }
  public static void addCzX(FlatBufferBuilder builder, double CZ_X) { builder.addDouble(32, CZ_X, 0.0); }
  public static void addCxDotX(FlatBufferBuilder builder, double CX_DOT_X) { builder.addDouble(33, CX_DOT_X, 0.0); }
  public static void addUserDefinedBip0044Type(FlatBufferBuilder builder, long USER_DEFINED_BIP_0044_TYPE) { builder.addInt(34, (int) USER_DEFINED_BIP_0044_TYPE, (int) 0L); }
  public static void addUserDefinedObjectDesignator(FlatBufferBuilder builder, int USER_DEFINED_OBJECT_DESIGNATOROffset) { builder.addOffset(35, USER_DEFINED_OBJECT_DESIGNATOROffset, 0); }
  public static void addUserDefinedEarthModel(FlatBufferBuilder builder, int USER_DEFINED_EARTH_MODELOffset) { builder.addOffset(36, USER_DEFINED_EARTH_MODELOffset, 0); }
  public static void addUserDefinedEpochTimestamp(FlatBufferBuilder builder, double USER_DEFINED_EPOCH_TIMESTAMP) { builder.addDouble(37, USER_DEFINED_EPOCH_TIMESTAMP, 0.0); }
  public static void addUserDefinedMicroseconds(FlatBufferBuilder builder, double USER_DEFINED_MICROSECONDS) { builder.addDouble(38, USER_DEFINED_MICROSECONDS, 0.0); }
  public static int endVCM(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishVCMBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedVCMBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public VCM get(int j) { return get(new VCM(), j); }
    public VCM get(VCM obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

