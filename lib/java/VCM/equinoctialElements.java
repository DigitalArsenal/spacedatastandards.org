// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Equinoctial Elements
 */
@SuppressWarnings("unused")
public final class equinoctialElements extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static equinoctialElements getRootAsequinoctialElements(ByteBuffer _bb) { return getRootAsequinoctialElements(_bb, new equinoctialElements()); }
  public static equinoctialElements getRootAsequinoctialElements(ByteBuffer _bb, equinoctialElements obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public equinoctialElements __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double AF() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double AG() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double L() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double N() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double CHI() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double PSI() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createequinoctialElements(FlatBufferBuilder builder,
      double AF,
      double AG,
      double L,
      double N,
      double CHI,
      double PSI) {
    builder.startTable(6);
    equinoctialElements.addPsi(builder, PSI);
    equinoctialElements.addChi(builder, CHI);
    equinoctialElements.addN(builder, N);
    equinoctialElements.addL(builder, L);
    equinoctialElements.addAg(builder, AG);
    equinoctialElements.addAf(builder, AF);
    return equinoctialElements.endequinoctialElements(builder);
  }

  public static void startequinoctialElements(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addAf(FlatBufferBuilder builder, double AF) { builder.addDouble(0, AF, 0.0); }
  public static void addAg(FlatBufferBuilder builder, double AG) { builder.addDouble(1, AG, 0.0); }
  public static void addL(FlatBufferBuilder builder, double L) { builder.addDouble(2, L, 0.0); }
  public static void addN(FlatBufferBuilder builder, double N) { builder.addDouble(3, N, 0.0); }
  public static void addChi(FlatBufferBuilder builder, double CHI) { builder.addDouble(4, CHI, 0.0); }
  public static void addPsi(FlatBufferBuilder builder, double PSI) { builder.addDouble(5, PSI, 0.0); }
  public static int endequinoctialElements(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public equinoctialElements get(int j) { return get(new equinoctialElements(), j); }
    public equinoctialElements get(equinoctialElements obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

