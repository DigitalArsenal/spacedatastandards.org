// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Entity Profile Message
 */
@SuppressWarnings("unused")
public final class EPM extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static EPM getRootAsEPM(ByteBuffer _bb) { return getRootAsEPM(_bb, new EPM()); }
  public static EPM getRootAsEPM(ByteBuffer _bb, EPM obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EPM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Distinguished Name of the entity
   */
  public DistinguishedName DN() { return DN(new DistinguishedName()); }
  public DistinguishedName DN(DistinguishedName obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * Common name of the entity (person or organization)
   */
  public String NAME() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer NAMEAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer NAMEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Alternate names for the entity
   */
  public String ALTERNATE_NAMES(int j) { int o = __offset(8); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int ALTERNATE_NAMESLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public StringVector alternateNamesVector() { return alternateNamesVector(new StringVector()); }
  public StringVector alternateNamesVector(StringVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Email address of the entity
   */
  public String EMAIL() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer EMAILAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer EMAILInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Telephone number of the entity
   */
  public String TELEPHONE() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TELEPHONEAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer TELEPHONEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Cryptographic keys associated with the entity
   */
  public CryptoKey KEYS(int j) { return KEYS(new CryptoKey(), j); }
  public CryptoKey KEYS(CryptoKey obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int KEYSLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public CryptoKey.Vector keysVector() { return keysVector(new CryptoKey.Vector()); }
  public CryptoKey.Vector keysVector(CryptoKey.Vector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Multiformat addresses associated with the entity
   */
  public String MULTIFORMAT_ADDRESS(int j) { int o = __offset(16); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int MULTIFORMAT_ADDRESSLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public StringVector multiformatAddressVector() { return multiformatAddressVector(new StringVector()); }
  public StringVector multiformatAddressVector(StringVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public byte attributesType() { int o = __offset(18); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Specific attributes for the entity, either Person or Organization
   */
  public Table ATTRIBUTES(Table obj) { int o = __offset(20); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createEPM(FlatBufferBuilder builder,
      int DNOffset,
      int NAMEOffset,
      int ALTERNATE_NAMESOffset,
      int EMAILOffset,
      int TELEPHONEOffset,
      int KEYSOffset,
      int MULTIFORMAT_ADDRESSOffset,
      byte attributesType,
      int ATTRIBUTESOffset) {
    builder.startTable(9);
    EPM.addAttributes(builder, ATTRIBUTESOffset);
    EPM.addMultiformatAddress(builder, MULTIFORMAT_ADDRESSOffset);
    EPM.addKeys(builder, KEYSOffset);
    EPM.addTelephone(builder, TELEPHONEOffset);
    EPM.addEmail(builder, EMAILOffset);
    EPM.addAlternateNames(builder, ALTERNATE_NAMESOffset);
    EPM.addName(builder, NAMEOffset);
    EPM.addDn(builder, DNOffset);
    EPM.addAttributesType(builder, attributesType);
    return EPM.endEPM(builder);
  }

  public static void startEPM(FlatBufferBuilder builder) { builder.startTable(9); }
  public static void addDn(FlatBufferBuilder builder, int DNOffset) { builder.addOffset(0, DNOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int NAMEOffset) { builder.addOffset(1, NAMEOffset, 0); }
  public static void addAlternateNames(FlatBufferBuilder builder, int ALTERNATE_NAMESOffset) { builder.addOffset(2, ALTERNATE_NAMESOffset, 0); }
  public static int createAlternateNamesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAlternateNamesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addEmail(FlatBufferBuilder builder, int EMAILOffset) { builder.addOffset(3, EMAILOffset, 0); }
  public static void addTelephone(FlatBufferBuilder builder, int TELEPHONEOffset) { builder.addOffset(4, TELEPHONEOffset, 0); }
  public static void addKeys(FlatBufferBuilder builder, int KEYSOffset) { builder.addOffset(5, KEYSOffset, 0); }
  public static int createKeysVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startKeysVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMultiformatAddress(FlatBufferBuilder builder, int MULTIFORMAT_ADDRESSOffset) { builder.addOffset(6, MULTIFORMAT_ADDRESSOffset, 0); }
  public static int createMultiformatAddressVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMultiformatAddressVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAttributesType(FlatBufferBuilder builder, byte attributesType) { builder.addByte(7, attributesType, 0); }
  public static void addAttributes(FlatBufferBuilder builder, int ATTRIBUTESOffset) { builder.addOffset(8, ATTRIBUTESOffset, 0); }
  public static int endEPM(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EPM get(int j) { return get(new EPM(), j); }
    public EPM get(EPM obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

