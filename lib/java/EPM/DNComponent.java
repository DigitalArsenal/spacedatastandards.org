// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Represents a component of a Distinguished Name (DN) in LDAP
 */
@SuppressWarnings("unused")
public final class DNComponent extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static DNComponent getRootAsDNComponent(ByteBuffer _bb) { return getRootAsDNComponent(_bb, new DNComponent()); }
  public static DNComponent getRootAsDNComponent(ByteBuffer _bb, DNComponent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DNComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The type of the DN component
   */
  public byte TYPE() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The value of the DN component
   */
  public String VALUE() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer VALUEAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer VALUEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createDNComponent(FlatBufferBuilder builder,
      byte TYPE,
      int VALUEOffset) {
    builder.startTable(2);
    DNComponent.addValue(builder, VALUEOffset);
    DNComponent.addType(builder, TYPE);
    return DNComponent.endDNComponent(builder);
  }

  public static void startDNComponent(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addType(FlatBufferBuilder builder, byte TYPE) { builder.addByte(0, TYPE, 0); }
  public static void addValue(FlatBufferBuilder builder, int VALUEOffset) { builder.addOffset(1, VALUEOffset, 0); }
  public static int endDNComponent(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DNComponent get(int j) { return get(new DNComponent(), j); }
    public DNComponent get(DNComponent obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

