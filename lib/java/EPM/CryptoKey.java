// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Crypto Key Information
 */
@SuppressWarnings("unused")
public final class CryptoKey extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static CryptoKey getRootAsCryptoKey(ByteBuffer _bb) { return getRootAsCryptoKey(_bb, new CryptoKey()); }
  public static CryptoKey getRootAsCryptoKey(ByteBuffer _bb, CryptoKey obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CryptoKey __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Public part of the cryptographic key
   */
  public String PUBLIC_KEY() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer PUBLIC_KEYAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer PUBLIC_KEYInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Extended public key
   */
  public String XPUB() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer XPUBAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer XPUBInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Private part of the cryptographic key, should be kept secret
   */
  public String PRIVATE_KEY() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer PRIVATE_KEYAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer PRIVATE_KEYInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Extended private key
   */
  public String XPRIV() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer XPRIVAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer XPRIVInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Address generated from the cryptographic key
   */
  public String KEY_ADDRESS() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer KEY_ADDRESSAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer KEY_ADDRESSInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Numerical type of the address generated from the cryptographic key
   */
  public int ADDRESS_TYPE() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createCryptoKey(FlatBufferBuilder builder,
      int PUBLIC_KEYOffset,
      int XPUBOffset,
      int PRIVATE_KEYOffset,
      int XPRIVOffset,
      int KEY_ADDRESSOffset,
      int ADDRESS_TYPE) {
    builder.startTable(6);
    CryptoKey.addAddressType(builder, ADDRESS_TYPE);
    CryptoKey.addKeyAddress(builder, KEY_ADDRESSOffset);
    CryptoKey.addXpriv(builder, XPRIVOffset);
    CryptoKey.addPrivateKey(builder, PRIVATE_KEYOffset);
    CryptoKey.addXpub(builder, XPUBOffset);
    CryptoKey.addPublicKey(builder, PUBLIC_KEYOffset);
    return CryptoKey.endCryptoKey(builder);
  }

  public static void startCryptoKey(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addPublicKey(FlatBufferBuilder builder, int PUBLIC_KEYOffset) { builder.addOffset(0, PUBLIC_KEYOffset, 0); }
  public static void addXpub(FlatBufferBuilder builder, int XPUBOffset) { builder.addOffset(1, XPUBOffset, 0); }
  public static void addPrivateKey(FlatBufferBuilder builder, int PRIVATE_KEYOffset) { builder.addOffset(2, PRIVATE_KEYOffset, 0); }
  public static void addXpriv(FlatBufferBuilder builder, int XPRIVOffset) { builder.addOffset(3, XPRIVOffset, 0); }
  public static void addKeyAddress(FlatBufferBuilder builder, int KEY_ADDRESSOffset) { builder.addOffset(4, KEY_ADDRESSOffset, 0); }
  public static void addAddressType(FlatBufferBuilder builder, int ADDRESS_TYPE) { builder.addInt(5, ADDRESS_TYPE, 0); }
  public static int endCryptoKey(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CryptoKey get(int j) { return get(new CryptoKey(), j); }
    public CryptoKey get(CryptoKey obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

