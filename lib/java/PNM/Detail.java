// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Details of Published Message
 */
@SuppressWarnings("unused")
public final class Detail extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static Detail getRootAsDetail(ByteBuffer _bb) { return getRootAsDetail(_bb, new Detail()); }
  public static Detail getRootAsDetail(ByteBuffer _bb, Detail obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Detail __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Multiformat Address
   * https://multiformats.io/multiaddr/
   * A universal address format for representing multiple network protocols. Examples include:
   * - /ip4/192.168.1.1/tcp/80 for an IPv4 address with TCP protocol
   * - /ip6zone/x/ip6/::1 for an IPv6 address with a zone
   * - /dns4/example.com for a domain name resolvable only to IPv4 addresses
   * - /ipfs/bafybeiccfclkdtucu6y4yc5cpr6y3yuinr67svmii46v5cfcrkp47ihehy/README.txt -IPFS address w/CID and path to `README.txt`.
   */
  public String MULTIFORMAT_ADDRESS() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MULTIFORMAT_ADDRESSAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer MULTIFORMAT_ADDRESSInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Concatenated Content Identifier (CID)
   * This field is a unique ID for distributed systems (CID).
   * The CID provides a unique identifier within distributed systems, as detailed at https://github.com/multiformats/cid. 
   */
  public String CID() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CIDAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer CIDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Ethereum Digital Signature
   * Digital signature of the CID using Ethereum's signing mechanism.
   * Refer to the Ethereum Blockchain integration section for details.
   */
  public String ETH_DIGITAL_SIGNATURE() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ETH_DIGITAL_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer ETH_DIGITAL_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Bitcoin Digital Signature
   * Digital signature of the CID using Bitcoin's signing mechanism.
   * Refer to the Bitcoin Blockchain integration section for details.
   */
  public String BTC_DIGITAL_SIGNATURE() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer BTC_DIGITAL_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer BTC_DIGITAL_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Litecoin Digital Signature
   * Digital signature of the CID using Litecoin's signing mechanism.
   * Refer to the Litecoin Blockchain integration section for details.
   */
  public String LTC_DIGITAL_SIGNATURE() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer LTC_DIGITAL_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer LTC_DIGITAL_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Ripple Digital Signature
   * Digital signature of the CID using Ripple's signing mechanism.
   * Refer to the Ripple Blockchain integration section for details.
   */
  public String XRP_DIGITAL_SIGNATURE() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer XRP_DIGITAL_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer XRP_DIGITAL_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Cardano Digital Signature
   * Digital signature of the CID using Cardano's signing mechanism.
   * Refer to the Cardano Blockchain integration section for details.
   */
  public String ADA_DIGITAL_SIGNATURE() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ADA_DIGITAL_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer ADA_DIGITAL_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Stellar Digital Signature
   * Digital signature of the CID using Stellar's signing mechanism.
   * Refer to the Stellar Blockchain integration section for details.
   */
  public String XLM_DIGITAL_SIGNATURE() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer XLM_DIGITAL_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer XLM_DIGITAL_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Dogecoin Digital Signature
   * Digital signature of the CID using Dogecoin's signing mechanism.
   * Refer to the Dogecoin Blockchain integration section for details.
   */
  public String DOGE_DIGITAL_SIGNATURE() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer DOGE_DIGITAL_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer DOGE_DIGITAL_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Monero Digital Signature
   * Digital signature of the CID using Monero's signing mechanism.
   * Refer to the Monero Blockchain integration section for details.
   */
  public String XMR_DIGITAL_SIGNATURE() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer XMR_DIGITAL_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer XMR_DIGITAL_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Polkadot Digital Signature
   * Digital signature of the CID using Polkadot's signing mechanism.
   * Refer to the Polkadot Blockchain integration section for details.
   */
  public String DOT_DIGITAL_SIGNATURE() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer DOT_DIGITAL_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer DOT_DIGITAL_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Filecoin Digital Signature
   * Digital signature of the CID using Filecoin's signing mechanism.
   * Refer to the Filecoin Blockchain integration section for details.
   */
  public String FIL_DIGITAL_SIGNATURE() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer FIL_DIGITAL_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer FIL_DIGITAL_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Tezos Digital Signature
   * Digital signature of the CID using Tezos's signing mechanism.
   * Refer to the Tezos Blockchain integration section for details.
   */
  public String XTZ_DIGITAL_SIGNATURE() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer XTZ_DIGITAL_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer XTZ_DIGITAL_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Cosmos Digital Signature
   * Digital signature of the CID using Cosmos's signing mechanism.
   * Refer to the Cosmos Blockchain integration section for details.
   */
  public String ATOM_DIGITAL_SIGNATURE() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ATOM_DIGITAL_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer ATOM_DIGITAL_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Tron Digital Signature
   * Digital signature of the CID using Tron's signing mechanism.
   * Refer to the Tron Blockchain integration section for details.
   */
  public String TRX_DIGITAL_SIGNATURE() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TRX_DIGITAL_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer TRX_DIGITAL_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Binance Coin Digital Signature
   * Digital signature of the CID using Binance Coin's signing mechanism.
   * Refer to the Binance Coin Blockchain integration section for details.
   */
  public String BNB_DIGITAL_SIGNATURE() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer BNB_DIGITAL_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer BNB_DIGITAL_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Avalanche Digital Signature
   * Digital signature of the CID using Avalanche's signing mechanism.
   * Refer to the Avalanche Blockchain integration section for details.
   */
  public String AVAX_DIGITAL_SIGNATURE() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer AVAX_DIGITAL_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer AVAX_DIGITAL_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Solana Digital Signature
   * Digital signature of the CID using Solana's signing mechanism.
   * Refer to the Solana Blockchain integration section for details.
   */
  public String SOL_DIGITAL_SIGNATURE() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer SOL_DIGITAL_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer SOL_DIGITAL_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }

  public static int createDetail(FlatBufferBuilder builder,
      int MULTIFORMAT_ADDRESSOffset,
      int CIDOffset,
      int ETH_DIGITAL_SIGNATUREOffset,
      int BTC_DIGITAL_SIGNATUREOffset,
      int LTC_DIGITAL_SIGNATUREOffset,
      int XRP_DIGITAL_SIGNATUREOffset,
      int ADA_DIGITAL_SIGNATUREOffset,
      int XLM_DIGITAL_SIGNATUREOffset,
      int DOGE_DIGITAL_SIGNATUREOffset,
      int XMR_DIGITAL_SIGNATUREOffset,
      int DOT_DIGITAL_SIGNATUREOffset,
      int FIL_DIGITAL_SIGNATUREOffset,
      int XTZ_DIGITAL_SIGNATUREOffset,
      int ATOM_DIGITAL_SIGNATUREOffset,
      int TRX_DIGITAL_SIGNATUREOffset,
      int BNB_DIGITAL_SIGNATUREOffset,
      int AVAX_DIGITAL_SIGNATUREOffset,
      int SOL_DIGITAL_SIGNATUREOffset) {
    builder.startTable(18);
    Detail.addSolDigitalSignature(builder, SOL_DIGITAL_SIGNATUREOffset);
    Detail.addAvaxDigitalSignature(builder, AVAX_DIGITAL_SIGNATUREOffset);
    Detail.addBnbDigitalSignature(builder, BNB_DIGITAL_SIGNATUREOffset);
    Detail.addTrxDigitalSignature(builder, TRX_DIGITAL_SIGNATUREOffset);
    Detail.addAtomDigitalSignature(builder, ATOM_DIGITAL_SIGNATUREOffset);
    Detail.addXtzDigitalSignature(builder, XTZ_DIGITAL_SIGNATUREOffset);
    Detail.addFilDigitalSignature(builder, FIL_DIGITAL_SIGNATUREOffset);
    Detail.addDotDigitalSignature(builder, DOT_DIGITAL_SIGNATUREOffset);
    Detail.addXmrDigitalSignature(builder, XMR_DIGITAL_SIGNATUREOffset);
    Detail.addDogeDigitalSignature(builder, DOGE_DIGITAL_SIGNATUREOffset);
    Detail.addXlmDigitalSignature(builder, XLM_DIGITAL_SIGNATUREOffset);
    Detail.addAdaDigitalSignature(builder, ADA_DIGITAL_SIGNATUREOffset);
    Detail.addXrpDigitalSignature(builder, XRP_DIGITAL_SIGNATUREOffset);
    Detail.addLtcDigitalSignature(builder, LTC_DIGITAL_SIGNATUREOffset);
    Detail.addBtcDigitalSignature(builder, BTC_DIGITAL_SIGNATUREOffset);
    Detail.addEthDigitalSignature(builder, ETH_DIGITAL_SIGNATUREOffset);
    Detail.addCid(builder, CIDOffset);
    Detail.addMultiformatAddress(builder, MULTIFORMAT_ADDRESSOffset);
    return Detail.endDetail(builder);
  }

  public static void startDetail(FlatBufferBuilder builder) { builder.startTable(18); }
  public static void addMultiformatAddress(FlatBufferBuilder builder, int MULTIFORMAT_ADDRESSOffset) { builder.addOffset(0, MULTIFORMAT_ADDRESSOffset, 0); }
  public static void addCid(FlatBufferBuilder builder, int CIDOffset) { builder.addOffset(1, CIDOffset, 0); }
  public static void addEthDigitalSignature(FlatBufferBuilder builder, int ETH_DIGITAL_SIGNATUREOffset) { builder.addOffset(2, ETH_DIGITAL_SIGNATUREOffset, 0); }
  public static void addBtcDigitalSignature(FlatBufferBuilder builder, int BTC_DIGITAL_SIGNATUREOffset) { builder.addOffset(3, BTC_DIGITAL_SIGNATUREOffset, 0); }
  public static void addLtcDigitalSignature(FlatBufferBuilder builder, int LTC_DIGITAL_SIGNATUREOffset) { builder.addOffset(4, LTC_DIGITAL_SIGNATUREOffset, 0); }
  public static void addXrpDigitalSignature(FlatBufferBuilder builder, int XRP_DIGITAL_SIGNATUREOffset) { builder.addOffset(5, XRP_DIGITAL_SIGNATUREOffset, 0); }
  public static void addAdaDigitalSignature(FlatBufferBuilder builder, int ADA_DIGITAL_SIGNATUREOffset) { builder.addOffset(6, ADA_DIGITAL_SIGNATUREOffset, 0); }
  public static void addXlmDigitalSignature(FlatBufferBuilder builder, int XLM_DIGITAL_SIGNATUREOffset) { builder.addOffset(7, XLM_DIGITAL_SIGNATUREOffset, 0); }
  public static void addDogeDigitalSignature(FlatBufferBuilder builder, int DOGE_DIGITAL_SIGNATUREOffset) { builder.addOffset(8, DOGE_DIGITAL_SIGNATUREOffset, 0); }
  public static void addXmrDigitalSignature(FlatBufferBuilder builder, int XMR_DIGITAL_SIGNATUREOffset) { builder.addOffset(9, XMR_DIGITAL_SIGNATUREOffset, 0); }
  public static void addDotDigitalSignature(FlatBufferBuilder builder, int DOT_DIGITAL_SIGNATUREOffset) { builder.addOffset(10, DOT_DIGITAL_SIGNATUREOffset, 0); }
  public static void addFilDigitalSignature(FlatBufferBuilder builder, int FIL_DIGITAL_SIGNATUREOffset) { builder.addOffset(11, FIL_DIGITAL_SIGNATUREOffset, 0); }
  public static void addXtzDigitalSignature(FlatBufferBuilder builder, int XTZ_DIGITAL_SIGNATUREOffset) { builder.addOffset(12, XTZ_DIGITAL_SIGNATUREOffset, 0); }
  public static void addAtomDigitalSignature(FlatBufferBuilder builder, int ATOM_DIGITAL_SIGNATUREOffset) { builder.addOffset(13, ATOM_DIGITAL_SIGNATUREOffset, 0); }
  public static void addTrxDigitalSignature(FlatBufferBuilder builder, int TRX_DIGITAL_SIGNATUREOffset) { builder.addOffset(14, TRX_DIGITAL_SIGNATUREOffset, 0); }
  public static void addBnbDigitalSignature(FlatBufferBuilder builder, int BNB_DIGITAL_SIGNATUREOffset) { builder.addOffset(15, BNB_DIGITAL_SIGNATUREOffset, 0); }
  public static void addAvaxDigitalSignature(FlatBufferBuilder builder, int AVAX_DIGITAL_SIGNATUREOffset) { builder.addOffset(16, AVAX_DIGITAL_SIGNATUREOffset, 0); }
  public static void addSolDigitalSignature(FlatBufferBuilder builder, int SOL_DIGITAL_SIGNATUREOffset) { builder.addOffset(17, SOL_DIGITAL_SIGNATUREOffset, 0); }
  public static int endDetail(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Detail get(int j) { return get(new Detail(), j); }
    public Detail get(Detail obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

