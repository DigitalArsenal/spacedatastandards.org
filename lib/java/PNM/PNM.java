// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Publish Notification Message
 */
@SuppressWarnings("unused")
public final class PNM extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static PNM getRootAsPNM(ByteBuffer _bb) { return getRootAsPNM(_bb, new PNM()); }
  public static PNM getRootAsPNM(ByteBuffer _bb, PNM obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean PNMBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "$PNM"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PNM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * IPFS Content Identifier (CID)
   * The hash of a file stored on the InterPlanetary File System (IPFS).
   * Refer to the section on IPFS integration for details.
   */
  public String IPFS_CID() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer IPFS_CIDAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer IPFS_CIDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Unique identifier generated from the data provider's public key
   */
  public String KEY_ADDRESS() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer KEY_ADDRESSAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer KEY_ADDRESSInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * SpaceDataStandards 4 Character File Identifier
   */
  public String FILE_IDENTIFIER() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer FILE_IDENTIFIERAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer FILE_IDENTIFIERInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createPNM(FlatBufferBuilder builder,
      int IPFS_CIDOffset,
      int KEY_ADDRESSOffset,
      int FILE_IDENTIFIEROffset) {
    builder.startTable(3);
    PNM.addFileIdentifier(builder, FILE_IDENTIFIEROffset);
    PNM.addKeyAddress(builder, KEY_ADDRESSOffset);
    PNM.addIpfsCid(builder, IPFS_CIDOffset);
    return PNM.endPNM(builder);
  }

  public static void startPNM(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addIpfsCid(FlatBufferBuilder builder, int IPFS_CIDOffset) { builder.addOffset(0, IPFS_CIDOffset, 0); }
  public static void addKeyAddress(FlatBufferBuilder builder, int KEY_ADDRESSOffset) { builder.addOffset(1, KEY_ADDRESSOffset, 0); }
  public static void addFileIdentifier(FlatBufferBuilder builder, int FILE_IDENTIFIEROffset) { builder.addOffset(2, FILE_IDENTIFIEROffset, 0); }
  public static int endPNM(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishPNMBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "$PNM"); }
  public static void finishSizePrefixedPNMBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "$PNM"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PNM get(int j) { return get(new PNM(), j); }
    public PNM get(PNM obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

