// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Details of Published Message
 */
@SuppressWarnings("unused")
public final class PNM extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static PNM getRootAsPNM(ByteBuffer _bb) { return getRootAsPNM(_bb, new PNM()); }
  public static PNM getRootAsPNM(ByteBuffer _bb, PNM obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean PNMBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "$PNM"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PNM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Multiformat Address
   * https://multiformats.io/multiaddr/
   * A universal address format for representing multiple network protocols. Examples include:
   * - /ip4/192.168.1.1/tcp/80 for an IPv4 address with TCP protocol
   * - /ip6zone/x/ip6/::1 for an IPv6 address with a zone
   * - /dns4/example.com for a domain name resolvable only to IPv4 addresses
   * - /ipfs/bafybeiccfclkdtucu6y4yc5cpr6y3yuinr67svmii46v5cfcrkp47ihehy/README.txt -IPFS address w/CID and path to `README.txt`.
   */
  public String MULTIFORMAT_ADDRESS() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer MULTIFORMAT_ADDRESSAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer MULTIFORMAT_ADDRESSInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Publish Time OF THE Publish Notification Message
   */
  public String PUBLISH_TIMESTAMP() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer PUBLISH_TIMESTAMPAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer PUBLISH_TIMESTAMPInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Concatenated Content Identifier (CID)
   * This field is a unique ID for distributed systems (CID).
   * The CID provides a unique identifier within distributed systems, as detailed at https://github.com/multiformats/cid. 
   */
  public String CID() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CIDAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer CIDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * File ID
   * This field is the file ID / Name
   */
  public String FID() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer FIDAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer FIDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Digital Signature of the CID
   * This is the digital signature of the CID, signed using the specified cryptographic method.
   */
  public String SIGNATURE() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Timestamp Signature
   * Digital signature of the publish timestamp, using the specified cryptographic method for timestamp verification.
   */
  public String TIMESTAMP_SIGNATURE() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TIMESTAMP_SIGNATUREAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer TIMESTAMP_SIGNATUREInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Type of Cryptographic Signature Used
   * Specifies the type of cryptographic signature used for the SIGNATURE field, indicating the specific blockchain technology, such as Ethereum or BTC.
   */
  public String SIGNATURE_TYPE() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer SIGNATURE_TYPEAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer SIGNATURE_TYPEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Type of Cryptographic Signature Used for Timestamp
   * Specifies the type of cryptographic signature used for the TIMESTAMP_SIGNATURE field, indicating the specific blockchain technology, such as Ethereum or BTC.
   */
  public String TIMESTAMP_SIGNATURE_TYPE() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer TIMESTAMP_SIGNATURE_TYPEAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer TIMESTAMP_SIGNATURE_TYPEInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }

  public static int createPNM(FlatBufferBuilder builder,
      int MULTIFORMAT_ADDRESSOffset,
      int PUBLISH_TIMESTAMPOffset,
      int CIDOffset,
      int FIDOffset,
      int SIGNATUREOffset,
      int TIMESTAMP_SIGNATUREOffset,
      int SIGNATURE_TYPEOffset,
      int TIMESTAMP_SIGNATURE_TYPEOffset) {
    builder.startTable(8);
    PNM.addTimestampSignatureType(builder, TIMESTAMP_SIGNATURE_TYPEOffset);
    PNM.addSignatureType(builder, SIGNATURE_TYPEOffset);
    PNM.addTimestampSignature(builder, TIMESTAMP_SIGNATUREOffset);
    PNM.addSignature(builder, SIGNATUREOffset);
    PNM.addFid(builder, FIDOffset);
    PNM.addCid(builder, CIDOffset);
    PNM.addPublishTimestamp(builder, PUBLISH_TIMESTAMPOffset);
    PNM.addMultiformatAddress(builder, MULTIFORMAT_ADDRESSOffset);
    return PNM.endPNM(builder);
  }

  public static void startPNM(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addMultiformatAddress(FlatBufferBuilder builder, int MULTIFORMAT_ADDRESSOffset) { builder.addOffset(0, MULTIFORMAT_ADDRESSOffset, 0); }
  public static void addPublishTimestamp(FlatBufferBuilder builder, int PUBLISH_TIMESTAMPOffset) { builder.addOffset(1, PUBLISH_TIMESTAMPOffset, 0); }
  public static void addCid(FlatBufferBuilder builder, int CIDOffset) { builder.addOffset(2, CIDOffset, 0); }
  public static void addFid(FlatBufferBuilder builder, int FIDOffset) { builder.addOffset(3, FIDOffset, 0); }
  public static void addSignature(FlatBufferBuilder builder, int SIGNATUREOffset) { builder.addOffset(4, SIGNATUREOffset, 0); }
  public static void addTimestampSignature(FlatBufferBuilder builder, int TIMESTAMP_SIGNATUREOffset) { builder.addOffset(5, TIMESTAMP_SIGNATUREOffset, 0); }
  public static void addSignatureType(FlatBufferBuilder builder, int SIGNATURE_TYPEOffset) { builder.addOffset(6, SIGNATURE_TYPEOffset, 0); }
  public static void addTimestampSignatureType(FlatBufferBuilder builder, int TIMESTAMP_SIGNATURE_TYPEOffset) { builder.addOffset(7, TIMESTAMP_SIGNATURE_TYPEOffset, 0); }
  public static int endPNM(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishPNMBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "$PNM"); }
  public static void finishSizePrefixedPNMBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "$PNM"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PNM get(int j) { return get(new PNM(), j); }
    public PNM get(PNM obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

