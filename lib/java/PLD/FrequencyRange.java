// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Frequency range with lower and upper limits
 */
@SuppressWarnings("unused")
public final class FrequencyRange extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static FrequencyRange getRootAsFrequencyRange(ByteBuffer _bb) { return getRootAsFrequencyRange(_bb, new FrequencyRange()); }
  public static FrequencyRange getRootAsFrequencyRange(ByteBuffer _bb, FrequencyRange obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FrequencyRange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Lower frequency in MHz
   */
  public double LOWER() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Upper frequency in MHz
   */
  public double UPPER() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createFrequencyRange(FlatBufferBuilder builder,
      double LOWER,
      double UPPER) {
    builder.startTable(2);
    FrequencyRange.addUpper(builder, UPPER);
    FrequencyRange.addLower(builder, LOWER);
    return FrequencyRange.endFrequencyRange(builder);
  }

  public static void startFrequencyRange(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addLower(FlatBufferBuilder builder, double LOWER) { builder.addDouble(0, LOWER, 0.0); }
  public static void addUpper(FlatBufferBuilder builder, double UPPER) { builder.addDouble(1, UPPER, 0.0); }
  public static int endFrequencyRange(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FrequencyRange get(int j) { return get(new FrequencyRange(), j); }
    public FrequencyRange get(FrequencyRange obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

