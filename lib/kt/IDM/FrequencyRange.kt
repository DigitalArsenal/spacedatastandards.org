// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Frequency range with lower and upper limits
 */
@Suppress("unused")
class FrequencyRange : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FrequencyRange {
        __init(_i, _bb)
        return this
    }
    /**
     * Lower frequency in MHz
     */
    val LOWER : Double
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Upper frequency in MHz
     */
    val UPPER : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsFrequencyRange(_bb: ByteBuffer): FrequencyRange = getRootAsFrequencyRange(_bb, FrequencyRange())
        fun getRootAsFrequencyRange(_bb: ByteBuffer, obj: FrequencyRange): FrequencyRange {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createFrequencyRange(builder: FlatBufferBuilder, LOWER: Double, UPPER: Double) : Int {
            builder.startTable(2)
            addUPPER(builder, UPPER)
            addLOWER(builder, LOWER)
            return endFrequencyRange(builder)
        }
        fun startFrequencyRange(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addLOWER(builder: FlatBufferBuilder, LOWER: Double) = builder.addDouble(0, LOWER, 0.0)
        fun addUPPER(builder: FlatBufferBuilder, UPPER: Double) = builder.addDouble(1, UPPER, 0.0)
        fun endFrequencyRange(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
