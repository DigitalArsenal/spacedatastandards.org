// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Integrated Device Message
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class IDM : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : IDM {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier for the EMT
     */
    val ID : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val IDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun IDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Name of the EMT
     */
    val NAME : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Mode of the data (real, simulated, synthetic)
     */
    val DATA_MODE : Byte
        get() {
            val o = __offset(8)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Uplink frequency range
     */
    val UPLINK : FrequencyRange? get() = UPLINK(FrequencyRange())
    fun UPLINK(obj: FrequencyRange) : FrequencyRange? {
        val o = __offset(10)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    /**
     * Downlink frequency range
     */
    val DOWNLINK : FrequencyRange? get() = DOWNLINK(FrequencyRange())
    fun DOWNLINK(obj: FrequencyRange) : FrequencyRange? {
        val o = __offset(12)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    /**
     * Beacon frequency range
     */
    val BEACON : FrequencyRange? get() = BEACON(FrequencyRange())
    fun BEACON(obj: FrequencyRange) : FrequencyRange? {
        val o = __offset(14)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    /**
     * Bands associated with the EMT
     */
    fun BAND(j: Int) : Band? = BAND(Band(), j)
    fun BAND(obj: Band, j: Int) : Band? {
        val o = __offset(16)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val BANDLength : Int
        get() {
            val o = __offset(16); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Type of polarization used
     */
    val POLARIZATION_TYPE : Byte
        get() {
            val o = __offset(18)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Simple polarization configuration
     */
    val SIMPLE_POLARIZATION : Byte
        get() {
            val o = __offset(20)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Stokes parameters for polarization characterization
     */
    val STOKES_PARAMETERS : StokesParameters? get() = STOKES_PARAMETERS(StokesParameters())
    fun STOKES_PARAMETERS(obj: StokesParameters) : StokesParameters? {
        val o = __offset(22)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    /**
     * Power required in Watts
     */
    val POWER_REQUIRED : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Type of power (eg. AC or DC)
     */
    val POWER_TYPE : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val POWER_TYPEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun POWER_TYPEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Indicates if the EMT can transmit
     */
    val TRANSMIT : Boolean
        get() {
            val o = __offset(28)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Indicates if the EMT can receive
     */
    val RECEIVE : Boolean
        get() {
            val o = __offset(30)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Type of the sensor
     */
    val SENSOR_TYPE : Byte
        get() {
            val o = __offset(32)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Source of the data
     */
    val SOURCE : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SOURCEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun SOURCEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Timestamp of the last observation
     */
    val LAST_OB_TIME : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val LAST_OB_TIMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun LAST_OB_TIMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Lower left elevation limit
     */
    val LOWER_LEFT_ELEVATION_LIMIT : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Upper left azimuth limit
     */
    val UPPER_LEFT_AZIMUTH_LIMIT : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Lower right elevation limit
     */
    val LOWER_RIGHT_ELEVATION_LIMIT : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Lower left azimuth limit
     */
    val LOWER_LEFT_AZIMUTH_LIMIT : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Upper right elevation limit
     */
    val UPPER_RIGHT_ELEVATION_LIMIT : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Upper right azimuth limit
     */
    val UPPER_RIGHT_AZIMUTH_LIMIT : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Lower right azimuth limit
     */
    val LOWER_RIGHT_AZIMUTH_LIMIT : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Upper left elevation limit
     */
    val UPPER_LEFT_ELEVATION_LIMIT : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Right geostationary belt limit
     */
    val RIGHT_GEO_BELT_LIMIT : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Left geostationary belt limit
     */
    val LEFT_GEO_BELT_LIMIT : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Magnitude limit of the sensor
     */
    val MAGNITUDE_LIMIT : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Indicates if the site is taskable
     */
    val TASKABLE : Boolean
        get() {
            val o = __offset(60)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsIDM(_bb: ByteBuffer): IDM = getRootAsIDM(_bb, IDM())
        fun getRootAsIDM(_bb: ByteBuffer, obj: IDM): IDM {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createIDM(builder: FlatBufferBuilder, IDOffset: Int, NAMEOffset: Int, DATA_MODE: Byte, UPLINKOffset: Int, DOWNLINKOffset: Int, BEACONOffset: Int, BANDOffset: Int, POLARIZATION_TYPE: Byte, SIMPLE_POLARIZATION: Byte, STOKES_PARAMETERSOffset: Int, POWER_REQUIRED: Double, POWER_TYPEOffset: Int, TRANSMIT: Boolean, RECEIVE: Boolean, SENSOR_TYPE: Byte, SOURCEOffset: Int, LAST_OB_TIMEOffset: Int, LOWER_LEFT_ELEVATION_LIMIT: Double, UPPER_LEFT_AZIMUTH_LIMIT: Double, LOWER_RIGHT_ELEVATION_LIMIT: Double, LOWER_LEFT_AZIMUTH_LIMIT: Double, UPPER_RIGHT_ELEVATION_LIMIT: Double, UPPER_RIGHT_AZIMUTH_LIMIT: Double, LOWER_RIGHT_AZIMUTH_LIMIT: Double, UPPER_LEFT_ELEVATION_LIMIT: Double, RIGHT_GEO_BELT_LIMIT: Double, LEFT_GEO_BELT_LIMIT: Double, MAGNITUDE_LIMIT: Double, TASKABLE: Boolean) : Int {
            builder.startTable(29)
            addMAGNITUDE_LIMIT(builder, MAGNITUDE_LIMIT)
            addLEFT_GEO_BELT_LIMIT(builder, LEFT_GEO_BELT_LIMIT)
            addRIGHT_GEO_BELT_LIMIT(builder, RIGHT_GEO_BELT_LIMIT)
            addUPPER_LEFT_ELEVATION_LIMIT(builder, UPPER_LEFT_ELEVATION_LIMIT)
            addLOWER_RIGHT_AZIMUTH_LIMIT(builder, LOWER_RIGHT_AZIMUTH_LIMIT)
            addUPPER_RIGHT_AZIMUTH_LIMIT(builder, UPPER_RIGHT_AZIMUTH_LIMIT)
            addUPPER_RIGHT_ELEVATION_LIMIT(builder, UPPER_RIGHT_ELEVATION_LIMIT)
            addLOWER_LEFT_AZIMUTH_LIMIT(builder, LOWER_LEFT_AZIMUTH_LIMIT)
            addLOWER_RIGHT_ELEVATION_LIMIT(builder, LOWER_RIGHT_ELEVATION_LIMIT)
            addUPPER_LEFT_AZIMUTH_LIMIT(builder, UPPER_LEFT_AZIMUTH_LIMIT)
            addLOWER_LEFT_ELEVATION_LIMIT(builder, LOWER_LEFT_ELEVATION_LIMIT)
            addPOWER_REQUIRED(builder, POWER_REQUIRED)
            addLAST_OB_TIME(builder, LAST_OB_TIMEOffset)
            addSOURCE(builder, SOURCEOffset)
            addPOWER_TYPE(builder, POWER_TYPEOffset)
            addSTOKES_PARAMETERS(builder, STOKES_PARAMETERSOffset)
            addBAND(builder, BANDOffset)
            addBEACON(builder, BEACONOffset)
            addDOWNLINK(builder, DOWNLINKOffset)
            addUPLINK(builder, UPLINKOffset)
            addNAME(builder, NAMEOffset)
            addID(builder, IDOffset)
            addTASKABLE(builder, TASKABLE)
            addSENSOR_TYPE(builder, SENSOR_TYPE)
            addRECEIVE(builder, RECEIVE)
            addTRANSMIT(builder, TRANSMIT)
            addSIMPLE_POLARIZATION(builder, SIMPLE_POLARIZATION)
            addPOLARIZATION_TYPE(builder, POLARIZATION_TYPE)
            addDATA_MODE(builder, DATA_MODE)
            return endIDM(builder)
        }
        fun startIDM(builder: FlatBufferBuilder) = builder.startTable(29)
        fun addID(builder: FlatBufferBuilder, ID: Int) = builder.addOffset(0, ID, 0)
        fun addNAME(builder: FlatBufferBuilder, NAME: Int) = builder.addOffset(1, NAME, 0)
        fun addDATA_MODE(builder: FlatBufferBuilder, DATA_MODE: Byte) = builder.addByte(2, DATA_MODE, 0)
        fun addUPLINK(builder: FlatBufferBuilder, UPLINK: Int) = builder.addOffset(3, UPLINK, 0)
        fun addDOWNLINK(builder: FlatBufferBuilder, DOWNLINK: Int) = builder.addOffset(4, DOWNLINK, 0)
        fun addBEACON(builder: FlatBufferBuilder, BEACON: Int) = builder.addOffset(5, BEACON, 0)
        fun addBAND(builder: FlatBufferBuilder, BAND: Int) = builder.addOffset(6, BAND, 0)
        fun createBandVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startBandVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addPOLARIZATION_TYPE(builder: FlatBufferBuilder, POLARIZATION_TYPE: Byte) = builder.addByte(7, POLARIZATION_TYPE, 0)
        fun addSIMPLE_POLARIZATION(builder: FlatBufferBuilder, SIMPLE_POLARIZATION: Byte) = builder.addByte(8, SIMPLE_POLARIZATION, 0)
        fun addSTOKES_PARAMETERS(builder: FlatBufferBuilder, STOKES_PARAMETERS: Int) = builder.addOffset(9, STOKES_PARAMETERS, 0)
        fun addPOWER_REQUIRED(builder: FlatBufferBuilder, POWER_REQUIRED: Double) = builder.addDouble(10, POWER_REQUIRED, 0.0)
        fun addPOWER_TYPE(builder: FlatBufferBuilder, POWER_TYPE: Int) = builder.addOffset(11, POWER_TYPE, 0)
        fun addTRANSMIT(builder: FlatBufferBuilder, TRANSMIT: Boolean) = builder.addBoolean(12, TRANSMIT, false)
        fun addRECEIVE(builder: FlatBufferBuilder, RECEIVE: Boolean) = builder.addBoolean(13, RECEIVE, false)
        fun addSENSOR_TYPE(builder: FlatBufferBuilder, SENSOR_TYPE: Byte) = builder.addByte(14, SENSOR_TYPE, 0)
        fun addSOURCE(builder: FlatBufferBuilder, SOURCE: Int) = builder.addOffset(15, SOURCE, 0)
        fun addLAST_OB_TIME(builder: FlatBufferBuilder, LAST_OB_TIME: Int) = builder.addOffset(16, LAST_OB_TIME, 0)
        fun addLOWER_LEFT_ELEVATION_LIMIT(builder: FlatBufferBuilder, LOWER_LEFT_ELEVATION_LIMIT: Double) = builder.addDouble(17, LOWER_LEFT_ELEVATION_LIMIT, 0.0)
        fun addUPPER_LEFT_AZIMUTH_LIMIT(builder: FlatBufferBuilder, UPPER_LEFT_AZIMUTH_LIMIT: Double) = builder.addDouble(18, UPPER_LEFT_AZIMUTH_LIMIT, 0.0)
        fun addLOWER_RIGHT_ELEVATION_LIMIT(builder: FlatBufferBuilder, LOWER_RIGHT_ELEVATION_LIMIT: Double) = builder.addDouble(19, LOWER_RIGHT_ELEVATION_LIMIT, 0.0)
        fun addLOWER_LEFT_AZIMUTH_LIMIT(builder: FlatBufferBuilder, LOWER_LEFT_AZIMUTH_LIMIT: Double) = builder.addDouble(20, LOWER_LEFT_AZIMUTH_LIMIT, 0.0)
        fun addUPPER_RIGHT_ELEVATION_LIMIT(builder: FlatBufferBuilder, UPPER_RIGHT_ELEVATION_LIMIT: Double) = builder.addDouble(21, UPPER_RIGHT_ELEVATION_LIMIT, 0.0)
        fun addUPPER_RIGHT_AZIMUTH_LIMIT(builder: FlatBufferBuilder, UPPER_RIGHT_AZIMUTH_LIMIT: Double) = builder.addDouble(22, UPPER_RIGHT_AZIMUTH_LIMIT, 0.0)
        fun addLOWER_RIGHT_AZIMUTH_LIMIT(builder: FlatBufferBuilder, LOWER_RIGHT_AZIMUTH_LIMIT: Double) = builder.addDouble(23, LOWER_RIGHT_AZIMUTH_LIMIT, 0.0)
        fun addUPPER_LEFT_ELEVATION_LIMIT(builder: FlatBufferBuilder, UPPER_LEFT_ELEVATION_LIMIT: Double) = builder.addDouble(24, UPPER_LEFT_ELEVATION_LIMIT, 0.0)
        fun addRIGHT_GEO_BELT_LIMIT(builder: FlatBufferBuilder, RIGHT_GEO_BELT_LIMIT: Double) = builder.addDouble(25, RIGHT_GEO_BELT_LIMIT, 0.0)
        fun addLEFT_GEO_BELT_LIMIT(builder: FlatBufferBuilder, LEFT_GEO_BELT_LIMIT: Double) = builder.addDouble(26, LEFT_GEO_BELT_LIMIT, 0.0)
        fun addMAGNITUDE_LIMIT(builder: FlatBufferBuilder, MAGNITUDE_LIMIT: Double) = builder.addDouble(27, MAGNITUDE_LIMIT, 0.0)
        fun addTASKABLE(builder: FlatBufferBuilder, TASKABLE: Boolean) = builder.addBoolean(28, TASKABLE, false)
        fun endIDM(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
