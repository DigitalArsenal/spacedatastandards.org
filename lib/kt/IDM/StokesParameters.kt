// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Stokes parameters, representing different aspects of polarization
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class StokesParameters : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : StokesParameters {
        __init(_i, _bb)
        return this
    }
    /**
     * Intensity
     */
    val I : Double
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Linear polarization
     */
    val Q : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Another linear polarization, orthogonal to Q
     */
    val U : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Circular polarization
     */
    val V : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsStokesParameters(_bb: ByteBuffer): StokesParameters = getRootAsStokesParameters(_bb, StokesParameters())
        fun getRootAsStokesParameters(_bb: ByteBuffer, obj: StokesParameters): StokesParameters {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createStokesParameters(builder: FlatBufferBuilder, I: Double, Q: Double, U: Double, V: Double) : Int {
            builder.startTable(4)
            addV(builder, V)
            addU(builder, U)
            addQ(builder, Q)
            addI(builder, I)
            return endStokesParameters(builder)
        }
        fun startStokesParameters(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addI(builder: FlatBufferBuilder, I: Double) = builder.addDouble(0, I, 0.0)
        fun addQ(builder: FlatBufferBuilder, Q: Double) = builder.addDouble(1, Q, 0.0)
        fun addU(builder: FlatBufferBuilder, U: Double) = builder.addDouble(2, U, 0.0)
        fun addV(builder: FlatBufferBuilder, V: Double) = builder.addDouble(3, V, 0.0)
        fun endStokesParameters(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
