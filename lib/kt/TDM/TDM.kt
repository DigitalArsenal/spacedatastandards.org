// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Tracking Data Message
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class TDM : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : TDM {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier for the observation OBSERVER -  [Specific CCSDS Document]
     */
    val OBSERVER_ID : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OBSERVER_IDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun OBSERVER_IDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Cartesian X coordinate of the OBSERVER location in chosen reference frame
     */
    val OBSERVER_X : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian Y coordinate of the OBSERVER location in chosen reference frame 
     */
    val OBSERVER_Y : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian Z coordinate of the OBSERVER location in chosen reference frame 
     */
    val OBSERVER_Z : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian X coordinate of the OBSERVER velocity in chosen reference frame
     */
    val OBSERVER_VX : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian Y coordinate of the OBSERVER velocity in chosen reference frame 
     */
    val OBSERVER_VY : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian Z coordinate of the OBSERVER velocity in chosen reference frame 
     */
    val OBSERVER_VZ : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Reference frame used for OBSERVER location Cartesian coordinates (e.g., ECEF, ECI)
     */
    val OBSERVER_POSITION_REFERENCE_FRAME : Byte
        get() {
            val o = __offset(18)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Reference frame used for obs location Cartesian coordinates (e.g., ECEF, ECI)
     */
    val OBS_REFERENCE_FRAME : Byte
        get() {
            val o = __offset(20)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Epoch or observation time -  CCSDS 503.0-B-1
     */
    val EPOCH : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val EPOCHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun EPOCHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * TDM version number -  CCSDS 503.0-B-1, Page D-9
     */
    val CCSDS_TDM_VERS : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CCSDS_TDM_VERSAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun CCSDS_TDM_VERSInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Comments regarding TDM -  various sections, e.g., Page D-9
     */
    fun COMMENT(j: Int) : String? {
        val o = __offset(26)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val COMMENTLength : Int
        get() {
            val o = __offset(26); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Date of TDM creation -  CCSDS 503.0-B-1, Page D-9
     */
    val CREATION_DATE : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CREATION_DATEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun CREATION_DATEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Originator of the TDM -  CCSDS 503.0-B-1, Page D-9
     */
    val ORIGINATOR : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ORIGINATORAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun ORIGINATORInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Start of metadata section -  CCSDS 503.0-B-1, Page D-9
     */
    val META_START : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val META_STARTAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun META_STARTInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Time system used -  CCSDS 503.0-B-1, Page D-9
     */
    val TIME_SYSTEM : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TIME_SYSTEMAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun TIME_SYSTEMInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Start time of the data -  CCSDS 503.0-B-1, Page D-9
     */
    val START_TIME : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val START_TIMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun START_TIMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Stop time of the data -  CCSDS 503.0-B-1, Page D-9
     */
    val STOP_TIME : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val STOP_TIMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun STOP_TIMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * First participant in the TDM -  CCSDS 503.0-B-1, Page D-9
     */
    val PARTICIPANT_1 : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val PARTICIPANT_1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun PARTICIPANT_1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Second participant in the TDM -  CCSDS 503.0-B-1, Page D-9
     */
    val PARTICIPANT_2 : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val PARTICIPANT_2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun PARTICIPANT_2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Third participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
     */
    val PARTICIPANT_3 : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val PARTICIPANT_3AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun PARTICIPANT_3InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Mode of TDM -  CCSDS 503.0-B-1, Page D-9
     */
    val MODE : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val MODEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun MODEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * First path in TDM -  CCSDS 503.0-B-1, Page D-9
     */
    val PATH_1 : UShort
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    /**
     * Second path in TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
     */
    val PATH_2 : UShort
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    /**
     * Transmit band -  CCSDS 503.0-B-1, Page D-9
     */
    val TRANSMIT_BAND : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TRANSMIT_BANDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun TRANSMIT_BANDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Receive band -  CCSDS 503.0-B-1, Page D-9
     */
    val RECEIVE_BAND : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val RECEIVE_BANDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun RECEIVE_BANDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Integration interval -  CCSDS 503.0-B-1, Page D-9
     */
    val INTEGRATION_INTERVAL : Float
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * Integration reference -  CCSDS 503.0-B-1, Page D-9
     */
    val INTEGRATION_REF : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val INTEGRATION_REFAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun INTEGRATION_REFInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Receive delay for second participant -  CCSDS 503.0-B-1, Page D-9
     */
    val RECEIVE_DELAY_2 : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Receive delay for third participant -  CCSDS 503.0-B-1, Page D-9
     */
    val RECEIVE_DELAY_3 : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Data quality -  CCSDS 503.0-B-1, Page D-9
     */
    val DATA_QUALITY : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val DATA_QUALITYAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun DATA_QUALITYInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * End of metadata section -  CCSDS 503.0-B-1, Page D-9
     */
    val META_STOP : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val META_STOPAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun META_STOPInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Start of data section -  CCSDS 503.0-B-1, Page D-9
     */
    val DATA_START : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val DATA_STARTAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun DATA_STARTInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * Transmit frequency for first participant -  CCSDS 503.0-B-1, Page D-9
     */
    val TRANSMIT_FREQ_1 : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Receive frequency -  CCSDS 503.0-B-1, Page D-9
     */
    fun RECEIVE_FREQ(j: Int) : Double {
        val o = __offset(72)
        return if (o != 0) {
            bb.getDouble(__vector(o) + j * 8)
        } else {
            0.0
        }
    }
    val RECEIVE_FREQLength : Int
        get() {
            val o = __offset(72); return if (o != 0) __vector_len(o) else 0
        }
    val RECEIVE_FREQAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 8)
    fun RECEIVE_FREQInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 8)
    /**
     * End of data section -  CCSDS 503.0-B-1, Page D-9
     */
    val DATA_STOP : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val DATA_STOPAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun DATA_STOPInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Additional properties as required by the specific application of the TDM...
     * Reference for time tagging -  CCSDS 503.0-B-1, Page D-10
     */
    val TIMETAG_REF : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TIMETAG_REFAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun TIMETAG_REFInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Type of angle data -  CCSDS 503.0-B-1, Page D-12
     * Can be AZEL, RADEC, XEYN, XSYE, or another value with provided ICD
     */
    val ANGLE_TYPE : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ANGLE_TYPEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun ANGLE_TYPEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * First angle value -  CCSDS 503.0-B-1, Page D-12
     */
    fun ANGLE_1(j: Int) : Float {
        val o = __offset(80)
        return if (o != 0) {
            bb.getFloat(__vector(o) + j * 4)
        } else {
            0.0f
        }
    }
    val ANGLE_1Length : Int
        get() {
            val o = __offset(80); return if (o != 0) __vector_len(o) else 0
        }
    val ANGLE_1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 4)
    fun ANGLE_1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 4)
    /**
     * Second angle value -  CCSDS 503.0-B-1, Page D-12
     */
    fun ANGLE_2(j: Int) : Float {
        val o = __offset(82)
        return if (o != 0) {
            bb.getFloat(__vector(o) + j * 4)
        } else {
            0.0f
        }
    }
    val ANGLE_2Length : Int
        get() {
            val o = __offset(82); return if (o != 0) __vector_len(o) else 0
        }
    val ANGLE_2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 4)
    fun ANGLE_2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 4)
    /**
     * Uncertainty of first angle -  CCSDS 503.0-B-1
     */
    val ANGLE_UNCERTAINTY_1 : Float
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * Uncertainty of second angle -  CCSDS 503.0-B-1
     */
    val ANGLE_UNCERTAINTY_2 : Float
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * Rate of change of range -  CCSDS 503.0-B-1
     */
    val RANGE_RATE : Double
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Uncertainty in range -  CCSDS 503.0-B-1
     */
    val RANGE_UNCERTAINTY : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Mode of range data -  CCSDS 503.0-B-1, Page D-10
     */
    val RANGE_MODE : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val RANGE_MODEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun RANGE_MODEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * Modulus value for range data -  CCSDS 503.0-B-1, Page D-10
     */
    val RANGE_MODULUS : Double
        get() {
            val o = __offset(94)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * First correction angle -  CCSDS 503.0-B-1, Page D-12
     */
    val CORRECTION_ANGLE_1 : Float
        get() {
            val o = __offset(96)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * Second correction angle -  CCSDS 503.0-B-1, Page D-12
     */
    val CORRECTION_ANGLE_2 : Float
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * Indicator of corrections applied -  CCSDS 503.0-B-1, Page D-12
     */
    val CORRECTIONS_APPLIED : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CORRECTIONS_APPLIEDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun CORRECTIONS_APPLIEDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Dry component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
     */
    fun TROPO_DRY(j: Int) : Double {
        val o = __offset(102)
        return if (o != 0) {
            bb.getDouble(__vector(o) + j * 8)
        } else {
            0.0
        }
    }
    val TROPO_DRYLength : Int
        get() {
            val o = __offset(102); return if (o != 0) __vector_len(o) else 0
        }
    val TROPO_DRYAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 8)
    fun TROPO_DRYInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 8)
    /**
     * Wet component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
     */
    fun TROPO_WET(j: Int) : Double {
        val o = __offset(104)
        return if (o != 0) {
            bb.getDouble(__vector(o) + j * 8)
        } else {
            0.0
        }
    }
    val TROPO_WETLength : Int
        get() {
            val o = __offset(104); return if (o != 0) __vector_len(o) else 0
        }
    val TROPO_WETAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 8)
    fun TROPO_WETInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 8)
    /**
     * Slant total electron content -  CCSDS 503.0-B-1, Page D-13
     */
    fun STEC(j: Int) : Double {
        val o = __offset(106)
        return if (o != 0) {
            bb.getDouble(__vector(o) + j * 8)
        } else {
            0.0
        }
    }
    val STECLength : Int
        get() {
            val o = __offset(106); return if (o != 0) __vector_len(o) else 0
        }
    val STECAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 8)
    fun STECInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 8)
    /**
     * Atmospheric pressure -  CCSDS 503.0-B-1, Page D-14
     */
    fun PRESSURE(j: Int) : Double {
        val o = __offset(108)
        return if (o != 0) {
            bb.getDouble(__vector(o) + j * 8)
        } else {
            0.0
        }
    }
    val PRESSURELength : Int
        get() {
            val o = __offset(108); return if (o != 0) __vector_len(o) else 0
        }
    val PRESSUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 8)
    fun PRESSUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 8)
    /**
     * Relative humidity -  CCSDS 503.0-B-1, Page D-14
     */
    fun RHUMIDITY(j: Int) : Double {
        val o = __offset(110)
        return if (o != 0) {
            bb.getDouble(__vector(o) + j * 8)
        } else {
            0.0
        }
    }
    val RHUMIDITYLength : Int
        get() {
            val o = __offset(110); return if (o != 0) __vector_len(o) else 0
        }
    val RHUMIDITYAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(110, 8)
    fun RHUMIDITYInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 110, 8)
    /**
     * Ambient temperature -  CCSDS 503.0-B-1, Page D-14
     */
    fun TEMPERATURE(j: Int) : Double {
        val o = __offset(112)
        return if (o != 0) {
            bb.getDouble(__vector(o) + j * 8)
        } else {
            0.0
        }
    }
    val TEMPERATURELength : Int
        get() {
            val o = __offset(112); return if (o != 0) __vector_len(o) else 0
        }
    val TEMPERATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(112, 8)
    fun TEMPERATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 112, 8)
    /**
     * Clock bias values -  CCSDS 503.0-B-1, Page D-15
     */
    fun CLOCK_BIAS(j: Int) : Double {
        val o = __offset(114)
        return if (o != 0) {
            bb.getDouble(__vector(o) + j * 8)
        } else {
            0.0
        }
    }
    val CLOCK_BIASLength : Int
        get() {
            val o = __offset(114); return if (o != 0) __vector_len(o) else 0
        }
    val CLOCK_BIASAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(114, 8)
    fun CLOCK_BIASInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 114, 8)
    /**
     * Clock drift values -  CCSDS 503.0-B-1, Page D-15
     */
    fun CLOCK_DRIFT(j: Int) : Double {
        val o = __offset(116)
        return if (o != 0) {
            bb.getDouble(__vector(o) + j * 8)
        } else {
            0.0
        }
    }
    val CLOCK_DRIFTLength : Int
        get() {
            val o = __offset(116); return if (o != 0) __vector_len(o) else 0
        }
    val CLOCK_DRIFTAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(116, 8)
    fun CLOCK_DRIFTInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 116, 8)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsTDM(_bb: ByteBuffer): TDM = getRootAsTDM(_bb, TDM())
        fun getRootAsTDM(_bb: ByteBuffer, obj: TDM): TDM {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createTDM(builder: FlatBufferBuilder, OBSERVER_IDOffset: Int, OBSERVER_X: Double, OBSERVER_Y: Double, OBSERVER_Z: Double, OBSERVER_VX: Double, OBSERVER_VY: Double, OBSERVER_VZ: Double, OBSERVER_POSITION_REFERENCE_FRAME: Byte, OBS_REFERENCE_FRAME: Byte, EPOCHOffset: Int, CCSDS_TDM_VERSOffset: Int, COMMENTOffset: Int, CREATION_DATEOffset: Int, ORIGINATOROffset: Int, META_STARTOffset: Int, TIME_SYSTEMOffset: Int, START_TIMEOffset: Int, STOP_TIMEOffset: Int, PARTICIPANT_1Offset: Int, PARTICIPANT_2Offset: Int, PARTICIPANT_3Offset: Int, MODEOffset: Int, PATH_1: UShort, PATH_2: UShort, TRANSMIT_BANDOffset: Int, RECEIVE_BANDOffset: Int, INTEGRATION_INTERVAL: Float, INTEGRATION_REFOffset: Int, RECEIVE_DELAY_2: Double, RECEIVE_DELAY_3: Double, DATA_QUALITYOffset: Int, META_STOPOffset: Int, DATA_STARTOffset: Int, TRANSMIT_FREQ_1: Double, RECEIVE_FREQOffset: Int, DATA_STOPOffset: Int, TIMETAG_REFOffset: Int, ANGLE_TYPEOffset: Int, ANGLE_1Offset: Int, ANGLE_2Offset: Int, ANGLE_UNCERTAINTY_1: Float, ANGLE_UNCERTAINTY_2: Float, RANGE_RATE: Double, RANGE_UNCERTAINTY: Double, RANGE_MODEOffset: Int, RANGE_MODULUS: Double, CORRECTION_ANGLE_1: Float, CORRECTION_ANGLE_2: Float, CORRECTIONS_APPLIEDOffset: Int, TROPO_DRYOffset: Int, TROPO_WETOffset: Int, STECOffset: Int, PRESSUREOffset: Int, RHUMIDITYOffset: Int, TEMPERATUREOffset: Int, CLOCK_BIASOffset: Int, CLOCK_DRIFTOffset: Int) : Int {
            builder.startTable(57)
            addRANGE_MODULUS(builder, RANGE_MODULUS)
            addRANGE_UNCERTAINTY(builder, RANGE_UNCERTAINTY)
            addRANGE_RATE(builder, RANGE_RATE)
            addTRANSMIT_FREQ_1(builder, TRANSMIT_FREQ_1)
            addRECEIVE_DELAY_3(builder, RECEIVE_DELAY_3)
            addRECEIVE_DELAY_2(builder, RECEIVE_DELAY_2)
            addOBSERVER_VZ(builder, OBSERVER_VZ)
            addOBSERVER_VY(builder, OBSERVER_VY)
            addOBSERVER_VX(builder, OBSERVER_VX)
            addOBSERVER_Z(builder, OBSERVER_Z)
            addOBSERVER_Y(builder, OBSERVER_Y)
            addOBSERVER_X(builder, OBSERVER_X)
            addCLOCK_DRIFT(builder, CLOCK_DRIFTOffset)
            addCLOCK_BIAS(builder, CLOCK_BIASOffset)
            addTEMPERATURE(builder, TEMPERATUREOffset)
            addRHUMIDITY(builder, RHUMIDITYOffset)
            addPRESSURE(builder, PRESSUREOffset)
            addSTEC(builder, STECOffset)
            addTROPO_WET(builder, TROPO_WETOffset)
            addTROPO_DRY(builder, TROPO_DRYOffset)
            addCORRECTIONS_APPLIED(builder, CORRECTIONS_APPLIEDOffset)
            addCORRECTION_ANGLE_2(builder, CORRECTION_ANGLE_2)
            addCORRECTION_ANGLE_1(builder, CORRECTION_ANGLE_1)
            addRANGE_MODE(builder, RANGE_MODEOffset)
            addANGLE_UNCERTAINTY_2(builder, ANGLE_UNCERTAINTY_2)
            addANGLE_UNCERTAINTY_1(builder, ANGLE_UNCERTAINTY_1)
            addANGLE_2(builder, ANGLE_2Offset)
            addANGLE_1(builder, ANGLE_1Offset)
            addANGLE_TYPE(builder, ANGLE_TYPEOffset)
            addTIMETAG_REF(builder, TIMETAG_REFOffset)
            addDATA_STOP(builder, DATA_STOPOffset)
            addRECEIVE_FREQ(builder, RECEIVE_FREQOffset)
            addDATA_START(builder, DATA_STARTOffset)
            addMETA_STOP(builder, META_STOPOffset)
            addDATA_QUALITY(builder, DATA_QUALITYOffset)
            addINTEGRATION_REF(builder, INTEGRATION_REFOffset)
            addINTEGRATION_INTERVAL(builder, INTEGRATION_INTERVAL)
            addRECEIVE_BAND(builder, RECEIVE_BANDOffset)
            addTRANSMIT_BAND(builder, TRANSMIT_BANDOffset)
            addMODE(builder, MODEOffset)
            addPARTICIPANT_3(builder, PARTICIPANT_3Offset)
            addPARTICIPANT_2(builder, PARTICIPANT_2Offset)
            addPARTICIPANT_1(builder, PARTICIPANT_1Offset)
            addSTOP_TIME(builder, STOP_TIMEOffset)
            addSTART_TIME(builder, START_TIMEOffset)
            addTIME_SYSTEM(builder, TIME_SYSTEMOffset)
            addMETA_START(builder, META_STARTOffset)
            addORIGINATOR(builder, ORIGINATOROffset)
            addCREATION_DATE(builder, CREATION_DATEOffset)
            addCOMMENT(builder, COMMENTOffset)
            addCCSDS_TDM_VERS(builder, CCSDS_TDM_VERSOffset)
            addEPOCH(builder, EPOCHOffset)
            addOBSERVER_ID(builder, OBSERVER_IDOffset)
            addPATH_2(builder, PATH_2)
            addPATH_1(builder, PATH_1)
            addOBS_REFERENCE_FRAME(builder, OBS_REFERENCE_FRAME)
            addOBSERVER_POSITION_REFERENCE_FRAME(builder, OBSERVER_POSITION_REFERENCE_FRAME)
            return endTDM(builder)
        }
        fun startTDM(builder: FlatBufferBuilder) = builder.startTable(57)
        fun addOBSERVER_ID(builder: FlatBufferBuilder, OBSERVER_ID: Int) = builder.addOffset(0, OBSERVER_ID, 0)
        fun addOBSERVER_X(builder: FlatBufferBuilder, OBSERVER_X: Double) = builder.addDouble(1, OBSERVER_X, 0.0)
        fun addOBSERVER_Y(builder: FlatBufferBuilder, OBSERVER_Y: Double) = builder.addDouble(2, OBSERVER_Y, 0.0)
        fun addOBSERVER_Z(builder: FlatBufferBuilder, OBSERVER_Z: Double) = builder.addDouble(3, OBSERVER_Z, 0.0)
        fun addOBSERVER_VX(builder: FlatBufferBuilder, OBSERVER_VX: Double) = builder.addDouble(4, OBSERVER_VX, 0.0)
        fun addOBSERVER_VY(builder: FlatBufferBuilder, OBSERVER_VY: Double) = builder.addDouble(5, OBSERVER_VY, 0.0)
        fun addOBSERVER_VZ(builder: FlatBufferBuilder, OBSERVER_VZ: Double) = builder.addDouble(6, OBSERVER_VZ, 0.0)
        fun addOBSERVER_POSITION_REFERENCE_FRAME(builder: FlatBufferBuilder, OBSERVER_POSITION_REFERENCE_FRAME: Byte) = builder.addByte(7, OBSERVER_POSITION_REFERENCE_FRAME, 0)
        fun addOBS_REFERENCE_FRAME(builder: FlatBufferBuilder, OBS_REFERENCE_FRAME: Byte) = builder.addByte(8, OBS_REFERENCE_FRAME, 0)
        fun addEPOCH(builder: FlatBufferBuilder, EPOCH: Int) = builder.addOffset(9, EPOCH, 0)
        fun addCCSDS_TDM_VERS(builder: FlatBufferBuilder, CCSDS_TDM_VERS: Int) = builder.addOffset(10, CCSDS_TDM_VERS, 0)
        fun addCOMMENT(builder: FlatBufferBuilder, COMMENT: Int) = builder.addOffset(11, COMMENT, 0)
        fun createCommentVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCommentVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCREATION_DATE(builder: FlatBufferBuilder, CREATION_DATE: Int) = builder.addOffset(12, CREATION_DATE, 0)
        fun addORIGINATOR(builder: FlatBufferBuilder, ORIGINATOR: Int) = builder.addOffset(13, ORIGINATOR, 0)
        fun addMETA_START(builder: FlatBufferBuilder, META_START: Int) = builder.addOffset(14, META_START, 0)
        fun addTIME_SYSTEM(builder: FlatBufferBuilder, TIME_SYSTEM: Int) = builder.addOffset(15, TIME_SYSTEM, 0)
        fun addSTART_TIME(builder: FlatBufferBuilder, START_TIME: Int) = builder.addOffset(16, START_TIME, 0)
        fun addSTOP_TIME(builder: FlatBufferBuilder, STOP_TIME: Int) = builder.addOffset(17, STOP_TIME, 0)
        fun addPARTICIPANT_1(builder: FlatBufferBuilder, PARTICIPANT_1: Int) = builder.addOffset(18, PARTICIPANT_1, 0)
        fun addPARTICIPANT_2(builder: FlatBufferBuilder, PARTICIPANT_2: Int) = builder.addOffset(19, PARTICIPANT_2, 0)
        fun addPARTICIPANT_3(builder: FlatBufferBuilder, PARTICIPANT_3: Int) = builder.addOffset(20, PARTICIPANT_3, 0)
        fun addMODE(builder: FlatBufferBuilder, MODE: Int) = builder.addOffset(21, MODE, 0)
        fun addPATH_1(builder: FlatBufferBuilder, PATH_1: UShort) = builder.addShort(22, PATH_1.toShort(), 0)
        fun addPATH_2(builder: FlatBufferBuilder, PATH_2: UShort) = builder.addShort(23, PATH_2.toShort(), 0)
        fun addTRANSMIT_BAND(builder: FlatBufferBuilder, TRANSMIT_BAND: Int) = builder.addOffset(24, TRANSMIT_BAND, 0)
        fun addRECEIVE_BAND(builder: FlatBufferBuilder, RECEIVE_BAND: Int) = builder.addOffset(25, RECEIVE_BAND, 0)
        fun addINTEGRATION_INTERVAL(builder: FlatBufferBuilder, INTEGRATION_INTERVAL: Float) = builder.addFloat(26, INTEGRATION_INTERVAL, 0.0)
        fun addINTEGRATION_REF(builder: FlatBufferBuilder, INTEGRATION_REF: Int) = builder.addOffset(27, INTEGRATION_REF, 0)
        fun addRECEIVE_DELAY_2(builder: FlatBufferBuilder, RECEIVE_DELAY_2: Double) = builder.addDouble(28, RECEIVE_DELAY_2, 0.0)
        fun addRECEIVE_DELAY_3(builder: FlatBufferBuilder, RECEIVE_DELAY_3: Double) = builder.addDouble(29, RECEIVE_DELAY_3, 0.0)
        fun addDATA_QUALITY(builder: FlatBufferBuilder, DATA_QUALITY: Int) = builder.addOffset(30, DATA_QUALITY, 0)
        fun addMETA_STOP(builder: FlatBufferBuilder, META_STOP: Int) = builder.addOffset(31, META_STOP, 0)
        fun addDATA_START(builder: FlatBufferBuilder, DATA_START: Int) = builder.addOffset(32, DATA_START, 0)
        fun addTRANSMIT_FREQ_1(builder: FlatBufferBuilder, TRANSMIT_FREQ_1: Double) = builder.addDouble(33, TRANSMIT_FREQ_1, 0.0)
        fun addRECEIVE_FREQ(builder: FlatBufferBuilder, RECEIVE_FREQ: Int) = builder.addOffset(34, RECEIVE_FREQ, 0)
        fun createReceiveFreqVector(builder: FlatBufferBuilder, data: DoubleArray) : Int {
            builder.startVector(8, data.size, 8)
            for (i in data.size - 1 downTo 0) {
                builder.addDouble(data[i])
            }
            return builder.endVector()
        }
        fun startReceiveFreqVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(8, numElems, 8)
        fun addDATA_STOP(builder: FlatBufferBuilder, DATA_STOP: Int) = builder.addOffset(35, DATA_STOP, 0)
        fun addTIMETAG_REF(builder: FlatBufferBuilder, TIMETAG_REF: Int) = builder.addOffset(36, TIMETAG_REF, 0)
        fun addANGLE_TYPE(builder: FlatBufferBuilder, ANGLE_TYPE: Int) = builder.addOffset(37, ANGLE_TYPE, 0)
        fun addANGLE_1(builder: FlatBufferBuilder, ANGLE_1: Int) = builder.addOffset(38, ANGLE_1, 0)
        fun createAngle1Vector(builder: FlatBufferBuilder, data: FloatArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addFloat(data[i])
            }
            return builder.endVector()
        }
        fun startAngle1Vector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addANGLE_2(builder: FlatBufferBuilder, ANGLE_2: Int) = builder.addOffset(39, ANGLE_2, 0)
        fun createAngle2Vector(builder: FlatBufferBuilder, data: FloatArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addFloat(data[i])
            }
            return builder.endVector()
        }
        fun startAngle2Vector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addANGLE_UNCERTAINTY_1(builder: FlatBufferBuilder, ANGLE_UNCERTAINTY_1: Float) = builder.addFloat(40, ANGLE_UNCERTAINTY_1, 0.0)
        fun addANGLE_UNCERTAINTY_2(builder: FlatBufferBuilder, ANGLE_UNCERTAINTY_2: Float) = builder.addFloat(41, ANGLE_UNCERTAINTY_2, 0.0)
        fun addRANGE_RATE(builder: FlatBufferBuilder, RANGE_RATE: Double) = builder.addDouble(42, RANGE_RATE, 0.0)
        fun addRANGE_UNCERTAINTY(builder: FlatBufferBuilder, RANGE_UNCERTAINTY: Double) = builder.addDouble(43, RANGE_UNCERTAINTY, 0.0)
        fun addRANGE_MODE(builder: FlatBufferBuilder, RANGE_MODE: Int) = builder.addOffset(44, RANGE_MODE, 0)
        fun addRANGE_MODULUS(builder: FlatBufferBuilder, RANGE_MODULUS: Double) = builder.addDouble(45, RANGE_MODULUS, 0.0)
        fun addCORRECTION_ANGLE_1(builder: FlatBufferBuilder, CORRECTION_ANGLE_1: Float) = builder.addFloat(46, CORRECTION_ANGLE_1, 0.0)
        fun addCORRECTION_ANGLE_2(builder: FlatBufferBuilder, CORRECTION_ANGLE_2: Float) = builder.addFloat(47, CORRECTION_ANGLE_2, 0.0)
        fun addCORRECTIONS_APPLIED(builder: FlatBufferBuilder, CORRECTIONS_APPLIED: Int) = builder.addOffset(48, CORRECTIONS_APPLIED, 0)
        fun addTROPO_DRY(builder: FlatBufferBuilder, TROPO_DRY: Int) = builder.addOffset(49, TROPO_DRY, 0)
        fun createTropoDryVector(builder: FlatBufferBuilder, data: DoubleArray) : Int {
            builder.startVector(8, data.size, 8)
            for (i in data.size - 1 downTo 0) {
                builder.addDouble(data[i])
            }
            return builder.endVector()
        }
        fun startTropoDryVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(8, numElems, 8)
        fun addTROPO_WET(builder: FlatBufferBuilder, TROPO_WET: Int) = builder.addOffset(50, TROPO_WET, 0)
        fun createTropoWetVector(builder: FlatBufferBuilder, data: DoubleArray) : Int {
            builder.startVector(8, data.size, 8)
            for (i in data.size - 1 downTo 0) {
                builder.addDouble(data[i])
            }
            return builder.endVector()
        }
        fun startTropoWetVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(8, numElems, 8)
        fun addSTEC(builder: FlatBufferBuilder, STEC: Int) = builder.addOffset(51, STEC, 0)
        fun createStecVector(builder: FlatBufferBuilder, data: DoubleArray) : Int {
            builder.startVector(8, data.size, 8)
            for (i in data.size - 1 downTo 0) {
                builder.addDouble(data[i])
            }
            return builder.endVector()
        }
        fun startStecVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(8, numElems, 8)
        fun addPRESSURE(builder: FlatBufferBuilder, PRESSURE: Int) = builder.addOffset(52, PRESSURE, 0)
        fun createPressureVector(builder: FlatBufferBuilder, data: DoubleArray) : Int {
            builder.startVector(8, data.size, 8)
            for (i in data.size - 1 downTo 0) {
                builder.addDouble(data[i])
            }
            return builder.endVector()
        }
        fun startPressureVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(8, numElems, 8)
        fun addRHUMIDITY(builder: FlatBufferBuilder, RHUMIDITY: Int) = builder.addOffset(53, RHUMIDITY, 0)
        fun createRhumidityVector(builder: FlatBufferBuilder, data: DoubleArray) : Int {
            builder.startVector(8, data.size, 8)
            for (i in data.size - 1 downTo 0) {
                builder.addDouble(data[i])
            }
            return builder.endVector()
        }
        fun startRhumidityVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(8, numElems, 8)
        fun addTEMPERATURE(builder: FlatBufferBuilder, TEMPERATURE: Int) = builder.addOffset(54, TEMPERATURE, 0)
        fun createTemperatureVector(builder: FlatBufferBuilder, data: DoubleArray) : Int {
            builder.startVector(8, data.size, 8)
            for (i in data.size - 1 downTo 0) {
                builder.addDouble(data[i])
            }
            return builder.endVector()
        }
        fun startTemperatureVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(8, numElems, 8)
        fun addCLOCK_BIAS(builder: FlatBufferBuilder, CLOCK_BIAS: Int) = builder.addOffset(55, CLOCK_BIAS, 0)
        fun createClockBiasVector(builder: FlatBufferBuilder, data: DoubleArray) : Int {
            builder.startVector(8, data.size, 8)
            for (i in data.size - 1 downTo 0) {
                builder.addDouble(data[i])
            }
            return builder.endVector()
        }
        fun startClockBiasVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(8, numElems, 8)
        fun addCLOCK_DRIFT(builder: FlatBufferBuilder, CLOCK_DRIFT: Int) = builder.addOffset(56, CLOCK_DRIFT, 0)
        fun createClockDriftVector(builder: FlatBufferBuilder, data: DoubleArray) : Int {
            builder.startVector(8, data.size, 8)
            for (i in data.size - 1 downTo 0) {
                builder.addDouble(data[i])
            }
            return builder.endVector()
        }
        fun startClockDriftVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(8, numElems, 8)
        fun endTDM(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
