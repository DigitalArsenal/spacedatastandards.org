// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Schema Standard Definition
 */
@Suppress("unused")
class SCHEMA_STANDARD : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SCHEMA_STANDARD {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier for the standard
     */
    val key : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val keyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun keyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * IDL
     */
    val idl : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * List Of File Paths
     */
    fun files(j: Int) : String? {
        val o = __offset(8)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val filesLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSCHEMA_STANDARD(_bb: ByteBuffer): SCHEMA_STANDARD = getRootAsSCHEMA_STANDARD(_bb, SCHEMA_STANDARD())
        fun getRootAsSCHEMA_STANDARD(_bb: ByteBuffer, obj: SCHEMA_STANDARD): SCHEMA_STANDARD {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createSCHEMA_STANDARD(builder: FlatBufferBuilder, keyOffset: Int, idlOffset: Int, filesOffset: Int) : Int {
            builder.startTable(3)
            addFiles(builder, filesOffset)
            addIdl(builder, idlOffset)
            addKey(builder, keyOffset)
            return endSCHEMA_STANDARD(builder)
        }
        fun startSCHEMA_STANDARD(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addKey(builder: FlatBufferBuilder, key: Int) = builder.addOffset(0, key, 0)
        fun addIdl(builder: FlatBufferBuilder, idl: Int) = builder.addOffset(1, idl, 0)
        fun addFiles(builder: FlatBufferBuilder, files: Int) = builder.addOffset(2, files, 0)
        fun createFilesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startFilesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endSCHEMA_STANDARD(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
