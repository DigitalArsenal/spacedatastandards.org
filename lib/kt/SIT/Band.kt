// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Table representing a frequency band with a name and frequency range
 */
@Suppress("unused")
class Band : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Band {
        __init(_i, _bb)
        return this
    }
    /**
     * Name of the band
     */
    val NAME : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Frequency range of the band
     */
    val FREQUENCY_RANGE : FrequencyRange? get() = FREQUENCY_RANGE(FrequencyRange())
    fun FREQUENCY_RANGE(obj: FrequencyRange) : FrequencyRange? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsBand(_bb: ByteBuffer): Band = getRootAsBand(_bb, Band())
        fun getRootAsBand(_bb: ByteBuffer, obj: Band): Band {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createBand(builder: FlatBufferBuilder, NAMEOffset: Int, FREQUENCY_RANGEOffset: Int) : Int {
            builder.startTable(2)
            addFREQUENCY_RANGE(builder, FREQUENCY_RANGEOffset)
            addNAME(builder, NAMEOffset)
            return endBand(builder)
        }
        fun startBand(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addNAME(builder: FlatBufferBuilder, NAME: Int) = builder.addOffset(0, NAME, 0)
        fun addFREQUENCY_RANGE(builder: FlatBufferBuilder, FREQUENCY_RANGE: Int) = builder.addOffset(1, FREQUENCY_RANGE, 0)
        fun endBand(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
