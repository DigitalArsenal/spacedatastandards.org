// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Site Information Message
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class SIT : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SIT {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier for the site, BE_NUMBER
     */
    val ID : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val IDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun IDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Name of the site
     */
    val NAME : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Abbreviation
     */
    val ABBREVIATION : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ABBREVIATIONAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun ABBREVIATIONInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Site type as defined in SiteType enum
     */
    val SITE_TYPE : Byte
        get() {
            val o = __offset(10)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Site type CATCODE
     */
    val CATCODE : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CATCODEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun CATCODEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Network identifier
     */
    val NETWORK : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val NETWORKAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun NETWORKInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Latitude of the site
     */
    val LATITUDE : Float
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * Longitude of the site
     */
    val LONGITUDE : Float
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * Altitude of the site
     */
    val ALTITUDE : Float
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * Geometry of the site
     */
    val GEOMETRY : Geometry? get() = GEOMETRY(Geometry())
    fun GEOMETRY(obj: Geometry) : Geometry? {
        val o = __offset(22)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    /**
     * Center point geometry coordinates
     */
    fun CENTER_POINT_GEOMETRY(j: Int) : Float {
        val o = __offset(24)
        return if (o != 0) {
            bb.getFloat(__vector(o) + j * 4)
        } else {
            0.0f
        }
    }
    val CENTER_POINT_GEOMETRYLength : Int
        get() {
            val o = __offset(24); return if (o != 0) __vector_len(o) else 0
        }
    val CENTER_POINT_GEOMETRYAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 4)
    fun CENTER_POINT_GEOMETRYInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 4)
    /**
     * Classification marking of the site
     */
    val CLASSIFICATION : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CLASSIFICATIONAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun CLASSIFICATIONInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * CTR ISO 3166 Numeric code as string
     */
    val CTR_ID : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CTR_IDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun CTR_IDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Identifier of the user who created the site data
     */
    val CREATED_BY : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CREATED_BYAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun CREATED_BYInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Description of the site
     */
    val DESCRIPTION : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val DESCRIPTIONAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun DESCRIPTIONInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * URL for the 3D model of the site
     */
    val MODEL_URL : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val MODEL_URLAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun MODEL_URLInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Source of the site data
     */
    val SOURCE : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SOURCEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun SOURCEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Indicates if the site is taskable
     */
    val TASKABLE : Boolean
        get() {
            val o = __offset(38)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Operational status of the site (e.g., active, inactive, under construction)
     */
    val OPERATIONAL_STATUS : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OPERATIONAL_STATUSAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun OPERATIONAL_STATUSInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Date of establishment
     */
    val ESTABLISHMENT_DATE : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ESTABLISHMENT_DATEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun ESTABLISHMENT_DATEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Contact information for the site
     */
    val CONTACT_INFO : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CONTACT_INFOAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun CONTACT_INFOInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Environmental impact or considerations
     */
    val ENVIRONMENTAL_IMPACT : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ENVIRONMENTAL_IMPACTAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun ENVIRONMENTAL_IMPACTInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Accessibility and infrastructure details
     */
    val ACCESSIBILITY_INFRA : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ACCESSIBILITY_INFRAAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun ACCESSIBILITY_INFRAInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Vector of Integrated Devices (IDM)
     */
    fun INTEGRATED_DEVICES(j: Int) : IDM? = INTEGRATED_DEVICES(IDM(), j)
    fun INTEGRATED_DEVICES(obj: IDM, j: Int) : IDM? {
        val o = __offset(50)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val INTEGRATED_DEVICESLength : Int
        get() {
            val o = __offset(50); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsSIT(_bb: ByteBuffer): SIT = getRootAsSIT(_bb, SIT())
        fun getRootAsSIT(_bb: ByteBuffer, obj: SIT): SIT {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createSIT(builder: FlatBufferBuilder, IDOffset: Int, NAMEOffset: Int, ABBREVIATIONOffset: Int, SITE_TYPE: Byte, CATCODEOffset: Int, NETWORKOffset: Int, LATITUDE: Float, LONGITUDE: Float, ALTITUDE: Float, GEOMETRYOffset: Int, CENTER_POINT_GEOMETRYOffset: Int, CLASSIFICATIONOffset: Int, CTR_IDOffset: Int, CREATED_BYOffset: Int, DESCRIPTIONOffset: Int, MODEL_URLOffset: Int, SOURCEOffset: Int, TASKABLE: Boolean, OPERATIONAL_STATUSOffset: Int, ESTABLISHMENT_DATEOffset: Int, CONTACT_INFOOffset: Int, ENVIRONMENTAL_IMPACTOffset: Int, ACCESSIBILITY_INFRAOffset: Int, INTEGRATED_DEVICESOffset: Int) : Int {
            builder.startTable(24)
            addINTEGRATED_DEVICES(builder, INTEGRATED_DEVICESOffset)
            addACCESSIBILITY_INFRA(builder, ACCESSIBILITY_INFRAOffset)
            addENVIRONMENTAL_IMPACT(builder, ENVIRONMENTAL_IMPACTOffset)
            addCONTACT_INFO(builder, CONTACT_INFOOffset)
            addESTABLISHMENT_DATE(builder, ESTABLISHMENT_DATEOffset)
            addOPERATIONAL_STATUS(builder, OPERATIONAL_STATUSOffset)
            addSOURCE(builder, SOURCEOffset)
            addMODEL_URL(builder, MODEL_URLOffset)
            addDESCRIPTION(builder, DESCRIPTIONOffset)
            addCREATED_BY(builder, CREATED_BYOffset)
            addCTR_ID(builder, CTR_IDOffset)
            addCLASSIFICATION(builder, CLASSIFICATIONOffset)
            addCENTER_POINT_GEOMETRY(builder, CENTER_POINT_GEOMETRYOffset)
            addGEOMETRY(builder, GEOMETRYOffset)
            addALTITUDE(builder, ALTITUDE)
            addLONGITUDE(builder, LONGITUDE)
            addLATITUDE(builder, LATITUDE)
            addNETWORK(builder, NETWORKOffset)
            addCATCODE(builder, CATCODEOffset)
            addABBREVIATION(builder, ABBREVIATIONOffset)
            addNAME(builder, NAMEOffset)
            addID(builder, IDOffset)
            addTASKABLE(builder, TASKABLE)
            addSITE_TYPE(builder, SITE_TYPE)
            return endSIT(builder)
        }
        fun startSIT(builder: FlatBufferBuilder) = builder.startTable(24)
        fun addID(builder: FlatBufferBuilder, ID: Int) = builder.addOffset(0, ID, 0)
        fun addNAME(builder: FlatBufferBuilder, NAME: Int) = builder.addOffset(1, NAME, 0)
        fun addABBREVIATION(builder: FlatBufferBuilder, ABBREVIATION: Int) = builder.addOffset(2, ABBREVIATION, 0)
        fun addSITE_TYPE(builder: FlatBufferBuilder, SITE_TYPE: Byte) = builder.addByte(3, SITE_TYPE, 0)
        fun addCATCODE(builder: FlatBufferBuilder, CATCODE: Int) = builder.addOffset(4, CATCODE, 0)
        fun addNETWORK(builder: FlatBufferBuilder, NETWORK: Int) = builder.addOffset(5, NETWORK, 0)
        fun addLATITUDE(builder: FlatBufferBuilder, LATITUDE: Float) = builder.addFloat(6, LATITUDE, 0.0)
        fun addLONGITUDE(builder: FlatBufferBuilder, LONGITUDE: Float) = builder.addFloat(7, LONGITUDE, 0.0)
        fun addALTITUDE(builder: FlatBufferBuilder, ALTITUDE: Float) = builder.addFloat(8, ALTITUDE, 0.0)
        fun addGEOMETRY(builder: FlatBufferBuilder, GEOMETRY: Int) = builder.addOffset(9, GEOMETRY, 0)
        fun addCENTER_POINT_GEOMETRY(builder: FlatBufferBuilder, CENTER_POINT_GEOMETRY: Int) = builder.addOffset(10, CENTER_POINT_GEOMETRY, 0)
        fun createCenterPointGeometryVector(builder: FlatBufferBuilder, data: FloatArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addFloat(data[i])
            }
            return builder.endVector()
        }
        fun startCenterPointGeometryVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCLASSIFICATION(builder: FlatBufferBuilder, CLASSIFICATION: Int) = builder.addOffset(11, CLASSIFICATION, 0)
        fun addCTR_ID(builder: FlatBufferBuilder, CTR_ID: Int) = builder.addOffset(12, CTR_ID, 0)
        fun addCREATED_BY(builder: FlatBufferBuilder, CREATED_BY: Int) = builder.addOffset(13, CREATED_BY, 0)
        fun addDESCRIPTION(builder: FlatBufferBuilder, DESCRIPTION: Int) = builder.addOffset(14, DESCRIPTION, 0)
        fun addMODEL_URL(builder: FlatBufferBuilder, MODEL_URL: Int) = builder.addOffset(15, MODEL_URL, 0)
        fun addSOURCE(builder: FlatBufferBuilder, SOURCE: Int) = builder.addOffset(16, SOURCE, 0)
        fun addTASKABLE(builder: FlatBufferBuilder, TASKABLE: Boolean) = builder.addBoolean(17, TASKABLE, false)
        fun addOPERATIONAL_STATUS(builder: FlatBufferBuilder, OPERATIONAL_STATUS: Int) = builder.addOffset(18, OPERATIONAL_STATUS, 0)
        fun addESTABLISHMENT_DATE(builder: FlatBufferBuilder, ESTABLISHMENT_DATE: Int) = builder.addOffset(19, ESTABLISHMENT_DATE, 0)
        fun addCONTACT_INFO(builder: FlatBufferBuilder, CONTACT_INFO: Int) = builder.addOffset(20, CONTACT_INFO, 0)
        fun addENVIRONMENTAL_IMPACT(builder: FlatBufferBuilder, ENVIRONMENTAL_IMPACT: Int) = builder.addOffset(21, ENVIRONMENTAL_IMPACT, 0)
        fun addACCESSIBILITY_INFRA(builder: FlatBufferBuilder, ACCESSIBILITY_INFRA: Int) = builder.addOffset(22, ACCESSIBILITY_INFRA, 0)
        fun addINTEGRATED_DEVICES(builder: FlatBufferBuilder, INTEGRATED_DEVICES: Int) = builder.addOffset(23, INTEGRATED_DEVICES, 0)
        fun createIntegratedDevicesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startIntegratedDevicesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endSIT(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
