// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Geometry table with information about geometric properties
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class Geometry : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Geometry {
        __init(_i, _bb)
        return this
    }
    /**
     * Type of geometry
     */
    val GEOMETRY_TYPE : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val GEOMETRY_TYPEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun GEOMETRY_TYPEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Coordinates of the geometry
     */
    fun COORDINATES(j: Int) : Float {
        val o = __offset(6)
        return if (o != 0) {
            bb.getFloat(__vector(o) + j * 4)
        } else {
            0.0f
        }
    }
    val COORDINATESLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    val COORDINATESAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 4)
    fun COORDINATESInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 4)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsGeometry(_bb: ByteBuffer): Geometry = getRootAsGeometry(_bb, Geometry())
        fun getRootAsGeometry(_bb: ByteBuffer, obj: Geometry): Geometry {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createGeometry(builder: FlatBufferBuilder, GEOMETRY_TYPEOffset: Int, COORDINATESOffset: Int) : Int {
            builder.startTable(2)
            addCOORDINATES(builder, COORDINATESOffset)
            addGEOMETRY_TYPE(builder, GEOMETRY_TYPEOffset)
            return endGeometry(builder)
        }
        fun startGeometry(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addGEOMETRY_TYPE(builder: FlatBufferBuilder, GEOMETRY_TYPE: Int) = builder.addOffset(0, GEOMETRY_TYPE, 0)
        fun addCOORDINATES(builder: FlatBufferBuilder, COORDINATES: Int) = builder.addOffset(1, COORDINATES, 0)
        fun createCoordinatesVector(builder: FlatBufferBuilder, data: FloatArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addFloat(data[i])
            }
            return builder.endVector()
        }
        fun startCoordinatesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endGeometry(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
