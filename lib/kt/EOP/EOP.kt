// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Earth Orientation Parameters
 */
@Suppress("unused")
class EOP : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EOP {
        __init(_i, _bb)
        return this
    }
    /**
     * Date in ISO 8601 format
     */
    val DATE : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val DATEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun DATEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Modified Julian Date
     */
    val MJD : UInt
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    /**
     * x pole coordinate in arcseconds
     */
    val X : Float
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * y pole coordinate in arcseconds
     */
    val Y : Float
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * UT1-UTC in seconds
     */
    val UT1_MINUS_UTC : Float
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * Length of Day correction in seconds
     */
    val LOD : Float
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * Nutation correction in longitude (δΔψ) in arcseconds
     */
    val DPSI : Float
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * Nutation correction in obliquity (δΔε) in arcseconds
     */
    val DEPS : Float
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * Celestial pole offset in x (δX) in arcseconds
     */
    val DX : Float
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * Celestial pole offset in y (δY) in arcseconds
     */
    val DY : Float
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * Delta Atomic Time (TAI-UTC) in seconds
     */
    val DAT : UShort
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    /**
     * Data type (O = Observed, P = Predicted)
     */
    val DATA_TYPE : Byte
        get() {
            val o = __offset(26)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEOP(_bb: ByteBuffer): EOP = getRootAsEOP(_bb, EOP())
        fun getRootAsEOP(_bb: ByteBuffer, obj: EOP): EOP {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun EOPBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "$EOP")
        fun createEOP(builder: FlatBufferBuilder, DATEOffset: Int, MJD: UInt, X: Float, Y: Float, UT1_MINUS_UTC: Float, LOD: Float, DPSI: Float, DEPS: Float, DX: Float, DY: Float, DAT: UShort, DATA_TYPE: Byte) : Int {
            builder.startTable(12)
            addDY(builder, DY)
            addDX(builder, DX)
            addDEPS(builder, DEPS)
            addDPSI(builder, DPSI)
            addLOD(builder, LOD)
            addUT1_MINUS_UTC(builder, UT1_MINUS_UTC)
            addY(builder, Y)
            addX(builder, X)
            addMJD(builder, MJD)
            addDATE(builder, DATEOffset)
            addDAT(builder, DAT)
            addDATA_TYPE(builder, DATA_TYPE)
            return endEOP(builder)
        }
        fun startEOP(builder: FlatBufferBuilder) = builder.startTable(12)
        fun addDATE(builder: FlatBufferBuilder, DATE: Int) = builder.addOffset(0, DATE, 0)
        fun addMJD(builder: FlatBufferBuilder, MJD: UInt) = builder.addInt(1, MJD.toInt(), 0)
        fun addX(builder: FlatBufferBuilder, X: Float) = builder.addFloat(2, X, 0.0)
        fun addY(builder: FlatBufferBuilder, Y: Float) = builder.addFloat(3, Y, 0.0)
        fun addUT1_MINUS_UTC(builder: FlatBufferBuilder, UT1_MINUS_UTC: Float) = builder.addFloat(4, UT1_MINUS_UTC, 0.0)
        fun addLOD(builder: FlatBufferBuilder, LOD: Float) = builder.addFloat(5, LOD, 0.0)
        fun addDPSI(builder: FlatBufferBuilder, DPSI: Float) = builder.addFloat(6, DPSI, 0.0)
        fun addDEPS(builder: FlatBufferBuilder, DEPS: Float) = builder.addFloat(7, DEPS, 0.0)
        fun addDX(builder: FlatBufferBuilder, DX: Float) = builder.addFloat(8, DX, 0.0)
        fun addDY(builder: FlatBufferBuilder, DY: Float) = builder.addFloat(9, DY, 0.0)
        fun addDAT(builder: FlatBufferBuilder, DAT: UShort) = builder.addShort(10, DAT.toShort(), 0)
        fun addDATA_TYPE(builder: FlatBufferBuilder, DATA_TYPE: Byte) = builder.addByte(11, DATA_TYPE, 0)
        fun endEOP(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEOPBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "$EOP")
        fun finishSizePrefixedEOPBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "$EOP")
    }
}
