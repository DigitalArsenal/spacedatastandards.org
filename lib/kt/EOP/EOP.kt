// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Earth Orientation Parameters
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class EOP : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EOP {
        __init(_i, _bb)
        return this
    }
    /**
     *  Date in ISO 8601 format, e.g., "2018-01-01T00:00:00Z"
     */
    val DATE : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val DATEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun DATEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     *  Modified Julian Date in UTC, e.g., 58119
     */
    val MJD : UInt
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    /**
     *  x component of Pole Wander in radians, e.g., 2.872908911518888E-7
     */
    val X_POLE_WANDER_RADIANS : Float
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     *  y component of Pole Wander in radians, e.g., 1.2003259523750447E-6
     */
    val Y_POLE_WANDER_RADIANS : Float
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     *  x component of Celestial Pole Offset in radians, e.g., 5.720801437092525E-10
     */
    val X_CELESTIAL_POLE_OFFSET_RADIANS : Float
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     *  y component of Celestial Pole Offset in radians, e.g., -8.484239419416879E-10
     */
    val Y_CELESTIAL_POLE_OFFSET_RADIANS : Float
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     *  UT1 minus UTC in seconds, e.g., 0.2163567
     */
    val UT1_MINUS_UTC_SECONDS : Float
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     *  TAI minus UTC in seconds, e.g., 37
     */
    val TAI_MINUS_UTC_SECONDS : UShort
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    /**
     *  Correction to Length of Day in seconds, e.g., 8.094E-4
     */
    val LENGTH_OF_DAY_CORRECTION_SECONDS : Float
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     *  Data type (O = Observed, P = Predicted)
     */
    val DATA_TYPE : Byte
        get() {
            val o = __offset(22)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsEOP(_bb: ByteBuffer): EOP = getRootAsEOP(_bb, EOP())
        fun getRootAsEOP(_bb: ByteBuffer, obj: EOP): EOP {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createEOP(builder: FlatBufferBuilder, DATEOffset: Int, MJD: UInt, X_POLE_WANDER_RADIANS: Float, Y_POLE_WANDER_RADIANS: Float, X_CELESTIAL_POLE_OFFSET_RADIANS: Float, Y_CELESTIAL_POLE_OFFSET_RADIANS: Float, UT1_MINUS_UTC_SECONDS: Float, TAI_MINUS_UTC_SECONDS: UShort, LENGTH_OF_DAY_CORRECTION_SECONDS: Float, DATA_TYPE: Byte) : Int {
            builder.startTable(10)
            addLENGTH_OF_DAY_CORRECTION_SECONDS(builder, LENGTH_OF_DAY_CORRECTION_SECONDS)
            addUT1_MINUS_UTC_SECONDS(builder, UT1_MINUS_UTC_SECONDS)
            addY_CELESTIAL_POLE_OFFSET_RADIANS(builder, Y_CELESTIAL_POLE_OFFSET_RADIANS)
            addX_CELESTIAL_POLE_OFFSET_RADIANS(builder, X_CELESTIAL_POLE_OFFSET_RADIANS)
            addY_POLE_WANDER_RADIANS(builder, Y_POLE_WANDER_RADIANS)
            addX_POLE_WANDER_RADIANS(builder, X_POLE_WANDER_RADIANS)
            addMJD(builder, MJD)
            addDATE(builder, DATEOffset)
            addTAI_MINUS_UTC_SECONDS(builder, TAI_MINUS_UTC_SECONDS)
            addDATA_TYPE(builder, DATA_TYPE)
            return endEOP(builder)
        }
        fun startEOP(builder: FlatBufferBuilder) = builder.startTable(10)
        fun addDATE(builder: FlatBufferBuilder, DATE: Int) = builder.addOffset(0, DATE, 0)
        fun addMJD(builder: FlatBufferBuilder, MJD: UInt) = builder.addInt(1, MJD.toInt(), 0)
        fun addX_POLE_WANDER_RADIANS(builder: FlatBufferBuilder, X_POLE_WANDER_RADIANS: Float) = builder.addFloat(2, X_POLE_WANDER_RADIANS, 0.0)
        fun addY_POLE_WANDER_RADIANS(builder: FlatBufferBuilder, Y_POLE_WANDER_RADIANS: Float) = builder.addFloat(3, Y_POLE_WANDER_RADIANS, 0.0)
        fun addX_CELESTIAL_POLE_OFFSET_RADIANS(builder: FlatBufferBuilder, X_CELESTIAL_POLE_OFFSET_RADIANS: Float) = builder.addFloat(4, X_CELESTIAL_POLE_OFFSET_RADIANS, 0.0)
        fun addY_CELESTIAL_POLE_OFFSET_RADIANS(builder: FlatBufferBuilder, Y_CELESTIAL_POLE_OFFSET_RADIANS: Float) = builder.addFloat(5, Y_CELESTIAL_POLE_OFFSET_RADIANS, 0.0)
        fun addUT1_MINUS_UTC_SECONDS(builder: FlatBufferBuilder, UT1_MINUS_UTC_SECONDS: Float) = builder.addFloat(6, UT1_MINUS_UTC_SECONDS, 0.0)
        fun addTAI_MINUS_UTC_SECONDS(builder: FlatBufferBuilder, TAI_MINUS_UTC_SECONDS: UShort) = builder.addShort(7, TAI_MINUS_UTC_SECONDS.toShort(), 0)
        fun addLENGTH_OF_DAY_CORRECTION_SECONDS(builder: FlatBufferBuilder, LENGTH_OF_DAY_CORRECTION_SECONDS: Float) = builder.addFloat(8, LENGTH_OF_DAY_CORRECTION_SECONDS, 0.0)
        fun addDATA_TYPE(builder: FlatBufferBuilder, DATA_TYPE: Byte) = builder.addByte(9, DATA_TYPE, 0)
        fun endEOP(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
