// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Orbit Mean Elements Message
 */
@Suppress("unused")
class OMM : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OMM {
        __init(_i, _bb)
        return this
    }
    /**
     * CCSDS OMM Version 
     */
    val CCSDS_OMM_VERS : Double
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Creation Date (ISO 8601 UTC format) 
     */
    val CREATION_DATE : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CREATION_DATEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun CREATION_DATEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Originator 
     */
    val ORIGINATOR : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ORIGINATORAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun ORIGINATORInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Satellite Name(s)
     */
    val OBJECT_NAME : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OBJECT_NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun OBJECT_NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * International Designator (YYYY-NNNAAA)
     */
    val OBJECT_ID : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OBJECT_IDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun OBJECT_IDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Center Name (e.g. EARTH, MARS)
     */
    val CENTER_NAME : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CENTER_NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun CENTER_NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Reference Frame
     * Typically TEMEOFDATE
     */
    val REFERENCE_FRAME : RFM? get() = REFERENCE_FRAME(RFM())
    fun REFERENCE_FRAME(obj: RFM) : RFM? {
        val o = __offset(16)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    /**
     * Reference Frame Epoch (ISO 8601 UTC format)
     */
    val REFERENCE_FRAME_EPOCH : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val REFERENCE_FRAME_EPOCHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun REFERENCE_FRAME_EPOCHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Time System [M, UTC]
     */
    val TIME_SYSTEM : Byte
        get() {
            val o = __offset(20)
            return if(o != 0) bb.get(o + bb_pos) else 11
        }
    /**
     * Mean Element Theory
     */
    val MEAN_ELEMENT_THEORY : Byte
        get() {
            val o = __offset(22)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * COMMENT (O)
     */
    val COMMENT : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val COMMENTAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun COMMENTInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * EPOCH of Mean Keplerian elements (ISO 8601 UTC format)
     */
    val EPOCH : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val EPOCHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun EPOCHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Semi-major axis in km or Mean Motion in rev/day
     */
    val SEMI_MAJOR_AXIS : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Mean motion in rev/day if MEAN_ELEMENT_THEORY=SGP/SGP4 else unused
     */
    val MEAN_MOTION : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Eccentricity (unitless)
     */
    val ECCENTRICITY : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Inclination in degrees
     */
    val INCLINATION : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * RA_OF_ASC_NODE in degrees
     */
    val RA_OF_ASC_NODE : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * ARG_OF_PERICENTER in degrees
     */
    val ARG_OF_PERICENTER : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * MEAN_ANOMALY in degrees
     */
    val MEAN_ANOMALY : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * GM in km**3/s**2
     */
    val GM : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * MASS in kg
     */
    val MASS : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * SOLAR_RAD_AREA in m**2
     */
    val SOLAR_RAD_AREA : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * SOLAR_RAD_COEFF (unitless)
     */
    val SOLAR_RAD_COEFF : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * DRAG_AREA in m**2
     */
    val DRAG_AREA : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * DRAG_COEFF (unitless)
     */
    val DRAG_COEFF : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * TLE Related Parameters (Only if MEAN_ELEMENT_THEORY=SGP/SGP4)
     * EPHEMERIS_TYPE Default=0
     */
    val EPHEMERIS_TYPE : Byte
        get() {
            val o = __offset(54)
            return if(o != 0) bb.get(o + bb_pos) else 1
        }
    /**
     * CLASSIFICATION_TYPE Default=U
     */
    val CLASSIFICATION_TYPE : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CLASSIFICATION_TYPEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun CLASSIFICATION_TYPEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * NORAD_CAT_ID (integer) [O if SGP/SGP4]
     */
    val NORAD_CAT_ID : UInt
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    /**
     * ELEMENT_SET_NO [O if SGP/SGP4]
     */
    val ELEMENT_SET_NO : UInt
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    /**
     * REV_AT_EPOCH [O if SGP/SGP4]
     */
    val REV_AT_EPOCH : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * BSTAR in 1/Earth radii or BTERM in m²/kg depending on MEAN_ELEMENT_THEORY [C]
     */
    val BSTAR : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * MEAN_MOTION_DOT in rev/day² [C if SGP or PPT3]
     */
    val MEAN_MOTION_DOT : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * MEAN_MOTION_DDOT in rev/day³ if SGP/PPT3 or AGOM in m²/kg if SGP4-XP [C]
     */
    val MEAN_MOTION_DDOT : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Position/Velocity Covariance Matrix (6x6 Lower Triangular) [C if any covariance provided]
     * COV_REF_FRAME reference frame for covariance [C if covariance given]
     * Typically RSW
     */
    val COV_REFERENCE_FRAME : RFM? get() = COV_REFERENCE_FRAME(RFM())
    fun COV_REFERENCE_FRAME(obj: RFM) : RFM? {
        val o = __offset(70)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    /**
     * CX_X [km**2]
     */
    val CX_X : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CY_X [km**2]
     */
    val CY_X : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CY_Y [km**2]
     */
    val CY_Y : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CZ_X [km**2]
     */
    val CZ_X : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CZ_Y [km**2]
     */
    val CZ_Y : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CZ_Z [km**2]
     */
    val CZ_Z : Double
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CX_DOT_X [km**2/s]
     */
    val CX_DOT_X : Double
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CX_DOT_Y [km**2/s]
     */
    val CX_DOT_Y : Double
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CX_DOT_Z [km**2/s]
     */
    val CX_DOT_Z : Double
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CX_DOT_X_DOT [km**2/s**2]
     */
    val CX_DOT_X_DOT : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CY_DOT_X [km**2/s]
     */
    val CY_DOT_X : Double
        get() {
            val o = __offset(92)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CY_DOT_Y [km**2/s]
     */
    val CY_DOT_Y : Double
        get() {
            val o = __offset(94)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CY_DOT_Z [km**2/s]
     */
    val CY_DOT_Z : Double
        get() {
            val o = __offset(96)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CY_DOT_X_DOT [km**2/s**2]
     */
    val CY_DOT_X_DOT : Double
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CY_DOT_Y_DOT [km**2/s**2]
     */
    val CY_DOT_Y_DOT : Double
        get() {
            val o = __offset(100)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CZ_DOT_X [km**2/s]
     */
    val CZ_DOT_X : Double
        get() {
            val o = __offset(102)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CZ_DOT_Y [km**2/s]
     */
    val CZ_DOT_Y : Double
        get() {
            val o = __offset(104)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CZ_DOT_Z [km**2/s]
     */
    val CZ_DOT_Z : Double
        get() {
            val o = __offset(106)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CZ_DOT_X_DOT [km**2/s**2]
     */
    val CZ_DOT_X_DOT : Double
        get() {
            val o = __offset(108)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CZ_DOT_Y_DOT [km**2/s**2]
     */
    val CZ_DOT_Y_DOT : Double
        get() {
            val o = __offset(110)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * CZ_DOT_Z_DOT [km**2/s**2]
     */
    val CZ_DOT_Z_DOT : Double
        get() {
            val o = __offset(112)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * USER_DEFINED_BIP_0044_TYPE [O, units per ICD]
     */
    val USER_DEFINED_BIP_0044_TYPE : UInt
        get() {
            val o = __offset(114)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    /**
     * USER_DEFINED_OBJECT_DESIGNATOR [O, units per ICD]
     */
    val USER_DEFINED_OBJECT_DESIGNATOR : String?
        get() {
            val o = __offset(116)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val USER_DEFINED_OBJECT_DESIGNATORAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(116, 1)
    fun USER_DEFINED_OBJECT_DESIGNATORInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 116, 1)
    /**
     * USER_DEFINED_EARTH_MODEL [O, units per ICD]
     */
    val USER_DEFINED_EARTH_MODEL : String?
        get() {
            val o = __offset(118)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val USER_DEFINED_EARTH_MODELAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(118, 1)
    fun USER_DEFINED_EARTH_MODELInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 118, 1)
    /**
     * USER_DEFINED_EPOCH_TIMESTAMP [O, units per ICD]
     */
    val USER_DEFINED_EPOCH_TIMESTAMP : Double
        get() {
            val o = __offset(120)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * USER_DEFINED_MICROSECONDS [O, units per ICD]
     */
    val USER_DEFINED_MICROSECONDS : Double
        get() {
            val o = __offset(122)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsOMM(_bb: ByteBuffer): OMM = getRootAsOMM(_bb, OMM())
        fun getRootAsOMM(_bb: ByteBuffer, obj: OMM): OMM {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun OMMBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "$OMM")
        fun createOMM(builder: FlatBufferBuilder, CCSDS_OMM_VERS: Double, CREATION_DATEOffset: Int, ORIGINATOROffset: Int, OBJECT_NAMEOffset: Int, OBJECT_IDOffset: Int, CENTER_NAMEOffset: Int, REFERENCE_FRAMEOffset: Int, REFERENCE_FRAME_EPOCHOffset: Int, TIME_SYSTEM: Byte, MEAN_ELEMENT_THEORY: Byte, COMMENTOffset: Int, EPOCHOffset: Int, SEMI_MAJOR_AXIS: Double, MEAN_MOTION: Double, ECCENTRICITY: Double, INCLINATION: Double, RA_OF_ASC_NODE: Double, ARG_OF_PERICENTER: Double, MEAN_ANOMALY: Double, GM: Double, MASS: Double, SOLAR_RAD_AREA: Double, SOLAR_RAD_COEFF: Double, DRAG_AREA: Double, DRAG_COEFF: Double, EPHEMERIS_TYPE: Byte, CLASSIFICATION_TYPEOffset: Int, NORAD_CAT_ID: UInt, ELEMENT_SET_NO: UInt, REV_AT_EPOCH: Double, BSTAR: Double, MEAN_MOTION_DOT: Double, MEAN_MOTION_DDOT: Double, COV_REFERENCE_FRAMEOffset: Int, CX_X: Double, CY_X: Double, CY_Y: Double, CZ_X: Double, CZ_Y: Double, CZ_Z: Double, CX_DOT_X: Double, CX_DOT_Y: Double, CX_DOT_Z: Double, CX_DOT_X_DOT: Double, CY_DOT_X: Double, CY_DOT_Y: Double, CY_DOT_Z: Double, CY_DOT_X_DOT: Double, CY_DOT_Y_DOT: Double, CZ_DOT_X: Double, CZ_DOT_Y: Double, CZ_DOT_Z: Double, CZ_DOT_X_DOT: Double, CZ_DOT_Y_DOT: Double, CZ_DOT_Z_DOT: Double, USER_DEFINED_BIP_0044_TYPE: UInt, USER_DEFINED_OBJECT_DESIGNATOROffset: Int, USER_DEFINED_EARTH_MODELOffset: Int, USER_DEFINED_EPOCH_TIMESTAMP: Double, USER_DEFINED_MICROSECONDS: Double) : Int {
            builder.startTable(60)
            addUSER_DEFINED_MICROSECONDS(builder, USER_DEFINED_MICROSECONDS)
            addUSER_DEFINED_EPOCH_TIMESTAMP(builder, USER_DEFINED_EPOCH_TIMESTAMP)
            addCZ_DOT_Z_DOT(builder, CZ_DOT_Z_DOT)
            addCZ_DOT_Y_DOT(builder, CZ_DOT_Y_DOT)
            addCZ_DOT_X_DOT(builder, CZ_DOT_X_DOT)
            addCZ_DOT_Z(builder, CZ_DOT_Z)
            addCZ_DOT_Y(builder, CZ_DOT_Y)
            addCZ_DOT_X(builder, CZ_DOT_X)
            addCY_DOT_Y_DOT(builder, CY_DOT_Y_DOT)
            addCY_DOT_X_DOT(builder, CY_DOT_X_DOT)
            addCY_DOT_Z(builder, CY_DOT_Z)
            addCY_DOT_Y(builder, CY_DOT_Y)
            addCY_DOT_X(builder, CY_DOT_X)
            addCX_DOT_X_DOT(builder, CX_DOT_X_DOT)
            addCX_DOT_Z(builder, CX_DOT_Z)
            addCX_DOT_Y(builder, CX_DOT_Y)
            addCX_DOT_X(builder, CX_DOT_X)
            addCZ_Z(builder, CZ_Z)
            addCZ_Y(builder, CZ_Y)
            addCZ_X(builder, CZ_X)
            addCY_Y(builder, CY_Y)
            addCY_X(builder, CY_X)
            addCX_X(builder, CX_X)
            addMEAN_MOTION_DDOT(builder, MEAN_MOTION_DDOT)
            addMEAN_MOTION_DOT(builder, MEAN_MOTION_DOT)
            addBSTAR(builder, BSTAR)
            addREV_AT_EPOCH(builder, REV_AT_EPOCH)
            addDRAG_COEFF(builder, DRAG_COEFF)
            addDRAG_AREA(builder, DRAG_AREA)
            addSOLAR_RAD_COEFF(builder, SOLAR_RAD_COEFF)
            addSOLAR_RAD_AREA(builder, SOLAR_RAD_AREA)
            addMASS(builder, MASS)
            addGM(builder, GM)
            addMEAN_ANOMALY(builder, MEAN_ANOMALY)
            addARG_OF_PERICENTER(builder, ARG_OF_PERICENTER)
            addRA_OF_ASC_NODE(builder, RA_OF_ASC_NODE)
            addINCLINATION(builder, INCLINATION)
            addECCENTRICITY(builder, ECCENTRICITY)
            addMEAN_MOTION(builder, MEAN_MOTION)
            addSEMI_MAJOR_AXIS(builder, SEMI_MAJOR_AXIS)
            addCCSDS_OMM_VERS(builder, CCSDS_OMM_VERS)
            addUSER_DEFINED_EARTH_MODEL(builder, USER_DEFINED_EARTH_MODELOffset)
            addUSER_DEFINED_OBJECT_DESIGNATOR(builder, USER_DEFINED_OBJECT_DESIGNATOROffset)
            addUSER_DEFINED_BIP_0044_TYPE(builder, USER_DEFINED_BIP_0044_TYPE)
            addCOV_REFERENCE_FRAME(builder, COV_REFERENCE_FRAMEOffset)
            addELEMENT_SET_NO(builder, ELEMENT_SET_NO)
            addNORAD_CAT_ID(builder, NORAD_CAT_ID)
            addCLASSIFICATION_TYPE(builder, CLASSIFICATION_TYPEOffset)
            addEPOCH(builder, EPOCHOffset)
            addCOMMENT(builder, COMMENTOffset)
            addREFERENCE_FRAME_EPOCH(builder, REFERENCE_FRAME_EPOCHOffset)
            addREFERENCE_FRAME(builder, REFERENCE_FRAMEOffset)
            addCENTER_NAME(builder, CENTER_NAMEOffset)
            addOBJECT_ID(builder, OBJECT_IDOffset)
            addOBJECT_NAME(builder, OBJECT_NAMEOffset)
            addORIGINATOR(builder, ORIGINATOROffset)
            addCREATION_DATE(builder, CREATION_DATEOffset)
            addEPHEMERIS_TYPE(builder, EPHEMERIS_TYPE)
            addMEAN_ELEMENT_THEORY(builder, MEAN_ELEMENT_THEORY)
            addTIME_SYSTEM(builder, TIME_SYSTEM)
            return endOMM(builder)
        }
        fun startOMM(builder: FlatBufferBuilder) = builder.startTable(60)
        fun addCCSDS_OMM_VERS(builder: FlatBufferBuilder, CCSDS_OMM_VERS: Double) = builder.addDouble(0, CCSDS_OMM_VERS, 0.0)
        fun addCREATION_DATE(builder: FlatBufferBuilder, CREATION_DATE: Int) = builder.addOffset(1, CREATION_DATE, 0)
        fun addORIGINATOR(builder: FlatBufferBuilder, ORIGINATOR: Int) = builder.addOffset(2, ORIGINATOR, 0)
        fun addOBJECT_NAME(builder: FlatBufferBuilder, OBJECT_NAME: Int) = builder.addOffset(3, OBJECT_NAME, 0)
        fun addOBJECT_ID(builder: FlatBufferBuilder, OBJECT_ID: Int) = builder.addOffset(4, OBJECT_ID, 0)
        fun addCENTER_NAME(builder: FlatBufferBuilder, CENTER_NAME: Int) = builder.addOffset(5, CENTER_NAME, 0)
        fun addREFERENCE_FRAME(builder: FlatBufferBuilder, REFERENCE_FRAME: Int) = builder.addOffset(6, REFERENCE_FRAME, 0)
        fun addREFERENCE_FRAME_EPOCH(builder: FlatBufferBuilder, REFERENCE_FRAME_EPOCH: Int) = builder.addOffset(7, REFERENCE_FRAME_EPOCH, 0)
        fun addTIME_SYSTEM(builder: FlatBufferBuilder, TIME_SYSTEM: Byte) = builder.addByte(8, TIME_SYSTEM, 11)
        fun addMEAN_ELEMENT_THEORY(builder: FlatBufferBuilder, MEAN_ELEMENT_THEORY: Byte) = builder.addByte(9, MEAN_ELEMENT_THEORY, 0)
        fun addCOMMENT(builder: FlatBufferBuilder, COMMENT: Int) = builder.addOffset(10, COMMENT, 0)
        fun addEPOCH(builder: FlatBufferBuilder, EPOCH: Int) = builder.addOffset(11, EPOCH, 0)
        fun addSEMI_MAJOR_AXIS(builder: FlatBufferBuilder, SEMI_MAJOR_AXIS: Double) = builder.addDouble(12, SEMI_MAJOR_AXIS, 0.0)
        fun addMEAN_MOTION(builder: FlatBufferBuilder, MEAN_MOTION: Double) = builder.addDouble(13, MEAN_MOTION, 0.0)
        fun addECCENTRICITY(builder: FlatBufferBuilder, ECCENTRICITY: Double) = builder.addDouble(14, ECCENTRICITY, 0.0)
        fun addINCLINATION(builder: FlatBufferBuilder, INCLINATION: Double) = builder.addDouble(15, INCLINATION, 0.0)
        fun addRA_OF_ASC_NODE(builder: FlatBufferBuilder, RA_OF_ASC_NODE: Double) = builder.addDouble(16, RA_OF_ASC_NODE, 0.0)
        fun addARG_OF_PERICENTER(builder: FlatBufferBuilder, ARG_OF_PERICENTER: Double) = builder.addDouble(17, ARG_OF_PERICENTER, 0.0)
        fun addMEAN_ANOMALY(builder: FlatBufferBuilder, MEAN_ANOMALY: Double) = builder.addDouble(18, MEAN_ANOMALY, 0.0)
        fun addGM(builder: FlatBufferBuilder, GM: Double) = builder.addDouble(19, GM, 0.0)
        fun addMASS(builder: FlatBufferBuilder, MASS: Double) = builder.addDouble(20, MASS, 0.0)
        fun addSOLAR_RAD_AREA(builder: FlatBufferBuilder, SOLAR_RAD_AREA: Double) = builder.addDouble(21, SOLAR_RAD_AREA, 0.0)
        fun addSOLAR_RAD_COEFF(builder: FlatBufferBuilder, SOLAR_RAD_COEFF: Double) = builder.addDouble(22, SOLAR_RAD_COEFF, 0.0)
        fun addDRAG_AREA(builder: FlatBufferBuilder, DRAG_AREA: Double) = builder.addDouble(23, DRAG_AREA, 0.0)
        fun addDRAG_COEFF(builder: FlatBufferBuilder, DRAG_COEFF: Double) = builder.addDouble(24, DRAG_COEFF, 0.0)
        fun addEPHEMERIS_TYPE(builder: FlatBufferBuilder, EPHEMERIS_TYPE: Byte) = builder.addByte(25, EPHEMERIS_TYPE, 1)
        fun addCLASSIFICATION_TYPE(builder: FlatBufferBuilder, CLASSIFICATION_TYPE: Int) = builder.addOffset(26, CLASSIFICATION_TYPE, 0)
        fun addNORAD_CAT_ID(builder: FlatBufferBuilder, NORAD_CAT_ID: UInt) = builder.addInt(27, NORAD_CAT_ID.toInt(), 0)
        fun addELEMENT_SET_NO(builder: FlatBufferBuilder, ELEMENT_SET_NO: UInt) = builder.addInt(28, ELEMENT_SET_NO.toInt(), 0)
        fun addREV_AT_EPOCH(builder: FlatBufferBuilder, REV_AT_EPOCH: Double) = builder.addDouble(29, REV_AT_EPOCH, 0.0)
        fun addBSTAR(builder: FlatBufferBuilder, BSTAR: Double) = builder.addDouble(30, BSTAR, 0.0)
        fun addMEAN_MOTION_DOT(builder: FlatBufferBuilder, MEAN_MOTION_DOT: Double) = builder.addDouble(31, MEAN_MOTION_DOT, 0.0)
        fun addMEAN_MOTION_DDOT(builder: FlatBufferBuilder, MEAN_MOTION_DDOT: Double) = builder.addDouble(32, MEAN_MOTION_DDOT, 0.0)
        fun addCOV_REFERENCE_FRAME(builder: FlatBufferBuilder, COV_REFERENCE_FRAME: Int) = builder.addOffset(33, COV_REFERENCE_FRAME, 0)
        fun addCX_X(builder: FlatBufferBuilder, CX_X: Double) = builder.addDouble(34, CX_X, 0.0)
        fun addCY_X(builder: FlatBufferBuilder, CY_X: Double) = builder.addDouble(35, CY_X, 0.0)
        fun addCY_Y(builder: FlatBufferBuilder, CY_Y: Double) = builder.addDouble(36, CY_Y, 0.0)
        fun addCZ_X(builder: FlatBufferBuilder, CZ_X: Double) = builder.addDouble(37, CZ_X, 0.0)
        fun addCZ_Y(builder: FlatBufferBuilder, CZ_Y: Double) = builder.addDouble(38, CZ_Y, 0.0)
        fun addCZ_Z(builder: FlatBufferBuilder, CZ_Z: Double) = builder.addDouble(39, CZ_Z, 0.0)
        fun addCX_DOT_X(builder: FlatBufferBuilder, CX_DOT_X: Double) = builder.addDouble(40, CX_DOT_X, 0.0)
        fun addCX_DOT_Y(builder: FlatBufferBuilder, CX_DOT_Y: Double) = builder.addDouble(41, CX_DOT_Y, 0.0)
        fun addCX_DOT_Z(builder: FlatBufferBuilder, CX_DOT_Z: Double) = builder.addDouble(42, CX_DOT_Z, 0.0)
        fun addCX_DOT_X_DOT(builder: FlatBufferBuilder, CX_DOT_X_DOT: Double) = builder.addDouble(43, CX_DOT_X_DOT, 0.0)
        fun addCY_DOT_X(builder: FlatBufferBuilder, CY_DOT_X: Double) = builder.addDouble(44, CY_DOT_X, 0.0)
        fun addCY_DOT_Y(builder: FlatBufferBuilder, CY_DOT_Y: Double) = builder.addDouble(45, CY_DOT_Y, 0.0)
        fun addCY_DOT_Z(builder: FlatBufferBuilder, CY_DOT_Z: Double) = builder.addDouble(46, CY_DOT_Z, 0.0)
        fun addCY_DOT_X_DOT(builder: FlatBufferBuilder, CY_DOT_X_DOT: Double) = builder.addDouble(47, CY_DOT_X_DOT, 0.0)
        fun addCY_DOT_Y_DOT(builder: FlatBufferBuilder, CY_DOT_Y_DOT: Double) = builder.addDouble(48, CY_DOT_Y_DOT, 0.0)
        fun addCZ_DOT_X(builder: FlatBufferBuilder, CZ_DOT_X: Double) = builder.addDouble(49, CZ_DOT_X, 0.0)
        fun addCZ_DOT_Y(builder: FlatBufferBuilder, CZ_DOT_Y: Double) = builder.addDouble(50, CZ_DOT_Y, 0.0)
        fun addCZ_DOT_Z(builder: FlatBufferBuilder, CZ_DOT_Z: Double) = builder.addDouble(51, CZ_DOT_Z, 0.0)
        fun addCZ_DOT_X_DOT(builder: FlatBufferBuilder, CZ_DOT_X_DOT: Double) = builder.addDouble(52, CZ_DOT_X_DOT, 0.0)
        fun addCZ_DOT_Y_DOT(builder: FlatBufferBuilder, CZ_DOT_Y_DOT: Double) = builder.addDouble(53, CZ_DOT_Y_DOT, 0.0)
        fun addCZ_DOT_Z_DOT(builder: FlatBufferBuilder, CZ_DOT_Z_DOT: Double) = builder.addDouble(54, CZ_DOT_Z_DOT, 0.0)
        fun addUSER_DEFINED_BIP_0044_TYPE(builder: FlatBufferBuilder, USER_DEFINED_BIP_0044_TYPE: UInt) = builder.addInt(55, USER_DEFINED_BIP_0044_TYPE.toInt(), 0)
        fun addUSER_DEFINED_OBJECT_DESIGNATOR(builder: FlatBufferBuilder, USER_DEFINED_OBJECT_DESIGNATOR: Int) = builder.addOffset(56, USER_DEFINED_OBJECT_DESIGNATOR, 0)
        fun addUSER_DEFINED_EARTH_MODEL(builder: FlatBufferBuilder, USER_DEFINED_EARTH_MODEL: Int) = builder.addOffset(57, USER_DEFINED_EARTH_MODEL, 0)
        fun addUSER_DEFINED_EPOCH_TIMESTAMP(builder: FlatBufferBuilder, USER_DEFINED_EPOCH_TIMESTAMP: Double) = builder.addDouble(58, USER_DEFINED_EPOCH_TIMESTAMP, 0.0)
        fun addUSER_DEFINED_MICROSECONDS(builder: FlatBufferBuilder, USER_DEFINED_MICROSECONDS: Double) = builder.addDouble(59, USER_DEFINED_MICROSECONDS, 0.0)
        fun endOMM(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishOMMBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "$OMM")
        fun finishSizePrefixedOMMBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "$OMM")
    }
}
