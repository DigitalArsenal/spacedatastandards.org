// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Time System
 */
@Suppress("unused")
class TIM : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : TIM {
        __init(_i, _bb)
        return this
    }
    val TIME_SYSTEM : Byte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsTIM(_bb: ByteBuffer): TIM = getRootAsTIM(_bb, TIM())
        fun getRootAsTIM(_bb: ByteBuffer, obj: TIM): TIM {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun TIMBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "$TIM")
        fun createTIM(builder: FlatBufferBuilder, TIME_SYSTEM: Byte) : Int {
            builder.startTable(1)
            addTIME_SYSTEM(builder, TIME_SYSTEM)
            return endTIM(builder)
        }
        fun startTIM(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addTIME_SYSTEM(builder: FlatBufferBuilder, TIME_SYSTEM: Byte) = builder.addByte(0, TIME_SYSTEM, 0)
        fun endTIM(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishTIMBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "$TIM")
        fun finishSizePrefixedTIMBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "$TIM")
    }
}
