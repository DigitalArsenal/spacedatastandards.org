// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Schema Manifest
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class SCHEMA_MANIFEST : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SCHEMA_MANIFEST {
        __init(_i, _bb)
        return this
    }
    /**
     * Version of Space Data Standards
     */
    val version : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val versionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun versionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Standards Dictionary
     */
    fun RECORDS(j: Int) : SCHEMA_STANDARD? = RECORDS(SCHEMA_STANDARD(), j)
    fun RECORDS(obj: SCHEMA_STANDARD, j: Int) : SCHEMA_STANDARD? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val RECORDSLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsSCHEMA_MANIFEST(_bb: ByteBuffer): SCHEMA_MANIFEST = getRootAsSCHEMA_MANIFEST(_bb, SCHEMA_MANIFEST())
        fun getRootAsSCHEMA_MANIFEST(_bb: ByteBuffer, obj: SCHEMA_MANIFEST): SCHEMA_MANIFEST {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun SCHEMA_MANIFESTBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "$SCM")
        fun createSCHEMA_MANIFEST(builder: FlatBufferBuilder, versionOffset: Int, RECORDSOffset: Int) : Int {
            builder.startTable(2)
            addRECORDS(builder, RECORDSOffset)
            addVersion(builder, versionOffset)
            return endSCHEMA_MANIFEST(builder)
        }
        fun startSCHEMA_MANIFEST(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addVersion(builder: FlatBufferBuilder, version: Int) = builder.addOffset(0, version, 0)
        fun addRECORDS(builder: FlatBufferBuilder, RECORDS: Int) = builder.addOffset(1, RECORDS, 0)
        fun createRecordsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRecordsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endSCHEMA_MANIFEST(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSCHEMA_MANIFESTBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "$SCM")
        fun finishSizePrefixedSCHEMA_MANIFESTBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "$SCM")
    }
}
