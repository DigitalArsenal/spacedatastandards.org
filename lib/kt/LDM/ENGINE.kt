// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Engine Details
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class ENGINE : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ENGINE {
        __init(_i, _bb)
        return this
    }
    /**
     * Engine Name
     */
    val ENGINE_NAME : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ENGINE_NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun ENGINE_NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Type of Engine
     */
    val TYPE : Byte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Thrust Produced by the Engine (in Newtons)
     */
    val THRUST : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsENGINE(_bb: ByteBuffer): ENGINE = getRootAsENGINE(_bb, ENGINE())
        fun getRootAsENGINE(_bb: ByteBuffer, obj: ENGINE): ENGINE {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createENGINE(builder: FlatBufferBuilder, ENGINE_NAMEOffset: Int, TYPE: Byte, THRUST: Double) : Int {
            builder.startTable(3)
            addTHRUST(builder, THRUST)
            addENGINE_NAME(builder, ENGINE_NAMEOffset)
            addTYPE(builder, TYPE)
            return endENGINE(builder)
        }
        fun startENGINE(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addENGINE_NAME(builder: FlatBufferBuilder, ENGINE_NAME: Int) = builder.addOffset(0, ENGINE_NAME, 0)
        fun addTYPE(builder: FlatBufferBuilder, TYPE: Byte) = builder.addByte(1, TYPE, 0)
        fun addTHRUST(builder: FlatBufferBuilder, THRUST: Double) = builder.addDouble(2, THRUST, 0.0)
        fun endENGINE(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
