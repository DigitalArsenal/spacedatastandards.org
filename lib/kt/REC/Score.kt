// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class Score : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Score {
        __init(_i, _bb)
        return this
    }
    val NORAD_CAT_ID : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val NORAD_CAT_IDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun NORAD_CAT_IDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val TYPE : Byte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val TAG : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TAGAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun TAGInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    val SCORE : Float
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsScore(_bb: ByteBuffer): Score = getRootAsScore(_bb, Score())
        fun getRootAsScore(_bb: ByteBuffer, obj: Score): Score {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createScore(builder: FlatBufferBuilder, NORAD_CAT_IDOffset: Int, TYPE: Byte, TAGOffset: Int, SCORE: Float) : Int {
            builder.startTable(4)
            addSCORE(builder, SCORE)
            addTAG(builder, TAGOffset)
            addNORAD_CAT_ID(builder, NORAD_CAT_IDOffset)
            addTYPE(builder, TYPE)
            return endScore(builder)
        }
        fun startScore(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addNORAD_CAT_ID(builder: FlatBufferBuilder, NORAD_CAT_ID: Int) = builder.addOffset(0, NORAD_CAT_ID, 0)
        fun addTYPE(builder: FlatBufferBuilder, TYPE: Byte) = builder.addByte(1, TYPE, 0)
        fun addTAG(builder: FlatBufferBuilder, TAG: Int) = builder.addOffset(2, TAG, 0)
        fun addSCORE(builder: FlatBufferBuilder, SCORE: Float) = builder.addFloat(3, SCORE, 0.0)
        fun endScore(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
