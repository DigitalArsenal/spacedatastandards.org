// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Conjunction Data Message
 */
@Suppress("unused")
class CDM : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : CDM {
        __init(_i, _bb)
        return this
    }
    /**
     * The version of the CCSDS CDM standard used
     */
    val CCSDS_CDM_VERS : Double
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The date the CDM message was created
     */
    val CREATION_DATE : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CREATION_DATEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun CREATION_DATEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The originator of the CDM message
     */
    val ORIGINATOR : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ORIGINATORAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun ORIGINATORInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The intended recipient of the CDM message
     */
    val MESSAGE_FOR : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val MESSAGE_FORAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun MESSAGE_FORInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * A unique identifier for the CDM message
     */
    val MESSAGE_ID : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val MESSAGE_IDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun MESSAGE_IDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Time of closest approach
     */
    val TCA : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TCAAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun TCAInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The miss distance between the two objects
     */
    val MISS_DISTANCE : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The relative speed between the two objects
     */
    val RELATIVE_SPEED : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The relative position R component
     */
    val RELATIVE_POSITION_R : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The relative position T component
     */
    val RELATIVE_POSITION_T : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The relative position N component
     */
    val RELATIVE_POSITION_N : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The relative velocity R component
     */
    val RELATIVE_VELOCITY_R : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The relative velocity T component
     */
    val RELATIVE_VELOCITY_T : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The relative velocity N component
     */
    val RELATIVE_VELOCITY_N : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The start time of the screening period
     */
    val START_SCREEN_PERIOD : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val START_SCREEN_PERIODAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun START_SCREEN_PERIODInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The end time of the screening period
     */
    val STOP_SCREEN_PERIOD : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val STOP_SCREEN_PERIODAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun STOP_SCREEN_PERIODInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The reference frame for the screening volume
     */
    val SCREEN_VOLUME_FRAME : RFM? get() = SCREEN_VOLUME_FRAME(RFM())
    fun SCREEN_VOLUME_FRAME(obj: RFM) : RFM? {
        val o = __offset(36)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    /**
     * The shape of the screening volume
     */
    val SCREEN_VOLUME_SHAPE : Byte
        get() {
            val o = __offset(38)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The X dimension of the screening volume
     */
    val SCREEN_VOLUME_X : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Y dimension of the screening volume
     */
    val SCREEN_VOLUME_Y : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Z dimension of the screening volume
     */
    val SCREEN_VOLUME_Z : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The time the objects entered the screening volume
     */
    val SCREEN_ENTRY_TIME : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SCREEN_ENTRY_TIMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun SCREEN_ENTRY_TIMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * The time the objects exited the screening volume
     */
    val SCREEN_EXIT_TIME : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SCREEN_EXIT_TIMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun SCREEN_EXIT_TIMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * The probability of collision between the two objects
     */
    val COLLISION_PROBABILITY : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The method used to calculate the collision probability
     */
    val COLLISION_PROBABILITY_METHOD : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val COLLISION_PROBABILITY_METHODAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun COLLISION_PROBABILITY_METHODInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * The first object in the CDM message
     */
    val OBJECT1 : CDMObject? get() = OBJECT1(CDMObject())
    fun OBJECT1(obj: CDMObject) : CDMObject? {
        val o = __offset(54)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    /**
     * The second object in the CDM message
     */
    val OBJECT2 : CDMObject? get() = OBJECT2(CDMObject())
    fun OBJECT2(obj: CDMObject) : CDMObject? {
        val o = __offset(56)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    /**
     * Data Source for the positional information for Object 1
     */
    val OBJECT1_DATASOURCE : PNM? get() = OBJECT1_DATASOURCE(PNM())
    fun OBJECT1_DATASOURCE(obj: PNM) : PNM? {
        val o = __offset(58)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    /**
     * Data Source for the positional information for Object 2
     */
    val OBJECT2_DATASOURCE : PNM? get() = OBJECT2_DATASOURCE(PNM())
    fun OBJECT2_DATASOURCE(obj: PNM) : PNM? {
        val o = __offset(60)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsCDM(_bb: ByteBuffer): CDM = getRootAsCDM(_bb, CDM())
        fun getRootAsCDM(_bb: ByteBuffer, obj: CDM): CDM {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun CDMBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "$CDM")
        fun createCDM(builder: FlatBufferBuilder, CCSDS_CDM_VERS: Double, CREATION_DATEOffset: Int, ORIGINATOROffset: Int, MESSAGE_FOROffset: Int, MESSAGE_IDOffset: Int, TCAOffset: Int, MISS_DISTANCE: Double, RELATIVE_SPEED: Double, RELATIVE_POSITION_R: Double, RELATIVE_POSITION_T: Double, RELATIVE_POSITION_N: Double, RELATIVE_VELOCITY_R: Double, RELATIVE_VELOCITY_T: Double, RELATIVE_VELOCITY_N: Double, START_SCREEN_PERIODOffset: Int, STOP_SCREEN_PERIODOffset: Int, SCREEN_VOLUME_FRAMEOffset: Int, SCREEN_VOLUME_SHAPE: Byte, SCREEN_VOLUME_X: Double, SCREEN_VOLUME_Y: Double, SCREEN_VOLUME_Z: Double, SCREEN_ENTRY_TIMEOffset: Int, SCREEN_EXIT_TIMEOffset: Int, COLLISION_PROBABILITY: Double, COLLISION_PROBABILITY_METHODOffset: Int, OBJECT1Offset: Int, OBJECT2Offset: Int, OBJECT1_DATASOURCEOffset: Int, OBJECT2_DATASOURCEOffset: Int) : Int {
            builder.startTable(29)
            addCOLLISION_PROBABILITY(builder, COLLISION_PROBABILITY)
            addSCREEN_VOLUME_Z(builder, SCREEN_VOLUME_Z)
            addSCREEN_VOLUME_Y(builder, SCREEN_VOLUME_Y)
            addSCREEN_VOLUME_X(builder, SCREEN_VOLUME_X)
            addRELATIVE_VELOCITY_N(builder, RELATIVE_VELOCITY_N)
            addRELATIVE_VELOCITY_T(builder, RELATIVE_VELOCITY_T)
            addRELATIVE_VELOCITY_R(builder, RELATIVE_VELOCITY_R)
            addRELATIVE_POSITION_N(builder, RELATIVE_POSITION_N)
            addRELATIVE_POSITION_T(builder, RELATIVE_POSITION_T)
            addRELATIVE_POSITION_R(builder, RELATIVE_POSITION_R)
            addRELATIVE_SPEED(builder, RELATIVE_SPEED)
            addMISS_DISTANCE(builder, MISS_DISTANCE)
            addCCSDS_CDM_VERS(builder, CCSDS_CDM_VERS)
            addOBJECT2_DATASOURCE(builder, OBJECT2_DATASOURCEOffset)
            addOBJECT1_DATASOURCE(builder, OBJECT1_DATASOURCEOffset)
            addOBJECT2(builder, OBJECT2Offset)
            addOBJECT1(builder, OBJECT1Offset)
            addCOLLISION_PROBABILITY_METHOD(builder, COLLISION_PROBABILITY_METHODOffset)
            addSCREEN_EXIT_TIME(builder, SCREEN_EXIT_TIMEOffset)
            addSCREEN_ENTRY_TIME(builder, SCREEN_ENTRY_TIMEOffset)
            addSCREEN_VOLUME_FRAME(builder, SCREEN_VOLUME_FRAMEOffset)
            addSTOP_SCREEN_PERIOD(builder, STOP_SCREEN_PERIODOffset)
            addSTART_SCREEN_PERIOD(builder, START_SCREEN_PERIODOffset)
            addTCA(builder, TCAOffset)
            addMESSAGE_ID(builder, MESSAGE_IDOffset)
            addMESSAGE_FOR(builder, MESSAGE_FOROffset)
            addORIGINATOR(builder, ORIGINATOROffset)
            addCREATION_DATE(builder, CREATION_DATEOffset)
            addSCREEN_VOLUME_SHAPE(builder, SCREEN_VOLUME_SHAPE)
            return endCDM(builder)
        }
        fun startCDM(builder: FlatBufferBuilder) = builder.startTable(29)
        fun addCCSDS_CDM_VERS(builder: FlatBufferBuilder, CCSDS_CDM_VERS: Double) = builder.addDouble(0, CCSDS_CDM_VERS, 0.0)
        fun addCREATION_DATE(builder: FlatBufferBuilder, CREATION_DATE: Int) = builder.addOffset(1, CREATION_DATE, 0)
        fun addORIGINATOR(builder: FlatBufferBuilder, ORIGINATOR: Int) = builder.addOffset(2, ORIGINATOR, 0)
        fun addMESSAGE_FOR(builder: FlatBufferBuilder, MESSAGE_FOR: Int) = builder.addOffset(3, MESSAGE_FOR, 0)
        fun addMESSAGE_ID(builder: FlatBufferBuilder, MESSAGE_ID: Int) = builder.addOffset(4, MESSAGE_ID, 0)
        fun addTCA(builder: FlatBufferBuilder, TCA: Int) = builder.addOffset(5, TCA, 0)
        fun addMISS_DISTANCE(builder: FlatBufferBuilder, MISS_DISTANCE: Double) = builder.addDouble(6, MISS_DISTANCE, 0.0)
        fun addRELATIVE_SPEED(builder: FlatBufferBuilder, RELATIVE_SPEED: Double) = builder.addDouble(7, RELATIVE_SPEED, 0.0)
        fun addRELATIVE_POSITION_R(builder: FlatBufferBuilder, RELATIVE_POSITION_R: Double) = builder.addDouble(8, RELATIVE_POSITION_R, 0.0)
        fun addRELATIVE_POSITION_T(builder: FlatBufferBuilder, RELATIVE_POSITION_T: Double) = builder.addDouble(9, RELATIVE_POSITION_T, 0.0)
        fun addRELATIVE_POSITION_N(builder: FlatBufferBuilder, RELATIVE_POSITION_N: Double) = builder.addDouble(10, RELATIVE_POSITION_N, 0.0)
        fun addRELATIVE_VELOCITY_R(builder: FlatBufferBuilder, RELATIVE_VELOCITY_R: Double) = builder.addDouble(11, RELATIVE_VELOCITY_R, 0.0)
        fun addRELATIVE_VELOCITY_T(builder: FlatBufferBuilder, RELATIVE_VELOCITY_T: Double) = builder.addDouble(12, RELATIVE_VELOCITY_T, 0.0)
        fun addRELATIVE_VELOCITY_N(builder: FlatBufferBuilder, RELATIVE_VELOCITY_N: Double) = builder.addDouble(13, RELATIVE_VELOCITY_N, 0.0)
        fun addSTART_SCREEN_PERIOD(builder: FlatBufferBuilder, START_SCREEN_PERIOD: Int) = builder.addOffset(14, START_SCREEN_PERIOD, 0)
        fun addSTOP_SCREEN_PERIOD(builder: FlatBufferBuilder, STOP_SCREEN_PERIOD: Int) = builder.addOffset(15, STOP_SCREEN_PERIOD, 0)
        fun addSCREEN_VOLUME_FRAME(builder: FlatBufferBuilder, SCREEN_VOLUME_FRAME: Int) = builder.addOffset(16, SCREEN_VOLUME_FRAME, 0)
        fun addSCREEN_VOLUME_SHAPE(builder: FlatBufferBuilder, SCREEN_VOLUME_SHAPE: Byte) = builder.addByte(17, SCREEN_VOLUME_SHAPE, 0)
        fun addSCREEN_VOLUME_X(builder: FlatBufferBuilder, SCREEN_VOLUME_X: Double) = builder.addDouble(18, SCREEN_VOLUME_X, 0.0)
        fun addSCREEN_VOLUME_Y(builder: FlatBufferBuilder, SCREEN_VOLUME_Y: Double) = builder.addDouble(19, SCREEN_VOLUME_Y, 0.0)
        fun addSCREEN_VOLUME_Z(builder: FlatBufferBuilder, SCREEN_VOLUME_Z: Double) = builder.addDouble(20, SCREEN_VOLUME_Z, 0.0)
        fun addSCREEN_ENTRY_TIME(builder: FlatBufferBuilder, SCREEN_ENTRY_TIME: Int) = builder.addOffset(21, SCREEN_ENTRY_TIME, 0)
        fun addSCREEN_EXIT_TIME(builder: FlatBufferBuilder, SCREEN_EXIT_TIME: Int) = builder.addOffset(22, SCREEN_EXIT_TIME, 0)
        fun addCOLLISION_PROBABILITY(builder: FlatBufferBuilder, COLLISION_PROBABILITY: Double) = builder.addDouble(23, COLLISION_PROBABILITY, 0.0)
        fun addCOLLISION_PROBABILITY_METHOD(builder: FlatBufferBuilder, COLLISION_PROBABILITY_METHOD: Int) = builder.addOffset(24, COLLISION_PROBABILITY_METHOD, 0)
        fun addOBJECT1(builder: FlatBufferBuilder, OBJECT1: Int) = builder.addOffset(25, OBJECT1, 0)
        fun addOBJECT2(builder: FlatBufferBuilder, OBJECT2: Int) = builder.addOffset(26, OBJECT2, 0)
        fun addOBJECT1_DATASOURCE(builder: FlatBufferBuilder, OBJECT1_DATASOURCE: Int) = builder.addOffset(27, OBJECT1_DATASOURCE, 0)
        fun addOBJECT2_DATASOURCE(builder: FlatBufferBuilder, OBJECT2_DATASOURCE: Int) = builder.addOffset(28, OBJECT2_DATASOURCE, 0)
        fun endCDM(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishCDMBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "$CDM")
        fun finishSizePrefixedCDMBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "$CDM")
    }
}
