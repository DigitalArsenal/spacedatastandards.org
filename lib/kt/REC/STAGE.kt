// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Stage Details
 */
@Suppress("unused")
class STAGE : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : STAGE {
        __init(_i, _bb)
        return this
    }
    /**
     * Stage Number
     */
    val STAGE_NUMBER : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Engines Used in This Stage
     */
    fun ENGINES(j: Int) : ENGINE? = ENGINES(ENGINE(), j)
    fun ENGINES(obj: ENGINE, j: Int) : ENGINE? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val ENGINESLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Fuel Type Used in This Stage
     */
    val FUEL_TYPE : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val FUEL_TYPEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun FUEL_TYPEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Thrust Produced by This Stage (in Newtons)
     */
    val THRUST : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Duration of the Burn (in Seconds)
     */
    val BURN_DURATION : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSTAGE(_bb: ByteBuffer): STAGE = getRootAsSTAGE(_bb, STAGE())
        fun getRootAsSTAGE(_bb: ByteBuffer, obj: STAGE): STAGE {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createSTAGE(builder: FlatBufferBuilder, STAGE_NUMBER: Int, ENGINESOffset: Int, FUEL_TYPEOffset: Int, THRUST: Double, BURN_DURATION: Double) : Int {
            builder.startTable(5)
            addBURN_DURATION(builder, BURN_DURATION)
            addTHRUST(builder, THRUST)
            addFUEL_TYPE(builder, FUEL_TYPEOffset)
            addENGINES(builder, ENGINESOffset)
            addSTAGE_NUMBER(builder, STAGE_NUMBER)
            return endSTAGE(builder)
        }
        fun startSTAGE(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addSTAGE_NUMBER(builder: FlatBufferBuilder, STAGE_NUMBER: Int) = builder.addInt(0, STAGE_NUMBER, 0)
        fun addENGINES(builder: FlatBufferBuilder, ENGINES: Int) = builder.addOffset(1, ENGINES, 0)
        fun createEnginesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startEnginesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addFUEL_TYPE(builder: FlatBufferBuilder, FUEL_TYPE: Int) = builder.addOffset(2, FUEL_TYPE, 0)
        fun addTHRUST(builder: FlatBufferBuilder, THRUST: Double) = builder.addDouble(3, THRUST, 0.0)
        fun addBURN_DURATION(builder: FlatBufferBuilder, BURN_DURATION: Double) = builder.addDouble(4, BURN_DURATION, 0.0)
        fun endSTAGE(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
