// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Keplerian Elements
 */
@Suppress("unused")
class keplerianElements : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : keplerianElements {
        __init(_i, _bb)
        return this
    }
    val SEMI_MAJOR_AXIS : Double
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val ECCENTRICITY : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val INCLINATION : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val RA_OF_ASC_NODE : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val ARG_OF_PERICENTER : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val ANOMALY_TYPE : Byte
        get() {
            val o = __offset(14)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val ANOMALY : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAskeplerianElements(_bb: ByteBuffer): keplerianElements = getRootAskeplerianElements(_bb, keplerianElements())
        fun getRootAskeplerianElements(_bb: ByteBuffer, obj: keplerianElements): keplerianElements {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createkeplerianElements(builder: FlatBufferBuilder, SEMI_MAJOR_AXIS: Double, ECCENTRICITY: Double, INCLINATION: Double, RA_OF_ASC_NODE: Double, ARG_OF_PERICENTER: Double, ANOMALY_TYPE: Byte, ANOMALY: Double) : Int {
            builder.startTable(7)
            addANOMALY(builder, ANOMALY)
            addARG_OF_PERICENTER(builder, ARG_OF_PERICENTER)
            addRA_OF_ASC_NODE(builder, RA_OF_ASC_NODE)
            addINCLINATION(builder, INCLINATION)
            addECCENTRICITY(builder, ECCENTRICITY)
            addSEMI_MAJOR_AXIS(builder, SEMI_MAJOR_AXIS)
            addANOMALY_TYPE(builder, ANOMALY_TYPE)
            return endkeplerianElements(builder)
        }
        fun startkeplerianElements(builder: FlatBufferBuilder) = builder.startTable(7)
        fun addSEMI_MAJOR_AXIS(builder: FlatBufferBuilder, SEMI_MAJOR_AXIS: Double) = builder.addDouble(0, SEMI_MAJOR_AXIS, 0.0)
        fun addECCENTRICITY(builder: FlatBufferBuilder, ECCENTRICITY: Double) = builder.addDouble(1, ECCENTRICITY, 0.0)
        fun addINCLINATION(builder: FlatBufferBuilder, INCLINATION: Double) = builder.addDouble(2, INCLINATION, 0.0)
        fun addRA_OF_ASC_NODE(builder: FlatBufferBuilder, RA_OF_ASC_NODE: Double) = builder.addDouble(3, RA_OF_ASC_NODE, 0.0)
        fun addARG_OF_PERICENTER(builder: FlatBufferBuilder, ARG_OF_PERICENTER: Double) = builder.addDouble(4, ARG_OF_PERICENTER, 0.0)
        fun addANOMALY_TYPE(builder: FlatBufferBuilder, ANOMALY_TYPE: Byte) = builder.addByte(5, ANOMALY_TYPE, 0)
        fun addANOMALY(builder: FlatBufferBuilder, ANOMALY: Double) = builder.addDouble(6, ANOMALY, 0.0)
        fun endkeplerianElements(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
