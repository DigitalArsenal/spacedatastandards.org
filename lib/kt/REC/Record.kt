// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class Record : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Record {
        __init(_i, _bb)
        return this
    }
    val valueType : UByte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun value(obj: Table) : Table? {
        val o = __offset(6); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    val typeName : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun typeNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsRecord(_bb: ByteBuffer): Record = getRootAsRecord(_bb, Record())
        fun getRootAsRecord(_bb: ByteBuffer, obj: Record): Record {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createRecord(builder: FlatBufferBuilder, valueType: UByte, valueOffset: Int, typeNameOffset: Int) : Int {
            builder.startTable(3)
            addTypeName(builder, typeNameOffset)
            addValue(builder, valueOffset)
            addValueType(builder, valueType)
            return endRecord(builder)
        }
        fun startRecord(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addValueType(builder: FlatBufferBuilder, valueType: UByte) = builder.addByte(0, valueType.toByte(), 0)
        fun addValue(builder: FlatBufferBuilder, value: Int) = builder.addOffset(1, value, 0)
        fun addTypeName(builder: FlatBufferBuilder, typeName: Int) = builder.addOffset(2, typeName, 0)
        fun endRecord(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
