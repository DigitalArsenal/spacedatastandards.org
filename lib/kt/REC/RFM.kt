// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class RFM : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : RFM {
        __init(_i, _bb)
        return this
    }
    val referenceFrameType : UByte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun REFERENCE_FRAME(obj: Table) : Table? {
        val o = __offset(6); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    val INDEX : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val INDEXAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun INDEXInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsRFM(_bb: ByteBuffer): RFM = getRootAsRFM(_bb, RFM())
        fun getRootAsRFM(_bb: ByteBuffer, obj: RFM): RFM {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun RFMBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "$RFM")
        fun createRFM(builder: FlatBufferBuilder, referenceFrameType: UByte, REFERENCE_FRAMEOffset: Int, INDEXOffset: Int) : Int {
            builder.startTable(3)
            addINDEX(builder, INDEXOffset)
            addREFERENCE_FRAME(builder, REFERENCE_FRAMEOffset)
            addREFERENCEFRAMEType(builder, referenceFrameType)
            return endRFM(builder)
        }
        fun startRFM(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addREFERENCEFRAMEType(builder: FlatBufferBuilder, referenceFrameType: UByte) = builder.addByte(0, referenceFrameType.toByte(), 0)
        fun addREFERENCE_FRAME(builder: FlatBufferBuilder, REFERENCE_FRAME: Int) = builder.addOffset(1, REFERENCE_FRAME, 0)
        fun addINDEX(builder: FlatBufferBuilder, INDEX: Int) = builder.addOffset(2, INDEX, 0)
        fun endRFM(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishRFMBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "$RFM")
        fun finishSizePrefixedRFMBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "$RFM")
    }
}
