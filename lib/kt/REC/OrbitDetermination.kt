// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class OrbitDetermination : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OrbitDetermination {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier for the orbit determination.
     */
    val OD_ID : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OD_IDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun OD_IDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Identifier of the previous orbit determination.
     */
    val OD_PREV_ID : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OD_PREV_IDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun OD_PREV_IDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Algorithm used for orbit determination.
     */
    val OD_ALGORITHM : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OD_ALGORITHMAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun OD_ALGORITHMInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Method used for orbit determination.
     */
    val OD_METHOD : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OD_METHODAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun OD_METHODInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Epoch of the orbit determination.
     */
    val OD_EPOCH : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OD_EPOCHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun OD_EPOCHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Time tag of the orbit determination.
     */
    val OD_TIME_TAG : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OD_TIME_TAGAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun OD_TIME_TAGInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Process noise model used.
     */
    val OD_PROCESS_NOISE : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OD_PROCESS_NOISEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun OD_PROCESS_NOISEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Covariance reduction techniques used.
     */
    val OD_COV_REDUCTION : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OD_COV_REDUCTIONAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun OD_COV_REDUCTIONInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Noise models used.
     */
    val OD_NOISE_MODELS : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OD_NOISE_MODELSAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun OD_NOISE_MODELSInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Types of observations used (e.g., RANGE, DOPPLER).
     */
    fun OD_OBSERVATIONS_TYPE(j: Int) : String? {
        val o = __offset(22)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val OD_OBSERVATIONS_TYPELength : Int
        get() {
            val o = __offset(22); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Number of observations used.
     */
    val OD_OBSERVATIONS_USED : Int
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of tracks used.
     */
    val OD_TRACKS_USED : Int
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Data weighting scheme used.
     */
    val OD_DATA_WEIGHTING : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OD_DATA_WEIGHTINGAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun OD_DATA_WEIGHTINGInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Convergence criteria used.
     */
    val OD_CONVERGENCE_CRITERIA : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OD_CONVERGENCE_CRITERIAAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun OD_CONVERGENCE_CRITERIAInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Parameters estimated during orbit determination.
     */
    fun OD_EST_PARAMETERS(j: Int) : String? {
        val o = __offset(32)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val OD_EST_PARAMETERSLength : Int
        get() {
            val o = __offset(32); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * A priori data used for orbit determination.
     */
    val OD_APRIORI_DATA : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OD_APRIORI_DATAAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun OD_APRIORI_DATAInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Residuals from the orbit determination.
     */
    val OD_RESIDUALS : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OD_RESIDUALSAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun OD_RESIDUALSInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsOrbitDetermination(_bb: ByteBuffer): OrbitDetermination = getRootAsOrbitDetermination(_bb, OrbitDetermination())
        fun getRootAsOrbitDetermination(_bb: ByteBuffer, obj: OrbitDetermination): OrbitDetermination {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createOrbitDetermination(builder: FlatBufferBuilder, OD_IDOffset: Int, OD_PREV_IDOffset: Int, OD_ALGORITHMOffset: Int, OD_METHODOffset: Int, OD_EPOCHOffset: Int, OD_TIME_TAGOffset: Int, OD_PROCESS_NOISEOffset: Int, OD_COV_REDUCTIONOffset: Int, OD_NOISE_MODELSOffset: Int, OD_OBSERVATIONS_TYPEOffset: Int, OD_OBSERVATIONS_USED: Int, OD_TRACKS_USED: Int, OD_DATA_WEIGHTINGOffset: Int, OD_CONVERGENCE_CRITERIAOffset: Int, OD_EST_PARAMETERSOffset: Int, OD_APRIORI_DATAOffset: Int, OD_RESIDUALSOffset: Int) : Int {
            builder.startTable(17)
            addOD_RESIDUALS(builder, OD_RESIDUALSOffset)
            addOD_APRIORI_DATA(builder, OD_APRIORI_DATAOffset)
            addOD_EST_PARAMETERS(builder, OD_EST_PARAMETERSOffset)
            addOD_CONVERGENCE_CRITERIA(builder, OD_CONVERGENCE_CRITERIAOffset)
            addOD_DATA_WEIGHTING(builder, OD_DATA_WEIGHTINGOffset)
            addOD_TRACKS_USED(builder, OD_TRACKS_USED)
            addOD_OBSERVATIONS_USED(builder, OD_OBSERVATIONS_USED)
            addOD_OBSERVATIONS_TYPE(builder, OD_OBSERVATIONS_TYPEOffset)
            addOD_NOISE_MODELS(builder, OD_NOISE_MODELSOffset)
            addOD_COV_REDUCTION(builder, OD_COV_REDUCTIONOffset)
            addOD_PROCESS_NOISE(builder, OD_PROCESS_NOISEOffset)
            addOD_TIME_TAG(builder, OD_TIME_TAGOffset)
            addOD_EPOCH(builder, OD_EPOCHOffset)
            addOD_METHOD(builder, OD_METHODOffset)
            addOD_ALGORITHM(builder, OD_ALGORITHMOffset)
            addOD_PREV_ID(builder, OD_PREV_IDOffset)
            addOD_ID(builder, OD_IDOffset)
            return endOrbitDetermination(builder)
        }
        fun startOrbitDetermination(builder: FlatBufferBuilder) = builder.startTable(17)
        fun addOD_ID(builder: FlatBufferBuilder, OD_ID: Int) = builder.addOffset(0, OD_ID, 0)
        fun addOD_PREV_ID(builder: FlatBufferBuilder, OD_PREV_ID: Int) = builder.addOffset(1, OD_PREV_ID, 0)
        fun addOD_ALGORITHM(builder: FlatBufferBuilder, OD_ALGORITHM: Int) = builder.addOffset(2, OD_ALGORITHM, 0)
        fun addOD_METHOD(builder: FlatBufferBuilder, OD_METHOD: Int) = builder.addOffset(3, OD_METHOD, 0)
        fun addOD_EPOCH(builder: FlatBufferBuilder, OD_EPOCH: Int) = builder.addOffset(4, OD_EPOCH, 0)
        fun addOD_TIME_TAG(builder: FlatBufferBuilder, OD_TIME_TAG: Int) = builder.addOffset(5, OD_TIME_TAG, 0)
        fun addOD_PROCESS_NOISE(builder: FlatBufferBuilder, OD_PROCESS_NOISE: Int) = builder.addOffset(6, OD_PROCESS_NOISE, 0)
        fun addOD_COV_REDUCTION(builder: FlatBufferBuilder, OD_COV_REDUCTION: Int) = builder.addOffset(7, OD_COV_REDUCTION, 0)
        fun addOD_NOISE_MODELS(builder: FlatBufferBuilder, OD_NOISE_MODELS: Int) = builder.addOffset(8, OD_NOISE_MODELS, 0)
        fun addOD_OBSERVATIONS_TYPE(builder: FlatBufferBuilder, OD_OBSERVATIONS_TYPE: Int) = builder.addOffset(9, OD_OBSERVATIONS_TYPE, 0)
        fun createOdObservationsTypeVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startOdObservationsTypeVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOD_OBSERVATIONS_USED(builder: FlatBufferBuilder, OD_OBSERVATIONS_USED: Int) = builder.addInt(10, OD_OBSERVATIONS_USED, 0)
        fun addOD_TRACKS_USED(builder: FlatBufferBuilder, OD_TRACKS_USED: Int) = builder.addInt(11, OD_TRACKS_USED, 0)
        fun addOD_DATA_WEIGHTING(builder: FlatBufferBuilder, OD_DATA_WEIGHTING: Int) = builder.addOffset(12, OD_DATA_WEIGHTING, 0)
        fun addOD_CONVERGENCE_CRITERIA(builder: FlatBufferBuilder, OD_CONVERGENCE_CRITERIA: Int) = builder.addOffset(13, OD_CONVERGENCE_CRITERIA, 0)
        fun addOD_EST_PARAMETERS(builder: FlatBufferBuilder, OD_EST_PARAMETERS: Int) = builder.addOffset(14, OD_EST_PARAMETERS, 0)
        fun createOdEstParametersVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startOdEstParametersVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOD_APRIORI_DATA(builder: FlatBufferBuilder, OD_APRIORI_DATA: Int) = builder.addOffset(15, OD_APRIORI_DATA, 0)
        fun addOD_RESIDUALS(builder: FlatBufferBuilder, OD_RESIDUALS: Int) = builder.addOffset(16, OD_RESIDUALS, 0)
        fun endOrbitDetermination(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
