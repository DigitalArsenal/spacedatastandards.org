// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class Perturbations : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Perturbations {
        __init(_i, _bb)
        return this
    }
    /**
     * Comments in the Perturbations section.
     */
    fun COMMENT(j: Int) : String? {
        val o = __offset(4)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val COMMENTLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Atmospheric model used.
     */
    val ATMOSPHERIC_MODEL : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ATMOSPHERIC_MODELAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun ATMOSPHERIC_MODELInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Gravity model used.
     */
    val GRAVITY_MODEL : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val GRAVITY_MODELAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun GRAVITY_MODELInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Degree of the gravity model.
     */
    val GRAVITY_DEGREE : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Order of the gravity model.
     */
    val GRAVITY_ORDER : Int
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Gravitational constant times the mass of the central body.
     */
    val GM : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * List of celestial bodies included in n-body perturbations.
     */
    fun N_BODY_PERTURBATIONS(j: Int) : String? {
        val o = __offset(16)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val N_BODY_PERTURBATIONSLength : Int
        get() {
            val o = __offset(16); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Ocean tides model used.
     */
    val OCEAN_TIDES_MODEL : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OCEAN_TIDES_MODELAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun OCEAN_TIDES_MODELInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Solid tides model used.
     */
    val SOLID_TIDES_MODEL : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SOLID_TIDES_MODELAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun SOLID_TIDES_MODELInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Atmospheric tides model used.
     */
    val ATMOSPHERIC_TIDES_MODEL : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ATMOSPHERIC_TIDES_MODELAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun ATMOSPHERIC_TIDES_MODELInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Geopotential model used.
     */
    val GEOPOTENTIAL_MODEL : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val GEOPOTENTIAL_MODELAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun GEOPOTENTIAL_MODELInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Solar radiation pressure model used.
     */
    val SOLAR_RAD_PRESSURE : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SOLAR_RAD_PRESSUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun SOLAR_RAD_PRESSUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Albedo model used.
     */
    val ALBEDO : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ALBEDOAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun ALBEDOInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Thermal model used.
     */
    val THERMAL : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val THERMALAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun THERMALInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Relativity model used.
     */
    val RELATIVITY : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val RELATIVITYAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun RELATIVITYInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Atmospheric drag model used.
     */
    val ATMOSPHERIC_DRAG : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ATMOSPHERIC_DRAGAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun ATMOSPHERIC_DRAGInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Fixed geomagnetic Kp index used.
     */
    val FIXED_GEOMAG_KP : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fixed F10.7 solar flux value used.
     */
    val FIXED_F10P7 : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fixed mean F10.7 solar flux value used.
     */
    val FIXED_F10P7_MEAN : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsPerturbations(_bb: ByteBuffer): Perturbations = getRootAsPerturbations(_bb, Perturbations())
        fun getRootAsPerturbations(_bb: ByteBuffer, obj: Perturbations): Perturbations {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createPerturbations(builder: FlatBufferBuilder, COMMENTOffset: Int, ATMOSPHERIC_MODELOffset: Int, GRAVITY_MODELOffset: Int, GRAVITY_DEGREE: Int, GRAVITY_ORDER: Int, GM: Double, N_BODY_PERTURBATIONSOffset: Int, OCEAN_TIDES_MODELOffset: Int, SOLID_TIDES_MODELOffset: Int, ATMOSPHERIC_TIDES_MODELOffset: Int, GEOPOTENTIAL_MODELOffset: Int, SOLAR_RAD_PRESSUREOffset: Int, ALBEDOOffset: Int, THERMALOffset: Int, RELATIVITYOffset: Int, ATMOSPHERIC_DRAGOffset: Int, FIXED_GEOMAG_KP: Double, FIXED_F10P7: Double, FIXED_F10P7_MEAN: Double) : Int {
            builder.startTable(19)
            addFIXED_F10P7_MEAN(builder, FIXED_F10P7_MEAN)
            addFIXED_F10P7(builder, FIXED_F10P7)
            addFIXED_GEOMAG_KP(builder, FIXED_GEOMAG_KP)
            addGM(builder, GM)
            addATMOSPHERIC_DRAG(builder, ATMOSPHERIC_DRAGOffset)
            addRELATIVITY(builder, RELATIVITYOffset)
            addTHERMAL(builder, THERMALOffset)
            addALBEDO(builder, ALBEDOOffset)
            addSOLAR_RAD_PRESSURE(builder, SOLAR_RAD_PRESSUREOffset)
            addGEOPOTENTIAL_MODEL(builder, GEOPOTENTIAL_MODELOffset)
            addATMOSPHERIC_TIDES_MODEL(builder, ATMOSPHERIC_TIDES_MODELOffset)
            addSOLID_TIDES_MODEL(builder, SOLID_TIDES_MODELOffset)
            addOCEAN_TIDES_MODEL(builder, OCEAN_TIDES_MODELOffset)
            addN_BODY_PERTURBATIONS(builder, N_BODY_PERTURBATIONSOffset)
            addGRAVITY_ORDER(builder, GRAVITY_ORDER)
            addGRAVITY_DEGREE(builder, GRAVITY_DEGREE)
            addGRAVITY_MODEL(builder, GRAVITY_MODELOffset)
            addATMOSPHERIC_MODEL(builder, ATMOSPHERIC_MODELOffset)
            addCOMMENT(builder, COMMENTOffset)
            return endPerturbations(builder)
        }
        fun startPerturbations(builder: FlatBufferBuilder) = builder.startTable(19)
        fun addCOMMENT(builder: FlatBufferBuilder, COMMENT: Int) = builder.addOffset(0, COMMENT, 0)
        fun createCommentVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCommentVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addATMOSPHERIC_MODEL(builder: FlatBufferBuilder, ATMOSPHERIC_MODEL: Int) = builder.addOffset(1, ATMOSPHERIC_MODEL, 0)
        fun addGRAVITY_MODEL(builder: FlatBufferBuilder, GRAVITY_MODEL: Int) = builder.addOffset(2, GRAVITY_MODEL, 0)
        fun addGRAVITY_DEGREE(builder: FlatBufferBuilder, GRAVITY_DEGREE: Int) = builder.addInt(3, GRAVITY_DEGREE, 0)
        fun addGRAVITY_ORDER(builder: FlatBufferBuilder, GRAVITY_ORDER: Int) = builder.addInt(4, GRAVITY_ORDER, 0)
        fun addGM(builder: FlatBufferBuilder, GM: Double) = builder.addDouble(5, GM, 0.0)
        fun addN_BODY_PERTURBATIONS(builder: FlatBufferBuilder, N_BODY_PERTURBATIONS: Int) = builder.addOffset(6, N_BODY_PERTURBATIONS, 0)
        fun createNBodyPerturbationsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startNBodyPerturbationsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOCEAN_TIDES_MODEL(builder: FlatBufferBuilder, OCEAN_TIDES_MODEL: Int) = builder.addOffset(7, OCEAN_TIDES_MODEL, 0)
        fun addSOLID_TIDES_MODEL(builder: FlatBufferBuilder, SOLID_TIDES_MODEL: Int) = builder.addOffset(8, SOLID_TIDES_MODEL, 0)
        fun addATMOSPHERIC_TIDES_MODEL(builder: FlatBufferBuilder, ATMOSPHERIC_TIDES_MODEL: Int) = builder.addOffset(9, ATMOSPHERIC_TIDES_MODEL, 0)
        fun addGEOPOTENTIAL_MODEL(builder: FlatBufferBuilder, GEOPOTENTIAL_MODEL: Int) = builder.addOffset(10, GEOPOTENTIAL_MODEL, 0)
        fun addSOLAR_RAD_PRESSURE(builder: FlatBufferBuilder, SOLAR_RAD_PRESSURE: Int) = builder.addOffset(11, SOLAR_RAD_PRESSURE, 0)
        fun addALBEDO(builder: FlatBufferBuilder, ALBEDO: Int) = builder.addOffset(12, ALBEDO, 0)
        fun addTHERMAL(builder: FlatBufferBuilder, THERMAL: Int) = builder.addOffset(13, THERMAL, 0)
        fun addRELATIVITY(builder: FlatBufferBuilder, RELATIVITY: Int) = builder.addOffset(14, RELATIVITY, 0)
        fun addATMOSPHERIC_DRAG(builder: FlatBufferBuilder, ATMOSPHERIC_DRAG: Int) = builder.addOffset(15, ATMOSPHERIC_DRAG, 0)
        fun addFIXED_GEOMAG_KP(builder: FlatBufferBuilder, FIXED_GEOMAG_KP: Double) = builder.addDouble(16, FIXED_GEOMAG_KP, 0.0)
        fun addFIXED_F10P7(builder: FlatBufferBuilder, FIXED_F10P7: Double) = builder.addDouble(17, FIXED_F10P7, 0.0)
        fun addFIXED_F10P7_MEAN(builder: FlatBufferBuilder, FIXED_F10P7_MEAN: Double) = builder.addDouble(18, FIXED_F10P7_MEAN, 0.0)
        fun endPerturbations(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
