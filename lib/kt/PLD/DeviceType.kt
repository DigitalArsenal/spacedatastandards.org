// automatically generated by the FlatBuffers compiler, do not modify

@Suppress("unused")
class DeviceType private constructor() {
    companion object {
        /**
         * Basic or undefined sensor type
         */
        const val UNKNOWN: Byte = 0
        /**
         * General optical sensors
         */
        const val OPTICAL: Byte = 1
        /**
         * Detects infrared radiation
         */
        const val INFRARED_SENSOR: Byte = 2
        /**
         * Sensitive to ultraviolet light
         */
        const val ULTRAVIOLET_SENSOR: Byte = 3
        /**
         * For X-ray detection
         */
        const val X_RAY_SENSOR: Byte = 4
        /**
         * For gamma-ray detection
         */
        const val GAMMA_RAY_SENSOR: Byte = 5
        /**
         * Basic radar systems
         */
        const val RADAR: Byte = 6
        /**
         * Advanced radar with phased array technology
         */
        const val PHASED_ARRAY_RADAR: Byte = 7
        /**
         * For high-resolution imaging
         */
        const val SYNTHETIC_APERTURE_RADAR: Byte = 8
        /**
         * For astronomical observations using bistatic setup
         */
        const val BISTATIC_RADIO_TELESCOPE: Byte = 9
        /**
         * For radio astronomy
         */
        const val RADIO_TELESCOPE: Byte = 10
        /**
         * For atmospheric studies
         */
        const val ATMOSPHERIC_SENSOR: Byte = 11
        /**
         * For observing space weather phenomena
         */
        const val SPACE_WEATHER_SENSOR: Byte = 12
        /**
         * General environmental monitoring
         */
        const val ENVIRONMENTAL_SENSOR: Byte = 13
        /**
         * For measuring seismic activities
         */
        const val SEISMIC_SENSOR: Byte = 14
        /**
         * For gravity measurements
         */
        const val GRAVIMETRIC_SENSOR: Byte = 15
        /**
         * For magnetic field detection
         */
        const val MAGNETIC_SENSOR: Byte = 16
        /**
         * For electromagnetic field analysis
         */
        const val ELECTROMAGNETIC_SENSOR: Byte = 17
        /**
         * For temperature and heat detection
         */
        const val THERMAL_SENSOR: Byte = 18
        /**
         * For detecting chemicals and substances
         */
        const val CHEMICAL_SENSOR: Byte = 19
        /**
         * For biological research and detection
         */
        const val BIOLOGICAL_SENSOR: Byte = 20
        /**
         * For detecting ionizing radiation
         */
        const val RADIATION_SENSOR: Byte = 21
        /**
         * For detecting subatomic particles
         */
        const val PARTICLE_DETECTOR: Byte = 22
        /**
         * Light Detection and Ranging
         */
        const val LIDAR: Byte = 23
        /**
         * Sound Navigation and Ranging
         */
        const val SONAR: Byte = 24
        /**
         * General telescopes for astronomical observations
         */
        const val TELESCOPE: Byte = 25
        /**
         * For spectral analysis
         */
        const val SPECTROSCOPIC_SENSOR: Byte = 26
        /**
         * For measuring light intensity
         */
        const val PHOTOMETRIC_SENSOR: Byte = 27
        /**
         * For analyzing polarization of light
         */
        const val POLARIMETRIC_SENSOR: Byte = 28
        /**
         * For detailed imaging using interference
         */
        const val INTERFEROMETRIC_SENSOR: Byte = 29
        /**
         * Capturing image data at multiple wavelengths
         */
        const val MULTISPECTRAL_SENSOR: Byte = 30
        /**
         * Advanced imaging across many spectral bands
         */
        const val HYPERSPECTRAL_SENSOR: Byte = 31
        /**
         * For Global Positioning System reception
         */
        const val GPS_RECEIVER: Byte = 32
        /**
         * Standard radio communication device
         */
        const val RADIO_COMMUNICATIONS: Byte = 33
        /**
         * Advanced laser communication system
         */
        const val LASER_COMMUNICATIONS: Byte = 34
        /**
         * Satellite communication system
         */
        const val SATELLITE_COMMUNICATIONS: Byte = 35
        /**
         * Device for laser-based experiments and measurements
         */
        const val LASER_INSTRUMENT: Byte = 36
        /**
         * Radio frequency analysis and measurement device
         */
        const val RF_ANALYZER: Byte = 37
        /**
         * Device for ionospheric research
         */
        const val IONOSPHERIC_SENSOR: Byte = 38
        /**
         * Device for laser-based imaging
         */
        const val LASER_IMAGING: Byte = 39
        /**
         * Advanced optical telescope
         */
        const val OPTICAL_TELESCOPE: Byte = 40
        /**
         * Device for high-resolution optical observations
         */
        const val HIGH_RESOLUTION_OPTICAL: Byte = 41
        const val RADIO: Byte = 42
        /**
         * Microwave communication device
         */
        const val MICROWAVE_TRANSMITTER: Byte = 43
        /**
         * Device for radio frequency monitoring
         */
        const val RF_MONITOR: Byte = 44
        /**
         * High-frequency radio communication device
         */
        const val HF_RADIO_COMMUNICATIONS: Byte = 45
    }
}
