// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Country Identity Message
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class CTR : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : CTR {
        __init(_i, _bb)
        return this
    }
    /**
     * ISO 3166 Numeric code
     */
    val ID : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val IDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun IDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Country name
     */
    val NAME : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * GENC code
     */
    val GENC_CODE : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val GENC_CODEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun GENC_CODEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * ISO 3166 Alpha-2 code
     */
    val ALPHA_2_CODE : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ALPHA_2_CODEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun ALPHA_2_CODEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * ISO 3166 Alpha-3 code
     */
    val ALPHA_3_CODE : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ALPHA_3_CODEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun ALPHA_3_CODEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Stanag code
     */
    val STANAG_CODE : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val STANAG_CODEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun STANAG_CODEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Internet country code top-level domain (ccTLD)
     */
    val INTERNET_CCTLD : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val INTERNET_CCTLDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun INTERNET_CCTLDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Additional comments
     */
    val COMMENT : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val COMMENTAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun COMMENTInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsCTR(_bb: ByteBuffer): CTR = getRootAsCTR(_bb, CTR())
        fun getRootAsCTR(_bb: ByteBuffer, obj: CTR): CTR {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createCTR(builder: FlatBufferBuilder, IDOffset: Int, NAMEOffset: Int, GENC_CODEOffset: Int, ALPHA_2_CODEOffset: Int, ALPHA_3_CODEOffset: Int, STANAG_CODEOffset: Int, INTERNET_CCTLDOffset: Int, COMMENTOffset: Int) : Int {
            builder.startTable(8)
            addCOMMENT(builder, COMMENTOffset)
            addINTERNET_CCTLD(builder, INTERNET_CCTLDOffset)
            addSTANAG_CODE(builder, STANAG_CODEOffset)
            addALPHA_3_CODE(builder, ALPHA_3_CODEOffset)
            addALPHA_2_CODE(builder, ALPHA_2_CODEOffset)
            addGENC_CODE(builder, GENC_CODEOffset)
            addNAME(builder, NAMEOffset)
            addID(builder, IDOffset)
            return endCTR(builder)
        }
        fun startCTR(builder: FlatBufferBuilder) = builder.startTable(8)
        fun addID(builder: FlatBufferBuilder, ID: Int) = builder.addOffset(0, ID, 0)
        fun addNAME(builder: FlatBufferBuilder, NAME: Int) = builder.addOffset(1, NAME, 0)
        fun addGENC_CODE(builder: FlatBufferBuilder, GENC_CODE: Int) = builder.addOffset(2, GENC_CODE, 0)
        fun addALPHA_2_CODE(builder: FlatBufferBuilder, ALPHA_2_CODE: Int) = builder.addOffset(3, ALPHA_2_CODE, 0)
        fun addALPHA_3_CODE(builder: FlatBufferBuilder, ALPHA_3_CODE: Int) = builder.addOffset(4, ALPHA_3_CODE, 0)
        fun addSTANAG_CODE(builder: FlatBufferBuilder, STANAG_CODE: Int) = builder.addOffset(5, STANAG_CODE, 0)
        fun addINTERNET_CCTLD(builder: FlatBufferBuilder, INTERNET_CCTLD: Int) = builder.addOffset(6, INTERNET_CCTLD, 0)
        fun addCOMMENT(builder: FlatBufferBuilder, COMMENT: Int) = builder.addOffset(7, COMMENT, 0)
        fun endCTR(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
