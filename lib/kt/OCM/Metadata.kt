// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class Metadata : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Metadata {
        __init(_i, _bb)
        return this
    }
    /**
     * Comments in the Metadata section.
     */
    fun COMMENT(j: Int) : String? {
        val o = __offset(4)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val COMMENTLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Free-text field containing the name of the object.
     */
    val OBJECT_NAME : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OBJECT_NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun OBJECT_NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * International designator for the object as assigned by COSPAR.
     */
    val INTERNATIONAL_DESIGNATOR : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val INTERNATIONAL_DESIGNATORAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun INTERNATIONAL_DESIGNATORInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Satellite catalog source from which 'OBJECT_DESIGNATOR' was obtained.
     */
    val CATALOG_NAME : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CATALOG_NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun CATALOG_NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Unique satellite identification designator from the catalog.
     */
    val OBJECT_DESIGNATOR : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OBJECT_DESIGNATORAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun OBJECT_DESIGNATORInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Alternate names of this space object.
     */
    fun ALTERNATE_NAMES(j: Int) : String? {
        val o = __offset(14)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val ALTERNATE_NAMESLength : Int
        get() {
            val o = __offset(14); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Originator or programmatic Point-of-Contact (PoC) for OCM.
     */
    val ORIGINATOR_POC : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ORIGINATOR_POCAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun ORIGINATOR_POCInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Contact position of the originator PoC.
     */
    val ORIGINATOR_POSITION : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ORIGINATOR_POSITIONAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun ORIGINATOR_POSITIONInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Originator PoC phone number.
     */
    val ORIGINATOR_PHONE : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ORIGINATOR_PHONEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun ORIGINATOR_PHONEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Originator PoC email address.
     */
    val ORIGINATOR_EMAIL : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ORIGINATOR_EMAILAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun ORIGINATOR_EMAILInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Originator's physical address information.
     */
    val ORIGINATOR_ADDRESS : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ORIGINATOR_ADDRESSAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun ORIGINATOR_ADDRESSInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Creating agency or operator for technical contact.
     */
    val TECH_ORG : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TECH_ORGAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun TECH_ORGInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Technical Point-of-Contact (PoC) for OCM.
     */
    val TECH_POC : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TECH_POCAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun TECH_POCInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Contact position of the technical PoC.
     */
    val TECH_POSITION : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TECH_POSITIONAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun TECH_POSITIONInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Technical PoC phone number.
     */
    val TECH_PHONE : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TECH_PHONEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun TECH_PHONEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Technical PoC email address.
     */
    val TECH_EMAIL : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TECH_EMAILAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun TECH_EMAILInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Technical PoC physical address information.
     */
    val TECH_ADDRESS : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TECH_ADDRESSAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun TECH_ADDRESSInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * ID that uniquely identifies the previous message from this originator.
     */
    val PREVIOUS_MESSAGE_ID : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val PREVIOUS_MESSAGE_IDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun PREVIOUS_MESSAGE_IDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * ID that uniquely identifies the next message from this originator.
     */
    val NEXT_MESSAGE_ID : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val NEXT_MESSAGE_IDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun NEXT_MESSAGE_IDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Unique identifier of Attitude Data Messages linked to this OCM.
     */
    val ADM_MSG_LINK : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ADM_MSG_LINKAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun ADM_MSG_LINKInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Unique identifier of Conjunction Data Messages linked to this OCM.
     */
    val CDM_MSG_LINK : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CDM_MSG_LINKAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun CDM_MSG_LINKInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Unique identifier of Pointing Request Messages linked to this OCM.
     */
    val PRM_MSG_LINK : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val PRM_MSG_LINKAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun PRM_MSG_LINKInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Unique identifier of Reentry Data Messages linked to this OCM.
     */
    val RDM_MSG_LINK : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val RDM_MSG_LINKAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun RDM_MSG_LINKInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * List of Tracking Data Messages upon which this orbit determination is based.
     */
    fun TDM_MSG_LINK(j: Int) : String? {
        val o = __offset(50)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val TDM_MSG_LINKLength : Int
        get() {
            val o = __offset(50); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Operator of the space object.
     */
    val OPERATOR : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OPERATORAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun OPERATORInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Owner of the space object.
     */
    val OWNER : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OWNERAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun OWNERInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Country where the space object owner is based.
     */
    val COUNTRY : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val COUNTRYAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun COUNTRYInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Name of the constellation to which this space object belongs.
     */
    val CONSTELLATION : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CONSTELLATIONAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun CONSTELLATIONInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Specification of the type of object (e.g., PAYLOAD, ROCKET BODY, DEBRIS).
     */
    val OBJECT_TYPE : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OBJECT_TYPEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun OBJECT_TYPEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Time system for all absolute time stamps in this OCM, including EPOCH_TZERO.
     */
    val TIME_SYSTEM : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TIME_SYSTEMAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun TIME_SYSTEMInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Default epoch to which all relative times are referenced in data blocks.
     */
    val EPOCH_TZERO : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val EPOCH_TZEROAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun EPOCH_TZEROInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Specification of the operational status of the space object.
     */
    val OPS_STATUS : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OPS_STATUSAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun OPS_STATUSInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Specification of the type of orbit (e.g., GEO, LEO).
     */
    val ORBIT_CATEGORY : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ORBIT_CATEGORYAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun ORBIT_CATEGORYInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * List of elements of information data blocks included in this message.
     */
    fun OCM_DATA_ELEMENTS(j: Int) : String? {
        val o = __offset(70)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val OCM_DATA_ELEMENTSLength : Int
        get() {
            val o = __offset(70); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Number of spacecraft clock counts at EPOCH_TZERO (used if TIME_SYSTEM is SCLK).
     */
    val SCLK_OFFSET_AT_EPOCH : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Number of clock seconds occurring during one SI second (used if TIME_SYSTEM is SCLK).
     */
    val SCLK_SEC_PER_SI_SEC : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Creation epoch of the previous message from this originator.
     */
    val PREVIOUS_MESSAGE_EPOCH : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val PREVIOUS_MESSAGE_EPOCHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun PREVIOUS_MESSAGE_EPOCHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Anticipated (or actual) epoch of the next message from this originator.
     */
    val NEXT_MESSAGE_EPOCH : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val NEXT_MESSAGE_EPOCHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun NEXT_MESSAGE_EPOCHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * Time of the earliest data contained in the OCM.
     */
    val START_TIME : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val START_TIMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun START_TIMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * Time of the latest data contained in the OCM.
     */
    val STOP_TIME : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val STOP_TIMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun STOP_TIMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Span of time that the OCM covers, measured in days.
     */
    val TIME_SPAN : Double
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Difference (TAI - UTC) in seconds at EPOCH_TZERO.
     */
    val TAIMUTC_AT_TZERO : Double
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Epoch of next leap second.
     */
    val NEXT_LEAP_EPOCH : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val NEXT_LEAP_EPOCHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun NEXT_LEAP_EPOCHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * Difference (TAI - UTC) in seconds at NEXT_LEAP_EPOCH.
     */
    val NEXT_LEAP_TAIMUTC : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Difference (UT1 - UTC) in seconds at EPOCH_TZERO.
     */
    val UT1MUTC_AT_TZERO : Double
        get() {
            val o = __offset(92)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Source and version of Earth Orientation Parameters used.
     */
    val EOP_SOURCE : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val EOP_SOURCEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun EOP_SOURCEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * Method used to select or interpolate sequential EOP data.
     */
    val INTERP_METHOD_EOP : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val INTERP_METHOD_EOPAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun INTERP_METHOD_EOPInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Source and version of celestial body ephemeris data used.
     */
    val CELESTIAL_SOURCE : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CELESTIAL_SOURCEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun CELESTIAL_SOURCEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsMetadata(_bb: ByteBuffer): Metadata = getRootAsMetadata(_bb, Metadata())
        fun getRootAsMetadata(_bb: ByteBuffer, obj: Metadata): Metadata {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createMetadata(builder: FlatBufferBuilder, COMMENTOffset: Int, OBJECT_NAMEOffset: Int, INTERNATIONAL_DESIGNATOROffset: Int, CATALOG_NAMEOffset: Int, OBJECT_DESIGNATOROffset: Int, ALTERNATE_NAMESOffset: Int, ORIGINATOR_POCOffset: Int, ORIGINATOR_POSITIONOffset: Int, ORIGINATOR_PHONEOffset: Int, ORIGINATOR_EMAILOffset: Int, ORIGINATOR_ADDRESSOffset: Int, TECH_ORGOffset: Int, TECH_POCOffset: Int, TECH_POSITIONOffset: Int, TECH_PHONEOffset: Int, TECH_EMAILOffset: Int, TECH_ADDRESSOffset: Int, PREVIOUS_MESSAGE_IDOffset: Int, NEXT_MESSAGE_IDOffset: Int, ADM_MSG_LINKOffset: Int, CDM_MSG_LINKOffset: Int, PRM_MSG_LINKOffset: Int, RDM_MSG_LINKOffset: Int, TDM_MSG_LINKOffset: Int, OPERATOROffset: Int, OWNEROffset: Int, COUNTRYOffset: Int, CONSTELLATIONOffset: Int, OBJECT_TYPEOffset: Int, TIME_SYSTEMOffset: Int, EPOCH_TZEROOffset: Int, OPS_STATUSOffset: Int, ORBIT_CATEGORYOffset: Int, OCM_DATA_ELEMENTSOffset: Int, SCLK_OFFSET_AT_EPOCH: Double, SCLK_SEC_PER_SI_SEC: Double, PREVIOUS_MESSAGE_EPOCHOffset: Int, NEXT_MESSAGE_EPOCHOffset: Int, START_TIMEOffset: Int, STOP_TIMEOffset: Int, TIME_SPAN: Double, TAIMUTC_AT_TZERO: Double, NEXT_LEAP_EPOCHOffset: Int, NEXT_LEAP_TAIMUTC: Double, UT1MUTC_AT_TZERO: Double, EOP_SOURCEOffset: Int, INTERP_METHOD_EOPOffset: Int, CELESTIAL_SOURCEOffset: Int) : Int {
            builder.startTable(48)
            addUT1MUTC_AT_TZERO(builder, UT1MUTC_AT_TZERO)
            addNEXT_LEAP_TAIMUTC(builder, NEXT_LEAP_TAIMUTC)
            addTAIMUTC_AT_TZERO(builder, TAIMUTC_AT_TZERO)
            addTIME_SPAN(builder, TIME_SPAN)
            addSCLK_SEC_PER_SI_SEC(builder, SCLK_SEC_PER_SI_SEC)
            addSCLK_OFFSET_AT_EPOCH(builder, SCLK_OFFSET_AT_EPOCH)
            addCELESTIAL_SOURCE(builder, CELESTIAL_SOURCEOffset)
            addINTERP_METHOD_EOP(builder, INTERP_METHOD_EOPOffset)
            addEOP_SOURCE(builder, EOP_SOURCEOffset)
            addNEXT_LEAP_EPOCH(builder, NEXT_LEAP_EPOCHOffset)
            addSTOP_TIME(builder, STOP_TIMEOffset)
            addSTART_TIME(builder, START_TIMEOffset)
            addNEXT_MESSAGE_EPOCH(builder, NEXT_MESSAGE_EPOCHOffset)
            addPREVIOUS_MESSAGE_EPOCH(builder, PREVIOUS_MESSAGE_EPOCHOffset)
            addOCM_DATA_ELEMENTS(builder, OCM_DATA_ELEMENTSOffset)
            addORBIT_CATEGORY(builder, ORBIT_CATEGORYOffset)
            addOPS_STATUS(builder, OPS_STATUSOffset)
            addEPOCH_TZERO(builder, EPOCH_TZEROOffset)
            addTIME_SYSTEM(builder, TIME_SYSTEMOffset)
            addOBJECT_TYPE(builder, OBJECT_TYPEOffset)
            addCONSTELLATION(builder, CONSTELLATIONOffset)
            addCOUNTRY(builder, COUNTRYOffset)
            addOWNER(builder, OWNEROffset)
            addOPERATOR(builder, OPERATOROffset)
            addTDM_MSG_LINK(builder, TDM_MSG_LINKOffset)
            addRDM_MSG_LINK(builder, RDM_MSG_LINKOffset)
            addPRM_MSG_LINK(builder, PRM_MSG_LINKOffset)
            addCDM_MSG_LINK(builder, CDM_MSG_LINKOffset)
            addADM_MSG_LINK(builder, ADM_MSG_LINKOffset)
            addNEXT_MESSAGE_ID(builder, NEXT_MESSAGE_IDOffset)
            addPREVIOUS_MESSAGE_ID(builder, PREVIOUS_MESSAGE_IDOffset)
            addTECH_ADDRESS(builder, TECH_ADDRESSOffset)
            addTECH_EMAIL(builder, TECH_EMAILOffset)
            addTECH_PHONE(builder, TECH_PHONEOffset)
            addTECH_POSITION(builder, TECH_POSITIONOffset)
            addTECH_POC(builder, TECH_POCOffset)
            addTECH_ORG(builder, TECH_ORGOffset)
            addORIGINATOR_ADDRESS(builder, ORIGINATOR_ADDRESSOffset)
            addORIGINATOR_EMAIL(builder, ORIGINATOR_EMAILOffset)
            addORIGINATOR_PHONE(builder, ORIGINATOR_PHONEOffset)
            addORIGINATOR_POSITION(builder, ORIGINATOR_POSITIONOffset)
            addORIGINATOR_POC(builder, ORIGINATOR_POCOffset)
            addALTERNATE_NAMES(builder, ALTERNATE_NAMESOffset)
            addOBJECT_DESIGNATOR(builder, OBJECT_DESIGNATOROffset)
            addCATALOG_NAME(builder, CATALOG_NAMEOffset)
            addINTERNATIONAL_DESIGNATOR(builder, INTERNATIONAL_DESIGNATOROffset)
            addOBJECT_NAME(builder, OBJECT_NAMEOffset)
            addCOMMENT(builder, COMMENTOffset)
            return endMetadata(builder)
        }
        fun startMetadata(builder: FlatBufferBuilder) = builder.startTable(48)
        fun addCOMMENT(builder: FlatBufferBuilder, COMMENT: Int) = builder.addOffset(0, COMMENT, 0)
        fun createCommentVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCommentVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOBJECT_NAME(builder: FlatBufferBuilder, OBJECT_NAME: Int) = builder.addOffset(1, OBJECT_NAME, 0)
        fun addINTERNATIONAL_DESIGNATOR(builder: FlatBufferBuilder, INTERNATIONAL_DESIGNATOR: Int) = builder.addOffset(2, INTERNATIONAL_DESIGNATOR, 0)
        fun addCATALOG_NAME(builder: FlatBufferBuilder, CATALOG_NAME: Int) = builder.addOffset(3, CATALOG_NAME, 0)
        fun addOBJECT_DESIGNATOR(builder: FlatBufferBuilder, OBJECT_DESIGNATOR: Int) = builder.addOffset(4, OBJECT_DESIGNATOR, 0)
        fun addALTERNATE_NAMES(builder: FlatBufferBuilder, ALTERNATE_NAMES: Int) = builder.addOffset(5, ALTERNATE_NAMES, 0)
        fun createAlternateNamesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAlternateNamesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addORIGINATOR_POC(builder: FlatBufferBuilder, ORIGINATOR_POC: Int) = builder.addOffset(6, ORIGINATOR_POC, 0)
        fun addORIGINATOR_POSITION(builder: FlatBufferBuilder, ORIGINATOR_POSITION: Int) = builder.addOffset(7, ORIGINATOR_POSITION, 0)
        fun addORIGINATOR_PHONE(builder: FlatBufferBuilder, ORIGINATOR_PHONE: Int) = builder.addOffset(8, ORIGINATOR_PHONE, 0)
        fun addORIGINATOR_EMAIL(builder: FlatBufferBuilder, ORIGINATOR_EMAIL: Int) = builder.addOffset(9, ORIGINATOR_EMAIL, 0)
        fun addORIGINATOR_ADDRESS(builder: FlatBufferBuilder, ORIGINATOR_ADDRESS: Int) = builder.addOffset(10, ORIGINATOR_ADDRESS, 0)
        fun addTECH_ORG(builder: FlatBufferBuilder, TECH_ORG: Int) = builder.addOffset(11, TECH_ORG, 0)
        fun addTECH_POC(builder: FlatBufferBuilder, TECH_POC: Int) = builder.addOffset(12, TECH_POC, 0)
        fun addTECH_POSITION(builder: FlatBufferBuilder, TECH_POSITION: Int) = builder.addOffset(13, TECH_POSITION, 0)
        fun addTECH_PHONE(builder: FlatBufferBuilder, TECH_PHONE: Int) = builder.addOffset(14, TECH_PHONE, 0)
        fun addTECH_EMAIL(builder: FlatBufferBuilder, TECH_EMAIL: Int) = builder.addOffset(15, TECH_EMAIL, 0)
        fun addTECH_ADDRESS(builder: FlatBufferBuilder, TECH_ADDRESS: Int) = builder.addOffset(16, TECH_ADDRESS, 0)
        fun addPREVIOUS_MESSAGE_ID(builder: FlatBufferBuilder, PREVIOUS_MESSAGE_ID: Int) = builder.addOffset(17, PREVIOUS_MESSAGE_ID, 0)
        fun addNEXT_MESSAGE_ID(builder: FlatBufferBuilder, NEXT_MESSAGE_ID: Int) = builder.addOffset(18, NEXT_MESSAGE_ID, 0)
        fun addADM_MSG_LINK(builder: FlatBufferBuilder, ADM_MSG_LINK: Int) = builder.addOffset(19, ADM_MSG_LINK, 0)
        fun addCDM_MSG_LINK(builder: FlatBufferBuilder, CDM_MSG_LINK: Int) = builder.addOffset(20, CDM_MSG_LINK, 0)
        fun addPRM_MSG_LINK(builder: FlatBufferBuilder, PRM_MSG_LINK: Int) = builder.addOffset(21, PRM_MSG_LINK, 0)
        fun addRDM_MSG_LINK(builder: FlatBufferBuilder, RDM_MSG_LINK: Int) = builder.addOffset(22, RDM_MSG_LINK, 0)
        fun addTDM_MSG_LINK(builder: FlatBufferBuilder, TDM_MSG_LINK: Int) = builder.addOffset(23, TDM_MSG_LINK, 0)
        fun createTdmMsgLinkVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTdmMsgLinkVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOPERATOR(builder: FlatBufferBuilder, OPERATOR: Int) = builder.addOffset(24, OPERATOR, 0)
        fun addOWNER(builder: FlatBufferBuilder, OWNER: Int) = builder.addOffset(25, OWNER, 0)
        fun addCOUNTRY(builder: FlatBufferBuilder, COUNTRY: Int) = builder.addOffset(26, COUNTRY, 0)
        fun addCONSTELLATION(builder: FlatBufferBuilder, CONSTELLATION: Int) = builder.addOffset(27, CONSTELLATION, 0)
        fun addOBJECT_TYPE(builder: FlatBufferBuilder, OBJECT_TYPE: Int) = builder.addOffset(28, OBJECT_TYPE, 0)
        fun addTIME_SYSTEM(builder: FlatBufferBuilder, TIME_SYSTEM: Int) = builder.addOffset(29, TIME_SYSTEM, 0)
        fun addEPOCH_TZERO(builder: FlatBufferBuilder, EPOCH_TZERO: Int) = builder.addOffset(30, EPOCH_TZERO, 0)
        fun addOPS_STATUS(builder: FlatBufferBuilder, OPS_STATUS: Int) = builder.addOffset(31, OPS_STATUS, 0)
        fun addORBIT_CATEGORY(builder: FlatBufferBuilder, ORBIT_CATEGORY: Int) = builder.addOffset(32, ORBIT_CATEGORY, 0)
        fun addOCM_DATA_ELEMENTS(builder: FlatBufferBuilder, OCM_DATA_ELEMENTS: Int) = builder.addOffset(33, OCM_DATA_ELEMENTS, 0)
        fun createOcmDataElementsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startOcmDataElementsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSCLK_OFFSET_AT_EPOCH(builder: FlatBufferBuilder, SCLK_OFFSET_AT_EPOCH: Double) = builder.addDouble(34, SCLK_OFFSET_AT_EPOCH, 0.0)
        fun addSCLK_SEC_PER_SI_SEC(builder: FlatBufferBuilder, SCLK_SEC_PER_SI_SEC: Double) = builder.addDouble(35, SCLK_SEC_PER_SI_SEC, 0.0)
        fun addPREVIOUS_MESSAGE_EPOCH(builder: FlatBufferBuilder, PREVIOUS_MESSAGE_EPOCH: Int) = builder.addOffset(36, PREVIOUS_MESSAGE_EPOCH, 0)
        fun addNEXT_MESSAGE_EPOCH(builder: FlatBufferBuilder, NEXT_MESSAGE_EPOCH: Int) = builder.addOffset(37, NEXT_MESSAGE_EPOCH, 0)
        fun addSTART_TIME(builder: FlatBufferBuilder, START_TIME: Int) = builder.addOffset(38, START_TIME, 0)
        fun addSTOP_TIME(builder: FlatBufferBuilder, STOP_TIME: Int) = builder.addOffset(39, STOP_TIME, 0)
        fun addTIME_SPAN(builder: FlatBufferBuilder, TIME_SPAN: Double) = builder.addDouble(40, TIME_SPAN, 0.0)
        fun addTAIMUTC_AT_TZERO(builder: FlatBufferBuilder, TAIMUTC_AT_TZERO: Double) = builder.addDouble(41, TAIMUTC_AT_TZERO, 0.0)
        fun addNEXT_LEAP_EPOCH(builder: FlatBufferBuilder, NEXT_LEAP_EPOCH: Int) = builder.addOffset(42, NEXT_LEAP_EPOCH, 0)
        fun addNEXT_LEAP_TAIMUTC(builder: FlatBufferBuilder, NEXT_LEAP_TAIMUTC: Double) = builder.addDouble(43, NEXT_LEAP_TAIMUTC, 0.0)
        fun addUT1MUTC_AT_TZERO(builder: FlatBufferBuilder, UT1MUTC_AT_TZERO: Double) = builder.addDouble(44, UT1MUTC_AT_TZERO, 0.0)
        fun addEOP_SOURCE(builder: FlatBufferBuilder, EOP_SOURCE: Int) = builder.addOffset(45, EOP_SOURCE, 0)
        fun addINTERP_METHOD_EOP(builder: FlatBufferBuilder, INTERP_METHOD_EOP: Int) = builder.addOffset(46, INTERP_METHOD_EOP, 0)
        fun addCELESTIAL_SOURCE(builder: FlatBufferBuilder, CELESTIAL_SOURCE: Int) = builder.addOffset(47, CELESTIAL_SOURCE, 0)
        fun endMetadata(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
