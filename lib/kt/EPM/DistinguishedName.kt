// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Represents a Distinguished Name composed of DNComponents
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class DistinguishedName : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DistinguishedName {
        __init(_i, _bb)
        return this
    }
    /**
     * The sequence of components making up the DN
     */
    fun COMPONENTS(j: Int) : DNComponent? = COMPONENTS(DNComponent(), j)
    fun COMPONENTS(obj: DNComponent, j: Int) : DNComponent? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val COMPONENTSLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsDistinguishedName(_bb: ByteBuffer): DistinguishedName = getRootAsDistinguishedName(_bb, DistinguishedName())
        fun getRootAsDistinguishedName(_bb: ByteBuffer, obj: DistinguishedName): DistinguishedName {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createDistinguishedName(builder: FlatBufferBuilder, COMPONENTSOffset: Int) : Int {
            builder.startTable(1)
            addCOMPONENTS(builder, COMPONENTSOffset)
            return endDistinguishedName(builder)
        }
        fun startDistinguishedName(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addCOMPONENTS(builder: FlatBufferBuilder, COMPONENTS: Int) = builder.addOffset(0, COMPONENTS, 0)
        fun createComponentsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startComponentsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endDistinguishedName(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
