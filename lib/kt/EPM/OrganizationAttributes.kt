// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Specific attributes for an Organization
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class OrganizationAttributes : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OrganizationAttributes {
        __init(_i, _bb)
        return this
    }
    /**
     * Legal name of the organization
     */
    val LEGAL_NAME : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val LEGAL_NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun LEGAL_NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsOrganizationAttributes(_bb: ByteBuffer): OrganizationAttributes = getRootAsOrganizationAttributes(_bb, OrganizationAttributes())
        fun getRootAsOrganizationAttributes(_bb: ByteBuffer, obj: OrganizationAttributes): OrganizationAttributes {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createOrganizationAttributes(builder: FlatBufferBuilder, LEGAL_NAMEOffset: Int) : Int {
            builder.startTable(1)
            addLEGAL_NAME(builder, LEGAL_NAMEOffset)
            return endOrganizationAttributes(builder)
        }
        fun startOrganizationAttributes(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addLEGAL_NAME(builder: FlatBufferBuilder, LEGAL_NAME: Int) = builder.addOffset(0, LEGAL_NAME, 0)
        fun endOrganizationAttributes(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
