// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Represents a component of a Distinguished Name (DN) in LDAP
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class DNComponent : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DNComponent {
        __init(_i, _bb)
        return this
    }
    /**
     * The type of the DN component
     */
    val TYPE : Byte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The value of the DN component
     */
    val VALUE : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val VALUEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun VALUEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsDNComponent(_bb: ByteBuffer): DNComponent = getRootAsDNComponent(_bb, DNComponent())
        fun getRootAsDNComponent(_bb: ByteBuffer, obj: DNComponent): DNComponent {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createDNComponent(builder: FlatBufferBuilder, TYPE: Byte, VALUEOffset: Int) : Int {
            builder.startTable(2)
            addVALUE(builder, VALUEOffset)
            addTYPE(builder, TYPE)
            return endDNComponent(builder)
        }
        fun startDNComponent(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addTYPE(builder: FlatBufferBuilder, TYPE: Byte) = builder.addByte(0, TYPE, 0)
        fun addVALUE(builder: FlatBufferBuilder, VALUE: Int) = builder.addOffset(1, VALUE, 0)
        fun endDNComponent(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
