// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Represents a geographic address
 */
@Suppress("unused")
class Address : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Address {
        __init(_i, _bb)
        return this
    }
    /**
     * Country of the address
     */
    val COUNTRY : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val COUNTRYAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun COUNTRYInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Region of the address (e.g., state or province)
     */
    val REGION : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val REGIONAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun REGIONInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Locality of the address (e.g., city or town)
     */
    val LOCALITY : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val LOCALITYAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun LOCALITYInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Postal code of the address
     */
    val POSTAL_CODE : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val POSTAL_CODEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun POSTAL_CODEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Street address
     */
    val STREET : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val STREETAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun STREETInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Post office box number
     */
    val POST_OFFICE_BOX_NUMBER : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val POST_OFFICE_BOX_NUMBERAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun POST_OFFICE_BOX_NUMBERInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAddress(_bb: ByteBuffer): Address = getRootAsAddress(_bb, Address())
        fun getRootAsAddress(_bb: ByteBuffer, obj: Address): Address {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createAddress(builder: FlatBufferBuilder, COUNTRYOffset: Int, REGIONOffset: Int, LOCALITYOffset: Int, POSTAL_CODEOffset: Int, STREETOffset: Int, POST_OFFICE_BOX_NUMBEROffset: Int) : Int {
            builder.startTable(6)
            addPOST_OFFICE_BOX_NUMBER(builder, POST_OFFICE_BOX_NUMBEROffset)
            addSTREET(builder, STREETOffset)
            addPOSTAL_CODE(builder, POSTAL_CODEOffset)
            addLOCALITY(builder, LOCALITYOffset)
            addREGION(builder, REGIONOffset)
            addCOUNTRY(builder, COUNTRYOffset)
            return endAddress(builder)
        }
        fun startAddress(builder: FlatBufferBuilder) = builder.startTable(6)
        fun addCOUNTRY(builder: FlatBufferBuilder, COUNTRY: Int) = builder.addOffset(0, COUNTRY, 0)
        fun addREGION(builder: FlatBufferBuilder, REGION: Int) = builder.addOffset(1, REGION, 0)
        fun addLOCALITY(builder: FlatBufferBuilder, LOCALITY: Int) = builder.addOffset(2, LOCALITY, 0)
        fun addPOSTAL_CODE(builder: FlatBufferBuilder, POSTAL_CODE: Int) = builder.addOffset(3, POSTAL_CODE, 0)
        fun addSTREET(builder: FlatBufferBuilder, STREET: Int) = builder.addOffset(4, STREET, 0)
        fun addPOST_OFFICE_BOX_NUMBER(builder: FlatBufferBuilder, POST_OFFICE_BOX_NUMBER: Int) = builder.addOffset(5, POST_OFFICE_BOX_NUMBER, 0)
        fun endAddress(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
