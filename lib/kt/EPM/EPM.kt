// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Entity Profile Message
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class EPM : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EPM {
        __init(_i, _bb)
        return this
    }
    /**
     * Distinguished Name of the entity
     */
    val DN : DistinguishedName? get() = DN(DistinguishedName())
    fun DN(obj: DistinguishedName) : DistinguishedName? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    /**
     * Common name of the entity (person or organization)
     */
    val NAME : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Alternate names for the entity
     */
    fun ALTERNATE_NAMES(j: Int) : String? {
        val o = __offset(8)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val ALTERNATE_NAMESLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Email address of the entity
     */
    val EMAIL : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val EMAILAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun EMAILInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Telephone number of the entity
     */
    val TELEPHONE : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TELEPHONEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun TELEPHONEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Cryptographic keys associated with the entity
     */
    fun KEYS(j: Int) : CryptoKey? = KEYS(CryptoKey(), j)
    fun KEYS(obj: CryptoKey, j: Int) : CryptoKey? {
        val o = __offset(14)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val KEYSLength : Int
        get() {
            val o = __offset(14); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Multiformat addresses associated with the entity
     */
    fun MULTIFORMAT_ADDRESS(j: Int) : String? {
        val o = __offset(16)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val MULTIFORMAT_ADDRESSLength : Int
        get() {
            val o = __offset(16); return if (o != 0) __vector_len(o) else 0
        }
    val attributesType : UByte
        get() {
            val o = __offset(18)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    /**
     * Specific attributes for the entity, either Person or Organization
     */
    fun ATTRIBUTES(obj: Table) : Table? {
        val o = __offset(20); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsEPM(_bb: ByteBuffer): EPM = getRootAsEPM(_bb, EPM())
        fun getRootAsEPM(_bb: ByteBuffer, obj: EPM): EPM {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createEPM(builder: FlatBufferBuilder, DNOffset: Int, NAMEOffset: Int, ALTERNATE_NAMESOffset: Int, EMAILOffset: Int, TELEPHONEOffset: Int, KEYSOffset: Int, MULTIFORMAT_ADDRESSOffset: Int, attributesType: UByte, ATTRIBUTESOffset: Int) : Int {
            builder.startTable(9)
            addATTRIBUTES(builder, ATTRIBUTESOffset)
            addMULTIFORMAT_ADDRESS(builder, MULTIFORMAT_ADDRESSOffset)
            addKEYS(builder, KEYSOffset)
            addTELEPHONE(builder, TELEPHONEOffset)
            addEMAIL(builder, EMAILOffset)
            addALTERNATE_NAMES(builder, ALTERNATE_NAMESOffset)
            addNAME(builder, NAMEOffset)
            addDN(builder, DNOffset)
            addATTRIBUTESType(builder, attributesType)
            return endEPM(builder)
        }
        fun startEPM(builder: FlatBufferBuilder) = builder.startTable(9)
        fun addDN(builder: FlatBufferBuilder, DN: Int) = builder.addOffset(0, DN, 0)
        fun addNAME(builder: FlatBufferBuilder, NAME: Int) = builder.addOffset(1, NAME, 0)
        fun addALTERNATE_NAMES(builder: FlatBufferBuilder, ALTERNATE_NAMES: Int) = builder.addOffset(2, ALTERNATE_NAMES, 0)
        fun createAlternateNamesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAlternateNamesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addEMAIL(builder: FlatBufferBuilder, EMAIL: Int) = builder.addOffset(3, EMAIL, 0)
        fun addTELEPHONE(builder: FlatBufferBuilder, TELEPHONE: Int) = builder.addOffset(4, TELEPHONE, 0)
        fun addKEYS(builder: FlatBufferBuilder, KEYS: Int) = builder.addOffset(5, KEYS, 0)
        fun createKeysVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startKeysVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMULTIFORMAT_ADDRESS(builder: FlatBufferBuilder, MULTIFORMAT_ADDRESS: Int) = builder.addOffset(6, MULTIFORMAT_ADDRESS, 0)
        fun createMultiformatAddressVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMultiformatAddressVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addATTRIBUTESType(builder: FlatBufferBuilder, attributesType: UByte) = builder.addByte(7, attributesType.toByte(), 0)
        fun addATTRIBUTES(builder: FlatBufferBuilder, ATTRIBUTES: Int) = builder.addOffset(8, ATTRIBUTES, 0)
        fun endEPM(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
