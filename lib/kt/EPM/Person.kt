// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Information about a person
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class Person : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Person {
        __init(_i, _bb)
        return this
    }
    /**
     * Family name or surname of the person
     */
    val FAMILY_NAME : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val FAMILY_NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun FAMILY_NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Given name or first name of the person
     */
    val GIVEN_NAME : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val GIVEN_NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun GIVEN_NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Additional name or middle name of the person
     */
    val ADDITIONAL_NAME : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ADDITIONAL_NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun ADDITIONAL_NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Honorific prefix preceding the person's name
     */
    val HONORIFIC_PREFIX : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val HONORIFIC_PREFIXAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun HONORIFIC_PREFIXInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Honorific suffix following the person's name
     */
    val HONORIFIC_SUFFIX : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val HONORIFIC_SUFFIXAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun HONORIFIC_SUFFIXInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsPerson(_bb: ByteBuffer): Person = getRootAsPerson(_bb, Person())
        fun getRootAsPerson(_bb: ByteBuffer, obj: Person): Person {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createPerson(builder: FlatBufferBuilder, FAMILY_NAMEOffset: Int, GIVEN_NAMEOffset: Int, ADDITIONAL_NAMEOffset: Int, HONORIFIC_PREFIXOffset: Int, HONORIFIC_SUFFIXOffset: Int) : Int {
            builder.startTable(5)
            addHONORIFIC_SUFFIX(builder, HONORIFIC_SUFFIXOffset)
            addHONORIFIC_PREFIX(builder, HONORIFIC_PREFIXOffset)
            addADDITIONAL_NAME(builder, ADDITIONAL_NAMEOffset)
            addGIVEN_NAME(builder, GIVEN_NAMEOffset)
            addFAMILY_NAME(builder, FAMILY_NAMEOffset)
            return endPerson(builder)
        }
        fun startPerson(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addFAMILY_NAME(builder: FlatBufferBuilder, FAMILY_NAME: Int) = builder.addOffset(0, FAMILY_NAME, 0)
        fun addGIVEN_NAME(builder: FlatBufferBuilder, GIVEN_NAME: Int) = builder.addOffset(1, GIVEN_NAME, 0)
        fun addADDITIONAL_NAME(builder: FlatBufferBuilder, ADDITIONAL_NAME: Int) = builder.addOffset(2, ADDITIONAL_NAME, 0)
        fun addHONORIFIC_PREFIX(builder: FlatBufferBuilder, HONORIFIC_PREFIX: Int) = builder.addOffset(3, HONORIFIC_PREFIX, 0)
        fun addHONORIFIC_SUFFIX(builder: FlatBufferBuilder, HONORIFIC_SUFFIX: Int) = builder.addOffset(4, HONORIFIC_SUFFIX, 0)
        fun endPerson(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
