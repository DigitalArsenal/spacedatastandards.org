// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Mean Element Theory
 */
@Suppress("unused")
class MET : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MET {
        __init(_i, _bb)
        return this
    }
    val MEAN_ELEMENT_THEORY : Byte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsMET(_bb: ByteBuffer): MET = getRootAsMET(_bb, MET())
        fun getRootAsMET(_bb: ByteBuffer, obj: MET): MET {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun METBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "$MET")
        fun createMET(builder: FlatBufferBuilder, MEAN_ELEMENT_THEORY: Byte) : Int {
            builder.startTable(1)
            addMEAN_ELEMENT_THEORY(builder, MEAN_ELEMENT_THEORY)
            return endMET(builder)
        }
        fun startMET(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addMEAN_ELEMENT_THEORY(builder: FlatBufferBuilder, MEAN_ELEMENT_THEORY: Byte) = builder.addByte(0, MEAN_ELEMENT_THEORY, 0)
        fun endMET(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishMETBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "$MET")
        fun finishSizePrefixedMETBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "$MET")
    }
}
