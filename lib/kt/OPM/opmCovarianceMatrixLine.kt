// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * OPM Covariance Matrix Line
 */
@Suppress("unused")
class opmCovarianceMatrixLine : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : opmCovarianceMatrixLine {
        __init(_i, _bb)
        return this
    }
    val CX_X : Double
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val CY_X : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val CZ_X : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val CX_DOT_X : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsopmCovarianceMatrixLine(_bb: ByteBuffer): opmCovarianceMatrixLine = getRootAsopmCovarianceMatrixLine(_bb, opmCovarianceMatrixLine())
        fun getRootAsopmCovarianceMatrixLine(_bb: ByteBuffer, obj: opmCovarianceMatrixLine): opmCovarianceMatrixLine {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createopmCovarianceMatrixLine(builder: FlatBufferBuilder, CX_X: Double, CY_X: Double, CZ_X: Double, CX_DOT_X: Double) : Int {
            builder.startTable(4)
            addCX_DOT_X(builder, CX_DOT_X)
            addCZ_X(builder, CZ_X)
            addCY_X(builder, CY_X)
            addCX_X(builder, CX_X)
            return endopmCovarianceMatrixLine(builder)
        }
        fun startopmCovarianceMatrixLine(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addCX_X(builder: FlatBufferBuilder, CX_X: Double) = builder.addDouble(0, CX_X, 0.0)
        fun addCY_X(builder: FlatBufferBuilder, CY_X: Double) = builder.addDouble(1, CY_X, 0.0)
        fun addCZ_X(builder: FlatBufferBuilder, CZ_X: Double) = builder.addDouble(2, CZ_X, 0.0)
        fun addCX_DOT_X(builder: FlatBufferBuilder, CX_DOT_X: Double) = builder.addDouble(3, CX_DOT_X, 0.0)
        fun endopmCovarianceMatrixLine(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
