// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class ContactPoint : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ContactPoint {
        __init(_i, _bb)
        return this
    }
    val NAME : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val CONTACT_TYPE : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CONTACT_TYPEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun CONTACT_TYPEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val EMAIL : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val EMAILAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun EMAILInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    val TELEPHONE : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TELEPHONEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun TELEPHONEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    val CONTACT_OPTION : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CONTACT_OPTIONAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun CONTACT_OPTIONInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    val AREA_SERVED : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val AREA_SERVEDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun AREA_SERVEDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    val AVAILABLE_LANGUAGE : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val AVAILABLE_LANGUAGEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun AVAILABLE_LANGUAGEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    val ADDRESS_COUNTRY : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ADDRESS_COUNTRYAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun ADDRESS_COUNTRYInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    val ADDRESS_REGION : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ADDRESS_REGIONAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun ADDRESS_REGIONInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    val ADDRESS_LOCALITY : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ADDRESS_LOCALITYAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun ADDRESS_LOCALITYInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    val POSTAL_CODE : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val POSTAL_CODEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun POSTAL_CODEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    val STREET_ADDRESS : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val STREET_ADDRESSAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun STREET_ADDRESSInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    val POST_OFFICE_BOX_NUMBER : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val POST_OFFICE_BOX_NUMBERAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun POST_OFFICE_BOX_NUMBERInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsContactPoint(_bb: ByteBuffer): ContactPoint = getRootAsContactPoint(_bb, ContactPoint())
        fun getRootAsContactPoint(_bb: ByteBuffer, obj: ContactPoint): ContactPoint {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createContactPoint(builder: FlatBufferBuilder, NAMEOffset: Int, CONTACT_TYPEOffset: Int, EMAILOffset: Int, TELEPHONEOffset: Int, CONTACT_OPTIONOffset: Int, AREA_SERVEDOffset: Int, AVAILABLE_LANGUAGEOffset: Int, ADDRESS_COUNTRYOffset: Int, ADDRESS_REGIONOffset: Int, ADDRESS_LOCALITYOffset: Int, POSTAL_CODEOffset: Int, STREET_ADDRESSOffset: Int, POST_OFFICE_BOX_NUMBEROffset: Int) : Int {
            builder.startTable(13)
            addPOST_OFFICE_BOX_NUMBER(builder, POST_OFFICE_BOX_NUMBEROffset)
            addSTREET_ADDRESS(builder, STREET_ADDRESSOffset)
            addPOSTAL_CODE(builder, POSTAL_CODEOffset)
            addADDRESS_LOCALITY(builder, ADDRESS_LOCALITYOffset)
            addADDRESS_REGION(builder, ADDRESS_REGIONOffset)
            addADDRESS_COUNTRY(builder, ADDRESS_COUNTRYOffset)
            addAVAILABLE_LANGUAGE(builder, AVAILABLE_LANGUAGEOffset)
            addAREA_SERVED(builder, AREA_SERVEDOffset)
            addCONTACT_OPTION(builder, CONTACT_OPTIONOffset)
            addTELEPHONE(builder, TELEPHONEOffset)
            addEMAIL(builder, EMAILOffset)
            addCONTACT_TYPE(builder, CONTACT_TYPEOffset)
            addNAME(builder, NAMEOffset)
            return endContactPoint(builder)
        }
        fun startContactPoint(builder: FlatBufferBuilder) = builder.startTable(13)
        fun addNAME(builder: FlatBufferBuilder, NAME: Int) = builder.addOffset(0, NAME, 0)
        fun addCONTACT_TYPE(builder: FlatBufferBuilder, CONTACT_TYPE: Int) = builder.addOffset(1, CONTACT_TYPE, 0)
        fun addEMAIL(builder: FlatBufferBuilder, EMAIL: Int) = builder.addOffset(2, EMAIL, 0)
        fun addTELEPHONE(builder: FlatBufferBuilder, TELEPHONE: Int) = builder.addOffset(3, TELEPHONE, 0)
        fun addCONTACT_OPTION(builder: FlatBufferBuilder, CONTACT_OPTION: Int) = builder.addOffset(4, CONTACT_OPTION, 0)
        fun addAREA_SERVED(builder: FlatBufferBuilder, AREA_SERVED: Int) = builder.addOffset(5, AREA_SERVED, 0)
        fun addAVAILABLE_LANGUAGE(builder: FlatBufferBuilder, AVAILABLE_LANGUAGE: Int) = builder.addOffset(6, AVAILABLE_LANGUAGE, 0)
        fun addADDRESS_COUNTRY(builder: FlatBufferBuilder, ADDRESS_COUNTRY: Int) = builder.addOffset(7, ADDRESS_COUNTRY, 0)
        fun addADDRESS_REGION(builder: FlatBufferBuilder, ADDRESS_REGION: Int) = builder.addOffset(8, ADDRESS_REGION, 0)
        fun addADDRESS_LOCALITY(builder: FlatBufferBuilder, ADDRESS_LOCALITY: Int) = builder.addOffset(9, ADDRESS_LOCALITY, 0)
        fun addPOSTAL_CODE(builder: FlatBufferBuilder, POSTAL_CODE: Int) = builder.addOffset(10, POSTAL_CODE, 0)
        fun addSTREET_ADDRESS(builder: FlatBufferBuilder, STREET_ADDRESS: Int) = builder.addOffset(11, STREET_ADDRESS, 0)
        fun addPOST_OFFICE_BOX_NUMBER(builder: FlatBufferBuilder, POST_OFFICE_BOX_NUMBER: Int) = builder.addOffset(12, POST_OFFICE_BOX_NUMBER, 0)
        fun endContactPoint(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
