// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * User Profile Message
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class UPM : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : UPM {
        __init(_i, _bb)
        return this
    }
    val NAME : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val ALTERNATE_NAME : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ALTERNATE_NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun ALTERNATE_NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val DESCRIPTION : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val DESCRIPTIONAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun DESCRIPTIONInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    val IMAGE : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val IMAGEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun IMAGEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    val SAME_AS : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SAME_ASAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun SAME_ASInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    val URL : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val URLAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun URLInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    val TELEPHONE : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TELEPHONEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun TELEPHONEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    val EMAIL : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val EMAILAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun EMAILInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    fun KEY(j: Int) : CryptoKey? = KEY(CryptoKey(), j)
    fun KEY(obj: CryptoKey, j: Int) : CryptoKey? {
        val o = __offset(20)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val KEYLength : Int
        get() {
            val o = __offset(20); return if (o != 0) __vector_len(o) else 0
        }
    fun CONTACT_POINT(j: Int) : ContactPoint? = CONTACT_POINT(ContactPoint(), j)
    fun CONTACT_POINT(obj: ContactPoint, j: Int) : ContactPoint? {
        val o = __offset(22)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val CONTACT_POINTLength : Int
        get() {
            val o = __offset(22); return if (o != 0) __vector_len(o) else 0
        }
    val ADDRESS : ContactPoint? get() = ADDRESS(ContactPoint())
    fun ADDRESS(obj: ContactPoint) : ContactPoint? {
        val o = __offset(24)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val JOB_TITLE : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val JOB_TITLEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun JOB_TITLEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    val AFFILIATION : Organization? get() = AFFILIATION(Organization())
    fun AFFILIATION(obj: Organization) : Organization? {
        val o = __offset(28)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val HAS_OCCUPATION : Occupation? get() = HAS_OCCUPATION(Occupation())
    fun HAS_OCCUPATION(obj: Occupation) : Occupation? {
        val o = __offset(30)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val FAMILY_NAME : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val FAMILY_NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun FAMILY_NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    val GIVEN_NAME : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val GIVEN_NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun GIVEN_NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    val ADDITIONAL_NAME : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ADDITIONAL_NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun ADDITIONAL_NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    val HONORIFIC_PREFIX : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val HONORIFIC_PREFIXAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun HONORIFIC_PREFIXInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    val HONORIFIC_SUFFIX : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val HONORIFIC_SUFFIXAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun HONORIFIC_SUFFIXInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsUPM(_bb: ByteBuffer): UPM = getRootAsUPM(_bb, UPM())
        fun getRootAsUPM(_bb: ByteBuffer, obj: UPM): UPM {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun UPMBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "$UPM")
        fun createUPM(builder: FlatBufferBuilder, NAMEOffset: Int, ALTERNATE_NAMEOffset: Int, DESCRIPTIONOffset: Int, IMAGEOffset: Int, SAME_ASOffset: Int, URLOffset: Int, TELEPHONEOffset: Int, EMAILOffset: Int, KEYOffset: Int, CONTACT_POINTOffset: Int, ADDRESSOffset: Int, JOB_TITLEOffset: Int, AFFILIATIONOffset: Int, HAS_OCCUPATIONOffset: Int, FAMILY_NAMEOffset: Int, GIVEN_NAMEOffset: Int, ADDITIONAL_NAMEOffset: Int, HONORIFIC_PREFIXOffset: Int, HONORIFIC_SUFFIXOffset: Int) : Int {
            builder.startTable(19)
            addHONORIFIC_SUFFIX(builder, HONORIFIC_SUFFIXOffset)
            addHONORIFIC_PREFIX(builder, HONORIFIC_PREFIXOffset)
            addADDITIONAL_NAME(builder, ADDITIONAL_NAMEOffset)
            addGIVEN_NAME(builder, GIVEN_NAMEOffset)
            addFAMILY_NAME(builder, FAMILY_NAMEOffset)
            addHAS_OCCUPATION(builder, HAS_OCCUPATIONOffset)
            addAFFILIATION(builder, AFFILIATIONOffset)
            addJOB_TITLE(builder, JOB_TITLEOffset)
            addADDRESS(builder, ADDRESSOffset)
            addCONTACT_POINT(builder, CONTACT_POINTOffset)
            addKEY(builder, KEYOffset)
            addEMAIL(builder, EMAILOffset)
            addTELEPHONE(builder, TELEPHONEOffset)
            addURL(builder, URLOffset)
            addSAME_AS(builder, SAME_ASOffset)
            addIMAGE(builder, IMAGEOffset)
            addDESCRIPTION(builder, DESCRIPTIONOffset)
            addALTERNATE_NAME(builder, ALTERNATE_NAMEOffset)
            addNAME(builder, NAMEOffset)
            return endUPM(builder)
        }
        fun startUPM(builder: FlatBufferBuilder) = builder.startTable(19)
        fun addNAME(builder: FlatBufferBuilder, NAME: Int) = builder.addOffset(0, NAME, 0)
        fun addALTERNATE_NAME(builder: FlatBufferBuilder, ALTERNATE_NAME: Int) = builder.addOffset(1, ALTERNATE_NAME, 0)
        fun addDESCRIPTION(builder: FlatBufferBuilder, DESCRIPTION: Int) = builder.addOffset(2, DESCRIPTION, 0)
        fun addIMAGE(builder: FlatBufferBuilder, IMAGE: Int) = builder.addOffset(3, IMAGE, 0)
        fun addSAME_AS(builder: FlatBufferBuilder, SAME_AS: Int) = builder.addOffset(4, SAME_AS, 0)
        fun addURL(builder: FlatBufferBuilder, URL: Int) = builder.addOffset(5, URL, 0)
        fun addTELEPHONE(builder: FlatBufferBuilder, TELEPHONE: Int) = builder.addOffset(6, TELEPHONE, 0)
        fun addEMAIL(builder: FlatBufferBuilder, EMAIL: Int) = builder.addOffset(7, EMAIL, 0)
        fun addKEY(builder: FlatBufferBuilder, KEY: Int) = builder.addOffset(8, KEY, 0)
        fun createKeyVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startKeyVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCONTACT_POINT(builder: FlatBufferBuilder, CONTACT_POINT: Int) = builder.addOffset(9, CONTACT_POINT, 0)
        fun createContactPointVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startContactPointVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addADDRESS(builder: FlatBufferBuilder, ADDRESS: Int) = builder.addOffset(10, ADDRESS, 0)
        fun addJOB_TITLE(builder: FlatBufferBuilder, JOB_TITLE: Int) = builder.addOffset(11, JOB_TITLE, 0)
        fun addAFFILIATION(builder: FlatBufferBuilder, AFFILIATION: Int) = builder.addOffset(12, AFFILIATION, 0)
        fun addHAS_OCCUPATION(builder: FlatBufferBuilder, HAS_OCCUPATION: Int) = builder.addOffset(13, HAS_OCCUPATION, 0)
        fun addFAMILY_NAME(builder: FlatBufferBuilder, FAMILY_NAME: Int) = builder.addOffset(14, FAMILY_NAME, 0)
        fun addGIVEN_NAME(builder: FlatBufferBuilder, GIVEN_NAME: Int) = builder.addOffset(15, GIVEN_NAME, 0)
        fun addADDITIONAL_NAME(builder: FlatBufferBuilder, ADDITIONAL_NAME: Int) = builder.addOffset(16, ADDITIONAL_NAME, 0)
        fun addHONORIFIC_PREFIX(builder: FlatBufferBuilder, HONORIFIC_PREFIX: Int) = builder.addOffset(17, HONORIFIC_PREFIX, 0)
        fun addHONORIFIC_SUFFIX(builder: FlatBufferBuilder, HONORIFIC_SUFFIX: Int) = builder.addOffset(18, HONORIFIC_SUFFIX, 0)
        fun endUPM(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishUPMBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "$UPM")
        fun finishSizePrefixedUPMBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "$UPM")
    }
}
