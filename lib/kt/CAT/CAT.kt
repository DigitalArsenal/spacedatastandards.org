// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Catalog Entity Message
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class CAT : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : CAT {
        __init(_i, _bb)
        return this
    }
    /**
     * Satellite Name(s)
     */
    val OBJECT_NAME : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OBJECT_NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun OBJECT_NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * International Designator (YYYY-NNNAAA)
     */
    val OBJECT_ID : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OBJECT_IDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun OBJECT_IDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * NORAD Catalog Number
     */
    val NORAD_CAT_ID : UInt
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    /**
     * Object type (Payload, Rocket body, Debris, Unknown)
     */
    val OBJECT_TYPE : Byte
        get() {
            val o = __offset(10)
            return if(o != 0) bb.get(o + bb_pos) else 3
        }
    /**
     * Operational Status Code
     */
    val OPS_STATUS_CODE : Byte
        get() {
            val o = __offset(12)
            return if(o != 0) bb.get(o + bb_pos) else 7
        }
    /**
     * Ownership, typically country or company
     */
    val OWNER : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OWNERAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun OWNERInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Launch Date [year-month-day] (ISO 8601)
     */
    val LAUNCH_DATE : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val LAUNCH_DATEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun LAUNCH_DATEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Launch Site
     */
    val LAUNCH_SITE : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val LAUNCH_SITEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun LAUNCH_SITEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Decay Date, if applicable [year-month-day] (ISO 8601)
     */
    val DECAY_DATE : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val DECAY_DATEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun DECAY_DATEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Orbital period [minutes]
     */
    val PERIOD : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Inclination [degrees]
     */
    val INCLINATION : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Apogee Altitude [kilometers]
     */
    val APOGEE : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Perigee Altitude [kilometers]
     */
    val PERIGEE : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Radar Cross Section [meters2]; blank if no data available
     */
    val RCS : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Data status code; blank otherwise
     */
    val DATA_STATUS_CODE : Byte
        get() {
            val o = __offset(32)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Orbit center
     */
    val ORBIT_CENTER : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ORBIT_CENTERAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun ORBIT_CENTERInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Orbit type (Orbit, Landing, Impact, Docked to RSO, roundtrip)
     */
    val ORBIT_TYPE : Byte
        get() {
            val o = __offset(36)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Deployment Date [year-month-day] (ISO 8601)
     */
    val DEPLOYMENT_DATE : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val DEPLOYMENT_DATEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun DEPLOYMENT_DATEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Indicates if the object is maneuverable
     */
    val MANEUVERABLE : Boolean
        get() {
            val o = __offset(40)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Size [meters]; blank if no data available
     */
    val SIZE : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Mass [kilograms]; blank if no data available
     */
    val MASS : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Mass type (Dry, Wet)
     */
    val MASS_TYPE : Byte
        get() {
            val o = __offset(46)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Vector of PAYLOADS
     */
    fun PAYLOADS(j: Int) : PLD? = PAYLOADS(PLD(), j)
    fun PAYLOADS(obj: PLD, j: Int) : PLD? {
        val o = __offset(48)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val PAYLOADSLength : Int
        get() {
            val o = __offset(48); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsCAT(_bb: ByteBuffer): CAT = getRootAsCAT(_bb, CAT())
        fun getRootAsCAT(_bb: ByteBuffer, obj: CAT): CAT {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createCAT(builder: FlatBufferBuilder, OBJECT_NAMEOffset: Int, OBJECT_IDOffset: Int, NORAD_CAT_ID: UInt, OBJECT_TYPE: Byte, OPS_STATUS_CODE: Byte, OWNEROffset: Int, LAUNCH_DATEOffset: Int, LAUNCH_SITEOffset: Int, DECAY_DATEOffset: Int, PERIOD: Double, INCLINATION: Double, APOGEE: Double, PERIGEE: Double, RCS: Double, DATA_STATUS_CODE: Byte, ORBIT_CENTEROffset: Int, ORBIT_TYPE: Byte, DEPLOYMENT_DATEOffset: Int, MANEUVERABLE: Boolean, SIZE: Double, MASS: Double, MASS_TYPE: Byte, PAYLOADSOffset: Int) : Int {
            builder.startTable(23)
            addMASS(builder, MASS)
            addSIZE(builder, SIZE)
            addRCS(builder, RCS)
            addPERIGEE(builder, PERIGEE)
            addAPOGEE(builder, APOGEE)
            addINCLINATION(builder, INCLINATION)
            addPERIOD(builder, PERIOD)
            addPAYLOADS(builder, PAYLOADSOffset)
            addDEPLOYMENT_DATE(builder, DEPLOYMENT_DATEOffset)
            addORBIT_CENTER(builder, ORBIT_CENTEROffset)
            addDECAY_DATE(builder, DECAY_DATEOffset)
            addLAUNCH_SITE(builder, LAUNCH_SITEOffset)
            addLAUNCH_DATE(builder, LAUNCH_DATEOffset)
            addOWNER(builder, OWNEROffset)
            addNORAD_CAT_ID(builder, NORAD_CAT_ID)
            addOBJECT_ID(builder, OBJECT_IDOffset)
            addOBJECT_NAME(builder, OBJECT_NAMEOffset)
            addMASS_TYPE(builder, MASS_TYPE)
            addMANEUVERABLE(builder, MANEUVERABLE)
            addORBIT_TYPE(builder, ORBIT_TYPE)
            addDATA_STATUS_CODE(builder, DATA_STATUS_CODE)
            addOPS_STATUS_CODE(builder, OPS_STATUS_CODE)
            addOBJECT_TYPE(builder, OBJECT_TYPE)
            return endCAT(builder)
        }
        fun startCAT(builder: FlatBufferBuilder) = builder.startTable(23)
        fun addOBJECT_NAME(builder: FlatBufferBuilder, OBJECT_NAME: Int) = builder.addOffset(0, OBJECT_NAME, 0)
        fun addOBJECT_ID(builder: FlatBufferBuilder, OBJECT_ID: Int) = builder.addOffset(1, OBJECT_ID, 0)
        fun addNORAD_CAT_ID(builder: FlatBufferBuilder, NORAD_CAT_ID: UInt) = builder.addInt(2, NORAD_CAT_ID.toInt(), 0)
        fun addOBJECT_TYPE(builder: FlatBufferBuilder, OBJECT_TYPE: Byte) = builder.addByte(3, OBJECT_TYPE, 3)
        fun addOPS_STATUS_CODE(builder: FlatBufferBuilder, OPS_STATUS_CODE: Byte) = builder.addByte(4, OPS_STATUS_CODE, 7)
        fun addOWNER(builder: FlatBufferBuilder, OWNER: Int) = builder.addOffset(5, OWNER, 0)
        fun addLAUNCH_DATE(builder: FlatBufferBuilder, LAUNCH_DATE: Int) = builder.addOffset(6, LAUNCH_DATE, 0)
        fun addLAUNCH_SITE(builder: FlatBufferBuilder, LAUNCH_SITE: Int) = builder.addOffset(7, LAUNCH_SITE, 0)
        fun addDECAY_DATE(builder: FlatBufferBuilder, DECAY_DATE: Int) = builder.addOffset(8, DECAY_DATE, 0)
        fun addPERIOD(builder: FlatBufferBuilder, PERIOD: Double) = builder.addDouble(9, PERIOD, 0.0)
        fun addINCLINATION(builder: FlatBufferBuilder, INCLINATION: Double) = builder.addDouble(10, INCLINATION, 0.0)
        fun addAPOGEE(builder: FlatBufferBuilder, APOGEE: Double) = builder.addDouble(11, APOGEE, 0.0)
        fun addPERIGEE(builder: FlatBufferBuilder, PERIGEE: Double) = builder.addDouble(12, PERIGEE, 0.0)
        fun addRCS(builder: FlatBufferBuilder, RCS: Double) = builder.addDouble(13, RCS, 0.0)
        fun addDATA_STATUS_CODE(builder: FlatBufferBuilder, DATA_STATUS_CODE: Byte) = builder.addByte(14, DATA_STATUS_CODE, 0)
        fun addORBIT_CENTER(builder: FlatBufferBuilder, ORBIT_CENTER: Int) = builder.addOffset(15, ORBIT_CENTER, 0)
        fun addORBIT_TYPE(builder: FlatBufferBuilder, ORBIT_TYPE: Byte) = builder.addByte(16, ORBIT_TYPE, 0)
        fun addDEPLOYMENT_DATE(builder: FlatBufferBuilder, DEPLOYMENT_DATE: Int) = builder.addOffset(17, DEPLOYMENT_DATE, 0)
        fun addMANEUVERABLE(builder: FlatBufferBuilder, MANEUVERABLE: Boolean) = builder.addBoolean(18, MANEUVERABLE, false)
        fun addSIZE(builder: FlatBufferBuilder, SIZE: Double) = builder.addDouble(19, SIZE, 0.0)
        fun addMASS(builder: FlatBufferBuilder, MASS: Double) = builder.addDouble(20, MASS, 0.0)
        fun addMASS_TYPE(builder: FlatBufferBuilder, MASS_TYPE: Byte) = builder.addByte(21, MASS_TYPE, 0)
        fun addPAYLOADS(builder: FlatBufferBuilder, PAYLOADS: Int) = builder.addOffset(22, PAYLOADS, 0)
        fun createPayloadsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startPayloadsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endCAT(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
