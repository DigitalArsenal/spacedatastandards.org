// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * UVW Sigmas (Covariance matrix in UVW frame)
 */
@Suppress("unused")
class uvwSigmas : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : uvwSigmas {
        __init(_i, _bb)
        return this
    }
    val U_SIGMA : Double
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val V_SIGMA : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val W_SIGMA : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val UD_SIGMA : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val VD_SIGMA : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val WD_SIGMA : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsuvwSigmas(_bb: ByteBuffer): uvwSigmas = getRootAsuvwSigmas(_bb, uvwSigmas())
        fun getRootAsuvwSigmas(_bb: ByteBuffer, obj: uvwSigmas): uvwSigmas {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createuvwSigmas(builder: FlatBufferBuilder, U_SIGMA: Double, V_SIGMA: Double, W_SIGMA: Double, UD_SIGMA: Double, VD_SIGMA: Double, WD_SIGMA: Double) : Int {
            builder.startTable(6)
            addWD_SIGMA(builder, WD_SIGMA)
            addVD_SIGMA(builder, VD_SIGMA)
            addUD_SIGMA(builder, UD_SIGMA)
            addW_SIGMA(builder, W_SIGMA)
            addV_SIGMA(builder, V_SIGMA)
            addU_SIGMA(builder, U_SIGMA)
            return enduvwSigmas(builder)
        }
        fun startuvwSigmas(builder: FlatBufferBuilder) = builder.startTable(6)
        fun addU_SIGMA(builder: FlatBufferBuilder, U_SIGMA: Double) = builder.addDouble(0, U_SIGMA, 0.0)
        fun addV_SIGMA(builder: FlatBufferBuilder, V_SIGMA: Double) = builder.addDouble(1, V_SIGMA, 0.0)
        fun addW_SIGMA(builder: FlatBufferBuilder, W_SIGMA: Double) = builder.addDouble(2, W_SIGMA, 0.0)
        fun addUD_SIGMA(builder: FlatBufferBuilder, UD_SIGMA: Double) = builder.addDouble(3, UD_SIGMA, 0.0)
        fun addVD_SIGMA(builder: FlatBufferBuilder, VD_SIGMA: Double) = builder.addDouble(4, VD_SIGMA, 0.0)
        fun addWD_SIGMA(builder: FlatBufferBuilder, WD_SIGMA: Double) = builder.addDouble(5, WD_SIGMA, 0.0)
        fun enduvwSigmas(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
