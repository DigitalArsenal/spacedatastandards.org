// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Propagator configuration structure to describe propagation settings
 */
@Suppress("unused")
class propagatorConfig : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : propagatorConfig {
        __init(_i, _bb)
        return this
    }
    val PROPAGATOR_NAME : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val PROPAGATOR_NAMEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun PROPAGATOR_NAMEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val PROPAGATOR_TYPE : Byte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    fun FORCE_MODELS(j: Int) : String? {
        val o = __offset(8)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val FORCE_MODELSLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    val EPOCH : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val EPOCHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun EPOCHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    val TIME_STEP : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    fun ZONAL_HARMONIC_TERMS(j: Int) : Byte {
        val o = __offset(14)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1)
        } else {
            0
        }
    }
    val ZONAL_HARMONIC_TERMSLength : Int
        get() {
            val o = __offset(14); return if (o != 0) __vector_len(o) else 0
        }
    val ZONAL_HARMONIC_TERMSAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun ZONAL_HARMONIC_TERMSInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAspropagatorConfig(_bb: ByteBuffer): propagatorConfig = getRootAspropagatorConfig(_bb, propagatorConfig())
        fun getRootAspropagatorConfig(_bb: ByteBuffer, obj: propagatorConfig): propagatorConfig {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createpropagatorConfig(builder: FlatBufferBuilder, PROPAGATOR_NAMEOffset: Int, PROPAGATOR_TYPE: Byte, FORCE_MODELSOffset: Int, EPOCHOffset: Int, TIME_STEP: Double, ZONAL_HARMONIC_TERMSOffset: Int) : Int {
            builder.startTable(6)
            addTIME_STEP(builder, TIME_STEP)
            addZONAL_HARMONIC_TERMS(builder, ZONAL_HARMONIC_TERMSOffset)
            addEPOCH(builder, EPOCHOffset)
            addFORCE_MODELS(builder, FORCE_MODELSOffset)
            addPROPAGATOR_NAME(builder, PROPAGATOR_NAMEOffset)
            addPROPAGATOR_TYPE(builder, PROPAGATOR_TYPE)
            return endpropagatorConfig(builder)
        }
        fun startpropagatorConfig(builder: FlatBufferBuilder) = builder.startTable(6)
        fun addPROPAGATOR_NAME(builder: FlatBufferBuilder, PROPAGATOR_NAME: Int) = builder.addOffset(0, PROPAGATOR_NAME, 0)
        fun addPROPAGATOR_TYPE(builder: FlatBufferBuilder, PROPAGATOR_TYPE: Byte) = builder.addByte(1, PROPAGATOR_TYPE, 0)
        fun addFORCE_MODELS(builder: FlatBufferBuilder, FORCE_MODELS: Int) = builder.addOffset(2, FORCE_MODELS, 0)
        fun createForceModelsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startForceModelsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addEPOCH(builder: FlatBufferBuilder, EPOCH: Int) = builder.addOffset(3, EPOCH, 0)
        fun addTIME_STEP(builder: FlatBufferBuilder, TIME_STEP: Double) = builder.addDouble(4, TIME_STEP, 0.0)
        fun addZONAL_HARMONIC_TERMS(builder: FlatBufferBuilder, ZONAL_HARMONIC_TERMS: Int) = builder.addOffset(5, ZONAL_HARMONIC_TERMS, 0)
        fun createZonalHarmonicTermsVector(builder: FlatBufferBuilder, data: ByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i])
            }
            return builder.endVector()
        }
        fun startZonalHarmonicTermsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun endpropagatorConfig(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
