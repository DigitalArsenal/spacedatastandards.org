// automatically generated by the FlatBuffers compiler, do not modify

/**
 * Non-registered or local use frames
 */
@Suppress("unused")
class CustomFrame private constructor() {
    companion object {
        /**
         * Earth-Centered-Earth-Fixed: Rotates with Earth. X-axis at prime meridian, Y eastward, Z towards North Pole.
         */
        const val ECEF: Byte = 0
        /**
         * True Equator Mean Equinox of Date, same as TEMEOFDATE: Dynamic frame for SGP4 satellite tracking.
         */
        const val TEME: Byte = 1
        /**
         * True Equator Mean Equinox of Epoch: Static version of TEMEOFDATE at a given epoch.
         */
        const val TEMEOFEPOCH: Byte = 2
        /**
         * East-North-Up: Local tangent plane for surface points.
         */
        const val ENU: Byte = 3
        /**
         * North-East-Down: Aviation/navigation frame aligned with gravity.
         */
        const val NED: Byte = 4
        /**
         * North-East-Up: Local tangent plane variant with Up positive.
         */
        const val NEU: Byte = 5
        /**
         * Radial-Intrack-Cross-track: Spacecraft orientation aligned with orbit.
         */
        const val RIC: Byte = 6
        /**
         * Radial-Transverse-Normal: Orbit frame for spacecraft dynamics.
         */
        const val RTN: Byte = 7
        /**
         * Transverse-Velocity-Normal: Alternative orbit frame.
         */
        const val TVN: Byte = 8
        /**
         * Vehicle-Velocity-Local-Horizontal: Orbit frame aligned with velocity vector.
         */
        const val VVLH: Byte = 9
        /**
         * Radial-Tangential-Cross-track: Equivalent to LVLH/QSW.
         */
        const val QSW: Byte = 10
        /**
         * Local Tangent Plane: Surface-fixed frame centered on a point.
         */
        const val LTP: Byte = 11
        /**
         * Local Vertical-Local Horizontal: Z axis towards Earth center, X along velocity.
         */
        const val LVLH: Byte = 12
        /**
         * Polar-North-East: Surface coordinate frame.
         */
        const val PNE: Byte = 13
        /**
         * Body-Fixed Reference Frame: Fixed to a spacecraft or celestial object.
         */
        const val BRF: Byte = 14
        /**
         * Radial-Along-track-Cross-track: Same as RSW.
         */
        const val RSW: Byte = 15
        /**
         * Tangential-Normal-Cross-track: Same as TNW.
         */
        const val TNW: Byte = 16
        /**
         * Radial-UTF: Radial, Along-track, Cross-track variant.
         */
        const val UVW: Byte = 17
    }
}
