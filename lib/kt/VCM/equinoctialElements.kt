// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Equinoctial Elements
 */
@Suppress("unused")
class equinoctialElements : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : equinoctialElements {
        __init(_i, _bb)
        return this
    }
    val AF : Double
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val AG : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val L : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val N : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val CHI : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val PSI : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsequinoctialElements(_bb: ByteBuffer): equinoctialElements = getRootAsequinoctialElements(_bb, equinoctialElements())
        fun getRootAsequinoctialElements(_bb: ByteBuffer, obj: equinoctialElements): equinoctialElements {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createequinoctialElements(builder: FlatBufferBuilder, AF: Double, AG: Double, L: Double, N: Double, CHI: Double, PSI: Double) : Int {
            builder.startTable(6)
            addPSI(builder, PSI)
            addCHI(builder, CHI)
            addN(builder, N)
            addL(builder, L)
            addAG(builder, AG)
            addAF(builder, AF)
            return endequinoctialElements(builder)
        }
        fun startequinoctialElements(builder: FlatBufferBuilder) = builder.startTable(6)
        fun addAF(builder: FlatBufferBuilder, AF: Double) = builder.addDouble(0, AF, 0.0)
        fun addAG(builder: FlatBufferBuilder, AG: Double) = builder.addDouble(1, AG, 0.0)
        fun addL(builder: FlatBufferBuilder, L: Double) = builder.addDouble(2, L, 0.0)
        fun addN(builder: FlatBufferBuilder, N: Double) = builder.addDouble(3, N, 0.0)
        fun addCHI(builder: FlatBufferBuilder, CHI: Double) = builder.addDouble(4, CHI, 0.0)
        fun addPSI(builder: FlatBufferBuilder, PSI: Double) = builder.addDouble(5, PSI, 0.0)
        fun endequinoctialElements(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
