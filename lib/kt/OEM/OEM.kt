// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Orbit Ephemeris Message
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class OEM : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OEM {
        __init(_i, _bb)
        return this
    }
    /**
     * OEM Header
     * OEM Version
     */
    val CCSDS_OEM_VERS : Double
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Creation Date
     */
    val CREATION_DATE : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CREATION_DATEAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun CREATION_DATEInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Originator
     */
    val ORIGINATOR : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ORIGINATORAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun ORIGINATORInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Array of ephemeris data blocks
     */
    fun EPHEMERIS_DATA_BLOCK(j: Int) : ephemerisDataBlock? = EPHEMERIS_DATA_BLOCK(ephemerisDataBlock(), j)
    fun EPHEMERIS_DATA_BLOCK(obj: ephemerisDataBlock, j: Int) : ephemerisDataBlock? {
        val o = __offset(10)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val EPHEMERIS_DATA_BLOCKLength : Int
        get() {
            val o = __offset(10); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsOEM(_bb: ByteBuffer): OEM = getRootAsOEM(_bb, OEM())
        fun getRootAsOEM(_bb: ByteBuffer, obj: OEM): OEM {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createOEM(builder: FlatBufferBuilder, CCSDS_OEM_VERS: Double, CREATION_DATEOffset: Int, ORIGINATOROffset: Int, EPHEMERIS_DATA_BLOCKOffset: Int) : Int {
            builder.startTable(4)
            addCCSDS_OEM_VERS(builder, CCSDS_OEM_VERS)
            addEPHEMERIS_DATA_BLOCK(builder, EPHEMERIS_DATA_BLOCKOffset)
            addORIGINATOR(builder, ORIGINATOROffset)
            addCREATION_DATE(builder, CREATION_DATEOffset)
            return endOEM(builder)
        }
        fun startOEM(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addCCSDS_OEM_VERS(builder: FlatBufferBuilder, CCSDS_OEM_VERS: Double) = builder.addDouble(0, CCSDS_OEM_VERS, 0.0)
        fun addCREATION_DATE(builder: FlatBufferBuilder, CREATION_DATE: Int) = builder.addOffset(1, CREATION_DATE, 0)
        fun addORIGINATOR(builder: FlatBufferBuilder, ORIGINATOR: Int) = builder.addOffset(2, ORIGINATOR, 0)
        fun addEPHEMERIS_DATA_BLOCK(builder: FlatBufferBuilder, EPHEMERIS_DATA_BLOCK: Int) = builder.addOffset(3, EPHEMERIS_DATA_BLOCK, 0)
        fun createEphemerisDataBlockVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startEphemerisDataBlockVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endOEM(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
