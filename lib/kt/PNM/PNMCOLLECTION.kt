// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class PNMCOLLECTION : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PNMCOLLECTION {
        __init(_i, _bb)
        return this
    }
    fun RECORDS(j: Int) : PNM? = RECORDS(PNM(), j)
    fun RECORDS(obj: PNM, j: Int) : PNM? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val RECORDSLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsPNMCOLLECTION(_bb: ByteBuffer): PNMCOLLECTION = getRootAsPNMCOLLECTION(_bb, PNMCOLLECTION())
        fun getRootAsPNMCOLLECTION(_bb: ByteBuffer, obj: PNMCOLLECTION): PNMCOLLECTION {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createPNMCOLLECTION(builder: FlatBufferBuilder, RECORDSOffset: Int) : Int {
            builder.startTable(1)
            addRECORDS(builder, RECORDSOffset)
            return endPNMCOLLECTION(builder)
        }
        fun startPNMCOLLECTION(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addRECORDS(builder: FlatBufferBuilder, RECORDS: Int) = builder.addOffset(0, RECORDS, 0)
        fun createRecordsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRecordsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endPNMCOLLECTION(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
