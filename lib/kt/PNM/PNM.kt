// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Publish Notification Message
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class PNM : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PNM {
        __init(_i, _bb)
        return this
    }
    /**
     * IPFS Content Identifier (CID)
     * The hash of a file stored on the InterPlanetary File System (IPFS).
     * Refer to the section on IPFS integration for details.
     */
    val IPFS_CID : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val IPFS_CIDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun IPFS_CIDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Ethereum Digital Signature
     * Digital signature of the IPFS CID using Ethereum's signing mechanism.
     * Refer to the Ethereum Blockchain integration section for details.
     */
    val ETH_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ETH_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun ETH_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Bitcoin Digital Signature
     * Digital signature of the IPFS CID using Bitcoin's signing mechanism.
     * Refer to the Bitcoin Blockchain integration section for details.
     */
    val BTC_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val BTC_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun BTC_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Litecoin Digital Signature
     * Digital signature of the IPFS CID using Litecoin's signing mechanism.
     * Refer to the Litecoin Blockchain integration section for details.
     */
    val LTC_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val LTC_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun LTC_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Ripple Digital Signature
     * Digital signature of the IPFS CID using Ripple's signing mechanism.
     * Refer to the Ripple Blockchain integration section for details.
     */
    val XRP_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val XRP_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun XRP_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Cardano Digital Signature
     * Digital signature of the IPFS CID using Cardano's signing mechanism.
     * Refer to the Cardano Blockchain integration section for details.
     */
    val ADA_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ADA_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun ADA_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Stellar Digital Signature
     * Digital signature of the IPFS CID using Stellar's signing mechanism.
     * Refer to the Stellar Blockchain integration section for details.
     */
    val XLM_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val XLM_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun XLM_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Dogecoin Digital Signature
     * Digital signature of the IPFS CID using Dogecoin's signing mechanism.
     * Refer to the Dogecoin Blockchain integration section for details.
     */
    val DOGE_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val DOGE_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun DOGE_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Monero Digital Signature
     * Digital signature of the IPFS CID using Monero's signing mechanism.
     * Refer to the Monero Blockchain integration section for details.
     */
    val XMR_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val XMR_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun XMR_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Polkadot Digital Signature
     * Digital signature of the IPFS CID using Polkadot's signing mechanism.
     * Refer to the Polkadot Blockchain integration section for details.
     */
    val DOT_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val DOT_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun DOT_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Filecoin Digital Signature
     * Digital signature of the IPFS CID using Filecoin's signing mechanism.
     * Refer to the Filecoin Blockchain integration section for details.
     */
    val FIL_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val FIL_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun FIL_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Tezos Digital Signature
     * Digital signature of the IPFS CID using Tezos's signing mechanism.
     * Refer to the Tezos Blockchain integration section for details.
     */
    val XTZ_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val XTZ_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun XTZ_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Cosmos Digital Signature
     * Digital signature of the IPFS CID using Cosmos's signing mechanism.
     * Refer to the Cosmos Blockchain integration section for details.
     */
    val ATOM_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ATOM_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun ATOM_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Tron Digital Signature
     * Digital signature of the IPFS CID using Tron's signing mechanism.
     * Refer to the Tron Blockchain integration section for details.
     */
    val TRX_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TRX_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun TRX_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Binance Coin Digital Signature
     * Digital signature of the IPFS CID using Binance Coin's signing mechanism.
     * Refer to the Binance Coin Blockchain integration section for details.
     */
    val BNB_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val BNB_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun BNB_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Avalanche Digital Signature
     * Digital signature of the IPFS CID using Avalanche's signing mechanism.
     * Refer to the Avalanche Blockchain integration section for details.
     */
    val AVAX_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val AVAX_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun AVAX_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Solana Digital Signature
     * Digital signature of the IPFS CID using Solana's signing mechanism.
     * Refer to the Solana Blockchain integration section for details.
     */
    val SOL_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SOL_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun SOL_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsPNM(_bb: ByteBuffer): PNM = getRootAsPNM(_bb, PNM())
        fun getRootAsPNM(_bb: ByteBuffer, obj: PNM): PNM {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createPNM(builder: FlatBufferBuilder, IPFS_CIDOffset: Int, ETH_DIGITAL_SIGNATUREOffset: Int, BTC_DIGITAL_SIGNATUREOffset: Int, LTC_DIGITAL_SIGNATUREOffset: Int, XRP_DIGITAL_SIGNATUREOffset: Int, ADA_DIGITAL_SIGNATUREOffset: Int, XLM_DIGITAL_SIGNATUREOffset: Int, DOGE_DIGITAL_SIGNATUREOffset: Int, XMR_DIGITAL_SIGNATUREOffset: Int, DOT_DIGITAL_SIGNATUREOffset: Int, FIL_DIGITAL_SIGNATUREOffset: Int, XTZ_DIGITAL_SIGNATUREOffset: Int, ATOM_DIGITAL_SIGNATUREOffset: Int, TRX_DIGITAL_SIGNATUREOffset: Int, BNB_DIGITAL_SIGNATUREOffset: Int, AVAX_DIGITAL_SIGNATUREOffset: Int, SOL_DIGITAL_SIGNATUREOffset: Int) : Int {
            builder.startTable(17)
            addSOL_DIGITAL_SIGNATURE(builder, SOL_DIGITAL_SIGNATUREOffset)
            addAVAX_DIGITAL_SIGNATURE(builder, AVAX_DIGITAL_SIGNATUREOffset)
            addBNB_DIGITAL_SIGNATURE(builder, BNB_DIGITAL_SIGNATUREOffset)
            addTRX_DIGITAL_SIGNATURE(builder, TRX_DIGITAL_SIGNATUREOffset)
            addATOM_DIGITAL_SIGNATURE(builder, ATOM_DIGITAL_SIGNATUREOffset)
            addXTZ_DIGITAL_SIGNATURE(builder, XTZ_DIGITAL_SIGNATUREOffset)
            addFIL_DIGITAL_SIGNATURE(builder, FIL_DIGITAL_SIGNATUREOffset)
            addDOT_DIGITAL_SIGNATURE(builder, DOT_DIGITAL_SIGNATUREOffset)
            addXMR_DIGITAL_SIGNATURE(builder, XMR_DIGITAL_SIGNATUREOffset)
            addDOGE_DIGITAL_SIGNATURE(builder, DOGE_DIGITAL_SIGNATUREOffset)
            addXLM_DIGITAL_SIGNATURE(builder, XLM_DIGITAL_SIGNATUREOffset)
            addADA_DIGITAL_SIGNATURE(builder, ADA_DIGITAL_SIGNATUREOffset)
            addXRP_DIGITAL_SIGNATURE(builder, XRP_DIGITAL_SIGNATUREOffset)
            addLTC_DIGITAL_SIGNATURE(builder, LTC_DIGITAL_SIGNATUREOffset)
            addBTC_DIGITAL_SIGNATURE(builder, BTC_DIGITAL_SIGNATUREOffset)
            addETH_DIGITAL_SIGNATURE(builder, ETH_DIGITAL_SIGNATUREOffset)
            addIPFS_CID(builder, IPFS_CIDOffset)
            return endPNM(builder)
        }
        fun startPNM(builder: FlatBufferBuilder) = builder.startTable(17)
        fun addIPFS_CID(builder: FlatBufferBuilder, IPFS_CID: Int) = builder.addOffset(0, IPFS_CID, 0)
        fun addETH_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, ETH_DIGITAL_SIGNATURE: Int) = builder.addOffset(1, ETH_DIGITAL_SIGNATURE, 0)
        fun addBTC_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, BTC_DIGITAL_SIGNATURE: Int) = builder.addOffset(2, BTC_DIGITAL_SIGNATURE, 0)
        fun addLTC_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, LTC_DIGITAL_SIGNATURE: Int) = builder.addOffset(3, LTC_DIGITAL_SIGNATURE, 0)
        fun addXRP_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, XRP_DIGITAL_SIGNATURE: Int) = builder.addOffset(4, XRP_DIGITAL_SIGNATURE, 0)
        fun addADA_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, ADA_DIGITAL_SIGNATURE: Int) = builder.addOffset(5, ADA_DIGITAL_SIGNATURE, 0)
        fun addXLM_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, XLM_DIGITAL_SIGNATURE: Int) = builder.addOffset(6, XLM_DIGITAL_SIGNATURE, 0)
        fun addDOGE_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, DOGE_DIGITAL_SIGNATURE: Int) = builder.addOffset(7, DOGE_DIGITAL_SIGNATURE, 0)
        fun addXMR_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, XMR_DIGITAL_SIGNATURE: Int) = builder.addOffset(8, XMR_DIGITAL_SIGNATURE, 0)
        fun addDOT_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, DOT_DIGITAL_SIGNATURE: Int) = builder.addOffset(9, DOT_DIGITAL_SIGNATURE, 0)
        fun addFIL_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, FIL_DIGITAL_SIGNATURE: Int) = builder.addOffset(10, FIL_DIGITAL_SIGNATURE, 0)
        fun addXTZ_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, XTZ_DIGITAL_SIGNATURE: Int) = builder.addOffset(11, XTZ_DIGITAL_SIGNATURE, 0)
        fun addATOM_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, ATOM_DIGITAL_SIGNATURE: Int) = builder.addOffset(12, ATOM_DIGITAL_SIGNATURE, 0)
        fun addTRX_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, TRX_DIGITAL_SIGNATURE: Int) = builder.addOffset(13, TRX_DIGITAL_SIGNATURE, 0)
        fun addBNB_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, BNB_DIGITAL_SIGNATURE: Int) = builder.addOffset(14, BNB_DIGITAL_SIGNATURE, 0)
        fun addAVAX_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, AVAX_DIGITAL_SIGNATURE: Int) = builder.addOffset(15, AVAX_DIGITAL_SIGNATURE, 0)
        fun addSOL_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, SOL_DIGITAL_SIGNATURE: Int) = builder.addOffset(16, SOL_DIGITAL_SIGNATURE, 0)
        fun endPNM(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
