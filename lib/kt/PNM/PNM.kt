// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Publish Notification Message
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class PNM : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PNM {
        __init(_i, _bb)
        return this
    }
    /**
     * Unencrypted PNM Details
     * This field contains the details of the Publish Notification Message without encryption.
     */
    val FILE : Detail? get() = FILE(Detail())
    fun FILE(obj: Detail) : Detail? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    /**
     * Encrypted PNM Details
     * This field contains the details of the Publish Notification Message with encryption.
     */
    val FILE_ENCRYPTED : Detail? get() = FILE_ENCRYPTED(Detail())
    fun FILE_ENCRYPTED(obj: Detail) : Detail? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsPNM(_bb: ByteBuffer): PNM = getRootAsPNM(_bb, PNM())
        fun getRootAsPNM(_bb: ByteBuffer, obj: PNM): PNM {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createPNM(builder: FlatBufferBuilder, FILEOffset: Int, FILE_ENCRYPTEDOffset: Int) : Int {
            builder.startTable(2)
            addFILE_ENCRYPTED(builder, FILE_ENCRYPTEDOffset)
            addFILE(builder, FILEOffset)
            return endPNM(builder)
        }
        fun startPNM(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addFILE(builder: FlatBufferBuilder, FILE: Int) = builder.addOffset(0, FILE, 0)
        fun addFILE_ENCRYPTED(builder: FlatBufferBuilder, FILE_ENCRYPTED: Int) = builder.addOffset(1, FILE_ENCRYPTED, 0)
        fun endPNM(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
