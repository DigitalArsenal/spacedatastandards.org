// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Publish Notification Message
 * This table includes a comprehensive set of cryptographic hashes and a digital signature for file publication.
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class PNM : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PNM {
        __init(_i, _bb)
        return this
    }
    /**
     * IPFS Content Identifier (CID)
     * The hash of a file stored on the InterPlanetary File System (IPFS).
     * Refer to the section on IPFS integration for details.
     */
    val IPFS_CID : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val IPFS_CIDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun IPFS_CIDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Ethereum Digital Signature
     * Digital signature of the IPFS file hash using Ethereum's signing mechanism.
     * Refer to the Ethereum Blockchain integration section for details.
     */
    val ETH_DIGITAL_SIGNATURE : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ETH_DIGITAL_SIGNATUREAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun ETH_DIGITAL_SIGNATUREInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * SHA-512 File Hash
     * SHA-512 hash of the file for additional security verification.
     * Detailed in the security features section of the document.
     */
    val SHA_512_FILE_HASH : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SHA_512_FILE_HASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun SHA_512_FILE_HASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * SHA-256 File Hash
     * SHA-256 hash of the file for additional security verification.
     * Detailed in the security features section of the document.
     */
    val SHA_256_FILE_HASH : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SHA_256_FILE_HASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun SHA_256_FILE_HASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * MD5 File Digest
     * MD5 digest of the file for backward compatibility with older systems.
     * Located in the legacy support section of the document.
     */
    val MD5_FILE_DIGEST : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val MD5_FILE_DIGESTAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun MD5_FILE_DIGESTInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * SHA-1 File Hash
     * SHA-1 hash of the file, used in certain legacy systems for compatibility.
     * Refer to the legacy systems integration section for more information.
     */
    val SHA_1_FILE_HASH : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SHA_1_FILE_HASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun SHA_1_FILE_HASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Argon2 File Hash
     * Argon2 hash of the file, providing state-of-the-art password hashing.
     * This is mentioned in the advanced security measures section.
     */
    val ARGON2_FILE_HASH : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ARGON2_FILE_HASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun ARGON2_FILE_HASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Blake2b File Hash
     * Blake2b hash of the file, known for high-speed cryptographic hashing.
     * Refer to the high-performance security solutions section.
     */
    val BLAKE2B_FILE_HASH : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val BLAKE2B_FILE_HASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun BLAKE2B_FILE_HASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * SHA-3 File Hash
     * SHA-3 hash of the file, offering a stronger alternative to SHA-2.
     * Located in the modern cryptographic standards section.
     */
    val SHA_3_FILE_HASH : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SHA_3_FILE_HASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun SHA_3_FILE_HASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * RIPEMD-160 File Hash
     * RIPEMD-160 hash of the file, often used in blockchain applications for address generation.
     * Discussed in the blockchain compatibility section.
     */
    val RIPEMD_160_FILE_HASH : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val RIPEMD_160_FILE_HASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun RIPEMD_160_FILE_HASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Whirlpool File Hash
     * Whirlpool hash of the file, designed for integrity protection and digital fingerprinting.
     * Refer to the data integrity and authentication section.
     */
    val WHIRLPOOL_FILE_HASH : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val WHIRLPOOL_FILE_HASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun WHIRLPOOL_FILE_HASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Tiger File Hash
     * Tiger hash of the file, optimized for fast hashing on 64-bit platforms.
     * Detailed in the high-speed cryptographic operations section.
     */
    val TIGER_FILE_HASH : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TIGER_FILE_HASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun TIGER_FILE_HASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Cyclic Redundancy Check (CRC) 32
     * Cyclic redundancy check with a length of 32 bits.
     * Refer to CRC section for more details.
     */
    val CRC32 : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CRC32AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun CRC32InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Adler-32 Checksum
     * Adler-32 checksum with a length of 32 bits.
     * Refer to the checksum section for more details.
     */
    val ADLER32_CHECKSUM : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ADLER32_CHECKSUMAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun ADLER32_CHECKSUMInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Universal Hash Function Family - Rabin Fingerprint
     * Variable-length hash function using Rabin fingerprinting.
     * Refer to the Universal hash function families section for details.
     */
    val RABIN_FINGERPRINT : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val RABIN_FINGERPRINTAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun RABIN_FINGERPRINTInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Non-Cryptographic Hash Function - Pearson Hashing
     * Non-cryptographic hash function with a length of 8 bits or more, using XOR or table lookup.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val PEARSON_HASHING : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val PEARSON_HASHINGAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun PEARSON_HASHINGInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Keyed Cryptographic Hash Function - BLAKE2
     * Keyed hash function (prefix-MAC) with variable length.
     * Refer to the Keyed cryptographic hash functions section for details.
     */
    val BLAKE2_KEYED_HASH : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val BLAKE2_KEYED_HASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun BLAKE2_KEYED_HASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Unkeyed Cryptographic Hash Function - BLAKE-256
     * Cryptographic hash function with a length of 256 bits, based on HAIFA structure.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val BLAKE_256 : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val BLAKE_256AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun BLAKE_256InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * CRC-8
     * Cyclic redundancy check with a length of 8 bits.
     * Refer to CRC section for more details.
     */
    val CRC8 : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CRC8AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun CRC8InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * CRC-16
     * Cyclic redundancy check with a length of 16 bits.
     * Refer to CRC section for more details.
     */
    val CRC16 : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CRC16AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun CRC16InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * CRC-64
     * Cyclic redundancy check with a length of 64 bits.
     * Refer to CRC section for more details.
     */
    val CRC64 : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CRC64AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun CRC64InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * BSD Checksum
     * BSD checksum with a length of 16 bits.
     * Refer to the checksum section for more details.
     */
    val BSD_CHECKSUM : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val BSD_CHECKSUMAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun BSD_CHECKSUMInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * SYSV Checksum
     * SYSV checksum with a length of 16 bits.
     * Refer to the checksum section for more details.
     */
    val SYSV_CHECKSUM : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SYSV_CHECKSUMAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun SYSV_CHECKSUMInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Sum8
     * Sum with a length of 8 bits.
     * Refer to the checksum section for more details.
     */
    val SUM8 : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SUM8AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun SUM8InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * Internet Checksum
     * Internet checksum with a length of 16 bits.
     * Refer to the checksum section for more details.
     */
    val INTERNET_CHECKSUM : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val INTERNET_CHECKSUMAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun INTERNET_CHECKSUMInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Sum24
     * Sum with a length of 24 bits.
     * Refer to the checksum section for more details.
     */
    val SUM24 : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SUM24AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun SUM24InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Sum32
     * Sum with a length of 32 bits.
     * Refer to the checksum section for more details.
     */
    val SUM32 : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SUM32AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun SUM32InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Fletcher-4
     * Sum with a length of 4 bits.
     * Refer to the checksum section for more details.
     */
    val FLETCHER_4 : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val FLETCHER_4AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun FLETCHER_4InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Fletcher-8
     * Sum with a length of 8 bits.
     * Refer to the checksum section for more details.
     */
    val FLETCHER_8 : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val FLETCHER_8AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun FLETCHER_8InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Fletcher-16
     * Sum with a length of 16 bits.
     * Refer to the checksum section for more details.
     */
    val FLETCHER_16 : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val FLETCHER_16AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun FLETCHER_16InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Fletcher-32
     * Sum with a length of 32 bits.
     * Refer to the checksum section for more details.
     */
    val FLETCHER_32 : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val FLETCHER_32AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun FLETCHER_32InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Luhn Algorithm
     * Luhn algorithm with a length of 1 decimal digit.
     * Refer to the checksum section for more details.
     */
    val LUNH_ALGORITHM : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val LUNH_ALGORITHMAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun LUNH_ALGORITHMInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Verhoeff Algorithm
     * Verhoeff algorithm with a length of 1 decimal digit.
     * Refer to the checksum section for more details.
     */
    val VERHOEFF_ALGORITHM : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val VERHOEFF_ALGORITHMAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun VERHOEFF_ALGORITHMInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * Damm Algorithm
     * Damm algorithm with a length of 1 decimal digit.
     * Refer to the checksum section for more details.
     */
    val DAMM_ALGORITHM : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val DAMM_ALGORITHMAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun DAMM_ALGORITHMInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * Universal Hash Function Family - Tabulation Hashing
     * Variable-length hash function using tabulation hashing.
     * Refer to the Universal hash function families section for details.
     */
    val TABULATION_HASHING : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TABULATION_HASHINGAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun TABULATION_HASHINGInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Universal Hash Function Family - Universal One-Way Hash Function
     * Universal one-way hash function with arbitrary length.
     * Refer to the Universal hash function families section for details.
     */
    val UNIVERSAL_ONE_WAY_HASH_FUNCTION : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val UNIVERSAL_ONE_WAY_HASH_FUNCTIONAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun UNIVERSAL_ONE_WAY_HASH_FUNCTIONInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Universal Hash Function Family - Zobrist Hashing
     * Variable-length hash function using Zobrist hashing.
     * Refer to the Universal hash function families section for details.
     */
    val ZOBRIST_HASHING : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ZOBRIST_HASHINGAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun ZOBRIST_HASHINGInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Non-Cryptographic Hash Function - Paul Hsieh's SuperFastHash
     * Non-cryptographic hash function with a length of 32 bits.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val PAUL_HSIEHS_SUPERFASTHASH : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val PAUL_HSIEHS_SUPERFASTHASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun PAUL_HSIEHS_SUPERFASTHASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * Non-Cryptographic Hash Function - Buzhash
     * Non-cryptographic hash function with variable length.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val BUZHASH : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val BUZHASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun BUZHASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * Non-Cryptographic Hash Function - Fowler-Noll-Vo Hash Function (FNV Hash)
     * Non-cryptographic hash function with variable length.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val FNV_HASH : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val FNV_HASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun FNV_HASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Non-Cryptographic Hash Function - Jenkins Hash Function
     * Non-cryptographic hash function with a length of 32 or 64 bits.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val JENKINS_HASH_FUNCTION : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val JENKINS_HASH_FUNCTIONAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun JENKINS_HASH_FUNCTIONInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Non-Cryptographic Hash Function - Bernstein's Hash (djb2)
     * Non-cryptographic hash function with a length of 32 or 64 bits.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val BERNSTEINS_HASH_DJB2 : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val BERNSTEINS_HASH_DJB2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun BERNSTEINS_HASH_DJB2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * Non-Cryptographic Hash Function - PJW Hash / Elf Hash
     * Non-cryptographic hash function with a length of 32 or 64 bits.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val PJW_HASH_ELF_HASH : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val PJW_HASH_ELF_HASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun PJW_HASH_ELF_HASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * Non-Cryptographic Hash Function - MurmurHash
     * Non-cryptographic hash function with a length of 32, 64, or 128 bits.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val MURMURHASH : String?
        get() {
            val o = __offset(90)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val MURMURHASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(90, 1)
    fun MURMURHASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 90, 1)
    /**
     * Non-Cryptographic Hash Function - Fast-Hash
     * Non-cryptographic hash function with a length of 32 or 64 bits.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val FAST_HASH : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val FAST_HASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun FAST_HASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * Non-Cryptographic Hash Function - SpookyHash
     * Non-cryptographic hash function with a length of 32, 64, or 128 bits.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val SPOOKYHASH : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SPOOKYHASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun SPOOKYHASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * Non-Cryptographic Hash Function - CityHash
     * Non-cryptographic hash function with a length of 32, 64, 128, or 256 bits.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val CITYHASH : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val CITYHASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun CITYHASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Non-Cryptographic Hash Function - FarmHash
     * Non-cryptographic hash function with a length of 32, 64, or 128 bits.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val FARMHASH : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val FARMHASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun FARMHASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    /**
     * Non-Cryptographic Hash Function - MetroHash
     * Non-cryptographic hash function with a length of 64 or 128 bits.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val METROHASH : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val METROHASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun METROHASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Non-Cryptographic Hash Function - Numeric Hash (nhash)
     * Non-cryptographic hash function with variable length.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val NUMERIC_HASH : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val NUMERIC_HASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun NUMERIC_HASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Non-Cryptographic Hash Function - xxHash
     * Non-cryptographic hash function with a length of 32, 64, or 128 bits.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val XXHASH : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val XXHASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun XXHASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * Non-Cryptographic Hash Function - t1ha (Fast Positive Hash)
     * Non-cryptographic hash function with a length of 64 or 128 bits.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val T1HA : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val T1HAAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun T1HAInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * Non-Cryptographic Hash Function - GxHash
     * Non-cryptographic hash function with a length of 32, 64, or 128 bits.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val GXHASH : String?
        get() {
            val o = __offset(108)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val GXHASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 1)
    fun GXHASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 1)
    /**
     * Non-Cryptographic Hash Function - pHash
     * Non-cryptographic hash function with fixed or variable length.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val PHASH : String?
        get() {
            val o = __offset(110)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val PHASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(110, 1)
    fun PHASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 110, 1)
    /**
     * Non-Cryptographic Hash Function - dhash
     * Non-cryptographic hash function with a length of 128 bits.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val DHASH : String?
        get() {
            val o = __offset(112)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val DHASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(112, 1)
    fun DHASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 112, 1)
    /**
     * Non-Cryptographic Hash Function - SDBM
     * Non-cryptographic hash function with a length of 32 or 64 bits.
     * Refer to the Non-cryptographic hash functions section for details.
     */
    val SDBM : String?
        get() {
            val o = __offset(114)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SDBMAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(114, 1)
    fun SDBMInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 114, 1)
    /**
     * Unkeyed Cryptographic Hash Function - OSDB Hash
     * Cryptographic hash function with a length of 64 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val OSDB_HASH : String?
        get() {
            val o = __offset(116)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val OSDB_HASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(116, 1)
    fun OSDB_HASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 116, 1)
    /**
     * Unkeyed Cryptographic Hash Function - komihash
     * Cryptographic hash function with a length of 64 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val KOMIHASH : String?
        get() {
            val o = __offset(118)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val KOMIHASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(118, 1)
    fun KOMIHASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 118, 1)
    /**
     * Keyed Cryptographic Hash Function - BLAKE3
     * Keyed hash function with arbitrary length.
     * Refer to the Keyed cryptographic hash functions section for details.
     */
    val BLAKE3 : String?
        get() {
            val o = __offset(120)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val BLAKE3AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(120, 1)
    fun BLAKE3InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 120, 1)
    /**
     * Unkeyed Cryptographic Hash Function - ECOH
     * Cryptographic hash function with a length of 224 to 512 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val ECOH : String?
        get() {
            val o = __offset(122)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ECOHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(122, 1)
    fun ECOHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 122, 1)
    /**
     * Unkeyed Cryptographic Hash Function - FSB
     * Cryptographic hash function with a length of 160 to 512 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val FSB : String?
        get() {
            val o = __offset(124)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val FSBAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(124, 1)
    fun FSBInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 124, 1)
    /**
     * Unkeyed Cryptographic Hash Function - GOST
     * Cryptographic hash function with a length of 256 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val GOST : String?
        get() {
            val o = __offset(126)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val GOSTAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(126, 1)
    fun GOSTInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 126, 1)
    /**
     * Unkeyed Cryptographic Hash Function - Grøstl
     * Cryptographic hash function with a length of up to 512 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val GROSTL : String?
        get() {
            val o = __offset(128)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val GROSTLAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(128, 1)
    fun GROSTLInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 128, 1)
    /**
     * Unkeyed Cryptographic Hash Function - HAS-160
     * Cryptographic hash function with a length of 160 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val HAS_160 : String?
        get() {
            val o = __offset(130)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val HAS_160AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(130, 1)
    fun HAS_160InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 130, 1)
    /**
     * Unkeyed Cryptographic Hash Function - HAVAL
     * Cryptographic hash function with a length of 128 to 256 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val HAVAL : String?
        get() {
            val o = __offset(132)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val HAVALAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(132, 1)
    fun HAVALInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 132, 1)
    /**
     * Unkeyed Cryptographic Hash Function - JH
     * Cryptographic hash function with a length of 224 to 512 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val JH : String?
        get() {
            val o = __offset(134)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val JHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(134, 1)
    fun JHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 134, 1)
    /**
     * Unkeyed Cryptographic Hash Function - LSH
     * Cryptographic hash function with a length of 256 to 512 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val LSH : String?
        get() {
            val o = __offset(136)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val LSHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(136, 1)
    fun LSHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 136, 1)
    /**
     * Unkeyed Cryptographic Hash Function - MD2
     * Cryptographic hash function with a length of 128 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val MD2 : String?
        get() {
            val o = __offset(138)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val MD2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(138, 1)
    fun MD2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 138, 1)
    /**
     * Unkeyed Cryptographic Hash Function - MD4
     * Cryptographic hash function with a length of 128 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val MD4 : String?
        get() {
            val o = __offset(140)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val MD4AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(140, 1)
    fun MD4InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 140, 1)
    /**
     * Unkeyed Cryptographic Hash Function - MD5
     * Cryptographic hash function with a length of 128 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val MD5 : String?
        get() {
            val o = __offset(142)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val MD5AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(142, 1)
    fun MD5InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 142, 1)
    /**
     * Unkeyed Cryptographic Hash Function - MD6
     * Cryptographic hash function with a length of up to 512 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val MD6 : String?
        get() {
            val o = __offset(144)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val MD6AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(144, 1)
    fun MD6InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 144, 1)
    /**
     * Unkeyed Cryptographic Hash Function - RadioGatún
     * Cryptographic hash function with arbitrary length.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val RADIOGATUN : String?
        get() {
            val o = __offset(146)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val RADIOGATUNAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(146, 1)
    fun RADIOGATUNInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 146, 1)
    /**
     * Unkeyed Cryptographic Hash Function - RIPEMD
     * Cryptographic hash function with a length of 128 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val RIPEMD : String?
        get() {
            val o = __offset(148)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val RIPEMDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(148, 1)
    fun RIPEMDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 148, 1)
    /**
     * Unkeyed Cryptographic Hash Function - RIPEMD-128
     * Cryptographic hash function with a length of 128 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val RIPEMD_128 : String?
        get() {
            val o = __offset(150)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val RIPEMD_128AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(150, 1)
    fun RIPEMD_128InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 150, 1)
    /**
     * Unkeyed Cryptographic Hash Function - RIPEMD-256
     * Cryptographic hash function with a length of 256 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val RIPEMD_256 : String?
        get() {
            val o = __offset(152)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val RIPEMD_256AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(152, 1)
    fun RIPEMD_256InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 152, 1)
    /**
     * Unkeyed Cryptographic Hash Function - RIPEMD-320
     * Cryptographic hash function with a length of 320 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val RIPEMD_320 : String?
        get() {
            val o = __offset(154)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val RIPEMD_320AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(154, 1)
    fun RIPEMD_320InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 154, 1)
    /**
     * Unkeyed Cryptographic Hash Function - SHA-1
     * Cryptographic hash function with a length of 160 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val SHA_1 : String?
        get() {
            val o = __offset(156)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SHA_1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(156, 1)
    fun SHA_1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 156, 1)
    /**
     * Unkeyed Cryptographic Hash Function - SHA-224
     * Cryptographic hash function with a length of 224 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val SHA_224 : String?
        get() {
            val o = __offset(158)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SHA_224AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(158, 1)
    fun SHA_224InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 158, 1)
    /**
     * Unkeyed Cryptographic Hash Function - SHA-256
     * Cryptographic hash function with a length of 256 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val SHA_256 : String?
        get() {
            val o = __offset(160)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SHA_256AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(160, 1)
    fun SHA_256InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 160, 1)
    /**
     * Unkeyed Cryptographic Hash Function - SHA-384
     * Cryptographic hash function with a length of 384 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val SHA_384 : String?
        get() {
            val o = __offset(162)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SHA_384AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(162, 1)
    fun SHA_384InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 162, 1)
    /**
     * Unkeyed Cryptographic Hash Function - SHA-512
     * Cryptographic hash function with a length of 512 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val SHA_512 : String?
        get() {
            val o = __offset(164)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SHA_512AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(164, 1)
    fun SHA_512InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 164, 1)
    /**
     * Unkeyed Cryptographic Hash Function - SHA-3
     * Cryptographic hash function with arbitrary length.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val SHA_3 : String?
        get() {
            val o = __offset(166)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SHA_3AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(166, 1)
    fun SHA_3InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 166, 1)
    /**
     * Unkeyed Cryptographic Hash Function - Skein
     * Cryptographic hash function with arbitrary length.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val SKEIN : String?
        get() {
            val o = __offset(168)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SKEINAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(168, 1)
    fun SKEINInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 168, 1)
    /**
     * Unkeyed Cryptographic Hash Function - Snefru
     * Cryptographic hash function with a length of 128 or 256 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val SNEFRU : String?
        get() {
            val o = __offset(170)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SNEFRUAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(170, 1)
    fun SNEFRUInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 170, 1)
    /**
     * Unkeyed Cryptographic Hash Function - Spectral Hash
     * Cryptographic hash function with a length of 512 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val SPECTRAL_HASH : String?
        get() {
            val o = __offset(172)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SPECTRAL_HASHAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(172, 1)
    fun SPECTRAL_HASHInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 172, 1)
    /**
     * Unkeyed Cryptographic Hash Function - Streebog
     * Cryptographic hash function with a length of 256 or 512 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val STREEBOG : String?
        get() {
            val o = __offset(174)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val STREEBOGAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(174, 1)
    fun STREEBOGInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 174, 1)
    /**
     * Unkeyed Cryptographic Hash Function - SWIFFT
     * Cryptographic hash function with a length of 512 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val SWIFFT : String?
        get() {
            val o = __offset(176)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val SWIFFTAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(176, 1)
    fun SWIFFTInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 176, 1)
    /**
     * Unkeyed Cryptographic Hash Function - Tiger
     * Cryptographic hash function with a length of 192 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val TIGER : String?
        get() {
            val o = __offset(178)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val TIGERAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(178, 1)
    fun TIGERInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 178, 1)
    /**
     * Unkeyed Cryptographic Hash Function - Whirlpool
     * Cryptographic hash function with a length of 512 bits.
     * Refer to the Unkeyed cryptographic hash functions section for details.
     */
    val WHIRLPOOL : String?
        get() {
            val o = __offset(180)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val WHIRLPOOLAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(180, 1)
    fun WHIRLPOOLInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 180, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsPNM(_bb: ByteBuffer): PNM = getRootAsPNM(_bb, PNM())
        fun getRootAsPNM(_bb: ByteBuffer, obj: PNM): PNM {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun PNMBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "$PNM")
        fun createPNM(builder: FlatBufferBuilder, IPFS_CIDOffset: Int, ETH_DIGITAL_SIGNATUREOffset: Int, SHA_512_FILE_HASHOffset: Int, SHA_256_FILE_HASHOffset: Int, MD5_FILE_DIGESTOffset: Int, SHA_1_FILE_HASHOffset: Int, ARGON2_FILE_HASHOffset: Int, BLAKE2B_FILE_HASHOffset: Int, SHA_3_FILE_HASHOffset: Int, RIPEMD_160_FILE_HASHOffset: Int, WHIRLPOOL_FILE_HASHOffset: Int, TIGER_FILE_HASHOffset: Int, CRC32Offset: Int, ADLER32_CHECKSUMOffset: Int, RABIN_FINGERPRINTOffset: Int, PEARSON_HASHINGOffset: Int, BLAKE2_KEYED_HASHOffset: Int, BLAKE_256Offset: Int, CRC8Offset: Int, CRC16Offset: Int, CRC64Offset: Int, BSD_CHECKSUMOffset: Int, SYSV_CHECKSUMOffset: Int, SUM8Offset: Int, INTERNET_CHECKSUMOffset: Int, SUM24Offset: Int, SUM32Offset: Int, FLETCHER_4Offset: Int, FLETCHER_8Offset: Int, FLETCHER_16Offset: Int, FLETCHER_32Offset: Int, LUNH_ALGORITHMOffset: Int, VERHOEFF_ALGORITHMOffset: Int, DAMM_ALGORITHMOffset: Int, TABULATION_HASHINGOffset: Int, UNIVERSAL_ONE_WAY_HASH_FUNCTIONOffset: Int, ZOBRIST_HASHINGOffset: Int, PAUL_HSIEHS_SUPERFASTHASHOffset: Int, BUZHASHOffset: Int, FNV_HASHOffset: Int, JENKINS_HASH_FUNCTIONOffset: Int, BERNSTEINS_HASH_DJB2Offset: Int, PJW_HASH_ELF_HASHOffset: Int, MURMURHASHOffset: Int, FAST_HASHOffset: Int, SPOOKYHASHOffset: Int, CITYHASHOffset: Int, FARMHASHOffset: Int, METROHASHOffset: Int, NUMERIC_HASHOffset: Int, XXHASHOffset: Int, T1HAOffset: Int, GXHASHOffset: Int, PHASHOffset: Int, DHASHOffset: Int, SDBMOffset: Int, OSDB_HASHOffset: Int, KOMIHASHOffset: Int, BLAKE3Offset: Int, ECOHOffset: Int, FSBOffset: Int, GOSTOffset: Int, GROSTLOffset: Int, HAS_160Offset: Int, HAVALOffset: Int, JHOffset: Int, LSHOffset: Int, MD2Offset: Int, MD4Offset: Int, MD5Offset: Int, MD6Offset: Int, RADIOGATUNOffset: Int, RIPEMDOffset: Int, RIPEMD_128Offset: Int, RIPEMD_256Offset: Int, RIPEMD_320Offset: Int, SHA_1Offset: Int, SHA_224Offset: Int, SHA_256Offset: Int, SHA_384Offset: Int, SHA_512Offset: Int, SHA_3Offset: Int, SKEINOffset: Int, SNEFRUOffset: Int, SPECTRAL_HASHOffset: Int, STREEBOGOffset: Int, SWIFFTOffset: Int, TIGEROffset: Int, WHIRLPOOLOffset: Int) : Int {
            builder.startTable(89)
            addWHIRLPOOL(builder, WHIRLPOOLOffset)
            addTIGER(builder, TIGEROffset)
            addSWIFFT(builder, SWIFFTOffset)
            addSTREEBOG(builder, STREEBOGOffset)
            addSPECTRAL_HASH(builder, SPECTRAL_HASHOffset)
            addSNEFRU(builder, SNEFRUOffset)
            addSKEIN(builder, SKEINOffset)
            addSHA_3(builder, SHA_3Offset)
            addSHA_512(builder, SHA_512Offset)
            addSHA_384(builder, SHA_384Offset)
            addSHA_256(builder, SHA_256Offset)
            addSHA_224(builder, SHA_224Offset)
            addSHA_1(builder, SHA_1Offset)
            addRIPEMD_320(builder, RIPEMD_320Offset)
            addRIPEMD_256(builder, RIPEMD_256Offset)
            addRIPEMD_128(builder, RIPEMD_128Offset)
            addRIPEMD(builder, RIPEMDOffset)
            addRADIOGATUN(builder, RADIOGATUNOffset)
            addMD6(builder, MD6Offset)
            addMD5(builder, MD5Offset)
            addMD4(builder, MD4Offset)
            addMD2(builder, MD2Offset)
            addLSH(builder, LSHOffset)
            addJH(builder, JHOffset)
            addHAVAL(builder, HAVALOffset)
            addHAS_160(builder, HAS_160Offset)
            addGROSTL(builder, GROSTLOffset)
            addGOST(builder, GOSTOffset)
            addFSB(builder, FSBOffset)
            addECOH(builder, ECOHOffset)
            addBLAKE3(builder, BLAKE3Offset)
            addKOMIHASH(builder, KOMIHASHOffset)
            addOSDB_HASH(builder, OSDB_HASHOffset)
            addSDBM(builder, SDBMOffset)
            addDHASH(builder, DHASHOffset)
            addPHASH(builder, PHASHOffset)
            addGXHASH(builder, GXHASHOffset)
            addT1HA(builder, T1HAOffset)
            addXXHASH(builder, XXHASHOffset)
            addNUMERIC_HASH(builder, NUMERIC_HASHOffset)
            addMETROHASH(builder, METROHASHOffset)
            addFARMHASH(builder, FARMHASHOffset)
            addCITYHASH(builder, CITYHASHOffset)
            addSPOOKYHASH(builder, SPOOKYHASHOffset)
            addFAST_HASH(builder, FAST_HASHOffset)
            addMURMURHASH(builder, MURMURHASHOffset)
            addPJW_HASH_ELF_HASH(builder, PJW_HASH_ELF_HASHOffset)
            addBERNSTEINS_HASH_DJB2(builder, BERNSTEINS_HASH_DJB2Offset)
            addJENKINS_HASH_FUNCTION(builder, JENKINS_HASH_FUNCTIONOffset)
            addFNV_HASH(builder, FNV_HASHOffset)
            addBUZHASH(builder, BUZHASHOffset)
            addPAUL_HSIEHS_SUPERFASTHASH(builder, PAUL_HSIEHS_SUPERFASTHASHOffset)
            addZOBRIST_HASHING(builder, ZOBRIST_HASHINGOffset)
            addUNIVERSAL_ONE_WAY_HASH_FUNCTION(builder, UNIVERSAL_ONE_WAY_HASH_FUNCTIONOffset)
            addTABULATION_HASHING(builder, TABULATION_HASHINGOffset)
            addDAMM_ALGORITHM(builder, DAMM_ALGORITHMOffset)
            addVERHOEFF_ALGORITHM(builder, VERHOEFF_ALGORITHMOffset)
            addLUNH_ALGORITHM(builder, LUNH_ALGORITHMOffset)
            addFLETCHER_32(builder, FLETCHER_32Offset)
            addFLETCHER_16(builder, FLETCHER_16Offset)
            addFLETCHER_8(builder, FLETCHER_8Offset)
            addFLETCHER_4(builder, FLETCHER_4Offset)
            addSUM32(builder, SUM32Offset)
            addSUM24(builder, SUM24Offset)
            addINTERNET_CHECKSUM(builder, INTERNET_CHECKSUMOffset)
            addSUM8(builder, SUM8Offset)
            addSYSV_CHECKSUM(builder, SYSV_CHECKSUMOffset)
            addBSD_CHECKSUM(builder, BSD_CHECKSUMOffset)
            addCRC64(builder, CRC64Offset)
            addCRC16(builder, CRC16Offset)
            addCRC8(builder, CRC8Offset)
            addBLAKE_256(builder, BLAKE_256Offset)
            addBLAKE2_KEYED_HASH(builder, BLAKE2_KEYED_HASHOffset)
            addPEARSON_HASHING(builder, PEARSON_HASHINGOffset)
            addRABIN_FINGERPRINT(builder, RABIN_FINGERPRINTOffset)
            addADLER32_CHECKSUM(builder, ADLER32_CHECKSUMOffset)
            addCRC32(builder, CRC32Offset)
            addTIGER_FILE_HASH(builder, TIGER_FILE_HASHOffset)
            addWHIRLPOOL_FILE_HASH(builder, WHIRLPOOL_FILE_HASHOffset)
            addRIPEMD_160_FILE_HASH(builder, RIPEMD_160_FILE_HASHOffset)
            addSHA_3_FILE_HASH(builder, SHA_3_FILE_HASHOffset)
            addBLAKE2B_FILE_HASH(builder, BLAKE2B_FILE_HASHOffset)
            addARGON2_FILE_HASH(builder, ARGON2_FILE_HASHOffset)
            addSHA_1_FILE_HASH(builder, SHA_1_FILE_HASHOffset)
            addMD5_FILE_DIGEST(builder, MD5_FILE_DIGESTOffset)
            addSHA_256_FILE_HASH(builder, SHA_256_FILE_HASHOffset)
            addSHA_512_FILE_HASH(builder, SHA_512_FILE_HASHOffset)
            addETH_DIGITAL_SIGNATURE(builder, ETH_DIGITAL_SIGNATUREOffset)
            addIPFS_CID(builder, IPFS_CIDOffset)
            return endPNM(builder)
        }
        fun startPNM(builder: FlatBufferBuilder) = builder.startTable(89)
        fun addIPFS_CID(builder: FlatBufferBuilder, IPFS_CID: Int) = builder.addOffset(0, IPFS_CID, 0)
        fun addETH_DIGITAL_SIGNATURE(builder: FlatBufferBuilder, ETH_DIGITAL_SIGNATURE: Int) = builder.addOffset(1, ETH_DIGITAL_SIGNATURE, 0)
        fun addSHA_512_FILE_HASH(builder: FlatBufferBuilder, SHA_512_FILE_HASH: Int) = builder.addOffset(2, SHA_512_FILE_HASH, 0)
        fun addSHA_256_FILE_HASH(builder: FlatBufferBuilder, SHA_256_FILE_HASH: Int) = builder.addOffset(3, SHA_256_FILE_HASH, 0)
        fun addMD5_FILE_DIGEST(builder: FlatBufferBuilder, MD5_FILE_DIGEST: Int) = builder.addOffset(4, MD5_FILE_DIGEST, 0)
        fun addSHA_1_FILE_HASH(builder: FlatBufferBuilder, SHA_1_FILE_HASH: Int) = builder.addOffset(5, SHA_1_FILE_HASH, 0)
        fun addARGON2_FILE_HASH(builder: FlatBufferBuilder, ARGON2_FILE_HASH: Int) = builder.addOffset(6, ARGON2_FILE_HASH, 0)
        fun addBLAKE2B_FILE_HASH(builder: FlatBufferBuilder, BLAKE2B_FILE_HASH: Int) = builder.addOffset(7, BLAKE2B_FILE_HASH, 0)
        fun addSHA_3_FILE_HASH(builder: FlatBufferBuilder, SHA_3_FILE_HASH: Int) = builder.addOffset(8, SHA_3_FILE_HASH, 0)
        fun addRIPEMD_160_FILE_HASH(builder: FlatBufferBuilder, RIPEMD_160_FILE_HASH: Int) = builder.addOffset(9, RIPEMD_160_FILE_HASH, 0)
        fun addWHIRLPOOL_FILE_HASH(builder: FlatBufferBuilder, WHIRLPOOL_FILE_HASH: Int) = builder.addOffset(10, WHIRLPOOL_FILE_HASH, 0)
        fun addTIGER_FILE_HASH(builder: FlatBufferBuilder, TIGER_FILE_HASH: Int) = builder.addOffset(11, TIGER_FILE_HASH, 0)
        fun addCRC32(builder: FlatBufferBuilder, CRC32: Int) = builder.addOffset(12, CRC32, 0)
        fun addADLER32_CHECKSUM(builder: FlatBufferBuilder, ADLER32_CHECKSUM: Int) = builder.addOffset(13, ADLER32_CHECKSUM, 0)
        fun addRABIN_FINGERPRINT(builder: FlatBufferBuilder, RABIN_FINGERPRINT: Int) = builder.addOffset(14, RABIN_FINGERPRINT, 0)
        fun addPEARSON_HASHING(builder: FlatBufferBuilder, PEARSON_HASHING: Int) = builder.addOffset(15, PEARSON_HASHING, 0)
        fun addBLAKE2_KEYED_HASH(builder: FlatBufferBuilder, BLAKE2_KEYED_HASH: Int) = builder.addOffset(16, BLAKE2_KEYED_HASH, 0)
        fun addBLAKE_256(builder: FlatBufferBuilder, BLAKE_256: Int) = builder.addOffset(17, BLAKE_256, 0)
        fun addCRC8(builder: FlatBufferBuilder, CRC8: Int) = builder.addOffset(18, CRC8, 0)
        fun addCRC16(builder: FlatBufferBuilder, CRC16: Int) = builder.addOffset(19, CRC16, 0)
        fun addCRC64(builder: FlatBufferBuilder, CRC64: Int) = builder.addOffset(20, CRC64, 0)
        fun addBSD_CHECKSUM(builder: FlatBufferBuilder, BSD_CHECKSUM: Int) = builder.addOffset(21, BSD_CHECKSUM, 0)
        fun addSYSV_CHECKSUM(builder: FlatBufferBuilder, SYSV_CHECKSUM: Int) = builder.addOffset(22, SYSV_CHECKSUM, 0)
        fun addSUM8(builder: FlatBufferBuilder, SUM8: Int) = builder.addOffset(23, SUM8, 0)
        fun addINTERNET_CHECKSUM(builder: FlatBufferBuilder, INTERNET_CHECKSUM: Int) = builder.addOffset(24, INTERNET_CHECKSUM, 0)
        fun addSUM24(builder: FlatBufferBuilder, SUM24: Int) = builder.addOffset(25, SUM24, 0)
        fun addSUM32(builder: FlatBufferBuilder, SUM32: Int) = builder.addOffset(26, SUM32, 0)
        fun addFLETCHER_4(builder: FlatBufferBuilder, FLETCHER_4: Int) = builder.addOffset(27, FLETCHER_4, 0)
        fun addFLETCHER_8(builder: FlatBufferBuilder, FLETCHER_8: Int) = builder.addOffset(28, FLETCHER_8, 0)
        fun addFLETCHER_16(builder: FlatBufferBuilder, FLETCHER_16: Int) = builder.addOffset(29, FLETCHER_16, 0)
        fun addFLETCHER_32(builder: FlatBufferBuilder, FLETCHER_32: Int) = builder.addOffset(30, FLETCHER_32, 0)
        fun addLUNH_ALGORITHM(builder: FlatBufferBuilder, LUNH_ALGORITHM: Int) = builder.addOffset(31, LUNH_ALGORITHM, 0)
        fun addVERHOEFF_ALGORITHM(builder: FlatBufferBuilder, VERHOEFF_ALGORITHM: Int) = builder.addOffset(32, VERHOEFF_ALGORITHM, 0)
        fun addDAMM_ALGORITHM(builder: FlatBufferBuilder, DAMM_ALGORITHM: Int) = builder.addOffset(33, DAMM_ALGORITHM, 0)
        fun addTABULATION_HASHING(builder: FlatBufferBuilder, TABULATION_HASHING: Int) = builder.addOffset(34, TABULATION_HASHING, 0)
        fun addUNIVERSAL_ONE_WAY_HASH_FUNCTION(builder: FlatBufferBuilder, UNIVERSAL_ONE_WAY_HASH_FUNCTION: Int) = builder.addOffset(35, UNIVERSAL_ONE_WAY_HASH_FUNCTION, 0)
        fun addZOBRIST_HASHING(builder: FlatBufferBuilder, ZOBRIST_HASHING: Int) = builder.addOffset(36, ZOBRIST_HASHING, 0)
        fun addPAUL_HSIEHS_SUPERFASTHASH(builder: FlatBufferBuilder, PAUL_HSIEHS_SUPERFASTHASH: Int) = builder.addOffset(37, PAUL_HSIEHS_SUPERFASTHASH, 0)
        fun addBUZHASH(builder: FlatBufferBuilder, BUZHASH: Int) = builder.addOffset(38, BUZHASH, 0)
        fun addFNV_HASH(builder: FlatBufferBuilder, FNV_HASH: Int) = builder.addOffset(39, FNV_HASH, 0)
        fun addJENKINS_HASH_FUNCTION(builder: FlatBufferBuilder, JENKINS_HASH_FUNCTION: Int) = builder.addOffset(40, JENKINS_HASH_FUNCTION, 0)
        fun addBERNSTEINS_HASH_DJB2(builder: FlatBufferBuilder, BERNSTEINS_HASH_DJB2: Int) = builder.addOffset(41, BERNSTEINS_HASH_DJB2, 0)
        fun addPJW_HASH_ELF_HASH(builder: FlatBufferBuilder, PJW_HASH_ELF_HASH: Int) = builder.addOffset(42, PJW_HASH_ELF_HASH, 0)
        fun addMURMURHASH(builder: FlatBufferBuilder, MURMURHASH: Int) = builder.addOffset(43, MURMURHASH, 0)
        fun addFAST_HASH(builder: FlatBufferBuilder, FAST_HASH: Int) = builder.addOffset(44, FAST_HASH, 0)
        fun addSPOOKYHASH(builder: FlatBufferBuilder, SPOOKYHASH: Int) = builder.addOffset(45, SPOOKYHASH, 0)
        fun addCITYHASH(builder: FlatBufferBuilder, CITYHASH: Int) = builder.addOffset(46, CITYHASH, 0)
        fun addFARMHASH(builder: FlatBufferBuilder, FARMHASH: Int) = builder.addOffset(47, FARMHASH, 0)
        fun addMETROHASH(builder: FlatBufferBuilder, METROHASH: Int) = builder.addOffset(48, METROHASH, 0)
        fun addNUMERIC_HASH(builder: FlatBufferBuilder, NUMERIC_HASH: Int) = builder.addOffset(49, NUMERIC_HASH, 0)
        fun addXXHASH(builder: FlatBufferBuilder, XXHASH: Int) = builder.addOffset(50, XXHASH, 0)
        fun addT1HA(builder: FlatBufferBuilder, T1HA: Int) = builder.addOffset(51, T1HA, 0)
        fun addGXHASH(builder: FlatBufferBuilder, GXHASH: Int) = builder.addOffset(52, GXHASH, 0)
        fun addPHASH(builder: FlatBufferBuilder, PHASH: Int) = builder.addOffset(53, PHASH, 0)
        fun addDHASH(builder: FlatBufferBuilder, DHASH: Int) = builder.addOffset(54, DHASH, 0)
        fun addSDBM(builder: FlatBufferBuilder, SDBM: Int) = builder.addOffset(55, SDBM, 0)
        fun addOSDB_HASH(builder: FlatBufferBuilder, OSDB_HASH: Int) = builder.addOffset(56, OSDB_HASH, 0)
        fun addKOMIHASH(builder: FlatBufferBuilder, KOMIHASH: Int) = builder.addOffset(57, KOMIHASH, 0)
        fun addBLAKE3(builder: FlatBufferBuilder, BLAKE3: Int) = builder.addOffset(58, BLAKE3, 0)
        fun addECOH(builder: FlatBufferBuilder, ECOH: Int) = builder.addOffset(59, ECOH, 0)
        fun addFSB(builder: FlatBufferBuilder, FSB: Int) = builder.addOffset(60, FSB, 0)
        fun addGOST(builder: FlatBufferBuilder, GOST: Int) = builder.addOffset(61, GOST, 0)
        fun addGROSTL(builder: FlatBufferBuilder, GROSTL: Int) = builder.addOffset(62, GROSTL, 0)
        fun addHAS_160(builder: FlatBufferBuilder, HAS_160: Int) = builder.addOffset(63, HAS_160, 0)
        fun addHAVAL(builder: FlatBufferBuilder, HAVAL: Int) = builder.addOffset(64, HAVAL, 0)
        fun addJH(builder: FlatBufferBuilder, JH: Int) = builder.addOffset(65, JH, 0)
        fun addLSH(builder: FlatBufferBuilder, LSH: Int) = builder.addOffset(66, LSH, 0)
        fun addMD2(builder: FlatBufferBuilder, MD2: Int) = builder.addOffset(67, MD2, 0)
        fun addMD4(builder: FlatBufferBuilder, MD4: Int) = builder.addOffset(68, MD4, 0)
        fun addMD5(builder: FlatBufferBuilder, MD5: Int) = builder.addOffset(69, MD5, 0)
        fun addMD6(builder: FlatBufferBuilder, MD6: Int) = builder.addOffset(70, MD6, 0)
        fun addRADIOGATUN(builder: FlatBufferBuilder, RADIOGATUN: Int) = builder.addOffset(71, RADIOGATUN, 0)
        fun addRIPEMD(builder: FlatBufferBuilder, RIPEMD: Int) = builder.addOffset(72, RIPEMD, 0)
        fun addRIPEMD_128(builder: FlatBufferBuilder, RIPEMD_128: Int) = builder.addOffset(73, RIPEMD_128, 0)
        fun addRIPEMD_256(builder: FlatBufferBuilder, RIPEMD_256: Int) = builder.addOffset(74, RIPEMD_256, 0)
        fun addRIPEMD_320(builder: FlatBufferBuilder, RIPEMD_320: Int) = builder.addOffset(75, RIPEMD_320, 0)
        fun addSHA_1(builder: FlatBufferBuilder, SHA_1: Int) = builder.addOffset(76, SHA_1, 0)
        fun addSHA_224(builder: FlatBufferBuilder, SHA_224: Int) = builder.addOffset(77, SHA_224, 0)
        fun addSHA_256(builder: FlatBufferBuilder, SHA_256: Int) = builder.addOffset(78, SHA_256, 0)
        fun addSHA_384(builder: FlatBufferBuilder, SHA_384: Int) = builder.addOffset(79, SHA_384, 0)
        fun addSHA_512(builder: FlatBufferBuilder, SHA_512: Int) = builder.addOffset(80, SHA_512, 0)
        fun addSHA_3(builder: FlatBufferBuilder, SHA_3: Int) = builder.addOffset(81, SHA_3, 0)
        fun addSKEIN(builder: FlatBufferBuilder, SKEIN: Int) = builder.addOffset(82, SKEIN, 0)
        fun addSNEFRU(builder: FlatBufferBuilder, SNEFRU: Int) = builder.addOffset(83, SNEFRU, 0)
        fun addSPECTRAL_HASH(builder: FlatBufferBuilder, SPECTRAL_HASH: Int) = builder.addOffset(84, SPECTRAL_HASH, 0)
        fun addSTREEBOG(builder: FlatBufferBuilder, STREEBOG: Int) = builder.addOffset(85, STREEBOG, 0)
        fun addSWIFFT(builder: FlatBufferBuilder, SWIFFT: Int) = builder.addOffset(86, SWIFFT, 0)
        fun addTIGER(builder: FlatBufferBuilder, TIGER: Int) = builder.addOffset(87, TIGER, 0)
        fun addWHIRLPOOL(builder: FlatBufferBuilder, WHIRLPOOL: Int) = builder.addOffset(88, WHIRLPOOL, 0)
        fun endPNM(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishPNMBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "$PNM")
        fun finishSizePrefixedPNMBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "$PNM")
    }
}
