// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * IPFS CID and Account Identifier
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class IPFS_CID_ADDRESS : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : IPFS_CID_ADDRESS {
        __init(_i, _bb)
        return this
    }
    val IPFS_CID : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val IPFS_CIDAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun IPFS_CIDInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val KEY_ADDRESS : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val KEY_ADDRESSAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun KEY_ADDRESSInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsIPFS_CID_ADDRESS(_bb: ByteBuffer): IPFS_CID_ADDRESS = getRootAsIPFS_CID_ADDRESS(_bb, IPFS_CID_ADDRESS())
        fun getRootAsIPFS_CID_ADDRESS(_bb: ByteBuffer, obj: IPFS_CID_ADDRESS): IPFS_CID_ADDRESS {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createIPFS_CID_ADDRESS(builder: FlatBufferBuilder, IPFS_CIDOffset: Int, KEY_ADDRESSOffset: Int) : Int {
            builder.startTable(2)
            addKEY_ADDRESS(builder, KEY_ADDRESSOffset)
            addIPFS_CID(builder, IPFS_CIDOffset)
            return endIPFS_CID_ADDRESS(builder)
        }
        fun startIPFS_CID_ADDRESS(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addIPFS_CID(builder: FlatBufferBuilder, IPFS_CID: Int) = builder.addOffset(0, IPFS_CID, 0)
        fun addKEY_ADDRESS(builder: FlatBufferBuilder, KEY_ADDRESS: Int) = builder.addOffset(1, KEY_ADDRESS, 0)
        fun endIPFS_CID_ADDRESS(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
