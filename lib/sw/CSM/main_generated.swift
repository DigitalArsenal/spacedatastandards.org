// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  Conjunction Summary Message
public struct CSM: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$CSM" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: CSM.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case NORAD_CAT_ID_1 = 4
    case OBJECT_NAME_1 = 6
    case DSE_1 = 8
    case NORAD_CAT_ID_2 = 10
    case OBJECT_NAME_2 = 12
    case DSE_2 = 14
    case TCA = 16
    case TCA_RANGE = 18
    case TCA_RELATIVE_SPEED = 20
    case MAX_PROB = 22
    case DILUTION = 24
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  NORAD Catalog Number for the first object
  public var NORAD_CAT_ID_1: UInt32 { let o = _accessor.offset(VTOFFSET.NORAD_CAT_ID_1.v); return o == 0 ? 0 : _accessor.readBuffer(of: UInt32.self, at: o) }
  ///  Satellite name for the first object
  public var OBJECT_NAME_1: String? { let o = _accessor.offset(VTOFFSET.OBJECT_NAME_1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var OBJECT_NAME_1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.OBJECT_NAME_1.v) }
  ///  Days since epoch for the first object
  public var DSE_1: Double { let o = _accessor.offset(VTOFFSET.DSE_1.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  NORAD Catalog Number for the second object
  public var NORAD_CAT_ID_2: UInt32 { let o = _accessor.offset(VTOFFSET.NORAD_CAT_ID_2.v); return o == 0 ? 0 : _accessor.readBuffer(of: UInt32.self, at: o) }
  ///  Satellite name for the second object
  public var OBJECT_NAME_2: String? { let o = _accessor.offset(VTOFFSET.OBJECT_NAME_2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var OBJECT_NAME_2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.OBJECT_NAME_2.v) }
  ///  Days since epoch for the second object
  public var DSE_2: Double { let o = _accessor.offset(VTOFFSET.DSE_2.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Time of closest approach as a Unix timestamp
  public var TCA: Double { let o = _accessor.offset(VTOFFSET.TCA.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The distance or range between the two objects at TCA
  public var TCA_RANGE: Double { let o = _accessor.offset(VTOFFSET.TCA_RANGE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  The magnitude of the relative velocity at TCA
  public var TCA_RELATIVE_SPEED: Double { let o = _accessor.offset(VTOFFSET.TCA_RELATIVE_SPEED.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Maximum probability
  public var MAX_PROB: Double { let o = _accessor.offset(VTOFFSET.MAX_PROB.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Standard deviation that produces the maximum probability
  public var DILUTION: Double { let o = _accessor.offset(VTOFFSET.DILUTION.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  public static func startCSM(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 11) }
  public static func add(NORAD_CAT_ID_1: UInt32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: NORAD_CAT_ID_1, def: 0, at: VTOFFSET.NORAD_CAT_ID_1.p) }
  public static func add(OBJECT_NAME_1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: OBJECT_NAME_1, at: VTOFFSET.OBJECT_NAME_1.p) }
  public static func add(DSE_1: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: DSE_1, def: 0.0, at: VTOFFSET.DSE_1.p) }
  public static func add(NORAD_CAT_ID_2: UInt32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: NORAD_CAT_ID_2, def: 0, at: VTOFFSET.NORAD_CAT_ID_2.p) }
  public static func add(OBJECT_NAME_2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: OBJECT_NAME_2, at: VTOFFSET.OBJECT_NAME_2.p) }
  public static func add(DSE_2: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: DSE_2, def: 0.0, at: VTOFFSET.DSE_2.p) }
  public static func add(TCA: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: TCA, def: 0.0, at: VTOFFSET.TCA.p) }
  public static func add(TCA_RANGE: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: TCA_RANGE, def: 0.0, at: VTOFFSET.TCA_RANGE.p) }
  public static func add(TCA_RELATIVE_SPEED: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: TCA_RELATIVE_SPEED, def: 0.0, at: VTOFFSET.TCA_RELATIVE_SPEED.p) }
  public static func add(MAX_PROB: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MAX_PROB, def: 0.0, at: VTOFFSET.MAX_PROB.p) }
  public static func add(DILUTION: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: DILUTION, def: 0.0, at: VTOFFSET.DILUTION.p) }
  public static func endCSM(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createCSM(
    _ fbb: inout FlatBufferBuilder,
    NORAD_CAT_ID_1: UInt32 = 0,
    OBJECT_NAME_1Offset OBJECT_NAME_1: Offset = Offset(),
    DSE_1: Double = 0.0,
    NORAD_CAT_ID_2: UInt32 = 0,
    OBJECT_NAME_2Offset OBJECT_NAME_2: Offset = Offset(),
    DSE_2: Double = 0.0,
    TCA: Double = 0.0,
    TCA_RANGE: Double = 0.0,
    TCA_RELATIVE_SPEED: Double = 0.0,
    MAX_PROB: Double = 0.0,
    DILUTION: Double = 0.0
  ) -> Offset {
    let __start = CSM.startCSM(&fbb)
    CSM.add(NORAD_CAT_ID_1: NORAD_CAT_ID_1, &fbb)
    CSM.add(OBJECT_NAME_1: OBJECT_NAME_1, &fbb)
    CSM.add(DSE_1: DSE_1, &fbb)
    CSM.add(NORAD_CAT_ID_2: NORAD_CAT_ID_2, &fbb)
    CSM.add(OBJECT_NAME_2: OBJECT_NAME_2, &fbb)
    CSM.add(DSE_2: DSE_2, &fbb)
    CSM.add(TCA: TCA, &fbb)
    CSM.add(TCA_RANGE: TCA_RANGE, &fbb)
    CSM.add(TCA_RELATIVE_SPEED: TCA_RELATIVE_SPEED, &fbb)
    CSM.add(MAX_PROB: MAX_PROB, &fbb)
    CSM.add(DILUTION: DILUTION, &fbb)
    return CSM.endCSM(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.NORAD_CAT_ID_1.p, fieldName: "NORAD_CAT_ID_1", required: false, type: UInt32.self)
    try _v.visit(field: VTOFFSET.OBJECT_NAME_1.p, fieldName: "OBJECT_NAME_1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.DSE_1.p, fieldName: "DSE_1", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.NORAD_CAT_ID_2.p, fieldName: "NORAD_CAT_ID_2", required: false, type: UInt32.self)
    try _v.visit(field: VTOFFSET.OBJECT_NAME_2.p, fieldName: "OBJECT_NAME_2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.DSE_2.p, fieldName: "DSE_2", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.TCA.p, fieldName: "TCA", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.TCA_RANGE.p, fieldName: "TCA_RANGE", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.TCA_RELATIVE_SPEED.p, fieldName: "TCA_RELATIVE_SPEED", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.MAX_PROB.p, fieldName: "MAX_PROB", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.DILUTION.p, fieldName: "DILUTION", required: false, type: Double.self)
    _v.finish()
  }
}

