// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  Payload Information
public struct PLD: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$PLD" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: PLD.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case PAYLOAD_DURATION = 4
    case MASS_AT_LAUNCH = 6
    case DIMENSIONS = 8
    case SOLAR_ARRAY_AREA = 10
    case SOLAR_ARRAY_DIMENSIONS = 12
    case NOMINAL_OPERATIONAL_LIFETIME = 14
    case INSTRUMENTS = 16
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var PAYLOAD_DURATION: String? { let o = _accessor.offset(VTOFFSET.PAYLOAD_DURATION.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var PAYLOAD_DURATIONSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.PAYLOAD_DURATION.v) }
  public var MASS_AT_LAUNCH: Float32 { let o = _accessor.offset(VTOFFSET.MASS_AT_LAUNCH.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var DIMENSIONS: String? { let o = _accessor.offset(VTOFFSET.DIMENSIONS.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var DIMENSIONSSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.DIMENSIONS.v) }
  public var SOLAR_ARRAY_AREA: Float32 { let o = _accessor.offset(VTOFFSET.SOLAR_ARRAY_AREA.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var SOLAR_ARRAY_DIMENSIONS: String? { let o = _accessor.offset(VTOFFSET.SOLAR_ARRAY_DIMENSIONS.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var SOLAR_ARRAY_DIMENSIONSSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.SOLAR_ARRAY_DIMENSIONS.v) }
  public var NOMINAL_OPERATIONAL_LIFETIME: String? { let o = _accessor.offset(VTOFFSET.NOMINAL_OPERATIONAL_LIFETIME.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var NOMINAL_OPERATIONAL_LIFETIMESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.NOMINAL_OPERATIONAL_LIFETIME.v) }
  public var hasInstruments: Bool { let o = _accessor.offset(VTOFFSET.INSTRUMENTS.v); return o == 0 ? false : true }
  public var INSTRUMENTSCount: Int32 { let o = _accessor.offset(VTOFFSET.INSTRUMENTS.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func INSTRUMENTS(at index: Int32) -> IDM? { let o = _accessor.offset(VTOFFSET.INSTRUMENTS.v); return o == 0 ? nil : IDM(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public static func startPLD(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 7) }
  public static func add(PAYLOAD_DURATION: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: PAYLOAD_DURATION, at: VTOFFSET.PAYLOAD_DURATION.p) }
  public static func add(MASS_AT_LAUNCH: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MASS_AT_LAUNCH, def: 0.0, at: VTOFFSET.MASS_AT_LAUNCH.p) }
  public static func add(DIMENSIONS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: DIMENSIONS, at: VTOFFSET.DIMENSIONS.p) }
  public static func add(SOLAR_ARRAY_AREA: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: SOLAR_ARRAY_AREA, def: 0.0, at: VTOFFSET.SOLAR_ARRAY_AREA.p) }
  public static func add(SOLAR_ARRAY_DIMENSIONS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: SOLAR_ARRAY_DIMENSIONS, at: VTOFFSET.SOLAR_ARRAY_DIMENSIONS.p) }
  public static func add(NOMINAL_OPERATIONAL_LIFETIME: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: NOMINAL_OPERATIONAL_LIFETIME, at: VTOFFSET.NOMINAL_OPERATIONAL_LIFETIME.p) }
  public static func addVectorOf(INSTRUMENTS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: INSTRUMENTS, at: VTOFFSET.INSTRUMENTS.p) }
  public static func endPLD(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createPLD(
    _ fbb: inout FlatBufferBuilder,
    PAYLOAD_DURATIONOffset PAYLOAD_DURATION: Offset = Offset(),
    MASS_AT_LAUNCH: Float32 = 0.0,
    DIMENSIONSOffset DIMENSIONS: Offset = Offset(),
    SOLAR_ARRAY_AREA: Float32 = 0.0,
    SOLAR_ARRAY_DIMENSIONSOffset SOLAR_ARRAY_DIMENSIONS: Offset = Offset(),
    NOMINAL_OPERATIONAL_LIFETIMEOffset NOMINAL_OPERATIONAL_LIFETIME: Offset = Offset(),
    INSTRUMENTSVectorOffset INSTRUMENTS: Offset = Offset()
  ) -> Offset {
    let __start = PLD.startPLD(&fbb)
    PLD.add(PAYLOAD_DURATION: PAYLOAD_DURATION, &fbb)
    PLD.add(MASS_AT_LAUNCH: MASS_AT_LAUNCH, &fbb)
    PLD.add(DIMENSIONS: DIMENSIONS, &fbb)
    PLD.add(SOLAR_ARRAY_AREA: SOLAR_ARRAY_AREA, &fbb)
    PLD.add(SOLAR_ARRAY_DIMENSIONS: SOLAR_ARRAY_DIMENSIONS, &fbb)
    PLD.add(NOMINAL_OPERATIONAL_LIFETIME: NOMINAL_OPERATIONAL_LIFETIME, &fbb)
    PLD.addVectorOf(INSTRUMENTS: INSTRUMENTS, &fbb)
    return PLD.endPLD(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.PAYLOAD_DURATION.p, fieldName: "PAYLOAD_DURATION", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.MASS_AT_LAUNCH.p, fieldName: "MASS_AT_LAUNCH", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.DIMENSIONS.p, fieldName: "DIMENSIONS", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.SOLAR_ARRAY_AREA.p, fieldName: "SOLAR_ARRAY_AREA", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.SOLAR_ARRAY_DIMENSIONS.p, fieldName: "SOLAR_ARRAY_DIMENSIONS", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.NOMINAL_OPERATIONAL_LIFETIME.p, fieldName: "NOMINAL_OPERATIONAL_LIFETIME", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.INSTRUMENTS.p, fieldName: "INSTRUMENTS", required: false, type: ForwardOffset<Vector<ForwardOffset<IDM>, IDM>>.self)
    _v.finish()
  }
}

