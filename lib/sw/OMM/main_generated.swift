// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum ephemerisType: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Simplified General Perturbation Model
  case sgp = 0
  ///  Simplified General Perturbation Model 4
  case sgp4 = 1
  ///  Simplified Deep Space Perturbation Model 4
  case sdp4 = 2
  ///  Simplified General Perturbation Model 8
  case sgp8 = 3
  ///  Simplified Deep Space Perturbation Model 8
  case sdp8 = 4

  public static var max: ephemerisType { return .sdp8 }
  public static var min: ephemerisType { return .sgp }
}


///  Orbit Mean Elements Message
public struct OMM: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$OMM" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: OMM.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case CCSDS_OMM_VERS = 4
    case CREATION_DATE = 6
    case ORIGINATOR = 8
    case OBJECT_NAME = 10
    case OBJECT_ID = 12
    case CENTER_NAME = 14
    case REFERENCE_FRAME = 16
    case REFERENCE_FRAME_EPOCH = 18
    case TIME_SYSTEM = 20
    case MEAN_ELEMENT_THEORY = 22
    case COMMENT = 24
    case EPOCH = 26
    case SEMI_MAJOR_AXIS = 28
    case MEAN_MOTION = 30
    case ECCENTRICITY = 32
    case INCLINATION = 34
    case RA_OF_ASC_NODE = 36
    case ARG_OF_PERICENTER = 38
    case MEAN_ANOMALY = 40
    case GM = 42
    case MASS = 44
    case SOLAR_RAD_AREA = 46
    case SOLAR_RAD_COEFF = 48
    case DRAG_AREA = 50
    case DRAG_COEFF = 52
    case EPHEMERIS_TYPE = 54
    case CLASSIFICATION_TYPE = 56
    case NORAD_CAT_ID = 58
    case ELEMENT_SET_NO = 60
    case REV_AT_EPOCH = 62
    case BSTAR = 64
    case MEAN_MOTION_DOT = 66
    case MEAN_MOTION_DDOT = 68
    case COV_REFERENCE_FRAME = 70
    case CX_X = 72
    case CY_X = 74
    case CY_Y = 76
    case CZ_X = 78
    case CZ_Y = 80
    case CZ_Z = 82
    case CX_DOT_X = 84
    case CX_DOT_Y = 86
    case CX_DOT_Z = 88
    case CX_DOT_X_DOT = 90
    case CY_DOT_X = 92
    case CY_DOT_Y = 94
    case CY_DOT_Z = 96
    case CY_DOT_X_DOT = 98
    case CY_DOT_Y_DOT = 100
    case CZ_DOT_X = 102
    case CZ_DOT_Y = 104
    case CZ_DOT_Z = 106
    case CZ_DOT_X_DOT = 108
    case CZ_DOT_Y_DOT = 110
    case CZ_DOT_Z_DOT = 112
    case USER_DEFINED_BIP_0044_TYPE = 114
    case USER_DEFINED_OBJECT_DESIGNATOR = 116
    case USER_DEFINED_EARTH_MODEL = 118
    case USER_DEFINED_EPOCH_TIMESTAMP = 120
    case USER_DEFINED_MICROSECONDS = 122
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  OMM Header
  public var CCSDS_OMM_VERS: Double { let o = _accessor.offset(VTOFFSET.CCSDS_OMM_VERS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Creation Date
  public var CREATION_DATE: String? { let o = _accessor.offset(VTOFFSET.CREATION_DATE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var CREATION_DATESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.CREATION_DATE.v) }
  ///  Originator
  public var ORIGINATOR: String? { let o = _accessor.offset(VTOFFSET.ORIGINATOR.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ORIGINATORSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ORIGINATOR.v) }
  ///  OMM Metadata
  ///  Satellite Name(s)
  public var OBJECT_NAME: String? { let o = _accessor.offset(VTOFFSET.OBJECT_NAME.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var OBJECT_NAMESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.OBJECT_NAME.v) }
  ///  International Designator (YYYY-NNNAAA)
  public var OBJECT_ID: String? { let o = _accessor.offset(VTOFFSET.OBJECT_ID.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var OBJECT_IDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.OBJECT_ID.v) }
  ///  Origin of reference frame (EARTH, MARS, MOON, etc.)
  public var CENTER_NAME: String? { let o = _accessor.offset(VTOFFSET.CENTER_NAME.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var CENTER_NAMESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.CENTER_NAME.v) }
  ///  Name of the reference frame (TEME, EME2000, etc.)
  public var REFERENCE_FRAME: refFrame { let o = _accessor.offset(VTOFFSET.REFERENCE_FRAME.v); return o == 0 ? .teme : refFrame(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .teme }
  ///  REFERENCE_FRAME_EPOCH
  public var REFERENCE_FRAME_EPOCH: String? { let o = _accessor.offset(VTOFFSET.REFERENCE_FRAME_EPOCH.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var REFERENCE_FRAME_EPOCHSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.REFERENCE_FRAME_EPOCH.v) }
  ///  Time system used for the orbit state and covariance matrix. (UTC)
  public var TIME_SYSTEM: timeSystem { let o = _accessor.offset(VTOFFSET.TIME_SYSTEM.v); return o == 0 ? .utc : timeSystem(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .utc }
  ///  Description of the Mean Element Theory. (SGP4,DSST,USM)
  public var MEAN_ELEMENT_THEORY: meanElementTheory { let o = _accessor.offset(VTOFFSET.MEAN_ELEMENT_THEORY.v); return o == 0 ? .sgp4 : meanElementTheory(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .sgp4 }
  ///  Mean Keplerian Elements in the Specified Reference Frame
  ///  Plain-Text Comment
  public var COMMENT: String? { let o = _accessor.offset(VTOFFSET.COMMENT.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var COMMENTSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.COMMENT.v) }
  ///  Epoch time, in ISO 8601 UTC format
  public var EPOCH: String? { let o = _accessor.offset(VTOFFSET.EPOCH.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var EPOCHSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.EPOCH.v) }
  ///  Semi-major axis in km or mean motion in rev/day
  public var SEMI_MAJOR_AXIS: Double { let o = _accessor.offset(VTOFFSET.SEMI_MAJOR_AXIS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Mean motion
  public var MEAN_MOTION: Double { let o = _accessor.offset(VTOFFSET.MEAN_MOTION.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Eccentricity
  public var ECCENTRICITY: Double { let o = _accessor.offset(VTOFFSET.ECCENTRICITY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Inclination
  public var INCLINATION: Double { let o = _accessor.offset(VTOFFSET.INCLINATION.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Right ascension of ascending node
  public var RA_OF_ASC_NODE: Double { let o = _accessor.offset(VTOFFSET.RA_OF_ASC_NODE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Argument of pericenter
  public var ARG_OF_PERICENTER: Double { let o = _accessor.offset(VTOFFSET.ARG_OF_PERICENTER.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Mean anomaly
  public var MEAN_ANOMALY: Double { let o = _accessor.offset(VTOFFSET.MEAN_ANOMALY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Gravitational Coefficient (Gravitational Constant x Central Mass)
  public var GM: Double { let o = _accessor.offset(VTOFFSET.GM.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Spacecraft Parameters
  ///  S/C Mass
  public var MASS: Double { let o = _accessor.offset(VTOFFSET.MASS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Solar Radiation Pressure Area (AR) m**2
  public var SOLAR_RAD_AREA: Double { let o = _accessor.offset(VTOFFSET.SOLAR_RAD_AREA.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Solar Radiation Pressure Coefficient (CR)
  public var SOLAR_RAD_COEFF: Double { let o = _accessor.offset(VTOFFSET.SOLAR_RAD_COEFF.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Drag Area (AD) m**2
  public var DRAG_AREA: Double { let o = _accessor.offset(VTOFFSET.DRAG_AREA.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Drag Coefficient (CD)
  public var DRAG_COEFF: Double { let o = _accessor.offset(VTOFFSET.DRAG_COEFF.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  TLE Related Parameters (This section is only required if MEAN_ELEMENT_THEORY=SGP/SGP4)
  ///  Default value = 0
  public var EPHEMERIS_TYPE: ephemerisType { let o = _accessor.offset(VTOFFSET.EPHEMERIS_TYPE.v); return o == 0 ? .sgp4 : ephemerisType(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .sgp4 }
  ///  Default value = U
  public var CLASSIFICATION_TYPE: String? { let o = _accessor.offset(VTOFFSET.CLASSIFICATION_TYPE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var CLASSIFICATION_TYPESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.CLASSIFICATION_TYPE.v) }
  ///  NORAD Catalog Number (Satellite Number) an integer
  public var NORAD_CAT_ID: UInt32 { let o = _accessor.offset(VTOFFSET.NORAD_CAT_ID.v); return o == 0 ? 0 : _accessor.readBuffer(of: UInt32.self, at: o) }
  ///  Element set number for this satellite
  public var ELEMENT_SET_NO: UInt32 { let o = _accessor.offset(VTOFFSET.ELEMENT_SET_NO.v); return o == 0 ? 0 : _accessor.readBuffer(of: UInt32.self, at: o) }
  ///  Revolution Number
  public var REV_AT_EPOCH: Double { let o = _accessor.offset(VTOFFSET.REV_AT_EPOCH.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  SGP/SGP4 drag-like coefficient (in units 1/[Earth radii])
  public var BSTAR: Double { let o = _accessor.offset(VTOFFSET.BSTAR.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  First Time Derivative of the Mean Motion
  public var MEAN_MOTION_DOT: Double { let o = _accessor.offset(VTOFFSET.MEAN_MOTION_DOT.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Second Time Derivative of Mean Motion
  public var MEAN_MOTION_DDOT: Double { let o = _accessor.offset(VTOFFSET.MEAN_MOTION_DDOT.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Position/Velocity Covariance Matrix
  ///  Reference frame for the covariance matrix
  public var COV_REFERENCE_FRAME: refFrame { let o = _accessor.offset(VTOFFSET.COV_REFERENCE_FRAME.v); return o == 0 ? .rsw : refFrame(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .rsw }
  ///  Covariance matrix [1,1] km**2
  public var CX_X: Double { let o = _accessor.offset(VTOFFSET.CX_X.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [2,1] km**2
  public var CY_X: Double { let o = _accessor.offset(VTOFFSET.CY_X.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [2,2] km**2
  public var CY_Y: Double { let o = _accessor.offset(VTOFFSET.CY_Y.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [3,1] km**2
  public var CZ_X: Double { let o = _accessor.offset(VTOFFSET.CZ_X.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [3,2] km**2
  public var CZ_Y: Double { let o = _accessor.offset(VTOFFSET.CZ_Y.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [3,3] km**2
  public var CZ_Z: Double { let o = _accessor.offset(VTOFFSET.CZ_Z.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [4,1] km**2/s
  public var CX_DOT_X: Double { let o = _accessor.offset(VTOFFSET.CX_DOT_X.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [4,2] km**2/s
  public var CX_DOT_Y: Double { let o = _accessor.offset(VTOFFSET.CX_DOT_Y.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [4,3] km**2/s
  public var CX_DOT_Z: Double { let o = _accessor.offset(VTOFFSET.CX_DOT_Z.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [4,4] km**2/s**2
  public var CX_DOT_X_DOT: Double { let o = _accessor.offset(VTOFFSET.CX_DOT_X_DOT.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [5,1] km**2/s
  public var CY_DOT_X: Double { let o = _accessor.offset(VTOFFSET.CY_DOT_X.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [5,2] km**2/s
  public var CY_DOT_Y: Double { let o = _accessor.offset(VTOFFSET.CY_DOT_Y.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [5,3] km**2/s
  public var CY_DOT_Z: Double { let o = _accessor.offset(VTOFFSET.CY_DOT_Z.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [5,4] km**2/s**2
  public var CY_DOT_X_DOT: Double { let o = _accessor.offset(VTOFFSET.CY_DOT_X_DOT.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [5,5] km**2/s**2
  public var CY_DOT_Y_DOT: Double { let o = _accessor.offset(VTOFFSET.CY_DOT_Y_DOT.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [6,1] km**2/s
  public var CZ_DOT_X: Double { let o = _accessor.offset(VTOFFSET.CZ_DOT_X.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [6,2] km**2/s
  public var CZ_DOT_Y: Double { let o = _accessor.offset(VTOFFSET.CZ_DOT_Y.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [6,3] km**2/s
  public var CZ_DOT_Z: Double { let o = _accessor.offset(VTOFFSET.CZ_DOT_Z.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [6,4] km**2/s**2
  public var CZ_DOT_X_DOT: Double { let o = _accessor.offset(VTOFFSET.CZ_DOT_X_DOT.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [6,5] km**2/s**2
  public var CZ_DOT_Y_DOT: Double { let o = _accessor.offset(VTOFFSET.CZ_DOT_Y_DOT.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Covariance matrix [6,6] km**2/s**2
  public var CZ_DOT_Z_DOT: Double { let o = _accessor.offset(VTOFFSET.CZ_DOT_Z_DOT.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  User defined parameter, must be described in an ICD
  public var USER_DEFINED_BIP_0044_TYPE: UInt32 { let o = _accessor.offset(VTOFFSET.USER_DEFINED_BIP_0044_TYPE.v); return o == 0 ? 0 : _accessor.readBuffer(of: UInt32.self, at: o) }
  ///  User defined parameter, must be described in an ICD
  public var USER_DEFINED_OBJECT_DESIGNATOR: String? { let o = _accessor.offset(VTOFFSET.USER_DEFINED_OBJECT_DESIGNATOR.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var USER_DEFINED_OBJECT_DESIGNATORSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.USER_DEFINED_OBJECT_DESIGNATOR.v) }
  ///  User defined parameter, must be described in an ICD
  public var USER_DEFINED_EARTH_MODEL: String? { let o = _accessor.offset(VTOFFSET.USER_DEFINED_EARTH_MODEL.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var USER_DEFINED_EARTH_MODELSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.USER_DEFINED_EARTH_MODEL.v) }
  ///  User defined parameter, must be described in an ICD
  public var USER_DEFINED_EPOCH_TIMESTAMP: Double { let o = _accessor.offset(VTOFFSET.USER_DEFINED_EPOCH_TIMESTAMP.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  User defined parameter, must be described in an ICD
  public var USER_DEFINED_MICROSECONDS: Double { let o = _accessor.offset(VTOFFSET.USER_DEFINED_MICROSECONDS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  public static func startOMM(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 60) }
  public static func add(CCSDS_OMM_VERS: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CCSDS_OMM_VERS, def: 0.0, at: VTOFFSET.CCSDS_OMM_VERS.p) }
  public static func add(CREATION_DATE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: CREATION_DATE, at: VTOFFSET.CREATION_DATE.p) }
  public static func add(ORIGINATOR: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ORIGINATOR, at: VTOFFSET.ORIGINATOR.p) }
  public static func add(OBJECT_NAME: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: OBJECT_NAME, at: VTOFFSET.OBJECT_NAME.p) }
  public static func add(OBJECT_ID: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: OBJECT_ID, at: VTOFFSET.OBJECT_ID.p) }
  public static func add(CENTER_NAME: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: CENTER_NAME, at: VTOFFSET.CENTER_NAME.p) }
  public static func add(REFERENCE_FRAME: refFrame, _ fbb: inout FlatBufferBuilder) { fbb.add(element: REFERENCE_FRAME.rawValue, def: 2, at: VTOFFSET.REFERENCE_FRAME.p) }
  public static func add(REFERENCE_FRAME_EPOCH: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: REFERENCE_FRAME_EPOCH, at: VTOFFSET.REFERENCE_FRAME_EPOCH.p) }
  public static func add(TIME_SYSTEM: timeSystem, _ fbb: inout FlatBufferBuilder) { fbb.add(element: TIME_SYSTEM.rawValue, def: 11, at: VTOFFSET.TIME_SYSTEM.p) }
  public static func add(MEAN_ELEMENT_THEORY: meanElementTheory, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MEAN_ELEMENT_THEORY.rawValue, def: 0, at: VTOFFSET.MEAN_ELEMENT_THEORY.p) }
  public static func add(COMMENT: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: COMMENT, at: VTOFFSET.COMMENT.p) }
  public static func add(EPOCH: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: EPOCH, at: VTOFFSET.EPOCH.p) }
  public static func add(SEMI_MAJOR_AXIS: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: SEMI_MAJOR_AXIS, def: 0.0, at: VTOFFSET.SEMI_MAJOR_AXIS.p) }
  public static func add(MEAN_MOTION: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MEAN_MOTION, def: 0.0, at: VTOFFSET.MEAN_MOTION.p) }
  public static func add(ECCENTRICITY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ECCENTRICITY, def: 0.0, at: VTOFFSET.ECCENTRICITY.p) }
  public static func add(INCLINATION: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: INCLINATION, def: 0.0, at: VTOFFSET.INCLINATION.p) }
  public static func add(RA_OF_ASC_NODE: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RA_OF_ASC_NODE, def: 0.0, at: VTOFFSET.RA_OF_ASC_NODE.p) }
  public static func add(ARG_OF_PERICENTER: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ARG_OF_PERICENTER, def: 0.0, at: VTOFFSET.ARG_OF_PERICENTER.p) }
  public static func add(MEAN_ANOMALY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MEAN_ANOMALY, def: 0.0, at: VTOFFSET.MEAN_ANOMALY.p) }
  public static func add(GM: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: GM, def: 0.0, at: VTOFFSET.GM.p) }
  public static func add(MASS: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MASS, def: 0.0, at: VTOFFSET.MASS.p) }
  public static func add(SOLAR_RAD_AREA: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: SOLAR_RAD_AREA, def: 0.0, at: VTOFFSET.SOLAR_RAD_AREA.p) }
  public static func add(SOLAR_RAD_COEFF: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: SOLAR_RAD_COEFF, def: 0.0, at: VTOFFSET.SOLAR_RAD_COEFF.p) }
  public static func add(DRAG_AREA: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: DRAG_AREA, def: 0.0, at: VTOFFSET.DRAG_AREA.p) }
  public static func add(DRAG_COEFF: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: DRAG_COEFF, def: 0.0, at: VTOFFSET.DRAG_COEFF.p) }
  public static func add(EPHEMERIS_TYPE: ephemerisType, _ fbb: inout FlatBufferBuilder) { fbb.add(element: EPHEMERIS_TYPE.rawValue, def: 1, at: VTOFFSET.EPHEMERIS_TYPE.p) }
  public static func add(CLASSIFICATION_TYPE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: CLASSIFICATION_TYPE, at: VTOFFSET.CLASSIFICATION_TYPE.p) }
  public static func add(NORAD_CAT_ID: UInt32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: NORAD_CAT_ID, def: 0, at: VTOFFSET.NORAD_CAT_ID.p) }
  public static func add(ELEMENT_SET_NO: UInt32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ELEMENT_SET_NO, def: 0, at: VTOFFSET.ELEMENT_SET_NO.p) }
  public static func add(REV_AT_EPOCH: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: REV_AT_EPOCH, def: 0.0, at: VTOFFSET.REV_AT_EPOCH.p) }
  public static func add(BSTAR: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: BSTAR, def: 0.0, at: VTOFFSET.BSTAR.p) }
  public static func add(MEAN_MOTION_DOT: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MEAN_MOTION_DOT, def: 0.0, at: VTOFFSET.MEAN_MOTION_DOT.p) }
  public static func add(MEAN_MOTION_DDOT: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MEAN_MOTION_DDOT, def: 0.0, at: VTOFFSET.MEAN_MOTION_DDOT.p) }
  public static func add(COV_REFERENCE_FRAME: refFrame, _ fbb: inout FlatBufferBuilder) { fbb.add(element: COV_REFERENCE_FRAME.rawValue, def: 23, at: VTOFFSET.COV_REFERENCE_FRAME.p) }
  public static func add(CX_X: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CX_X, def: 0.0, at: VTOFFSET.CX_X.p) }
  public static func add(CY_X: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CY_X, def: 0.0, at: VTOFFSET.CY_X.p) }
  public static func add(CY_Y: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CY_Y, def: 0.0, at: VTOFFSET.CY_Y.p) }
  public static func add(CZ_X: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CZ_X, def: 0.0, at: VTOFFSET.CZ_X.p) }
  public static func add(CZ_Y: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CZ_Y, def: 0.0, at: VTOFFSET.CZ_Y.p) }
  public static func add(CZ_Z: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CZ_Z, def: 0.0, at: VTOFFSET.CZ_Z.p) }
  public static func add(CX_DOT_X: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CX_DOT_X, def: 0.0, at: VTOFFSET.CX_DOT_X.p) }
  public static func add(CX_DOT_Y: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CX_DOT_Y, def: 0.0, at: VTOFFSET.CX_DOT_Y.p) }
  public static func add(CX_DOT_Z: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CX_DOT_Z, def: 0.0, at: VTOFFSET.CX_DOT_Z.p) }
  public static func add(CX_DOT_X_DOT: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CX_DOT_X_DOT, def: 0.0, at: VTOFFSET.CX_DOT_X_DOT.p) }
  public static func add(CY_DOT_X: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CY_DOT_X, def: 0.0, at: VTOFFSET.CY_DOT_X.p) }
  public static func add(CY_DOT_Y: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CY_DOT_Y, def: 0.0, at: VTOFFSET.CY_DOT_Y.p) }
  public static func add(CY_DOT_Z: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CY_DOT_Z, def: 0.0, at: VTOFFSET.CY_DOT_Z.p) }
  public static func add(CY_DOT_X_DOT: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CY_DOT_X_DOT, def: 0.0, at: VTOFFSET.CY_DOT_X_DOT.p) }
  public static func add(CY_DOT_Y_DOT: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CY_DOT_Y_DOT, def: 0.0, at: VTOFFSET.CY_DOT_Y_DOT.p) }
  public static func add(CZ_DOT_X: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CZ_DOT_X, def: 0.0, at: VTOFFSET.CZ_DOT_X.p) }
  public static func add(CZ_DOT_Y: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CZ_DOT_Y, def: 0.0, at: VTOFFSET.CZ_DOT_Y.p) }
  public static func add(CZ_DOT_Z: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CZ_DOT_Z, def: 0.0, at: VTOFFSET.CZ_DOT_Z.p) }
  public static func add(CZ_DOT_X_DOT: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CZ_DOT_X_DOT, def: 0.0, at: VTOFFSET.CZ_DOT_X_DOT.p) }
  public static func add(CZ_DOT_Y_DOT: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CZ_DOT_Y_DOT, def: 0.0, at: VTOFFSET.CZ_DOT_Y_DOT.p) }
  public static func add(CZ_DOT_Z_DOT: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CZ_DOT_Z_DOT, def: 0.0, at: VTOFFSET.CZ_DOT_Z_DOT.p) }
  public static func add(USER_DEFINED_BIP_0044_TYPE: UInt32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: USER_DEFINED_BIP_0044_TYPE, def: 0, at: VTOFFSET.USER_DEFINED_BIP_0044_TYPE.p) }
  public static func add(USER_DEFINED_OBJECT_DESIGNATOR: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: USER_DEFINED_OBJECT_DESIGNATOR, at: VTOFFSET.USER_DEFINED_OBJECT_DESIGNATOR.p) }
  public static func add(USER_DEFINED_EARTH_MODEL: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: USER_DEFINED_EARTH_MODEL, at: VTOFFSET.USER_DEFINED_EARTH_MODEL.p) }
  public static func add(USER_DEFINED_EPOCH_TIMESTAMP: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: USER_DEFINED_EPOCH_TIMESTAMP, def: 0.0, at: VTOFFSET.USER_DEFINED_EPOCH_TIMESTAMP.p) }
  public static func add(USER_DEFINED_MICROSECONDS: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: USER_DEFINED_MICROSECONDS, def: 0.0, at: VTOFFSET.USER_DEFINED_MICROSECONDS.p) }
  public static func endOMM(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createOMM(
    _ fbb: inout FlatBufferBuilder,
    CCSDS_OMM_VERS: Double = 0.0,
    CREATION_DATEOffset CREATION_DATE: Offset = Offset(),
    ORIGINATOROffset ORIGINATOR: Offset = Offset(),
    OBJECT_NAMEOffset OBJECT_NAME: Offset = Offset(),
    OBJECT_IDOffset OBJECT_ID: Offset = Offset(),
    CENTER_NAMEOffset CENTER_NAME: Offset = Offset(),
    REFERENCE_FRAME: refFrame = .teme,
    REFERENCE_FRAME_EPOCHOffset REFERENCE_FRAME_EPOCH: Offset = Offset(),
    TIME_SYSTEM: timeSystem = .utc,
    MEAN_ELEMENT_THEORY: meanElementTheory = .sgp4,
    COMMENTOffset COMMENT: Offset = Offset(),
    EPOCHOffset EPOCH: Offset = Offset(),
    SEMI_MAJOR_AXIS: Double = 0.0,
    MEAN_MOTION: Double = 0.0,
    ECCENTRICITY: Double = 0.0,
    INCLINATION: Double = 0.0,
    RA_OF_ASC_NODE: Double = 0.0,
    ARG_OF_PERICENTER: Double = 0.0,
    MEAN_ANOMALY: Double = 0.0,
    GM: Double = 0.0,
    MASS: Double = 0.0,
    SOLAR_RAD_AREA: Double = 0.0,
    SOLAR_RAD_COEFF: Double = 0.0,
    DRAG_AREA: Double = 0.0,
    DRAG_COEFF: Double = 0.0,
    EPHEMERIS_TYPE: ephemerisType = .sgp4,
    CLASSIFICATION_TYPEOffset CLASSIFICATION_TYPE: Offset = Offset(),
    NORAD_CAT_ID: UInt32 = 0,
    ELEMENT_SET_NO: UInt32 = 0,
    REV_AT_EPOCH: Double = 0.0,
    BSTAR: Double = 0.0,
    MEAN_MOTION_DOT: Double = 0.0,
    MEAN_MOTION_DDOT: Double = 0.0,
    COV_REFERENCE_FRAME: refFrame = .rsw,
    CX_X: Double = 0.0,
    CY_X: Double = 0.0,
    CY_Y: Double = 0.0,
    CZ_X: Double = 0.0,
    CZ_Y: Double = 0.0,
    CZ_Z: Double = 0.0,
    CX_DOT_X: Double = 0.0,
    CX_DOT_Y: Double = 0.0,
    CX_DOT_Z: Double = 0.0,
    CX_DOT_X_DOT: Double = 0.0,
    CY_DOT_X: Double = 0.0,
    CY_DOT_Y: Double = 0.0,
    CY_DOT_Z: Double = 0.0,
    CY_DOT_X_DOT: Double = 0.0,
    CY_DOT_Y_DOT: Double = 0.0,
    CZ_DOT_X: Double = 0.0,
    CZ_DOT_Y: Double = 0.0,
    CZ_DOT_Z: Double = 0.0,
    CZ_DOT_X_DOT: Double = 0.0,
    CZ_DOT_Y_DOT: Double = 0.0,
    CZ_DOT_Z_DOT: Double = 0.0,
    USER_DEFINED_BIP_0044_TYPE: UInt32 = 0,
    USER_DEFINED_OBJECT_DESIGNATOROffset USER_DEFINED_OBJECT_DESIGNATOR: Offset = Offset(),
    USER_DEFINED_EARTH_MODELOffset USER_DEFINED_EARTH_MODEL: Offset = Offset(),
    USER_DEFINED_EPOCH_TIMESTAMP: Double = 0.0,
    USER_DEFINED_MICROSECONDS: Double = 0.0
  ) -> Offset {
    let __start = OMM.startOMM(&fbb)
    OMM.add(CCSDS_OMM_VERS: CCSDS_OMM_VERS, &fbb)
    OMM.add(CREATION_DATE: CREATION_DATE, &fbb)
    OMM.add(ORIGINATOR: ORIGINATOR, &fbb)
    OMM.add(OBJECT_NAME: OBJECT_NAME, &fbb)
    OMM.add(OBJECT_ID: OBJECT_ID, &fbb)
    OMM.add(CENTER_NAME: CENTER_NAME, &fbb)
    OMM.add(REFERENCE_FRAME: REFERENCE_FRAME, &fbb)
    OMM.add(REFERENCE_FRAME_EPOCH: REFERENCE_FRAME_EPOCH, &fbb)
    OMM.add(TIME_SYSTEM: TIME_SYSTEM, &fbb)
    OMM.add(MEAN_ELEMENT_THEORY: MEAN_ELEMENT_THEORY, &fbb)
    OMM.add(COMMENT: COMMENT, &fbb)
    OMM.add(EPOCH: EPOCH, &fbb)
    OMM.add(SEMI_MAJOR_AXIS: SEMI_MAJOR_AXIS, &fbb)
    OMM.add(MEAN_MOTION: MEAN_MOTION, &fbb)
    OMM.add(ECCENTRICITY: ECCENTRICITY, &fbb)
    OMM.add(INCLINATION: INCLINATION, &fbb)
    OMM.add(RA_OF_ASC_NODE: RA_OF_ASC_NODE, &fbb)
    OMM.add(ARG_OF_PERICENTER: ARG_OF_PERICENTER, &fbb)
    OMM.add(MEAN_ANOMALY: MEAN_ANOMALY, &fbb)
    OMM.add(GM: GM, &fbb)
    OMM.add(MASS: MASS, &fbb)
    OMM.add(SOLAR_RAD_AREA: SOLAR_RAD_AREA, &fbb)
    OMM.add(SOLAR_RAD_COEFF: SOLAR_RAD_COEFF, &fbb)
    OMM.add(DRAG_AREA: DRAG_AREA, &fbb)
    OMM.add(DRAG_COEFF: DRAG_COEFF, &fbb)
    OMM.add(EPHEMERIS_TYPE: EPHEMERIS_TYPE, &fbb)
    OMM.add(CLASSIFICATION_TYPE: CLASSIFICATION_TYPE, &fbb)
    OMM.add(NORAD_CAT_ID: NORAD_CAT_ID, &fbb)
    OMM.add(ELEMENT_SET_NO: ELEMENT_SET_NO, &fbb)
    OMM.add(REV_AT_EPOCH: REV_AT_EPOCH, &fbb)
    OMM.add(BSTAR: BSTAR, &fbb)
    OMM.add(MEAN_MOTION_DOT: MEAN_MOTION_DOT, &fbb)
    OMM.add(MEAN_MOTION_DDOT: MEAN_MOTION_DDOT, &fbb)
    OMM.add(COV_REFERENCE_FRAME: COV_REFERENCE_FRAME, &fbb)
    OMM.add(CX_X: CX_X, &fbb)
    OMM.add(CY_X: CY_X, &fbb)
    OMM.add(CY_Y: CY_Y, &fbb)
    OMM.add(CZ_X: CZ_X, &fbb)
    OMM.add(CZ_Y: CZ_Y, &fbb)
    OMM.add(CZ_Z: CZ_Z, &fbb)
    OMM.add(CX_DOT_X: CX_DOT_X, &fbb)
    OMM.add(CX_DOT_Y: CX_DOT_Y, &fbb)
    OMM.add(CX_DOT_Z: CX_DOT_Z, &fbb)
    OMM.add(CX_DOT_X_DOT: CX_DOT_X_DOT, &fbb)
    OMM.add(CY_DOT_X: CY_DOT_X, &fbb)
    OMM.add(CY_DOT_Y: CY_DOT_Y, &fbb)
    OMM.add(CY_DOT_Z: CY_DOT_Z, &fbb)
    OMM.add(CY_DOT_X_DOT: CY_DOT_X_DOT, &fbb)
    OMM.add(CY_DOT_Y_DOT: CY_DOT_Y_DOT, &fbb)
    OMM.add(CZ_DOT_X: CZ_DOT_X, &fbb)
    OMM.add(CZ_DOT_Y: CZ_DOT_Y, &fbb)
    OMM.add(CZ_DOT_Z: CZ_DOT_Z, &fbb)
    OMM.add(CZ_DOT_X_DOT: CZ_DOT_X_DOT, &fbb)
    OMM.add(CZ_DOT_Y_DOT: CZ_DOT_Y_DOT, &fbb)
    OMM.add(CZ_DOT_Z_DOT: CZ_DOT_Z_DOT, &fbb)
    OMM.add(USER_DEFINED_BIP_0044_TYPE: USER_DEFINED_BIP_0044_TYPE, &fbb)
    OMM.add(USER_DEFINED_OBJECT_DESIGNATOR: USER_DEFINED_OBJECT_DESIGNATOR, &fbb)
    OMM.add(USER_DEFINED_EARTH_MODEL: USER_DEFINED_EARTH_MODEL, &fbb)
    OMM.add(USER_DEFINED_EPOCH_TIMESTAMP: USER_DEFINED_EPOCH_TIMESTAMP, &fbb)
    OMM.add(USER_DEFINED_MICROSECONDS: USER_DEFINED_MICROSECONDS, &fbb)
    return OMM.endOMM(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.CCSDS_OMM_VERS.p, fieldName: "CCSDS_OMM_VERS", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CREATION_DATE.p, fieldName: "CREATION_DATE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ORIGINATOR.p, fieldName: "ORIGINATOR", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.OBJECT_NAME.p, fieldName: "OBJECT_NAME", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.OBJECT_ID.p, fieldName: "OBJECT_ID", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.CENTER_NAME.p, fieldName: "CENTER_NAME", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.REFERENCE_FRAME.p, fieldName: "REFERENCE_FRAME", required: false, type: refFrame.self)
    try _v.visit(field: VTOFFSET.REFERENCE_FRAME_EPOCH.p, fieldName: "REFERENCE_FRAME_EPOCH", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.TIME_SYSTEM.p, fieldName: "TIME_SYSTEM", required: false, type: timeSystem.self)
    try _v.visit(field: VTOFFSET.MEAN_ELEMENT_THEORY.p, fieldName: "MEAN_ELEMENT_THEORY", required: false, type: meanElementTheory.self)
    try _v.visit(field: VTOFFSET.COMMENT.p, fieldName: "COMMENT", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.EPOCH.p, fieldName: "EPOCH", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.SEMI_MAJOR_AXIS.p, fieldName: "SEMI_MAJOR_AXIS", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.MEAN_MOTION.p, fieldName: "MEAN_MOTION", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ECCENTRICITY.p, fieldName: "ECCENTRICITY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.INCLINATION.p, fieldName: "INCLINATION", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.RA_OF_ASC_NODE.p, fieldName: "RA_OF_ASC_NODE", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ARG_OF_PERICENTER.p, fieldName: "ARG_OF_PERICENTER", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.MEAN_ANOMALY.p, fieldName: "MEAN_ANOMALY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.GM.p, fieldName: "GM", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.MASS.p, fieldName: "MASS", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.SOLAR_RAD_AREA.p, fieldName: "SOLAR_RAD_AREA", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.SOLAR_RAD_COEFF.p, fieldName: "SOLAR_RAD_COEFF", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.DRAG_AREA.p, fieldName: "DRAG_AREA", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.DRAG_COEFF.p, fieldName: "DRAG_COEFF", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.EPHEMERIS_TYPE.p, fieldName: "EPHEMERIS_TYPE", required: false, type: ephemerisType.self)
    try _v.visit(field: VTOFFSET.CLASSIFICATION_TYPE.p, fieldName: "CLASSIFICATION_TYPE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.NORAD_CAT_ID.p, fieldName: "NORAD_CAT_ID", required: false, type: UInt32.self)
    try _v.visit(field: VTOFFSET.ELEMENT_SET_NO.p, fieldName: "ELEMENT_SET_NO", required: false, type: UInt32.self)
    try _v.visit(field: VTOFFSET.REV_AT_EPOCH.p, fieldName: "REV_AT_EPOCH", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.BSTAR.p, fieldName: "BSTAR", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.MEAN_MOTION_DOT.p, fieldName: "MEAN_MOTION_DOT", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.MEAN_MOTION_DDOT.p, fieldName: "MEAN_MOTION_DDOT", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.COV_REFERENCE_FRAME.p, fieldName: "COV_REFERENCE_FRAME", required: false, type: refFrame.self)
    try _v.visit(field: VTOFFSET.CX_X.p, fieldName: "CX_X", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CY_X.p, fieldName: "CY_X", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CY_Y.p, fieldName: "CY_Y", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CZ_X.p, fieldName: "CZ_X", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CZ_Y.p, fieldName: "CZ_Y", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CZ_Z.p, fieldName: "CZ_Z", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CX_DOT_X.p, fieldName: "CX_DOT_X", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CX_DOT_Y.p, fieldName: "CX_DOT_Y", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CX_DOT_Z.p, fieldName: "CX_DOT_Z", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CX_DOT_X_DOT.p, fieldName: "CX_DOT_X_DOT", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CY_DOT_X.p, fieldName: "CY_DOT_X", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CY_DOT_Y.p, fieldName: "CY_DOT_Y", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CY_DOT_Z.p, fieldName: "CY_DOT_Z", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CY_DOT_X_DOT.p, fieldName: "CY_DOT_X_DOT", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CY_DOT_Y_DOT.p, fieldName: "CY_DOT_Y_DOT", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CZ_DOT_X.p, fieldName: "CZ_DOT_X", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CZ_DOT_Y.p, fieldName: "CZ_DOT_Y", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CZ_DOT_Z.p, fieldName: "CZ_DOT_Z", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CZ_DOT_X_DOT.p, fieldName: "CZ_DOT_X_DOT", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CZ_DOT_Y_DOT.p, fieldName: "CZ_DOT_Y_DOT", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CZ_DOT_Z_DOT.p, fieldName: "CZ_DOT_Z_DOT", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.USER_DEFINED_BIP_0044_TYPE.p, fieldName: "USER_DEFINED_BIP_0044_TYPE", required: false, type: UInt32.self)
    try _v.visit(field: VTOFFSET.USER_DEFINED_OBJECT_DESIGNATOR.p, fieldName: "USER_DEFINED_OBJECT_DESIGNATOR", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.USER_DEFINED_EARTH_MODEL.p, fieldName: "USER_DEFINED_EARTH_MODEL", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.USER_DEFINED_EPOCH_TIMESTAMP.p, fieldName: "USER_DEFINED_EPOCH_TIMESTAMP", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.USER_DEFINED_MICROSECONDS.p, fieldName: "USER_DEFINED_MICROSECONDS", required: false, type: Double.self)
    _v.finish()
  }
}

public struct OMMCOLLECTION: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$OMM" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: OMMCOLLECTION.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case RECORDS = 4
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var hasRecords: Bool { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? false : true }
  public var RECORDSCount: Int32 { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func RECORDS(at index: Int32) -> OMM? { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? nil : OMM(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public static func startOMMCOLLECTION(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 1) }
  public static func addVectorOf(RECORDS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: RECORDS, at: VTOFFSET.RECORDS.p) }
  public static func endOMMCOLLECTION(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createOMMCOLLECTION(
    _ fbb: inout FlatBufferBuilder,
    RECORDSVectorOffset RECORDS: Offset = Offset()
  ) -> Offset {
    let __start = OMMCOLLECTION.startOMMCOLLECTION(&fbb)
    OMMCOLLECTION.addVectorOf(RECORDS: RECORDS, &fbb)
    return OMMCOLLECTION.endOMMCOLLECTION(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.RECORDS.p, fieldName: "RECORDS", required: false, type: ForwardOffset<Vector<ForwardOffset<OMM>, OMM>>.self)
    _v.finish()
  }
}

