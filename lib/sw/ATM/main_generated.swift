// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  Canonical list of atmosphere model families per CCSDS SANA registry.
///  Use the `YEAR` field in the ATM message to specify the variant implementation.
public enum AtmosphericModelFamily: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  COSPAR International Reference Atmosphere
  ///  Known years: 1965, 1972, 1986, 1990
  case ciraXx = 0
  ///  Drag Temperature Model
  ///  Known years: 1978, 1994, 2000, 2009, 2012, 2013, 2020
  case dtmXx = 1
  ///  Global Ionosphere-Thermosphere Model
  ///  GITM has no specific year versions defined
  case gitm = 2
  ///  GOST atmospheric density model
  ///  Known version: 2004 (GOST R 25645.166-2004)
  case gost = 3
  ///  Global Reference Atmospheric Model
  ///  Known version: 2016
  case gramXx = 4
  ///  Harris-Priester empirical model
  ///  Known version: 1962
  case hp = 5
  ///  Jacchia atmosphere model with HASDM correction overlay
  ///  Based on Jacchia 1970 with HASDM (DCA) overlay
  case jacHasdm = 6
  ///  Jacchia-Gill bi-polynomial interpolation
  ///  Interpolates Jacchia 1971
  case jacGill = 7
  ///  Jacchia-Bowman empirical model
  ///  Known versions: 2006 (JB2006), 2008 (JB2008)
  case jb08 = 8
  ///  Jacchia-Roberts analytic model
  ///  Known version: 1971
  case jr71 = 9
  ///  Jacchia static diffusion models
  ///  Known years: 1970, 1971, 1977
  case jxx = 10
  ///  Marshall Engineering Thermosphere
  ///  Known version: 2007
  case metXx = 11
  ///  MSIS empirical model
  ///  Known version: 1986
  case msis86 = 12
  ///  MSISE empirical model with exosphere extension
  ///  Known version: 1990
  case msise90 = 13
  ///  NRLMSISE empirical model
  ///  Known version: 2000 (NRLMSISE-00E)
  case nrlmsis00e = 14
  ///  Thermosphere-Ionosphere Electrodynamic General Circulation Model
  ///  Based on TIME-GCM, no version specified
  case tiecgm = 15
  ///  U.S. Standard Atmosphere
  ///  Known versions: 1962, 1976
  case ussaXx = 16

  public static var max: AtmosphericModelFamily { return .ussaXx }
  public static var min: AtmosphericModelFamily { return .ciraXx }
}


///  Atmospheric Model Message
public struct ATM: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$ATM" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: ATM.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case MODEL = 4
    case YEAR = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Canonical model family
  public var MODEL: AtmosphericModelFamily { let o = _accessor.offset(VTOFFSET.MODEL.v); return o == 0 ? .ciraXx : AtmosphericModelFamily(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .ciraXx }
  ///  Four-digit year identifying the model version (e.g., 1970, 2008, 2020)
  public var YEAR: Int32 { let o = _accessor.offset(VTOFFSET.YEAR.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public static func startATM(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(MODEL: AtmosphericModelFamily, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MODEL.rawValue, def: 0, at: VTOFFSET.MODEL.p) }
  public static func add(YEAR: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: YEAR, def: 0, at: VTOFFSET.YEAR.p) }
  public static func endATM(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createATM(
    _ fbb: inout FlatBufferBuilder,
    MODEL: AtmosphericModelFamily = .ciraXx,
    YEAR: Int32 = 0
  ) -> Offset {
    let __start = ATM.startATM(&fbb)
    ATM.add(MODEL: MODEL, &fbb)
    ATM.add(YEAR: YEAR, &fbb)
    return ATM.endATM(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.MODEL.p, fieldName: "MODEL", required: false, type: AtmosphericModelFamily.self)
    try _v.visit(field: VTOFFSET.YEAR.p, fieldName: "YEAR", required: false, type: Int32.self)
    _v.finish()
  }
}

