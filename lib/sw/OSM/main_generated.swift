// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  Observation Stability Message
public struct OSM: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$OSM" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: OSM.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case IS_STABLE = 4
    case NUM_OBS = 6
    case OBJECT_ID = 8
    case ID_SENSOR = 10
    case PASS_START = 12
    case PASS_DURATION = 14
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Indicates whether the observation is stable or not
  public var IS_STABLE: Bool { let o = _accessor.offset(VTOFFSET.IS_STABLE.v); return o == 0 ? false : 0 != _accessor.readBuffer(of: Byte.self, at: o) }
  ///  The number of observations
  public var NUM_OBS: Int32 { let o = _accessor.offset(VTOFFSET.NUM_OBS.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Unique identifier for the object being observed
  public var OBJECT_ID: String? { let o = _accessor.offset(VTOFFSET.OBJECT_ID.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var OBJECT_IDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.OBJECT_ID.v) }
  ///  Identifier of the sensor
  public var ID_SENSOR: String? { let o = _accessor.offset(VTOFFSET.ID_SENSOR.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ID_SENSORSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ID_SENSOR.v) }
  ///  Timestamp of data creation
  public var PASS_START: String? { let o = _accessor.offset(VTOFFSET.PASS_START.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var PASS_STARTSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.PASS_START.v) }
  ///  Duration of the observation pass in seconds
  public var PASS_DURATION: Int32 { let o = _accessor.offset(VTOFFSET.PASS_DURATION.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public static func startOSM(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 6) }
  public static func add(IS_STABLE: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: IS_STABLE, def: false,
   at: VTOFFSET.IS_STABLE.p) }
  public static func add(NUM_OBS: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: NUM_OBS, def: 0, at: VTOFFSET.NUM_OBS.p) }
  public static func add(OBJECT_ID: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: OBJECT_ID, at: VTOFFSET.OBJECT_ID.p) }
  public static func add(ID_SENSOR: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ID_SENSOR, at: VTOFFSET.ID_SENSOR.p) }
  public static func add(PASS_START: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: PASS_START, at: VTOFFSET.PASS_START.p) }
  public static func add(PASS_DURATION: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: PASS_DURATION, def: 0, at: VTOFFSET.PASS_DURATION.p) }
  public static func endOSM(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createOSM(
    _ fbb: inout FlatBufferBuilder,
    IS_STABLE: Bool = false,
    NUM_OBS: Int32 = 0,
    OBJECT_IDOffset OBJECT_ID: Offset = Offset(),
    ID_SENSOROffset ID_SENSOR: Offset = Offset(),
    PASS_STARTOffset PASS_START: Offset = Offset(),
    PASS_DURATION: Int32 = 0
  ) -> Offset {
    let __start = OSM.startOSM(&fbb)
    OSM.add(IS_STABLE: IS_STABLE, &fbb)
    OSM.add(NUM_OBS: NUM_OBS, &fbb)
    OSM.add(OBJECT_ID: OBJECT_ID, &fbb)
    OSM.add(ID_SENSOR: ID_SENSOR, &fbb)
    OSM.add(PASS_START: PASS_START, &fbb)
    OSM.add(PASS_DURATION: PASS_DURATION, &fbb)
    return OSM.endOSM(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.IS_STABLE.p, fieldName: "IS_STABLE", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.NUM_OBS.p, fieldName: "NUM_OBS", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.OBJECT_ID.p, fieldName: "OBJECT_ID", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ID_SENSOR.p, fieldName: "ID_SENSOR", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.PASS_START.p, fieldName: "PASS_START", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.PASS_DURATION.p, fieldName: "PASS_DURATION", required: false, type: Int32.self)
    _v.finish()
  }
}

