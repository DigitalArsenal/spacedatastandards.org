// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  Tracking Data Message
public struct TDM: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$TDM" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: TDM.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case OBSERVER_ID = 4
    case OBSERVER_X = 6
    case OBSERVER_Y = 8
    case OBSERVER_Z = 10
    case OBSERVER_VX = 12
    case OBSERVER_VY = 14
    case OBSERVER_VZ = 16
    case OBSERVER_POSITION_REFERENCE_FRAME = 18
    case OBS_REFERENCE_FRAME = 20
    case EPOCH = 22
    case CCSDS_TDM_VERS = 24
    case COMMENT = 26
    case CREATION_DATE = 28
    case ORIGINATOR = 30
    case META_START = 32
    case TIME_SYSTEM = 34
    case START_TIME = 36
    case STOP_TIME = 38
    case PARTICIPANT_1 = 40
    case PARTICIPANT_2 = 42
    case PARTICIPANT_3 = 44
    case PARTICIPANT_4 = 46
    case PARTICIPANT_5 = 48
    case MODE = 50
    case PATH_1 = 52
    case PATH_2 = 54
    case TRANSMIT_BAND = 56
    case RECEIVE_BAND = 58
    case INTEGRATION_INTERVAL = 60
    case INTEGRATION_REF = 62
    case RECEIVE_DELAY_2 = 64
    case RECEIVE_DELAY_3 = 66
    case DATA_QUALITY = 68
    case META_STOP = 70
    case DATA_START = 72
    case TRANSMIT_FREQ_1 = 74
    case RECEIVE_FREQ = 76
    case DATA_STOP = 78
    case TIMETAG_REF = 80
    case ANGLE_TYPE = 82
    case ANGLE_1 = 84
    case ANGLE_2 = 86
    case ANGLE_UNCERTAINTY_1 = 88
    case ANGLE_UNCERTAINTY_2 = 90
    case RANGE_RATE = 92
    case RANGE_UNCERTAINTY = 94
    case RANGE_MODE = 96
    case RANGE_MODULUS = 98
    case CORRECTION_ANGLE_1 = 100
    case CORRECTION_ANGLE_2 = 102
    case CORRECTIONS_APPLIED = 104
    case TROPO_DRY = 106
    case TROPO_WET = 108
    case STEC = 110
    case PRESSURE = 112
    case RHUMIDITY = 114
    case TEMPERATURE = 116
    case CLOCK_BIAS = 118
    case CLOCK_DRIFT = 120
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier for the observation OBSERVER -  [Specific CCSDS Document]
  public var OBSERVER_ID: String? { let o = _accessor.offset(VTOFFSET.OBSERVER_ID.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var OBSERVER_IDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.OBSERVER_ID.v) }
  ///  Cartesian X coordinate of the OBSERVER location in chosen reference frame
  public var OBSERVER_X: Double { let o = _accessor.offset(VTOFFSET.OBSERVER_X.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian Y coordinate of the OBSERVER location in chosen reference frame 
  public var OBSERVER_Y: Double { let o = _accessor.offset(VTOFFSET.OBSERVER_Y.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian Z coordinate of the OBSERVER location in chosen reference frame 
  public var OBSERVER_Z: Double { let o = _accessor.offset(VTOFFSET.OBSERVER_Z.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian X coordinate of the OBSERVER velocity in chosen reference frame
  public var OBSERVER_VX: Double { let o = _accessor.offset(VTOFFSET.OBSERVER_VX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian Y coordinate of the OBSERVER velocity in chosen reference frame 
  public var OBSERVER_VY: Double { let o = _accessor.offset(VTOFFSET.OBSERVER_VY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Cartesian Z coordinate of the OBSERVER velocity in chosen reference frame 
  public var OBSERVER_VZ: Double { let o = _accessor.offset(VTOFFSET.OBSERVER_VZ.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Reference frame used for OBSERVER location Cartesian coordinates (e.g., ECEF, ECI)
  public var OBSERVER_POSITION_REFERENCE_FRAME: referenceFrame { let o = _accessor.offset(VTOFFSET.OBSERVER_POSITION_REFERENCE_FRAME.v); return o == 0 ? .ecef : referenceFrame(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .ecef }
  ///  Reference frame used for obs location Cartesian coordinates (e.g., ECEF, ECI)
  public var OBS_REFERENCE_FRAME: referenceFrame { let o = _accessor.offset(VTOFFSET.OBS_REFERENCE_FRAME.v); return o == 0 ? .ecef : referenceFrame(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .ecef }
  ///  Epoch or observation time -  CCSDS 503.0-B-1
  public var EPOCH: String? { let o = _accessor.offset(VTOFFSET.EPOCH.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var EPOCHSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.EPOCH.v) }
  ///  TDM version number -  CCSDS 503.0-B-1, Page D-9
  public var CCSDS_TDM_VERS: String? { let o = _accessor.offset(VTOFFSET.CCSDS_TDM_VERS.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var CCSDS_TDM_VERSSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.CCSDS_TDM_VERS.v) }
  ///  Comments regarding TDM -  various sections, e.g., Page D-9
  public var hasComment: Bool { let o = _accessor.offset(VTOFFSET.COMMENT.v); return o == 0 ? false : true }
  public var COMMENTCount: Int32 { let o = _accessor.offset(VTOFFSET.COMMENT.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func COMMENT(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.COMMENT.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Date of TDM creation -  CCSDS 503.0-B-1, Page D-9
  public var CREATION_DATE: String? { let o = _accessor.offset(VTOFFSET.CREATION_DATE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var CREATION_DATESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.CREATION_DATE.v) }
  ///  Originator of the TDM -  CCSDS 503.0-B-1, Page D-9
  public var ORIGINATOR: String? { let o = _accessor.offset(VTOFFSET.ORIGINATOR.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ORIGINATORSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ORIGINATOR.v) }
  ///  Start of metadata section -  CCSDS 503.0-B-1, Page D-9
  public var META_START: String? { let o = _accessor.offset(VTOFFSET.META_START.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var META_STARTSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.META_START.v) }
  ///  Time system used -  CCSDS 503.0-B-1, Page D-9
  public var TIME_SYSTEM: String? { let o = _accessor.offset(VTOFFSET.TIME_SYSTEM.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var TIME_SYSTEMSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.TIME_SYSTEM.v) }
  ///  Start time of the data -  CCSDS 503.0-B-1, Page D-9
  public var START_TIME: String? { let o = _accessor.offset(VTOFFSET.START_TIME.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var START_TIMESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.START_TIME.v) }
  ///  Stop time of the data -  CCSDS 503.0-B-1, Page D-9
  public var STOP_TIME: String? { let o = _accessor.offset(VTOFFSET.STOP_TIME.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var STOP_TIMESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.STOP_TIME.v) }
  ///  First participant in the TDM -  CCSDS 503.0-B-1, Page D-9
  public var PARTICIPANT_1: String? { let o = _accessor.offset(VTOFFSET.PARTICIPANT_1.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var PARTICIPANT_1SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.PARTICIPANT_1.v) }
  ///  Second participant in the TDM -  CCSDS 503.0-B-1, Page D-9
  public var PARTICIPANT_2: String? { let o = _accessor.offset(VTOFFSET.PARTICIPANT_2.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var PARTICIPANT_2SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.PARTICIPANT_2.v) }
  ///  Third participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
  public var PARTICIPANT_3: String? { let o = _accessor.offset(VTOFFSET.PARTICIPANT_3.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var PARTICIPANT_3SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.PARTICIPANT_3.v) }
  ///  Fourth participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
  public var PARTICIPANT_4: String? { let o = _accessor.offset(VTOFFSET.PARTICIPANT_4.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var PARTICIPANT_4SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.PARTICIPANT_4.v) }
  ///  Fifth participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9, max participant
  public var PARTICIPANT_5: String? { let o = _accessor.offset(VTOFFSET.PARTICIPANT_5.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var PARTICIPANT_5SegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.PARTICIPANT_5.v) }
  ///  Mode of TDM -  CCSDS 503.0-B-1, Page D-9
  public var MODE: String? { let o = _accessor.offset(VTOFFSET.MODE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var MODESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.MODE.v) }
  ///  First path in TDM -  CCSDS 503.0-B-1, Page D-9
  public var PATH_1: UInt16 { let o = _accessor.offset(VTOFFSET.PATH_1.v); return o == 0 ? 0 : _accessor.readBuffer(of: UInt16.self, at: o) }
  ///  Second path in TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
  public var PATH_2: UInt16 { let o = _accessor.offset(VTOFFSET.PATH_2.v); return o == 0 ? 0 : _accessor.readBuffer(of: UInt16.self, at: o) }
  ///  Transmit band -  CCSDS 503.0-B-1, Page D-9
  public var TRANSMIT_BAND: String? { let o = _accessor.offset(VTOFFSET.TRANSMIT_BAND.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var TRANSMIT_BANDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.TRANSMIT_BAND.v) }
  ///  Receive band -  CCSDS 503.0-B-1, Page D-9
  public var RECEIVE_BAND: String? { let o = _accessor.offset(VTOFFSET.RECEIVE_BAND.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var RECEIVE_BANDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.RECEIVE_BAND.v) }
  ///  Integration interval -  CCSDS 503.0-B-1, Page D-9
  public var INTEGRATION_INTERVAL: Float32 { let o = _accessor.offset(VTOFFSET.INTEGRATION_INTERVAL.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Integration reference -  CCSDS 503.0-B-1, Page D-9
  public var INTEGRATION_REF: String? { let o = _accessor.offset(VTOFFSET.INTEGRATION_REF.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var INTEGRATION_REFSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.INTEGRATION_REF.v) }
  ///  Receive delay for second participant -  CCSDS 503.0-B-1, Page D-9
  public var RECEIVE_DELAY_2: Double { let o = _accessor.offset(VTOFFSET.RECEIVE_DELAY_2.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Receive delay for third participant -  CCSDS 503.0-B-1, Page D-9
  public var RECEIVE_DELAY_3: Double { let o = _accessor.offset(VTOFFSET.RECEIVE_DELAY_3.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Data quality -  CCSDS 503.0-B-1, Page D-9
  public var DATA_QUALITY: String? { let o = _accessor.offset(VTOFFSET.DATA_QUALITY.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var DATA_QUALITYSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.DATA_QUALITY.v) }
  ///  End of metadata section -  CCSDS 503.0-B-1, Page D-9
  public var META_STOP: String? { let o = _accessor.offset(VTOFFSET.META_STOP.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var META_STOPSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.META_STOP.v) }
  ///  Start of data section -  CCSDS 503.0-B-1, Page D-9
  public var DATA_START: String? { let o = _accessor.offset(VTOFFSET.DATA_START.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var DATA_STARTSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.DATA_START.v) }
  ///  Transmit frequency for first participant -  CCSDS 503.0-B-1, Page D-9
  public var TRANSMIT_FREQ_1: Double { let o = _accessor.offset(VTOFFSET.TRANSMIT_FREQ_1.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Receive frequency -  CCSDS 503.0-B-1, Page D-9
  public var hasReceiveFreq: Bool { let o = _accessor.offset(VTOFFSET.RECEIVE_FREQ.v); return o == 0 ? false : true }
  public var RECEIVE_FREQCount: Int32 { let o = _accessor.offset(VTOFFSET.RECEIVE_FREQ.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func RECEIVE_FREQ(at index: Int32) -> Double { let o = _accessor.offset(VTOFFSET.RECEIVE_FREQ.v); return o == 0 ? 0 : _accessor.directRead(of: Double.self, offset: _accessor.vector(at: o) + index * 8) }
  public var RECEIVE_FREQ: [Double] { return _accessor.getVector(at: VTOFFSET.RECEIVE_FREQ.v) ?? [] }
  ///  End of data section -  CCSDS 503.0-B-1, Page D-9
  public var DATA_STOP: String? { let o = _accessor.offset(VTOFFSET.DATA_STOP.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var DATA_STOPSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.DATA_STOP.v) }
  ///  Additional properties as required by the specific application of the TDM...
  ///  Reference for time tagging -  CCSDS 503.0-B-1, Page D-10
  public var TIMETAG_REF: String? { let o = _accessor.offset(VTOFFSET.TIMETAG_REF.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var TIMETAG_REFSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.TIMETAG_REF.v) }
  ///  Type of angle data -  CCSDS 503.0-B-1, Page D-12
  ///  Can be AZEL, RADEC, XEYN, XSYE, or another value with provided ICD
  public var ANGLE_TYPE: String? { let o = _accessor.offset(VTOFFSET.ANGLE_TYPE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ANGLE_TYPESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ANGLE_TYPE.v) }
  ///  First angle value -  CCSDS 503.0-B-1, Page D-12
  public var hasAngle1: Bool { let o = _accessor.offset(VTOFFSET.ANGLE_1.v); return o == 0 ? false : true }
  public var ANGLE_1Count: Int32 { let o = _accessor.offset(VTOFFSET.ANGLE_1.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func ANGLE_1(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.ANGLE_1.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var ANGLE_1: [Float32] { return _accessor.getVector(at: VTOFFSET.ANGLE_1.v) ?? [] }
  ///  Second angle value -  CCSDS 503.0-B-1, Page D-12
  public var hasAngle2: Bool { let o = _accessor.offset(VTOFFSET.ANGLE_2.v); return o == 0 ? false : true }
  public var ANGLE_2Count: Int32 { let o = _accessor.offset(VTOFFSET.ANGLE_2.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func ANGLE_2(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.ANGLE_2.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var ANGLE_2: [Float32] { return _accessor.getVector(at: VTOFFSET.ANGLE_2.v) ?? [] }
  ///  Uncertainty of first angle -  CCSDS 503.0-B-1
  public var ANGLE_UNCERTAINTY_1: Float32 { let o = _accessor.offset(VTOFFSET.ANGLE_UNCERTAINTY_1.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Uncertainty of second angle -  CCSDS 503.0-B-1
  public var ANGLE_UNCERTAINTY_2: Float32 { let o = _accessor.offset(VTOFFSET.ANGLE_UNCERTAINTY_2.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Rate of change of range -  CCSDS 503.0-B-1
  public var RANGE_RATE: Double { let o = _accessor.offset(VTOFFSET.RANGE_RATE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Uncertainty in range -  CCSDS 503.0-B-1
  public var RANGE_UNCERTAINTY: Double { let o = _accessor.offset(VTOFFSET.RANGE_UNCERTAINTY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Mode of range data -  CCSDS 503.0-B-1, Page D-10
  public var RANGE_MODE: String? { let o = _accessor.offset(VTOFFSET.RANGE_MODE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var RANGE_MODESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.RANGE_MODE.v) }
  ///  Modulus value for range data -  CCSDS 503.0-B-1, Page D-10
  public var RANGE_MODULUS: Double { let o = _accessor.offset(VTOFFSET.RANGE_MODULUS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  First correction angle -  CCSDS 503.0-B-1, Page D-12
  public var CORRECTION_ANGLE_1: Float32 { let o = _accessor.offset(VTOFFSET.CORRECTION_ANGLE_1.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Second correction angle -  CCSDS 503.0-B-1, Page D-12
  public var CORRECTION_ANGLE_2: Float32 { let o = _accessor.offset(VTOFFSET.CORRECTION_ANGLE_2.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Indicator of corrections applied -  CCSDS 503.0-B-1, Page D-12
  public var CORRECTIONS_APPLIED: String? { let o = _accessor.offset(VTOFFSET.CORRECTIONS_APPLIED.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var CORRECTIONS_APPLIEDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.CORRECTIONS_APPLIED.v) }
  ///  Dry component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
  public var hasTropoDry: Bool { let o = _accessor.offset(VTOFFSET.TROPO_DRY.v); return o == 0 ? false : true }
  public var TROPO_DRYCount: Int32 { let o = _accessor.offset(VTOFFSET.TROPO_DRY.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func TROPO_DRY(at index: Int32) -> Double { let o = _accessor.offset(VTOFFSET.TROPO_DRY.v); return o == 0 ? 0 : _accessor.directRead(of: Double.self, offset: _accessor.vector(at: o) + index * 8) }
  public var TROPO_DRY: [Double] { return _accessor.getVector(at: VTOFFSET.TROPO_DRY.v) ?? [] }
  ///  Wet component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
  public var hasTropoWet: Bool { let o = _accessor.offset(VTOFFSET.TROPO_WET.v); return o == 0 ? false : true }
  public var TROPO_WETCount: Int32 { let o = _accessor.offset(VTOFFSET.TROPO_WET.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func TROPO_WET(at index: Int32) -> Double { let o = _accessor.offset(VTOFFSET.TROPO_WET.v); return o == 0 ? 0 : _accessor.directRead(of: Double.self, offset: _accessor.vector(at: o) + index * 8) }
  public var TROPO_WET: [Double] { return _accessor.getVector(at: VTOFFSET.TROPO_WET.v) ?? [] }
  ///  Slant total electron content -  CCSDS 503.0-B-1, Page D-13
  public var hasStec: Bool { let o = _accessor.offset(VTOFFSET.STEC.v); return o == 0 ? false : true }
  public var STECCount: Int32 { let o = _accessor.offset(VTOFFSET.STEC.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func STEC(at index: Int32) -> Double { let o = _accessor.offset(VTOFFSET.STEC.v); return o == 0 ? 0 : _accessor.directRead(of: Double.self, offset: _accessor.vector(at: o) + index * 8) }
  public var STEC: [Double] { return _accessor.getVector(at: VTOFFSET.STEC.v) ?? [] }
  ///  Atmospheric pressure -  CCSDS 503.0-B-1, Page D-14
  public var hasPressure: Bool { let o = _accessor.offset(VTOFFSET.PRESSURE.v); return o == 0 ? false : true }
  public var PRESSURECount: Int32 { let o = _accessor.offset(VTOFFSET.PRESSURE.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func PRESSURE(at index: Int32) -> Double { let o = _accessor.offset(VTOFFSET.PRESSURE.v); return o == 0 ? 0 : _accessor.directRead(of: Double.self, offset: _accessor.vector(at: o) + index * 8) }
  public var PRESSURE: [Double] { return _accessor.getVector(at: VTOFFSET.PRESSURE.v) ?? [] }
  ///  Relative humidity -  CCSDS 503.0-B-1, Page D-14
  public var hasRhumidity: Bool { let o = _accessor.offset(VTOFFSET.RHUMIDITY.v); return o == 0 ? false : true }
  public var RHUMIDITYCount: Int32 { let o = _accessor.offset(VTOFFSET.RHUMIDITY.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func RHUMIDITY(at index: Int32) -> Double { let o = _accessor.offset(VTOFFSET.RHUMIDITY.v); return o == 0 ? 0 : _accessor.directRead(of: Double.self, offset: _accessor.vector(at: o) + index * 8) }
  public var RHUMIDITY: [Double] { return _accessor.getVector(at: VTOFFSET.RHUMIDITY.v) ?? [] }
  ///  Ambient temperature -  CCSDS 503.0-B-1, Page D-14
  public var hasTemperature: Bool { let o = _accessor.offset(VTOFFSET.TEMPERATURE.v); return o == 0 ? false : true }
  public var TEMPERATURECount: Int32 { let o = _accessor.offset(VTOFFSET.TEMPERATURE.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func TEMPERATURE(at index: Int32) -> Double { let o = _accessor.offset(VTOFFSET.TEMPERATURE.v); return o == 0 ? 0 : _accessor.directRead(of: Double.self, offset: _accessor.vector(at: o) + index * 8) }
  public var TEMPERATURE: [Double] { return _accessor.getVector(at: VTOFFSET.TEMPERATURE.v) ?? [] }
  ///  Clock bias values -  CCSDS 503.0-B-1, Page D-15
  public var hasClockBias: Bool { let o = _accessor.offset(VTOFFSET.CLOCK_BIAS.v); return o == 0 ? false : true }
  public var CLOCK_BIASCount: Int32 { let o = _accessor.offset(VTOFFSET.CLOCK_BIAS.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func CLOCK_BIAS(at index: Int32) -> Double { let o = _accessor.offset(VTOFFSET.CLOCK_BIAS.v); return o == 0 ? 0 : _accessor.directRead(of: Double.self, offset: _accessor.vector(at: o) + index * 8) }
  public var CLOCK_BIAS: [Double] { return _accessor.getVector(at: VTOFFSET.CLOCK_BIAS.v) ?? [] }
  ///  Clock drift values -  CCSDS 503.0-B-1, Page D-15
  public var hasClockDrift: Bool { let o = _accessor.offset(VTOFFSET.CLOCK_DRIFT.v); return o == 0 ? false : true }
  public var CLOCK_DRIFTCount: Int32 { let o = _accessor.offset(VTOFFSET.CLOCK_DRIFT.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func CLOCK_DRIFT(at index: Int32) -> Double { let o = _accessor.offset(VTOFFSET.CLOCK_DRIFT.v); return o == 0 ? 0 : _accessor.directRead(of: Double.self, offset: _accessor.vector(at: o) + index * 8) }
  public var CLOCK_DRIFT: [Double] { return _accessor.getVector(at: VTOFFSET.CLOCK_DRIFT.v) ?? [] }
  public static func startTDM(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 59) }
  public static func add(OBSERVER_ID: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: OBSERVER_ID, at: VTOFFSET.OBSERVER_ID.p) }
  public static func add(OBSERVER_X: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: OBSERVER_X, def: 0.0, at: VTOFFSET.OBSERVER_X.p) }
  public static func add(OBSERVER_Y: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: OBSERVER_Y, def: 0.0, at: VTOFFSET.OBSERVER_Y.p) }
  public static func add(OBSERVER_Z: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: OBSERVER_Z, def: 0.0, at: VTOFFSET.OBSERVER_Z.p) }
  public static func add(OBSERVER_VX: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: OBSERVER_VX, def: 0.0, at: VTOFFSET.OBSERVER_VX.p) }
  public static func add(OBSERVER_VY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: OBSERVER_VY, def: 0.0, at: VTOFFSET.OBSERVER_VY.p) }
  public static func add(OBSERVER_VZ: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: OBSERVER_VZ, def: 0.0, at: VTOFFSET.OBSERVER_VZ.p) }
  public static func add(OBSERVER_POSITION_REFERENCE_FRAME: referenceFrame, _ fbb: inout FlatBufferBuilder) { fbb.add(element: OBSERVER_POSITION_REFERENCE_FRAME.rawValue, def: 0, at: VTOFFSET.OBSERVER_POSITION_REFERENCE_FRAME.p) }
  public static func add(OBS_REFERENCE_FRAME: referenceFrame, _ fbb: inout FlatBufferBuilder) { fbb.add(element: OBS_REFERENCE_FRAME.rawValue, def: 0, at: VTOFFSET.OBS_REFERENCE_FRAME.p) }
  public static func add(EPOCH: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: EPOCH, at: VTOFFSET.EPOCH.p) }
  public static func add(CCSDS_TDM_VERS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: CCSDS_TDM_VERS, at: VTOFFSET.CCSDS_TDM_VERS.p) }
  public static func addVectorOf(COMMENT: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: COMMENT, at: VTOFFSET.COMMENT.p) }
  public static func add(CREATION_DATE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: CREATION_DATE, at: VTOFFSET.CREATION_DATE.p) }
  public static func add(ORIGINATOR: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ORIGINATOR, at: VTOFFSET.ORIGINATOR.p) }
  public static func add(META_START: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: META_START, at: VTOFFSET.META_START.p) }
  public static func add(TIME_SYSTEM: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: TIME_SYSTEM, at: VTOFFSET.TIME_SYSTEM.p) }
  public static func add(START_TIME: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: START_TIME, at: VTOFFSET.START_TIME.p) }
  public static func add(STOP_TIME: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: STOP_TIME, at: VTOFFSET.STOP_TIME.p) }
  public static func add(PARTICIPANT_1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: PARTICIPANT_1, at: VTOFFSET.PARTICIPANT_1.p) }
  public static func add(PARTICIPANT_2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: PARTICIPANT_2, at: VTOFFSET.PARTICIPANT_2.p) }
  public static func add(PARTICIPANT_3: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: PARTICIPANT_3, at: VTOFFSET.PARTICIPANT_3.p) }
  public static func add(PARTICIPANT_4: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: PARTICIPANT_4, at: VTOFFSET.PARTICIPANT_4.p) }
  public static func add(PARTICIPANT_5: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: PARTICIPANT_5, at: VTOFFSET.PARTICIPANT_5.p) }
  public static func add(MODE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: MODE, at: VTOFFSET.MODE.p) }
  public static func add(PATH_1: UInt16, _ fbb: inout FlatBufferBuilder) { fbb.add(element: PATH_1, def: 0, at: VTOFFSET.PATH_1.p) }
  public static func add(PATH_2: UInt16, _ fbb: inout FlatBufferBuilder) { fbb.add(element: PATH_2, def: 0, at: VTOFFSET.PATH_2.p) }
  public static func add(TRANSMIT_BAND: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: TRANSMIT_BAND, at: VTOFFSET.TRANSMIT_BAND.p) }
  public static func add(RECEIVE_BAND: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: RECEIVE_BAND, at: VTOFFSET.RECEIVE_BAND.p) }
  public static func add(INTEGRATION_INTERVAL: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: INTEGRATION_INTERVAL, def: 0.0, at: VTOFFSET.INTEGRATION_INTERVAL.p) }
  public static func add(INTEGRATION_REF: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: INTEGRATION_REF, at: VTOFFSET.INTEGRATION_REF.p) }
  public static func add(RECEIVE_DELAY_2: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RECEIVE_DELAY_2, def: 0.0, at: VTOFFSET.RECEIVE_DELAY_2.p) }
  public static func add(RECEIVE_DELAY_3: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RECEIVE_DELAY_3, def: 0.0, at: VTOFFSET.RECEIVE_DELAY_3.p) }
  public static func add(DATA_QUALITY: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: DATA_QUALITY, at: VTOFFSET.DATA_QUALITY.p) }
  public static func add(META_STOP: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: META_STOP, at: VTOFFSET.META_STOP.p) }
  public static func add(DATA_START: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: DATA_START, at: VTOFFSET.DATA_START.p) }
  public static func add(TRANSMIT_FREQ_1: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: TRANSMIT_FREQ_1, def: 0.0, at: VTOFFSET.TRANSMIT_FREQ_1.p) }
  public static func addVectorOf(RECEIVE_FREQ: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: RECEIVE_FREQ, at: VTOFFSET.RECEIVE_FREQ.p) }
  public static func add(DATA_STOP: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: DATA_STOP, at: VTOFFSET.DATA_STOP.p) }
  public static func add(TIMETAG_REF: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: TIMETAG_REF, at: VTOFFSET.TIMETAG_REF.p) }
  public static func add(ANGLE_TYPE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ANGLE_TYPE, at: VTOFFSET.ANGLE_TYPE.p) }
  public static func addVectorOf(ANGLE_1: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ANGLE_1, at: VTOFFSET.ANGLE_1.p) }
  public static func addVectorOf(ANGLE_2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ANGLE_2, at: VTOFFSET.ANGLE_2.p) }
  public static func add(ANGLE_UNCERTAINTY_1: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ANGLE_UNCERTAINTY_1, def: 0.0, at: VTOFFSET.ANGLE_UNCERTAINTY_1.p) }
  public static func add(ANGLE_UNCERTAINTY_2: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ANGLE_UNCERTAINTY_2, def: 0.0, at: VTOFFSET.ANGLE_UNCERTAINTY_2.p) }
  public static func add(RANGE_RATE: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RANGE_RATE, def: 0.0, at: VTOFFSET.RANGE_RATE.p) }
  public static func add(RANGE_UNCERTAINTY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RANGE_UNCERTAINTY, def: 0.0, at: VTOFFSET.RANGE_UNCERTAINTY.p) }
  public static func add(RANGE_MODE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: RANGE_MODE, at: VTOFFSET.RANGE_MODE.p) }
  public static func add(RANGE_MODULUS: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RANGE_MODULUS, def: 0.0, at: VTOFFSET.RANGE_MODULUS.p) }
  public static func add(CORRECTION_ANGLE_1: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CORRECTION_ANGLE_1, def: 0.0, at: VTOFFSET.CORRECTION_ANGLE_1.p) }
  public static func add(CORRECTION_ANGLE_2: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CORRECTION_ANGLE_2, def: 0.0, at: VTOFFSET.CORRECTION_ANGLE_2.p) }
  public static func add(CORRECTIONS_APPLIED: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: CORRECTIONS_APPLIED, at: VTOFFSET.CORRECTIONS_APPLIED.p) }
  public static func addVectorOf(TROPO_DRY: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: TROPO_DRY, at: VTOFFSET.TROPO_DRY.p) }
  public static func addVectorOf(TROPO_WET: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: TROPO_WET, at: VTOFFSET.TROPO_WET.p) }
  public static func addVectorOf(STEC: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: STEC, at: VTOFFSET.STEC.p) }
  public static func addVectorOf(PRESSURE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: PRESSURE, at: VTOFFSET.PRESSURE.p) }
  public static func addVectorOf(RHUMIDITY: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: RHUMIDITY, at: VTOFFSET.RHUMIDITY.p) }
  public static func addVectorOf(TEMPERATURE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: TEMPERATURE, at: VTOFFSET.TEMPERATURE.p) }
  public static func addVectorOf(CLOCK_BIAS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: CLOCK_BIAS, at: VTOFFSET.CLOCK_BIAS.p) }
  public static func addVectorOf(CLOCK_DRIFT: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: CLOCK_DRIFT, at: VTOFFSET.CLOCK_DRIFT.p) }
  public static func endTDM(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createTDM(
    _ fbb: inout FlatBufferBuilder,
    OBSERVER_IDOffset OBSERVER_ID: Offset = Offset(),
    OBSERVER_X: Double = 0.0,
    OBSERVER_Y: Double = 0.0,
    OBSERVER_Z: Double = 0.0,
    OBSERVER_VX: Double = 0.0,
    OBSERVER_VY: Double = 0.0,
    OBSERVER_VZ: Double = 0.0,
    OBSERVER_POSITION_REFERENCE_FRAME: referenceFrame = .ecef,
    OBS_REFERENCE_FRAME: referenceFrame = .ecef,
    EPOCHOffset EPOCH: Offset = Offset(),
    CCSDS_TDM_VERSOffset CCSDS_TDM_VERS: Offset = Offset(),
    COMMENTVectorOffset COMMENT: Offset = Offset(),
    CREATION_DATEOffset CREATION_DATE: Offset = Offset(),
    ORIGINATOROffset ORIGINATOR: Offset = Offset(),
    META_STARTOffset META_START: Offset = Offset(),
    TIME_SYSTEMOffset TIME_SYSTEM: Offset = Offset(),
    START_TIMEOffset START_TIME: Offset = Offset(),
    STOP_TIMEOffset STOP_TIME: Offset = Offset(),
    PARTICIPANT_1Offset PARTICIPANT_1: Offset = Offset(),
    PARTICIPANT_2Offset PARTICIPANT_2: Offset = Offset(),
    PARTICIPANT_3Offset PARTICIPANT_3: Offset = Offset(),
    PARTICIPANT_4Offset PARTICIPANT_4: Offset = Offset(),
    PARTICIPANT_5Offset PARTICIPANT_5: Offset = Offset(),
    MODEOffset MODE: Offset = Offset(),
    PATH_1: UInt16 = 0,
    PATH_2: UInt16 = 0,
    TRANSMIT_BANDOffset TRANSMIT_BAND: Offset = Offset(),
    RECEIVE_BANDOffset RECEIVE_BAND: Offset = Offset(),
    INTEGRATION_INTERVAL: Float32 = 0.0,
    INTEGRATION_REFOffset INTEGRATION_REF: Offset = Offset(),
    RECEIVE_DELAY_2: Double = 0.0,
    RECEIVE_DELAY_3: Double = 0.0,
    DATA_QUALITYOffset DATA_QUALITY: Offset = Offset(),
    META_STOPOffset META_STOP: Offset = Offset(),
    DATA_STARTOffset DATA_START: Offset = Offset(),
    TRANSMIT_FREQ_1: Double = 0.0,
    RECEIVE_FREQVectorOffset RECEIVE_FREQ: Offset = Offset(),
    DATA_STOPOffset DATA_STOP: Offset = Offset(),
    TIMETAG_REFOffset TIMETAG_REF: Offset = Offset(),
    ANGLE_TYPEOffset ANGLE_TYPE: Offset = Offset(),
    ANGLE_1VectorOffset ANGLE_1: Offset = Offset(),
    ANGLE_2VectorOffset ANGLE_2: Offset = Offset(),
    ANGLE_UNCERTAINTY_1: Float32 = 0.0,
    ANGLE_UNCERTAINTY_2: Float32 = 0.0,
    RANGE_RATE: Double = 0.0,
    RANGE_UNCERTAINTY: Double = 0.0,
    RANGE_MODEOffset RANGE_MODE: Offset = Offset(),
    RANGE_MODULUS: Double = 0.0,
    CORRECTION_ANGLE_1: Float32 = 0.0,
    CORRECTION_ANGLE_2: Float32 = 0.0,
    CORRECTIONS_APPLIEDOffset CORRECTIONS_APPLIED: Offset = Offset(),
    TROPO_DRYVectorOffset TROPO_DRY: Offset = Offset(),
    TROPO_WETVectorOffset TROPO_WET: Offset = Offset(),
    STECVectorOffset STEC: Offset = Offset(),
    PRESSUREVectorOffset PRESSURE: Offset = Offset(),
    RHUMIDITYVectorOffset RHUMIDITY: Offset = Offset(),
    TEMPERATUREVectorOffset TEMPERATURE: Offset = Offset(),
    CLOCK_BIASVectorOffset CLOCK_BIAS: Offset = Offset(),
    CLOCK_DRIFTVectorOffset CLOCK_DRIFT: Offset = Offset()
  ) -> Offset {
    let __start = TDM.startTDM(&fbb)
    TDM.add(OBSERVER_ID: OBSERVER_ID, &fbb)
    TDM.add(OBSERVER_X: OBSERVER_X, &fbb)
    TDM.add(OBSERVER_Y: OBSERVER_Y, &fbb)
    TDM.add(OBSERVER_Z: OBSERVER_Z, &fbb)
    TDM.add(OBSERVER_VX: OBSERVER_VX, &fbb)
    TDM.add(OBSERVER_VY: OBSERVER_VY, &fbb)
    TDM.add(OBSERVER_VZ: OBSERVER_VZ, &fbb)
    TDM.add(OBSERVER_POSITION_REFERENCE_FRAME: OBSERVER_POSITION_REFERENCE_FRAME, &fbb)
    TDM.add(OBS_REFERENCE_FRAME: OBS_REFERENCE_FRAME, &fbb)
    TDM.add(EPOCH: EPOCH, &fbb)
    TDM.add(CCSDS_TDM_VERS: CCSDS_TDM_VERS, &fbb)
    TDM.addVectorOf(COMMENT: COMMENT, &fbb)
    TDM.add(CREATION_DATE: CREATION_DATE, &fbb)
    TDM.add(ORIGINATOR: ORIGINATOR, &fbb)
    TDM.add(META_START: META_START, &fbb)
    TDM.add(TIME_SYSTEM: TIME_SYSTEM, &fbb)
    TDM.add(START_TIME: START_TIME, &fbb)
    TDM.add(STOP_TIME: STOP_TIME, &fbb)
    TDM.add(PARTICIPANT_1: PARTICIPANT_1, &fbb)
    TDM.add(PARTICIPANT_2: PARTICIPANT_2, &fbb)
    TDM.add(PARTICIPANT_3: PARTICIPANT_3, &fbb)
    TDM.add(PARTICIPANT_4: PARTICIPANT_4, &fbb)
    TDM.add(PARTICIPANT_5: PARTICIPANT_5, &fbb)
    TDM.add(MODE: MODE, &fbb)
    TDM.add(PATH_1: PATH_1, &fbb)
    TDM.add(PATH_2: PATH_2, &fbb)
    TDM.add(TRANSMIT_BAND: TRANSMIT_BAND, &fbb)
    TDM.add(RECEIVE_BAND: RECEIVE_BAND, &fbb)
    TDM.add(INTEGRATION_INTERVAL: INTEGRATION_INTERVAL, &fbb)
    TDM.add(INTEGRATION_REF: INTEGRATION_REF, &fbb)
    TDM.add(RECEIVE_DELAY_2: RECEIVE_DELAY_2, &fbb)
    TDM.add(RECEIVE_DELAY_3: RECEIVE_DELAY_3, &fbb)
    TDM.add(DATA_QUALITY: DATA_QUALITY, &fbb)
    TDM.add(META_STOP: META_STOP, &fbb)
    TDM.add(DATA_START: DATA_START, &fbb)
    TDM.add(TRANSMIT_FREQ_1: TRANSMIT_FREQ_1, &fbb)
    TDM.addVectorOf(RECEIVE_FREQ: RECEIVE_FREQ, &fbb)
    TDM.add(DATA_STOP: DATA_STOP, &fbb)
    TDM.add(TIMETAG_REF: TIMETAG_REF, &fbb)
    TDM.add(ANGLE_TYPE: ANGLE_TYPE, &fbb)
    TDM.addVectorOf(ANGLE_1: ANGLE_1, &fbb)
    TDM.addVectorOf(ANGLE_2: ANGLE_2, &fbb)
    TDM.add(ANGLE_UNCERTAINTY_1: ANGLE_UNCERTAINTY_1, &fbb)
    TDM.add(ANGLE_UNCERTAINTY_2: ANGLE_UNCERTAINTY_2, &fbb)
    TDM.add(RANGE_RATE: RANGE_RATE, &fbb)
    TDM.add(RANGE_UNCERTAINTY: RANGE_UNCERTAINTY, &fbb)
    TDM.add(RANGE_MODE: RANGE_MODE, &fbb)
    TDM.add(RANGE_MODULUS: RANGE_MODULUS, &fbb)
    TDM.add(CORRECTION_ANGLE_1: CORRECTION_ANGLE_1, &fbb)
    TDM.add(CORRECTION_ANGLE_2: CORRECTION_ANGLE_2, &fbb)
    TDM.add(CORRECTIONS_APPLIED: CORRECTIONS_APPLIED, &fbb)
    TDM.addVectorOf(TROPO_DRY: TROPO_DRY, &fbb)
    TDM.addVectorOf(TROPO_WET: TROPO_WET, &fbb)
    TDM.addVectorOf(STEC: STEC, &fbb)
    TDM.addVectorOf(PRESSURE: PRESSURE, &fbb)
    TDM.addVectorOf(RHUMIDITY: RHUMIDITY, &fbb)
    TDM.addVectorOf(TEMPERATURE: TEMPERATURE, &fbb)
    TDM.addVectorOf(CLOCK_BIAS: CLOCK_BIAS, &fbb)
    TDM.addVectorOf(CLOCK_DRIFT: CLOCK_DRIFT, &fbb)
    return TDM.endTDM(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.OBSERVER_ID.p, fieldName: "OBSERVER_ID", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.OBSERVER_X.p, fieldName: "OBSERVER_X", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.OBSERVER_Y.p, fieldName: "OBSERVER_Y", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.OBSERVER_Z.p, fieldName: "OBSERVER_Z", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.OBSERVER_VX.p, fieldName: "OBSERVER_VX", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.OBSERVER_VY.p, fieldName: "OBSERVER_VY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.OBSERVER_VZ.p, fieldName: "OBSERVER_VZ", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.OBSERVER_POSITION_REFERENCE_FRAME.p, fieldName: "OBSERVER_POSITION_REFERENCE_FRAME", required: false, type: referenceFrame.self)
    try _v.visit(field: VTOFFSET.OBS_REFERENCE_FRAME.p, fieldName: "OBS_REFERENCE_FRAME", required: false, type: referenceFrame.self)
    try _v.visit(field: VTOFFSET.EPOCH.p, fieldName: "EPOCH", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.CCSDS_TDM_VERS.p, fieldName: "CCSDS_TDM_VERS", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.COMMENT.p, fieldName: "COMMENT", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.CREATION_DATE.p, fieldName: "CREATION_DATE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ORIGINATOR.p, fieldName: "ORIGINATOR", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.META_START.p, fieldName: "META_START", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.TIME_SYSTEM.p, fieldName: "TIME_SYSTEM", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.START_TIME.p, fieldName: "START_TIME", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.STOP_TIME.p, fieldName: "STOP_TIME", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.PARTICIPANT_1.p, fieldName: "PARTICIPANT_1", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.PARTICIPANT_2.p, fieldName: "PARTICIPANT_2", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.PARTICIPANT_3.p, fieldName: "PARTICIPANT_3", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.PARTICIPANT_4.p, fieldName: "PARTICIPANT_4", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.PARTICIPANT_5.p, fieldName: "PARTICIPANT_5", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.MODE.p, fieldName: "MODE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.PATH_1.p, fieldName: "PATH_1", required: false, type: UInt16.self)
    try _v.visit(field: VTOFFSET.PATH_2.p, fieldName: "PATH_2", required: false, type: UInt16.self)
    try _v.visit(field: VTOFFSET.TRANSMIT_BAND.p, fieldName: "TRANSMIT_BAND", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.RECEIVE_BAND.p, fieldName: "RECEIVE_BAND", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.INTEGRATION_INTERVAL.p, fieldName: "INTEGRATION_INTERVAL", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.INTEGRATION_REF.p, fieldName: "INTEGRATION_REF", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.RECEIVE_DELAY_2.p, fieldName: "RECEIVE_DELAY_2", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.RECEIVE_DELAY_3.p, fieldName: "RECEIVE_DELAY_3", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.DATA_QUALITY.p, fieldName: "DATA_QUALITY", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.META_STOP.p, fieldName: "META_STOP", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.DATA_START.p, fieldName: "DATA_START", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.TRANSMIT_FREQ_1.p, fieldName: "TRANSMIT_FREQ_1", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.RECEIVE_FREQ.p, fieldName: "RECEIVE_FREQ", required: false, type: ForwardOffset<Vector<Double, Double>>.self)
    try _v.visit(field: VTOFFSET.DATA_STOP.p, fieldName: "DATA_STOP", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.TIMETAG_REF.p, fieldName: "TIMETAG_REF", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ANGLE_TYPE.p, fieldName: "ANGLE_TYPE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ANGLE_1.p, fieldName: "ANGLE_1", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.ANGLE_2.p, fieldName: "ANGLE_2", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.ANGLE_UNCERTAINTY_1.p, fieldName: "ANGLE_UNCERTAINTY_1", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.ANGLE_UNCERTAINTY_2.p, fieldName: "ANGLE_UNCERTAINTY_2", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.RANGE_RATE.p, fieldName: "RANGE_RATE", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.RANGE_UNCERTAINTY.p, fieldName: "RANGE_UNCERTAINTY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.RANGE_MODE.p, fieldName: "RANGE_MODE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.RANGE_MODULUS.p, fieldName: "RANGE_MODULUS", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.CORRECTION_ANGLE_1.p, fieldName: "CORRECTION_ANGLE_1", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.CORRECTION_ANGLE_2.p, fieldName: "CORRECTION_ANGLE_2", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.CORRECTIONS_APPLIED.p, fieldName: "CORRECTIONS_APPLIED", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.TROPO_DRY.p, fieldName: "TROPO_DRY", required: false, type: ForwardOffset<Vector<Double, Double>>.self)
    try _v.visit(field: VTOFFSET.TROPO_WET.p, fieldName: "TROPO_WET", required: false, type: ForwardOffset<Vector<Double, Double>>.self)
    try _v.visit(field: VTOFFSET.STEC.p, fieldName: "STEC", required: false, type: ForwardOffset<Vector<Double, Double>>.self)
    try _v.visit(field: VTOFFSET.PRESSURE.p, fieldName: "PRESSURE", required: false, type: ForwardOffset<Vector<Double, Double>>.self)
    try _v.visit(field: VTOFFSET.RHUMIDITY.p, fieldName: "RHUMIDITY", required: false, type: ForwardOffset<Vector<Double, Double>>.self)
    try _v.visit(field: VTOFFSET.TEMPERATURE.p, fieldName: "TEMPERATURE", required: false, type: ForwardOffset<Vector<Double, Double>>.self)
    try _v.visit(field: VTOFFSET.CLOCK_BIAS.p, fieldName: "CLOCK_BIAS", required: false, type: ForwardOffset<Vector<Double, Double>>.self)
    try _v.visit(field: VTOFFSET.CLOCK_DRIFT.p, fieldName: "CLOCK_DRIFT", required: false, type: ForwardOffset<Vector<Double, Double>>.self)
    _v.finish()
  }
}

