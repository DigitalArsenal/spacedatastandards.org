// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  Country Identity Message
public struct CTR: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$CTR" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: CTR.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case ID = 4
    case NAME = 6
    case GENC_CODE = 8
    case ALPHA_2_CODE = 10
    case ALPHA_3_CODE = 12
    case STANAG_CODE = 14
    case INTERNET_CCTLD = 16
    case COMMENT = 18
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  ISO 3166 Numeric code
  public var ID: String? { let o = _accessor.offset(VTOFFSET.ID.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var IDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ID.v) }
  ///  Country name
  public var NAME: String? { let o = _accessor.offset(VTOFFSET.NAME.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var NAMESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.NAME.v) }
  ///  GENC code
  public var GENC_CODE: String? { let o = _accessor.offset(VTOFFSET.GENC_CODE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var GENC_CODESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.GENC_CODE.v) }
  ///  ISO 3166 Alpha-2 code
  public var ALPHA_2_CODE: String? { let o = _accessor.offset(VTOFFSET.ALPHA_2_CODE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ALPHA_2_CODESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ALPHA_2_CODE.v) }
  ///  ISO 3166 Alpha-3 code
  public var ALPHA_3_CODE: String? { let o = _accessor.offset(VTOFFSET.ALPHA_3_CODE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ALPHA_3_CODESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ALPHA_3_CODE.v) }
  ///  Stanag code
  public var STANAG_CODE: String? { let o = _accessor.offset(VTOFFSET.STANAG_CODE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var STANAG_CODESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.STANAG_CODE.v) }
  ///  Internet country code top-level domain (ccTLD)
  public var INTERNET_CCTLD: String? { let o = _accessor.offset(VTOFFSET.INTERNET_CCTLD.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var INTERNET_CCTLDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.INTERNET_CCTLD.v) }
  ///  Additional comments
  public var COMMENT: String? { let o = _accessor.offset(VTOFFSET.COMMENT.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var COMMENTSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.COMMENT.v) }
  public static func startCTR(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 8) }
  public static func add(ID: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ID, at: VTOFFSET.ID.p) }
  public static func add(NAME: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: NAME, at: VTOFFSET.NAME.p) }
  public static func add(GENC_CODE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: GENC_CODE, at: VTOFFSET.GENC_CODE.p) }
  public static func add(ALPHA_2_CODE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ALPHA_2_CODE, at: VTOFFSET.ALPHA_2_CODE.p) }
  public static func add(ALPHA_3_CODE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ALPHA_3_CODE, at: VTOFFSET.ALPHA_3_CODE.p) }
  public static func add(STANAG_CODE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: STANAG_CODE, at: VTOFFSET.STANAG_CODE.p) }
  public static func add(INTERNET_CCTLD: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: INTERNET_CCTLD, at: VTOFFSET.INTERNET_CCTLD.p) }
  public static func add(COMMENT: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: COMMENT, at: VTOFFSET.COMMENT.p) }
  public static func endCTR(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createCTR(
    _ fbb: inout FlatBufferBuilder,
    IDOffset ID: Offset = Offset(),
    NAMEOffset NAME: Offset = Offset(),
    GENC_CODEOffset GENC_CODE: Offset = Offset(),
    ALPHA_2_CODEOffset ALPHA_2_CODE: Offset = Offset(),
    ALPHA_3_CODEOffset ALPHA_3_CODE: Offset = Offset(),
    STANAG_CODEOffset STANAG_CODE: Offset = Offset(),
    INTERNET_CCTLDOffset INTERNET_CCTLD: Offset = Offset(),
    COMMENTOffset COMMENT: Offset = Offset()
  ) -> Offset {
    let __start = CTR.startCTR(&fbb)
    CTR.add(ID: ID, &fbb)
    CTR.add(NAME: NAME, &fbb)
    CTR.add(GENC_CODE: GENC_CODE, &fbb)
    CTR.add(ALPHA_2_CODE: ALPHA_2_CODE, &fbb)
    CTR.add(ALPHA_3_CODE: ALPHA_3_CODE, &fbb)
    CTR.add(STANAG_CODE: STANAG_CODE, &fbb)
    CTR.add(INTERNET_CCTLD: INTERNET_CCTLD, &fbb)
    CTR.add(COMMENT: COMMENT, &fbb)
    return CTR.endCTR(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.ID.p, fieldName: "ID", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.NAME.p, fieldName: "NAME", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.GENC_CODE.p, fieldName: "GENC_CODE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ALPHA_2_CODE.p, fieldName: "ALPHA_2_CODE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ALPHA_3_CODE.p, fieldName: "ALPHA_3_CODE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.STANAG_CODE.p, fieldName: "STANAG_CODE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.INTERNET_CCTLD.p, fieldName: "INTERNET_CCTLD", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.COMMENT.p, fieldName: "COMMENT", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

public struct CTRCOLLECTION: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$CTR" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: CTRCOLLECTION.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case RECORDS = 4
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var hasRecords: Bool { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? false : true }
  public var RECORDSCount: Int32 { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func RECORDS(at index: Int32) -> CTR? { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? nil : CTR(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public static func startCTRCOLLECTION(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 1) }
  public static func addVectorOf(RECORDS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: RECORDS, at: VTOFFSET.RECORDS.p) }
  public static func endCTRCOLLECTION(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createCTRCOLLECTION(
    _ fbb: inout FlatBufferBuilder,
    RECORDSVectorOffset RECORDS: Offset = Offset()
  ) -> Offset {
    let __start = CTRCOLLECTION.startCTRCOLLECTION(&fbb)
    CTRCOLLECTION.addVectorOf(RECORDS: RECORDS, &fbb)
    return CTRCOLLECTION.endCTRCOLLECTION(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.RECORDS.p, fieldName: "RECORDS", required: false, type: ForwardOffset<Vector<ForwardOffset<CTR>, CTR>>.self)
    _v.finish()
  }
}

