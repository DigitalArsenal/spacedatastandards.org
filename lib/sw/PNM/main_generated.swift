// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  Publish Notification Message
public struct PNM: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$PNM" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: PNM.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case IPFS_CID = 4
    case KEY_ADDRESS = 6
    case FILE_IDENTIFIER = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  IPFS Content Identifier (CID)
  ///  The hash of a file stored on the InterPlanetary File System (IPFS).
  ///  Refer to the section on IPFS integration for details.
  public var IPFS_CID: String? { let o = _accessor.offset(VTOFFSET.IPFS_CID.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var IPFS_CIDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.IPFS_CID.v) }
  ///  Unique identifier generated from the data provider's public key
  public var KEY_ADDRESS: String? { let o = _accessor.offset(VTOFFSET.KEY_ADDRESS.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var KEY_ADDRESSSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.KEY_ADDRESS.v) }
  ///  SpaceDataStandards 4 Character File Identifier
  public var FILE_IDENTIFIER: String? { let o = _accessor.offset(VTOFFSET.FILE_IDENTIFIER.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var FILE_IDENTIFIERSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.FILE_IDENTIFIER.v) }
  public static func startPNM(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(IPFS_CID: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: IPFS_CID, at: VTOFFSET.IPFS_CID.p) }
  public static func add(KEY_ADDRESS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: KEY_ADDRESS, at: VTOFFSET.KEY_ADDRESS.p) }
  public static func add(FILE_IDENTIFIER: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: FILE_IDENTIFIER, at: VTOFFSET.FILE_IDENTIFIER.p) }
  public static func endPNM(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createPNM(
    _ fbb: inout FlatBufferBuilder,
    IPFS_CIDOffset IPFS_CID: Offset = Offset(),
    KEY_ADDRESSOffset KEY_ADDRESS: Offset = Offset(),
    FILE_IDENTIFIEROffset FILE_IDENTIFIER: Offset = Offset()
  ) -> Offset {
    let __start = PNM.startPNM(&fbb)
    PNM.add(IPFS_CID: IPFS_CID, &fbb)
    PNM.add(KEY_ADDRESS: KEY_ADDRESS, &fbb)
    PNM.add(FILE_IDENTIFIER: FILE_IDENTIFIER, &fbb)
    return PNM.endPNM(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.IPFS_CID.p, fieldName: "IPFS_CID", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.KEY_ADDRESS.p, fieldName: "KEY_ADDRESS", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.FILE_IDENTIFIER.p, fieldName: "FILE_IDENTIFIER", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

///  Collection of Publish Notification Messages
///  This table groups multiple PNM records for batch processing and management.
public struct PNMCOLLECTION: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$PNM" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: PNMCOLLECTION.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case RECORDS = 4
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var hasRecords: Bool { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? false : true }
  public var RECORDSCount: Int32 { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func RECORDS(at index: Int32) -> PNM? { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? nil : PNM(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public static func startPNMCOLLECTION(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 1) }
  public static func addVectorOf(RECORDS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: RECORDS, at: VTOFFSET.RECORDS.p) }
  public static func endPNMCOLLECTION(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createPNMCOLLECTION(
    _ fbb: inout FlatBufferBuilder,
    RECORDSVectorOffset RECORDS: Offset = Offset()
  ) -> Offset {
    let __start = PNMCOLLECTION.startPNMCOLLECTION(&fbb)
    PNMCOLLECTION.addVectorOf(RECORDS: RECORDS, &fbb)
    return PNMCOLLECTION.endPNMCOLLECTION(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.RECORDS.p, fieldName: "RECORDS", required: false, type: ForwardOffset<Vector<ForwardOffset<PNM>, PNM>>.self)
    _v.finish()
  }
}

