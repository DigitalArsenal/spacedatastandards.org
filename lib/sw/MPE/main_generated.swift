// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum referenceFrame: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Earth Mean Equator and Equinox of J2000
  case eme2000 = 0
  ///  Geocentric Celestial Reference Frame
  case gcrf = 1
  ///  Greenwich Rotating Coordinates
  case grc = 2
  ///  International Celestial Reference Frame
  case icrf = 3
  ///  International Terrestrial Reference Frame 2000
  case itrf2000 = 4
  ///  International Terrestrial Reference Frame 1993
  case itrf93 = 5
  ///  International Terrestrial Reference Frame 1997
  case itrf97 = 6
  ///  Mars Centered Inertial
  case mci = 7
  ///  True of Date, Rotating
  case tdr = 8
  ///  True Equator Mean Equinox
  case teme = 9
  ///  True of Date
  case tod = 10

  public static var max: referenceFrame { return .tod }
  public static var min: referenceFrame { return .eme2000 }
}


public enum timeSystem: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Greenwich Mean Sidereal Time
  case gmst = 0
  ///  Global Positioning System
  case gps = 1
  ///  Mission Elapsed Time
  case met = 2
  ///  Mission Relative Time
  case mrt = 3
  ///  Spacecraft Clock (receiver) (requires rules for interpretation in ICD)
  case sclk = 4
  ///  International Atomic Time
  case tai = 5
  ///  Barycentric Coordinate Time
  case tcb = 6
  ///  Barycentric Dynamical Time
  case tdb = 7
  ///  Geocentric Coordinate Time
  case tcg = 8
  ///  Terrestrial Time
  case tt = 9
  ///  Universal Time
  case ut1 = 10
  ///  Coordinated Universal Time
  case utc = 11

  public static var max: timeSystem { return .utc }
  public static var min: timeSystem { return .gmst }
}


public enum meanElementTheory: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  ///  Simplified General Perturbation Model 4
  case sgp4 = 0
  ///  Draper Semi-analytical Satellite Theory
  case dsst = 1
  ///  Universal Semianalytical Method
  case usm = 2

  public static var max: meanElementTheory { return .usm }
  public static var min: meanElementTheory { return .sgp4 }
}


///  Minimum Propagatable Element Set
public struct MPE: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$MPE" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: MPE.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case ENTITY_ID = 4
    case EPOCH = 6
    case MEAN_MOTION = 8
    case ECCENTRICITY = 10
    case INCLINATION = 12
    case RA_OF_ASC_NODE = 14
    case ARG_OF_PERICENTER = 16
    case MEAN_ANOMALY = 18
    case BSTAR = 20
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique ID as a String
  public var ENTITY_ID: String? { let o = _accessor.offset(VTOFFSET.ENTITY_ID.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ENTITY_IDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ENTITY_ID.v) }
  ///  Epoch of Mean Keplerian elements. (UNIX TimeStamp)
  public var EPOCH: Double { let o = _accessor.offset(VTOFFSET.EPOCH.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Semi-major axis in km or mean motion in rev/day
  public var MEAN_MOTION: Double { let o = _accessor.offset(VTOFFSET.MEAN_MOTION.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Eccentricity
  public var ECCENTRICITY: Double { let o = _accessor.offset(VTOFFSET.ECCENTRICITY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Inclination
  public var INCLINATION: Double { let o = _accessor.offset(VTOFFSET.INCLINATION.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Right ascension of ascending node
  public var RA_OF_ASC_NODE: Double { let o = _accessor.offset(VTOFFSET.RA_OF_ASC_NODE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Argument of pericenter
  public var ARG_OF_PERICENTER: Double { let o = _accessor.offset(VTOFFSET.ARG_OF_PERICENTER.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Mean anomaly
  public var MEAN_ANOMALY: Double { let o = _accessor.offset(VTOFFSET.MEAN_ANOMALY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  SGP/SGP4 drag-like coefficient (in units 1/[Earth radii])
  public var BSTAR: Double { let o = _accessor.offset(VTOFFSET.BSTAR.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  public static func startMPE(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 9) }
  public static func add(ENTITY_ID: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ENTITY_ID, at: VTOFFSET.ENTITY_ID.p) }
  public static func add(EPOCH: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: EPOCH, def: 0.0, at: VTOFFSET.EPOCH.p) }
  public static func add(MEAN_MOTION: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MEAN_MOTION, def: 0.0, at: VTOFFSET.MEAN_MOTION.p) }
  public static func add(ECCENTRICITY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ECCENTRICITY, def: 0.0, at: VTOFFSET.ECCENTRICITY.p) }
  public static func add(INCLINATION: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: INCLINATION, def: 0.0, at: VTOFFSET.INCLINATION.p) }
  public static func add(RA_OF_ASC_NODE: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RA_OF_ASC_NODE, def: 0.0, at: VTOFFSET.RA_OF_ASC_NODE.p) }
  public static func add(ARG_OF_PERICENTER: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ARG_OF_PERICENTER, def: 0.0, at: VTOFFSET.ARG_OF_PERICENTER.p) }
  public static func add(MEAN_ANOMALY: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MEAN_ANOMALY, def: 0.0, at: VTOFFSET.MEAN_ANOMALY.p) }
  public static func add(BSTAR: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: BSTAR, def: 0.0, at: VTOFFSET.BSTAR.p) }
  public static func endMPE(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMPE(
    _ fbb: inout FlatBufferBuilder,
    ENTITY_IDOffset ENTITY_ID: Offset = Offset(),
    EPOCH: Double = 0.0,
    MEAN_MOTION: Double = 0.0,
    ECCENTRICITY: Double = 0.0,
    INCLINATION: Double = 0.0,
    RA_OF_ASC_NODE: Double = 0.0,
    ARG_OF_PERICENTER: Double = 0.0,
    MEAN_ANOMALY: Double = 0.0,
    BSTAR: Double = 0.0
  ) -> Offset {
    let __start = MPE.startMPE(&fbb)
    MPE.add(ENTITY_ID: ENTITY_ID, &fbb)
    MPE.add(EPOCH: EPOCH, &fbb)
    MPE.add(MEAN_MOTION: MEAN_MOTION, &fbb)
    MPE.add(ECCENTRICITY: ECCENTRICITY, &fbb)
    MPE.add(INCLINATION: INCLINATION, &fbb)
    MPE.add(RA_OF_ASC_NODE: RA_OF_ASC_NODE, &fbb)
    MPE.add(ARG_OF_PERICENTER: ARG_OF_PERICENTER, &fbb)
    MPE.add(MEAN_ANOMALY: MEAN_ANOMALY, &fbb)
    MPE.add(BSTAR: BSTAR, &fbb)
    return MPE.endMPE(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.ENTITY_ID.p, fieldName: "ENTITY_ID", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.EPOCH.p, fieldName: "EPOCH", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.MEAN_MOTION.p, fieldName: "MEAN_MOTION", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ECCENTRICITY.p, fieldName: "ECCENTRICITY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.INCLINATION.p, fieldName: "INCLINATION", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.RA_OF_ASC_NODE.p, fieldName: "RA_OF_ASC_NODE", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.ARG_OF_PERICENTER.p, fieldName: "ARG_OF_PERICENTER", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.MEAN_ANOMALY.p, fieldName: "MEAN_ANOMALY", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.BSTAR.p, fieldName: "BSTAR", required: false, type: Double.self)
    _v.finish()
  }
}

///  Collection of MPE Records
public struct MPECOLLECTION: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$MPE" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: MPECOLLECTION.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case CLASSIFICATION_TYPE = 4
    case REF_FRAME = 6
    case REF_FRAME_EPOCH = 8
    case TIME_SYSTEM = 10
    case MEAN_ELEMENT_THEORY = 12
    case RECORDS = 14
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Default value = U
  public var CLASSIFICATION_TYPE: String? { let o = _accessor.offset(VTOFFSET.CLASSIFICATION_TYPE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var CLASSIFICATION_TYPESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.CLASSIFICATION_TYPE.v) }
  ///  Name of the reference frame (TEME, EME2000, etc.)
  public var REF_FRAME: referenceFrame { let o = _accessor.offset(VTOFFSET.REF_FRAME.v); return o == 0 ? .teme : referenceFrame(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .teme }
  ///  Epoch of the Reference Frame. (UNIX TimeStamp)
  public var REF_FRAME_EPOCH: Double { let o = _accessor.offset(VTOFFSET.REF_FRAME_EPOCH.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Time system used for the orbit state and covariance matrix. (UTC)
  public var TIME_SYSTEM: timeSystem { let o = _accessor.offset(VTOFFSET.TIME_SYSTEM.v); return o == 0 ? .utc : timeSystem(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .utc }
  ///  Description of the Mean Element Theory. (SGP4,DSST,USM)
  public var MEAN_ELEMENT_THEORY: meanElementTheory { let o = _accessor.offset(VTOFFSET.MEAN_ELEMENT_THEORY.v); return o == 0 ? .sgp4 : meanElementTheory(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .sgp4 }
  ///  Array of MPE records
  public var hasRecords: Bool { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? false : true }
  public var RECORDSCount: Int32 { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func RECORDS(at index: Int32) -> MPE? { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? nil : MPE(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public static func startMPECOLLECTION(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 6) }
  public static func add(CLASSIFICATION_TYPE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: CLASSIFICATION_TYPE, at: VTOFFSET.CLASSIFICATION_TYPE.p) }
  public static func add(REF_FRAME: referenceFrame, _ fbb: inout FlatBufferBuilder) { fbb.add(element: REF_FRAME.rawValue, def: 9, at: VTOFFSET.REF_FRAME.p) }
  public static func add(REF_FRAME_EPOCH: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: REF_FRAME_EPOCH, def: 0.0, at: VTOFFSET.REF_FRAME_EPOCH.p) }
  public static func add(TIME_SYSTEM: timeSystem, _ fbb: inout FlatBufferBuilder) { fbb.add(element: TIME_SYSTEM.rawValue, def: 11, at: VTOFFSET.TIME_SYSTEM.p) }
  public static func add(MEAN_ELEMENT_THEORY: meanElementTheory, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MEAN_ELEMENT_THEORY.rawValue, def: 0, at: VTOFFSET.MEAN_ELEMENT_THEORY.p) }
  public static func addVectorOf(RECORDS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: RECORDS, at: VTOFFSET.RECORDS.p) }
  public static func endMPECOLLECTION(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMPECOLLECTION(
    _ fbb: inout FlatBufferBuilder,
    CLASSIFICATION_TYPEOffset CLASSIFICATION_TYPE: Offset = Offset(),
    REF_FRAME: referenceFrame = .teme,
    REF_FRAME_EPOCH: Double = 0.0,
    TIME_SYSTEM: timeSystem = .utc,
    MEAN_ELEMENT_THEORY: meanElementTheory = .sgp4,
    RECORDSVectorOffset RECORDS: Offset = Offset()
  ) -> Offset {
    let __start = MPECOLLECTION.startMPECOLLECTION(&fbb)
    MPECOLLECTION.add(CLASSIFICATION_TYPE: CLASSIFICATION_TYPE, &fbb)
    MPECOLLECTION.add(REF_FRAME: REF_FRAME, &fbb)
    MPECOLLECTION.add(REF_FRAME_EPOCH: REF_FRAME_EPOCH, &fbb)
    MPECOLLECTION.add(TIME_SYSTEM: TIME_SYSTEM, &fbb)
    MPECOLLECTION.add(MEAN_ELEMENT_THEORY: MEAN_ELEMENT_THEORY, &fbb)
    MPECOLLECTION.addVectorOf(RECORDS: RECORDS, &fbb)
    return MPECOLLECTION.endMPECOLLECTION(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.CLASSIFICATION_TYPE.p, fieldName: "CLASSIFICATION_TYPE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.REF_FRAME.p, fieldName: "REF_FRAME", required: false, type: referenceFrame.self)
    try _v.visit(field: VTOFFSET.REF_FRAME_EPOCH.p, fieldName: "REF_FRAME_EPOCH", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.TIME_SYSTEM.p, fieldName: "TIME_SYSTEM", required: false, type: timeSystem.self)
    try _v.visit(field: VTOFFSET.MEAN_ELEMENT_THEORY.p, fieldName: "MEAN_ELEMENT_THEORY", required: false, type: meanElementTheory.self)
    try _v.visit(field: VTOFFSET.RECORDS.p, fieldName: "RECORDS", required: false, type: ForwardOffset<Vector<ForwardOffset<MPE>, MPE>>.self)
    _v.finish()
  }
}

