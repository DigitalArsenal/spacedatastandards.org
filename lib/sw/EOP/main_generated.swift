// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum DataType: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case observed = 0
  case predicted = 1

  public static var max: DataType { return .predicted }
  public static var min: DataType { return .observed }
}


///  Earth Orientation Parameters
public struct EOP: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$EOP" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EOP.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case DATE = 4
    case MJD = 6
    case X_POLE_WANDER_RADIANS = 8
    case Y_POLE_WANDER_RADIANS = 10
    case X_CELESTIAL_POLE_OFFSET_RADIANS = 12
    case Y_CELESTIAL_POLE_OFFSET_RADIANS = 14
    case UT1_MINUS_UTC_SECONDS = 16
    case TAI_MINUS_UTC_SECONDS = 18
    case LENGTH_OF_DAY_CORRECTION_SECONDS = 20
    case DATA_TYPE = 22
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///   Date in ISO 8601 format, e.g., "2018-01-01T00:00:00Z"
  public var DATE: String? { let o = _accessor.offset(VTOFFSET.DATE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var DATESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.DATE.v) }
  ///   Modified Julian Date in UTC, e.g., 58119
  public var MJD: UInt32 { let o = _accessor.offset(VTOFFSET.MJD.v); return o == 0 ? 0 : _accessor.readBuffer(of: UInt32.self, at: o) }
  ///   x component of Pole Wander in radians, e.g., 2.872908911518888E-7
  public var X_POLE_WANDER_RADIANS: Float32 { let o = _accessor.offset(VTOFFSET.X_POLE_WANDER_RADIANS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///   y component of Pole Wander in radians, e.g., 1.2003259523750447E-6
  public var Y_POLE_WANDER_RADIANS: Float32 { let o = _accessor.offset(VTOFFSET.Y_POLE_WANDER_RADIANS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///   x component of Celestial Pole Offset in radians, e.g., 5.720801437092525E-10
  public var X_CELESTIAL_POLE_OFFSET_RADIANS: Float32 { let o = _accessor.offset(VTOFFSET.X_CELESTIAL_POLE_OFFSET_RADIANS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///   y component of Celestial Pole Offset in radians, e.g., -8.484239419416879E-10
  public var Y_CELESTIAL_POLE_OFFSET_RADIANS: Float32 { let o = _accessor.offset(VTOFFSET.Y_CELESTIAL_POLE_OFFSET_RADIANS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///   UT1 minus UTC in seconds, e.g., 0.2163567
  public var UT1_MINUS_UTC_SECONDS: Float32 { let o = _accessor.offset(VTOFFSET.UT1_MINUS_UTC_SECONDS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///   TAI minus UTC in seconds, e.g., 37
  public var TAI_MINUS_UTC_SECONDS: UInt16 { let o = _accessor.offset(VTOFFSET.TAI_MINUS_UTC_SECONDS.v); return o == 0 ? 0 : _accessor.readBuffer(of: UInt16.self, at: o) }
  ///   Correction to Length of Day in seconds, e.g., 8.094E-4
  public var LENGTH_OF_DAY_CORRECTION_SECONDS: Float32 { let o = _accessor.offset(VTOFFSET.LENGTH_OF_DAY_CORRECTION_SECONDS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///   Data type (O = Observed, P = Predicted)
  public var DATA_TYPE: DataType { let o = _accessor.offset(VTOFFSET.DATA_TYPE.v); return o == 0 ? .observed : DataType(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .observed }
  public static func startEOP(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 10) }
  public static func add(DATE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: DATE, at: VTOFFSET.DATE.p) }
  public static func add(MJD: UInt32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MJD, def: 0, at: VTOFFSET.MJD.p) }
  public static func add(X_POLE_WANDER_RADIANS: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: X_POLE_WANDER_RADIANS, def: 0.0, at: VTOFFSET.X_POLE_WANDER_RADIANS.p) }
  public static func add(Y_POLE_WANDER_RADIANS: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: Y_POLE_WANDER_RADIANS, def: 0.0, at: VTOFFSET.Y_POLE_WANDER_RADIANS.p) }
  public static func add(X_CELESTIAL_POLE_OFFSET_RADIANS: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: X_CELESTIAL_POLE_OFFSET_RADIANS, def: 0.0, at: VTOFFSET.X_CELESTIAL_POLE_OFFSET_RADIANS.p) }
  public static func add(Y_CELESTIAL_POLE_OFFSET_RADIANS: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: Y_CELESTIAL_POLE_OFFSET_RADIANS, def: 0.0, at: VTOFFSET.Y_CELESTIAL_POLE_OFFSET_RADIANS.p) }
  public static func add(UT1_MINUS_UTC_SECONDS: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: UT1_MINUS_UTC_SECONDS, def: 0.0, at: VTOFFSET.UT1_MINUS_UTC_SECONDS.p) }
  public static func add(TAI_MINUS_UTC_SECONDS: UInt16, _ fbb: inout FlatBufferBuilder) { fbb.add(element: TAI_MINUS_UTC_SECONDS, def: 0, at: VTOFFSET.TAI_MINUS_UTC_SECONDS.p) }
  public static func add(LENGTH_OF_DAY_CORRECTION_SECONDS: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: LENGTH_OF_DAY_CORRECTION_SECONDS, def: 0.0, at: VTOFFSET.LENGTH_OF_DAY_CORRECTION_SECONDS.p) }
  public static func add(DATA_TYPE: DataType, _ fbb: inout FlatBufferBuilder) { fbb.add(element: DATA_TYPE.rawValue, def: 0, at: VTOFFSET.DATA_TYPE.p) }
  public static func endEOP(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEOP(
    _ fbb: inout FlatBufferBuilder,
    DATEOffset DATE: Offset = Offset(),
    MJD: UInt32 = 0,
    X_POLE_WANDER_RADIANS: Float32 = 0.0,
    Y_POLE_WANDER_RADIANS: Float32 = 0.0,
    X_CELESTIAL_POLE_OFFSET_RADIANS: Float32 = 0.0,
    Y_CELESTIAL_POLE_OFFSET_RADIANS: Float32 = 0.0,
    UT1_MINUS_UTC_SECONDS: Float32 = 0.0,
    TAI_MINUS_UTC_SECONDS: UInt16 = 0,
    LENGTH_OF_DAY_CORRECTION_SECONDS: Float32 = 0.0,
    DATA_TYPE: DataType = .observed
  ) -> Offset {
    let __start = EOP.startEOP(&fbb)
    EOP.add(DATE: DATE, &fbb)
    EOP.add(MJD: MJD, &fbb)
    EOP.add(X_POLE_WANDER_RADIANS: X_POLE_WANDER_RADIANS, &fbb)
    EOP.add(Y_POLE_WANDER_RADIANS: Y_POLE_WANDER_RADIANS, &fbb)
    EOP.add(X_CELESTIAL_POLE_OFFSET_RADIANS: X_CELESTIAL_POLE_OFFSET_RADIANS, &fbb)
    EOP.add(Y_CELESTIAL_POLE_OFFSET_RADIANS: Y_CELESTIAL_POLE_OFFSET_RADIANS, &fbb)
    EOP.add(UT1_MINUS_UTC_SECONDS: UT1_MINUS_UTC_SECONDS, &fbb)
    EOP.add(TAI_MINUS_UTC_SECONDS: TAI_MINUS_UTC_SECONDS, &fbb)
    EOP.add(LENGTH_OF_DAY_CORRECTION_SECONDS: LENGTH_OF_DAY_CORRECTION_SECONDS, &fbb)
    EOP.add(DATA_TYPE: DATA_TYPE, &fbb)
    return EOP.endEOP(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.DATE.p, fieldName: "DATE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.MJD.p, fieldName: "MJD", required: false, type: UInt32.self)
    try _v.visit(field: VTOFFSET.X_POLE_WANDER_RADIANS.p, fieldName: "X_POLE_WANDER_RADIANS", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.Y_POLE_WANDER_RADIANS.p, fieldName: "Y_POLE_WANDER_RADIANS", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.X_CELESTIAL_POLE_OFFSET_RADIANS.p, fieldName: "X_CELESTIAL_POLE_OFFSET_RADIANS", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.Y_CELESTIAL_POLE_OFFSET_RADIANS.p, fieldName: "Y_CELESTIAL_POLE_OFFSET_RADIANS", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.UT1_MINUS_UTC_SECONDS.p, fieldName: "UT1_MINUS_UTC_SECONDS", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.TAI_MINUS_UTC_SECONDS.p, fieldName: "TAI_MINUS_UTC_SECONDS", required: false, type: UInt16.self)
    try _v.visit(field: VTOFFSET.LENGTH_OF_DAY_CORRECTION_SECONDS.p, fieldName: "LENGTH_OF_DAY_CORRECTION_SECONDS", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.DATA_TYPE.p, fieldName: "DATA_TYPE", required: false, type: DataType.self)
    _v.finish()
  }
}

public struct EOPCOLLECTION: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$EOP" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EOPCOLLECTION.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case RECORDS = 4
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var hasRecords: Bool { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? false : true }
  public var RECORDSCount: Int32 { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func RECORDS(at index: Int32) -> EOP? { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? nil : EOP(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public static func startEOPCOLLECTION(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 1) }
  public static func addVectorOf(RECORDS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: RECORDS, at: VTOFFSET.RECORDS.p) }
  public static func endEOPCOLLECTION(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEOPCOLLECTION(
    _ fbb: inout FlatBufferBuilder,
    RECORDSVectorOffset RECORDS: Offset = Offset()
  ) -> Offset {
    let __start = EOPCOLLECTION.startEOPCOLLECTION(&fbb)
    EOPCOLLECTION.addVectorOf(RECORDS: RECORDS, &fbb)
    return EOPCOLLECTION.endEOPCOLLECTION(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.RECORDS.p, fieldName: "RECORDS", required: false, type: ForwardOffset<Vector<ForwardOffset<EOP>, EOP>>.self)
    _v.finish()
  }
}

