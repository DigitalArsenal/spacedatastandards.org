// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  Electro-Optical Observation
public struct EOO: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$EOO" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EOO.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case EOBSERVATION_ID = 4
    case CLASSIFICATION = 6
    case OB_TIME = 8
    case CORR_QUALITY = 10
    case ID_ON_ORBIT = 12
    case SENSOR_ID = 14
    case COLLECT_METHOD = 16
    case NORAD_CAT_ID = 18
    case TASK_ID = 20
    case TRANSACTION_ID = 22
    case TRACK_ID = 24
    case OB_POSITION = 26
    case ORIG_OBJECT_ID = 28
    case ORIG_SENSOR_ID = 30
    case UCT = 32
    case AZIMUTH = 34
    case AZIMUTH_UNC = 36
    case AZIMUTH_BIAS = 38
    case AZIMUTH_RATE = 40
    case ELEVATION = 42
    case ELEVATION_UNC = 44
    case ELEVATION_BIAS = 46
    case ELEVATION_RATE = 48
    case RANGE = 50
    case RANGE_UNC = 52
    case RANGE_BIAS = 54
    case RANGE_RATE = 56
    case RANGE_RATE_UNC = 58
    case RA = 60
    case RA_RATE = 62
    case RA_UNC = 64
    case RA_BIAS = 66
    case DECLINATION = 68
    case DECLINATION_RATE = 70
    case DECLINATION_UNC = 72
    case DECLINATION_BIAS = 74
    case LOSX = 76
    case LOSY = 78
    case LOSZ = 80
    case LOS_UNC = 82
    case LOSXVEL = 84
    case LOSYVEL = 86
    case LOSZVEL = 88
    case SENLAT = 90
    case SENLON = 92
    case SENALT = 94
    case SENX = 96
    case SENY = 98
    case SENZ = 100
    case FOV_COUNT = 102
    case EXP_DURATION = 104
    case ZEROPTD = 106
    case NET_OBJ_SIG = 108
    case NET_OBJ_SIG_UNC = 110
    case MAG = 112
    case MAG_UNC = 114
    case MAG_NORM_RANGE = 116
    case GEOLAT = 118
    case GEOLON = 120
    case GEOALT = 122
    case GEORANGE = 124
    case SKY_BKGRND = 126
    case PRIMARY_EXTINCTION = 128
    case PRIMARY_EXTINCTION_UNC = 130
    case SOLAR_PHASE_ANGLE = 132
    case SOLAR_EQ_PHASE_ANGLE = 134
    case SOLAR_DEC_ANGLE = 136
    case SHUTTER_DELAY = 138
    case TIMING_BIAS = 140
    case RAW_FILE_URI = 142
    case INTENSITY = 144
    case BG_INTENSITY = 146
    case DESCRIPTOR = 148
    case SOURCE = 150
    case ORIGIN = 152
    case DATA_MODE = 154
    case CREATED_AT = 156
    case CREATED_BY = 158
    case REFERENCE_FRAME = 160
    case SEN_REFERENCE_FRAME = 162
    case UMBRA = 164
    case PENUMBRA = 166
    case ORIG_NETWORK = 168
    case SOURCE_DL = 170
    case TYPE = 172
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Unique identifier for Earth Observation Observation
  public var EOBSERVATION_ID: String? { let o = _accessor.offset(VTOFFSET.EOBSERVATION_ID.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var EOBSERVATION_IDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.EOBSERVATION_ID.v) }
  ///  Classification marking of the data
  public var CLASSIFICATION: String? { let o = _accessor.offset(VTOFFSET.CLASSIFICATION.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var CLASSIFICATIONSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.CLASSIFICATION.v) }
  ///  Observation time in UTC
  public var OB_TIME: String? { let o = _accessor.offset(VTOFFSET.OB_TIME.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var OB_TIMESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.OB_TIME.v) }
  ///  Quality of the correlation
  public var CORR_QUALITY: Float32 { let o = _accessor.offset(VTOFFSET.CORR_QUALITY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Identifier for the satellite on orbit
  public var ID_ON_ORBIT: String? { let o = _accessor.offset(VTOFFSET.ID_ON_ORBIT.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ID_ON_ORBITSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ID_ON_ORBIT.v) }
  ///  Identifier for the sensor
  public var SENSOR_ID: String? { let o = _accessor.offset(VTOFFSET.SENSOR_ID.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var SENSOR_IDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.SENSOR_ID.v) }
  ///  Method of data collection
  public var COLLECT_METHOD: String? { let o = _accessor.offset(VTOFFSET.COLLECT_METHOD.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var COLLECT_METHODSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.COLLECT_METHOD.v) }
  ///  NORAD catalog identifier for the satellite
  public var NORAD_CAT_ID: Int32 { let o = _accessor.offset(VTOFFSET.NORAD_CAT_ID.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Identifier for the task
  public var TASK_ID: String? { let o = _accessor.offset(VTOFFSET.TASK_ID.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var TASK_IDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.TASK_ID.v) }
  ///  Identifier for the transaction
  public var TRANSACTION_ID: String? { let o = _accessor.offset(VTOFFSET.TRANSACTION_ID.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var TRANSACTION_IDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.TRANSACTION_ID.v) }
  ///  Identifier for the track
  public var TRACK_ID: String? { let o = _accessor.offset(VTOFFSET.TRACK_ID.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var TRACK_IDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.TRACK_ID.v) }
  ///  Position of the observation
  public var OB_POSITION: String? { let o = _accessor.offset(VTOFFSET.OB_POSITION.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var OB_POSITIONSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.OB_POSITION.v) }
  ///  Original object identifier
  public var ORIG_OBJECT_ID: String? { let o = _accessor.offset(VTOFFSET.ORIG_OBJECT_ID.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ORIG_OBJECT_IDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ORIG_OBJECT_ID.v) }
  ///  Original sensor identifier
  public var ORIG_SENSOR_ID: String? { let o = _accessor.offset(VTOFFSET.ORIG_SENSOR_ID.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ORIG_SENSOR_IDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ORIG_SENSOR_ID.v) }
  ///  Universal Coordinated Time flag
  public var UCT: Bool { let o = _accessor.offset(VTOFFSET.UCT.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Azimuth angle
  public var AZIMUTH: Float32 { let o = _accessor.offset(VTOFFSET.AZIMUTH.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Uncertainty in azimuth angle
  public var AZIMUTH_UNC: Float32 { let o = _accessor.offset(VTOFFSET.AZIMUTH_UNC.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Bias in azimuth angle
  public var AZIMUTH_BIAS: Float32 { let o = _accessor.offset(VTOFFSET.AZIMUTH_BIAS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Rate of change in azimuth
  public var AZIMUTH_RATE: Float32 { let o = _accessor.offset(VTOFFSET.AZIMUTH_RATE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Elevation angle
  public var ELEVATION: Float32 { let o = _accessor.offset(VTOFFSET.ELEVATION.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Uncertainty in elevation angle
  public var ELEVATION_UNC: Float32 { let o = _accessor.offset(VTOFFSET.ELEVATION_UNC.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Bias in elevation angle
  public var ELEVATION_BIAS: Float32 { let o = _accessor.offset(VTOFFSET.ELEVATION_BIAS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Rate of change in elevation
  public var ELEVATION_RATE: Float32 { let o = _accessor.offset(VTOFFSET.ELEVATION_RATE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Range to the target
  public var RANGE: Float32 { let o = _accessor.offset(VTOFFSET.RANGE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Uncertainty in range
  public var RANGE_UNC: Float32 { let o = _accessor.offset(VTOFFSET.RANGE_UNC.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Bias in range measurement
  public var RANGE_BIAS: Float32 { let o = _accessor.offset(VTOFFSET.RANGE_BIAS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Rate of change in range
  public var RANGE_RATE: Float32 { let o = _accessor.offset(VTOFFSET.RANGE_RATE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Uncertainty in range rate
  public var RANGE_RATE_UNC: Float32 { let o = _accessor.offset(VTOFFSET.RANGE_RATE_UNC.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Right ascension
  public var RA: Float32 { let o = _accessor.offset(VTOFFSET.RA.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Rate of change in right ascension
  public var RA_RATE: Float32 { let o = _accessor.offset(VTOFFSET.RA_RATE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Uncertainty in right ascension
  public var RA_UNC: Float32 { let o = _accessor.offset(VTOFFSET.RA_UNC.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Bias in right ascension
  public var RA_BIAS: Float32 { let o = _accessor.offset(VTOFFSET.RA_BIAS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Declination angle
  public var DECLINATION: Float32 { let o = _accessor.offset(VTOFFSET.DECLINATION.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Rate of change in declination
  public var DECLINATION_RATE: Float32 { let o = _accessor.offset(VTOFFSET.DECLINATION_RATE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Uncertainty in declination
  public var DECLINATION_UNC: Float32 { let o = _accessor.offset(VTOFFSET.DECLINATION_UNC.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Bias in declination
  public var DECLINATION_BIAS: Float32 { let o = _accessor.offset(VTOFFSET.DECLINATION_BIAS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  X-component of line-of-sight vector
  public var LOSX: Float32 { let o = _accessor.offset(VTOFFSET.LOSX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Y-component of line-of-sight vector
  public var LOSY: Float32 { let o = _accessor.offset(VTOFFSET.LOSY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Z-component of line-of-sight vector
  public var LOSZ: Float32 { let o = _accessor.offset(VTOFFSET.LOSZ.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Uncertainty in line-of-sight vector
  public var LOS_UNC: Float32 { let o = _accessor.offset(VTOFFSET.LOS_UNC.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  X-component of line-of-sight velocity
  public var LOSXVEL: Float32 { let o = _accessor.offset(VTOFFSET.LOSXVEL.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Y-component of line-of-sight velocity
  public var LOSYVEL: Float32 { let o = _accessor.offset(VTOFFSET.LOSYVEL.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Z-component of line-of-sight velocity
  public var LOSZVEL: Float32 { let o = _accessor.offset(VTOFFSET.LOSZVEL.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Latitude of sensor
  public var SENLAT: Float32 { let o = _accessor.offset(VTOFFSET.SENLAT.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Longitude of sensor
  public var SENLON: Float32 { let o = _accessor.offset(VTOFFSET.SENLON.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Altitude of sensor
  public var SENALT: Float32 { let o = _accessor.offset(VTOFFSET.SENALT.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  X-coordinate of sensor position
  public var SENX: Float32 { let o = _accessor.offset(VTOFFSET.SENX.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Y-coordinate of sensor position
  public var SENY: Float32 { let o = _accessor.offset(VTOFFSET.SENY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Z-coordinate of sensor position
  public var SENZ: Float32 { let o = _accessor.offset(VTOFFSET.SENZ.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Number of fields of view
  public var FOV_COUNT: Int32 { let o = _accessor.offset(VTOFFSET.FOV_COUNT.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  ///  Duration of the exposure
  public var EXP_DURATION: Float32 { let o = _accessor.offset(VTOFFSET.EXP_DURATION.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Zero-point displacement
  public var ZEROPTD: Float32 { let o = _accessor.offset(VTOFFSET.ZEROPTD.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Net object signal
  public var NET_OBJ_SIG: Float32 { let o = _accessor.offset(VTOFFSET.NET_OBJ_SIG.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Uncertainty in net object signal
  public var NET_OBJ_SIG_UNC: Float32 { let o = _accessor.offset(VTOFFSET.NET_OBJ_SIG_UNC.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Magnitude of the observation
  public var MAG: Float32 { let o = _accessor.offset(VTOFFSET.MAG.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Uncertainty in magnitude
  public var MAG_UNC: Float32 { let o = _accessor.offset(VTOFFSET.MAG_UNC.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Normalized range for magnitude
  public var MAG_NORM_RANGE: Float32 { let o = _accessor.offset(VTOFFSET.MAG_NORM_RANGE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Geocentric latitude
  public var GEOLAT: Float32 { let o = _accessor.offset(VTOFFSET.GEOLAT.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Geocentric longitude
  public var GEOLON: Float32 { let o = _accessor.offset(VTOFFSET.GEOLON.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Geocentric altitude
  public var GEOALT: Float32 { let o = _accessor.offset(VTOFFSET.GEOALT.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Geocentric range
  public var GEORANGE: Float32 { let o = _accessor.offset(VTOFFSET.GEORANGE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Sky background level
  public var SKY_BKGRND: Float32 { let o = _accessor.offset(VTOFFSET.SKY_BKGRND.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Primary extinction
  public var PRIMARY_EXTINCTION: Float32 { let o = _accessor.offset(VTOFFSET.PRIMARY_EXTINCTION.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Uncertainty in primary extinction
  public var PRIMARY_EXTINCTION_UNC: Float32 { let o = _accessor.offset(VTOFFSET.PRIMARY_EXTINCTION_UNC.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Solar phase angle
  public var SOLAR_PHASE_ANGLE: Float32 { let o = _accessor.offset(VTOFFSET.SOLAR_PHASE_ANGLE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Solar equatorial phase angle
  public var SOLAR_EQ_PHASE_ANGLE: Float32 { let o = _accessor.offset(VTOFFSET.SOLAR_EQ_PHASE_ANGLE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Solar declination angle
  public var SOLAR_DEC_ANGLE: Float32 { let o = _accessor.offset(VTOFFSET.SOLAR_DEC_ANGLE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Shutter delay
  public var SHUTTER_DELAY: Float32 { let o = _accessor.offset(VTOFFSET.SHUTTER_DELAY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Timing bias
  public var TIMING_BIAS: Float32 { let o = _accessor.offset(VTOFFSET.TIMING_BIAS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  URI of the raw data file
  public var RAW_FILE_URI: String? { let o = _accessor.offset(VTOFFSET.RAW_FILE_URI.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var RAW_FILE_URISegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.RAW_FILE_URI.v) }
  ///  Intensity of the observation
  public var INTENSITY: Float32 { let o = _accessor.offset(VTOFFSET.INTENSITY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Background intensity
  public var BG_INTENSITY: Float32 { let o = _accessor.offset(VTOFFSET.BG_INTENSITY.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  Descriptor of the provided data
  public var DESCRIPTOR: String? { let o = _accessor.offset(VTOFFSET.DESCRIPTOR.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var DESCRIPTORSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.DESCRIPTOR.v) }
  ///  Source of the data
  public var SOURCE: String? { let o = _accessor.offset(VTOFFSET.SOURCE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var SOURCESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.SOURCE.v) }
  ///  Origin of the data
  public var ORIGIN: String? { let o = _accessor.offset(VTOFFSET.ORIGIN.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ORIGINSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ORIGIN.v) }
  ///  Mode of the data
  public var DATA_MODE: String? { let o = _accessor.offset(VTOFFSET.DATA_MODE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var DATA_MODESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.DATA_MODE.v) }
  ///  Creation time of the record
  public var CREATED_AT: String? { let o = _accessor.offset(VTOFFSET.CREATED_AT.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var CREATED_ATSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.CREATED_AT.v) }
  ///  User who created the record
  public var CREATED_BY: String? { let o = _accessor.offset(VTOFFSET.CREATED_BY.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var CREATED_BYSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.CREATED_BY.v) }
  ///  Reference frame of the observation
  public var REFERENCE_FRAME: refFrame { let o = _accessor.offset(VTOFFSET.REFERENCE_FRAME.v); return o == 0 ? .ecef : refFrame(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .ecef }
  ///  Reference frame of the sensor
  public var SEN_REFERENCE_FRAME: String? { let o = _accessor.offset(VTOFFSET.SEN_REFERENCE_FRAME.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var SEN_REFERENCE_FRAMESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.SEN_REFERENCE_FRAME.v) }
  ///  Flag for umbra (total eclipse)
  public var UMBRA: Bool { let o = _accessor.offset(VTOFFSET.UMBRA.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Flag for penumbra (partial eclipse)
  public var PENUMBRA: Bool { let o = _accessor.offset(VTOFFSET.PENUMBRA.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  ///  Original network identifier
  public var ORIG_NETWORK: String? { let o = _accessor.offset(VTOFFSET.ORIG_NETWORK.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ORIG_NETWORKSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ORIG_NETWORK.v) }
  ///  Data link source
  public var SOURCE_DL: String? { let o = _accessor.offset(VTOFFSET.SOURCE_DL.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var SOURCE_DLSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.SOURCE_DL.v) }
  ///  Type of the observation
  public var TYPE: String? { let o = _accessor.offset(VTOFFSET.TYPE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var TYPESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.TYPE.v) }
  public static func startEOO(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 85) }
  public static func add(EOBSERVATION_ID: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: EOBSERVATION_ID, at: VTOFFSET.EOBSERVATION_ID.p) }
  public static func add(CLASSIFICATION: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: CLASSIFICATION, at: VTOFFSET.CLASSIFICATION.p) }
  public static func add(OB_TIME: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: OB_TIME, at: VTOFFSET.OB_TIME.p) }
  public static func add(CORR_QUALITY: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: CORR_QUALITY, def: 0.0, at: VTOFFSET.CORR_QUALITY.p) }
  public static func add(ID_ON_ORBIT: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ID_ON_ORBIT, at: VTOFFSET.ID_ON_ORBIT.p) }
  public static func add(SENSOR_ID: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: SENSOR_ID, at: VTOFFSET.SENSOR_ID.p) }
  public static func add(COLLECT_METHOD: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: COLLECT_METHOD, at: VTOFFSET.COLLECT_METHOD.p) }
  public static func add(NORAD_CAT_ID: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: NORAD_CAT_ID, def: 0, at: VTOFFSET.NORAD_CAT_ID.p) }
  public static func add(TASK_ID: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: TASK_ID, at: VTOFFSET.TASK_ID.p) }
  public static func add(TRANSACTION_ID: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: TRANSACTION_ID, at: VTOFFSET.TRANSACTION_ID.p) }
  public static func add(TRACK_ID: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: TRACK_ID, at: VTOFFSET.TRACK_ID.p) }
  public static func add(OB_POSITION: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: OB_POSITION, at: VTOFFSET.OB_POSITION.p) }
  public static func add(ORIG_OBJECT_ID: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ORIG_OBJECT_ID, at: VTOFFSET.ORIG_OBJECT_ID.p) }
  public static func add(ORIG_SENSOR_ID: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ORIG_SENSOR_ID, at: VTOFFSET.ORIG_SENSOR_ID.p) }
  public static func add(UCT: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: UCT, def: false,
   at: VTOFFSET.UCT.p) }
  public static func add(AZIMUTH: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: AZIMUTH, def: 0.0, at: VTOFFSET.AZIMUTH.p) }
  public static func add(AZIMUTH_UNC: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: AZIMUTH_UNC, def: 0.0, at: VTOFFSET.AZIMUTH_UNC.p) }
  public static func add(AZIMUTH_BIAS: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: AZIMUTH_BIAS, def: 0.0, at: VTOFFSET.AZIMUTH_BIAS.p) }
  public static func add(AZIMUTH_RATE: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: AZIMUTH_RATE, def: 0.0, at: VTOFFSET.AZIMUTH_RATE.p) }
  public static func add(ELEVATION: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ELEVATION, def: 0.0, at: VTOFFSET.ELEVATION.p) }
  public static func add(ELEVATION_UNC: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ELEVATION_UNC, def: 0.0, at: VTOFFSET.ELEVATION_UNC.p) }
  public static func add(ELEVATION_BIAS: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ELEVATION_BIAS, def: 0.0, at: VTOFFSET.ELEVATION_BIAS.p) }
  public static func add(ELEVATION_RATE: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ELEVATION_RATE, def: 0.0, at: VTOFFSET.ELEVATION_RATE.p) }
  public static func add(RANGE: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RANGE, def: 0.0, at: VTOFFSET.RANGE.p) }
  public static func add(RANGE_UNC: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RANGE_UNC, def: 0.0, at: VTOFFSET.RANGE_UNC.p) }
  public static func add(RANGE_BIAS: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RANGE_BIAS, def: 0.0, at: VTOFFSET.RANGE_BIAS.p) }
  public static func add(RANGE_RATE: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RANGE_RATE, def: 0.0, at: VTOFFSET.RANGE_RATE.p) }
  public static func add(RANGE_RATE_UNC: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RANGE_RATE_UNC, def: 0.0, at: VTOFFSET.RANGE_RATE_UNC.p) }
  public static func add(RA: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RA, def: 0.0, at: VTOFFSET.RA.p) }
  public static func add(RA_RATE: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RA_RATE, def: 0.0, at: VTOFFSET.RA_RATE.p) }
  public static func add(RA_UNC: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RA_UNC, def: 0.0, at: VTOFFSET.RA_UNC.p) }
  public static func add(RA_BIAS: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RA_BIAS, def: 0.0, at: VTOFFSET.RA_BIAS.p) }
  public static func add(DECLINATION: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: DECLINATION, def: 0.0, at: VTOFFSET.DECLINATION.p) }
  public static func add(DECLINATION_RATE: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: DECLINATION_RATE, def: 0.0, at: VTOFFSET.DECLINATION_RATE.p) }
  public static func add(DECLINATION_UNC: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: DECLINATION_UNC, def: 0.0, at: VTOFFSET.DECLINATION_UNC.p) }
  public static func add(DECLINATION_BIAS: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: DECLINATION_BIAS, def: 0.0, at: VTOFFSET.DECLINATION_BIAS.p) }
  public static func add(LOSX: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: LOSX, def: 0.0, at: VTOFFSET.LOSX.p) }
  public static func add(LOSY: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: LOSY, def: 0.0, at: VTOFFSET.LOSY.p) }
  public static func add(LOSZ: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: LOSZ, def: 0.0, at: VTOFFSET.LOSZ.p) }
  public static func add(LOS_UNC: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: LOS_UNC, def: 0.0, at: VTOFFSET.LOS_UNC.p) }
  public static func add(LOSXVEL: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: LOSXVEL, def: 0.0, at: VTOFFSET.LOSXVEL.p) }
  public static func add(LOSYVEL: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: LOSYVEL, def: 0.0, at: VTOFFSET.LOSYVEL.p) }
  public static func add(LOSZVEL: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: LOSZVEL, def: 0.0, at: VTOFFSET.LOSZVEL.p) }
  public static func add(SENLAT: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: SENLAT, def: 0.0, at: VTOFFSET.SENLAT.p) }
  public static func add(SENLON: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: SENLON, def: 0.0, at: VTOFFSET.SENLON.p) }
  public static func add(SENALT: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: SENALT, def: 0.0, at: VTOFFSET.SENALT.p) }
  public static func add(SENX: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: SENX, def: 0.0, at: VTOFFSET.SENX.p) }
  public static func add(SENY: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: SENY, def: 0.0, at: VTOFFSET.SENY.p) }
  public static func add(SENZ: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: SENZ, def: 0.0, at: VTOFFSET.SENZ.p) }
  public static func add(FOV_COUNT: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: FOV_COUNT, def: 0, at: VTOFFSET.FOV_COUNT.p) }
  public static func add(EXP_DURATION: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: EXP_DURATION, def: 0.0, at: VTOFFSET.EXP_DURATION.p) }
  public static func add(ZEROPTD: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ZEROPTD, def: 0.0, at: VTOFFSET.ZEROPTD.p) }
  public static func add(NET_OBJ_SIG: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: NET_OBJ_SIG, def: 0.0, at: VTOFFSET.NET_OBJ_SIG.p) }
  public static func add(NET_OBJ_SIG_UNC: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: NET_OBJ_SIG_UNC, def: 0.0, at: VTOFFSET.NET_OBJ_SIG_UNC.p) }
  public static func add(MAG: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MAG, def: 0.0, at: VTOFFSET.MAG.p) }
  public static func add(MAG_UNC: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MAG_UNC, def: 0.0, at: VTOFFSET.MAG_UNC.p) }
  public static func add(MAG_NORM_RANGE: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MAG_NORM_RANGE, def: 0.0, at: VTOFFSET.MAG_NORM_RANGE.p) }
  public static func add(GEOLAT: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: GEOLAT, def: 0.0, at: VTOFFSET.GEOLAT.p) }
  public static func add(GEOLON: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: GEOLON, def: 0.0, at: VTOFFSET.GEOLON.p) }
  public static func add(GEOALT: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: GEOALT, def: 0.0, at: VTOFFSET.GEOALT.p) }
  public static func add(GEORANGE: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: GEORANGE, def: 0.0, at: VTOFFSET.GEORANGE.p) }
  public static func add(SKY_BKGRND: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: SKY_BKGRND, def: 0.0, at: VTOFFSET.SKY_BKGRND.p) }
  public static func add(PRIMARY_EXTINCTION: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: PRIMARY_EXTINCTION, def: 0.0, at: VTOFFSET.PRIMARY_EXTINCTION.p) }
  public static func add(PRIMARY_EXTINCTION_UNC: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: PRIMARY_EXTINCTION_UNC, def: 0.0, at: VTOFFSET.PRIMARY_EXTINCTION_UNC.p) }
  public static func add(SOLAR_PHASE_ANGLE: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: SOLAR_PHASE_ANGLE, def: 0.0, at: VTOFFSET.SOLAR_PHASE_ANGLE.p) }
  public static func add(SOLAR_EQ_PHASE_ANGLE: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: SOLAR_EQ_PHASE_ANGLE, def: 0.0, at: VTOFFSET.SOLAR_EQ_PHASE_ANGLE.p) }
  public static func add(SOLAR_DEC_ANGLE: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: SOLAR_DEC_ANGLE, def: 0.0, at: VTOFFSET.SOLAR_DEC_ANGLE.p) }
  public static func add(SHUTTER_DELAY: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: SHUTTER_DELAY, def: 0.0, at: VTOFFSET.SHUTTER_DELAY.p) }
  public static func add(TIMING_BIAS: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: TIMING_BIAS, def: 0.0, at: VTOFFSET.TIMING_BIAS.p) }
  public static func add(RAW_FILE_URI: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: RAW_FILE_URI, at: VTOFFSET.RAW_FILE_URI.p) }
  public static func add(INTENSITY: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: INTENSITY, def: 0.0, at: VTOFFSET.INTENSITY.p) }
  public static func add(BG_INTENSITY: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: BG_INTENSITY, def: 0.0, at: VTOFFSET.BG_INTENSITY.p) }
  public static func add(DESCRIPTOR: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: DESCRIPTOR, at: VTOFFSET.DESCRIPTOR.p) }
  public static func add(SOURCE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: SOURCE, at: VTOFFSET.SOURCE.p) }
  public static func add(ORIGIN: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ORIGIN, at: VTOFFSET.ORIGIN.p) }
  public static func add(DATA_MODE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: DATA_MODE, at: VTOFFSET.DATA_MODE.p) }
  public static func add(CREATED_AT: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: CREATED_AT, at: VTOFFSET.CREATED_AT.p) }
  public static func add(CREATED_BY: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: CREATED_BY, at: VTOFFSET.CREATED_BY.p) }
  public static func add(REFERENCE_FRAME: refFrame, _ fbb: inout FlatBufferBuilder) { fbb.add(element: REFERENCE_FRAME.rawValue, def: 0, at: VTOFFSET.REFERENCE_FRAME.p) }
  public static func add(SEN_REFERENCE_FRAME: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: SEN_REFERENCE_FRAME, at: VTOFFSET.SEN_REFERENCE_FRAME.p) }
  public static func add(UMBRA: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: UMBRA, def: false,
   at: VTOFFSET.UMBRA.p) }
  public static func add(PENUMBRA: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: PENUMBRA, def: false,
   at: VTOFFSET.PENUMBRA.p) }
  public static func add(ORIG_NETWORK: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ORIG_NETWORK, at: VTOFFSET.ORIG_NETWORK.p) }
  public static func add(SOURCE_DL: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: SOURCE_DL, at: VTOFFSET.SOURCE_DL.p) }
  public static func add(TYPE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: TYPE, at: VTOFFSET.TYPE.p) }
  public static func endEOO(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEOO(
    _ fbb: inout FlatBufferBuilder,
    EOBSERVATION_IDOffset EOBSERVATION_ID: Offset = Offset(),
    CLASSIFICATIONOffset CLASSIFICATION: Offset = Offset(),
    OB_TIMEOffset OB_TIME: Offset = Offset(),
    CORR_QUALITY: Float32 = 0.0,
    ID_ON_ORBITOffset ID_ON_ORBIT: Offset = Offset(),
    SENSOR_IDOffset SENSOR_ID: Offset = Offset(),
    COLLECT_METHODOffset COLLECT_METHOD: Offset = Offset(),
    NORAD_CAT_ID: Int32 = 0,
    TASK_IDOffset TASK_ID: Offset = Offset(),
    TRANSACTION_IDOffset TRANSACTION_ID: Offset = Offset(),
    TRACK_IDOffset TRACK_ID: Offset = Offset(),
    OB_POSITIONOffset OB_POSITION: Offset = Offset(),
    ORIG_OBJECT_IDOffset ORIG_OBJECT_ID: Offset = Offset(),
    ORIG_SENSOR_IDOffset ORIG_SENSOR_ID: Offset = Offset(),
    UCT: Bool = false,
    AZIMUTH: Float32 = 0.0,
    AZIMUTH_UNC: Float32 = 0.0,
    AZIMUTH_BIAS: Float32 = 0.0,
    AZIMUTH_RATE: Float32 = 0.0,
    ELEVATION: Float32 = 0.0,
    ELEVATION_UNC: Float32 = 0.0,
    ELEVATION_BIAS: Float32 = 0.0,
    ELEVATION_RATE: Float32 = 0.0,
    RANGE: Float32 = 0.0,
    RANGE_UNC: Float32 = 0.0,
    RANGE_BIAS: Float32 = 0.0,
    RANGE_RATE: Float32 = 0.0,
    RANGE_RATE_UNC: Float32 = 0.0,
    RA: Float32 = 0.0,
    RA_RATE: Float32 = 0.0,
    RA_UNC: Float32 = 0.0,
    RA_BIAS: Float32 = 0.0,
    DECLINATION: Float32 = 0.0,
    DECLINATION_RATE: Float32 = 0.0,
    DECLINATION_UNC: Float32 = 0.0,
    DECLINATION_BIAS: Float32 = 0.0,
    LOSX: Float32 = 0.0,
    LOSY: Float32 = 0.0,
    LOSZ: Float32 = 0.0,
    LOS_UNC: Float32 = 0.0,
    LOSXVEL: Float32 = 0.0,
    LOSYVEL: Float32 = 0.0,
    LOSZVEL: Float32 = 0.0,
    SENLAT: Float32 = 0.0,
    SENLON: Float32 = 0.0,
    SENALT: Float32 = 0.0,
    SENX: Float32 = 0.0,
    SENY: Float32 = 0.0,
    SENZ: Float32 = 0.0,
    FOV_COUNT: Int32 = 0,
    EXP_DURATION: Float32 = 0.0,
    ZEROPTD: Float32 = 0.0,
    NET_OBJ_SIG: Float32 = 0.0,
    NET_OBJ_SIG_UNC: Float32 = 0.0,
    MAG: Float32 = 0.0,
    MAG_UNC: Float32 = 0.0,
    MAG_NORM_RANGE: Float32 = 0.0,
    GEOLAT: Float32 = 0.0,
    GEOLON: Float32 = 0.0,
    GEOALT: Float32 = 0.0,
    GEORANGE: Float32 = 0.0,
    SKY_BKGRND: Float32 = 0.0,
    PRIMARY_EXTINCTION: Float32 = 0.0,
    PRIMARY_EXTINCTION_UNC: Float32 = 0.0,
    SOLAR_PHASE_ANGLE: Float32 = 0.0,
    SOLAR_EQ_PHASE_ANGLE: Float32 = 0.0,
    SOLAR_DEC_ANGLE: Float32 = 0.0,
    SHUTTER_DELAY: Float32 = 0.0,
    TIMING_BIAS: Float32 = 0.0,
    RAW_FILE_URIOffset RAW_FILE_URI: Offset = Offset(),
    INTENSITY: Float32 = 0.0,
    BG_INTENSITY: Float32 = 0.0,
    DESCRIPTOROffset DESCRIPTOR: Offset = Offset(),
    SOURCEOffset SOURCE: Offset = Offset(),
    ORIGINOffset ORIGIN: Offset = Offset(),
    DATA_MODEOffset DATA_MODE: Offset = Offset(),
    CREATED_ATOffset CREATED_AT: Offset = Offset(),
    CREATED_BYOffset CREATED_BY: Offset = Offset(),
    REFERENCE_FRAME: refFrame = .ecef,
    SEN_REFERENCE_FRAMEOffset SEN_REFERENCE_FRAME: Offset = Offset(),
    UMBRA: Bool = false,
    PENUMBRA: Bool = false,
    ORIG_NETWORKOffset ORIG_NETWORK: Offset = Offset(),
    SOURCE_DLOffset SOURCE_DL: Offset = Offset(),
    TYPEOffset TYPE: Offset = Offset()
  ) -> Offset {
    let __start = EOO.startEOO(&fbb)
    EOO.add(EOBSERVATION_ID: EOBSERVATION_ID, &fbb)
    EOO.add(CLASSIFICATION: CLASSIFICATION, &fbb)
    EOO.add(OB_TIME: OB_TIME, &fbb)
    EOO.add(CORR_QUALITY: CORR_QUALITY, &fbb)
    EOO.add(ID_ON_ORBIT: ID_ON_ORBIT, &fbb)
    EOO.add(SENSOR_ID: SENSOR_ID, &fbb)
    EOO.add(COLLECT_METHOD: COLLECT_METHOD, &fbb)
    EOO.add(NORAD_CAT_ID: NORAD_CAT_ID, &fbb)
    EOO.add(TASK_ID: TASK_ID, &fbb)
    EOO.add(TRANSACTION_ID: TRANSACTION_ID, &fbb)
    EOO.add(TRACK_ID: TRACK_ID, &fbb)
    EOO.add(OB_POSITION: OB_POSITION, &fbb)
    EOO.add(ORIG_OBJECT_ID: ORIG_OBJECT_ID, &fbb)
    EOO.add(ORIG_SENSOR_ID: ORIG_SENSOR_ID, &fbb)
    EOO.add(UCT: UCT, &fbb)
    EOO.add(AZIMUTH: AZIMUTH, &fbb)
    EOO.add(AZIMUTH_UNC: AZIMUTH_UNC, &fbb)
    EOO.add(AZIMUTH_BIAS: AZIMUTH_BIAS, &fbb)
    EOO.add(AZIMUTH_RATE: AZIMUTH_RATE, &fbb)
    EOO.add(ELEVATION: ELEVATION, &fbb)
    EOO.add(ELEVATION_UNC: ELEVATION_UNC, &fbb)
    EOO.add(ELEVATION_BIAS: ELEVATION_BIAS, &fbb)
    EOO.add(ELEVATION_RATE: ELEVATION_RATE, &fbb)
    EOO.add(RANGE: RANGE, &fbb)
    EOO.add(RANGE_UNC: RANGE_UNC, &fbb)
    EOO.add(RANGE_BIAS: RANGE_BIAS, &fbb)
    EOO.add(RANGE_RATE: RANGE_RATE, &fbb)
    EOO.add(RANGE_RATE_UNC: RANGE_RATE_UNC, &fbb)
    EOO.add(RA: RA, &fbb)
    EOO.add(RA_RATE: RA_RATE, &fbb)
    EOO.add(RA_UNC: RA_UNC, &fbb)
    EOO.add(RA_BIAS: RA_BIAS, &fbb)
    EOO.add(DECLINATION: DECLINATION, &fbb)
    EOO.add(DECLINATION_RATE: DECLINATION_RATE, &fbb)
    EOO.add(DECLINATION_UNC: DECLINATION_UNC, &fbb)
    EOO.add(DECLINATION_BIAS: DECLINATION_BIAS, &fbb)
    EOO.add(LOSX: LOSX, &fbb)
    EOO.add(LOSY: LOSY, &fbb)
    EOO.add(LOSZ: LOSZ, &fbb)
    EOO.add(LOS_UNC: LOS_UNC, &fbb)
    EOO.add(LOSXVEL: LOSXVEL, &fbb)
    EOO.add(LOSYVEL: LOSYVEL, &fbb)
    EOO.add(LOSZVEL: LOSZVEL, &fbb)
    EOO.add(SENLAT: SENLAT, &fbb)
    EOO.add(SENLON: SENLON, &fbb)
    EOO.add(SENALT: SENALT, &fbb)
    EOO.add(SENX: SENX, &fbb)
    EOO.add(SENY: SENY, &fbb)
    EOO.add(SENZ: SENZ, &fbb)
    EOO.add(FOV_COUNT: FOV_COUNT, &fbb)
    EOO.add(EXP_DURATION: EXP_DURATION, &fbb)
    EOO.add(ZEROPTD: ZEROPTD, &fbb)
    EOO.add(NET_OBJ_SIG: NET_OBJ_SIG, &fbb)
    EOO.add(NET_OBJ_SIG_UNC: NET_OBJ_SIG_UNC, &fbb)
    EOO.add(MAG: MAG, &fbb)
    EOO.add(MAG_UNC: MAG_UNC, &fbb)
    EOO.add(MAG_NORM_RANGE: MAG_NORM_RANGE, &fbb)
    EOO.add(GEOLAT: GEOLAT, &fbb)
    EOO.add(GEOLON: GEOLON, &fbb)
    EOO.add(GEOALT: GEOALT, &fbb)
    EOO.add(GEORANGE: GEORANGE, &fbb)
    EOO.add(SKY_BKGRND: SKY_BKGRND, &fbb)
    EOO.add(PRIMARY_EXTINCTION: PRIMARY_EXTINCTION, &fbb)
    EOO.add(PRIMARY_EXTINCTION_UNC: PRIMARY_EXTINCTION_UNC, &fbb)
    EOO.add(SOLAR_PHASE_ANGLE: SOLAR_PHASE_ANGLE, &fbb)
    EOO.add(SOLAR_EQ_PHASE_ANGLE: SOLAR_EQ_PHASE_ANGLE, &fbb)
    EOO.add(SOLAR_DEC_ANGLE: SOLAR_DEC_ANGLE, &fbb)
    EOO.add(SHUTTER_DELAY: SHUTTER_DELAY, &fbb)
    EOO.add(TIMING_BIAS: TIMING_BIAS, &fbb)
    EOO.add(RAW_FILE_URI: RAW_FILE_URI, &fbb)
    EOO.add(INTENSITY: INTENSITY, &fbb)
    EOO.add(BG_INTENSITY: BG_INTENSITY, &fbb)
    EOO.add(DESCRIPTOR: DESCRIPTOR, &fbb)
    EOO.add(SOURCE: SOURCE, &fbb)
    EOO.add(ORIGIN: ORIGIN, &fbb)
    EOO.add(DATA_MODE: DATA_MODE, &fbb)
    EOO.add(CREATED_AT: CREATED_AT, &fbb)
    EOO.add(CREATED_BY: CREATED_BY, &fbb)
    EOO.add(REFERENCE_FRAME: REFERENCE_FRAME, &fbb)
    EOO.add(SEN_REFERENCE_FRAME: SEN_REFERENCE_FRAME, &fbb)
    EOO.add(UMBRA: UMBRA, &fbb)
    EOO.add(PENUMBRA: PENUMBRA, &fbb)
    EOO.add(ORIG_NETWORK: ORIG_NETWORK, &fbb)
    EOO.add(SOURCE_DL: SOURCE_DL, &fbb)
    EOO.add(TYPE: TYPE, &fbb)
    return EOO.endEOO(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.EOBSERVATION_ID.p, fieldName: "EOBSERVATION_ID", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.CLASSIFICATION.p, fieldName: "CLASSIFICATION", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.OB_TIME.p, fieldName: "OB_TIME", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.CORR_QUALITY.p, fieldName: "CORR_QUALITY", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.ID_ON_ORBIT.p, fieldName: "ID_ON_ORBIT", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.SENSOR_ID.p, fieldName: "SENSOR_ID", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.COLLECT_METHOD.p, fieldName: "COLLECT_METHOD", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.NORAD_CAT_ID.p, fieldName: "NORAD_CAT_ID", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.TASK_ID.p, fieldName: "TASK_ID", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.TRANSACTION_ID.p, fieldName: "TRANSACTION_ID", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.TRACK_ID.p, fieldName: "TRACK_ID", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.OB_POSITION.p, fieldName: "OB_POSITION", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ORIG_OBJECT_ID.p, fieldName: "ORIG_OBJECT_ID", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ORIG_SENSOR_ID.p, fieldName: "ORIG_SENSOR_ID", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.UCT.p, fieldName: "UCT", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.AZIMUTH.p, fieldName: "AZIMUTH", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.AZIMUTH_UNC.p, fieldName: "AZIMUTH_UNC", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.AZIMUTH_BIAS.p, fieldName: "AZIMUTH_BIAS", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.AZIMUTH_RATE.p, fieldName: "AZIMUTH_RATE", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.ELEVATION.p, fieldName: "ELEVATION", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.ELEVATION_UNC.p, fieldName: "ELEVATION_UNC", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.ELEVATION_BIAS.p, fieldName: "ELEVATION_BIAS", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.ELEVATION_RATE.p, fieldName: "ELEVATION_RATE", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.RANGE.p, fieldName: "RANGE", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.RANGE_UNC.p, fieldName: "RANGE_UNC", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.RANGE_BIAS.p, fieldName: "RANGE_BIAS", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.RANGE_RATE.p, fieldName: "RANGE_RATE", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.RANGE_RATE_UNC.p, fieldName: "RANGE_RATE_UNC", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.RA.p, fieldName: "RA", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.RA_RATE.p, fieldName: "RA_RATE", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.RA_UNC.p, fieldName: "RA_UNC", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.RA_BIAS.p, fieldName: "RA_BIAS", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.DECLINATION.p, fieldName: "DECLINATION", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.DECLINATION_RATE.p, fieldName: "DECLINATION_RATE", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.DECLINATION_UNC.p, fieldName: "DECLINATION_UNC", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.DECLINATION_BIAS.p, fieldName: "DECLINATION_BIAS", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.LOSX.p, fieldName: "LOSX", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.LOSY.p, fieldName: "LOSY", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.LOSZ.p, fieldName: "LOSZ", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.LOS_UNC.p, fieldName: "LOS_UNC", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.LOSXVEL.p, fieldName: "LOSXVEL", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.LOSYVEL.p, fieldName: "LOSYVEL", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.LOSZVEL.p, fieldName: "LOSZVEL", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.SENLAT.p, fieldName: "SENLAT", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.SENLON.p, fieldName: "SENLON", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.SENALT.p, fieldName: "SENALT", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.SENX.p, fieldName: "SENX", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.SENY.p, fieldName: "SENY", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.SENZ.p, fieldName: "SENZ", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.FOV_COUNT.p, fieldName: "FOV_COUNT", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.EXP_DURATION.p, fieldName: "EXP_DURATION", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.ZEROPTD.p, fieldName: "ZEROPTD", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.NET_OBJ_SIG.p, fieldName: "NET_OBJ_SIG", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.NET_OBJ_SIG_UNC.p, fieldName: "NET_OBJ_SIG_UNC", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.MAG.p, fieldName: "MAG", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.MAG_UNC.p, fieldName: "MAG_UNC", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.MAG_NORM_RANGE.p, fieldName: "MAG_NORM_RANGE", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.GEOLAT.p, fieldName: "GEOLAT", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.GEOLON.p, fieldName: "GEOLON", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.GEOALT.p, fieldName: "GEOALT", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.GEORANGE.p, fieldName: "GEORANGE", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.SKY_BKGRND.p, fieldName: "SKY_BKGRND", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.PRIMARY_EXTINCTION.p, fieldName: "PRIMARY_EXTINCTION", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.PRIMARY_EXTINCTION_UNC.p, fieldName: "PRIMARY_EXTINCTION_UNC", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.SOLAR_PHASE_ANGLE.p, fieldName: "SOLAR_PHASE_ANGLE", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.SOLAR_EQ_PHASE_ANGLE.p, fieldName: "SOLAR_EQ_PHASE_ANGLE", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.SOLAR_DEC_ANGLE.p, fieldName: "SOLAR_DEC_ANGLE", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.SHUTTER_DELAY.p, fieldName: "SHUTTER_DELAY", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.TIMING_BIAS.p, fieldName: "TIMING_BIAS", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.RAW_FILE_URI.p, fieldName: "RAW_FILE_URI", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.INTENSITY.p, fieldName: "INTENSITY", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.BG_INTENSITY.p, fieldName: "BG_INTENSITY", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.DESCRIPTOR.p, fieldName: "DESCRIPTOR", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.SOURCE.p, fieldName: "SOURCE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ORIGIN.p, fieldName: "ORIGIN", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.DATA_MODE.p, fieldName: "DATA_MODE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.CREATED_AT.p, fieldName: "CREATED_AT", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.CREATED_BY.p, fieldName: "CREATED_BY", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.REFERENCE_FRAME.p, fieldName: "REFERENCE_FRAME", required: false, type: refFrame.self)
    try _v.visit(field: VTOFFSET.SEN_REFERENCE_FRAME.p, fieldName: "SEN_REFERENCE_FRAME", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.UMBRA.p, fieldName: "UMBRA", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.PENUMBRA.p, fieldName: "PENUMBRA", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.ORIG_NETWORK.p, fieldName: "ORIG_NETWORK", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.SOURCE_DL.p, fieldName: "SOURCE_DL", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.TYPE.p, fieldName: "TYPE", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

public struct EOOCOLLECTION: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$EOO" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: EOOCOLLECTION.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case RECORDS = 4
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var hasRecords: Bool { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? false : true }
  public var RECORDSCount: Int32 { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func RECORDS(at index: Int32) -> EOO? { let o = _accessor.offset(VTOFFSET.RECORDS.v); return o == 0 ? nil : EOO(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public static func startEOOCOLLECTION(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 1) }
  public static func addVectorOf(RECORDS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: RECORDS, at: VTOFFSET.RECORDS.p) }
  public static func endEOOCOLLECTION(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEOOCOLLECTION(
    _ fbb: inout FlatBufferBuilder,
    RECORDSVectorOffset RECORDS: Offset = Offset()
  ) -> Offset {
    let __start = EOOCOLLECTION.startEOOCOLLECTION(&fbb)
    EOOCOLLECTION.addVectorOf(RECORDS: RECORDS, &fbb)
    return EOOCOLLECTION.endEOOCOLLECTION(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.RECORDS.p, fieldName: "RECORDS", required: false, type: ForwardOffset<Vector<ForwardOffset<EOO>, EOO>>.self)
    _v.finish()
  }
}

