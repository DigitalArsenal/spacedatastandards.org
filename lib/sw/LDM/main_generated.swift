// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  Launch Data Message
public struct LDM: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_24_3_25() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$LDM" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: LDM.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case SITE = 4
    case AZIMUTH = 6
    case REFERENCES = 8
    case AGENCY_NAME = 10
    case POINTS_OF_CONTACT = 12
    case OPERATIONS_POINTS_OF_CONTACT = 14
    case NET = 16
    case ROCKET_CONFIGURATION = 18
    case MISSION_NAME = 20
    case MISSION_DESCRIPTION = 22
    case MISSION_TYPE = 24
    case ORBIT_TYPE = 26
    case WEATHER_CONDITIONS = 28
    case LAUNCH_STATUS = 30
    case WEBCAST_URL = 32
    case MEDIA_LINKS = 34
    case EARLIEST_LAUNCH_TIMES = 36
    case LATEST_LAUNCH_TIMES = 38
    case LCOLA_WINDOW_CLOSURES = 40
    case OBJECTS = 42
    case TRACKING_REQUIREMENTS = 44
    case COLA_SCREEN_DURATION = 46
    case PROBABILITY_OF_COLLISION_THRESHOLD = 48
    case COLA_RUNS_REQUIRED = 50
    case COLA_POINTS_OF_CONTACT = 52
    case ORBITAL_PARAMETERS = 54
    case BURN_OUT_VECTORS = 56
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Launch Site Information
  public var SITE: SIT? { let o = _accessor.offset(VTOFFSET.SITE.v); return o == 0 ? nil : SIT(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  ///  Azimuth at Launch (in Degrees)
  public var AZIMUTH: Float32 { let o = _accessor.offset(VTOFFSET.AZIMUTH.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  ///  References for Launch Data
  public var REFERENCES: String? { let o = _accessor.offset(VTOFFSET.REFERENCES.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var REFERENCESSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.REFERENCES.v) }
  ///  Launching Agency Name
  public var AGENCY_NAME: String? { let o = _accessor.offset(VTOFFSET.AGENCY_NAME.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var AGENCY_NAMESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.AGENCY_NAME.v) }
  ///  Points of Contact for Launch
  public var hasPointsOfContact: Bool { let o = _accessor.offset(VTOFFSET.POINTS_OF_CONTACT.v); return o == 0 ? false : true }
  public var POINTS_OF_CONTACTCount: Int32 { let o = _accessor.offset(VTOFFSET.POINTS_OF_CONTACT.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func POINTS_OF_CONTACT(at index: Int32) -> EPM? { let o = _accessor.offset(VTOFFSET.POINTS_OF_CONTACT.v); return o == 0 ? nil : EPM(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  ///  Operations Points of Contact for Launch
  public var hasOperationsPointsOfContact: Bool { let o = _accessor.offset(VTOFFSET.OPERATIONS_POINTS_OF_CONTACT.v); return o == 0 ? false : true }
  public var OPERATIONS_POINTS_OF_CONTACTCount: Int32 { let o = _accessor.offset(VTOFFSET.OPERATIONS_POINTS_OF_CONTACT.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func OPERATIONS_POINTS_OF_CONTACT(at index: Int32) -> EPM? { let o = _accessor.offset(VTOFFSET.OPERATIONS_POINTS_OF_CONTACT.v); return o == 0 ? nil : EPM(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  ///  Net Launch Time (UTC Format)
  public var NET: String? { let o = _accessor.offset(VTOFFSET.NET.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var NETSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.NET.v) }
  ///  Rocket Configuration Details
  public var ROCKET_CONFIGURATION: ROC? { let o = _accessor.offset(VTOFFSET.ROCKET_CONFIGURATION.v); return o == 0 ? nil : ROC(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  ///  Mission Name
  public var MISSION_NAME: String? { let o = _accessor.offset(VTOFFSET.MISSION_NAME.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var MISSION_NAMESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.MISSION_NAME.v) }
  ///  Description of the Mission
  public var MISSION_DESCRIPTION: String? { let o = _accessor.offset(VTOFFSET.MISSION_DESCRIPTION.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var MISSION_DESCRIPTIONSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.MISSION_DESCRIPTION.v) }
  ///  Type of the Mission (e.g., Test Flight, Satellite Deployment)
  public var MISSION_TYPE: String? { let o = _accessor.offset(VTOFFSET.MISSION_TYPE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var MISSION_TYPESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.MISSION_TYPE.v) }
  ///  Target Orbit Type (e.g., LEO, GEO)
  public var ORBIT_TYPE: String? { let o = _accessor.offset(VTOFFSET.ORBIT_TYPE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ORBIT_TYPESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ORBIT_TYPE.v) }
  ///  Weather and Environmental Conditions at Launch
  public var WEATHER_CONDITIONS: String? { let o = _accessor.offset(VTOFFSET.WEATHER_CONDITIONS.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var WEATHER_CONDITIONSSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.WEATHER_CONDITIONS.v) }
  ///  Launch Outcome and Status (e.g., Successful, Failed)
  public var LAUNCH_STATUS: String? { let o = _accessor.offset(VTOFFSET.LAUNCH_STATUS.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var LAUNCH_STATUSSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.LAUNCH_STATUS.v) }
  ///  Webcast URL for the Launch
  public var WEBCAST_URL: String? { let o = _accessor.offset(VTOFFSET.WEBCAST_URL.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var WEBCAST_URLSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.WEBCAST_URL.v) }
  ///  Media Links Related to the Launch
  public var hasMediaLinks: Bool { let o = _accessor.offset(VTOFFSET.MEDIA_LINKS.v); return o == 0 ? false : true }
  public var MEDIA_LINKSCount: Int32 { let o = _accessor.offset(VTOFFSET.MEDIA_LINKS.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func MEDIA_LINKS(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.MEDIA_LINKS.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Earliest Possible Launch Times
  public var hasEarliestLaunchTimes: Bool { let o = _accessor.offset(VTOFFSET.EARLIEST_LAUNCH_TIMES.v); return o == 0 ? false : true }
  public var EARLIEST_LAUNCH_TIMESCount: Int32 { let o = _accessor.offset(VTOFFSET.EARLIEST_LAUNCH_TIMES.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func EARLIEST_LAUNCH_TIMES(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.EARLIEST_LAUNCH_TIMES.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Latest Possible Launch Times
  public var hasLatestLaunchTimes: Bool { let o = _accessor.offset(VTOFFSET.LATEST_LAUNCH_TIMES.v); return o == 0 ? false : true }
  public var LATEST_LAUNCH_TIMESCount: Int32 { let o = _accessor.offset(VTOFFSET.LATEST_LAUNCH_TIMES.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func LATEST_LAUNCH_TIMES(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.LATEST_LAUNCH_TIMES.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Launch Collision Avoidance Information
  public var hasLcolaWindowClosures: Bool { let o = _accessor.offset(VTOFFSET.LCOLA_WINDOW_CLOSURES.v); return o == 0 ? false : true }
  public var LCOLA_WINDOW_CLOSURESCount: Int32 { let o = _accessor.offset(VTOFFSET.LCOLA_WINDOW_CLOSURES.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func LCOLA_WINDOW_CLOSURES(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.LCOLA_WINDOW_CLOSURES.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Payload Information (Catalog Entities)
  public var hasObjects: Bool { let o = _accessor.offset(VTOFFSET.OBJECTS.v); return o == 0 ? false : true }
  public var OBJECTSCount: Int32 { let o = _accessor.offset(VTOFFSET.OBJECTS.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func OBJECTS(at index: Int32) -> CAT? { let o = _accessor.offset(VTOFFSET.OBJECTS.v); return o == 0 ? nil : CAT(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  ///  Tracking and Collision Avoidance Requirements
  public var hasTrackingRequirements: Bool { let o = _accessor.offset(VTOFFSET.TRACKING_REQUIREMENTS.v); return o == 0 ? false : true }
  public var TRACKING_REQUIREMENTSCount: Int32 { let o = _accessor.offset(VTOFFSET.TRACKING_REQUIREMENTS.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func TRACKING_REQUIREMENTS(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.TRACKING_REQUIREMENTS.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Duration of Collision Avoidance Screen (in Seconds)
  public var COLA_SCREEN_DURATION: String? { let o = _accessor.offset(VTOFFSET.COLA_SCREEN_DURATION.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var COLA_SCREEN_DURATIONSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.COLA_SCREEN_DURATION.v) }
  ///  Probability of Collision Threshold (Percentage)
  public var PROBABILITY_OF_COLLISION_THRESHOLD: String? { let o = _accessor.offset(VTOFFSET.PROBABILITY_OF_COLLISION_THRESHOLD.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var PROBABILITY_OF_COLLISION_THRESHOLDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.PROBABILITY_OF_COLLISION_THRESHOLD.v) }
  ///  Number of Required Collision Avoidance Runs
  public var COLA_RUNS_REQUIRED: String? { let o = _accessor.offset(VTOFFSET.COLA_RUNS_REQUIRED.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var COLA_RUNS_REQUIREDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.COLA_RUNS_REQUIRED.v) }
  ///  Points of Contact for Collision Avoidance
  public var hasColaPointsOfContact: Bool { let o = _accessor.offset(VTOFFSET.COLA_POINTS_OF_CONTACT.v); return o == 0 ? false : true }
  public var COLA_POINTS_OF_CONTACTCount: Int32 { let o = _accessor.offset(VTOFFSET.COLA_POINTS_OF_CONTACT.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func COLA_POINTS_OF_CONTACT(at index: Int32) -> EPM? { let o = _accessor.offset(VTOFFSET.COLA_POINTS_OF_CONTACT.v); return o == 0 ? nil : EPM(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  ///  Orbital Parameters of the Launch
  public var hasOrbitalParameters: Bool { let o = _accessor.offset(VTOFFSET.ORBITAL_PARAMETERS.v); return o == 0 ? false : true }
  public var ORBITAL_PARAMETERSCount: Int32 { let o = _accessor.offset(VTOFFSET.ORBITAL_PARAMETERS.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func ORBITAL_PARAMETERS(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.ORBITAL_PARAMETERS.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Burn Out Vectors for the Launch
  public var hasBurnOutVectors: Bool { let o = _accessor.offset(VTOFFSET.BURN_OUT_VECTORS.v); return o == 0 ? false : true }
  public var BURN_OUT_VECTORSCount: Int32 { let o = _accessor.offset(VTOFFSET.BURN_OUT_VECTORS.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func BURN_OUT_VECTORS(at index: Int32) -> BOV? { let o = _accessor.offset(VTOFFSET.BURN_OUT_VECTORS.v); return o == 0 ? nil : BOV(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public static func startLDM(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 27) }
  public static func add(SITE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: SITE, at: VTOFFSET.SITE.p) }
  public static func add(AZIMUTH: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: AZIMUTH, def: 0.0, at: VTOFFSET.AZIMUTH.p) }
  public static func add(REFERENCES: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: REFERENCES, at: VTOFFSET.REFERENCES.p) }
  public static func add(AGENCY_NAME: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: AGENCY_NAME, at: VTOFFSET.AGENCY_NAME.p) }
  public static func addVectorOf(POINTS_OF_CONTACT: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: POINTS_OF_CONTACT, at: VTOFFSET.POINTS_OF_CONTACT.p) }
  public static func addVectorOf(OPERATIONS_POINTS_OF_CONTACT: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: OPERATIONS_POINTS_OF_CONTACT, at: VTOFFSET.OPERATIONS_POINTS_OF_CONTACT.p) }
  public static func add(NET: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: NET, at: VTOFFSET.NET.p) }
  public static func add(ROCKET_CONFIGURATION: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ROCKET_CONFIGURATION, at: VTOFFSET.ROCKET_CONFIGURATION.p) }
  public static func add(MISSION_NAME: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: MISSION_NAME, at: VTOFFSET.MISSION_NAME.p) }
  public static func add(MISSION_DESCRIPTION: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: MISSION_DESCRIPTION, at: VTOFFSET.MISSION_DESCRIPTION.p) }
  public static func add(MISSION_TYPE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: MISSION_TYPE, at: VTOFFSET.MISSION_TYPE.p) }
  public static func add(ORBIT_TYPE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ORBIT_TYPE, at: VTOFFSET.ORBIT_TYPE.p) }
  public static func add(WEATHER_CONDITIONS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: WEATHER_CONDITIONS, at: VTOFFSET.WEATHER_CONDITIONS.p) }
  public static func add(LAUNCH_STATUS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: LAUNCH_STATUS, at: VTOFFSET.LAUNCH_STATUS.p) }
  public static func add(WEBCAST_URL: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: WEBCAST_URL, at: VTOFFSET.WEBCAST_URL.p) }
  public static func addVectorOf(MEDIA_LINKS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: MEDIA_LINKS, at: VTOFFSET.MEDIA_LINKS.p) }
  public static func addVectorOf(EARLIEST_LAUNCH_TIMES: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: EARLIEST_LAUNCH_TIMES, at: VTOFFSET.EARLIEST_LAUNCH_TIMES.p) }
  public static func addVectorOf(LATEST_LAUNCH_TIMES: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: LATEST_LAUNCH_TIMES, at: VTOFFSET.LATEST_LAUNCH_TIMES.p) }
  public static func addVectorOf(LCOLA_WINDOW_CLOSURES: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: LCOLA_WINDOW_CLOSURES, at: VTOFFSET.LCOLA_WINDOW_CLOSURES.p) }
  public static func addVectorOf(OBJECTS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: OBJECTS, at: VTOFFSET.OBJECTS.p) }
  public static func addVectorOf(TRACKING_REQUIREMENTS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: TRACKING_REQUIREMENTS, at: VTOFFSET.TRACKING_REQUIREMENTS.p) }
  public static func add(COLA_SCREEN_DURATION: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: COLA_SCREEN_DURATION, at: VTOFFSET.COLA_SCREEN_DURATION.p) }
  public static func add(PROBABILITY_OF_COLLISION_THRESHOLD: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: PROBABILITY_OF_COLLISION_THRESHOLD, at: VTOFFSET.PROBABILITY_OF_COLLISION_THRESHOLD.p) }
  public static func add(COLA_RUNS_REQUIRED: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: COLA_RUNS_REQUIRED, at: VTOFFSET.COLA_RUNS_REQUIRED.p) }
  public static func addVectorOf(COLA_POINTS_OF_CONTACT: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: COLA_POINTS_OF_CONTACT, at: VTOFFSET.COLA_POINTS_OF_CONTACT.p) }
  public static func addVectorOf(ORBITAL_PARAMETERS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ORBITAL_PARAMETERS, at: VTOFFSET.ORBITAL_PARAMETERS.p) }
  public static func addVectorOf(BURN_OUT_VECTORS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: BURN_OUT_VECTORS, at: VTOFFSET.BURN_OUT_VECTORS.p) }
  public static func endLDM(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createLDM(
    _ fbb: inout FlatBufferBuilder,
    SITEOffset SITE: Offset = Offset(),
    AZIMUTH: Float32 = 0.0,
    REFERENCESOffset REFERENCES: Offset = Offset(),
    AGENCY_NAMEOffset AGENCY_NAME: Offset = Offset(),
    POINTS_OF_CONTACTVectorOffset POINTS_OF_CONTACT: Offset = Offset(),
    OPERATIONS_POINTS_OF_CONTACTVectorOffset OPERATIONS_POINTS_OF_CONTACT: Offset = Offset(),
    NETOffset NET: Offset = Offset(),
    ROCKET_CONFIGURATIONOffset ROCKET_CONFIGURATION: Offset = Offset(),
    MISSION_NAMEOffset MISSION_NAME: Offset = Offset(),
    MISSION_DESCRIPTIONOffset MISSION_DESCRIPTION: Offset = Offset(),
    MISSION_TYPEOffset MISSION_TYPE: Offset = Offset(),
    ORBIT_TYPEOffset ORBIT_TYPE: Offset = Offset(),
    WEATHER_CONDITIONSOffset WEATHER_CONDITIONS: Offset = Offset(),
    LAUNCH_STATUSOffset LAUNCH_STATUS: Offset = Offset(),
    WEBCAST_URLOffset WEBCAST_URL: Offset = Offset(),
    MEDIA_LINKSVectorOffset MEDIA_LINKS: Offset = Offset(),
    EARLIEST_LAUNCH_TIMESVectorOffset EARLIEST_LAUNCH_TIMES: Offset = Offset(),
    LATEST_LAUNCH_TIMESVectorOffset LATEST_LAUNCH_TIMES: Offset = Offset(),
    LCOLA_WINDOW_CLOSURESVectorOffset LCOLA_WINDOW_CLOSURES: Offset = Offset(),
    OBJECTSVectorOffset OBJECTS: Offset = Offset(),
    TRACKING_REQUIREMENTSVectorOffset TRACKING_REQUIREMENTS: Offset = Offset(),
    COLA_SCREEN_DURATIONOffset COLA_SCREEN_DURATION: Offset = Offset(),
    PROBABILITY_OF_COLLISION_THRESHOLDOffset PROBABILITY_OF_COLLISION_THRESHOLD: Offset = Offset(),
    COLA_RUNS_REQUIREDOffset COLA_RUNS_REQUIRED: Offset = Offset(),
    COLA_POINTS_OF_CONTACTVectorOffset COLA_POINTS_OF_CONTACT: Offset = Offset(),
    ORBITAL_PARAMETERSVectorOffset ORBITAL_PARAMETERS: Offset = Offset(),
    BURN_OUT_VECTORSVectorOffset BURN_OUT_VECTORS: Offset = Offset()
  ) -> Offset {
    let __start = LDM.startLDM(&fbb)
    LDM.add(SITE: SITE, &fbb)
    LDM.add(AZIMUTH: AZIMUTH, &fbb)
    LDM.add(REFERENCES: REFERENCES, &fbb)
    LDM.add(AGENCY_NAME: AGENCY_NAME, &fbb)
    LDM.addVectorOf(POINTS_OF_CONTACT: POINTS_OF_CONTACT, &fbb)
    LDM.addVectorOf(OPERATIONS_POINTS_OF_CONTACT: OPERATIONS_POINTS_OF_CONTACT, &fbb)
    LDM.add(NET: NET, &fbb)
    LDM.add(ROCKET_CONFIGURATION: ROCKET_CONFIGURATION, &fbb)
    LDM.add(MISSION_NAME: MISSION_NAME, &fbb)
    LDM.add(MISSION_DESCRIPTION: MISSION_DESCRIPTION, &fbb)
    LDM.add(MISSION_TYPE: MISSION_TYPE, &fbb)
    LDM.add(ORBIT_TYPE: ORBIT_TYPE, &fbb)
    LDM.add(WEATHER_CONDITIONS: WEATHER_CONDITIONS, &fbb)
    LDM.add(LAUNCH_STATUS: LAUNCH_STATUS, &fbb)
    LDM.add(WEBCAST_URL: WEBCAST_URL, &fbb)
    LDM.addVectorOf(MEDIA_LINKS: MEDIA_LINKS, &fbb)
    LDM.addVectorOf(EARLIEST_LAUNCH_TIMES: EARLIEST_LAUNCH_TIMES, &fbb)
    LDM.addVectorOf(LATEST_LAUNCH_TIMES: LATEST_LAUNCH_TIMES, &fbb)
    LDM.addVectorOf(LCOLA_WINDOW_CLOSURES: LCOLA_WINDOW_CLOSURES, &fbb)
    LDM.addVectorOf(OBJECTS: OBJECTS, &fbb)
    LDM.addVectorOf(TRACKING_REQUIREMENTS: TRACKING_REQUIREMENTS, &fbb)
    LDM.add(COLA_SCREEN_DURATION: COLA_SCREEN_DURATION, &fbb)
    LDM.add(PROBABILITY_OF_COLLISION_THRESHOLD: PROBABILITY_OF_COLLISION_THRESHOLD, &fbb)
    LDM.add(COLA_RUNS_REQUIRED: COLA_RUNS_REQUIRED, &fbb)
    LDM.addVectorOf(COLA_POINTS_OF_CONTACT: COLA_POINTS_OF_CONTACT, &fbb)
    LDM.addVectorOf(ORBITAL_PARAMETERS: ORBITAL_PARAMETERS, &fbb)
    LDM.addVectorOf(BURN_OUT_VECTORS: BURN_OUT_VECTORS, &fbb)
    return LDM.endLDM(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.SITE.p, fieldName: "SITE", required: false, type: ForwardOffset<SIT>.self)
    try _v.visit(field: VTOFFSET.AZIMUTH.p, fieldName: "AZIMUTH", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.REFERENCES.p, fieldName: "REFERENCES", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.AGENCY_NAME.p, fieldName: "AGENCY_NAME", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.POINTS_OF_CONTACT.p, fieldName: "POINTS_OF_CONTACT", required: false, type: ForwardOffset<Vector<ForwardOffset<EPM>, EPM>>.self)
    try _v.visit(field: VTOFFSET.OPERATIONS_POINTS_OF_CONTACT.p, fieldName: "OPERATIONS_POINTS_OF_CONTACT", required: false, type: ForwardOffset<Vector<ForwardOffset<EPM>, EPM>>.self)
    try _v.visit(field: VTOFFSET.NET.p, fieldName: "NET", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ROCKET_CONFIGURATION.p, fieldName: "ROCKET_CONFIGURATION", required: false, type: ForwardOffset<ROC>.self)
    try _v.visit(field: VTOFFSET.MISSION_NAME.p, fieldName: "MISSION_NAME", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.MISSION_DESCRIPTION.p, fieldName: "MISSION_DESCRIPTION", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.MISSION_TYPE.p, fieldName: "MISSION_TYPE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ORBIT_TYPE.p, fieldName: "ORBIT_TYPE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.WEATHER_CONDITIONS.p, fieldName: "WEATHER_CONDITIONS", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.LAUNCH_STATUS.p, fieldName: "LAUNCH_STATUS", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.WEBCAST_URL.p, fieldName: "WEBCAST_URL", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.MEDIA_LINKS.p, fieldName: "MEDIA_LINKS", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.EARLIEST_LAUNCH_TIMES.p, fieldName: "EARLIEST_LAUNCH_TIMES", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.LATEST_LAUNCH_TIMES.p, fieldName: "LATEST_LAUNCH_TIMES", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.LCOLA_WINDOW_CLOSURES.p, fieldName: "LCOLA_WINDOW_CLOSURES", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.OBJECTS.p, fieldName: "OBJECTS", required: false, type: ForwardOffset<Vector<ForwardOffset<CAT>, CAT>>.self)
    try _v.visit(field: VTOFFSET.TRACKING_REQUIREMENTS.p, fieldName: "TRACKING_REQUIREMENTS", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.COLA_SCREEN_DURATION.p, fieldName: "COLA_SCREEN_DURATION", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.PROBABILITY_OF_COLLISION_THRESHOLD.p, fieldName: "PROBABILITY_OF_COLLISION_THRESHOLD", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.COLA_RUNS_REQUIRED.p, fieldName: "COLA_RUNS_REQUIRED", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.COLA_POINTS_OF_CONTACT.p, fieldName: "COLA_POINTS_OF_CONTACT", required: false, type: ForwardOffset<Vector<ForwardOffset<EPM>, EPM>>.self)
    try _v.visit(field: VTOFFSET.ORBITAL_PARAMETERS.p, fieldName: "ORBITAL_PARAMETERS", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.BURN_OUT_VECTORS.p, fieldName: "BURN_OUT_VECTORS", required: false, type: ForwardOffset<Vector<ForwardOffset<BOV>, BOV>>.self)
    _v.finish()
  }
}

