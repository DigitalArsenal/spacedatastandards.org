// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum objectType: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  /// 0
  case payload = 0
  /// 1
  case rocketBody = 1
  /// 2
  case debris = 2
  /// 3
  case unknown = 3

  public static var max: objectType { return .unknown }
  public static var min: objectType { return .payload }
}


public enum opsStatusCode: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  /// +
  case operational = 0
  /// -
  case nonoperational = 1
  /// P
  case partiallyOperational = 2
  /// B
  case backupStandby = 3
  /// S
  case spare = 4
  /// X
  case extendedMission = 5
  /// D
  case decayed = 6
  /// ?
  case unknown = 7

  public static var max: opsStatusCode { return .unknown }
  public static var min: opsStatusCode { return .operational }
}


public enum dataStatusCode: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  /// NCE
  case noCurrentElements = 0
  /// NIE
  case noInitialElements = 1
  /// NEA
  case noElementsAvailable = 2
  /// OK
  case ok = 3

  public static var max: dataStatusCode { return .ok }
  public static var min: dataStatusCode { return .noCurrentElements }
}


public enum orbitType: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  /// 0
  case orbit = 0
  /// 1
  case landing = 1
  /// 2
  case impact = 2
  /// 3
  case docked = 3
  /// 4
  case roundtrip = 4

  public static var max: orbitType { return .roundtrip }
  public static var min: orbitType { return .orbit }
}


public enum massType: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case dry = 0
  case wet = 1

  public static var max: massType { return .wet }
  public static var min: massType { return .dry }
}


///  Catalog Entity Message
public struct CAT: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$CAT" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: CAT.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case OBJECT_NAME = 4
    case OBJECT_ID = 6
    case NORAD_CAT_ID = 8
    case OBJECT_TYPE = 10
    case OPS_STATUS_CODE = 12
    case OWNER = 14
    case LAUNCH_DATE = 16
    case LAUNCH_SITE = 18
    case DECAY_DATE = 20
    case PERIOD = 22
    case INCLINATION = 24
    case APOGEE = 26
    case PERIGEE = 28
    case RCS = 30
    case DATA_STATUS_CODE = 32
    case ORBIT_CENTER = 34
    case ORBIT_TYPE = 36
    case DEPLOYMENT_DATE = 38
    case MANEUVERABLE = 40
    case SIZE = 42
    case MASS = 44
    case MASS_TYPE = 46
    case PAYLOADS = 48
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  Satellite Name(s)
  public var OBJECT_NAME: String? { let o = _accessor.offset(VTOFFSET.OBJECT_NAME.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var OBJECT_NAMESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.OBJECT_NAME.v) }
  ///  International Designator (YYYY-NNNAAA)
  public var OBJECT_ID: String? { let o = _accessor.offset(VTOFFSET.OBJECT_ID.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var OBJECT_IDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.OBJECT_ID.v) }
  ///  NORAD Catalog Number
  public var NORAD_CAT_ID: UInt32 { let o = _accessor.offset(VTOFFSET.NORAD_CAT_ID.v); return o == 0 ? 0 : _accessor.readBuffer(of: UInt32.self, at: o) }
  ///  Object type (Payload, Rocket body, Debris, Unknown)
  public var OBJECT_TYPE: objectType { let o = _accessor.offset(VTOFFSET.OBJECT_TYPE.v); return o == 0 ? .unknown : objectType(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .unknown }
  ///  Operational Status Code
  public var OPS_STATUS_CODE: opsStatusCode { let o = _accessor.offset(VTOFFSET.OPS_STATUS_CODE.v); return o == 0 ? .unknown : opsStatusCode(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .unknown }
  ///  Ownership, typically country or company
  public var OWNER: String? { let o = _accessor.offset(VTOFFSET.OWNER.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var OWNERSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.OWNER.v) }
  ///  Launch Date [year-month-day] (ISO 8601)
  public var LAUNCH_DATE: String? { let o = _accessor.offset(VTOFFSET.LAUNCH_DATE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var LAUNCH_DATESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.LAUNCH_DATE.v) }
  ///  Launch Site
  public var LAUNCH_SITE: String? { let o = _accessor.offset(VTOFFSET.LAUNCH_SITE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var LAUNCH_SITESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.LAUNCH_SITE.v) }
  ///  Decay Date, if applicable [year-month-day] (ISO 8601)
  public var DECAY_DATE: String? { let o = _accessor.offset(VTOFFSET.DECAY_DATE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var DECAY_DATESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.DECAY_DATE.v) }
  ///  Orbital period [minutes]
  public var PERIOD: Double { let o = _accessor.offset(VTOFFSET.PERIOD.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Inclination [degrees]
  public var INCLINATION: Double { let o = _accessor.offset(VTOFFSET.INCLINATION.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Apogee Altitude [kilometers]
  public var APOGEE: Double { let o = _accessor.offset(VTOFFSET.APOGEE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Perigee Altitude [kilometers]
  public var PERIGEE: Double { let o = _accessor.offset(VTOFFSET.PERIGEE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Radar Cross Section [meters2]; blank if no data available
  public var RCS: Double { let o = _accessor.offset(VTOFFSET.RCS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Data status code; blank otherwise
  public var DATA_STATUS_CODE: dataStatusCode { let o = _accessor.offset(VTOFFSET.DATA_STATUS_CODE.v); return o == 0 ? .noCurrentElements : dataStatusCode(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .noCurrentElements }
  ///  Orbit center
  public var ORBIT_CENTER: String? { let o = _accessor.offset(VTOFFSET.ORBIT_CENTER.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var ORBIT_CENTERSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ORBIT_CENTER.v) }
  ///  Orbit type (Orbit, Landing, Impact, Docked to RSO, roundtrip)
  public var ORBIT_TYPE: orbitType { let o = _accessor.offset(VTOFFSET.ORBIT_TYPE.v); return o == 0 ? .orbit : orbitType(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .orbit }
  ///  Deployment Date [year-month-day] (ISO 8601)
  public var DEPLOYMENT_DATE: String? { let o = _accessor.offset(VTOFFSET.DEPLOYMENT_DATE.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var DEPLOYMENT_DATESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.DEPLOYMENT_DATE.v) }
  ///  Indicates if the object is maneuverable
  public var MANEUVERABLE: Bool { let o = _accessor.offset(VTOFFSET.MANEUVERABLE.v); return o == 0 ? false : 0 != _accessor.readBuffer(of: Byte.self, at: o) }
  ///  Size [meters]; blank if no data available
  public var SIZE: Double { let o = _accessor.offset(VTOFFSET.SIZE.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Mass [kilograms]; blank if no data available
  public var MASS: Double { let o = _accessor.offset(VTOFFSET.MASS.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  ///  Mass type (Dry, Wet)
  public var MASS_TYPE: massType { let o = _accessor.offset(VTOFFSET.MASS_TYPE.v); return o == 0 ? .dry : massType(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .dry }
  ///  Vector of PAYLOADS
  public var hasPayloads: Bool { let o = _accessor.offset(VTOFFSET.PAYLOADS.v); return o == 0 ? false : true }
  public var PAYLOADSCount: Int32 { let o = _accessor.offset(VTOFFSET.PAYLOADS.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func PAYLOADS(at index: Int32) -> PLD? { let o = _accessor.offset(VTOFFSET.PAYLOADS.v); return o == 0 ? nil : PLD(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public static func startCAT(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 23) }
  public static func add(OBJECT_NAME: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: OBJECT_NAME, at: VTOFFSET.OBJECT_NAME.p) }
  public static func add(OBJECT_ID: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: OBJECT_ID, at: VTOFFSET.OBJECT_ID.p) }
  public static func add(NORAD_CAT_ID: UInt32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: NORAD_CAT_ID, def: 0, at: VTOFFSET.NORAD_CAT_ID.p) }
  public static func add(OBJECT_TYPE: objectType, _ fbb: inout FlatBufferBuilder) { fbb.add(element: OBJECT_TYPE.rawValue, def: 3, at: VTOFFSET.OBJECT_TYPE.p) }
  public static func add(OPS_STATUS_CODE: opsStatusCode, _ fbb: inout FlatBufferBuilder) { fbb.add(element: OPS_STATUS_CODE.rawValue, def: 7, at: VTOFFSET.OPS_STATUS_CODE.p) }
  public static func add(OWNER: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: OWNER, at: VTOFFSET.OWNER.p) }
  public static func add(LAUNCH_DATE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: LAUNCH_DATE, at: VTOFFSET.LAUNCH_DATE.p) }
  public static func add(LAUNCH_SITE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: LAUNCH_SITE, at: VTOFFSET.LAUNCH_SITE.p) }
  public static func add(DECAY_DATE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: DECAY_DATE, at: VTOFFSET.DECAY_DATE.p) }
  public static func add(PERIOD: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: PERIOD, def: 0.0, at: VTOFFSET.PERIOD.p) }
  public static func add(INCLINATION: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: INCLINATION, def: 0.0, at: VTOFFSET.INCLINATION.p) }
  public static func add(APOGEE: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: APOGEE, def: 0.0, at: VTOFFSET.APOGEE.p) }
  public static func add(PERIGEE: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: PERIGEE, def: 0.0, at: VTOFFSET.PERIGEE.p) }
  public static func add(RCS: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: RCS, def: 0.0, at: VTOFFSET.RCS.p) }
  public static func add(DATA_STATUS_CODE: dataStatusCode, _ fbb: inout FlatBufferBuilder) { fbb.add(element: DATA_STATUS_CODE.rawValue, def: 0, at: VTOFFSET.DATA_STATUS_CODE.p) }
  public static func add(ORBIT_CENTER: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ORBIT_CENTER, at: VTOFFSET.ORBIT_CENTER.p) }
  public static func add(ORBIT_TYPE: orbitType, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ORBIT_TYPE.rawValue, def: 0, at: VTOFFSET.ORBIT_TYPE.p) }
  public static func add(DEPLOYMENT_DATE: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: DEPLOYMENT_DATE, at: VTOFFSET.DEPLOYMENT_DATE.p) }
  public static func add(MANEUVERABLE: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MANEUVERABLE, def: false,
   at: VTOFFSET.MANEUVERABLE.p) }
  public static func add(SIZE: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: SIZE, def: 0.0, at: VTOFFSET.SIZE.p) }
  public static func add(MASS: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MASS, def: 0.0, at: VTOFFSET.MASS.p) }
  public static func add(MASS_TYPE: massType, _ fbb: inout FlatBufferBuilder) { fbb.add(element: MASS_TYPE.rawValue, def: 0, at: VTOFFSET.MASS_TYPE.p) }
  public static func addVectorOf(PAYLOADS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: PAYLOADS, at: VTOFFSET.PAYLOADS.p) }
  public static func endCAT(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createCAT(
    _ fbb: inout FlatBufferBuilder,
    OBJECT_NAMEOffset OBJECT_NAME: Offset = Offset(),
    OBJECT_IDOffset OBJECT_ID: Offset = Offset(),
    NORAD_CAT_ID: UInt32 = 0,
    OBJECT_TYPE: objectType = .unknown,
    OPS_STATUS_CODE: opsStatusCode = .unknown,
    OWNEROffset OWNER: Offset = Offset(),
    LAUNCH_DATEOffset LAUNCH_DATE: Offset = Offset(),
    LAUNCH_SITEOffset LAUNCH_SITE: Offset = Offset(),
    DECAY_DATEOffset DECAY_DATE: Offset = Offset(),
    PERIOD: Double = 0.0,
    INCLINATION: Double = 0.0,
    APOGEE: Double = 0.0,
    PERIGEE: Double = 0.0,
    RCS: Double = 0.0,
    DATA_STATUS_CODE: dataStatusCode = .noCurrentElements,
    ORBIT_CENTEROffset ORBIT_CENTER: Offset = Offset(),
    ORBIT_TYPE: orbitType = .orbit,
    DEPLOYMENT_DATEOffset DEPLOYMENT_DATE: Offset = Offset(),
    MANEUVERABLE: Bool = false,
    SIZE: Double = 0.0,
    MASS: Double = 0.0,
    MASS_TYPE: massType = .dry,
    PAYLOADSVectorOffset PAYLOADS: Offset = Offset()
  ) -> Offset {
    let __start = CAT.startCAT(&fbb)
    CAT.add(OBJECT_NAME: OBJECT_NAME, &fbb)
    CAT.add(OBJECT_ID: OBJECT_ID, &fbb)
    CAT.add(NORAD_CAT_ID: NORAD_CAT_ID, &fbb)
    CAT.add(OBJECT_TYPE: OBJECT_TYPE, &fbb)
    CAT.add(OPS_STATUS_CODE: OPS_STATUS_CODE, &fbb)
    CAT.add(OWNER: OWNER, &fbb)
    CAT.add(LAUNCH_DATE: LAUNCH_DATE, &fbb)
    CAT.add(LAUNCH_SITE: LAUNCH_SITE, &fbb)
    CAT.add(DECAY_DATE: DECAY_DATE, &fbb)
    CAT.add(PERIOD: PERIOD, &fbb)
    CAT.add(INCLINATION: INCLINATION, &fbb)
    CAT.add(APOGEE: APOGEE, &fbb)
    CAT.add(PERIGEE: PERIGEE, &fbb)
    CAT.add(RCS: RCS, &fbb)
    CAT.add(DATA_STATUS_CODE: DATA_STATUS_CODE, &fbb)
    CAT.add(ORBIT_CENTER: ORBIT_CENTER, &fbb)
    CAT.add(ORBIT_TYPE: ORBIT_TYPE, &fbb)
    CAT.add(DEPLOYMENT_DATE: DEPLOYMENT_DATE, &fbb)
    CAT.add(MANEUVERABLE: MANEUVERABLE, &fbb)
    CAT.add(SIZE: SIZE, &fbb)
    CAT.add(MASS: MASS, &fbb)
    CAT.add(MASS_TYPE: MASS_TYPE, &fbb)
    CAT.addVectorOf(PAYLOADS: PAYLOADS, &fbb)
    return CAT.endCAT(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.OBJECT_NAME.p, fieldName: "OBJECT_NAME", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.OBJECT_ID.p, fieldName: "OBJECT_ID", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.NORAD_CAT_ID.p, fieldName: "NORAD_CAT_ID", required: false, type: UInt32.self)
    try _v.visit(field: VTOFFSET.OBJECT_TYPE.p, fieldName: "OBJECT_TYPE", required: false, type: objectType.self)
    try _v.visit(field: VTOFFSET.OPS_STATUS_CODE.p, fieldName: "OPS_STATUS_CODE", required: false, type: opsStatusCode.self)
    try _v.visit(field: VTOFFSET.OWNER.p, fieldName: "OWNER", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.LAUNCH_DATE.p, fieldName: "LAUNCH_DATE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.LAUNCH_SITE.p, fieldName: "LAUNCH_SITE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.DECAY_DATE.p, fieldName: "DECAY_DATE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.PERIOD.p, fieldName: "PERIOD", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.INCLINATION.p, fieldName: "INCLINATION", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.APOGEE.p, fieldName: "APOGEE", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.PERIGEE.p, fieldName: "PERIGEE", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.RCS.p, fieldName: "RCS", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.DATA_STATUS_CODE.p, fieldName: "DATA_STATUS_CODE", required: false, type: dataStatusCode.self)
    try _v.visit(field: VTOFFSET.ORBIT_CENTER.p, fieldName: "ORBIT_CENTER", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ORBIT_TYPE.p, fieldName: "ORBIT_TYPE", required: false, type: orbitType.self)
    try _v.visit(field: VTOFFSET.DEPLOYMENT_DATE.p, fieldName: "DEPLOYMENT_DATE", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.MANEUVERABLE.p, fieldName: "MANEUVERABLE", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.SIZE.p, fieldName: "SIZE", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.MASS.p, fieldName: "MASS", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.MASS_TYPE.p, fieldName: "MASS_TYPE", required: false, type: massType.self)
    try _v.visit(field: VTOFFSET.PAYLOADS.p, fieldName: "PAYLOADS", required: false, type: ForwardOffset<Vector<ForwardOffset<PLD>, PLD>>.self)
    _v.finish()
  }
}

