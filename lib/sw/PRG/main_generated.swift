// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

///  Program Description Message
public struct PRG: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$PRG" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: PRG.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case NAME = 4
    case HD_KEY_PATH = 6
    case MESSAGE_TYPES = 8
    case USERS = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  ///  The name of the program
  public var NAME: String? { let o = _accessor.offset(VTOFFSET.NAME.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var NAMESegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.NAME.v) }
  ///  Hierarchical Deterministic (HD) derivation path for the program's key, used in cryptocurrency wallets
  public var HD_KEY_PATH: String? { let o = _accessor.offset(VTOFFSET.HD_KEY_PATH.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var HD_KEY_PATHSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.HD_KEY_PATH.v) }
  ///  Vector of standard message types used by the program
  public var hasMessageTypes: Bool { let o = _accessor.offset(VTOFFSET.MESSAGE_TYPES.v); return o == 0 ? false : true }
  public var MESSAGE_TYPESCount: Int32 { let o = _accessor.offset(VTOFFSET.MESSAGE_TYPES.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func MESSAGE_TYPES(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.MESSAGE_TYPES.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  ///  Vector of users associated with the program, each user can have assigned message types
  public var hasUsers: Bool { let o = _accessor.offset(VTOFFSET.USERS.v); return o == 0 ? false : true }
  public var USERSCount: Int32 { let o = _accessor.offset(VTOFFSET.USERS.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func USERS(at index: Int32) -> USR? { let o = _accessor.offset(VTOFFSET.USERS.v); return o == 0 ? nil : USR(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public static func startPRG(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(NAME: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: NAME, at: VTOFFSET.NAME.p) }
  public static func add(HD_KEY_PATH: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: HD_KEY_PATH, at: VTOFFSET.HD_KEY_PATH.p) }
  public static func addVectorOf(MESSAGE_TYPES: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: MESSAGE_TYPES, at: VTOFFSET.MESSAGE_TYPES.p) }
  public static func addVectorOf(USERS: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: USERS, at: VTOFFSET.USERS.p) }
  public static func endPRG(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createPRG(
    _ fbb: inout FlatBufferBuilder,
    NAMEOffset NAME: Offset = Offset(),
    HD_KEY_PATHOffset HD_KEY_PATH: Offset = Offset(),
    MESSAGE_TYPESVectorOffset MESSAGE_TYPES: Offset = Offset(),
    USERSVectorOffset USERS: Offset = Offset()
  ) -> Offset {
    let __start = PRG.startPRG(&fbb)
    PRG.add(NAME: NAME, &fbb)
    PRG.add(HD_KEY_PATH: HD_KEY_PATH, &fbb)
    PRG.addVectorOf(MESSAGE_TYPES: MESSAGE_TYPES, &fbb)
    PRG.addVectorOf(USERS: USERS, &fbb)
    return PRG.endPRG(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.NAME.p, fieldName: "NAME", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.HD_KEY_PATH.p, fieldName: "HD_KEY_PATH", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.MESSAGE_TYPES.p, fieldName: "MESSAGE_TYPES", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    try _v.visit(field: VTOFFSET.USERS.p, fieldName: "USERS", required: false, type: ForwardOffset<Vector<ForwardOffset<USR>, USR>>.self)
    _v.finish()
  }
}

public struct USR: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_3_3() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static var id: String { "$PRG" } 
  public static func finish(_ fbb: inout FlatBufferBuilder, end: Offset, prefix: Bool = false) { fbb.finish(offset: end, fileId: USR.id, addPrefix: prefix) }
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case ID = 4
    case MESSAGE_TYPES = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var ID: String? { let o = _accessor.offset(VTOFFSET.ID.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var IDSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.ID.v) }
  public var hasMessageTypes: Bool { let o = _accessor.offset(VTOFFSET.MESSAGE_TYPES.v); return o == 0 ? false : true }
  public var MESSAGE_TYPESCount: Int32 { let o = _accessor.offset(VTOFFSET.MESSAGE_TYPES.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func MESSAGE_TYPES(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.MESSAGE_TYPES.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startUSR(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(ID: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ID, at: VTOFFSET.ID.p) }
  public static func addVectorOf(MESSAGE_TYPES: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: MESSAGE_TYPES, at: VTOFFSET.MESSAGE_TYPES.p) }
  public static func endUSR(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createUSR(
    _ fbb: inout FlatBufferBuilder,
    IDOffset ID: Offset = Offset(),
    MESSAGE_TYPESVectorOffset MESSAGE_TYPES: Offset = Offset()
  ) -> Offset {
    let __start = USR.startUSR(&fbb)
    USR.add(ID: ID, &fbb)
    USR.addVectorOf(MESSAGE_TYPES: MESSAGE_TYPES, &fbb)
    return USR.endUSR(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.ID.p, fieldName: "ID", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.MESSAGE_TYPES.p, fieldName: "MESSAGE_TYPES", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

