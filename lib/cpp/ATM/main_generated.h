// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct ATM;
struct ATMBuilder;

/// Canonical list of atmosphere model families per CCSDS SANA registry.
/// Use the `YEAR` field in the ATM message to specify the variant implementation.
enum AtmosphericModelFamily : int8_t {
  /// OID: 1.3.112.4.57.9.1
  /// COSPAR International Reference Atmosphere
  /// Known years: 1965, 1972, 1986, 1990
  AtmosphericModelFamily_CIRA_XX = 0,
  /// OID: 1.3.112.4.57.9.2
  /// Drag Temperature Model
  /// Known years: 1978, 1994, 2000, 2009, 2012, 2013, 2020
  AtmosphericModelFamily_DTM_XX = 1,
  /// OID: 1.3.112.4.57.9.3
  /// Global Ionosphere-Thermosphere Model
  /// GITM has no specific year versions defined
  AtmosphericModelFamily_GITM = 2,
  /// OID: 1.3.112.4.57.9.4
  /// GOST atmospheric density model
  /// Known version: 2004 (GOST R 25645.166-2004)
  AtmosphericModelFamily_GOST = 3,
  /// OID: 1.3.112.4.57.9.5
  /// Global Reference Atmospheric Model
  /// Known version: 2016
  AtmosphericModelFamily_GRAM_XX = 4,
  /// OID: 1.3.112.4.57.9.6
  /// Harris-Priester empirical model
  /// Known version: 1962
  AtmosphericModelFamily_HP = 5,
  /// OID: 1.3.112.4.57.9.7
  /// Jacchia atmosphere model with HASDM correction overlay
  /// Based on Jacchia 1970 with HASDM (DCA) overlay
  AtmosphericModelFamily_JAC_HASDM = 6,
  /// OID: 1.3.112.4.57.9.8
  /// Jacchia-Gill bi-polynomial interpolation
  /// Interpolates Jacchia 1971
  AtmosphericModelFamily_JAC_GILL = 7,
  /// OID: 1.3.112.4.57.9.9
  /// Jacchia-Bowman empirical model
  /// Known versions: 2006 (JB2006), 2008 (JB2008)
  AtmosphericModelFamily_JB08 = 8,
  /// OID: 1.3.112.4.57.9.10
  /// Jacchia-Roberts analytic model
  /// Known version: 1971
  AtmosphericModelFamily_JR71 = 9,
  /// OID: 1.3.112.4.57.9.11
  /// Jacchia static diffusion models
  /// Known years: 1970, 1971, 1977
  AtmosphericModelFamily_JXX = 10,
  /// OID: 1.3.112.4.57.9.12
  /// Marshall Engineering Thermosphere
  /// Known version: 2007
  AtmosphericModelFamily_MET_XX = 11,
  /// OID: 1.3.112.4.57.9.13
  /// MSIS empirical model
  /// Known version: 1986
  AtmosphericModelFamily_MSIS_86 = 12,
  /// OID: 1.3.112.4.57.9.14
  /// MSISE empirical model with exosphere extension
  /// Known version: 1990
  AtmosphericModelFamily_MSISE_90 = 13,
  /// OID: 1.3.112.4.57.9.15
  /// NRLMSISE empirical model
  /// Known version: 2000 (NRLMSISE-00E)
  AtmosphericModelFamily_NRLMSIS00E = 14,
  /// OID: 1.3.112.4.57.9.16
  /// Thermosphere-Ionosphere Electrodynamic General Circulation Model
  /// Based on TIME-GCM, no version specified
  AtmosphericModelFamily_TIECGM = 15,
  /// OID: 1.3.112.4.57.9.17
  /// U.S. Standard Atmosphere
  /// Known versions: 1962, 1976
  AtmosphericModelFamily_USSA_XX = 16,
  AtmosphericModelFamily_MIN = AtmosphericModelFamily_CIRA_XX,
  AtmosphericModelFamily_MAX = AtmosphericModelFamily_USSA_XX
};

inline const AtmosphericModelFamily (&EnumValuesAtmosphericModelFamily())[17] {
  static const AtmosphericModelFamily values[] = {
    AtmosphericModelFamily_CIRA_XX,
    AtmosphericModelFamily_DTM_XX,
    AtmosphericModelFamily_GITM,
    AtmosphericModelFamily_GOST,
    AtmosphericModelFamily_GRAM_XX,
    AtmosphericModelFamily_HP,
    AtmosphericModelFamily_JAC_HASDM,
    AtmosphericModelFamily_JAC_GILL,
    AtmosphericModelFamily_JB08,
    AtmosphericModelFamily_JR71,
    AtmosphericModelFamily_JXX,
    AtmosphericModelFamily_MET_XX,
    AtmosphericModelFamily_MSIS_86,
    AtmosphericModelFamily_MSISE_90,
    AtmosphericModelFamily_NRLMSIS00E,
    AtmosphericModelFamily_TIECGM,
    AtmosphericModelFamily_USSA_XX
  };
  return values;
}

inline const char * const *EnumNamesAtmosphericModelFamily() {
  static const char * const names[18] = {
    "CIRA_XX",
    "DTM_XX",
    "GITM",
    "GOST",
    "GRAM_XX",
    "HP",
    "JAC_HASDM",
    "JAC_GILL",
    "JB08",
    "JR71",
    "JXX",
    "MET_XX",
    "MSIS_86",
    "MSISE_90",
    "NRLMSIS00E",
    "TIECGM",
    "USSA_XX",
    nullptr
  };
  return names;
}

inline const char *EnumNameAtmosphericModelFamily(AtmosphericModelFamily e) {
  if (::flatbuffers::IsOutRange(e, AtmosphericModelFamily_CIRA_XX, AtmosphericModelFamily_USSA_XX)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAtmosphericModelFamily()[index];
}

/// Atmospheric Model Message
struct ATM FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ATMBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODEL = 4,
    VT_YEAR = 6
  };
  /// Canonical model family
  AtmosphericModelFamily MODEL() const {
    return static_cast<AtmosphericModelFamily>(GetField<int8_t>(VT_MODEL, 0));
  }
  /// Four-digit year identifying the model version (e.g., 1970, 2008, 2020)
  int32_t YEAR() const {
    return GetField<int32_t>(VT_YEAR, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_MODEL, 1) &&
           VerifyField<int32_t>(verifier, VT_YEAR, 4) &&
           verifier.EndTable();
  }
};

struct ATMBuilder {
  typedef ATM Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_MODEL(AtmosphericModelFamily MODEL) {
    fbb_.AddElement<int8_t>(ATM::VT_MODEL, static_cast<int8_t>(MODEL), 0);
  }
  void add_YEAR(int32_t YEAR) {
    fbb_.AddElement<int32_t>(ATM::VT_YEAR, YEAR, 0);
  }
  explicit ATMBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ATM> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ATM>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ATM> CreateATM(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    AtmosphericModelFamily MODEL = AtmosphericModelFamily_CIRA_XX,
    int32_t YEAR = 0) {
  ATMBuilder builder_(_fbb);
  builder_.add_YEAR(YEAR);
  builder_.add_MODEL(MODEL);
  return builder_.Finish();
}

inline const ATM *GetATM(const void *buf) {
  return ::flatbuffers::GetRoot<ATM>(buf);
}

inline const ATM *GetSizePrefixedATM(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ATM>(buf);
}

inline const char *ATMIdentifier() {
  return "$ATM";
}

inline bool ATMBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ATMIdentifier());
}

inline bool SizePrefixedATMBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ATMIdentifier(), true);
}

inline bool VerifyATMBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ATM>(ATMIdentifier());
}

inline bool VerifySizePrefixedATMBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ATM>(ATMIdentifier());
}

inline void FinishATMBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ATM> root) {
  fbb.Finish(root, ATMIdentifier());
}

inline void FinishSizePrefixedATMBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ATM> root) {
  fbb.FinishSizePrefixed(root, ATMIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
