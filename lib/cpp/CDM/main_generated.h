// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

#include "main_generated.h"
#include "main_generated.h"
#include "main_generated.h"
#include "main_generated.h"

struct CDMObject;
struct CDMObjectBuilder;

struct CDM;
struct CDMBuilder;

enum screeningVolumeShape : int8_t {
  screeningVolumeShape_ELLIPSOID = 0,
  screeningVolumeShape_BOX = 1,
  screeningVolumeShape_MIN = screeningVolumeShape_ELLIPSOID,
  screeningVolumeShape_MAX = screeningVolumeShape_BOX
};

inline const screeningVolumeShape (&EnumValuesscreeningVolumeShape())[2] {
  static const screeningVolumeShape values[] = {
    screeningVolumeShape_ELLIPSOID,
    screeningVolumeShape_BOX
  };
  return values;
}

inline const char * const *EnumNamesscreeningVolumeShape() {
  static const char * const names[3] = {
    "ELLIPSOID",
    "BOX",
    nullptr
  };
  return names;
}

inline const char *EnumNamescreeningVolumeShape(screeningVolumeShape e) {
  if (::flatbuffers::IsOutRange(e, screeningVolumeShape_ELLIPSOID, screeningVolumeShape_BOX)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesscreeningVolumeShape()[index];
}

enum covarianceMethod : int8_t {
  covarianceMethod_CALCULATED = 0,
  covarianceMethod_DEFAULT = 1,
  covarianceMethod_MIN = covarianceMethod_CALCULATED,
  covarianceMethod_MAX = covarianceMethod_DEFAULT
};

inline const covarianceMethod (&EnumValuescovarianceMethod())[2] {
  static const covarianceMethod values[] = {
    covarianceMethod_CALCULATED,
    covarianceMethod_DEFAULT
  };
  return values;
}

inline const char * const *EnumNamescovarianceMethod() {
  static const char * const names[3] = {
    "CALCULATED",
    "DEFAULT",
    nullptr
  };
  return names;
}

inline const char *EnumNamecovarianceMethod(covarianceMethod e) {
  if (::flatbuffers::IsOutRange(e, covarianceMethod_CALCULATED, covarianceMethod_DEFAULT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamescovarianceMethod()[index];
}

struct CDMObject FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CDMObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COMMENT = 4,
    VT_OBJECT = 6,
    VT_POC = 8,
    VT_OPERATOR_CONTACT_POSITION = 10,
    VT_OPERATOR_ORGANIZATION = 12,
    VT_EPHEMERIS_NAME = 14,
    VT_COVARIANCE_METHOD = 16,
    VT_REF_FRAME = 18,
    VT_GRAVITY_MODEL = 20,
    VT_ATMOSPHERIC_MODEL = 22,
    VT_N_BODY_PERTURBATIONS = 24,
    VT_SOLAR_RAD_PRESSURE = 26,
    VT_EARTH_TIDES = 28,
    VT_INTRACK_THRUST = 30,
    VT_TIME_LASTOB_START = 32,
    VT_TIME_LASTOB_END = 34,
    VT_RECOMMENDED_OD_SPAN = 36,
    VT_ACTUAL_OD_SPAN = 38,
    VT_OBS_AVAILABLE = 40,
    VT_OBS_USED = 42,
    VT_TRACKS_AVAILABLE = 44,
    VT_TRACKS_USED = 46,
    VT_RESIDUALS_ACCEPTED = 48,
    VT_WEIGHTED_RMS = 50,
    VT_AREA_PC = 52,
    VT_AREA_DRG = 54,
    VT_AREA_SRP = 56,
    VT_CR_AREA_OVER_MASS = 58,
    VT_THRUST_ACCELERATION = 60,
    VT_SEDR = 62,
    VT_X = 64,
    VT_Y = 66,
    VT_Z = 68,
    VT_X_DOT = 70,
    VT_Y_DOT = 72,
    VT_Z_DOT = 74,
    VT_CR_R = 76,
    VT_CT_R = 78,
    VT_CT_T = 80,
    VT_CN_R = 82,
    VT_CN_T = 84,
    VT_CN_N = 86,
    VT_CRDOT_R = 88,
    VT_CRDOT_T = 90,
    VT_CRDOT_N = 92,
    VT_CRDOT_RDOT = 94,
    VT_CTDOT_R = 96,
    VT_CTDOT_T = 98,
    VT_CTDOT_N = 100,
    VT_CTDOT_RDOT = 102,
    VT_CTDOT_TDOT = 104,
    VT_CNDOT_R = 106,
    VT_CNDOT_T = 108,
    VT_CNDOT_N = 110,
    VT_CNDOT_RDOT = 112,
    VT_CNDOT_TDOT = 114,
    VT_CNDOT_NDOT = 116,
    VT_CDRG_R = 118,
    VT_CDRG_T = 120,
    VT_CDRG_N = 122,
    VT_CDRG_RDOT = 124,
    VT_CDRG_TDOT = 126,
    VT_CDRG_NDOT = 128,
    VT_CDRG_DRG = 130,
    VT_CSRP_R = 132,
    VT_CSRP_T = 134,
    VT_CSRP_N = 136,
    VT_CSRP_RDOT = 138,
    VT_CSRP_TDOT = 140,
    VT_CSRP_NDOT = 142,
    VT_CSRP_DRG = 144,
    VT_CSRP_SRP = 146,
    VT_CTHR_R = 148,
    VT_CTHR_T = 150,
    VT_CTHR_N = 152,
    VT_CTHR_RDOT = 154,
    VT_CTHR_TDOT = 156,
    VT_CTHR_NDOT = 158,
    VT_CTHR_DRG = 160,
    VT_CTHR_SRP = 162,
    VT_CTHR_THR = 164
  };
  /// A comment
  const ::flatbuffers::String *COMMENT() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMENT);
  }
  const CAT *OBJECT() const {
    return GetPointer<const CAT *>(VT_OBJECT);
  }
  /// Point of Contact
  const EPM *POC() const {
    return GetPointer<const EPM *>(VT_POC);
  }
  /// Operator contact position
  const ::flatbuffers::String *OPERATOR_CONTACT_POSITION() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPERATOR_CONTACT_POSITION);
  }
  /// Operator organization
  const ::flatbuffers::String *OPERATOR_ORGANIZATION() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPERATOR_ORGANIZATION);
  }
  /// Ephemeris name
  const ::flatbuffers::String *EPHEMERIS_NAME() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EPHEMERIS_NAME);
  }
  /// Covariance method
  covarianceMethod COVARIANCE_METHOD() const {
    return static_cast<covarianceMethod>(GetField<int8_t>(VT_COVARIANCE_METHOD, 0));
  }
  /// Reference Frame in which the object position is defined
  referenceFrame REF_FRAME() const {
    return static_cast<referenceFrame>(GetField<int8_t>(VT_REF_FRAME, 0));
  }
  /// Gravity model
  const ::flatbuffers::String *GRAVITY_MODEL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GRAVITY_MODEL);
  }
  /// Atmospheric model
  const ::flatbuffers::String *ATMOSPHERIC_MODEL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ATMOSPHERIC_MODEL);
  }
  /// N-body perturbations
  const ::flatbuffers::String *N_BODY_PERTURBATIONS() const {
    return GetPointer<const ::flatbuffers::String *>(VT_N_BODY_PERTURBATIONS);
  }
  /// Solar radiation pressure
  bool SOLAR_RAD_PRESSURE() const {
    return GetField<uint8_t>(VT_SOLAR_RAD_PRESSURE, 0) != 0;
  }
  /// Earth tides
  bool EARTH_TIDES() const {
    return GetField<uint8_t>(VT_EARTH_TIDES, 0) != 0;
  }
  /// Intrack thrust
  bool INTRACK_THRUST() const {
    return GetField<uint8_t>(VT_INTRACK_THRUST, 0) != 0;
  }
  /// Time of last observation start
  const ::flatbuffers::String *TIME_LASTOB_START() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIME_LASTOB_START);
  }
  /// Time of last observation end
  const ::flatbuffers::String *TIME_LASTOB_END() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIME_LASTOB_END);
  }
  /// Recommended observation data span
  double RECOMMENDED_OD_SPAN() const {
    return GetField<double>(VT_RECOMMENDED_OD_SPAN, 0.0);
  }
  /// Actual observation data span
  double ACTUAL_OD_SPAN() const {
    return GetField<double>(VT_ACTUAL_OD_SPAN, 0.0);
  }
  /// Number of observations available
  uint32_t OBS_AVAILABLE() const {
    return GetField<uint32_t>(VT_OBS_AVAILABLE, 0);
  }
  /// Number of observations used
  uint32_t OBS_USED() const {
    return GetField<uint32_t>(VT_OBS_USED, 0);
  }
  /// Number of tracks available
  uint32_t TRACKS_AVAILABLE() const {
    return GetField<uint32_t>(VT_TRACKS_AVAILABLE, 0);
  }
  /// Number of tracks used
  uint32_t TRACKS_USED() const {
    return GetField<uint32_t>(VT_TRACKS_USED, 0);
  }
  /// Residuals accepted
  double RESIDUALS_ACCEPTED() const {
    return GetField<double>(VT_RESIDUALS_ACCEPTED, 0.0);
  }
  /// Weighted root mean square
  double WEIGHTED_RMS() const {
    return GetField<double>(VT_WEIGHTED_RMS, 0.0);
  }
  /// Area of the object
  double AREA_PC() const {
    return GetField<double>(VT_AREA_PC, 0.0);
  }
  /// Area of the object drag
  double AREA_DRG() const {
    return GetField<double>(VT_AREA_DRG, 0.0);
  }
  /// Area of the object solar radiation pressure
  double AREA_SRP() const {
    return GetField<double>(VT_AREA_SRP, 0.0);
  }
  /// Object's area-to-mass ratio
  double CR_AREA_OVER_MASS() const {
    return GetField<double>(VT_CR_AREA_OVER_MASS, 0.0);
  }
  /// Object's thrust acceleration
  double THRUST_ACCELERATION() const {
    return GetField<double>(VT_THRUST_ACCELERATION, 0.0);
  }
  /// Object's solar flux
  double SEDR() const {
    return GetField<double>(VT_SEDR, 0.0);
  }
  /// X-coordinate of the object's position in RTN coordinates
  double X() const {
    return GetField<double>(VT_X, 0.0);
  }
  /// Y-coordinate of the object's position in RTN
  double Y() const {
    return GetField<double>(VT_Y, 0.0);
  }
  /// Z-coordinate of the object's position in RTN
  double Z() const {
    return GetField<double>(VT_Z, 0.0);
  }
  /// X-coordinate of the object's position in RTN coordinates
  double X_DOT() const {
    return GetField<double>(VT_X_DOT, 0.0);
  }
  /// Y-coordinate of the object's position in RTN
  double Y_DOT() const {
    return GetField<double>(VT_Y_DOT, 0.0);
  }
  /// Z-coordinate of the object's position in RTN
  double Z_DOT() const {
    return GetField<double>(VT_Z_DOT, 0.0);
  }
  /// Covariance Matrix component
  double CR_R() const {
    return GetField<double>(VT_CR_R, 0.0);
  }
  /// Covariance Matrix component
  double CT_R() const {
    return GetField<double>(VT_CT_R, 0.0);
  }
  /// Covariance Matrix component
  double CT_T() const {
    return GetField<double>(VT_CT_T, 0.0);
  }
  /// Covariance Matrix component
  double CN_R() const {
    return GetField<double>(VT_CN_R, 0.0);
  }
  /// Covariance Matrix component
  double CN_T() const {
    return GetField<double>(VT_CN_T, 0.0);
  }
  /// Covariance Matrix component
  double CN_N() const {
    return GetField<double>(VT_CN_N, 0.0);
  }
  /// Covariance Matrix component
  double CRDOT_R() const {
    return GetField<double>(VT_CRDOT_R, 0.0);
  }
  /// Covariance Matrix component
  double CRDOT_T() const {
    return GetField<double>(VT_CRDOT_T, 0.0);
  }
  /// Covariance Matrix component
  double CRDOT_N() const {
    return GetField<double>(VT_CRDOT_N, 0.0);
  }
  /// Covariance Matrix component
  double CRDOT_RDOT() const {
    return GetField<double>(VT_CRDOT_RDOT, 0.0);
  }
  /// Covariance Matrix component
  double CTDOT_R() const {
    return GetField<double>(VT_CTDOT_R, 0.0);
  }
  /// Covariance Matrix component
  double CTDOT_T() const {
    return GetField<double>(VT_CTDOT_T, 0.0);
  }
  /// Covariance Matrix component
  double CTDOT_N() const {
    return GetField<double>(VT_CTDOT_N, 0.0);
  }
  /// Covariance Matrix component
  double CTDOT_RDOT() const {
    return GetField<double>(VT_CTDOT_RDOT, 0.0);
  }
  /// Covariance Matrix component
  double CTDOT_TDOT() const {
    return GetField<double>(VT_CTDOT_TDOT, 0.0);
  }
  /// Covariance Matrix component
  double CNDOT_R() const {
    return GetField<double>(VT_CNDOT_R, 0.0);
  }
  /// Covariance Matrix component
  double CNDOT_T() const {
    return GetField<double>(VT_CNDOT_T, 0.0);
  }
  /// Covariance Matrix component
  double CNDOT_N() const {
    return GetField<double>(VT_CNDOT_N, 0.0);
  }
  /// Covariance Matrix component
  double CNDOT_RDOT() const {
    return GetField<double>(VT_CNDOT_RDOT, 0.0);
  }
  /// Covariance Matrix component
  double CNDOT_TDOT() const {
    return GetField<double>(VT_CNDOT_TDOT, 0.0);
  }
  /// Covariance Matrix component
  double CNDOT_NDOT() const {
    return GetField<double>(VT_CNDOT_NDOT, 0.0);
  }
  /// Covariance Matrix component
  double CDRG_R() const {
    return GetField<double>(VT_CDRG_R, 0.0);
  }
  /// Covariance Matrix component
  double CDRG_T() const {
    return GetField<double>(VT_CDRG_T, 0.0);
  }
  /// Covariance Matrix component
  double CDRG_N() const {
    return GetField<double>(VT_CDRG_N, 0.0);
  }
  /// Covariance Matrix component
  double CDRG_RDOT() const {
    return GetField<double>(VT_CDRG_RDOT, 0.0);
  }
  /// Covariance Matrix component
  double CDRG_TDOT() const {
    return GetField<double>(VT_CDRG_TDOT, 0.0);
  }
  /// Covariance Matrix component
  double CDRG_NDOT() const {
    return GetField<double>(VT_CDRG_NDOT, 0.0);
  }
  /// Covariance Matrix component
  double CDRG_DRG() const {
    return GetField<double>(VT_CDRG_DRG, 0.0);
  }
  /// Covariance Matrix component
  double CSRP_R() const {
    return GetField<double>(VT_CSRP_R, 0.0);
  }
  /// Covariance Matrix component
  double CSRP_T() const {
    return GetField<double>(VT_CSRP_T, 0.0);
  }
  /// Covariance Matrix component
  double CSRP_N() const {
    return GetField<double>(VT_CSRP_N, 0.0);
  }
  /// Covariance Matrix component
  double CSRP_RDOT() const {
    return GetField<double>(VT_CSRP_RDOT, 0.0);
  }
  /// Covariance Matrix component
  double CSRP_TDOT() const {
    return GetField<double>(VT_CSRP_TDOT, 0.0);
  }
  /// Covariance Matrix component
  double CSRP_NDOT() const {
    return GetField<double>(VT_CSRP_NDOT, 0.0);
  }
  /// Covariance Matrix component
  double CSRP_DRG() const {
    return GetField<double>(VT_CSRP_DRG, 0.0);
  }
  /// Covariance Matrix component
  double CSRP_SRP() const {
    return GetField<double>(VT_CSRP_SRP, 0.0);
  }
  /// Covariance Matrix component
  double CTHR_R() const {
    return GetField<double>(VT_CTHR_R, 0.0);
  }
  /// Covariance Matrix component
  double CTHR_T() const {
    return GetField<double>(VT_CTHR_T, 0.0);
  }
  /// Covariance Matrix component
  double CTHR_N() const {
    return GetField<double>(VT_CTHR_N, 0.0);
  }
  /// Covariance Matrix component
  double CTHR_RDOT() const {
    return GetField<double>(VT_CTHR_RDOT, 0.0);
  }
  /// Covariance Matrix component
  double CTHR_TDOT() const {
    return GetField<double>(VT_CTHR_TDOT, 0.0);
  }
  /// Covariance Matrix component
  double CTHR_NDOT() const {
    return GetField<double>(VT_CTHR_NDOT, 0.0);
  }
  /// Covariance Matrix component
  double CTHR_DRG() const {
    return GetField<double>(VT_CTHR_DRG, 0.0);
  }
  /// Covariance Matrix component
  double CTHR_SRP() const {
    return GetField<double>(VT_CTHR_SRP, 0.0);
  }
  /// Covariance Matrix component
  double CTHR_THR() const {
    return GetField<double>(VT_CTHR_THR, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_COMMENT) &&
           verifier.VerifyString(COMMENT()) &&
           VerifyOffset(verifier, VT_OBJECT) &&
           verifier.VerifyTable(OBJECT()) &&
           VerifyOffset(verifier, VT_POC) &&
           verifier.VerifyTable(POC()) &&
           VerifyOffset(verifier, VT_OPERATOR_CONTACT_POSITION) &&
           verifier.VerifyString(OPERATOR_CONTACT_POSITION()) &&
           VerifyOffset(verifier, VT_OPERATOR_ORGANIZATION) &&
           verifier.VerifyString(OPERATOR_ORGANIZATION()) &&
           VerifyOffset(verifier, VT_EPHEMERIS_NAME) &&
           verifier.VerifyString(EPHEMERIS_NAME()) &&
           VerifyField<int8_t>(verifier, VT_COVARIANCE_METHOD, 1) &&
           VerifyField<int8_t>(verifier, VT_REF_FRAME, 1) &&
           VerifyOffset(verifier, VT_GRAVITY_MODEL) &&
           verifier.VerifyString(GRAVITY_MODEL()) &&
           VerifyOffset(verifier, VT_ATMOSPHERIC_MODEL) &&
           verifier.VerifyString(ATMOSPHERIC_MODEL()) &&
           VerifyOffset(verifier, VT_N_BODY_PERTURBATIONS) &&
           verifier.VerifyString(N_BODY_PERTURBATIONS()) &&
           VerifyField<uint8_t>(verifier, VT_SOLAR_RAD_PRESSURE, 1) &&
           VerifyField<uint8_t>(verifier, VT_EARTH_TIDES, 1) &&
           VerifyField<uint8_t>(verifier, VT_INTRACK_THRUST, 1) &&
           VerifyOffset(verifier, VT_TIME_LASTOB_START) &&
           verifier.VerifyString(TIME_LASTOB_START()) &&
           VerifyOffset(verifier, VT_TIME_LASTOB_END) &&
           verifier.VerifyString(TIME_LASTOB_END()) &&
           VerifyField<double>(verifier, VT_RECOMMENDED_OD_SPAN, 8) &&
           VerifyField<double>(verifier, VT_ACTUAL_OD_SPAN, 8) &&
           VerifyField<uint32_t>(verifier, VT_OBS_AVAILABLE, 4) &&
           VerifyField<uint32_t>(verifier, VT_OBS_USED, 4) &&
           VerifyField<uint32_t>(verifier, VT_TRACKS_AVAILABLE, 4) &&
           VerifyField<uint32_t>(verifier, VT_TRACKS_USED, 4) &&
           VerifyField<double>(verifier, VT_RESIDUALS_ACCEPTED, 8) &&
           VerifyField<double>(verifier, VT_WEIGHTED_RMS, 8) &&
           VerifyField<double>(verifier, VT_AREA_PC, 8) &&
           VerifyField<double>(verifier, VT_AREA_DRG, 8) &&
           VerifyField<double>(verifier, VT_AREA_SRP, 8) &&
           VerifyField<double>(verifier, VT_CR_AREA_OVER_MASS, 8) &&
           VerifyField<double>(verifier, VT_THRUST_ACCELERATION, 8) &&
           VerifyField<double>(verifier, VT_SEDR, 8) &&
           VerifyField<double>(verifier, VT_X, 8) &&
           VerifyField<double>(verifier, VT_Y, 8) &&
           VerifyField<double>(verifier, VT_Z, 8) &&
           VerifyField<double>(verifier, VT_X_DOT, 8) &&
           VerifyField<double>(verifier, VT_Y_DOT, 8) &&
           VerifyField<double>(verifier, VT_Z_DOT, 8) &&
           VerifyField<double>(verifier, VT_CR_R, 8) &&
           VerifyField<double>(verifier, VT_CT_R, 8) &&
           VerifyField<double>(verifier, VT_CT_T, 8) &&
           VerifyField<double>(verifier, VT_CN_R, 8) &&
           VerifyField<double>(verifier, VT_CN_T, 8) &&
           VerifyField<double>(verifier, VT_CN_N, 8) &&
           VerifyField<double>(verifier, VT_CRDOT_R, 8) &&
           VerifyField<double>(verifier, VT_CRDOT_T, 8) &&
           VerifyField<double>(verifier, VT_CRDOT_N, 8) &&
           VerifyField<double>(verifier, VT_CRDOT_RDOT, 8) &&
           VerifyField<double>(verifier, VT_CTDOT_R, 8) &&
           VerifyField<double>(verifier, VT_CTDOT_T, 8) &&
           VerifyField<double>(verifier, VT_CTDOT_N, 8) &&
           VerifyField<double>(verifier, VT_CTDOT_RDOT, 8) &&
           VerifyField<double>(verifier, VT_CTDOT_TDOT, 8) &&
           VerifyField<double>(verifier, VT_CNDOT_R, 8) &&
           VerifyField<double>(verifier, VT_CNDOT_T, 8) &&
           VerifyField<double>(verifier, VT_CNDOT_N, 8) &&
           VerifyField<double>(verifier, VT_CNDOT_RDOT, 8) &&
           VerifyField<double>(verifier, VT_CNDOT_TDOT, 8) &&
           VerifyField<double>(verifier, VT_CNDOT_NDOT, 8) &&
           VerifyField<double>(verifier, VT_CDRG_R, 8) &&
           VerifyField<double>(verifier, VT_CDRG_T, 8) &&
           VerifyField<double>(verifier, VT_CDRG_N, 8) &&
           VerifyField<double>(verifier, VT_CDRG_RDOT, 8) &&
           VerifyField<double>(verifier, VT_CDRG_TDOT, 8) &&
           VerifyField<double>(verifier, VT_CDRG_NDOT, 8) &&
           VerifyField<double>(verifier, VT_CDRG_DRG, 8) &&
           VerifyField<double>(verifier, VT_CSRP_R, 8) &&
           VerifyField<double>(verifier, VT_CSRP_T, 8) &&
           VerifyField<double>(verifier, VT_CSRP_N, 8) &&
           VerifyField<double>(verifier, VT_CSRP_RDOT, 8) &&
           VerifyField<double>(verifier, VT_CSRP_TDOT, 8) &&
           VerifyField<double>(verifier, VT_CSRP_NDOT, 8) &&
           VerifyField<double>(verifier, VT_CSRP_DRG, 8) &&
           VerifyField<double>(verifier, VT_CSRP_SRP, 8) &&
           VerifyField<double>(verifier, VT_CTHR_R, 8) &&
           VerifyField<double>(verifier, VT_CTHR_T, 8) &&
           VerifyField<double>(verifier, VT_CTHR_N, 8) &&
           VerifyField<double>(verifier, VT_CTHR_RDOT, 8) &&
           VerifyField<double>(verifier, VT_CTHR_TDOT, 8) &&
           VerifyField<double>(verifier, VT_CTHR_NDOT, 8) &&
           VerifyField<double>(verifier, VT_CTHR_DRG, 8) &&
           VerifyField<double>(verifier, VT_CTHR_SRP, 8) &&
           VerifyField<double>(verifier, VT_CTHR_THR, 8) &&
           verifier.EndTable();
  }
};

struct CDMObjectBuilder {
  typedef CDMObject Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_COMMENT(::flatbuffers::Offset<::flatbuffers::String> COMMENT) {
    fbb_.AddOffset(CDMObject::VT_COMMENT, COMMENT);
  }
  void add_OBJECT(::flatbuffers::Offset<CAT> OBJECT) {
    fbb_.AddOffset(CDMObject::VT_OBJECT, OBJECT);
  }
  void add_POC(::flatbuffers::Offset<EPM> POC) {
    fbb_.AddOffset(CDMObject::VT_POC, POC);
  }
  void add_OPERATOR_CONTACT_POSITION(::flatbuffers::Offset<::flatbuffers::String> OPERATOR_CONTACT_POSITION) {
    fbb_.AddOffset(CDMObject::VT_OPERATOR_CONTACT_POSITION, OPERATOR_CONTACT_POSITION);
  }
  void add_OPERATOR_ORGANIZATION(::flatbuffers::Offset<::flatbuffers::String> OPERATOR_ORGANIZATION) {
    fbb_.AddOffset(CDMObject::VT_OPERATOR_ORGANIZATION, OPERATOR_ORGANIZATION);
  }
  void add_EPHEMERIS_NAME(::flatbuffers::Offset<::flatbuffers::String> EPHEMERIS_NAME) {
    fbb_.AddOffset(CDMObject::VT_EPHEMERIS_NAME, EPHEMERIS_NAME);
  }
  void add_COVARIANCE_METHOD(covarianceMethod COVARIANCE_METHOD) {
    fbb_.AddElement<int8_t>(CDMObject::VT_COVARIANCE_METHOD, static_cast<int8_t>(COVARIANCE_METHOD), 0);
  }
  void add_REF_FRAME(referenceFrame REF_FRAME) {
    fbb_.AddElement<int8_t>(CDMObject::VT_REF_FRAME, static_cast<int8_t>(REF_FRAME), 0);
  }
  void add_GRAVITY_MODEL(::flatbuffers::Offset<::flatbuffers::String> GRAVITY_MODEL) {
    fbb_.AddOffset(CDMObject::VT_GRAVITY_MODEL, GRAVITY_MODEL);
  }
  void add_ATMOSPHERIC_MODEL(::flatbuffers::Offset<::flatbuffers::String> ATMOSPHERIC_MODEL) {
    fbb_.AddOffset(CDMObject::VT_ATMOSPHERIC_MODEL, ATMOSPHERIC_MODEL);
  }
  void add_N_BODY_PERTURBATIONS(::flatbuffers::Offset<::flatbuffers::String> N_BODY_PERTURBATIONS) {
    fbb_.AddOffset(CDMObject::VT_N_BODY_PERTURBATIONS, N_BODY_PERTURBATIONS);
  }
  void add_SOLAR_RAD_PRESSURE(bool SOLAR_RAD_PRESSURE) {
    fbb_.AddElement<uint8_t>(CDMObject::VT_SOLAR_RAD_PRESSURE, static_cast<uint8_t>(SOLAR_RAD_PRESSURE), 0);
  }
  void add_EARTH_TIDES(bool EARTH_TIDES) {
    fbb_.AddElement<uint8_t>(CDMObject::VT_EARTH_TIDES, static_cast<uint8_t>(EARTH_TIDES), 0);
  }
  void add_INTRACK_THRUST(bool INTRACK_THRUST) {
    fbb_.AddElement<uint8_t>(CDMObject::VT_INTRACK_THRUST, static_cast<uint8_t>(INTRACK_THRUST), 0);
  }
  void add_TIME_LASTOB_START(::flatbuffers::Offset<::flatbuffers::String> TIME_LASTOB_START) {
    fbb_.AddOffset(CDMObject::VT_TIME_LASTOB_START, TIME_LASTOB_START);
  }
  void add_TIME_LASTOB_END(::flatbuffers::Offset<::flatbuffers::String> TIME_LASTOB_END) {
    fbb_.AddOffset(CDMObject::VT_TIME_LASTOB_END, TIME_LASTOB_END);
  }
  void add_RECOMMENDED_OD_SPAN(double RECOMMENDED_OD_SPAN) {
    fbb_.AddElement<double>(CDMObject::VT_RECOMMENDED_OD_SPAN, RECOMMENDED_OD_SPAN, 0.0);
  }
  void add_ACTUAL_OD_SPAN(double ACTUAL_OD_SPAN) {
    fbb_.AddElement<double>(CDMObject::VT_ACTUAL_OD_SPAN, ACTUAL_OD_SPAN, 0.0);
  }
  void add_OBS_AVAILABLE(uint32_t OBS_AVAILABLE) {
    fbb_.AddElement<uint32_t>(CDMObject::VT_OBS_AVAILABLE, OBS_AVAILABLE, 0);
  }
  void add_OBS_USED(uint32_t OBS_USED) {
    fbb_.AddElement<uint32_t>(CDMObject::VT_OBS_USED, OBS_USED, 0);
  }
  void add_TRACKS_AVAILABLE(uint32_t TRACKS_AVAILABLE) {
    fbb_.AddElement<uint32_t>(CDMObject::VT_TRACKS_AVAILABLE, TRACKS_AVAILABLE, 0);
  }
  void add_TRACKS_USED(uint32_t TRACKS_USED) {
    fbb_.AddElement<uint32_t>(CDMObject::VT_TRACKS_USED, TRACKS_USED, 0);
  }
  void add_RESIDUALS_ACCEPTED(double RESIDUALS_ACCEPTED) {
    fbb_.AddElement<double>(CDMObject::VT_RESIDUALS_ACCEPTED, RESIDUALS_ACCEPTED, 0.0);
  }
  void add_WEIGHTED_RMS(double WEIGHTED_RMS) {
    fbb_.AddElement<double>(CDMObject::VT_WEIGHTED_RMS, WEIGHTED_RMS, 0.0);
  }
  void add_AREA_PC(double AREA_PC) {
    fbb_.AddElement<double>(CDMObject::VT_AREA_PC, AREA_PC, 0.0);
  }
  void add_AREA_DRG(double AREA_DRG) {
    fbb_.AddElement<double>(CDMObject::VT_AREA_DRG, AREA_DRG, 0.0);
  }
  void add_AREA_SRP(double AREA_SRP) {
    fbb_.AddElement<double>(CDMObject::VT_AREA_SRP, AREA_SRP, 0.0);
  }
  void add_CR_AREA_OVER_MASS(double CR_AREA_OVER_MASS) {
    fbb_.AddElement<double>(CDMObject::VT_CR_AREA_OVER_MASS, CR_AREA_OVER_MASS, 0.0);
  }
  void add_THRUST_ACCELERATION(double THRUST_ACCELERATION) {
    fbb_.AddElement<double>(CDMObject::VT_THRUST_ACCELERATION, THRUST_ACCELERATION, 0.0);
  }
  void add_SEDR(double SEDR) {
    fbb_.AddElement<double>(CDMObject::VT_SEDR, SEDR, 0.0);
  }
  void add_X(double X) {
    fbb_.AddElement<double>(CDMObject::VT_X, X, 0.0);
  }
  void add_Y(double Y) {
    fbb_.AddElement<double>(CDMObject::VT_Y, Y, 0.0);
  }
  void add_Z(double Z) {
    fbb_.AddElement<double>(CDMObject::VT_Z, Z, 0.0);
  }
  void add_X_DOT(double X_DOT) {
    fbb_.AddElement<double>(CDMObject::VT_X_DOT, X_DOT, 0.0);
  }
  void add_Y_DOT(double Y_DOT) {
    fbb_.AddElement<double>(CDMObject::VT_Y_DOT, Y_DOT, 0.0);
  }
  void add_Z_DOT(double Z_DOT) {
    fbb_.AddElement<double>(CDMObject::VT_Z_DOT, Z_DOT, 0.0);
  }
  void add_CR_R(double CR_R) {
    fbb_.AddElement<double>(CDMObject::VT_CR_R, CR_R, 0.0);
  }
  void add_CT_R(double CT_R) {
    fbb_.AddElement<double>(CDMObject::VT_CT_R, CT_R, 0.0);
  }
  void add_CT_T(double CT_T) {
    fbb_.AddElement<double>(CDMObject::VT_CT_T, CT_T, 0.0);
  }
  void add_CN_R(double CN_R) {
    fbb_.AddElement<double>(CDMObject::VT_CN_R, CN_R, 0.0);
  }
  void add_CN_T(double CN_T) {
    fbb_.AddElement<double>(CDMObject::VT_CN_T, CN_T, 0.0);
  }
  void add_CN_N(double CN_N) {
    fbb_.AddElement<double>(CDMObject::VT_CN_N, CN_N, 0.0);
  }
  void add_CRDOT_R(double CRDOT_R) {
    fbb_.AddElement<double>(CDMObject::VT_CRDOT_R, CRDOT_R, 0.0);
  }
  void add_CRDOT_T(double CRDOT_T) {
    fbb_.AddElement<double>(CDMObject::VT_CRDOT_T, CRDOT_T, 0.0);
  }
  void add_CRDOT_N(double CRDOT_N) {
    fbb_.AddElement<double>(CDMObject::VT_CRDOT_N, CRDOT_N, 0.0);
  }
  void add_CRDOT_RDOT(double CRDOT_RDOT) {
    fbb_.AddElement<double>(CDMObject::VT_CRDOT_RDOT, CRDOT_RDOT, 0.0);
  }
  void add_CTDOT_R(double CTDOT_R) {
    fbb_.AddElement<double>(CDMObject::VT_CTDOT_R, CTDOT_R, 0.0);
  }
  void add_CTDOT_T(double CTDOT_T) {
    fbb_.AddElement<double>(CDMObject::VT_CTDOT_T, CTDOT_T, 0.0);
  }
  void add_CTDOT_N(double CTDOT_N) {
    fbb_.AddElement<double>(CDMObject::VT_CTDOT_N, CTDOT_N, 0.0);
  }
  void add_CTDOT_RDOT(double CTDOT_RDOT) {
    fbb_.AddElement<double>(CDMObject::VT_CTDOT_RDOT, CTDOT_RDOT, 0.0);
  }
  void add_CTDOT_TDOT(double CTDOT_TDOT) {
    fbb_.AddElement<double>(CDMObject::VT_CTDOT_TDOT, CTDOT_TDOT, 0.0);
  }
  void add_CNDOT_R(double CNDOT_R) {
    fbb_.AddElement<double>(CDMObject::VT_CNDOT_R, CNDOT_R, 0.0);
  }
  void add_CNDOT_T(double CNDOT_T) {
    fbb_.AddElement<double>(CDMObject::VT_CNDOT_T, CNDOT_T, 0.0);
  }
  void add_CNDOT_N(double CNDOT_N) {
    fbb_.AddElement<double>(CDMObject::VT_CNDOT_N, CNDOT_N, 0.0);
  }
  void add_CNDOT_RDOT(double CNDOT_RDOT) {
    fbb_.AddElement<double>(CDMObject::VT_CNDOT_RDOT, CNDOT_RDOT, 0.0);
  }
  void add_CNDOT_TDOT(double CNDOT_TDOT) {
    fbb_.AddElement<double>(CDMObject::VT_CNDOT_TDOT, CNDOT_TDOT, 0.0);
  }
  void add_CNDOT_NDOT(double CNDOT_NDOT) {
    fbb_.AddElement<double>(CDMObject::VT_CNDOT_NDOT, CNDOT_NDOT, 0.0);
  }
  void add_CDRG_R(double CDRG_R) {
    fbb_.AddElement<double>(CDMObject::VT_CDRG_R, CDRG_R, 0.0);
  }
  void add_CDRG_T(double CDRG_T) {
    fbb_.AddElement<double>(CDMObject::VT_CDRG_T, CDRG_T, 0.0);
  }
  void add_CDRG_N(double CDRG_N) {
    fbb_.AddElement<double>(CDMObject::VT_CDRG_N, CDRG_N, 0.0);
  }
  void add_CDRG_RDOT(double CDRG_RDOT) {
    fbb_.AddElement<double>(CDMObject::VT_CDRG_RDOT, CDRG_RDOT, 0.0);
  }
  void add_CDRG_TDOT(double CDRG_TDOT) {
    fbb_.AddElement<double>(CDMObject::VT_CDRG_TDOT, CDRG_TDOT, 0.0);
  }
  void add_CDRG_NDOT(double CDRG_NDOT) {
    fbb_.AddElement<double>(CDMObject::VT_CDRG_NDOT, CDRG_NDOT, 0.0);
  }
  void add_CDRG_DRG(double CDRG_DRG) {
    fbb_.AddElement<double>(CDMObject::VT_CDRG_DRG, CDRG_DRG, 0.0);
  }
  void add_CSRP_R(double CSRP_R) {
    fbb_.AddElement<double>(CDMObject::VT_CSRP_R, CSRP_R, 0.0);
  }
  void add_CSRP_T(double CSRP_T) {
    fbb_.AddElement<double>(CDMObject::VT_CSRP_T, CSRP_T, 0.0);
  }
  void add_CSRP_N(double CSRP_N) {
    fbb_.AddElement<double>(CDMObject::VT_CSRP_N, CSRP_N, 0.0);
  }
  void add_CSRP_RDOT(double CSRP_RDOT) {
    fbb_.AddElement<double>(CDMObject::VT_CSRP_RDOT, CSRP_RDOT, 0.0);
  }
  void add_CSRP_TDOT(double CSRP_TDOT) {
    fbb_.AddElement<double>(CDMObject::VT_CSRP_TDOT, CSRP_TDOT, 0.0);
  }
  void add_CSRP_NDOT(double CSRP_NDOT) {
    fbb_.AddElement<double>(CDMObject::VT_CSRP_NDOT, CSRP_NDOT, 0.0);
  }
  void add_CSRP_DRG(double CSRP_DRG) {
    fbb_.AddElement<double>(CDMObject::VT_CSRP_DRG, CSRP_DRG, 0.0);
  }
  void add_CSRP_SRP(double CSRP_SRP) {
    fbb_.AddElement<double>(CDMObject::VT_CSRP_SRP, CSRP_SRP, 0.0);
  }
  void add_CTHR_R(double CTHR_R) {
    fbb_.AddElement<double>(CDMObject::VT_CTHR_R, CTHR_R, 0.0);
  }
  void add_CTHR_T(double CTHR_T) {
    fbb_.AddElement<double>(CDMObject::VT_CTHR_T, CTHR_T, 0.0);
  }
  void add_CTHR_N(double CTHR_N) {
    fbb_.AddElement<double>(CDMObject::VT_CTHR_N, CTHR_N, 0.0);
  }
  void add_CTHR_RDOT(double CTHR_RDOT) {
    fbb_.AddElement<double>(CDMObject::VT_CTHR_RDOT, CTHR_RDOT, 0.0);
  }
  void add_CTHR_TDOT(double CTHR_TDOT) {
    fbb_.AddElement<double>(CDMObject::VT_CTHR_TDOT, CTHR_TDOT, 0.0);
  }
  void add_CTHR_NDOT(double CTHR_NDOT) {
    fbb_.AddElement<double>(CDMObject::VT_CTHR_NDOT, CTHR_NDOT, 0.0);
  }
  void add_CTHR_DRG(double CTHR_DRG) {
    fbb_.AddElement<double>(CDMObject::VT_CTHR_DRG, CTHR_DRG, 0.0);
  }
  void add_CTHR_SRP(double CTHR_SRP) {
    fbb_.AddElement<double>(CDMObject::VT_CTHR_SRP, CTHR_SRP, 0.0);
  }
  void add_CTHR_THR(double CTHR_THR) {
    fbb_.AddElement<double>(CDMObject::VT_CTHR_THR, CTHR_THR, 0.0);
  }
  explicit CDMObjectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CDMObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CDMObject>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CDMObject> CreateCDMObject(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> COMMENT = 0,
    ::flatbuffers::Offset<CAT> OBJECT = 0,
    ::flatbuffers::Offset<EPM> POC = 0,
    ::flatbuffers::Offset<::flatbuffers::String> OPERATOR_CONTACT_POSITION = 0,
    ::flatbuffers::Offset<::flatbuffers::String> OPERATOR_ORGANIZATION = 0,
    ::flatbuffers::Offset<::flatbuffers::String> EPHEMERIS_NAME = 0,
    covarianceMethod COVARIANCE_METHOD = covarianceMethod_CALCULATED,
    referenceFrame REF_FRAME = referenceFrame_ECEF,
    ::flatbuffers::Offset<::flatbuffers::String> GRAVITY_MODEL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ATMOSPHERIC_MODEL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> N_BODY_PERTURBATIONS = 0,
    bool SOLAR_RAD_PRESSURE = false,
    bool EARTH_TIDES = false,
    bool INTRACK_THRUST = false,
    ::flatbuffers::Offset<::flatbuffers::String> TIME_LASTOB_START = 0,
    ::flatbuffers::Offset<::flatbuffers::String> TIME_LASTOB_END = 0,
    double RECOMMENDED_OD_SPAN = 0.0,
    double ACTUAL_OD_SPAN = 0.0,
    uint32_t OBS_AVAILABLE = 0,
    uint32_t OBS_USED = 0,
    uint32_t TRACKS_AVAILABLE = 0,
    uint32_t TRACKS_USED = 0,
    double RESIDUALS_ACCEPTED = 0.0,
    double WEIGHTED_RMS = 0.0,
    double AREA_PC = 0.0,
    double AREA_DRG = 0.0,
    double AREA_SRP = 0.0,
    double CR_AREA_OVER_MASS = 0.0,
    double THRUST_ACCELERATION = 0.0,
    double SEDR = 0.0,
    double X = 0.0,
    double Y = 0.0,
    double Z = 0.0,
    double X_DOT = 0.0,
    double Y_DOT = 0.0,
    double Z_DOT = 0.0,
    double CR_R = 0.0,
    double CT_R = 0.0,
    double CT_T = 0.0,
    double CN_R = 0.0,
    double CN_T = 0.0,
    double CN_N = 0.0,
    double CRDOT_R = 0.0,
    double CRDOT_T = 0.0,
    double CRDOT_N = 0.0,
    double CRDOT_RDOT = 0.0,
    double CTDOT_R = 0.0,
    double CTDOT_T = 0.0,
    double CTDOT_N = 0.0,
    double CTDOT_RDOT = 0.0,
    double CTDOT_TDOT = 0.0,
    double CNDOT_R = 0.0,
    double CNDOT_T = 0.0,
    double CNDOT_N = 0.0,
    double CNDOT_RDOT = 0.0,
    double CNDOT_TDOT = 0.0,
    double CNDOT_NDOT = 0.0,
    double CDRG_R = 0.0,
    double CDRG_T = 0.0,
    double CDRG_N = 0.0,
    double CDRG_RDOT = 0.0,
    double CDRG_TDOT = 0.0,
    double CDRG_NDOT = 0.0,
    double CDRG_DRG = 0.0,
    double CSRP_R = 0.0,
    double CSRP_T = 0.0,
    double CSRP_N = 0.0,
    double CSRP_RDOT = 0.0,
    double CSRP_TDOT = 0.0,
    double CSRP_NDOT = 0.0,
    double CSRP_DRG = 0.0,
    double CSRP_SRP = 0.0,
    double CTHR_R = 0.0,
    double CTHR_T = 0.0,
    double CTHR_N = 0.0,
    double CTHR_RDOT = 0.0,
    double CTHR_TDOT = 0.0,
    double CTHR_NDOT = 0.0,
    double CTHR_DRG = 0.0,
    double CTHR_SRP = 0.0,
    double CTHR_THR = 0.0) {
  CDMObjectBuilder builder_(_fbb);
  builder_.add_CTHR_THR(CTHR_THR);
  builder_.add_CTHR_SRP(CTHR_SRP);
  builder_.add_CTHR_DRG(CTHR_DRG);
  builder_.add_CTHR_NDOT(CTHR_NDOT);
  builder_.add_CTHR_TDOT(CTHR_TDOT);
  builder_.add_CTHR_RDOT(CTHR_RDOT);
  builder_.add_CTHR_N(CTHR_N);
  builder_.add_CTHR_T(CTHR_T);
  builder_.add_CTHR_R(CTHR_R);
  builder_.add_CSRP_SRP(CSRP_SRP);
  builder_.add_CSRP_DRG(CSRP_DRG);
  builder_.add_CSRP_NDOT(CSRP_NDOT);
  builder_.add_CSRP_TDOT(CSRP_TDOT);
  builder_.add_CSRP_RDOT(CSRP_RDOT);
  builder_.add_CSRP_N(CSRP_N);
  builder_.add_CSRP_T(CSRP_T);
  builder_.add_CSRP_R(CSRP_R);
  builder_.add_CDRG_DRG(CDRG_DRG);
  builder_.add_CDRG_NDOT(CDRG_NDOT);
  builder_.add_CDRG_TDOT(CDRG_TDOT);
  builder_.add_CDRG_RDOT(CDRG_RDOT);
  builder_.add_CDRG_N(CDRG_N);
  builder_.add_CDRG_T(CDRG_T);
  builder_.add_CDRG_R(CDRG_R);
  builder_.add_CNDOT_NDOT(CNDOT_NDOT);
  builder_.add_CNDOT_TDOT(CNDOT_TDOT);
  builder_.add_CNDOT_RDOT(CNDOT_RDOT);
  builder_.add_CNDOT_N(CNDOT_N);
  builder_.add_CNDOT_T(CNDOT_T);
  builder_.add_CNDOT_R(CNDOT_R);
  builder_.add_CTDOT_TDOT(CTDOT_TDOT);
  builder_.add_CTDOT_RDOT(CTDOT_RDOT);
  builder_.add_CTDOT_N(CTDOT_N);
  builder_.add_CTDOT_T(CTDOT_T);
  builder_.add_CTDOT_R(CTDOT_R);
  builder_.add_CRDOT_RDOT(CRDOT_RDOT);
  builder_.add_CRDOT_N(CRDOT_N);
  builder_.add_CRDOT_T(CRDOT_T);
  builder_.add_CRDOT_R(CRDOT_R);
  builder_.add_CN_N(CN_N);
  builder_.add_CN_T(CN_T);
  builder_.add_CN_R(CN_R);
  builder_.add_CT_T(CT_T);
  builder_.add_CT_R(CT_R);
  builder_.add_CR_R(CR_R);
  builder_.add_Z_DOT(Z_DOT);
  builder_.add_Y_DOT(Y_DOT);
  builder_.add_X_DOT(X_DOT);
  builder_.add_Z(Z);
  builder_.add_Y(Y);
  builder_.add_X(X);
  builder_.add_SEDR(SEDR);
  builder_.add_THRUST_ACCELERATION(THRUST_ACCELERATION);
  builder_.add_CR_AREA_OVER_MASS(CR_AREA_OVER_MASS);
  builder_.add_AREA_SRP(AREA_SRP);
  builder_.add_AREA_DRG(AREA_DRG);
  builder_.add_AREA_PC(AREA_PC);
  builder_.add_WEIGHTED_RMS(WEIGHTED_RMS);
  builder_.add_RESIDUALS_ACCEPTED(RESIDUALS_ACCEPTED);
  builder_.add_ACTUAL_OD_SPAN(ACTUAL_OD_SPAN);
  builder_.add_RECOMMENDED_OD_SPAN(RECOMMENDED_OD_SPAN);
  builder_.add_TRACKS_USED(TRACKS_USED);
  builder_.add_TRACKS_AVAILABLE(TRACKS_AVAILABLE);
  builder_.add_OBS_USED(OBS_USED);
  builder_.add_OBS_AVAILABLE(OBS_AVAILABLE);
  builder_.add_TIME_LASTOB_END(TIME_LASTOB_END);
  builder_.add_TIME_LASTOB_START(TIME_LASTOB_START);
  builder_.add_N_BODY_PERTURBATIONS(N_BODY_PERTURBATIONS);
  builder_.add_ATMOSPHERIC_MODEL(ATMOSPHERIC_MODEL);
  builder_.add_GRAVITY_MODEL(GRAVITY_MODEL);
  builder_.add_EPHEMERIS_NAME(EPHEMERIS_NAME);
  builder_.add_OPERATOR_ORGANIZATION(OPERATOR_ORGANIZATION);
  builder_.add_OPERATOR_CONTACT_POSITION(OPERATOR_CONTACT_POSITION);
  builder_.add_POC(POC);
  builder_.add_OBJECT(OBJECT);
  builder_.add_COMMENT(COMMENT);
  builder_.add_INTRACK_THRUST(INTRACK_THRUST);
  builder_.add_EARTH_TIDES(EARTH_TIDES);
  builder_.add_SOLAR_RAD_PRESSURE(SOLAR_RAD_PRESSURE);
  builder_.add_REF_FRAME(REF_FRAME);
  builder_.add_COVARIANCE_METHOD(COVARIANCE_METHOD);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CDMObject> CreateCDMObjectDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *COMMENT = nullptr,
    ::flatbuffers::Offset<CAT> OBJECT = 0,
    ::flatbuffers::Offset<EPM> POC = 0,
    const char *OPERATOR_CONTACT_POSITION = nullptr,
    const char *OPERATOR_ORGANIZATION = nullptr,
    const char *EPHEMERIS_NAME = nullptr,
    covarianceMethod COVARIANCE_METHOD = covarianceMethod_CALCULATED,
    referenceFrame REF_FRAME = referenceFrame_ECEF,
    const char *GRAVITY_MODEL = nullptr,
    const char *ATMOSPHERIC_MODEL = nullptr,
    const char *N_BODY_PERTURBATIONS = nullptr,
    bool SOLAR_RAD_PRESSURE = false,
    bool EARTH_TIDES = false,
    bool INTRACK_THRUST = false,
    const char *TIME_LASTOB_START = nullptr,
    const char *TIME_LASTOB_END = nullptr,
    double RECOMMENDED_OD_SPAN = 0.0,
    double ACTUAL_OD_SPAN = 0.0,
    uint32_t OBS_AVAILABLE = 0,
    uint32_t OBS_USED = 0,
    uint32_t TRACKS_AVAILABLE = 0,
    uint32_t TRACKS_USED = 0,
    double RESIDUALS_ACCEPTED = 0.0,
    double WEIGHTED_RMS = 0.0,
    double AREA_PC = 0.0,
    double AREA_DRG = 0.0,
    double AREA_SRP = 0.0,
    double CR_AREA_OVER_MASS = 0.0,
    double THRUST_ACCELERATION = 0.0,
    double SEDR = 0.0,
    double X = 0.0,
    double Y = 0.0,
    double Z = 0.0,
    double X_DOT = 0.0,
    double Y_DOT = 0.0,
    double Z_DOT = 0.0,
    double CR_R = 0.0,
    double CT_R = 0.0,
    double CT_T = 0.0,
    double CN_R = 0.0,
    double CN_T = 0.0,
    double CN_N = 0.0,
    double CRDOT_R = 0.0,
    double CRDOT_T = 0.0,
    double CRDOT_N = 0.0,
    double CRDOT_RDOT = 0.0,
    double CTDOT_R = 0.0,
    double CTDOT_T = 0.0,
    double CTDOT_N = 0.0,
    double CTDOT_RDOT = 0.0,
    double CTDOT_TDOT = 0.0,
    double CNDOT_R = 0.0,
    double CNDOT_T = 0.0,
    double CNDOT_N = 0.0,
    double CNDOT_RDOT = 0.0,
    double CNDOT_TDOT = 0.0,
    double CNDOT_NDOT = 0.0,
    double CDRG_R = 0.0,
    double CDRG_T = 0.0,
    double CDRG_N = 0.0,
    double CDRG_RDOT = 0.0,
    double CDRG_TDOT = 0.0,
    double CDRG_NDOT = 0.0,
    double CDRG_DRG = 0.0,
    double CSRP_R = 0.0,
    double CSRP_T = 0.0,
    double CSRP_N = 0.0,
    double CSRP_RDOT = 0.0,
    double CSRP_TDOT = 0.0,
    double CSRP_NDOT = 0.0,
    double CSRP_DRG = 0.0,
    double CSRP_SRP = 0.0,
    double CTHR_R = 0.0,
    double CTHR_T = 0.0,
    double CTHR_N = 0.0,
    double CTHR_RDOT = 0.0,
    double CTHR_TDOT = 0.0,
    double CTHR_NDOT = 0.0,
    double CTHR_DRG = 0.0,
    double CTHR_SRP = 0.0,
    double CTHR_THR = 0.0) {
  auto COMMENT__ = COMMENT ? _fbb.CreateString(COMMENT) : 0;
  auto OPERATOR_CONTACT_POSITION__ = OPERATOR_CONTACT_POSITION ? _fbb.CreateString(OPERATOR_CONTACT_POSITION) : 0;
  auto OPERATOR_ORGANIZATION__ = OPERATOR_ORGANIZATION ? _fbb.CreateString(OPERATOR_ORGANIZATION) : 0;
  auto EPHEMERIS_NAME__ = EPHEMERIS_NAME ? _fbb.CreateString(EPHEMERIS_NAME) : 0;
  auto GRAVITY_MODEL__ = GRAVITY_MODEL ? _fbb.CreateString(GRAVITY_MODEL) : 0;
  auto ATMOSPHERIC_MODEL__ = ATMOSPHERIC_MODEL ? _fbb.CreateString(ATMOSPHERIC_MODEL) : 0;
  auto N_BODY_PERTURBATIONS__ = N_BODY_PERTURBATIONS ? _fbb.CreateString(N_BODY_PERTURBATIONS) : 0;
  auto TIME_LASTOB_START__ = TIME_LASTOB_START ? _fbb.CreateString(TIME_LASTOB_START) : 0;
  auto TIME_LASTOB_END__ = TIME_LASTOB_END ? _fbb.CreateString(TIME_LASTOB_END) : 0;
  return CreateCDMObject(
      _fbb,
      COMMENT__,
      OBJECT,
      POC,
      OPERATOR_CONTACT_POSITION__,
      OPERATOR_ORGANIZATION__,
      EPHEMERIS_NAME__,
      COVARIANCE_METHOD,
      REF_FRAME,
      GRAVITY_MODEL__,
      ATMOSPHERIC_MODEL__,
      N_BODY_PERTURBATIONS__,
      SOLAR_RAD_PRESSURE,
      EARTH_TIDES,
      INTRACK_THRUST,
      TIME_LASTOB_START__,
      TIME_LASTOB_END__,
      RECOMMENDED_OD_SPAN,
      ACTUAL_OD_SPAN,
      OBS_AVAILABLE,
      OBS_USED,
      TRACKS_AVAILABLE,
      TRACKS_USED,
      RESIDUALS_ACCEPTED,
      WEIGHTED_RMS,
      AREA_PC,
      AREA_DRG,
      AREA_SRP,
      CR_AREA_OVER_MASS,
      THRUST_ACCELERATION,
      SEDR,
      X,
      Y,
      Z,
      X_DOT,
      Y_DOT,
      Z_DOT,
      CR_R,
      CT_R,
      CT_T,
      CN_R,
      CN_T,
      CN_N,
      CRDOT_R,
      CRDOT_T,
      CRDOT_N,
      CRDOT_RDOT,
      CTDOT_R,
      CTDOT_T,
      CTDOT_N,
      CTDOT_RDOT,
      CTDOT_TDOT,
      CNDOT_R,
      CNDOT_T,
      CNDOT_N,
      CNDOT_RDOT,
      CNDOT_TDOT,
      CNDOT_NDOT,
      CDRG_R,
      CDRG_T,
      CDRG_N,
      CDRG_RDOT,
      CDRG_TDOT,
      CDRG_NDOT,
      CDRG_DRG,
      CSRP_R,
      CSRP_T,
      CSRP_N,
      CSRP_RDOT,
      CSRP_TDOT,
      CSRP_NDOT,
      CSRP_DRG,
      CSRP_SRP,
      CTHR_R,
      CTHR_T,
      CTHR_N,
      CTHR_RDOT,
      CTHR_TDOT,
      CTHR_NDOT,
      CTHR_DRG,
      CTHR_SRP,
      CTHR_THR);
}

/// Conjunction Data Message
struct CDM FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CDMBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CCSDS_CDM_VERS = 4,
    VT_CREATION_DATE = 6,
    VT_ORIGINATOR = 8,
    VT_MESSAGE_FOR = 10,
    VT_MESSAGE_ID = 12,
    VT_TCA = 14,
    VT_MISS_DISTANCE = 16,
    VT_RELATIVE_SPEED = 18,
    VT_RELATIVE_POSITION_R = 20,
    VT_RELATIVE_POSITION_T = 22,
    VT_RELATIVE_POSITION_N = 24,
    VT_RELATIVE_VELOCITY_R = 26,
    VT_RELATIVE_VELOCITY_T = 28,
    VT_RELATIVE_VELOCITY_N = 30,
    VT_START_SCREEN_PERIOD = 32,
    VT_STOP_SCREEN_PERIOD = 34,
    VT_SCREEN_VOLUME_FRAME = 36,
    VT_SCREEN_VOLUME_SHAPE = 38,
    VT_SCREEN_VOLUME_X = 40,
    VT_SCREEN_VOLUME_Y = 42,
    VT_SCREEN_VOLUME_Z = 44,
    VT_SCREEN_ENTRY_TIME = 46,
    VT_SCREEN_EXIT_TIME = 48,
    VT_COLLISION_PROBABILITY = 50,
    VT_COLLISION_PROBABILITY_METHOD = 52,
    VT_OBJECT1 = 54,
    VT_OBJECT2 = 56,
    VT_OBJECT1_DATASOURCE = 58,
    VT_OBJECT2_DATASOURCE = 60
  };
  /// The version of the CCSDS CDM standard used
  double CCSDS_CDM_VERS() const {
    return GetField<double>(VT_CCSDS_CDM_VERS, 0.0);
  }
  /// The date the CDM message was created
  const ::flatbuffers::String *CREATION_DATE() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATION_DATE);
  }
  /// The originator of the CDM message
  const ::flatbuffers::String *ORIGINATOR() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGINATOR);
  }
  /// The intended recipient of the CDM message
  const ::flatbuffers::String *MESSAGE_FOR() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE_FOR);
  }
  /// A unique identifier for the CDM message
  const ::flatbuffers::String *MESSAGE_ID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE_ID);
  }
  /// Time of closest approach
  const ::flatbuffers::String *TCA() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TCA);
  }
  /// The miss distance between the two objects
  double MISS_DISTANCE() const {
    return GetField<double>(VT_MISS_DISTANCE, 0.0);
  }
  /// The relative speed between the two objects
  double RELATIVE_SPEED() const {
    return GetField<double>(VT_RELATIVE_SPEED, 0.0);
  }
  /// The relative position R component
  double RELATIVE_POSITION_R() const {
    return GetField<double>(VT_RELATIVE_POSITION_R, 0.0);
  }
  /// The relative position T component
  double RELATIVE_POSITION_T() const {
    return GetField<double>(VT_RELATIVE_POSITION_T, 0.0);
  }
  /// The relative position N component
  double RELATIVE_POSITION_N() const {
    return GetField<double>(VT_RELATIVE_POSITION_N, 0.0);
  }
  /// The relative velocity R component
  double RELATIVE_VELOCITY_R() const {
    return GetField<double>(VT_RELATIVE_VELOCITY_R, 0.0);
  }
  /// The relative velocity T component
  double RELATIVE_VELOCITY_T() const {
    return GetField<double>(VT_RELATIVE_VELOCITY_T, 0.0);
  }
  /// The relative velocity N component
  double RELATIVE_VELOCITY_N() const {
    return GetField<double>(VT_RELATIVE_VELOCITY_N, 0.0);
  }
  /// The start time of the screening period
  const ::flatbuffers::String *START_SCREEN_PERIOD() const {
    return GetPointer<const ::flatbuffers::String *>(VT_START_SCREEN_PERIOD);
  }
  /// The end time of the screening period
  const ::flatbuffers::String *STOP_SCREEN_PERIOD() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STOP_SCREEN_PERIOD);
  }
  /// The reference frame for the screening volume
  referenceFrame SCREEN_VOLUME_FRAME() const {
    return static_cast<referenceFrame>(GetField<int8_t>(VT_SCREEN_VOLUME_FRAME, 0));
  }
  /// The shape of the screening volume
  screeningVolumeShape SCREEN_VOLUME_SHAPE() const {
    return static_cast<screeningVolumeShape>(GetField<int8_t>(VT_SCREEN_VOLUME_SHAPE, 0));
  }
  /// The X dimension of the screening volume
  double SCREEN_VOLUME_X() const {
    return GetField<double>(VT_SCREEN_VOLUME_X, 0.0);
  }
  /// The Y dimension of the screening volume
  double SCREEN_VOLUME_Y() const {
    return GetField<double>(VT_SCREEN_VOLUME_Y, 0.0);
  }
  /// The Z dimension of the screening volume
  double SCREEN_VOLUME_Z() const {
    return GetField<double>(VT_SCREEN_VOLUME_Z, 0.0);
  }
  /// The time the objects entered the screening volume
  const ::flatbuffers::String *SCREEN_ENTRY_TIME() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCREEN_ENTRY_TIME);
  }
  /// The time the objects exited the screening volume
  const ::flatbuffers::String *SCREEN_EXIT_TIME() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCREEN_EXIT_TIME);
  }
  /// The probability of collision between the two objects
  double COLLISION_PROBABILITY() const {
    return GetField<double>(VT_COLLISION_PROBABILITY, 0.0);
  }
  /// The method used to calculate the collision probability
  const ::flatbuffers::String *COLLISION_PROBABILITY_METHOD() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COLLISION_PROBABILITY_METHOD);
  }
  /// The first object in the CDM message
  const CDMObject *OBJECT1() const {
    return GetPointer<const CDMObject *>(VT_OBJECT1);
  }
  /// The second object in the CDM message
  const CDMObject *OBJECT2() const {
    return GetPointer<const CDMObject *>(VT_OBJECT2);
  }
  /// Data Source for the positional information for Object 1
  const PNM *OBJECT1_DATASOURCE() const {
    return GetPointer<const PNM *>(VT_OBJECT1_DATASOURCE);
  }
  /// Data Source for the positional information for Object 2
  const PNM *OBJECT2_DATASOURCE() const {
    return GetPointer<const PNM *>(VT_OBJECT2_DATASOURCE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_CCSDS_CDM_VERS, 8) &&
           VerifyOffset(verifier, VT_CREATION_DATE) &&
           verifier.VerifyString(CREATION_DATE()) &&
           VerifyOffset(verifier, VT_ORIGINATOR) &&
           verifier.VerifyString(ORIGINATOR()) &&
           VerifyOffset(verifier, VT_MESSAGE_FOR) &&
           verifier.VerifyString(MESSAGE_FOR()) &&
           VerifyOffset(verifier, VT_MESSAGE_ID) &&
           verifier.VerifyString(MESSAGE_ID()) &&
           VerifyOffset(verifier, VT_TCA) &&
           verifier.VerifyString(TCA()) &&
           VerifyField<double>(verifier, VT_MISS_DISTANCE, 8) &&
           VerifyField<double>(verifier, VT_RELATIVE_SPEED, 8) &&
           VerifyField<double>(verifier, VT_RELATIVE_POSITION_R, 8) &&
           VerifyField<double>(verifier, VT_RELATIVE_POSITION_T, 8) &&
           VerifyField<double>(verifier, VT_RELATIVE_POSITION_N, 8) &&
           VerifyField<double>(verifier, VT_RELATIVE_VELOCITY_R, 8) &&
           VerifyField<double>(verifier, VT_RELATIVE_VELOCITY_T, 8) &&
           VerifyField<double>(verifier, VT_RELATIVE_VELOCITY_N, 8) &&
           VerifyOffset(verifier, VT_START_SCREEN_PERIOD) &&
           verifier.VerifyString(START_SCREEN_PERIOD()) &&
           VerifyOffset(verifier, VT_STOP_SCREEN_PERIOD) &&
           verifier.VerifyString(STOP_SCREEN_PERIOD()) &&
           VerifyField<int8_t>(verifier, VT_SCREEN_VOLUME_FRAME, 1) &&
           VerifyField<int8_t>(verifier, VT_SCREEN_VOLUME_SHAPE, 1) &&
           VerifyField<double>(verifier, VT_SCREEN_VOLUME_X, 8) &&
           VerifyField<double>(verifier, VT_SCREEN_VOLUME_Y, 8) &&
           VerifyField<double>(verifier, VT_SCREEN_VOLUME_Z, 8) &&
           VerifyOffset(verifier, VT_SCREEN_ENTRY_TIME) &&
           verifier.VerifyString(SCREEN_ENTRY_TIME()) &&
           VerifyOffset(verifier, VT_SCREEN_EXIT_TIME) &&
           verifier.VerifyString(SCREEN_EXIT_TIME()) &&
           VerifyField<double>(verifier, VT_COLLISION_PROBABILITY, 8) &&
           VerifyOffset(verifier, VT_COLLISION_PROBABILITY_METHOD) &&
           verifier.VerifyString(COLLISION_PROBABILITY_METHOD()) &&
           VerifyOffset(verifier, VT_OBJECT1) &&
           verifier.VerifyTable(OBJECT1()) &&
           VerifyOffset(verifier, VT_OBJECT2) &&
           verifier.VerifyTable(OBJECT2()) &&
           VerifyOffset(verifier, VT_OBJECT1_DATASOURCE) &&
           verifier.VerifyTable(OBJECT1_DATASOURCE()) &&
           VerifyOffset(verifier, VT_OBJECT2_DATASOURCE) &&
           verifier.VerifyTable(OBJECT2_DATASOURCE()) &&
           verifier.EndTable();
  }
};

struct CDMBuilder {
  typedef CDM Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_CCSDS_CDM_VERS(double CCSDS_CDM_VERS) {
    fbb_.AddElement<double>(CDM::VT_CCSDS_CDM_VERS, CCSDS_CDM_VERS, 0.0);
  }
  void add_CREATION_DATE(::flatbuffers::Offset<::flatbuffers::String> CREATION_DATE) {
    fbb_.AddOffset(CDM::VT_CREATION_DATE, CREATION_DATE);
  }
  void add_ORIGINATOR(::flatbuffers::Offset<::flatbuffers::String> ORIGINATOR) {
    fbb_.AddOffset(CDM::VT_ORIGINATOR, ORIGINATOR);
  }
  void add_MESSAGE_FOR(::flatbuffers::Offset<::flatbuffers::String> MESSAGE_FOR) {
    fbb_.AddOffset(CDM::VT_MESSAGE_FOR, MESSAGE_FOR);
  }
  void add_MESSAGE_ID(::flatbuffers::Offset<::flatbuffers::String> MESSAGE_ID) {
    fbb_.AddOffset(CDM::VT_MESSAGE_ID, MESSAGE_ID);
  }
  void add_TCA(::flatbuffers::Offset<::flatbuffers::String> TCA) {
    fbb_.AddOffset(CDM::VT_TCA, TCA);
  }
  void add_MISS_DISTANCE(double MISS_DISTANCE) {
    fbb_.AddElement<double>(CDM::VT_MISS_DISTANCE, MISS_DISTANCE, 0.0);
  }
  void add_RELATIVE_SPEED(double RELATIVE_SPEED) {
    fbb_.AddElement<double>(CDM::VT_RELATIVE_SPEED, RELATIVE_SPEED, 0.0);
  }
  void add_RELATIVE_POSITION_R(double RELATIVE_POSITION_R) {
    fbb_.AddElement<double>(CDM::VT_RELATIVE_POSITION_R, RELATIVE_POSITION_R, 0.0);
  }
  void add_RELATIVE_POSITION_T(double RELATIVE_POSITION_T) {
    fbb_.AddElement<double>(CDM::VT_RELATIVE_POSITION_T, RELATIVE_POSITION_T, 0.0);
  }
  void add_RELATIVE_POSITION_N(double RELATIVE_POSITION_N) {
    fbb_.AddElement<double>(CDM::VT_RELATIVE_POSITION_N, RELATIVE_POSITION_N, 0.0);
  }
  void add_RELATIVE_VELOCITY_R(double RELATIVE_VELOCITY_R) {
    fbb_.AddElement<double>(CDM::VT_RELATIVE_VELOCITY_R, RELATIVE_VELOCITY_R, 0.0);
  }
  void add_RELATIVE_VELOCITY_T(double RELATIVE_VELOCITY_T) {
    fbb_.AddElement<double>(CDM::VT_RELATIVE_VELOCITY_T, RELATIVE_VELOCITY_T, 0.0);
  }
  void add_RELATIVE_VELOCITY_N(double RELATIVE_VELOCITY_N) {
    fbb_.AddElement<double>(CDM::VT_RELATIVE_VELOCITY_N, RELATIVE_VELOCITY_N, 0.0);
  }
  void add_START_SCREEN_PERIOD(::flatbuffers::Offset<::flatbuffers::String> START_SCREEN_PERIOD) {
    fbb_.AddOffset(CDM::VT_START_SCREEN_PERIOD, START_SCREEN_PERIOD);
  }
  void add_STOP_SCREEN_PERIOD(::flatbuffers::Offset<::flatbuffers::String> STOP_SCREEN_PERIOD) {
    fbb_.AddOffset(CDM::VT_STOP_SCREEN_PERIOD, STOP_SCREEN_PERIOD);
  }
  void add_SCREEN_VOLUME_FRAME(referenceFrame SCREEN_VOLUME_FRAME) {
    fbb_.AddElement<int8_t>(CDM::VT_SCREEN_VOLUME_FRAME, static_cast<int8_t>(SCREEN_VOLUME_FRAME), 0);
  }
  void add_SCREEN_VOLUME_SHAPE(screeningVolumeShape SCREEN_VOLUME_SHAPE) {
    fbb_.AddElement<int8_t>(CDM::VT_SCREEN_VOLUME_SHAPE, static_cast<int8_t>(SCREEN_VOLUME_SHAPE), 0);
  }
  void add_SCREEN_VOLUME_X(double SCREEN_VOLUME_X) {
    fbb_.AddElement<double>(CDM::VT_SCREEN_VOLUME_X, SCREEN_VOLUME_X, 0.0);
  }
  void add_SCREEN_VOLUME_Y(double SCREEN_VOLUME_Y) {
    fbb_.AddElement<double>(CDM::VT_SCREEN_VOLUME_Y, SCREEN_VOLUME_Y, 0.0);
  }
  void add_SCREEN_VOLUME_Z(double SCREEN_VOLUME_Z) {
    fbb_.AddElement<double>(CDM::VT_SCREEN_VOLUME_Z, SCREEN_VOLUME_Z, 0.0);
  }
  void add_SCREEN_ENTRY_TIME(::flatbuffers::Offset<::flatbuffers::String> SCREEN_ENTRY_TIME) {
    fbb_.AddOffset(CDM::VT_SCREEN_ENTRY_TIME, SCREEN_ENTRY_TIME);
  }
  void add_SCREEN_EXIT_TIME(::flatbuffers::Offset<::flatbuffers::String> SCREEN_EXIT_TIME) {
    fbb_.AddOffset(CDM::VT_SCREEN_EXIT_TIME, SCREEN_EXIT_TIME);
  }
  void add_COLLISION_PROBABILITY(double COLLISION_PROBABILITY) {
    fbb_.AddElement<double>(CDM::VT_COLLISION_PROBABILITY, COLLISION_PROBABILITY, 0.0);
  }
  void add_COLLISION_PROBABILITY_METHOD(::flatbuffers::Offset<::flatbuffers::String> COLLISION_PROBABILITY_METHOD) {
    fbb_.AddOffset(CDM::VT_COLLISION_PROBABILITY_METHOD, COLLISION_PROBABILITY_METHOD);
  }
  void add_OBJECT1(::flatbuffers::Offset<CDMObject> OBJECT1) {
    fbb_.AddOffset(CDM::VT_OBJECT1, OBJECT1);
  }
  void add_OBJECT2(::flatbuffers::Offset<CDMObject> OBJECT2) {
    fbb_.AddOffset(CDM::VT_OBJECT2, OBJECT2);
  }
  void add_OBJECT1_DATASOURCE(::flatbuffers::Offset<PNM> OBJECT1_DATASOURCE) {
    fbb_.AddOffset(CDM::VT_OBJECT1_DATASOURCE, OBJECT1_DATASOURCE);
  }
  void add_OBJECT2_DATASOURCE(::flatbuffers::Offset<PNM> OBJECT2_DATASOURCE) {
    fbb_.AddOffset(CDM::VT_OBJECT2_DATASOURCE, OBJECT2_DATASOURCE);
  }
  explicit CDMBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CDM> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CDM>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CDM> CreateCDM(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double CCSDS_CDM_VERS = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> CREATION_DATE = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ORIGINATOR = 0,
    ::flatbuffers::Offset<::flatbuffers::String> MESSAGE_FOR = 0,
    ::flatbuffers::Offset<::flatbuffers::String> MESSAGE_ID = 0,
    ::flatbuffers::Offset<::flatbuffers::String> TCA = 0,
    double MISS_DISTANCE = 0.0,
    double RELATIVE_SPEED = 0.0,
    double RELATIVE_POSITION_R = 0.0,
    double RELATIVE_POSITION_T = 0.0,
    double RELATIVE_POSITION_N = 0.0,
    double RELATIVE_VELOCITY_R = 0.0,
    double RELATIVE_VELOCITY_T = 0.0,
    double RELATIVE_VELOCITY_N = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> START_SCREEN_PERIOD = 0,
    ::flatbuffers::Offset<::flatbuffers::String> STOP_SCREEN_PERIOD = 0,
    referenceFrame SCREEN_VOLUME_FRAME = referenceFrame_ECEF,
    screeningVolumeShape SCREEN_VOLUME_SHAPE = screeningVolumeShape_ELLIPSOID,
    double SCREEN_VOLUME_X = 0.0,
    double SCREEN_VOLUME_Y = 0.0,
    double SCREEN_VOLUME_Z = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> SCREEN_ENTRY_TIME = 0,
    ::flatbuffers::Offset<::flatbuffers::String> SCREEN_EXIT_TIME = 0,
    double COLLISION_PROBABILITY = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> COLLISION_PROBABILITY_METHOD = 0,
    ::flatbuffers::Offset<CDMObject> OBJECT1 = 0,
    ::flatbuffers::Offset<CDMObject> OBJECT2 = 0,
    ::flatbuffers::Offset<PNM> OBJECT1_DATASOURCE = 0,
    ::flatbuffers::Offset<PNM> OBJECT2_DATASOURCE = 0) {
  CDMBuilder builder_(_fbb);
  builder_.add_COLLISION_PROBABILITY(COLLISION_PROBABILITY);
  builder_.add_SCREEN_VOLUME_Z(SCREEN_VOLUME_Z);
  builder_.add_SCREEN_VOLUME_Y(SCREEN_VOLUME_Y);
  builder_.add_SCREEN_VOLUME_X(SCREEN_VOLUME_X);
  builder_.add_RELATIVE_VELOCITY_N(RELATIVE_VELOCITY_N);
  builder_.add_RELATIVE_VELOCITY_T(RELATIVE_VELOCITY_T);
  builder_.add_RELATIVE_VELOCITY_R(RELATIVE_VELOCITY_R);
  builder_.add_RELATIVE_POSITION_N(RELATIVE_POSITION_N);
  builder_.add_RELATIVE_POSITION_T(RELATIVE_POSITION_T);
  builder_.add_RELATIVE_POSITION_R(RELATIVE_POSITION_R);
  builder_.add_RELATIVE_SPEED(RELATIVE_SPEED);
  builder_.add_MISS_DISTANCE(MISS_DISTANCE);
  builder_.add_CCSDS_CDM_VERS(CCSDS_CDM_VERS);
  builder_.add_OBJECT2_DATASOURCE(OBJECT2_DATASOURCE);
  builder_.add_OBJECT1_DATASOURCE(OBJECT1_DATASOURCE);
  builder_.add_OBJECT2(OBJECT2);
  builder_.add_OBJECT1(OBJECT1);
  builder_.add_COLLISION_PROBABILITY_METHOD(COLLISION_PROBABILITY_METHOD);
  builder_.add_SCREEN_EXIT_TIME(SCREEN_EXIT_TIME);
  builder_.add_SCREEN_ENTRY_TIME(SCREEN_ENTRY_TIME);
  builder_.add_STOP_SCREEN_PERIOD(STOP_SCREEN_PERIOD);
  builder_.add_START_SCREEN_PERIOD(START_SCREEN_PERIOD);
  builder_.add_TCA(TCA);
  builder_.add_MESSAGE_ID(MESSAGE_ID);
  builder_.add_MESSAGE_FOR(MESSAGE_FOR);
  builder_.add_ORIGINATOR(ORIGINATOR);
  builder_.add_CREATION_DATE(CREATION_DATE);
  builder_.add_SCREEN_VOLUME_SHAPE(SCREEN_VOLUME_SHAPE);
  builder_.add_SCREEN_VOLUME_FRAME(SCREEN_VOLUME_FRAME);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CDM> CreateCDMDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double CCSDS_CDM_VERS = 0.0,
    const char *CREATION_DATE = nullptr,
    const char *ORIGINATOR = nullptr,
    const char *MESSAGE_FOR = nullptr,
    const char *MESSAGE_ID = nullptr,
    const char *TCA = nullptr,
    double MISS_DISTANCE = 0.0,
    double RELATIVE_SPEED = 0.0,
    double RELATIVE_POSITION_R = 0.0,
    double RELATIVE_POSITION_T = 0.0,
    double RELATIVE_POSITION_N = 0.0,
    double RELATIVE_VELOCITY_R = 0.0,
    double RELATIVE_VELOCITY_T = 0.0,
    double RELATIVE_VELOCITY_N = 0.0,
    const char *START_SCREEN_PERIOD = nullptr,
    const char *STOP_SCREEN_PERIOD = nullptr,
    referenceFrame SCREEN_VOLUME_FRAME = referenceFrame_ECEF,
    screeningVolumeShape SCREEN_VOLUME_SHAPE = screeningVolumeShape_ELLIPSOID,
    double SCREEN_VOLUME_X = 0.0,
    double SCREEN_VOLUME_Y = 0.0,
    double SCREEN_VOLUME_Z = 0.0,
    const char *SCREEN_ENTRY_TIME = nullptr,
    const char *SCREEN_EXIT_TIME = nullptr,
    double COLLISION_PROBABILITY = 0.0,
    const char *COLLISION_PROBABILITY_METHOD = nullptr,
    ::flatbuffers::Offset<CDMObject> OBJECT1 = 0,
    ::flatbuffers::Offset<CDMObject> OBJECT2 = 0,
    ::flatbuffers::Offset<PNM> OBJECT1_DATASOURCE = 0,
    ::flatbuffers::Offset<PNM> OBJECT2_DATASOURCE = 0) {
  auto CREATION_DATE__ = CREATION_DATE ? _fbb.CreateString(CREATION_DATE) : 0;
  auto ORIGINATOR__ = ORIGINATOR ? _fbb.CreateString(ORIGINATOR) : 0;
  auto MESSAGE_FOR__ = MESSAGE_FOR ? _fbb.CreateString(MESSAGE_FOR) : 0;
  auto MESSAGE_ID__ = MESSAGE_ID ? _fbb.CreateString(MESSAGE_ID) : 0;
  auto TCA__ = TCA ? _fbb.CreateString(TCA) : 0;
  auto START_SCREEN_PERIOD__ = START_SCREEN_PERIOD ? _fbb.CreateString(START_SCREEN_PERIOD) : 0;
  auto STOP_SCREEN_PERIOD__ = STOP_SCREEN_PERIOD ? _fbb.CreateString(STOP_SCREEN_PERIOD) : 0;
  auto SCREEN_ENTRY_TIME__ = SCREEN_ENTRY_TIME ? _fbb.CreateString(SCREEN_ENTRY_TIME) : 0;
  auto SCREEN_EXIT_TIME__ = SCREEN_EXIT_TIME ? _fbb.CreateString(SCREEN_EXIT_TIME) : 0;
  auto COLLISION_PROBABILITY_METHOD__ = COLLISION_PROBABILITY_METHOD ? _fbb.CreateString(COLLISION_PROBABILITY_METHOD) : 0;
  return CreateCDM(
      _fbb,
      CCSDS_CDM_VERS,
      CREATION_DATE__,
      ORIGINATOR__,
      MESSAGE_FOR__,
      MESSAGE_ID__,
      TCA__,
      MISS_DISTANCE,
      RELATIVE_SPEED,
      RELATIVE_POSITION_R,
      RELATIVE_POSITION_T,
      RELATIVE_POSITION_N,
      RELATIVE_VELOCITY_R,
      RELATIVE_VELOCITY_T,
      RELATIVE_VELOCITY_N,
      START_SCREEN_PERIOD__,
      STOP_SCREEN_PERIOD__,
      SCREEN_VOLUME_FRAME,
      SCREEN_VOLUME_SHAPE,
      SCREEN_VOLUME_X,
      SCREEN_VOLUME_Y,
      SCREEN_VOLUME_Z,
      SCREEN_ENTRY_TIME__,
      SCREEN_EXIT_TIME__,
      COLLISION_PROBABILITY,
      COLLISION_PROBABILITY_METHOD__,
      OBJECT1,
      OBJECT2,
      OBJECT1_DATASOURCE,
      OBJECT2_DATASOURCE);
}

inline const CDM *GetCDM(const void *buf) {
  return ::flatbuffers::GetRoot<CDM>(buf);
}

inline const CDM *GetSizePrefixedCDM(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<CDM>(buf);
}

inline const char *CDMIdentifier() {
  return "$CDM";
}

inline bool CDMBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CDMIdentifier());
}

inline bool SizePrefixedCDMBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CDMIdentifier(), true);
}

inline bool VerifyCDMBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CDM>(CDMIdentifier());
}

inline bool VerifySizePrefixedCDMBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CDM>(CDMIdentifier());
}

inline void FinishCDMBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CDM> root) {
  fbb.Finish(root, CDMIdentifier());
}

inline void FinishSizePrefixedCDMBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CDM> root) {
  fbb.FinishSizePrefixed(root, CDMIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
