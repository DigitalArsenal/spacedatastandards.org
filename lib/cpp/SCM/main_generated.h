// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct SCHEMA_STANDARD;
struct SCHEMA_STANDARDBuilder;

struct SCM;
struct SCMBuilder;

struct SCMCOLLECTION;
struct SCMCOLLECTIONBuilder;

/// Schema Standard Definition
struct SCHEMA_STANDARD FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SCHEMA_STANDARDBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_IDL = 6,
    VT_FILES = 8
  };
  /// Unique identifier for the standard
  const ::flatbuffers::String *key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_KEY);
  }
  /// IDL
  const ::flatbuffers::String *idl() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDL);
  }
  /// List Of File Paths
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *files() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_FILES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffset(verifier, VT_IDL) &&
           verifier.VerifyString(idl()) &&
           VerifyOffset(verifier, VT_FILES) &&
           verifier.VerifyVector(files()) &&
           verifier.VerifyVectorOfStrings(files()) &&
           verifier.EndTable();
  }
};

struct SCHEMA_STANDARDBuilder {
  typedef SCHEMA_STANDARD Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(::flatbuffers::Offset<::flatbuffers::String> key) {
    fbb_.AddOffset(SCHEMA_STANDARD::VT_KEY, key);
  }
  void add_idl(::flatbuffers::Offset<::flatbuffers::String> idl) {
    fbb_.AddOffset(SCHEMA_STANDARD::VT_IDL, idl);
  }
  void add_files(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> files) {
    fbb_.AddOffset(SCHEMA_STANDARD::VT_FILES, files);
  }
  explicit SCHEMA_STANDARDBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SCHEMA_STANDARD> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SCHEMA_STANDARD>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SCHEMA_STANDARD> CreateSCHEMA_STANDARD(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> key = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idl = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> files = 0) {
  SCHEMA_STANDARDBuilder builder_(_fbb);
  builder_.add_files(files);
  builder_.add_idl(idl);
  builder_.add_key(key);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SCHEMA_STANDARD> CreateSCHEMA_STANDARDDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    const char *idl = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *files = nullptr) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  auto idl__ = idl ? _fbb.CreateString(idl) : 0;
  auto files__ = files ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*files) : 0;
  return CreateSCHEMA_STANDARD(
      _fbb,
      key__,
      idl__,
      files__);
}

/// Schema Manifest
struct SCM FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SCMBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_RECORDS = 6
  };
  /// Version of Space Data Standards
  const ::flatbuffers::String *version() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VERSION);
  }
  /// Standards Dictionary
  const ::flatbuffers::Vector<::flatbuffers::Offset<SCHEMA_STANDARD>> *RECORDS() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<SCHEMA_STANDARD>> *>(VT_RECORDS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyString(version()) &&
           VerifyOffset(verifier, VT_RECORDS) &&
           verifier.VerifyVector(RECORDS()) &&
           verifier.VerifyVectorOfTables(RECORDS()) &&
           verifier.EndTable();
  }
};

struct SCMBuilder {
  typedef SCM Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_version(::flatbuffers::Offset<::flatbuffers::String> version) {
    fbb_.AddOffset(SCM::VT_VERSION, version);
  }
  void add_RECORDS(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SCHEMA_STANDARD>>> RECORDS) {
    fbb_.AddOffset(SCM::VT_RECORDS, RECORDS);
  }
  explicit SCMBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SCM> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SCM>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SCM> CreateSCM(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> version = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SCHEMA_STANDARD>>> RECORDS = 0) {
  SCMBuilder builder_(_fbb);
  builder_.add_RECORDS(RECORDS);
  builder_.add_version(version);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SCM> CreateSCMDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *version = nullptr,
    const std::vector<::flatbuffers::Offset<SCHEMA_STANDARD>> *RECORDS = nullptr) {
  auto version__ = version ? _fbb.CreateString(version) : 0;
  auto RECORDS__ = RECORDS ? _fbb.CreateVector<::flatbuffers::Offset<SCHEMA_STANDARD>>(*RECORDS) : 0;
  return CreateSCM(
      _fbb,
      version__,
      RECORDS__);
}

/// Declaring the root type
struct SCMCOLLECTION FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SCMCOLLECTIONBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORDS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<SCM>> *RECORDS() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<SCM>> *>(VT_RECORDS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RECORDS) &&
           verifier.VerifyVector(RECORDS()) &&
           verifier.VerifyVectorOfTables(RECORDS()) &&
           verifier.EndTable();
  }
};

struct SCMCOLLECTIONBuilder {
  typedef SCMCOLLECTION Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_RECORDS(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SCM>>> RECORDS) {
    fbb_.AddOffset(SCMCOLLECTION::VT_RECORDS, RECORDS);
  }
  explicit SCMCOLLECTIONBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SCMCOLLECTION> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SCMCOLLECTION>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SCMCOLLECTION> CreateSCMCOLLECTION(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SCM>>> RECORDS = 0) {
  SCMCOLLECTIONBuilder builder_(_fbb);
  builder_.add_RECORDS(RECORDS);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SCMCOLLECTION> CreateSCMCOLLECTIONDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<SCM>> *RECORDS = nullptr) {
  auto RECORDS__ = RECORDS ? _fbb.CreateVector<::flatbuffers::Offset<SCM>>(*RECORDS) : 0;
  return CreateSCMCOLLECTION(
      _fbb,
      RECORDS__);
}

inline const SCM *GetSCM(const void *buf) {
  return ::flatbuffers::GetRoot<SCM>(buf);
}

inline const SCM *GetSizePrefixedSCM(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SCM>(buf);
}

inline const char *SCMIdentifier() {
  return "$SCM";
}

inline bool SCMBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SCMIdentifier());
}

inline bool SizePrefixedSCMBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SCMIdentifier(), true);
}

inline bool VerifySCMBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SCM>(SCMIdentifier());
}

inline bool VerifySizePrefixedSCMBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SCM>(SCMIdentifier());
}

inline void FinishSCMBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SCM> root) {
  fbb.Finish(root, SCMIdentifier());
}

inline void FinishSizePrefixedSCMBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SCM> root) {
  fbb.FinishSizePrefixed(root, SCMIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
