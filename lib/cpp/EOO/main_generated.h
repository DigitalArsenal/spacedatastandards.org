// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "main_generated.h"

struct EOO;
struct EOOBuilder;

struct EOOCOLLECTION;
struct EOOCOLLECTIONBuilder;

/// Electro-Optical Observation
struct EOO FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EOOBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EOBSERVATION_ID = 4,
    VT_CLASSIFICATION = 6,
    VT_OB_TIME = 8,
    VT_CORR_QUALITY = 10,
    VT_ID_ON_ORBIT = 12,
    VT_SENSOR_ID = 14,
    VT_COLLECT_METHOD = 16,
    VT_NORAD_CAT_ID = 18,
    VT_TASK_ID = 20,
    VT_TRANSACTION_ID = 22,
    VT_TRACK_ID = 24,
    VT_OB_POSITION = 26,
    VT_ORIG_OBJECT_ID = 28,
    VT_ORIG_SENSOR_ID = 30,
    VT_UCT = 32,
    VT_AZIMUTH = 34,
    VT_AZIMUTH_UNC = 36,
    VT_AZIMUTH_BIAS = 38,
    VT_AZIMUTH_RATE = 40,
    VT_ELEVATION = 42,
    VT_ELEVATION_UNC = 44,
    VT_ELEVATION_BIAS = 46,
    VT_ELEVATION_RATE = 48,
    VT_RANGE = 50,
    VT_RANGE_UNC = 52,
    VT_RANGE_BIAS = 54,
    VT_RANGE_RATE = 56,
    VT_RANGE_RATE_UNC = 58,
    VT_RA = 60,
    VT_RA_RATE = 62,
    VT_RA_UNC = 64,
    VT_RA_BIAS = 66,
    VT_DECLINATION = 68,
    VT_DECLINATION_RATE = 70,
    VT_DECLINATION_UNC = 72,
    VT_DECLINATION_BIAS = 74,
    VT_LOSX = 76,
    VT_LOSY = 78,
    VT_LOSZ = 80,
    VT_LOS_UNC = 82,
    VT_LOSXVEL = 84,
    VT_LOSYVEL = 86,
    VT_LOSZVEL = 88,
    VT_SENLAT = 90,
    VT_SENLON = 92,
    VT_SENALT = 94,
    VT_SENX = 96,
    VT_SENY = 98,
    VT_SENZ = 100,
    VT_FOV_COUNT = 102,
    VT_EXP_DURATION = 104,
    VT_ZEROPTD = 106,
    VT_NET_OBJ_SIG = 108,
    VT_NET_OBJ_SIG_UNC = 110,
    VT_MAG = 112,
    VT_MAG_UNC = 114,
    VT_MAG_NORM_RANGE = 116,
    VT_GEOLAT = 118,
    VT_GEOLON = 120,
    VT_GEOALT = 122,
    VT_GEORANGE = 124,
    VT_SKY_BKGRND = 126,
    VT_PRIMARY_EXTINCTION = 128,
    VT_PRIMARY_EXTINCTION_UNC = 130,
    VT_SOLAR_PHASE_ANGLE = 132,
    VT_SOLAR_EQ_PHASE_ANGLE = 134,
    VT_SOLAR_DEC_ANGLE = 136,
    VT_SHUTTER_DELAY = 138,
    VT_TIMING_BIAS = 140,
    VT_RAW_FILE_URI = 142,
    VT_INTENSITY = 144,
    VT_BG_INTENSITY = 146,
    VT_DESCRIPTOR = 148,
    VT_SOURCE = 150,
    VT_ORIGIN = 152,
    VT_DATA_MODE = 154,
    VT_CREATED_AT = 156,
    VT_CREATED_BY = 158,
    VT_REFERENCE_FRAME = 160,
    VT_SEN_REFERENCE_FRAME = 162,
    VT_UMBRA = 164,
    VT_PENUMBRA = 166,
    VT_ORIG_NETWORK = 168,
    VT_SOURCE_DL = 170,
    VT_TYPE = 172
  };
  /// Unique identifier for Earth Observation Observation
  const ::flatbuffers::String *EOBSERVATION_ID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EOBSERVATION_ID);
  }
  /// Classification marking of the data
  const ::flatbuffers::String *CLASSIFICATION() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATION);
  }
  /// Observation time in UTC
  const ::flatbuffers::String *OB_TIME() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OB_TIME);
  }
  /// Quality of the correlation
  float CORR_QUALITY() const {
    return GetField<float>(VT_CORR_QUALITY, 0.0f);
  }
  /// Identifier for the satellite on orbit
  const ::flatbuffers::String *ID_ON_ORBIT() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID_ON_ORBIT);
  }
  /// Identifier for the sensor
  const ::flatbuffers::String *SENSOR_ID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SENSOR_ID);
  }
  /// Method of data collection
  const ::flatbuffers::String *COLLECT_METHOD() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COLLECT_METHOD);
  }
  /// NORAD catalog identifier for the satellite
  int32_t NORAD_CAT_ID() const {
    return GetField<int32_t>(VT_NORAD_CAT_ID, 0);
  }
  /// Identifier for the task
  const ::flatbuffers::String *TASK_ID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TASK_ID);
  }
  /// Identifier for the transaction
  const ::flatbuffers::String *TRANSACTION_ID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSACTION_ID);
  }
  /// Identifier for the track
  const ::flatbuffers::String *TRACK_ID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRACK_ID);
  }
  /// Position of the observation
  const ::flatbuffers::String *OB_POSITION() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OB_POSITION);
  }
  /// Original object identifier
  const ::flatbuffers::String *ORIG_OBJECT_ID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIG_OBJECT_ID);
  }
  /// Original sensor identifier
  const ::flatbuffers::String *ORIG_SENSOR_ID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIG_SENSOR_ID);
  }
  /// Universal Coordinated Time flag
  bool UCT() const {
    return GetField<uint8_t>(VT_UCT, 0) != 0;
  }
  /// Azimuth angle
  float AZIMUTH() const {
    return GetField<float>(VT_AZIMUTH, 0.0f);
  }
  /// Uncertainty in azimuth angle
  float AZIMUTH_UNC() const {
    return GetField<float>(VT_AZIMUTH_UNC, 0.0f);
  }
  /// Bias in azimuth angle
  float AZIMUTH_BIAS() const {
    return GetField<float>(VT_AZIMUTH_BIAS, 0.0f);
  }
  /// Rate of change in azimuth
  float AZIMUTH_RATE() const {
    return GetField<float>(VT_AZIMUTH_RATE, 0.0f);
  }
  /// Elevation angle
  float ELEVATION() const {
    return GetField<float>(VT_ELEVATION, 0.0f);
  }
  /// Uncertainty in elevation angle
  float ELEVATION_UNC() const {
    return GetField<float>(VT_ELEVATION_UNC, 0.0f);
  }
  /// Bias in elevation angle
  float ELEVATION_BIAS() const {
    return GetField<float>(VT_ELEVATION_BIAS, 0.0f);
  }
  /// Rate of change in elevation
  float ELEVATION_RATE() const {
    return GetField<float>(VT_ELEVATION_RATE, 0.0f);
  }
  /// Range to the target
  float RANGE() const {
    return GetField<float>(VT_RANGE, 0.0f);
  }
  /// Uncertainty in range
  float RANGE_UNC() const {
    return GetField<float>(VT_RANGE_UNC, 0.0f);
  }
  /// Bias in range measurement
  float RANGE_BIAS() const {
    return GetField<float>(VT_RANGE_BIAS, 0.0f);
  }
  /// Rate of change in range
  float RANGE_RATE() const {
    return GetField<float>(VT_RANGE_RATE, 0.0f);
  }
  /// Uncertainty in range rate
  float RANGE_RATE_UNC() const {
    return GetField<float>(VT_RANGE_RATE_UNC, 0.0f);
  }
  /// Right ascension
  float RA() const {
    return GetField<float>(VT_RA, 0.0f);
  }
  /// Rate of change in right ascension
  float RA_RATE() const {
    return GetField<float>(VT_RA_RATE, 0.0f);
  }
  /// Uncertainty in right ascension
  float RA_UNC() const {
    return GetField<float>(VT_RA_UNC, 0.0f);
  }
  /// Bias in right ascension
  float RA_BIAS() const {
    return GetField<float>(VT_RA_BIAS, 0.0f);
  }
  /// Declination angle
  float DECLINATION() const {
    return GetField<float>(VT_DECLINATION, 0.0f);
  }
  /// Rate of change in declination
  float DECLINATION_RATE() const {
    return GetField<float>(VT_DECLINATION_RATE, 0.0f);
  }
  /// Uncertainty in declination
  float DECLINATION_UNC() const {
    return GetField<float>(VT_DECLINATION_UNC, 0.0f);
  }
  /// Bias in declination
  float DECLINATION_BIAS() const {
    return GetField<float>(VT_DECLINATION_BIAS, 0.0f);
  }
  /// X-component of line-of-sight vector
  float LOSX() const {
    return GetField<float>(VT_LOSX, 0.0f);
  }
  /// Y-component of line-of-sight vector
  float LOSY() const {
    return GetField<float>(VT_LOSY, 0.0f);
  }
  /// Z-component of line-of-sight vector
  float LOSZ() const {
    return GetField<float>(VT_LOSZ, 0.0f);
  }
  /// Uncertainty in line-of-sight vector
  float LOS_UNC() const {
    return GetField<float>(VT_LOS_UNC, 0.0f);
  }
  /// X-component of line-of-sight velocity
  float LOSXVEL() const {
    return GetField<float>(VT_LOSXVEL, 0.0f);
  }
  /// Y-component of line-of-sight velocity
  float LOSYVEL() const {
    return GetField<float>(VT_LOSYVEL, 0.0f);
  }
  /// Z-component of line-of-sight velocity
  float LOSZVEL() const {
    return GetField<float>(VT_LOSZVEL, 0.0f);
  }
  /// Latitude of sensor
  float SENLAT() const {
    return GetField<float>(VT_SENLAT, 0.0f);
  }
  /// Longitude of sensor
  float SENLON() const {
    return GetField<float>(VT_SENLON, 0.0f);
  }
  /// Altitude of sensor
  float SENALT() const {
    return GetField<float>(VT_SENALT, 0.0f);
  }
  /// X-coordinate of sensor position
  float SENX() const {
    return GetField<float>(VT_SENX, 0.0f);
  }
  /// Y-coordinate of sensor position
  float SENY() const {
    return GetField<float>(VT_SENY, 0.0f);
  }
  /// Z-coordinate of sensor position
  float SENZ() const {
    return GetField<float>(VT_SENZ, 0.0f);
  }
  /// Number of fields of view
  int32_t FOV_COUNT() const {
    return GetField<int32_t>(VT_FOV_COUNT, 0);
  }
  /// Duration of the exposure
  float EXP_DURATION() const {
    return GetField<float>(VT_EXP_DURATION, 0.0f);
  }
  /// Zero-point displacement
  float ZEROPTD() const {
    return GetField<float>(VT_ZEROPTD, 0.0f);
  }
  /// Net object signal
  float NET_OBJ_SIG() const {
    return GetField<float>(VT_NET_OBJ_SIG, 0.0f);
  }
  /// Uncertainty in net object signal
  float NET_OBJ_SIG_UNC() const {
    return GetField<float>(VT_NET_OBJ_SIG_UNC, 0.0f);
  }
  /// Magnitude of the observation
  float MAG() const {
    return GetField<float>(VT_MAG, 0.0f);
  }
  /// Uncertainty in magnitude
  float MAG_UNC() const {
    return GetField<float>(VT_MAG_UNC, 0.0f);
  }
  /// Normalized range for magnitude
  float MAG_NORM_RANGE() const {
    return GetField<float>(VT_MAG_NORM_RANGE, 0.0f);
  }
  /// Geocentric latitude
  float GEOLAT() const {
    return GetField<float>(VT_GEOLAT, 0.0f);
  }
  /// Geocentric longitude
  float GEOLON() const {
    return GetField<float>(VT_GEOLON, 0.0f);
  }
  /// Geocentric altitude
  float GEOALT() const {
    return GetField<float>(VT_GEOALT, 0.0f);
  }
  /// Geocentric range
  float GEORANGE() const {
    return GetField<float>(VT_GEORANGE, 0.0f);
  }
  /// Sky background level
  float SKY_BKGRND() const {
    return GetField<float>(VT_SKY_BKGRND, 0.0f);
  }
  /// Primary extinction
  float PRIMARY_EXTINCTION() const {
    return GetField<float>(VT_PRIMARY_EXTINCTION, 0.0f);
  }
  /// Uncertainty in primary extinction
  float PRIMARY_EXTINCTION_UNC() const {
    return GetField<float>(VT_PRIMARY_EXTINCTION_UNC, 0.0f);
  }
  /// Solar phase angle
  float SOLAR_PHASE_ANGLE() const {
    return GetField<float>(VT_SOLAR_PHASE_ANGLE, 0.0f);
  }
  /// Solar equatorial phase angle
  float SOLAR_EQ_PHASE_ANGLE() const {
    return GetField<float>(VT_SOLAR_EQ_PHASE_ANGLE, 0.0f);
  }
  /// Solar declination angle
  float SOLAR_DEC_ANGLE() const {
    return GetField<float>(VT_SOLAR_DEC_ANGLE, 0.0f);
  }
  /// Shutter delay
  float SHUTTER_DELAY() const {
    return GetField<float>(VT_SHUTTER_DELAY, 0.0f);
  }
  /// Timing bias
  float TIMING_BIAS() const {
    return GetField<float>(VT_TIMING_BIAS, 0.0f);
  }
  /// URI of the raw data file
  const ::flatbuffers::String *RAW_FILE_URI() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RAW_FILE_URI);
  }
  /// Intensity of the observation
  float INTENSITY() const {
    return GetField<float>(VT_INTENSITY, 0.0f);
  }
  /// Background intensity
  float BG_INTENSITY() const {
    return GetField<float>(VT_BG_INTENSITY, 0.0f);
  }
  /// Descriptor of the provided data
  const ::flatbuffers::String *DESCRIPTOR() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTOR);
  }
  /// Source of the data
  const ::flatbuffers::String *SOURCE() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Origin of the data
  const ::flatbuffers::String *ORIGIN() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Mode of the data
  const ::flatbuffers::String *DATA_MODE() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATA_MODE);
  }
  /// Creation time of the record
  const ::flatbuffers::String *CREATED_AT() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATED_AT);
  }
  /// User who created the record
  const ::flatbuffers::String *CREATED_BY() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATED_BY);
  }
  /// Reference frame of the observation
  refFrame REFERENCE_FRAME() const {
    return static_cast<refFrame>(GetField<int8_t>(VT_REFERENCE_FRAME, 0));
  }
  /// Reference frame of the sensor
  const ::flatbuffers::String *SEN_REFERENCE_FRAME() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SEN_REFERENCE_FRAME);
  }
  /// Flag for umbra (total eclipse)
  bool UMBRA() const {
    return GetField<uint8_t>(VT_UMBRA, 0) != 0;
  }
  /// Flag for penumbra (partial eclipse)
  bool PENUMBRA() const {
    return GetField<uint8_t>(VT_PENUMBRA, 0) != 0;
  }
  /// Original network identifier
  const ::flatbuffers::String *ORIG_NETWORK() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIG_NETWORK);
  }
  /// Data link source
  const ::flatbuffers::String *SOURCE_DL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE_DL);
  }
  /// Type of the observation
  const ::flatbuffers::String *TYPE() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EOBSERVATION_ID) &&
           verifier.VerifyString(EOBSERVATION_ID()) &&
           VerifyOffset(verifier, VT_CLASSIFICATION) &&
           verifier.VerifyString(CLASSIFICATION()) &&
           VerifyOffset(verifier, VT_OB_TIME) &&
           verifier.VerifyString(OB_TIME()) &&
           VerifyField<float>(verifier, VT_CORR_QUALITY, 4) &&
           VerifyOffset(verifier, VT_ID_ON_ORBIT) &&
           verifier.VerifyString(ID_ON_ORBIT()) &&
           VerifyOffset(verifier, VT_SENSOR_ID) &&
           verifier.VerifyString(SENSOR_ID()) &&
           VerifyOffset(verifier, VT_COLLECT_METHOD) &&
           verifier.VerifyString(COLLECT_METHOD()) &&
           VerifyField<int32_t>(verifier, VT_NORAD_CAT_ID, 4) &&
           VerifyOffset(verifier, VT_TASK_ID) &&
           verifier.VerifyString(TASK_ID()) &&
           VerifyOffset(verifier, VT_TRANSACTION_ID) &&
           verifier.VerifyString(TRANSACTION_ID()) &&
           VerifyOffset(verifier, VT_TRACK_ID) &&
           verifier.VerifyString(TRACK_ID()) &&
           VerifyOffset(verifier, VT_OB_POSITION) &&
           verifier.VerifyString(OB_POSITION()) &&
           VerifyOffset(verifier, VT_ORIG_OBJECT_ID) &&
           verifier.VerifyString(ORIG_OBJECT_ID()) &&
           VerifyOffset(verifier, VT_ORIG_SENSOR_ID) &&
           verifier.VerifyString(ORIG_SENSOR_ID()) &&
           VerifyField<uint8_t>(verifier, VT_UCT, 1) &&
           VerifyField<float>(verifier, VT_AZIMUTH, 4) &&
           VerifyField<float>(verifier, VT_AZIMUTH_UNC, 4) &&
           VerifyField<float>(verifier, VT_AZIMUTH_BIAS, 4) &&
           VerifyField<float>(verifier, VT_AZIMUTH_RATE, 4) &&
           VerifyField<float>(verifier, VT_ELEVATION, 4) &&
           VerifyField<float>(verifier, VT_ELEVATION_UNC, 4) &&
           VerifyField<float>(verifier, VT_ELEVATION_BIAS, 4) &&
           VerifyField<float>(verifier, VT_ELEVATION_RATE, 4) &&
           VerifyField<float>(verifier, VT_RANGE, 4) &&
           VerifyField<float>(verifier, VT_RANGE_UNC, 4) &&
           VerifyField<float>(verifier, VT_RANGE_BIAS, 4) &&
           VerifyField<float>(verifier, VT_RANGE_RATE, 4) &&
           VerifyField<float>(verifier, VT_RANGE_RATE_UNC, 4) &&
           VerifyField<float>(verifier, VT_RA, 4) &&
           VerifyField<float>(verifier, VT_RA_RATE, 4) &&
           VerifyField<float>(verifier, VT_RA_UNC, 4) &&
           VerifyField<float>(verifier, VT_RA_BIAS, 4) &&
           VerifyField<float>(verifier, VT_DECLINATION, 4) &&
           VerifyField<float>(verifier, VT_DECLINATION_RATE, 4) &&
           VerifyField<float>(verifier, VT_DECLINATION_UNC, 4) &&
           VerifyField<float>(verifier, VT_DECLINATION_BIAS, 4) &&
           VerifyField<float>(verifier, VT_LOSX, 4) &&
           VerifyField<float>(verifier, VT_LOSY, 4) &&
           VerifyField<float>(verifier, VT_LOSZ, 4) &&
           VerifyField<float>(verifier, VT_LOS_UNC, 4) &&
           VerifyField<float>(verifier, VT_LOSXVEL, 4) &&
           VerifyField<float>(verifier, VT_LOSYVEL, 4) &&
           VerifyField<float>(verifier, VT_LOSZVEL, 4) &&
           VerifyField<float>(verifier, VT_SENLAT, 4) &&
           VerifyField<float>(verifier, VT_SENLON, 4) &&
           VerifyField<float>(verifier, VT_SENALT, 4) &&
           VerifyField<float>(verifier, VT_SENX, 4) &&
           VerifyField<float>(verifier, VT_SENY, 4) &&
           VerifyField<float>(verifier, VT_SENZ, 4) &&
           VerifyField<int32_t>(verifier, VT_FOV_COUNT, 4) &&
           VerifyField<float>(verifier, VT_EXP_DURATION, 4) &&
           VerifyField<float>(verifier, VT_ZEROPTD, 4) &&
           VerifyField<float>(verifier, VT_NET_OBJ_SIG, 4) &&
           VerifyField<float>(verifier, VT_NET_OBJ_SIG_UNC, 4) &&
           VerifyField<float>(verifier, VT_MAG, 4) &&
           VerifyField<float>(verifier, VT_MAG_UNC, 4) &&
           VerifyField<float>(verifier, VT_MAG_NORM_RANGE, 4) &&
           VerifyField<float>(verifier, VT_GEOLAT, 4) &&
           VerifyField<float>(verifier, VT_GEOLON, 4) &&
           VerifyField<float>(verifier, VT_GEOALT, 4) &&
           VerifyField<float>(verifier, VT_GEORANGE, 4) &&
           VerifyField<float>(verifier, VT_SKY_BKGRND, 4) &&
           VerifyField<float>(verifier, VT_PRIMARY_EXTINCTION, 4) &&
           VerifyField<float>(verifier, VT_PRIMARY_EXTINCTION_UNC, 4) &&
           VerifyField<float>(verifier, VT_SOLAR_PHASE_ANGLE, 4) &&
           VerifyField<float>(verifier, VT_SOLAR_EQ_PHASE_ANGLE, 4) &&
           VerifyField<float>(verifier, VT_SOLAR_DEC_ANGLE, 4) &&
           VerifyField<float>(verifier, VT_SHUTTER_DELAY, 4) &&
           VerifyField<float>(verifier, VT_TIMING_BIAS, 4) &&
           VerifyOffset(verifier, VT_RAW_FILE_URI) &&
           verifier.VerifyString(RAW_FILE_URI()) &&
           VerifyField<float>(verifier, VT_INTENSITY, 4) &&
           VerifyField<float>(verifier, VT_BG_INTENSITY, 4) &&
           VerifyOffset(verifier, VT_DESCRIPTOR) &&
           verifier.VerifyString(DESCRIPTOR()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(SOURCE()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(ORIGIN()) &&
           VerifyOffset(verifier, VT_DATA_MODE) &&
           verifier.VerifyString(DATA_MODE()) &&
           VerifyOffset(verifier, VT_CREATED_AT) &&
           verifier.VerifyString(CREATED_AT()) &&
           VerifyOffset(verifier, VT_CREATED_BY) &&
           verifier.VerifyString(CREATED_BY()) &&
           VerifyField<int8_t>(verifier, VT_REFERENCE_FRAME, 1) &&
           VerifyOffset(verifier, VT_SEN_REFERENCE_FRAME) &&
           verifier.VerifyString(SEN_REFERENCE_FRAME()) &&
           VerifyField<uint8_t>(verifier, VT_UMBRA, 1) &&
           VerifyField<uint8_t>(verifier, VT_PENUMBRA, 1) &&
           VerifyOffset(verifier, VT_ORIG_NETWORK) &&
           verifier.VerifyString(ORIG_NETWORK()) &&
           VerifyOffset(verifier, VT_SOURCE_DL) &&
           verifier.VerifyString(SOURCE_DL()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(TYPE()) &&
           verifier.EndTable();
  }
};

struct EOOBuilder {
  typedef EOO Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_EOBSERVATION_ID(::flatbuffers::Offset<::flatbuffers::String> EOBSERVATION_ID) {
    fbb_.AddOffset(EOO::VT_EOBSERVATION_ID, EOBSERVATION_ID);
  }
  void add_CLASSIFICATION(::flatbuffers::Offset<::flatbuffers::String> CLASSIFICATION) {
    fbb_.AddOffset(EOO::VT_CLASSIFICATION, CLASSIFICATION);
  }
  void add_OB_TIME(::flatbuffers::Offset<::flatbuffers::String> OB_TIME) {
    fbb_.AddOffset(EOO::VT_OB_TIME, OB_TIME);
  }
  void add_CORR_QUALITY(float CORR_QUALITY) {
    fbb_.AddElement<float>(EOO::VT_CORR_QUALITY, CORR_QUALITY, 0.0f);
  }
  void add_ID_ON_ORBIT(::flatbuffers::Offset<::flatbuffers::String> ID_ON_ORBIT) {
    fbb_.AddOffset(EOO::VT_ID_ON_ORBIT, ID_ON_ORBIT);
  }
  void add_SENSOR_ID(::flatbuffers::Offset<::flatbuffers::String> SENSOR_ID) {
    fbb_.AddOffset(EOO::VT_SENSOR_ID, SENSOR_ID);
  }
  void add_COLLECT_METHOD(::flatbuffers::Offset<::flatbuffers::String> COLLECT_METHOD) {
    fbb_.AddOffset(EOO::VT_COLLECT_METHOD, COLLECT_METHOD);
  }
  void add_NORAD_CAT_ID(int32_t NORAD_CAT_ID) {
    fbb_.AddElement<int32_t>(EOO::VT_NORAD_CAT_ID, NORAD_CAT_ID, 0);
  }
  void add_TASK_ID(::flatbuffers::Offset<::flatbuffers::String> TASK_ID) {
    fbb_.AddOffset(EOO::VT_TASK_ID, TASK_ID);
  }
  void add_TRANSACTION_ID(::flatbuffers::Offset<::flatbuffers::String> TRANSACTION_ID) {
    fbb_.AddOffset(EOO::VT_TRANSACTION_ID, TRANSACTION_ID);
  }
  void add_TRACK_ID(::flatbuffers::Offset<::flatbuffers::String> TRACK_ID) {
    fbb_.AddOffset(EOO::VT_TRACK_ID, TRACK_ID);
  }
  void add_OB_POSITION(::flatbuffers::Offset<::flatbuffers::String> OB_POSITION) {
    fbb_.AddOffset(EOO::VT_OB_POSITION, OB_POSITION);
  }
  void add_ORIG_OBJECT_ID(::flatbuffers::Offset<::flatbuffers::String> ORIG_OBJECT_ID) {
    fbb_.AddOffset(EOO::VT_ORIG_OBJECT_ID, ORIG_OBJECT_ID);
  }
  void add_ORIG_SENSOR_ID(::flatbuffers::Offset<::flatbuffers::String> ORIG_SENSOR_ID) {
    fbb_.AddOffset(EOO::VT_ORIG_SENSOR_ID, ORIG_SENSOR_ID);
  }
  void add_UCT(bool UCT) {
    fbb_.AddElement<uint8_t>(EOO::VT_UCT, static_cast<uint8_t>(UCT), 0);
  }
  void add_AZIMUTH(float AZIMUTH) {
    fbb_.AddElement<float>(EOO::VT_AZIMUTH, AZIMUTH, 0.0f);
  }
  void add_AZIMUTH_UNC(float AZIMUTH_UNC) {
    fbb_.AddElement<float>(EOO::VT_AZIMUTH_UNC, AZIMUTH_UNC, 0.0f);
  }
  void add_AZIMUTH_BIAS(float AZIMUTH_BIAS) {
    fbb_.AddElement<float>(EOO::VT_AZIMUTH_BIAS, AZIMUTH_BIAS, 0.0f);
  }
  void add_AZIMUTH_RATE(float AZIMUTH_RATE) {
    fbb_.AddElement<float>(EOO::VT_AZIMUTH_RATE, AZIMUTH_RATE, 0.0f);
  }
  void add_ELEVATION(float ELEVATION) {
    fbb_.AddElement<float>(EOO::VT_ELEVATION, ELEVATION, 0.0f);
  }
  void add_ELEVATION_UNC(float ELEVATION_UNC) {
    fbb_.AddElement<float>(EOO::VT_ELEVATION_UNC, ELEVATION_UNC, 0.0f);
  }
  void add_ELEVATION_BIAS(float ELEVATION_BIAS) {
    fbb_.AddElement<float>(EOO::VT_ELEVATION_BIAS, ELEVATION_BIAS, 0.0f);
  }
  void add_ELEVATION_RATE(float ELEVATION_RATE) {
    fbb_.AddElement<float>(EOO::VT_ELEVATION_RATE, ELEVATION_RATE, 0.0f);
  }
  void add_RANGE(float RANGE) {
    fbb_.AddElement<float>(EOO::VT_RANGE, RANGE, 0.0f);
  }
  void add_RANGE_UNC(float RANGE_UNC) {
    fbb_.AddElement<float>(EOO::VT_RANGE_UNC, RANGE_UNC, 0.0f);
  }
  void add_RANGE_BIAS(float RANGE_BIAS) {
    fbb_.AddElement<float>(EOO::VT_RANGE_BIAS, RANGE_BIAS, 0.0f);
  }
  void add_RANGE_RATE(float RANGE_RATE) {
    fbb_.AddElement<float>(EOO::VT_RANGE_RATE, RANGE_RATE, 0.0f);
  }
  void add_RANGE_RATE_UNC(float RANGE_RATE_UNC) {
    fbb_.AddElement<float>(EOO::VT_RANGE_RATE_UNC, RANGE_RATE_UNC, 0.0f);
  }
  void add_RA(float RA) {
    fbb_.AddElement<float>(EOO::VT_RA, RA, 0.0f);
  }
  void add_RA_RATE(float RA_RATE) {
    fbb_.AddElement<float>(EOO::VT_RA_RATE, RA_RATE, 0.0f);
  }
  void add_RA_UNC(float RA_UNC) {
    fbb_.AddElement<float>(EOO::VT_RA_UNC, RA_UNC, 0.0f);
  }
  void add_RA_BIAS(float RA_BIAS) {
    fbb_.AddElement<float>(EOO::VT_RA_BIAS, RA_BIAS, 0.0f);
  }
  void add_DECLINATION(float DECLINATION) {
    fbb_.AddElement<float>(EOO::VT_DECLINATION, DECLINATION, 0.0f);
  }
  void add_DECLINATION_RATE(float DECLINATION_RATE) {
    fbb_.AddElement<float>(EOO::VT_DECLINATION_RATE, DECLINATION_RATE, 0.0f);
  }
  void add_DECLINATION_UNC(float DECLINATION_UNC) {
    fbb_.AddElement<float>(EOO::VT_DECLINATION_UNC, DECLINATION_UNC, 0.0f);
  }
  void add_DECLINATION_BIAS(float DECLINATION_BIAS) {
    fbb_.AddElement<float>(EOO::VT_DECLINATION_BIAS, DECLINATION_BIAS, 0.0f);
  }
  void add_LOSX(float LOSX) {
    fbb_.AddElement<float>(EOO::VT_LOSX, LOSX, 0.0f);
  }
  void add_LOSY(float LOSY) {
    fbb_.AddElement<float>(EOO::VT_LOSY, LOSY, 0.0f);
  }
  void add_LOSZ(float LOSZ) {
    fbb_.AddElement<float>(EOO::VT_LOSZ, LOSZ, 0.0f);
  }
  void add_LOS_UNC(float LOS_UNC) {
    fbb_.AddElement<float>(EOO::VT_LOS_UNC, LOS_UNC, 0.0f);
  }
  void add_LOSXVEL(float LOSXVEL) {
    fbb_.AddElement<float>(EOO::VT_LOSXVEL, LOSXVEL, 0.0f);
  }
  void add_LOSYVEL(float LOSYVEL) {
    fbb_.AddElement<float>(EOO::VT_LOSYVEL, LOSYVEL, 0.0f);
  }
  void add_LOSZVEL(float LOSZVEL) {
    fbb_.AddElement<float>(EOO::VT_LOSZVEL, LOSZVEL, 0.0f);
  }
  void add_SENLAT(float SENLAT) {
    fbb_.AddElement<float>(EOO::VT_SENLAT, SENLAT, 0.0f);
  }
  void add_SENLON(float SENLON) {
    fbb_.AddElement<float>(EOO::VT_SENLON, SENLON, 0.0f);
  }
  void add_SENALT(float SENALT) {
    fbb_.AddElement<float>(EOO::VT_SENALT, SENALT, 0.0f);
  }
  void add_SENX(float SENX) {
    fbb_.AddElement<float>(EOO::VT_SENX, SENX, 0.0f);
  }
  void add_SENY(float SENY) {
    fbb_.AddElement<float>(EOO::VT_SENY, SENY, 0.0f);
  }
  void add_SENZ(float SENZ) {
    fbb_.AddElement<float>(EOO::VT_SENZ, SENZ, 0.0f);
  }
  void add_FOV_COUNT(int32_t FOV_COUNT) {
    fbb_.AddElement<int32_t>(EOO::VT_FOV_COUNT, FOV_COUNT, 0);
  }
  void add_EXP_DURATION(float EXP_DURATION) {
    fbb_.AddElement<float>(EOO::VT_EXP_DURATION, EXP_DURATION, 0.0f);
  }
  void add_ZEROPTD(float ZEROPTD) {
    fbb_.AddElement<float>(EOO::VT_ZEROPTD, ZEROPTD, 0.0f);
  }
  void add_NET_OBJ_SIG(float NET_OBJ_SIG) {
    fbb_.AddElement<float>(EOO::VT_NET_OBJ_SIG, NET_OBJ_SIG, 0.0f);
  }
  void add_NET_OBJ_SIG_UNC(float NET_OBJ_SIG_UNC) {
    fbb_.AddElement<float>(EOO::VT_NET_OBJ_SIG_UNC, NET_OBJ_SIG_UNC, 0.0f);
  }
  void add_MAG(float MAG) {
    fbb_.AddElement<float>(EOO::VT_MAG, MAG, 0.0f);
  }
  void add_MAG_UNC(float MAG_UNC) {
    fbb_.AddElement<float>(EOO::VT_MAG_UNC, MAG_UNC, 0.0f);
  }
  void add_MAG_NORM_RANGE(float MAG_NORM_RANGE) {
    fbb_.AddElement<float>(EOO::VT_MAG_NORM_RANGE, MAG_NORM_RANGE, 0.0f);
  }
  void add_GEOLAT(float GEOLAT) {
    fbb_.AddElement<float>(EOO::VT_GEOLAT, GEOLAT, 0.0f);
  }
  void add_GEOLON(float GEOLON) {
    fbb_.AddElement<float>(EOO::VT_GEOLON, GEOLON, 0.0f);
  }
  void add_GEOALT(float GEOALT) {
    fbb_.AddElement<float>(EOO::VT_GEOALT, GEOALT, 0.0f);
  }
  void add_GEORANGE(float GEORANGE) {
    fbb_.AddElement<float>(EOO::VT_GEORANGE, GEORANGE, 0.0f);
  }
  void add_SKY_BKGRND(float SKY_BKGRND) {
    fbb_.AddElement<float>(EOO::VT_SKY_BKGRND, SKY_BKGRND, 0.0f);
  }
  void add_PRIMARY_EXTINCTION(float PRIMARY_EXTINCTION) {
    fbb_.AddElement<float>(EOO::VT_PRIMARY_EXTINCTION, PRIMARY_EXTINCTION, 0.0f);
  }
  void add_PRIMARY_EXTINCTION_UNC(float PRIMARY_EXTINCTION_UNC) {
    fbb_.AddElement<float>(EOO::VT_PRIMARY_EXTINCTION_UNC, PRIMARY_EXTINCTION_UNC, 0.0f);
  }
  void add_SOLAR_PHASE_ANGLE(float SOLAR_PHASE_ANGLE) {
    fbb_.AddElement<float>(EOO::VT_SOLAR_PHASE_ANGLE, SOLAR_PHASE_ANGLE, 0.0f);
  }
  void add_SOLAR_EQ_PHASE_ANGLE(float SOLAR_EQ_PHASE_ANGLE) {
    fbb_.AddElement<float>(EOO::VT_SOLAR_EQ_PHASE_ANGLE, SOLAR_EQ_PHASE_ANGLE, 0.0f);
  }
  void add_SOLAR_DEC_ANGLE(float SOLAR_DEC_ANGLE) {
    fbb_.AddElement<float>(EOO::VT_SOLAR_DEC_ANGLE, SOLAR_DEC_ANGLE, 0.0f);
  }
  void add_SHUTTER_DELAY(float SHUTTER_DELAY) {
    fbb_.AddElement<float>(EOO::VT_SHUTTER_DELAY, SHUTTER_DELAY, 0.0f);
  }
  void add_TIMING_BIAS(float TIMING_BIAS) {
    fbb_.AddElement<float>(EOO::VT_TIMING_BIAS, TIMING_BIAS, 0.0f);
  }
  void add_RAW_FILE_URI(::flatbuffers::Offset<::flatbuffers::String> RAW_FILE_URI) {
    fbb_.AddOffset(EOO::VT_RAW_FILE_URI, RAW_FILE_URI);
  }
  void add_INTENSITY(float INTENSITY) {
    fbb_.AddElement<float>(EOO::VT_INTENSITY, INTENSITY, 0.0f);
  }
  void add_BG_INTENSITY(float BG_INTENSITY) {
    fbb_.AddElement<float>(EOO::VT_BG_INTENSITY, BG_INTENSITY, 0.0f);
  }
  void add_DESCRIPTOR(::flatbuffers::Offset<::flatbuffers::String> DESCRIPTOR) {
    fbb_.AddOffset(EOO::VT_DESCRIPTOR, DESCRIPTOR);
  }
  void add_SOURCE(::flatbuffers::Offset<::flatbuffers::String> SOURCE) {
    fbb_.AddOffset(EOO::VT_SOURCE, SOURCE);
  }
  void add_ORIGIN(::flatbuffers::Offset<::flatbuffers::String> ORIGIN) {
    fbb_.AddOffset(EOO::VT_ORIGIN, ORIGIN);
  }
  void add_DATA_MODE(::flatbuffers::Offset<::flatbuffers::String> DATA_MODE) {
    fbb_.AddOffset(EOO::VT_DATA_MODE, DATA_MODE);
  }
  void add_CREATED_AT(::flatbuffers::Offset<::flatbuffers::String> CREATED_AT) {
    fbb_.AddOffset(EOO::VT_CREATED_AT, CREATED_AT);
  }
  void add_CREATED_BY(::flatbuffers::Offset<::flatbuffers::String> CREATED_BY) {
    fbb_.AddOffset(EOO::VT_CREATED_BY, CREATED_BY);
  }
  void add_REFERENCE_FRAME(refFrame REFERENCE_FRAME) {
    fbb_.AddElement<int8_t>(EOO::VT_REFERENCE_FRAME, static_cast<int8_t>(REFERENCE_FRAME), 0);
  }
  void add_SEN_REFERENCE_FRAME(::flatbuffers::Offset<::flatbuffers::String> SEN_REFERENCE_FRAME) {
    fbb_.AddOffset(EOO::VT_SEN_REFERENCE_FRAME, SEN_REFERENCE_FRAME);
  }
  void add_UMBRA(bool UMBRA) {
    fbb_.AddElement<uint8_t>(EOO::VT_UMBRA, static_cast<uint8_t>(UMBRA), 0);
  }
  void add_PENUMBRA(bool PENUMBRA) {
    fbb_.AddElement<uint8_t>(EOO::VT_PENUMBRA, static_cast<uint8_t>(PENUMBRA), 0);
  }
  void add_ORIG_NETWORK(::flatbuffers::Offset<::flatbuffers::String> ORIG_NETWORK) {
    fbb_.AddOffset(EOO::VT_ORIG_NETWORK, ORIG_NETWORK);
  }
  void add_SOURCE_DL(::flatbuffers::Offset<::flatbuffers::String> SOURCE_DL) {
    fbb_.AddOffset(EOO::VT_SOURCE_DL, SOURCE_DL);
  }
  void add_TYPE(::flatbuffers::Offset<::flatbuffers::String> TYPE) {
    fbb_.AddOffset(EOO::VT_TYPE, TYPE);
  }
  explicit EOOBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EOO> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EOO>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EOO> CreateEOO(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> EOBSERVATION_ID = 0,
    ::flatbuffers::Offset<::flatbuffers::String> CLASSIFICATION = 0,
    ::flatbuffers::Offset<::flatbuffers::String> OB_TIME = 0,
    float CORR_QUALITY = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> ID_ON_ORBIT = 0,
    ::flatbuffers::Offset<::flatbuffers::String> SENSOR_ID = 0,
    ::flatbuffers::Offset<::flatbuffers::String> COLLECT_METHOD = 0,
    int32_t NORAD_CAT_ID = 0,
    ::flatbuffers::Offset<::flatbuffers::String> TASK_ID = 0,
    ::flatbuffers::Offset<::flatbuffers::String> TRANSACTION_ID = 0,
    ::flatbuffers::Offset<::flatbuffers::String> TRACK_ID = 0,
    ::flatbuffers::Offset<::flatbuffers::String> OB_POSITION = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ORIG_OBJECT_ID = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ORIG_SENSOR_ID = 0,
    bool UCT = false,
    float AZIMUTH = 0.0f,
    float AZIMUTH_UNC = 0.0f,
    float AZIMUTH_BIAS = 0.0f,
    float AZIMUTH_RATE = 0.0f,
    float ELEVATION = 0.0f,
    float ELEVATION_UNC = 0.0f,
    float ELEVATION_BIAS = 0.0f,
    float ELEVATION_RATE = 0.0f,
    float RANGE = 0.0f,
    float RANGE_UNC = 0.0f,
    float RANGE_BIAS = 0.0f,
    float RANGE_RATE = 0.0f,
    float RANGE_RATE_UNC = 0.0f,
    float RA = 0.0f,
    float RA_RATE = 0.0f,
    float RA_UNC = 0.0f,
    float RA_BIAS = 0.0f,
    float DECLINATION = 0.0f,
    float DECLINATION_RATE = 0.0f,
    float DECLINATION_UNC = 0.0f,
    float DECLINATION_BIAS = 0.0f,
    float LOSX = 0.0f,
    float LOSY = 0.0f,
    float LOSZ = 0.0f,
    float LOS_UNC = 0.0f,
    float LOSXVEL = 0.0f,
    float LOSYVEL = 0.0f,
    float LOSZVEL = 0.0f,
    float SENLAT = 0.0f,
    float SENLON = 0.0f,
    float SENALT = 0.0f,
    float SENX = 0.0f,
    float SENY = 0.0f,
    float SENZ = 0.0f,
    int32_t FOV_COUNT = 0,
    float EXP_DURATION = 0.0f,
    float ZEROPTD = 0.0f,
    float NET_OBJ_SIG = 0.0f,
    float NET_OBJ_SIG_UNC = 0.0f,
    float MAG = 0.0f,
    float MAG_UNC = 0.0f,
    float MAG_NORM_RANGE = 0.0f,
    float GEOLAT = 0.0f,
    float GEOLON = 0.0f,
    float GEOALT = 0.0f,
    float GEORANGE = 0.0f,
    float SKY_BKGRND = 0.0f,
    float PRIMARY_EXTINCTION = 0.0f,
    float PRIMARY_EXTINCTION_UNC = 0.0f,
    float SOLAR_PHASE_ANGLE = 0.0f,
    float SOLAR_EQ_PHASE_ANGLE = 0.0f,
    float SOLAR_DEC_ANGLE = 0.0f,
    float SHUTTER_DELAY = 0.0f,
    float TIMING_BIAS = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> RAW_FILE_URI = 0,
    float INTENSITY = 0.0f,
    float BG_INTENSITY = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> DESCRIPTOR = 0,
    ::flatbuffers::Offset<::flatbuffers::String> SOURCE = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ORIGIN = 0,
    ::flatbuffers::Offset<::flatbuffers::String> DATA_MODE = 0,
    ::flatbuffers::Offset<::flatbuffers::String> CREATED_AT = 0,
    ::flatbuffers::Offset<::flatbuffers::String> CREATED_BY = 0,
    refFrame REFERENCE_FRAME = refFrame_ECEF,
    ::flatbuffers::Offset<::flatbuffers::String> SEN_REFERENCE_FRAME = 0,
    bool UMBRA = false,
    bool PENUMBRA = false,
    ::flatbuffers::Offset<::flatbuffers::String> ORIG_NETWORK = 0,
    ::flatbuffers::Offset<::flatbuffers::String> SOURCE_DL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> TYPE = 0) {
  EOOBuilder builder_(_fbb);
  builder_.add_TYPE(TYPE);
  builder_.add_SOURCE_DL(SOURCE_DL);
  builder_.add_ORIG_NETWORK(ORIG_NETWORK);
  builder_.add_SEN_REFERENCE_FRAME(SEN_REFERENCE_FRAME);
  builder_.add_CREATED_BY(CREATED_BY);
  builder_.add_CREATED_AT(CREATED_AT);
  builder_.add_DATA_MODE(DATA_MODE);
  builder_.add_ORIGIN(ORIGIN);
  builder_.add_SOURCE(SOURCE);
  builder_.add_DESCRIPTOR(DESCRIPTOR);
  builder_.add_BG_INTENSITY(BG_INTENSITY);
  builder_.add_INTENSITY(INTENSITY);
  builder_.add_RAW_FILE_URI(RAW_FILE_URI);
  builder_.add_TIMING_BIAS(TIMING_BIAS);
  builder_.add_SHUTTER_DELAY(SHUTTER_DELAY);
  builder_.add_SOLAR_DEC_ANGLE(SOLAR_DEC_ANGLE);
  builder_.add_SOLAR_EQ_PHASE_ANGLE(SOLAR_EQ_PHASE_ANGLE);
  builder_.add_SOLAR_PHASE_ANGLE(SOLAR_PHASE_ANGLE);
  builder_.add_PRIMARY_EXTINCTION_UNC(PRIMARY_EXTINCTION_UNC);
  builder_.add_PRIMARY_EXTINCTION(PRIMARY_EXTINCTION);
  builder_.add_SKY_BKGRND(SKY_BKGRND);
  builder_.add_GEORANGE(GEORANGE);
  builder_.add_GEOALT(GEOALT);
  builder_.add_GEOLON(GEOLON);
  builder_.add_GEOLAT(GEOLAT);
  builder_.add_MAG_NORM_RANGE(MAG_NORM_RANGE);
  builder_.add_MAG_UNC(MAG_UNC);
  builder_.add_MAG(MAG);
  builder_.add_NET_OBJ_SIG_UNC(NET_OBJ_SIG_UNC);
  builder_.add_NET_OBJ_SIG(NET_OBJ_SIG);
  builder_.add_ZEROPTD(ZEROPTD);
  builder_.add_EXP_DURATION(EXP_DURATION);
  builder_.add_FOV_COUNT(FOV_COUNT);
  builder_.add_SENZ(SENZ);
  builder_.add_SENY(SENY);
  builder_.add_SENX(SENX);
  builder_.add_SENALT(SENALT);
  builder_.add_SENLON(SENLON);
  builder_.add_SENLAT(SENLAT);
  builder_.add_LOSZVEL(LOSZVEL);
  builder_.add_LOSYVEL(LOSYVEL);
  builder_.add_LOSXVEL(LOSXVEL);
  builder_.add_LOS_UNC(LOS_UNC);
  builder_.add_LOSZ(LOSZ);
  builder_.add_LOSY(LOSY);
  builder_.add_LOSX(LOSX);
  builder_.add_DECLINATION_BIAS(DECLINATION_BIAS);
  builder_.add_DECLINATION_UNC(DECLINATION_UNC);
  builder_.add_DECLINATION_RATE(DECLINATION_RATE);
  builder_.add_DECLINATION(DECLINATION);
  builder_.add_RA_BIAS(RA_BIAS);
  builder_.add_RA_UNC(RA_UNC);
  builder_.add_RA_RATE(RA_RATE);
  builder_.add_RA(RA);
  builder_.add_RANGE_RATE_UNC(RANGE_RATE_UNC);
  builder_.add_RANGE_RATE(RANGE_RATE);
  builder_.add_RANGE_BIAS(RANGE_BIAS);
  builder_.add_RANGE_UNC(RANGE_UNC);
  builder_.add_RANGE(RANGE);
  builder_.add_ELEVATION_RATE(ELEVATION_RATE);
  builder_.add_ELEVATION_BIAS(ELEVATION_BIAS);
  builder_.add_ELEVATION_UNC(ELEVATION_UNC);
  builder_.add_ELEVATION(ELEVATION);
  builder_.add_AZIMUTH_RATE(AZIMUTH_RATE);
  builder_.add_AZIMUTH_BIAS(AZIMUTH_BIAS);
  builder_.add_AZIMUTH_UNC(AZIMUTH_UNC);
  builder_.add_AZIMUTH(AZIMUTH);
  builder_.add_ORIG_SENSOR_ID(ORIG_SENSOR_ID);
  builder_.add_ORIG_OBJECT_ID(ORIG_OBJECT_ID);
  builder_.add_OB_POSITION(OB_POSITION);
  builder_.add_TRACK_ID(TRACK_ID);
  builder_.add_TRANSACTION_ID(TRANSACTION_ID);
  builder_.add_TASK_ID(TASK_ID);
  builder_.add_NORAD_CAT_ID(NORAD_CAT_ID);
  builder_.add_COLLECT_METHOD(COLLECT_METHOD);
  builder_.add_SENSOR_ID(SENSOR_ID);
  builder_.add_ID_ON_ORBIT(ID_ON_ORBIT);
  builder_.add_CORR_QUALITY(CORR_QUALITY);
  builder_.add_OB_TIME(OB_TIME);
  builder_.add_CLASSIFICATION(CLASSIFICATION);
  builder_.add_EOBSERVATION_ID(EOBSERVATION_ID);
  builder_.add_PENUMBRA(PENUMBRA);
  builder_.add_UMBRA(UMBRA);
  builder_.add_REFERENCE_FRAME(REFERENCE_FRAME);
  builder_.add_UCT(UCT);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EOO> CreateEOODirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *EOBSERVATION_ID = nullptr,
    const char *CLASSIFICATION = nullptr,
    const char *OB_TIME = nullptr,
    float CORR_QUALITY = 0.0f,
    const char *ID_ON_ORBIT = nullptr,
    const char *SENSOR_ID = nullptr,
    const char *COLLECT_METHOD = nullptr,
    int32_t NORAD_CAT_ID = 0,
    const char *TASK_ID = nullptr,
    const char *TRANSACTION_ID = nullptr,
    const char *TRACK_ID = nullptr,
    const char *OB_POSITION = nullptr,
    const char *ORIG_OBJECT_ID = nullptr,
    const char *ORIG_SENSOR_ID = nullptr,
    bool UCT = false,
    float AZIMUTH = 0.0f,
    float AZIMUTH_UNC = 0.0f,
    float AZIMUTH_BIAS = 0.0f,
    float AZIMUTH_RATE = 0.0f,
    float ELEVATION = 0.0f,
    float ELEVATION_UNC = 0.0f,
    float ELEVATION_BIAS = 0.0f,
    float ELEVATION_RATE = 0.0f,
    float RANGE = 0.0f,
    float RANGE_UNC = 0.0f,
    float RANGE_BIAS = 0.0f,
    float RANGE_RATE = 0.0f,
    float RANGE_RATE_UNC = 0.0f,
    float RA = 0.0f,
    float RA_RATE = 0.0f,
    float RA_UNC = 0.0f,
    float RA_BIAS = 0.0f,
    float DECLINATION = 0.0f,
    float DECLINATION_RATE = 0.0f,
    float DECLINATION_UNC = 0.0f,
    float DECLINATION_BIAS = 0.0f,
    float LOSX = 0.0f,
    float LOSY = 0.0f,
    float LOSZ = 0.0f,
    float LOS_UNC = 0.0f,
    float LOSXVEL = 0.0f,
    float LOSYVEL = 0.0f,
    float LOSZVEL = 0.0f,
    float SENLAT = 0.0f,
    float SENLON = 0.0f,
    float SENALT = 0.0f,
    float SENX = 0.0f,
    float SENY = 0.0f,
    float SENZ = 0.0f,
    int32_t FOV_COUNT = 0,
    float EXP_DURATION = 0.0f,
    float ZEROPTD = 0.0f,
    float NET_OBJ_SIG = 0.0f,
    float NET_OBJ_SIG_UNC = 0.0f,
    float MAG = 0.0f,
    float MAG_UNC = 0.0f,
    float MAG_NORM_RANGE = 0.0f,
    float GEOLAT = 0.0f,
    float GEOLON = 0.0f,
    float GEOALT = 0.0f,
    float GEORANGE = 0.0f,
    float SKY_BKGRND = 0.0f,
    float PRIMARY_EXTINCTION = 0.0f,
    float PRIMARY_EXTINCTION_UNC = 0.0f,
    float SOLAR_PHASE_ANGLE = 0.0f,
    float SOLAR_EQ_PHASE_ANGLE = 0.0f,
    float SOLAR_DEC_ANGLE = 0.0f,
    float SHUTTER_DELAY = 0.0f,
    float TIMING_BIAS = 0.0f,
    const char *RAW_FILE_URI = nullptr,
    float INTENSITY = 0.0f,
    float BG_INTENSITY = 0.0f,
    const char *DESCRIPTOR = nullptr,
    const char *SOURCE = nullptr,
    const char *ORIGIN = nullptr,
    const char *DATA_MODE = nullptr,
    const char *CREATED_AT = nullptr,
    const char *CREATED_BY = nullptr,
    refFrame REFERENCE_FRAME = refFrame_ECEF,
    const char *SEN_REFERENCE_FRAME = nullptr,
    bool UMBRA = false,
    bool PENUMBRA = false,
    const char *ORIG_NETWORK = nullptr,
    const char *SOURCE_DL = nullptr,
    const char *TYPE = nullptr) {
  auto EOBSERVATION_ID__ = EOBSERVATION_ID ? _fbb.CreateString(EOBSERVATION_ID) : 0;
  auto CLASSIFICATION__ = CLASSIFICATION ? _fbb.CreateString(CLASSIFICATION) : 0;
  auto OB_TIME__ = OB_TIME ? _fbb.CreateString(OB_TIME) : 0;
  auto ID_ON_ORBIT__ = ID_ON_ORBIT ? _fbb.CreateString(ID_ON_ORBIT) : 0;
  auto SENSOR_ID__ = SENSOR_ID ? _fbb.CreateString(SENSOR_ID) : 0;
  auto COLLECT_METHOD__ = COLLECT_METHOD ? _fbb.CreateString(COLLECT_METHOD) : 0;
  auto TASK_ID__ = TASK_ID ? _fbb.CreateString(TASK_ID) : 0;
  auto TRANSACTION_ID__ = TRANSACTION_ID ? _fbb.CreateString(TRANSACTION_ID) : 0;
  auto TRACK_ID__ = TRACK_ID ? _fbb.CreateString(TRACK_ID) : 0;
  auto OB_POSITION__ = OB_POSITION ? _fbb.CreateString(OB_POSITION) : 0;
  auto ORIG_OBJECT_ID__ = ORIG_OBJECT_ID ? _fbb.CreateString(ORIG_OBJECT_ID) : 0;
  auto ORIG_SENSOR_ID__ = ORIG_SENSOR_ID ? _fbb.CreateString(ORIG_SENSOR_ID) : 0;
  auto RAW_FILE_URI__ = RAW_FILE_URI ? _fbb.CreateString(RAW_FILE_URI) : 0;
  auto DESCRIPTOR__ = DESCRIPTOR ? _fbb.CreateString(DESCRIPTOR) : 0;
  auto SOURCE__ = SOURCE ? _fbb.CreateString(SOURCE) : 0;
  auto ORIGIN__ = ORIGIN ? _fbb.CreateString(ORIGIN) : 0;
  auto DATA_MODE__ = DATA_MODE ? _fbb.CreateString(DATA_MODE) : 0;
  auto CREATED_AT__ = CREATED_AT ? _fbb.CreateString(CREATED_AT) : 0;
  auto CREATED_BY__ = CREATED_BY ? _fbb.CreateString(CREATED_BY) : 0;
  auto SEN_REFERENCE_FRAME__ = SEN_REFERENCE_FRAME ? _fbb.CreateString(SEN_REFERENCE_FRAME) : 0;
  auto ORIG_NETWORK__ = ORIG_NETWORK ? _fbb.CreateString(ORIG_NETWORK) : 0;
  auto SOURCE_DL__ = SOURCE_DL ? _fbb.CreateString(SOURCE_DL) : 0;
  auto TYPE__ = TYPE ? _fbb.CreateString(TYPE) : 0;
  return CreateEOO(
      _fbb,
      EOBSERVATION_ID__,
      CLASSIFICATION__,
      OB_TIME__,
      CORR_QUALITY,
      ID_ON_ORBIT__,
      SENSOR_ID__,
      COLLECT_METHOD__,
      NORAD_CAT_ID,
      TASK_ID__,
      TRANSACTION_ID__,
      TRACK_ID__,
      OB_POSITION__,
      ORIG_OBJECT_ID__,
      ORIG_SENSOR_ID__,
      UCT,
      AZIMUTH,
      AZIMUTH_UNC,
      AZIMUTH_BIAS,
      AZIMUTH_RATE,
      ELEVATION,
      ELEVATION_UNC,
      ELEVATION_BIAS,
      ELEVATION_RATE,
      RANGE,
      RANGE_UNC,
      RANGE_BIAS,
      RANGE_RATE,
      RANGE_RATE_UNC,
      RA,
      RA_RATE,
      RA_UNC,
      RA_BIAS,
      DECLINATION,
      DECLINATION_RATE,
      DECLINATION_UNC,
      DECLINATION_BIAS,
      LOSX,
      LOSY,
      LOSZ,
      LOS_UNC,
      LOSXVEL,
      LOSYVEL,
      LOSZVEL,
      SENLAT,
      SENLON,
      SENALT,
      SENX,
      SENY,
      SENZ,
      FOV_COUNT,
      EXP_DURATION,
      ZEROPTD,
      NET_OBJ_SIG,
      NET_OBJ_SIG_UNC,
      MAG,
      MAG_UNC,
      MAG_NORM_RANGE,
      GEOLAT,
      GEOLON,
      GEOALT,
      GEORANGE,
      SKY_BKGRND,
      PRIMARY_EXTINCTION,
      PRIMARY_EXTINCTION_UNC,
      SOLAR_PHASE_ANGLE,
      SOLAR_EQ_PHASE_ANGLE,
      SOLAR_DEC_ANGLE,
      SHUTTER_DELAY,
      TIMING_BIAS,
      RAW_FILE_URI__,
      INTENSITY,
      BG_INTENSITY,
      DESCRIPTOR__,
      SOURCE__,
      ORIGIN__,
      DATA_MODE__,
      CREATED_AT__,
      CREATED_BY__,
      REFERENCE_FRAME,
      SEN_REFERENCE_FRAME__,
      UMBRA,
      PENUMBRA,
      ORIG_NETWORK__,
      SOURCE_DL__,
      TYPE__);
}

struct EOOCOLLECTION FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EOOCOLLECTIONBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORDS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<EOO>> *RECORDS() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<EOO>> *>(VT_RECORDS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RECORDS) &&
           verifier.VerifyVector(RECORDS()) &&
           verifier.VerifyVectorOfTables(RECORDS()) &&
           verifier.EndTable();
  }
};

struct EOOCOLLECTIONBuilder {
  typedef EOOCOLLECTION Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_RECORDS(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<EOO>>> RECORDS) {
    fbb_.AddOffset(EOOCOLLECTION::VT_RECORDS, RECORDS);
  }
  explicit EOOCOLLECTIONBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EOOCOLLECTION> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EOOCOLLECTION>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EOOCOLLECTION> CreateEOOCOLLECTION(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<EOO>>> RECORDS = 0) {
  EOOCOLLECTIONBuilder builder_(_fbb);
  builder_.add_RECORDS(RECORDS);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EOOCOLLECTION> CreateEOOCOLLECTIONDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<EOO>> *RECORDS = nullptr) {
  auto RECORDS__ = RECORDS ? _fbb.CreateVector<::flatbuffers::Offset<EOO>>(*RECORDS) : 0;
  return CreateEOOCOLLECTION(
      _fbb,
      RECORDS__);
}

inline const EOO *GetEOO(const void *buf) {
  return ::flatbuffers::GetRoot<EOO>(buf);
}

inline const EOO *GetSizePrefixedEOO(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EOO>(buf);
}

inline const char *EOOIdentifier() {
  return "$EOO";
}

inline bool EOOBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EOOIdentifier());
}

inline bool SizePrefixedEOOBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EOOIdentifier(), true);
}

inline bool VerifyEOOBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EOO>(EOOIdentifier());
}

inline bool VerifySizePrefixedEOOBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EOO>(EOOIdentifier());
}

inline void FinishEOOBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EOO> root) {
  fbb.Finish(root, EOOIdentifier());
}

inline void FinishSizePrefixedEOOBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EOO> root) {
  fbb.FinishSizePrefixed(root, EOOIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
