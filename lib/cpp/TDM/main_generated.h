// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

#include "main_generated.h"

struct TDM;
struct TDMBuilder;

struct TDMCOLLECTION;
struct TDMCOLLECTIONBuilder;

/// Tracking Data Message
struct TDM FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TDMBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBSERVER_ID = 4,
    VT_OBSERVER_X = 6,
    VT_OBSERVER_Y = 8,
    VT_OBSERVER_Z = 10,
    VT_OBSERVER_VX = 12,
    VT_OBSERVER_VY = 14,
    VT_OBSERVER_VZ = 16,
    VT_OBSERVER_POSITION_REFERENCE_FRAME = 18,
    VT_OBS_REFERENCE_FRAME = 20,
    VT_EPOCH = 22,
    VT_CCSDS_TDM_VERS = 24,
    VT_COMMENT = 26,
    VT_CREATION_DATE = 28,
    VT_ORIGINATOR = 30,
    VT_META_START = 32,
    VT_TIME_SYSTEM = 34,
    VT_START_TIME = 36,
    VT_STOP_TIME = 38,
    VT_PARTICIPANT_1 = 40,
    VT_PARTICIPANT_2 = 42,
    VT_PARTICIPANT_3 = 44,
    VT_PARTICIPANT_4 = 46,
    VT_PARTICIPANT_5 = 48,
    VT_MODE = 50,
    VT_PATH_1 = 52,
    VT_PATH_2 = 54,
    VT_TRANSMIT_BAND = 56,
    VT_RECEIVE_BAND = 58,
    VT_INTEGRATION_INTERVAL = 60,
    VT_INTEGRATION_REF = 62,
    VT_RECEIVE_DELAY_2 = 64,
    VT_RECEIVE_DELAY_3 = 66,
    VT_DATA_QUALITY = 68,
    VT_META_STOP = 70,
    VT_DATA_START = 72,
    VT_TRANSMIT_FREQ_1 = 74,
    VT_RECEIVE_FREQ = 76,
    VT_DATA_STOP = 78,
    VT_TIMETAG_REF = 80,
    VT_ANGLE_TYPE = 82,
    VT_ANGLE_1 = 84,
    VT_ANGLE_2 = 86,
    VT_ANGLE_UNCERTAINTY_1 = 88,
    VT_ANGLE_UNCERTAINTY_2 = 90,
    VT_RANGE_RATE = 92,
    VT_RANGE_UNCERTAINTY = 94,
    VT_RANGE_MODE = 96,
    VT_RANGE_MODULUS = 98,
    VT_CORRECTION_ANGLE_1 = 100,
    VT_CORRECTION_ANGLE_2 = 102,
    VT_CORRECTIONS_APPLIED = 104,
    VT_TROPO_DRY = 106,
    VT_TROPO_WET = 108,
    VT_STEC = 110,
    VT_PRESSURE = 112,
    VT_RHUMIDITY = 114,
    VT_TEMPERATURE = 116,
    VT_CLOCK_BIAS = 118,
    VT_CLOCK_DRIFT = 120
  };
  /// Unique identifier for the observation OBSERVER -  [Specific CCSDS Document]
  const ::flatbuffers::String *OBSERVER_ID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBSERVER_ID);
  }
  /// Cartesian X coordinate of the OBSERVER location in chosen reference frame
  double OBSERVER_X() const {
    return GetField<double>(VT_OBSERVER_X, 0.0);
  }
  /// Cartesian Y coordinate of the OBSERVER location in chosen reference frame 
  double OBSERVER_Y() const {
    return GetField<double>(VT_OBSERVER_Y, 0.0);
  }
  /// Cartesian Z coordinate of the OBSERVER location in chosen reference frame 
  double OBSERVER_Z() const {
    return GetField<double>(VT_OBSERVER_Z, 0.0);
  }
  /// Cartesian X coordinate of the OBSERVER velocity in chosen reference frame
  double OBSERVER_VX() const {
    return GetField<double>(VT_OBSERVER_VX, 0.0);
  }
  /// Cartesian Y coordinate of the OBSERVER velocity in chosen reference frame 
  double OBSERVER_VY() const {
    return GetField<double>(VT_OBSERVER_VY, 0.0);
  }
  /// Cartesian Z coordinate of the OBSERVER velocity in chosen reference frame 
  double OBSERVER_VZ() const {
    return GetField<double>(VT_OBSERVER_VZ, 0.0);
  }
  /// Reference frame used for OBSERVER location Cartesian coordinates (e.g., ECEF, ECI)
  refFrame OBSERVER_POSITION_REFERENCE_FRAME() const {
    return static_cast<refFrame>(GetField<int8_t>(VT_OBSERVER_POSITION_REFERENCE_FRAME, 0));
  }
  /// Reference frame used for obs location Cartesian coordinates (e.g., ECEF, ECI)
  refFrame OBS_REFERENCE_FRAME() const {
    return static_cast<refFrame>(GetField<int8_t>(VT_OBS_REFERENCE_FRAME, 0));
  }
  /// Epoch time or observation time, in ISO 8601 UTC format -  CCSDS 503.0-B-1
  const ::flatbuffers::String *EPOCH() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EPOCH);
  }
  /// TDM version number -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *CCSDS_TDM_VERS() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CCSDS_TDM_VERS);
  }
  /// Comments regarding TDM -  various sections, e.g., Page D-9
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *COMMENT() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_COMMENT);
  }
  /// Date of TDM creation -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *CREATION_DATE() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATION_DATE);
  }
  /// Originator of the TDM -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *ORIGINATOR() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGINATOR);
  }
  /// Start of metadata section -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *META_START() const {
    return GetPointer<const ::flatbuffers::String *>(VT_META_START);
  }
  /// Time system used -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *TIME_SYSTEM() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIME_SYSTEM);
  }
  /// Start time of the data -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *START_TIME() const {
    return GetPointer<const ::flatbuffers::String *>(VT_START_TIME);
  }
  /// Stop time of the data -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *STOP_TIME() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STOP_TIME);
  }
  /// First participant in the TDM -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *PARTICIPANT_1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARTICIPANT_1);
  }
  /// Second participant in the TDM -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *PARTICIPANT_2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARTICIPANT_2);
  }
  /// Third participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *PARTICIPANT_3() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARTICIPANT_3);
  }
  /// Fourth participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *PARTICIPANT_4() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARTICIPANT_4);
  }
  /// Fifth participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9, max participants
  const ::flatbuffers::String *PARTICIPANT_5() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARTICIPANT_5);
  }
  /// Mode of TDM -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *MODE() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODE);
  }
  /// First path in TDM -  CCSDS 503.0-B-1, Page D-9
  uint16_t PATH_1() const {
    return GetField<uint16_t>(VT_PATH_1, 0);
  }
  /// Second path in TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
  uint16_t PATH_2() const {
    return GetField<uint16_t>(VT_PATH_2, 0);
  }
  /// Transmit band -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *TRANSMIT_BAND() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSMIT_BAND);
  }
  /// Receive band -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *RECEIVE_BAND() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVE_BAND);
  }
  /// Integration interval -  CCSDS 503.0-B-1, Page D-9
  float INTEGRATION_INTERVAL() const {
    return GetField<float>(VT_INTEGRATION_INTERVAL, 0.0f);
  }
  /// Integration reference -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *INTEGRATION_REF() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INTEGRATION_REF);
  }
  /// Receive delay for second participant -  CCSDS 503.0-B-1, Page D-9
  double RECEIVE_DELAY_2() const {
    return GetField<double>(VT_RECEIVE_DELAY_2, 0.0);
  }
  /// Receive delay for third participant -  CCSDS 503.0-B-1, Page D-9
  double RECEIVE_DELAY_3() const {
    return GetField<double>(VT_RECEIVE_DELAY_3, 0.0);
  }
  /// Data quality -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *DATA_QUALITY() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATA_QUALITY);
  }
  /// End of metadata section -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *META_STOP() const {
    return GetPointer<const ::flatbuffers::String *>(VT_META_STOP);
  }
  /// Start of data section -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *DATA_START() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATA_START);
  }
  /// Transmit frequency for first participant -  CCSDS 503.0-B-1, Page D-9
  double TRANSMIT_FREQ_1() const {
    return GetField<double>(VT_TRANSMIT_FREQ_1, 0.0);
  }
  /// Receive frequency -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::Vector<double> *RECEIVE_FREQ() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_RECEIVE_FREQ);
  }
  /// End of data section -  CCSDS 503.0-B-1, Page D-9
  const ::flatbuffers::String *DATA_STOP() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATA_STOP);
  }
  /// Additional properties as required by the specific application of the TDM...
  /// Reference for time tagging -  CCSDS 503.0-B-1, Page D-10
  const ::flatbuffers::String *TIMETAG_REF() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIMETAG_REF);
  }
  /// Type of angle data -  CCSDS 503.0-B-1, Page D-12
  /// Can be AZEL, RADEC, XEYN, XSYE, or another value with provided ICD
  const ::flatbuffers::String *ANGLE_TYPE() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ANGLE_TYPE);
  }
  /// First angle value -  CCSDS 503.0-B-1, Page D-12
  const ::flatbuffers::Vector<float> *ANGLE_1() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_ANGLE_1);
  }
  /// Second angle value -  CCSDS 503.0-B-1, Page D-12
  const ::flatbuffers::Vector<float> *ANGLE_2() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_ANGLE_2);
  }
  /// Uncertainty of first angle -  CCSDS 503.0-B-1
  float ANGLE_UNCERTAINTY_1() const {
    return GetField<float>(VT_ANGLE_UNCERTAINTY_1, 0.0f);
  }
  /// Uncertainty of second angle -  CCSDS 503.0-B-1
  float ANGLE_UNCERTAINTY_2() const {
    return GetField<float>(VT_ANGLE_UNCERTAINTY_2, 0.0f);
  }
  /// Rate of change of range -  CCSDS 503.0-B-1
  double RANGE_RATE() const {
    return GetField<double>(VT_RANGE_RATE, 0.0);
  }
  /// Uncertainty in range -  CCSDS 503.0-B-1
  double RANGE_UNCERTAINTY() const {
    return GetField<double>(VT_RANGE_UNCERTAINTY, 0.0);
  }
  /// Mode of range data -  CCSDS 503.0-B-1, Page D-10
  const ::flatbuffers::String *RANGE_MODE() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RANGE_MODE);
  }
  /// Modulus value for range data -  CCSDS 503.0-B-1, Page D-10
  double RANGE_MODULUS() const {
    return GetField<double>(VT_RANGE_MODULUS, 0.0);
  }
  /// First correction angle -  CCSDS 503.0-B-1, Page D-12
  float CORRECTION_ANGLE_1() const {
    return GetField<float>(VT_CORRECTION_ANGLE_1, 0.0f);
  }
  /// Second correction angle -  CCSDS 503.0-B-1, Page D-12
  float CORRECTION_ANGLE_2() const {
    return GetField<float>(VT_CORRECTION_ANGLE_2, 0.0f);
  }
  /// Indicator of corrections applied -  CCSDS 503.0-B-1, Page D-12
  const ::flatbuffers::String *CORRECTIONS_APPLIED() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CORRECTIONS_APPLIED);
  }
  /// Dry component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
  const ::flatbuffers::Vector<double> *TROPO_DRY() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_TROPO_DRY);
  }
  /// Wet component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
  const ::flatbuffers::Vector<double> *TROPO_WET() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_TROPO_WET);
  }
  /// Slant total electron content -  CCSDS 503.0-B-1, Page D-13
  const ::flatbuffers::Vector<double> *STEC() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_STEC);
  }
  /// Atmospheric pressure -  CCSDS 503.0-B-1, Page D-14
  const ::flatbuffers::Vector<double> *PRESSURE() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_PRESSURE);
  }
  /// Relative humidity -  CCSDS 503.0-B-1, Page D-14
  const ::flatbuffers::Vector<double> *RHUMIDITY() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_RHUMIDITY);
  }
  /// Ambient temperature -  CCSDS 503.0-B-1, Page D-14
  const ::flatbuffers::Vector<double> *TEMPERATURE() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_TEMPERATURE);
  }
  /// Clock bias values -  CCSDS 503.0-B-1, Page D-15
  const ::flatbuffers::Vector<double> *CLOCK_BIAS() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_CLOCK_BIAS);
  }
  /// Clock drift values -  CCSDS 503.0-B-1, Page D-15
  const ::flatbuffers::Vector<double> *CLOCK_DRIFT() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_CLOCK_DRIFT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBSERVER_ID) &&
           verifier.VerifyString(OBSERVER_ID()) &&
           VerifyField<double>(verifier, VT_OBSERVER_X, 8) &&
           VerifyField<double>(verifier, VT_OBSERVER_Y, 8) &&
           VerifyField<double>(verifier, VT_OBSERVER_Z, 8) &&
           VerifyField<double>(verifier, VT_OBSERVER_VX, 8) &&
           VerifyField<double>(verifier, VT_OBSERVER_VY, 8) &&
           VerifyField<double>(verifier, VT_OBSERVER_VZ, 8) &&
           VerifyField<int8_t>(verifier, VT_OBSERVER_POSITION_REFERENCE_FRAME, 1) &&
           VerifyField<int8_t>(verifier, VT_OBS_REFERENCE_FRAME, 1) &&
           VerifyOffset(verifier, VT_EPOCH) &&
           verifier.VerifyString(EPOCH()) &&
           VerifyOffset(verifier, VT_CCSDS_TDM_VERS) &&
           verifier.VerifyString(CCSDS_TDM_VERS()) &&
           VerifyOffset(verifier, VT_COMMENT) &&
           verifier.VerifyVector(COMMENT()) &&
           verifier.VerifyVectorOfStrings(COMMENT()) &&
           VerifyOffset(verifier, VT_CREATION_DATE) &&
           verifier.VerifyString(CREATION_DATE()) &&
           VerifyOffset(verifier, VT_ORIGINATOR) &&
           verifier.VerifyString(ORIGINATOR()) &&
           VerifyOffset(verifier, VT_META_START) &&
           verifier.VerifyString(META_START()) &&
           VerifyOffset(verifier, VT_TIME_SYSTEM) &&
           verifier.VerifyString(TIME_SYSTEM()) &&
           VerifyOffset(verifier, VT_START_TIME) &&
           verifier.VerifyString(START_TIME()) &&
           VerifyOffset(verifier, VT_STOP_TIME) &&
           verifier.VerifyString(STOP_TIME()) &&
           VerifyOffset(verifier, VT_PARTICIPANT_1) &&
           verifier.VerifyString(PARTICIPANT_1()) &&
           VerifyOffset(verifier, VT_PARTICIPANT_2) &&
           verifier.VerifyString(PARTICIPANT_2()) &&
           VerifyOffset(verifier, VT_PARTICIPANT_3) &&
           verifier.VerifyString(PARTICIPANT_3()) &&
           VerifyOffset(verifier, VT_PARTICIPANT_4) &&
           verifier.VerifyString(PARTICIPANT_4()) &&
           VerifyOffset(verifier, VT_PARTICIPANT_5) &&
           verifier.VerifyString(PARTICIPANT_5()) &&
           VerifyOffset(verifier, VT_MODE) &&
           verifier.VerifyString(MODE()) &&
           VerifyField<uint16_t>(verifier, VT_PATH_1, 2) &&
           VerifyField<uint16_t>(verifier, VT_PATH_2, 2) &&
           VerifyOffset(verifier, VT_TRANSMIT_BAND) &&
           verifier.VerifyString(TRANSMIT_BAND()) &&
           VerifyOffset(verifier, VT_RECEIVE_BAND) &&
           verifier.VerifyString(RECEIVE_BAND()) &&
           VerifyField<float>(verifier, VT_INTEGRATION_INTERVAL, 4) &&
           VerifyOffset(verifier, VT_INTEGRATION_REF) &&
           verifier.VerifyString(INTEGRATION_REF()) &&
           VerifyField<double>(verifier, VT_RECEIVE_DELAY_2, 8) &&
           VerifyField<double>(verifier, VT_RECEIVE_DELAY_3, 8) &&
           VerifyOffset(verifier, VT_DATA_QUALITY) &&
           verifier.VerifyString(DATA_QUALITY()) &&
           VerifyOffset(verifier, VT_META_STOP) &&
           verifier.VerifyString(META_STOP()) &&
           VerifyOffset(verifier, VT_DATA_START) &&
           verifier.VerifyString(DATA_START()) &&
           VerifyField<double>(verifier, VT_TRANSMIT_FREQ_1, 8) &&
           VerifyOffset(verifier, VT_RECEIVE_FREQ) &&
           verifier.VerifyVector(RECEIVE_FREQ()) &&
           VerifyOffset(verifier, VT_DATA_STOP) &&
           verifier.VerifyString(DATA_STOP()) &&
           VerifyOffset(verifier, VT_TIMETAG_REF) &&
           verifier.VerifyString(TIMETAG_REF()) &&
           VerifyOffset(verifier, VT_ANGLE_TYPE) &&
           verifier.VerifyString(ANGLE_TYPE()) &&
           VerifyOffset(verifier, VT_ANGLE_1) &&
           verifier.VerifyVector(ANGLE_1()) &&
           VerifyOffset(verifier, VT_ANGLE_2) &&
           verifier.VerifyVector(ANGLE_2()) &&
           VerifyField<float>(verifier, VT_ANGLE_UNCERTAINTY_1, 4) &&
           VerifyField<float>(verifier, VT_ANGLE_UNCERTAINTY_2, 4) &&
           VerifyField<double>(verifier, VT_RANGE_RATE, 8) &&
           VerifyField<double>(verifier, VT_RANGE_UNCERTAINTY, 8) &&
           VerifyOffset(verifier, VT_RANGE_MODE) &&
           verifier.VerifyString(RANGE_MODE()) &&
           VerifyField<double>(verifier, VT_RANGE_MODULUS, 8) &&
           VerifyField<float>(verifier, VT_CORRECTION_ANGLE_1, 4) &&
           VerifyField<float>(verifier, VT_CORRECTION_ANGLE_2, 4) &&
           VerifyOffset(verifier, VT_CORRECTIONS_APPLIED) &&
           verifier.VerifyString(CORRECTIONS_APPLIED()) &&
           VerifyOffset(verifier, VT_TROPO_DRY) &&
           verifier.VerifyVector(TROPO_DRY()) &&
           VerifyOffset(verifier, VT_TROPO_WET) &&
           verifier.VerifyVector(TROPO_WET()) &&
           VerifyOffset(verifier, VT_STEC) &&
           verifier.VerifyVector(STEC()) &&
           VerifyOffset(verifier, VT_PRESSURE) &&
           verifier.VerifyVector(PRESSURE()) &&
           VerifyOffset(verifier, VT_RHUMIDITY) &&
           verifier.VerifyVector(RHUMIDITY()) &&
           VerifyOffset(verifier, VT_TEMPERATURE) &&
           verifier.VerifyVector(TEMPERATURE()) &&
           VerifyOffset(verifier, VT_CLOCK_BIAS) &&
           verifier.VerifyVector(CLOCK_BIAS()) &&
           VerifyOffset(verifier, VT_CLOCK_DRIFT) &&
           verifier.VerifyVector(CLOCK_DRIFT()) &&
           verifier.EndTable();
  }
};

struct TDMBuilder {
  typedef TDM Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_OBSERVER_ID(::flatbuffers::Offset<::flatbuffers::String> OBSERVER_ID) {
    fbb_.AddOffset(TDM::VT_OBSERVER_ID, OBSERVER_ID);
  }
  void add_OBSERVER_X(double OBSERVER_X) {
    fbb_.AddElement<double>(TDM::VT_OBSERVER_X, OBSERVER_X, 0.0);
  }
  void add_OBSERVER_Y(double OBSERVER_Y) {
    fbb_.AddElement<double>(TDM::VT_OBSERVER_Y, OBSERVER_Y, 0.0);
  }
  void add_OBSERVER_Z(double OBSERVER_Z) {
    fbb_.AddElement<double>(TDM::VT_OBSERVER_Z, OBSERVER_Z, 0.0);
  }
  void add_OBSERVER_VX(double OBSERVER_VX) {
    fbb_.AddElement<double>(TDM::VT_OBSERVER_VX, OBSERVER_VX, 0.0);
  }
  void add_OBSERVER_VY(double OBSERVER_VY) {
    fbb_.AddElement<double>(TDM::VT_OBSERVER_VY, OBSERVER_VY, 0.0);
  }
  void add_OBSERVER_VZ(double OBSERVER_VZ) {
    fbb_.AddElement<double>(TDM::VT_OBSERVER_VZ, OBSERVER_VZ, 0.0);
  }
  void add_OBSERVER_POSITION_REFERENCE_FRAME(refFrame OBSERVER_POSITION_REFERENCE_FRAME) {
    fbb_.AddElement<int8_t>(TDM::VT_OBSERVER_POSITION_REFERENCE_FRAME, static_cast<int8_t>(OBSERVER_POSITION_REFERENCE_FRAME), 0);
  }
  void add_OBS_REFERENCE_FRAME(refFrame OBS_REFERENCE_FRAME) {
    fbb_.AddElement<int8_t>(TDM::VT_OBS_REFERENCE_FRAME, static_cast<int8_t>(OBS_REFERENCE_FRAME), 0);
  }
  void add_EPOCH(::flatbuffers::Offset<::flatbuffers::String> EPOCH) {
    fbb_.AddOffset(TDM::VT_EPOCH, EPOCH);
  }
  void add_CCSDS_TDM_VERS(::flatbuffers::Offset<::flatbuffers::String> CCSDS_TDM_VERS) {
    fbb_.AddOffset(TDM::VT_CCSDS_TDM_VERS, CCSDS_TDM_VERS);
  }
  void add_COMMENT(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> COMMENT) {
    fbb_.AddOffset(TDM::VT_COMMENT, COMMENT);
  }
  void add_CREATION_DATE(::flatbuffers::Offset<::flatbuffers::String> CREATION_DATE) {
    fbb_.AddOffset(TDM::VT_CREATION_DATE, CREATION_DATE);
  }
  void add_ORIGINATOR(::flatbuffers::Offset<::flatbuffers::String> ORIGINATOR) {
    fbb_.AddOffset(TDM::VT_ORIGINATOR, ORIGINATOR);
  }
  void add_META_START(::flatbuffers::Offset<::flatbuffers::String> META_START) {
    fbb_.AddOffset(TDM::VT_META_START, META_START);
  }
  void add_TIME_SYSTEM(::flatbuffers::Offset<::flatbuffers::String> TIME_SYSTEM) {
    fbb_.AddOffset(TDM::VT_TIME_SYSTEM, TIME_SYSTEM);
  }
  void add_START_TIME(::flatbuffers::Offset<::flatbuffers::String> START_TIME) {
    fbb_.AddOffset(TDM::VT_START_TIME, START_TIME);
  }
  void add_STOP_TIME(::flatbuffers::Offset<::flatbuffers::String> STOP_TIME) {
    fbb_.AddOffset(TDM::VT_STOP_TIME, STOP_TIME);
  }
  void add_PARTICIPANT_1(::flatbuffers::Offset<::flatbuffers::String> PARTICIPANT_1) {
    fbb_.AddOffset(TDM::VT_PARTICIPANT_1, PARTICIPANT_1);
  }
  void add_PARTICIPANT_2(::flatbuffers::Offset<::flatbuffers::String> PARTICIPANT_2) {
    fbb_.AddOffset(TDM::VT_PARTICIPANT_2, PARTICIPANT_2);
  }
  void add_PARTICIPANT_3(::flatbuffers::Offset<::flatbuffers::String> PARTICIPANT_3) {
    fbb_.AddOffset(TDM::VT_PARTICIPANT_3, PARTICIPANT_3);
  }
  void add_PARTICIPANT_4(::flatbuffers::Offset<::flatbuffers::String> PARTICIPANT_4) {
    fbb_.AddOffset(TDM::VT_PARTICIPANT_4, PARTICIPANT_4);
  }
  void add_PARTICIPANT_5(::flatbuffers::Offset<::flatbuffers::String> PARTICIPANT_5) {
    fbb_.AddOffset(TDM::VT_PARTICIPANT_5, PARTICIPANT_5);
  }
  void add_MODE(::flatbuffers::Offset<::flatbuffers::String> MODE) {
    fbb_.AddOffset(TDM::VT_MODE, MODE);
  }
  void add_PATH_1(uint16_t PATH_1) {
    fbb_.AddElement<uint16_t>(TDM::VT_PATH_1, PATH_1, 0);
  }
  void add_PATH_2(uint16_t PATH_2) {
    fbb_.AddElement<uint16_t>(TDM::VT_PATH_2, PATH_2, 0);
  }
  void add_TRANSMIT_BAND(::flatbuffers::Offset<::flatbuffers::String> TRANSMIT_BAND) {
    fbb_.AddOffset(TDM::VT_TRANSMIT_BAND, TRANSMIT_BAND);
  }
  void add_RECEIVE_BAND(::flatbuffers::Offset<::flatbuffers::String> RECEIVE_BAND) {
    fbb_.AddOffset(TDM::VT_RECEIVE_BAND, RECEIVE_BAND);
  }
  void add_INTEGRATION_INTERVAL(float INTEGRATION_INTERVAL) {
    fbb_.AddElement<float>(TDM::VT_INTEGRATION_INTERVAL, INTEGRATION_INTERVAL, 0.0f);
  }
  void add_INTEGRATION_REF(::flatbuffers::Offset<::flatbuffers::String> INTEGRATION_REF) {
    fbb_.AddOffset(TDM::VT_INTEGRATION_REF, INTEGRATION_REF);
  }
  void add_RECEIVE_DELAY_2(double RECEIVE_DELAY_2) {
    fbb_.AddElement<double>(TDM::VT_RECEIVE_DELAY_2, RECEIVE_DELAY_2, 0.0);
  }
  void add_RECEIVE_DELAY_3(double RECEIVE_DELAY_3) {
    fbb_.AddElement<double>(TDM::VT_RECEIVE_DELAY_3, RECEIVE_DELAY_3, 0.0);
  }
  void add_DATA_QUALITY(::flatbuffers::Offset<::flatbuffers::String> DATA_QUALITY) {
    fbb_.AddOffset(TDM::VT_DATA_QUALITY, DATA_QUALITY);
  }
  void add_META_STOP(::flatbuffers::Offset<::flatbuffers::String> META_STOP) {
    fbb_.AddOffset(TDM::VT_META_STOP, META_STOP);
  }
  void add_DATA_START(::flatbuffers::Offset<::flatbuffers::String> DATA_START) {
    fbb_.AddOffset(TDM::VT_DATA_START, DATA_START);
  }
  void add_TRANSMIT_FREQ_1(double TRANSMIT_FREQ_1) {
    fbb_.AddElement<double>(TDM::VT_TRANSMIT_FREQ_1, TRANSMIT_FREQ_1, 0.0);
  }
  void add_RECEIVE_FREQ(::flatbuffers::Offset<::flatbuffers::Vector<double>> RECEIVE_FREQ) {
    fbb_.AddOffset(TDM::VT_RECEIVE_FREQ, RECEIVE_FREQ);
  }
  void add_DATA_STOP(::flatbuffers::Offset<::flatbuffers::String> DATA_STOP) {
    fbb_.AddOffset(TDM::VT_DATA_STOP, DATA_STOP);
  }
  void add_TIMETAG_REF(::flatbuffers::Offset<::flatbuffers::String> TIMETAG_REF) {
    fbb_.AddOffset(TDM::VT_TIMETAG_REF, TIMETAG_REF);
  }
  void add_ANGLE_TYPE(::flatbuffers::Offset<::flatbuffers::String> ANGLE_TYPE) {
    fbb_.AddOffset(TDM::VT_ANGLE_TYPE, ANGLE_TYPE);
  }
  void add_ANGLE_1(::flatbuffers::Offset<::flatbuffers::Vector<float>> ANGLE_1) {
    fbb_.AddOffset(TDM::VT_ANGLE_1, ANGLE_1);
  }
  void add_ANGLE_2(::flatbuffers::Offset<::flatbuffers::Vector<float>> ANGLE_2) {
    fbb_.AddOffset(TDM::VT_ANGLE_2, ANGLE_2);
  }
  void add_ANGLE_UNCERTAINTY_1(float ANGLE_UNCERTAINTY_1) {
    fbb_.AddElement<float>(TDM::VT_ANGLE_UNCERTAINTY_1, ANGLE_UNCERTAINTY_1, 0.0f);
  }
  void add_ANGLE_UNCERTAINTY_2(float ANGLE_UNCERTAINTY_2) {
    fbb_.AddElement<float>(TDM::VT_ANGLE_UNCERTAINTY_2, ANGLE_UNCERTAINTY_2, 0.0f);
  }
  void add_RANGE_RATE(double RANGE_RATE) {
    fbb_.AddElement<double>(TDM::VT_RANGE_RATE, RANGE_RATE, 0.0);
  }
  void add_RANGE_UNCERTAINTY(double RANGE_UNCERTAINTY) {
    fbb_.AddElement<double>(TDM::VT_RANGE_UNCERTAINTY, RANGE_UNCERTAINTY, 0.0);
  }
  void add_RANGE_MODE(::flatbuffers::Offset<::flatbuffers::String> RANGE_MODE) {
    fbb_.AddOffset(TDM::VT_RANGE_MODE, RANGE_MODE);
  }
  void add_RANGE_MODULUS(double RANGE_MODULUS) {
    fbb_.AddElement<double>(TDM::VT_RANGE_MODULUS, RANGE_MODULUS, 0.0);
  }
  void add_CORRECTION_ANGLE_1(float CORRECTION_ANGLE_1) {
    fbb_.AddElement<float>(TDM::VT_CORRECTION_ANGLE_1, CORRECTION_ANGLE_1, 0.0f);
  }
  void add_CORRECTION_ANGLE_2(float CORRECTION_ANGLE_2) {
    fbb_.AddElement<float>(TDM::VT_CORRECTION_ANGLE_2, CORRECTION_ANGLE_2, 0.0f);
  }
  void add_CORRECTIONS_APPLIED(::flatbuffers::Offset<::flatbuffers::String> CORRECTIONS_APPLIED) {
    fbb_.AddOffset(TDM::VT_CORRECTIONS_APPLIED, CORRECTIONS_APPLIED);
  }
  void add_TROPO_DRY(::flatbuffers::Offset<::flatbuffers::Vector<double>> TROPO_DRY) {
    fbb_.AddOffset(TDM::VT_TROPO_DRY, TROPO_DRY);
  }
  void add_TROPO_WET(::flatbuffers::Offset<::flatbuffers::Vector<double>> TROPO_WET) {
    fbb_.AddOffset(TDM::VT_TROPO_WET, TROPO_WET);
  }
  void add_STEC(::flatbuffers::Offset<::flatbuffers::Vector<double>> STEC) {
    fbb_.AddOffset(TDM::VT_STEC, STEC);
  }
  void add_PRESSURE(::flatbuffers::Offset<::flatbuffers::Vector<double>> PRESSURE) {
    fbb_.AddOffset(TDM::VT_PRESSURE, PRESSURE);
  }
  void add_RHUMIDITY(::flatbuffers::Offset<::flatbuffers::Vector<double>> RHUMIDITY) {
    fbb_.AddOffset(TDM::VT_RHUMIDITY, RHUMIDITY);
  }
  void add_TEMPERATURE(::flatbuffers::Offset<::flatbuffers::Vector<double>> TEMPERATURE) {
    fbb_.AddOffset(TDM::VT_TEMPERATURE, TEMPERATURE);
  }
  void add_CLOCK_BIAS(::flatbuffers::Offset<::flatbuffers::Vector<double>> CLOCK_BIAS) {
    fbb_.AddOffset(TDM::VT_CLOCK_BIAS, CLOCK_BIAS);
  }
  void add_CLOCK_DRIFT(::flatbuffers::Offset<::flatbuffers::Vector<double>> CLOCK_DRIFT) {
    fbb_.AddOffset(TDM::VT_CLOCK_DRIFT, CLOCK_DRIFT);
  }
  explicit TDMBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TDM> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TDM>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TDM> CreateTDM(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> OBSERVER_ID = 0,
    double OBSERVER_X = 0.0,
    double OBSERVER_Y = 0.0,
    double OBSERVER_Z = 0.0,
    double OBSERVER_VX = 0.0,
    double OBSERVER_VY = 0.0,
    double OBSERVER_VZ = 0.0,
    refFrame OBSERVER_POSITION_REFERENCE_FRAME = refFrame_ECEF,
    refFrame OBS_REFERENCE_FRAME = refFrame_ECEF,
    ::flatbuffers::Offset<::flatbuffers::String> EPOCH = 0,
    ::flatbuffers::Offset<::flatbuffers::String> CCSDS_TDM_VERS = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> COMMENT = 0,
    ::flatbuffers::Offset<::flatbuffers::String> CREATION_DATE = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ORIGINATOR = 0,
    ::flatbuffers::Offset<::flatbuffers::String> META_START = 0,
    ::flatbuffers::Offset<::flatbuffers::String> TIME_SYSTEM = 0,
    ::flatbuffers::Offset<::flatbuffers::String> START_TIME = 0,
    ::flatbuffers::Offset<::flatbuffers::String> STOP_TIME = 0,
    ::flatbuffers::Offset<::flatbuffers::String> PARTICIPANT_1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> PARTICIPANT_2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> PARTICIPANT_3 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> PARTICIPANT_4 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> PARTICIPANT_5 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> MODE = 0,
    uint16_t PATH_1 = 0,
    uint16_t PATH_2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> TRANSMIT_BAND = 0,
    ::flatbuffers::Offset<::flatbuffers::String> RECEIVE_BAND = 0,
    float INTEGRATION_INTERVAL = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> INTEGRATION_REF = 0,
    double RECEIVE_DELAY_2 = 0.0,
    double RECEIVE_DELAY_3 = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> DATA_QUALITY = 0,
    ::flatbuffers::Offset<::flatbuffers::String> META_STOP = 0,
    ::flatbuffers::Offset<::flatbuffers::String> DATA_START = 0,
    double TRANSMIT_FREQ_1 = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> RECEIVE_FREQ = 0,
    ::flatbuffers::Offset<::flatbuffers::String> DATA_STOP = 0,
    ::flatbuffers::Offset<::flatbuffers::String> TIMETAG_REF = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ANGLE_TYPE = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> ANGLE_1 = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> ANGLE_2 = 0,
    float ANGLE_UNCERTAINTY_1 = 0.0f,
    float ANGLE_UNCERTAINTY_2 = 0.0f,
    double RANGE_RATE = 0.0,
    double RANGE_UNCERTAINTY = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> RANGE_MODE = 0,
    double RANGE_MODULUS = 0.0,
    float CORRECTION_ANGLE_1 = 0.0f,
    float CORRECTION_ANGLE_2 = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> CORRECTIONS_APPLIED = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> TROPO_DRY = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> TROPO_WET = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> STEC = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> PRESSURE = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> RHUMIDITY = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> TEMPERATURE = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> CLOCK_BIAS = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> CLOCK_DRIFT = 0) {
  TDMBuilder builder_(_fbb);
  builder_.add_RANGE_MODULUS(RANGE_MODULUS);
  builder_.add_RANGE_UNCERTAINTY(RANGE_UNCERTAINTY);
  builder_.add_RANGE_RATE(RANGE_RATE);
  builder_.add_TRANSMIT_FREQ_1(TRANSMIT_FREQ_1);
  builder_.add_RECEIVE_DELAY_3(RECEIVE_DELAY_3);
  builder_.add_RECEIVE_DELAY_2(RECEIVE_DELAY_2);
  builder_.add_OBSERVER_VZ(OBSERVER_VZ);
  builder_.add_OBSERVER_VY(OBSERVER_VY);
  builder_.add_OBSERVER_VX(OBSERVER_VX);
  builder_.add_OBSERVER_Z(OBSERVER_Z);
  builder_.add_OBSERVER_Y(OBSERVER_Y);
  builder_.add_OBSERVER_X(OBSERVER_X);
  builder_.add_CLOCK_DRIFT(CLOCK_DRIFT);
  builder_.add_CLOCK_BIAS(CLOCK_BIAS);
  builder_.add_TEMPERATURE(TEMPERATURE);
  builder_.add_RHUMIDITY(RHUMIDITY);
  builder_.add_PRESSURE(PRESSURE);
  builder_.add_STEC(STEC);
  builder_.add_TROPO_WET(TROPO_WET);
  builder_.add_TROPO_DRY(TROPO_DRY);
  builder_.add_CORRECTIONS_APPLIED(CORRECTIONS_APPLIED);
  builder_.add_CORRECTION_ANGLE_2(CORRECTION_ANGLE_2);
  builder_.add_CORRECTION_ANGLE_1(CORRECTION_ANGLE_1);
  builder_.add_RANGE_MODE(RANGE_MODE);
  builder_.add_ANGLE_UNCERTAINTY_2(ANGLE_UNCERTAINTY_2);
  builder_.add_ANGLE_UNCERTAINTY_1(ANGLE_UNCERTAINTY_1);
  builder_.add_ANGLE_2(ANGLE_2);
  builder_.add_ANGLE_1(ANGLE_1);
  builder_.add_ANGLE_TYPE(ANGLE_TYPE);
  builder_.add_TIMETAG_REF(TIMETAG_REF);
  builder_.add_DATA_STOP(DATA_STOP);
  builder_.add_RECEIVE_FREQ(RECEIVE_FREQ);
  builder_.add_DATA_START(DATA_START);
  builder_.add_META_STOP(META_STOP);
  builder_.add_DATA_QUALITY(DATA_QUALITY);
  builder_.add_INTEGRATION_REF(INTEGRATION_REF);
  builder_.add_INTEGRATION_INTERVAL(INTEGRATION_INTERVAL);
  builder_.add_RECEIVE_BAND(RECEIVE_BAND);
  builder_.add_TRANSMIT_BAND(TRANSMIT_BAND);
  builder_.add_MODE(MODE);
  builder_.add_PARTICIPANT_5(PARTICIPANT_5);
  builder_.add_PARTICIPANT_4(PARTICIPANT_4);
  builder_.add_PARTICIPANT_3(PARTICIPANT_3);
  builder_.add_PARTICIPANT_2(PARTICIPANT_2);
  builder_.add_PARTICIPANT_1(PARTICIPANT_1);
  builder_.add_STOP_TIME(STOP_TIME);
  builder_.add_START_TIME(START_TIME);
  builder_.add_TIME_SYSTEM(TIME_SYSTEM);
  builder_.add_META_START(META_START);
  builder_.add_ORIGINATOR(ORIGINATOR);
  builder_.add_CREATION_DATE(CREATION_DATE);
  builder_.add_COMMENT(COMMENT);
  builder_.add_CCSDS_TDM_VERS(CCSDS_TDM_VERS);
  builder_.add_EPOCH(EPOCH);
  builder_.add_OBSERVER_ID(OBSERVER_ID);
  builder_.add_PATH_2(PATH_2);
  builder_.add_PATH_1(PATH_1);
  builder_.add_OBS_REFERENCE_FRAME(OBS_REFERENCE_FRAME);
  builder_.add_OBSERVER_POSITION_REFERENCE_FRAME(OBSERVER_POSITION_REFERENCE_FRAME);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TDM> CreateTDMDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *OBSERVER_ID = nullptr,
    double OBSERVER_X = 0.0,
    double OBSERVER_Y = 0.0,
    double OBSERVER_Z = 0.0,
    double OBSERVER_VX = 0.0,
    double OBSERVER_VY = 0.0,
    double OBSERVER_VZ = 0.0,
    refFrame OBSERVER_POSITION_REFERENCE_FRAME = refFrame_ECEF,
    refFrame OBS_REFERENCE_FRAME = refFrame_ECEF,
    const char *EPOCH = nullptr,
    const char *CCSDS_TDM_VERS = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *COMMENT = nullptr,
    const char *CREATION_DATE = nullptr,
    const char *ORIGINATOR = nullptr,
    const char *META_START = nullptr,
    const char *TIME_SYSTEM = nullptr,
    const char *START_TIME = nullptr,
    const char *STOP_TIME = nullptr,
    const char *PARTICIPANT_1 = nullptr,
    const char *PARTICIPANT_2 = nullptr,
    const char *PARTICIPANT_3 = nullptr,
    const char *PARTICIPANT_4 = nullptr,
    const char *PARTICIPANT_5 = nullptr,
    const char *MODE = nullptr,
    uint16_t PATH_1 = 0,
    uint16_t PATH_2 = 0,
    const char *TRANSMIT_BAND = nullptr,
    const char *RECEIVE_BAND = nullptr,
    float INTEGRATION_INTERVAL = 0.0f,
    const char *INTEGRATION_REF = nullptr,
    double RECEIVE_DELAY_2 = 0.0,
    double RECEIVE_DELAY_3 = 0.0,
    const char *DATA_QUALITY = nullptr,
    const char *META_STOP = nullptr,
    const char *DATA_START = nullptr,
    double TRANSMIT_FREQ_1 = 0.0,
    const std::vector<double> *RECEIVE_FREQ = nullptr,
    const char *DATA_STOP = nullptr,
    const char *TIMETAG_REF = nullptr,
    const char *ANGLE_TYPE = nullptr,
    const std::vector<float> *ANGLE_1 = nullptr,
    const std::vector<float> *ANGLE_2 = nullptr,
    float ANGLE_UNCERTAINTY_1 = 0.0f,
    float ANGLE_UNCERTAINTY_2 = 0.0f,
    double RANGE_RATE = 0.0,
    double RANGE_UNCERTAINTY = 0.0,
    const char *RANGE_MODE = nullptr,
    double RANGE_MODULUS = 0.0,
    float CORRECTION_ANGLE_1 = 0.0f,
    float CORRECTION_ANGLE_2 = 0.0f,
    const char *CORRECTIONS_APPLIED = nullptr,
    const std::vector<double> *TROPO_DRY = nullptr,
    const std::vector<double> *TROPO_WET = nullptr,
    const std::vector<double> *STEC = nullptr,
    const std::vector<double> *PRESSURE = nullptr,
    const std::vector<double> *RHUMIDITY = nullptr,
    const std::vector<double> *TEMPERATURE = nullptr,
    const std::vector<double> *CLOCK_BIAS = nullptr,
    const std::vector<double> *CLOCK_DRIFT = nullptr) {
  auto OBSERVER_ID__ = OBSERVER_ID ? _fbb.CreateString(OBSERVER_ID) : 0;
  auto EPOCH__ = EPOCH ? _fbb.CreateString(EPOCH) : 0;
  auto CCSDS_TDM_VERS__ = CCSDS_TDM_VERS ? _fbb.CreateString(CCSDS_TDM_VERS) : 0;
  auto COMMENT__ = COMMENT ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*COMMENT) : 0;
  auto CREATION_DATE__ = CREATION_DATE ? _fbb.CreateString(CREATION_DATE) : 0;
  auto ORIGINATOR__ = ORIGINATOR ? _fbb.CreateString(ORIGINATOR) : 0;
  auto META_START__ = META_START ? _fbb.CreateString(META_START) : 0;
  auto TIME_SYSTEM__ = TIME_SYSTEM ? _fbb.CreateString(TIME_SYSTEM) : 0;
  auto START_TIME__ = START_TIME ? _fbb.CreateString(START_TIME) : 0;
  auto STOP_TIME__ = STOP_TIME ? _fbb.CreateString(STOP_TIME) : 0;
  auto PARTICIPANT_1__ = PARTICIPANT_1 ? _fbb.CreateString(PARTICIPANT_1) : 0;
  auto PARTICIPANT_2__ = PARTICIPANT_2 ? _fbb.CreateString(PARTICIPANT_2) : 0;
  auto PARTICIPANT_3__ = PARTICIPANT_3 ? _fbb.CreateString(PARTICIPANT_3) : 0;
  auto PARTICIPANT_4__ = PARTICIPANT_4 ? _fbb.CreateString(PARTICIPANT_4) : 0;
  auto PARTICIPANT_5__ = PARTICIPANT_5 ? _fbb.CreateString(PARTICIPANT_5) : 0;
  auto MODE__ = MODE ? _fbb.CreateString(MODE) : 0;
  auto TRANSMIT_BAND__ = TRANSMIT_BAND ? _fbb.CreateString(TRANSMIT_BAND) : 0;
  auto RECEIVE_BAND__ = RECEIVE_BAND ? _fbb.CreateString(RECEIVE_BAND) : 0;
  auto INTEGRATION_REF__ = INTEGRATION_REF ? _fbb.CreateString(INTEGRATION_REF) : 0;
  auto DATA_QUALITY__ = DATA_QUALITY ? _fbb.CreateString(DATA_QUALITY) : 0;
  auto META_STOP__ = META_STOP ? _fbb.CreateString(META_STOP) : 0;
  auto DATA_START__ = DATA_START ? _fbb.CreateString(DATA_START) : 0;
  auto RECEIVE_FREQ__ = RECEIVE_FREQ ? _fbb.CreateVector<double>(*RECEIVE_FREQ) : 0;
  auto DATA_STOP__ = DATA_STOP ? _fbb.CreateString(DATA_STOP) : 0;
  auto TIMETAG_REF__ = TIMETAG_REF ? _fbb.CreateString(TIMETAG_REF) : 0;
  auto ANGLE_TYPE__ = ANGLE_TYPE ? _fbb.CreateString(ANGLE_TYPE) : 0;
  auto ANGLE_1__ = ANGLE_1 ? _fbb.CreateVector<float>(*ANGLE_1) : 0;
  auto ANGLE_2__ = ANGLE_2 ? _fbb.CreateVector<float>(*ANGLE_2) : 0;
  auto RANGE_MODE__ = RANGE_MODE ? _fbb.CreateString(RANGE_MODE) : 0;
  auto CORRECTIONS_APPLIED__ = CORRECTIONS_APPLIED ? _fbb.CreateString(CORRECTIONS_APPLIED) : 0;
  auto TROPO_DRY__ = TROPO_DRY ? _fbb.CreateVector<double>(*TROPO_DRY) : 0;
  auto TROPO_WET__ = TROPO_WET ? _fbb.CreateVector<double>(*TROPO_WET) : 0;
  auto STEC__ = STEC ? _fbb.CreateVector<double>(*STEC) : 0;
  auto PRESSURE__ = PRESSURE ? _fbb.CreateVector<double>(*PRESSURE) : 0;
  auto RHUMIDITY__ = RHUMIDITY ? _fbb.CreateVector<double>(*RHUMIDITY) : 0;
  auto TEMPERATURE__ = TEMPERATURE ? _fbb.CreateVector<double>(*TEMPERATURE) : 0;
  auto CLOCK_BIAS__ = CLOCK_BIAS ? _fbb.CreateVector<double>(*CLOCK_BIAS) : 0;
  auto CLOCK_DRIFT__ = CLOCK_DRIFT ? _fbb.CreateVector<double>(*CLOCK_DRIFT) : 0;
  return CreateTDM(
      _fbb,
      OBSERVER_ID__,
      OBSERVER_X,
      OBSERVER_Y,
      OBSERVER_Z,
      OBSERVER_VX,
      OBSERVER_VY,
      OBSERVER_VZ,
      OBSERVER_POSITION_REFERENCE_FRAME,
      OBS_REFERENCE_FRAME,
      EPOCH__,
      CCSDS_TDM_VERS__,
      COMMENT__,
      CREATION_DATE__,
      ORIGINATOR__,
      META_START__,
      TIME_SYSTEM__,
      START_TIME__,
      STOP_TIME__,
      PARTICIPANT_1__,
      PARTICIPANT_2__,
      PARTICIPANT_3__,
      PARTICIPANT_4__,
      PARTICIPANT_5__,
      MODE__,
      PATH_1,
      PATH_2,
      TRANSMIT_BAND__,
      RECEIVE_BAND__,
      INTEGRATION_INTERVAL,
      INTEGRATION_REF__,
      RECEIVE_DELAY_2,
      RECEIVE_DELAY_3,
      DATA_QUALITY__,
      META_STOP__,
      DATA_START__,
      TRANSMIT_FREQ_1,
      RECEIVE_FREQ__,
      DATA_STOP__,
      TIMETAG_REF__,
      ANGLE_TYPE__,
      ANGLE_1__,
      ANGLE_2__,
      ANGLE_UNCERTAINTY_1,
      ANGLE_UNCERTAINTY_2,
      RANGE_RATE,
      RANGE_UNCERTAINTY,
      RANGE_MODE__,
      RANGE_MODULUS,
      CORRECTION_ANGLE_1,
      CORRECTION_ANGLE_2,
      CORRECTIONS_APPLIED__,
      TROPO_DRY__,
      TROPO_WET__,
      STEC__,
      PRESSURE__,
      RHUMIDITY__,
      TEMPERATURE__,
      CLOCK_BIAS__,
      CLOCK_DRIFT__);
}

struct TDMCOLLECTION FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TDMCOLLECTIONBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORDS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<TDM>> *RECORDS() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<TDM>> *>(VT_RECORDS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RECORDS) &&
           verifier.VerifyVector(RECORDS()) &&
           verifier.VerifyVectorOfTables(RECORDS()) &&
           verifier.EndTable();
  }
};

struct TDMCOLLECTIONBuilder {
  typedef TDMCOLLECTION Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_RECORDS(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<TDM>>> RECORDS) {
    fbb_.AddOffset(TDMCOLLECTION::VT_RECORDS, RECORDS);
  }
  explicit TDMCOLLECTIONBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TDMCOLLECTION> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TDMCOLLECTION>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TDMCOLLECTION> CreateTDMCOLLECTION(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<TDM>>> RECORDS = 0) {
  TDMCOLLECTIONBuilder builder_(_fbb);
  builder_.add_RECORDS(RECORDS);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TDMCOLLECTION> CreateTDMCOLLECTIONDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<TDM>> *RECORDS = nullptr) {
  auto RECORDS__ = RECORDS ? _fbb.CreateVector<::flatbuffers::Offset<TDM>>(*RECORDS) : 0;
  return CreateTDMCOLLECTION(
      _fbb,
      RECORDS__);
}

inline const TDM *GetTDM(const void *buf) {
  return ::flatbuffers::GetRoot<TDM>(buf);
}

inline const TDM *GetSizePrefixedTDM(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<TDM>(buf);
}

inline const char *TDMIdentifier() {
  return "$TDM";
}

inline bool TDMBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, TDMIdentifier());
}

inline bool SizePrefixedTDMBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, TDMIdentifier(), true);
}

inline bool VerifyTDMBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TDM>(TDMIdentifier());
}

inline bool VerifySizePrefixedTDMBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TDM>(TDMIdentifier());
}

inline void FinishTDMBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TDM> root) {
  fbb.Finish(root, TDMIdentifier());
}

inline void FinishSizePrefixedTDMBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TDM> root) {
  fbb.FinishSizePrefixed(root, TDMIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
