// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct PNM;
struct PNMBuilder;

struct PNMCOLLECTION;
struct PNMCOLLECTIONBuilder;

/// Publish Notification Message
struct PNM FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PNMBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IPFS_CID = 4,
    VT_KEY_ADDRESS = 6,
    VT_FILE_IDENTIFIER = 8
  };
  /// IPFS Content Identifier (CID)
  /// The hash of a file stored on the InterPlanetary File System (IPFS).
  /// Refer to the section on IPFS integration for details.
  const ::flatbuffers::String *IPFS_CID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IPFS_CID);
  }
  /// Unique identifier generated from the data provider's public key
  const ::flatbuffers::String *KEY_ADDRESS() const {
    return GetPointer<const ::flatbuffers::String *>(VT_KEY_ADDRESS);
  }
  /// SpaceDataStandards 4 Character File Identifier
  const ::flatbuffers::String *FILE_IDENTIFIER() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FILE_IDENTIFIER);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IPFS_CID) &&
           verifier.VerifyString(IPFS_CID()) &&
           VerifyOffset(verifier, VT_KEY_ADDRESS) &&
           verifier.VerifyString(KEY_ADDRESS()) &&
           VerifyOffset(verifier, VT_FILE_IDENTIFIER) &&
           verifier.VerifyString(FILE_IDENTIFIER()) &&
           verifier.EndTable();
  }
};

struct PNMBuilder {
  typedef PNM Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_IPFS_CID(::flatbuffers::Offset<::flatbuffers::String> IPFS_CID) {
    fbb_.AddOffset(PNM::VT_IPFS_CID, IPFS_CID);
  }
  void add_KEY_ADDRESS(::flatbuffers::Offset<::flatbuffers::String> KEY_ADDRESS) {
    fbb_.AddOffset(PNM::VT_KEY_ADDRESS, KEY_ADDRESS);
  }
  void add_FILE_IDENTIFIER(::flatbuffers::Offset<::flatbuffers::String> FILE_IDENTIFIER) {
    fbb_.AddOffset(PNM::VT_FILE_IDENTIFIER, FILE_IDENTIFIER);
  }
  explicit PNMBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PNM> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PNM>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PNM> CreatePNM(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> IPFS_CID = 0,
    ::flatbuffers::Offset<::flatbuffers::String> KEY_ADDRESS = 0,
    ::flatbuffers::Offset<::flatbuffers::String> FILE_IDENTIFIER = 0) {
  PNMBuilder builder_(_fbb);
  builder_.add_FILE_IDENTIFIER(FILE_IDENTIFIER);
  builder_.add_KEY_ADDRESS(KEY_ADDRESS);
  builder_.add_IPFS_CID(IPFS_CID);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PNM> CreatePNMDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *IPFS_CID = nullptr,
    const char *KEY_ADDRESS = nullptr,
    const char *FILE_IDENTIFIER = nullptr) {
  auto IPFS_CID__ = IPFS_CID ? _fbb.CreateString(IPFS_CID) : 0;
  auto KEY_ADDRESS__ = KEY_ADDRESS ? _fbb.CreateString(KEY_ADDRESS) : 0;
  auto FILE_IDENTIFIER__ = FILE_IDENTIFIER ? _fbb.CreateString(FILE_IDENTIFIER) : 0;
  return CreatePNM(
      _fbb,
      IPFS_CID__,
      KEY_ADDRESS__,
      FILE_IDENTIFIER__);
}

/// Collection of Publish Notification Messages
/// This table groups multiple PNM records for batch processing and management.
struct PNMCOLLECTION FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PNMCOLLECTIONBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORDS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<PNM>> *RECORDS() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<PNM>> *>(VT_RECORDS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RECORDS) &&
           verifier.VerifyVector(RECORDS()) &&
           verifier.VerifyVectorOfTables(RECORDS()) &&
           verifier.EndTable();
  }
};

struct PNMCOLLECTIONBuilder {
  typedef PNMCOLLECTION Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_RECORDS(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<PNM>>> RECORDS) {
    fbb_.AddOffset(PNMCOLLECTION::VT_RECORDS, RECORDS);
  }
  explicit PNMCOLLECTIONBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PNMCOLLECTION> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PNMCOLLECTION>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PNMCOLLECTION> CreatePNMCOLLECTION(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<PNM>>> RECORDS = 0) {
  PNMCOLLECTIONBuilder builder_(_fbb);
  builder_.add_RECORDS(RECORDS);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PNMCOLLECTION> CreatePNMCOLLECTIONDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<PNM>> *RECORDS = nullptr) {
  auto RECORDS__ = RECORDS ? _fbb.CreateVector<::flatbuffers::Offset<PNM>>(*RECORDS) : 0;
  return CreatePNMCOLLECTION(
      _fbb,
      RECORDS__);
}

inline const PNM *GetPNM(const void *buf) {
  return ::flatbuffers::GetRoot<PNM>(buf);
}

inline const PNM *GetSizePrefixedPNM(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PNM>(buf);
}

inline const char *PNMIdentifier() {
  return "$PNM";
}

inline bool PNMBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PNMIdentifier());
}

inline bool SizePrefixedPNMBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PNMIdentifier(), true);
}

inline bool VerifyPNMBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PNM>(PNMIdentifier());
}

inline bool VerifySizePrefixedPNMBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PNM>(PNMIdentifier());
}

inline void FinishPNMBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PNM> root) {
  fbb.Finish(root, PNMIdentifier());
}

inline void FinishSizePrefixedPNMBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PNM> root) {
  fbb.FinishSizePrefixed(root, PNMIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
