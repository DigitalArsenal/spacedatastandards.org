// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

#include "main_generated.h"

struct Geometry;
struct GeometryBuilder;

struct SIT;
struct SITBuilder;

/// Enum for the type of site
enum SiteType : int8_t {
  SiteType_LAUNCH_SITE = 0,
  SiteType_OBSERVATION_STATION = 1,
  SiteType_HOBBYIST_OBSERVER = 2,
  SiteType_RESEARCH_FACILITY = 3,
  SiteType_SATELLITE_GROUND_STATION = 4,
  SiteType_SPACEPORT = 5,
  SiteType_MILITARY_BASE = 6,
  SiteType_WEATHER_STATION = 7,
  SiteType_ASTRONOMICAL_OBSERVATORY = 8,
  SiteType_EDUCATIONAL_INSTITUTE = 9,
  SiteType_COMMUNICATION_HUB = 10,
  SiteType_POWER_PLANT = 11,
  SiteType_INDUSTRIAL_COMPLEX = 12,
  SiteType_TRANSPORTATION_HUB = 13,
  SiteType_URBAN_AREA = 14,
  SiteType_NATIONAL_PARK = 15,
  SiteType_HISTORICAL_SITE = 16,
  SiteType_OTHER = 17,
  SiteType_MIN = SiteType_LAUNCH_SITE,
  SiteType_MAX = SiteType_OTHER
};

inline const SiteType (&EnumValuesSiteType())[18] {
  static const SiteType values[] = {
    SiteType_LAUNCH_SITE,
    SiteType_OBSERVATION_STATION,
    SiteType_HOBBYIST_OBSERVER,
    SiteType_RESEARCH_FACILITY,
    SiteType_SATELLITE_GROUND_STATION,
    SiteType_SPACEPORT,
    SiteType_MILITARY_BASE,
    SiteType_WEATHER_STATION,
    SiteType_ASTRONOMICAL_OBSERVATORY,
    SiteType_EDUCATIONAL_INSTITUTE,
    SiteType_COMMUNICATION_HUB,
    SiteType_POWER_PLANT,
    SiteType_INDUSTRIAL_COMPLEX,
    SiteType_TRANSPORTATION_HUB,
    SiteType_URBAN_AREA,
    SiteType_NATIONAL_PARK,
    SiteType_HISTORICAL_SITE,
    SiteType_OTHER
  };
  return values;
}

inline const char * const *EnumNamesSiteType() {
  static const char * const names[19] = {
    "LAUNCH_SITE",
    "OBSERVATION_STATION",
    "HOBBYIST_OBSERVER",
    "RESEARCH_FACILITY",
    "SATELLITE_GROUND_STATION",
    "SPACEPORT",
    "MILITARY_BASE",
    "WEATHER_STATION",
    "ASTRONOMICAL_OBSERVATORY",
    "EDUCATIONAL_INSTITUTE",
    "COMMUNICATION_HUB",
    "POWER_PLANT",
    "INDUSTRIAL_COMPLEX",
    "TRANSPORTATION_HUB",
    "URBAN_AREA",
    "NATIONAL_PARK",
    "HISTORICAL_SITE",
    "OTHER",
    nullptr
  };
  return names;
}

inline const char *EnumNameSiteType(SiteType e) {
  if (::flatbuffers::IsOutRange(e, SiteType_LAUNCH_SITE, SiteType_OTHER)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSiteType()[index];
}

/// Geometry table with information about geometric properties
struct Geometry FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GeometryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GEOMETRY_TYPE = 4,
    VT_COORDINATES = 6
  };
  /// Type of geometry
  const ::flatbuffers::String *GEOMETRY_TYPE() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GEOMETRY_TYPE);
  }
  /// Coordinates of the geometry
  const ::flatbuffers::Vector<float> *COORDINATES() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_COORDINATES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GEOMETRY_TYPE) &&
           verifier.VerifyString(GEOMETRY_TYPE()) &&
           VerifyOffset(verifier, VT_COORDINATES) &&
           verifier.VerifyVector(COORDINATES()) &&
           verifier.EndTable();
  }
};

struct GeometryBuilder {
  typedef Geometry Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_GEOMETRY_TYPE(::flatbuffers::Offset<::flatbuffers::String> GEOMETRY_TYPE) {
    fbb_.AddOffset(Geometry::VT_GEOMETRY_TYPE, GEOMETRY_TYPE);
  }
  void add_COORDINATES(::flatbuffers::Offset<::flatbuffers::Vector<float>> COORDINATES) {
    fbb_.AddOffset(Geometry::VT_COORDINATES, COORDINATES);
  }
  explicit GeometryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Geometry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Geometry>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Geometry> CreateGeometry(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> GEOMETRY_TYPE = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> COORDINATES = 0) {
  GeometryBuilder builder_(_fbb);
  builder_.add_COORDINATES(COORDINATES);
  builder_.add_GEOMETRY_TYPE(GEOMETRY_TYPE);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Geometry> CreateGeometryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *GEOMETRY_TYPE = nullptr,
    const std::vector<float> *COORDINATES = nullptr) {
  auto GEOMETRY_TYPE__ = GEOMETRY_TYPE ? _fbb.CreateString(GEOMETRY_TYPE) : 0;
  auto COORDINATES__ = COORDINATES ? _fbb.CreateVector<float>(*COORDINATES) : 0;
  return CreateGeometry(
      _fbb,
      GEOMETRY_TYPE__,
      COORDINATES__);
}

/// Site Information Message
struct SIT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SITBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_ABBREVIATION = 8,
    VT_SITE_TYPE = 10,
    VT_CATCODE = 12,
    VT_NETWORK = 14,
    VT_LATITUDE = 16,
    VT_LONGITUDE = 18,
    VT_ALTITUDE = 20,
    VT_GEOMETRY = 22,
    VT_CENTER_POINT_GEOMETRY = 24,
    VT_CLASSIFICATION = 26,
    VT_CTR_ID = 28,
    VT_CREATED_BY = 30,
    VT_DESCRIPTION = 32,
    VT_MODEL_URL = 34,
    VT_SOURCE = 36,
    VT_TASKABLE = 38,
    VT_OPERATIONAL_STATUS = 40,
    VT_ESTABLISHMENT_DATE = 42,
    VT_CONTACT_INFO = 44,
    VT_ENVIRONMENTAL_IMPACT = 46,
    VT_ACCESSIBILITY_INFRA = 48,
    VT_INTEGRATED_DEVICES = 50
  };
  /// Unique identifier for the site, BE_NUMBER
  const ::flatbuffers::String *ID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Name of the site
  const ::flatbuffers::String *NAME() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Abbreviation
  const ::flatbuffers::String *ABBREVIATION() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ABBREVIATION);
  }
  /// Site type as defined in SiteType enum
  SiteType SITE_TYPE() const {
    return static_cast<SiteType>(GetField<int8_t>(VT_SITE_TYPE, 0));
  }
  /// Site type CATCODE
  const ::flatbuffers::String *CATCODE() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CATCODE);
  }
  /// Network identifier
  const ::flatbuffers::String *NETWORK() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NETWORK);
  }
  /// Latitude of the site
  float LATITUDE() const {
    return GetField<float>(VT_LATITUDE, 0.0f);
  }
  /// Longitude of the site
  float LONGITUDE() const {
    return GetField<float>(VT_LONGITUDE, 0.0f);
  }
  /// Altitude of the site
  float ALTITUDE() const {
    return GetField<float>(VT_ALTITUDE, 0.0f);
  }
  /// Geometry of the site
  const Geometry *GEOMETRY() const {
    return GetPointer<const Geometry *>(VT_GEOMETRY);
  }
  /// Center point geometry coordinates
  const ::flatbuffers::Vector<float> *CENTER_POINT_GEOMETRY() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_CENTER_POINT_GEOMETRY);
  }
  /// Classification marking of the site
  const ::flatbuffers::String *CLASSIFICATION() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATION);
  }
  /// CTR ISO 3166 Numeric code as string
  const ::flatbuffers::String *CTR_ID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CTR_ID);
  }
  /// Identifier of the user who created the site data
  const ::flatbuffers::String *CREATED_BY() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATED_BY);
  }
  /// Description of the site
  const ::flatbuffers::String *DESCRIPTION() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// URL for the 3D model of the site
  const ::flatbuffers::String *MODEL_URL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODEL_URL);
  }
  /// Source of the site data
  const ::flatbuffers::String *SOURCE() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Indicates if the site is taskable
  bool TASKABLE() const {
    return GetField<uint8_t>(VT_TASKABLE, 0) != 0;
  }
  /// Operational status of the site (e.g., active, inactive, under construction)
  const ::flatbuffers::String *OPERATIONAL_STATUS() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPERATIONAL_STATUS);
  }
  /// Date of establishment
  const ::flatbuffers::String *ESTABLISHMENT_DATE() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESTABLISHMENT_DATE);
  }
  /// Contact information for the site
  const ::flatbuffers::String *CONTACT_INFO() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONTACT_INFO);
  }
  /// Environmental impact or considerations
  const ::flatbuffers::String *ENVIRONMENTAL_IMPACT() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENVIRONMENTAL_IMPACT);
  }
  /// Accessibility and infrastructure details
  const ::flatbuffers::String *ACCESSIBILITY_INFRA() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACCESSIBILITY_INFRA);
  }
  /// Vector of Integrated Devices (IDM)
  const ::flatbuffers::Vector<::flatbuffers::Offset<IDM>> *INTEGRATED_DEVICES() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<IDM>> *>(VT_INTEGRATED_DEVICES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(ID()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(NAME()) &&
           VerifyOffset(verifier, VT_ABBREVIATION) &&
           verifier.VerifyString(ABBREVIATION()) &&
           VerifyField<int8_t>(verifier, VT_SITE_TYPE, 1) &&
           VerifyOffset(verifier, VT_CATCODE) &&
           verifier.VerifyString(CATCODE()) &&
           VerifyOffset(verifier, VT_NETWORK) &&
           verifier.VerifyString(NETWORK()) &&
           VerifyField<float>(verifier, VT_LATITUDE, 4) &&
           VerifyField<float>(verifier, VT_LONGITUDE, 4) &&
           VerifyField<float>(verifier, VT_ALTITUDE, 4) &&
           VerifyOffset(verifier, VT_GEOMETRY) &&
           verifier.VerifyTable(GEOMETRY()) &&
           VerifyOffset(verifier, VT_CENTER_POINT_GEOMETRY) &&
           verifier.VerifyVector(CENTER_POINT_GEOMETRY()) &&
           VerifyOffset(verifier, VT_CLASSIFICATION) &&
           verifier.VerifyString(CLASSIFICATION()) &&
           VerifyOffset(verifier, VT_CTR_ID) &&
           verifier.VerifyString(CTR_ID()) &&
           VerifyOffset(verifier, VT_CREATED_BY) &&
           verifier.VerifyString(CREATED_BY()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(DESCRIPTION()) &&
           VerifyOffset(verifier, VT_MODEL_URL) &&
           verifier.VerifyString(MODEL_URL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(SOURCE()) &&
           VerifyField<uint8_t>(verifier, VT_TASKABLE, 1) &&
           VerifyOffset(verifier, VT_OPERATIONAL_STATUS) &&
           verifier.VerifyString(OPERATIONAL_STATUS()) &&
           VerifyOffset(verifier, VT_ESTABLISHMENT_DATE) &&
           verifier.VerifyString(ESTABLISHMENT_DATE()) &&
           VerifyOffset(verifier, VT_CONTACT_INFO) &&
           verifier.VerifyString(CONTACT_INFO()) &&
           VerifyOffset(verifier, VT_ENVIRONMENTAL_IMPACT) &&
           verifier.VerifyString(ENVIRONMENTAL_IMPACT()) &&
           VerifyOffset(verifier, VT_ACCESSIBILITY_INFRA) &&
           verifier.VerifyString(ACCESSIBILITY_INFRA()) &&
           VerifyOffset(verifier, VT_INTEGRATED_DEVICES) &&
           verifier.VerifyVector(INTEGRATED_DEVICES()) &&
           verifier.VerifyVectorOfTables(INTEGRATED_DEVICES()) &&
           verifier.EndTable();
  }
};

struct SITBuilder {
  typedef SIT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ID(::flatbuffers::Offset<::flatbuffers::String> ID) {
    fbb_.AddOffset(SIT::VT_ID, ID);
  }
  void add_NAME(::flatbuffers::Offset<::flatbuffers::String> NAME) {
    fbb_.AddOffset(SIT::VT_NAME, NAME);
  }
  void add_ABBREVIATION(::flatbuffers::Offset<::flatbuffers::String> ABBREVIATION) {
    fbb_.AddOffset(SIT::VT_ABBREVIATION, ABBREVIATION);
  }
  void add_SITE_TYPE(SiteType SITE_TYPE) {
    fbb_.AddElement<int8_t>(SIT::VT_SITE_TYPE, static_cast<int8_t>(SITE_TYPE), 0);
  }
  void add_CATCODE(::flatbuffers::Offset<::flatbuffers::String> CATCODE) {
    fbb_.AddOffset(SIT::VT_CATCODE, CATCODE);
  }
  void add_NETWORK(::flatbuffers::Offset<::flatbuffers::String> NETWORK) {
    fbb_.AddOffset(SIT::VT_NETWORK, NETWORK);
  }
  void add_LATITUDE(float LATITUDE) {
    fbb_.AddElement<float>(SIT::VT_LATITUDE, LATITUDE, 0.0f);
  }
  void add_LONGITUDE(float LONGITUDE) {
    fbb_.AddElement<float>(SIT::VT_LONGITUDE, LONGITUDE, 0.0f);
  }
  void add_ALTITUDE(float ALTITUDE) {
    fbb_.AddElement<float>(SIT::VT_ALTITUDE, ALTITUDE, 0.0f);
  }
  void add_GEOMETRY(::flatbuffers::Offset<Geometry> GEOMETRY) {
    fbb_.AddOffset(SIT::VT_GEOMETRY, GEOMETRY);
  }
  void add_CENTER_POINT_GEOMETRY(::flatbuffers::Offset<::flatbuffers::Vector<float>> CENTER_POINT_GEOMETRY) {
    fbb_.AddOffset(SIT::VT_CENTER_POINT_GEOMETRY, CENTER_POINT_GEOMETRY);
  }
  void add_CLASSIFICATION(::flatbuffers::Offset<::flatbuffers::String> CLASSIFICATION) {
    fbb_.AddOffset(SIT::VT_CLASSIFICATION, CLASSIFICATION);
  }
  void add_CTR_ID(::flatbuffers::Offset<::flatbuffers::String> CTR_ID) {
    fbb_.AddOffset(SIT::VT_CTR_ID, CTR_ID);
  }
  void add_CREATED_BY(::flatbuffers::Offset<::flatbuffers::String> CREATED_BY) {
    fbb_.AddOffset(SIT::VT_CREATED_BY, CREATED_BY);
  }
  void add_DESCRIPTION(::flatbuffers::Offset<::flatbuffers::String> DESCRIPTION) {
    fbb_.AddOffset(SIT::VT_DESCRIPTION, DESCRIPTION);
  }
  void add_MODEL_URL(::flatbuffers::Offset<::flatbuffers::String> MODEL_URL) {
    fbb_.AddOffset(SIT::VT_MODEL_URL, MODEL_URL);
  }
  void add_SOURCE(::flatbuffers::Offset<::flatbuffers::String> SOURCE) {
    fbb_.AddOffset(SIT::VT_SOURCE, SOURCE);
  }
  void add_TASKABLE(bool TASKABLE) {
    fbb_.AddElement<uint8_t>(SIT::VT_TASKABLE, static_cast<uint8_t>(TASKABLE), 0);
  }
  void add_OPERATIONAL_STATUS(::flatbuffers::Offset<::flatbuffers::String> OPERATIONAL_STATUS) {
    fbb_.AddOffset(SIT::VT_OPERATIONAL_STATUS, OPERATIONAL_STATUS);
  }
  void add_ESTABLISHMENT_DATE(::flatbuffers::Offset<::flatbuffers::String> ESTABLISHMENT_DATE) {
    fbb_.AddOffset(SIT::VT_ESTABLISHMENT_DATE, ESTABLISHMENT_DATE);
  }
  void add_CONTACT_INFO(::flatbuffers::Offset<::flatbuffers::String> CONTACT_INFO) {
    fbb_.AddOffset(SIT::VT_CONTACT_INFO, CONTACT_INFO);
  }
  void add_ENVIRONMENTAL_IMPACT(::flatbuffers::Offset<::flatbuffers::String> ENVIRONMENTAL_IMPACT) {
    fbb_.AddOffset(SIT::VT_ENVIRONMENTAL_IMPACT, ENVIRONMENTAL_IMPACT);
  }
  void add_ACCESSIBILITY_INFRA(::flatbuffers::Offset<::flatbuffers::String> ACCESSIBILITY_INFRA) {
    fbb_.AddOffset(SIT::VT_ACCESSIBILITY_INFRA, ACCESSIBILITY_INFRA);
  }
  void add_INTEGRATED_DEVICES(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<IDM>>> INTEGRATED_DEVICES) {
    fbb_.AddOffset(SIT::VT_INTEGRATED_DEVICES, INTEGRATED_DEVICES);
  }
  explicit SITBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SIT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SIT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SIT> CreateSIT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> ID = 0,
    ::flatbuffers::Offset<::flatbuffers::String> NAME = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ABBREVIATION = 0,
    SiteType SITE_TYPE = SiteType_LAUNCH_SITE,
    ::flatbuffers::Offset<::flatbuffers::String> CATCODE = 0,
    ::flatbuffers::Offset<::flatbuffers::String> NETWORK = 0,
    float LATITUDE = 0.0f,
    float LONGITUDE = 0.0f,
    float ALTITUDE = 0.0f,
    ::flatbuffers::Offset<Geometry> GEOMETRY = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> CENTER_POINT_GEOMETRY = 0,
    ::flatbuffers::Offset<::flatbuffers::String> CLASSIFICATION = 0,
    ::flatbuffers::Offset<::flatbuffers::String> CTR_ID = 0,
    ::flatbuffers::Offset<::flatbuffers::String> CREATED_BY = 0,
    ::flatbuffers::Offset<::flatbuffers::String> DESCRIPTION = 0,
    ::flatbuffers::Offset<::flatbuffers::String> MODEL_URL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> SOURCE = 0,
    bool TASKABLE = false,
    ::flatbuffers::Offset<::flatbuffers::String> OPERATIONAL_STATUS = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ESTABLISHMENT_DATE = 0,
    ::flatbuffers::Offset<::flatbuffers::String> CONTACT_INFO = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ENVIRONMENTAL_IMPACT = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ACCESSIBILITY_INFRA = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<IDM>>> INTEGRATED_DEVICES = 0) {
  SITBuilder builder_(_fbb);
  builder_.add_INTEGRATED_DEVICES(INTEGRATED_DEVICES);
  builder_.add_ACCESSIBILITY_INFRA(ACCESSIBILITY_INFRA);
  builder_.add_ENVIRONMENTAL_IMPACT(ENVIRONMENTAL_IMPACT);
  builder_.add_CONTACT_INFO(CONTACT_INFO);
  builder_.add_ESTABLISHMENT_DATE(ESTABLISHMENT_DATE);
  builder_.add_OPERATIONAL_STATUS(OPERATIONAL_STATUS);
  builder_.add_SOURCE(SOURCE);
  builder_.add_MODEL_URL(MODEL_URL);
  builder_.add_DESCRIPTION(DESCRIPTION);
  builder_.add_CREATED_BY(CREATED_BY);
  builder_.add_CTR_ID(CTR_ID);
  builder_.add_CLASSIFICATION(CLASSIFICATION);
  builder_.add_CENTER_POINT_GEOMETRY(CENTER_POINT_GEOMETRY);
  builder_.add_GEOMETRY(GEOMETRY);
  builder_.add_ALTITUDE(ALTITUDE);
  builder_.add_LONGITUDE(LONGITUDE);
  builder_.add_LATITUDE(LATITUDE);
  builder_.add_NETWORK(NETWORK);
  builder_.add_CATCODE(CATCODE);
  builder_.add_ABBREVIATION(ABBREVIATION);
  builder_.add_NAME(NAME);
  builder_.add_ID(ID);
  builder_.add_TASKABLE(TASKABLE);
  builder_.add_SITE_TYPE(SITE_TYPE);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SIT> CreateSITDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *ID = nullptr,
    const char *NAME = nullptr,
    const char *ABBREVIATION = nullptr,
    SiteType SITE_TYPE = SiteType_LAUNCH_SITE,
    const char *CATCODE = nullptr,
    const char *NETWORK = nullptr,
    float LATITUDE = 0.0f,
    float LONGITUDE = 0.0f,
    float ALTITUDE = 0.0f,
    ::flatbuffers::Offset<Geometry> GEOMETRY = 0,
    const std::vector<float> *CENTER_POINT_GEOMETRY = nullptr,
    const char *CLASSIFICATION = nullptr,
    const char *CTR_ID = nullptr,
    const char *CREATED_BY = nullptr,
    const char *DESCRIPTION = nullptr,
    const char *MODEL_URL = nullptr,
    const char *SOURCE = nullptr,
    bool TASKABLE = false,
    const char *OPERATIONAL_STATUS = nullptr,
    const char *ESTABLISHMENT_DATE = nullptr,
    const char *CONTACT_INFO = nullptr,
    const char *ENVIRONMENTAL_IMPACT = nullptr,
    const char *ACCESSIBILITY_INFRA = nullptr,
    const std::vector<::flatbuffers::Offset<IDM>> *INTEGRATED_DEVICES = nullptr) {
  auto ID__ = ID ? _fbb.CreateString(ID) : 0;
  auto NAME__ = NAME ? _fbb.CreateString(NAME) : 0;
  auto ABBREVIATION__ = ABBREVIATION ? _fbb.CreateString(ABBREVIATION) : 0;
  auto CATCODE__ = CATCODE ? _fbb.CreateString(CATCODE) : 0;
  auto NETWORK__ = NETWORK ? _fbb.CreateString(NETWORK) : 0;
  auto CENTER_POINT_GEOMETRY__ = CENTER_POINT_GEOMETRY ? _fbb.CreateVector<float>(*CENTER_POINT_GEOMETRY) : 0;
  auto CLASSIFICATION__ = CLASSIFICATION ? _fbb.CreateString(CLASSIFICATION) : 0;
  auto CTR_ID__ = CTR_ID ? _fbb.CreateString(CTR_ID) : 0;
  auto CREATED_BY__ = CREATED_BY ? _fbb.CreateString(CREATED_BY) : 0;
  auto DESCRIPTION__ = DESCRIPTION ? _fbb.CreateString(DESCRIPTION) : 0;
  auto MODEL_URL__ = MODEL_URL ? _fbb.CreateString(MODEL_URL) : 0;
  auto SOURCE__ = SOURCE ? _fbb.CreateString(SOURCE) : 0;
  auto OPERATIONAL_STATUS__ = OPERATIONAL_STATUS ? _fbb.CreateString(OPERATIONAL_STATUS) : 0;
  auto ESTABLISHMENT_DATE__ = ESTABLISHMENT_DATE ? _fbb.CreateString(ESTABLISHMENT_DATE) : 0;
  auto CONTACT_INFO__ = CONTACT_INFO ? _fbb.CreateString(CONTACT_INFO) : 0;
  auto ENVIRONMENTAL_IMPACT__ = ENVIRONMENTAL_IMPACT ? _fbb.CreateString(ENVIRONMENTAL_IMPACT) : 0;
  auto ACCESSIBILITY_INFRA__ = ACCESSIBILITY_INFRA ? _fbb.CreateString(ACCESSIBILITY_INFRA) : 0;
  auto INTEGRATED_DEVICES__ = INTEGRATED_DEVICES ? _fbb.CreateVector<::flatbuffers::Offset<IDM>>(*INTEGRATED_DEVICES) : 0;
  return CreateSIT(
      _fbb,
      ID__,
      NAME__,
      ABBREVIATION__,
      SITE_TYPE,
      CATCODE__,
      NETWORK__,
      LATITUDE,
      LONGITUDE,
      ALTITUDE,
      GEOMETRY,
      CENTER_POINT_GEOMETRY__,
      CLASSIFICATION__,
      CTR_ID__,
      CREATED_BY__,
      DESCRIPTION__,
      MODEL_URL__,
      SOURCE__,
      TASKABLE,
      OPERATIONAL_STATUS__,
      ESTABLISHMENT_DATE__,
      CONTACT_INFO__,
      ENVIRONMENTAL_IMPACT__,
      ACCESSIBILITY_INFRA__,
      INTEGRATED_DEVICES__);
}

inline const SIT *GetSIT(const void *buf) {
  return ::flatbuffers::GetRoot<SIT>(buf);
}

inline const SIT *GetSizePrefixedSIT(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SIT>(buf);
}

inline const char *SITIdentifier() {
  return "$SIT";
}

inline bool SITBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SITIdentifier());
}

inline bool SizePrefixedSITBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SITIdentifier(), true);
}

inline bool VerifySITBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SIT>(SITIdentifier());
}

inline bool VerifySizePrefixedSITBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SIT>(SITIdentifier());
}

inline void FinishSITBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SIT> root) {
  fbb.Finish(root, SITIdentifier());
}

inline void FinishSizePrefixedSITBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SIT> root) {
  fbb.FinishSizePrefixed(root, SITIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
