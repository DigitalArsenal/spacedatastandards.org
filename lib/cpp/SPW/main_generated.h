// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SPW;
struct SPWBuilder;

struct SPWCOLLECTION;
struct SPWCOLLECTIONBuilder;

enum FluxQualifier : int8_t {
  FluxQualifier_OBSERVED = 0,
  FluxQualifier_BURST_ADJUSTED = 1,
  FluxQualifier_INTERPOLATED_EXTRAPOLATED = 2,
  FluxQualifier_NO_OBSERVATION = 3,
  FluxQualifier_CELESTRAK_INTERPOLATED = 4,
  FluxQualifier_MIN = FluxQualifier_OBSERVED,
  FluxQualifier_MAX = FluxQualifier_CELESTRAK_INTERPOLATED
};

inline const FluxQualifier (&EnumValuesFluxQualifier())[5] {
  static const FluxQualifier values[] = {
    FluxQualifier_OBSERVED,
    FluxQualifier_BURST_ADJUSTED,
    FluxQualifier_INTERPOLATED_EXTRAPOLATED,
    FluxQualifier_NO_OBSERVATION,
    FluxQualifier_CELESTRAK_INTERPOLATED
  };
  return values;
}

inline const char * const *EnumNamesFluxQualifier() {
  static const char * const names[6] = {
    "OBSERVED",
    "BURST_ADJUSTED",
    "INTERPOLATED_EXTRAPOLATED",
    "NO_OBSERVATION",
    "CELESTRAK_INTERPOLATED",
    nullptr
  };
  return names;
}

inline const char *EnumNameFluxQualifier(FluxQualifier e) {
  if (::flatbuffers::IsOutRange(e, FluxQualifier_OBSERVED, FluxQualifier_CELESTRAK_INTERPOLATED)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFluxQualifier()[index];
}

enum F107DataType : int8_t {
  F107DataType_OBS = 0,
  F107DataType_INT = 1,
  F107DataType_PRD = 2,
  F107DataType_PRM = 3,
  F107DataType_MIN = F107DataType_OBS,
  F107DataType_MAX = F107DataType_PRM
};

inline const F107DataType (&EnumValuesF107DataType())[4] {
  static const F107DataType values[] = {
    F107DataType_OBS,
    F107DataType_INT,
    F107DataType_PRD,
    F107DataType_PRM
  };
  return values;
}

inline const char * const *EnumNamesF107DataType() {
  static const char * const names[5] = {
    "OBS",
    "INT",
    "PRD",
    "PRM",
    nullptr
  };
  return names;
}

inline const char *EnumNameF107DataType(F107DataType e) {
  if (::flatbuffers::IsOutRange(e, F107DataType_OBS, F107DataType_PRM)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesF107DataType()[index];
}

/// Space Weather Data Record
struct SPW FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPWBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATE = 4,
    VT_BSRN = 6,
    VT_ND = 8,
    VT_KP1 = 10,
    VT_KP2 = 12,
    VT_KP3 = 14,
    VT_KP4 = 16,
    VT_KP5 = 18,
    VT_KP6 = 20,
    VT_KP7 = 22,
    VT_KP8 = 24,
    VT_KP_SUM = 26,
    VT_AP1 = 28,
    VT_AP2 = 30,
    VT_AP3 = 32,
    VT_AP4 = 34,
    VT_AP5 = 36,
    VT_AP6 = 38,
    VT_AP7 = 40,
    VT_AP8 = 42,
    VT_AP_AVG = 44,
    VT_CP = 46,
    VT_C9 = 48,
    VT_ISN = 50,
    VT_F107_OBS = 52,
    VT_F107_ADJ = 54,
    VT_F107_DATA_TYPE = 56,
    VT_F107_OBS_CENTER81 = 58,
    VT_F107_OBS_LAST81 = 60,
    VT_F107_ADJ_CENTER81 = 62,
    VT_F107_ADJ_LAST81 = 64
  };
  /// Date in ISO 8601 format
  const ::flatbuffers::String *DATE() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATE);
  }
  /// Bartels Solar Rotation Number
  int32_t BSRN() const {
    return GetField<int32_t>(VT_BSRN, 0);
  }
  /// Day within Bartels cycle (1-27)
  int32_t ND() const {
    return GetField<int32_t>(VT_ND, 0);
  }
  /// Planetary 3-hour Range Index (Kp) for 0000-0300 UT, multiplied by 10
  int32_t KP1() const {
    return GetField<int32_t>(VT_KP1, 0);
  }
  /// Planetary 3-hour Range Index (Kp) for 0300-0600 UT, multiplied by 10
  int32_t KP2() const {
    return GetField<int32_t>(VT_KP2, 0);
  }
  /// Planetary 3-hour Range Index (Kp) for 0600-0900 UT, multiplied by 10
  int32_t KP3() const {
    return GetField<int32_t>(VT_KP3, 0);
  }
  /// Planetary 3-hour Range Index (Kp) for 0900-1200 UT, multiplied by 10
  int32_t KP4() const {
    return GetField<int32_t>(VT_KP4, 0);
  }
  /// Planetary 3-hour Range Index (Kp) for 1200-1500 UT, multiplied by 10
  int32_t KP5() const {
    return GetField<int32_t>(VT_KP5, 0);
  }
  /// Planetary 3-hour Range Index (Kp) for 1500-1800 UT, multiplied by 10
  int32_t KP6() const {
    return GetField<int32_t>(VT_KP6, 0);
  }
  /// Planetary 3-hour Range Index (Kp) for 1800-2100 UT, multiplied by 10
  int32_t KP7() const {
    return GetField<int32_t>(VT_KP7, 0);
  }
  /// Planetary 3-hour Range Index (Kp) for 2100-0000 UT, multiplied by 10
  int32_t KP8() const {
    return GetField<int32_t>(VT_KP8, 0);
  }
  /// Sum of the 8 Kp indices for the day
  int32_t KP_SUM() const {
    return GetField<int32_t>(VT_KP_SUM, 0);
  }
  /// Planetary Equivalent Amplitude (Ap) for 0000-0300 UT
  int32_t AP1() const {
    return GetField<int32_t>(VT_AP1, 0);
  }
  /// Planetary Equivalent Amplitude (Ap) for 0300-0600 UT
  int32_t AP2() const {
    return GetField<int32_t>(VT_AP2, 0);
  }
  /// Planetary Equivalent Amplitude (Ap) for 0600-0900 UT
  int32_t AP3() const {
    return GetField<int32_t>(VT_AP3, 0);
  }
  /// Planetary Equivalent Amplitude (Ap) for 0900-1200 UT
  int32_t AP4() const {
    return GetField<int32_t>(VT_AP4, 0);
  }
  /// Planetary Equivalent Amplitude (Ap) for 1200-1500 UT
  int32_t AP5() const {
    return GetField<int32_t>(VT_AP5, 0);
  }
  /// Planetary Equivalent Amplitude (Ap) for 1500-1800 UT
  int32_t AP6() const {
    return GetField<int32_t>(VT_AP6, 0);
  }
  /// Planetary Equivalent Amplitude (Ap) for 1800-2100 UT
  int32_t AP7() const {
    return GetField<int32_t>(VT_AP7, 0);
  }
  /// Planetary Equivalent Amplitude (Ap) for 2100-0000 UT
  int32_t AP8() const {
    return GetField<int32_t>(VT_AP8, 0);
  }
  /// Arithmetic average of the 8 Ap indices for the day
  int32_t AP_AVG() const {
    return GetField<int32_t>(VT_AP_AVG, 0);
  }
  /// Planetary Daily Character Figure (0.0 to 2.5)
  float CP() const {
    return GetField<float>(VT_CP, 0.0f);
  }
  /// C9 index (0-9)
  int32_t C9() const {
    return GetField<int32_t>(VT_C9, 0);
  }
  /// International Sunspot Number
  int32_t ISN() const {
    return GetField<int32_t>(VT_ISN, 0);
  }
  /// Observed 10.7cm Solar Radio Flux
  float F107_OBS() const {
    return GetField<float>(VT_F107_OBS, 0.0f);
  }
  /// Adjusted 10.7cm Solar Radio Flux (to 1 AU)
  float F107_ADJ() const {
    return GetField<float>(VT_F107_ADJ, 0.0f);
  }
  /// F10.7 Data Type
  F107DataType F107_DATA_TYPE() const {
    return static_cast<F107DataType>(GetField<int8_t>(VT_F107_DATA_TYPE, 0));
  }
  /// 81-day centered average of observed F10.7
  float F107_OBS_CENTER81() const {
    return GetField<float>(VT_F107_OBS_CENTER81, 0.0f);
  }
  /// 81-day trailing average of observed F10.7
  float F107_OBS_LAST81() const {
    return GetField<float>(VT_F107_OBS_LAST81, 0.0f);
  }
  /// 81-day centered average of adjusted F10.7
  float F107_ADJ_CENTER81() const {
    return GetField<float>(VT_F107_ADJ_CENTER81, 0.0f);
  }
  /// 81-day trailing average of adjusted F10.7
  float F107_ADJ_LAST81() const {
    return GetField<float>(VT_F107_ADJ_LAST81, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATE) &&
           verifier.VerifyString(DATE()) &&
           VerifyField<int32_t>(verifier, VT_BSRN, 4) &&
           VerifyField<int32_t>(verifier, VT_ND, 4) &&
           VerifyField<int32_t>(verifier, VT_KP1, 4) &&
           VerifyField<int32_t>(verifier, VT_KP2, 4) &&
           VerifyField<int32_t>(verifier, VT_KP3, 4) &&
           VerifyField<int32_t>(verifier, VT_KP4, 4) &&
           VerifyField<int32_t>(verifier, VT_KP5, 4) &&
           VerifyField<int32_t>(verifier, VT_KP6, 4) &&
           VerifyField<int32_t>(verifier, VT_KP7, 4) &&
           VerifyField<int32_t>(verifier, VT_KP8, 4) &&
           VerifyField<int32_t>(verifier, VT_KP_SUM, 4) &&
           VerifyField<int32_t>(verifier, VT_AP1, 4) &&
           VerifyField<int32_t>(verifier, VT_AP2, 4) &&
           VerifyField<int32_t>(verifier, VT_AP3, 4) &&
           VerifyField<int32_t>(verifier, VT_AP4, 4) &&
           VerifyField<int32_t>(verifier, VT_AP5, 4) &&
           VerifyField<int32_t>(verifier, VT_AP6, 4) &&
           VerifyField<int32_t>(verifier, VT_AP7, 4) &&
           VerifyField<int32_t>(verifier, VT_AP8, 4) &&
           VerifyField<int32_t>(verifier, VT_AP_AVG, 4) &&
           VerifyField<float>(verifier, VT_CP, 4) &&
           VerifyField<int32_t>(verifier, VT_C9, 4) &&
           VerifyField<int32_t>(verifier, VT_ISN, 4) &&
           VerifyField<float>(verifier, VT_F107_OBS, 4) &&
           VerifyField<float>(verifier, VT_F107_ADJ, 4) &&
           VerifyField<int8_t>(verifier, VT_F107_DATA_TYPE, 1) &&
           VerifyField<float>(verifier, VT_F107_OBS_CENTER81, 4) &&
           VerifyField<float>(verifier, VT_F107_OBS_LAST81, 4) &&
           VerifyField<float>(verifier, VT_F107_ADJ_CENTER81, 4) &&
           VerifyField<float>(verifier, VT_F107_ADJ_LAST81, 4) &&
           verifier.EndTable();
  }
};

struct SPWBuilder {
  typedef SPW Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_DATE(::flatbuffers::Offset<::flatbuffers::String> DATE) {
    fbb_.AddOffset(SPW::VT_DATE, DATE);
  }
  void add_BSRN(int32_t BSRN) {
    fbb_.AddElement<int32_t>(SPW::VT_BSRN, BSRN, 0);
  }
  void add_ND(int32_t ND) {
    fbb_.AddElement<int32_t>(SPW::VT_ND, ND, 0);
  }
  void add_KP1(int32_t KP1) {
    fbb_.AddElement<int32_t>(SPW::VT_KP1, KP1, 0);
  }
  void add_KP2(int32_t KP2) {
    fbb_.AddElement<int32_t>(SPW::VT_KP2, KP2, 0);
  }
  void add_KP3(int32_t KP3) {
    fbb_.AddElement<int32_t>(SPW::VT_KP3, KP3, 0);
  }
  void add_KP4(int32_t KP4) {
    fbb_.AddElement<int32_t>(SPW::VT_KP4, KP4, 0);
  }
  void add_KP5(int32_t KP5) {
    fbb_.AddElement<int32_t>(SPW::VT_KP5, KP5, 0);
  }
  void add_KP6(int32_t KP6) {
    fbb_.AddElement<int32_t>(SPW::VT_KP6, KP6, 0);
  }
  void add_KP7(int32_t KP7) {
    fbb_.AddElement<int32_t>(SPW::VT_KP7, KP7, 0);
  }
  void add_KP8(int32_t KP8) {
    fbb_.AddElement<int32_t>(SPW::VT_KP8, KP8, 0);
  }
  void add_KP_SUM(int32_t KP_SUM) {
    fbb_.AddElement<int32_t>(SPW::VT_KP_SUM, KP_SUM, 0);
  }
  void add_AP1(int32_t AP1) {
    fbb_.AddElement<int32_t>(SPW::VT_AP1, AP1, 0);
  }
  void add_AP2(int32_t AP2) {
    fbb_.AddElement<int32_t>(SPW::VT_AP2, AP2, 0);
  }
  void add_AP3(int32_t AP3) {
    fbb_.AddElement<int32_t>(SPW::VT_AP3, AP3, 0);
  }
  void add_AP4(int32_t AP4) {
    fbb_.AddElement<int32_t>(SPW::VT_AP4, AP4, 0);
  }
  void add_AP5(int32_t AP5) {
    fbb_.AddElement<int32_t>(SPW::VT_AP5, AP5, 0);
  }
  void add_AP6(int32_t AP6) {
    fbb_.AddElement<int32_t>(SPW::VT_AP6, AP6, 0);
  }
  void add_AP7(int32_t AP7) {
    fbb_.AddElement<int32_t>(SPW::VT_AP7, AP7, 0);
  }
  void add_AP8(int32_t AP8) {
    fbb_.AddElement<int32_t>(SPW::VT_AP8, AP8, 0);
  }
  void add_AP_AVG(int32_t AP_AVG) {
    fbb_.AddElement<int32_t>(SPW::VT_AP_AVG, AP_AVG, 0);
  }
  void add_CP(float CP) {
    fbb_.AddElement<float>(SPW::VT_CP, CP, 0.0f);
  }
  void add_C9(int32_t C9) {
    fbb_.AddElement<int32_t>(SPW::VT_C9, C9, 0);
  }
  void add_ISN(int32_t ISN) {
    fbb_.AddElement<int32_t>(SPW::VT_ISN, ISN, 0);
  }
  void add_F107_OBS(float F107_OBS) {
    fbb_.AddElement<float>(SPW::VT_F107_OBS, F107_OBS, 0.0f);
  }
  void add_F107_ADJ(float F107_ADJ) {
    fbb_.AddElement<float>(SPW::VT_F107_ADJ, F107_ADJ, 0.0f);
  }
  void add_F107_DATA_TYPE(F107DataType F107_DATA_TYPE) {
    fbb_.AddElement<int8_t>(SPW::VT_F107_DATA_TYPE, static_cast<int8_t>(F107_DATA_TYPE), 0);
  }
  void add_F107_OBS_CENTER81(float F107_OBS_CENTER81) {
    fbb_.AddElement<float>(SPW::VT_F107_OBS_CENTER81, F107_OBS_CENTER81, 0.0f);
  }
  void add_F107_OBS_LAST81(float F107_OBS_LAST81) {
    fbb_.AddElement<float>(SPW::VT_F107_OBS_LAST81, F107_OBS_LAST81, 0.0f);
  }
  void add_F107_ADJ_CENTER81(float F107_ADJ_CENTER81) {
    fbb_.AddElement<float>(SPW::VT_F107_ADJ_CENTER81, F107_ADJ_CENTER81, 0.0f);
  }
  void add_F107_ADJ_LAST81(float F107_ADJ_LAST81) {
    fbb_.AddElement<float>(SPW::VT_F107_ADJ_LAST81, F107_ADJ_LAST81, 0.0f);
  }
  explicit SPWBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPW> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPW>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPW> CreateSPW(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> DATE = 0,
    int32_t BSRN = 0,
    int32_t ND = 0,
    int32_t KP1 = 0,
    int32_t KP2 = 0,
    int32_t KP3 = 0,
    int32_t KP4 = 0,
    int32_t KP5 = 0,
    int32_t KP6 = 0,
    int32_t KP7 = 0,
    int32_t KP8 = 0,
    int32_t KP_SUM = 0,
    int32_t AP1 = 0,
    int32_t AP2 = 0,
    int32_t AP3 = 0,
    int32_t AP4 = 0,
    int32_t AP5 = 0,
    int32_t AP6 = 0,
    int32_t AP7 = 0,
    int32_t AP8 = 0,
    int32_t AP_AVG = 0,
    float CP = 0.0f,
    int32_t C9 = 0,
    int32_t ISN = 0,
    float F107_OBS = 0.0f,
    float F107_ADJ = 0.0f,
    F107DataType F107_DATA_TYPE = F107DataType_OBS,
    float F107_OBS_CENTER81 = 0.0f,
    float F107_OBS_LAST81 = 0.0f,
    float F107_ADJ_CENTER81 = 0.0f,
    float F107_ADJ_LAST81 = 0.0f) {
  SPWBuilder builder_(_fbb);
  builder_.add_F107_ADJ_LAST81(F107_ADJ_LAST81);
  builder_.add_F107_ADJ_CENTER81(F107_ADJ_CENTER81);
  builder_.add_F107_OBS_LAST81(F107_OBS_LAST81);
  builder_.add_F107_OBS_CENTER81(F107_OBS_CENTER81);
  builder_.add_F107_ADJ(F107_ADJ);
  builder_.add_F107_OBS(F107_OBS);
  builder_.add_ISN(ISN);
  builder_.add_C9(C9);
  builder_.add_CP(CP);
  builder_.add_AP_AVG(AP_AVG);
  builder_.add_AP8(AP8);
  builder_.add_AP7(AP7);
  builder_.add_AP6(AP6);
  builder_.add_AP5(AP5);
  builder_.add_AP4(AP4);
  builder_.add_AP3(AP3);
  builder_.add_AP2(AP2);
  builder_.add_AP1(AP1);
  builder_.add_KP_SUM(KP_SUM);
  builder_.add_KP8(KP8);
  builder_.add_KP7(KP7);
  builder_.add_KP6(KP6);
  builder_.add_KP5(KP5);
  builder_.add_KP4(KP4);
  builder_.add_KP3(KP3);
  builder_.add_KP2(KP2);
  builder_.add_KP1(KP1);
  builder_.add_ND(ND);
  builder_.add_BSRN(BSRN);
  builder_.add_DATE(DATE);
  builder_.add_F107_DATA_TYPE(F107_DATA_TYPE);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SPW> CreateSPWDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *DATE = nullptr,
    int32_t BSRN = 0,
    int32_t ND = 0,
    int32_t KP1 = 0,
    int32_t KP2 = 0,
    int32_t KP3 = 0,
    int32_t KP4 = 0,
    int32_t KP5 = 0,
    int32_t KP6 = 0,
    int32_t KP7 = 0,
    int32_t KP8 = 0,
    int32_t KP_SUM = 0,
    int32_t AP1 = 0,
    int32_t AP2 = 0,
    int32_t AP3 = 0,
    int32_t AP4 = 0,
    int32_t AP5 = 0,
    int32_t AP6 = 0,
    int32_t AP7 = 0,
    int32_t AP8 = 0,
    int32_t AP_AVG = 0,
    float CP = 0.0f,
    int32_t C9 = 0,
    int32_t ISN = 0,
    float F107_OBS = 0.0f,
    float F107_ADJ = 0.0f,
    F107DataType F107_DATA_TYPE = F107DataType_OBS,
    float F107_OBS_CENTER81 = 0.0f,
    float F107_OBS_LAST81 = 0.0f,
    float F107_ADJ_CENTER81 = 0.0f,
    float F107_ADJ_LAST81 = 0.0f) {
  auto DATE__ = DATE ? _fbb.CreateString(DATE) : 0;
  return CreateSPW(
      _fbb,
      DATE__,
      BSRN,
      ND,
      KP1,
      KP2,
      KP3,
      KP4,
      KP5,
      KP6,
      KP7,
      KP8,
      KP_SUM,
      AP1,
      AP2,
      AP3,
      AP4,
      AP5,
      AP6,
      AP7,
      AP8,
      AP_AVG,
      CP,
      C9,
      ISN,
      F107_OBS,
      F107_ADJ,
      F107_DATA_TYPE,
      F107_OBS_CENTER81,
      F107_OBS_LAST81,
      F107_ADJ_CENTER81,
      F107_ADJ_LAST81);
}

struct SPWCOLLECTION FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPWCOLLECTIONBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORDS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<SPW>> *RECORDS() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<SPW>> *>(VT_RECORDS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RECORDS) &&
           verifier.VerifyVector(RECORDS()) &&
           verifier.VerifyVectorOfTables(RECORDS()) &&
           verifier.EndTable();
  }
};

struct SPWCOLLECTIONBuilder {
  typedef SPWCOLLECTION Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_RECORDS(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SPW>>> RECORDS) {
    fbb_.AddOffset(SPWCOLLECTION::VT_RECORDS, RECORDS);
  }
  explicit SPWCOLLECTIONBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPWCOLLECTION> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPWCOLLECTION>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPWCOLLECTION> CreateSPWCOLLECTION(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SPW>>> RECORDS = 0) {
  SPWCOLLECTIONBuilder builder_(_fbb);
  builder_.add_RECORDS(RECORDS);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SPWCOLLECTION> CreateSPWCOLLECTIONDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<SPW>> *RECORDS = nullptr) {
  auto RECORDS__ = RECORDS ? _fbb.CreateVector<::flatbuffers::Offset<SPW>>(*RECORDS) : 0;
  return CreateSPWCOLLECTION(
      _fbb,
      RECORDS__);
}

inline const SPW *GetSPW(const void *buf) {
  return ::flatbuffers::GetRoot<SPW>(buf);
}

inline const SPW *GetSizePrefixedSPW(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SPW>(buf);
}

inline const char *SPWIdentifier() {
  return "$SPW";
}

inline bool SPWBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SPWIdentifier());
}

inline bool SizePrefixedSPWBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SPWIdentifier(), true);
}

inline bool VerifySPWBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SPW>(SPWIdentifier());
}

inline bool VerifySizePrefixedSPWBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SPW>(SPWIdentifier());
}

inline void FinishSPWBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SPW> root) {
  fbb.Finish(root, SPWIdentifier());
}

inline void FinishSizePrefixedSPWBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SPW> root) {
  fbb.FinishSizePrefixed(root, SPWIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
