// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct RFM;
struct RFMBuilder;

enum refFrame : int8_t {
  /// Earth-Centered-Earth-Fixed: Rotates with Earth. X-axis at prime meridian, Y eastward, Z towards North Pole.
  refFrame_ECEF = 0,
  /// International Celestial Reference Frame: Fixed relative to distant stars. Used in astronomy.
  refFrame_ICRF = 1,
  /// True Equator Mean Equinox: Dynamic frame for SGP4 satellite tracking.
  refFrame_TEME = 2,
  /// East-North-Up: Local tangent plane for surface points. Suitable for stationary objects.
  refFrame_ENU = 3,
  /// North-East-Down: Aviation/navigation frame aligned with gravity.
  refFrame_NED = 4,
  /// North-East-Up: Similar to NED, with "Up" opposite gravity.
  refFrame_NEU = 5,
  /// Radial-Intrack-Cross-track: Spacecraft orientation aligned with orbit.
  refFrame_RIC = 6,
  /// Earth Mean Equator and Equinox of J2000: Fixed relative to stars, used for celestial mechanics.
  refFrame_J2000 = 7,
  /// Geocentric Celestial Reference Frame: Inertial Earth-centered frame.
  refFrame_GCRF = 8,
  /// Greenwich Rotating Coordinates: Rotates with Earth's true equator.
  refFrame_GRC = 9,
  /// International Terrestrial Reference Frame 2000: Rotating Earth-fixed frame.
  refFrame_ITRF2000 = 10,
  /// International Terrestrial Reference Frame 1993: Older ITRF realization.
  refFrame_ITRF93 = 11,
  /// International Terrestrial Reference Frame 1997: Intermediate ITRF realization.
  refFrame_ITRF97 = 12,
  /// True of Date, Rotating: Rotates with Earth's true equator.
  refFrame_TDR = 13,
  /// True of Date: Similar to TDR, without rotation.
  refFrame_TOD = 14,
  /// Radial, Transverse, Normal: Orbit frame for spacecraft dynamics.
  refFrame_RTN = 15,
  /// Transverse, Velocity, Normal: Alternative orbit frame.
  refFrame_TVN = 16,
  /// Vehicle-Body-Local-Horizontal: Orbit frame aligned with spacecraft.
  refFrame_VVLH = 17,
  /// Vehicle-Local-Vertical-Local-Horizontal: Used in surface or proximity ops.
  refFrame_VLVH = 18,
  /// Local Tangent Plane: Surface-fixed frame for terrestrial uses.
  refFrame_LTP = 19,
  /// Local Vertical-Local Horizontal: Orbit frame with Z towards Earth center.
  refFrame_LVLH = 20,
  /// Polar-North-East: Polar coordinate frame.
  refFrame_PNE = 21,
  /// Body-Fixed Reference Frame: Fixed to a spacecraft or celestial object.
  refFrame_BRF = 22,
  /// Radial, Down-track, Cross-track: Alternate name for RTN.
  refFrame_RSW = 23,
  /// Tangential, Normal, Cross-track: Local orbit frame.
  refFrame_TNW = 24,
  /// Radial, Along-track, Cross-track: Satellite motion frame.
  refFrame_UVW = 25,
  /// Equinoctial Inertial: Frame with axes aligned to orbital properties.
  refFrame_EQW_INERTIAL = 26,
  /// Inertial version of LVLH.
  refFrame_LVLH_INERTIAL = 27,
  /// Rotating LVLH frame.
  refFrame_LVLH_ROTATING = 28,
  /// Inertial Nadir-Sun-Normal frame.
  refFrame_NSW_INERTIAL = 29,
  /// Rotating Nadir-Sun-Normal frame.
  refFrame_NSW_ROTATING = 30,
  /// Inertial Transverse-Velocity-Normal frame.
  refFrame_NTW_INERTIAL = 31,
  /// Rotating Transverse-Velocity-Normal frame.
  refFrame_NTW_ROTATING = 32,
  /// Perifocal Coordinate System: Inertial frame aligned to periapsis.
  refFrame_PQW_INERTIAL = 33,
  /// Inertial Radial, Transverse, Normal frame.
  refFrame_RSW_INERTIAL = 34,
  /// Rotating RSW frame: Aligned with orbit angular momentum.
  refFrame_RSW_ROTATING = 35,
  /// South/East/Zenith inertial frame.
  refFrame_SEZ_INERTIAL = 36,
  /// Rotating South/East/Zenith frame.
  refFrame_SEZ_ROTATING = 37,
  /// Inertial Tangential, Normal, Cross-track frame.
  refFrame_TNW_INERTIAL = 38,
  /// Rotating Tangential, Normal, Cross-track frame.
  refFrame_TNW_ROTATING = 39,
  /// Velocity, Normal, Co-normal inertial frame.
  refFrame_VNC_INERTIAL = 40,
  /// Rotating Velocity, Normal, Co-normal frame.
  refFrame_VNC_ROTATING = 41,
  /// Central Body alignment inertial frame.
  refFrame_ALIGN_CB = 42,
  /// Earth alignment inertial frame.
  refFrame_ALIGN_EARTH = 43,
  /// Inertial realization of B1950 epoch.
  refFrame_B1950 = 44,
  /// Celestial Intermediate Reference System.
  refFrame_CIRS = 45,
  /// DTRF Inertial frame with corrections.
  refFrame_DTRFyyyy = 46,
  /// Earth-Fixed Greenwich rotating frame.
  refFrame_EFG = 47,
  /// Earth Mean Equator and Equinox of 2000 epoch.
  refFrame_EME2000 = 48,
  /// Central Body fixed rotating frame.
  refFrame_FIXED_CB = 49,
  /// Earth-fixed rotating frame.
  refFrame_FIXED_EARTH = 50,
  /// Geocentric Celestial Reference Frame with versioning.
  refFrame_GCRFn = 51,
  /// Greenwich True-of-Date rotating frame.
  refFrame_GTOD = 52,
  /// Mean of Date for all central bodies except Earth and Moon.
  refFrame_MOD_CB = 53,
  /// Mean of Date for Earth.
  refFrame_MOD_EARTH = 54,
  /// Mean of Date for Moon.
  refFrame_MOD_MOON = 55,
  /// Mean of Epoch for central bodies.
  refFrame_MOE_CB = 56,
  /// Mean of Epoch for Earth.
  refFrame_MOE_EARTH = 57,
  /// Lunar Moon Mean Earth reference frame.
  refFrame_MOON_ME = 58,
  /// Lunar Mean Equator and IAU Node reference frame.
  refFrame_MOON_MEIAUE = 59,
  /// Lunar Principal Axis rotating frame.
  refFrame_MOON_PAxxx = 60,
  /// True Equator Mean Equinox of Date.
  refFrame_TEMEOFDATE = 61,
  /// True Equator Mean Equinox of Epoch.
  refFrame_TEMEOFEPOCH = 62,
  /// Terrestrial Intermediate Reference System.
  refFrame_TIRS = 63,
  /// True of Date for central bodies.
  refFrame_TOD_CB = 64,
  /// True of Date for Earth.
  refFrame_TOD_EARTH = 65,
  /// True of Date for Moon.
  refFrame_TOD_MOON = 66,
  /// True of Epoch for central bodies.
  refFrame_TOE_CB = 67,
  /// True of Epoch for Earth.
  refFrame_TOE_EARTH = 68,
  /// True of Epoch for Moon.
  refFrame_TOE_MOON = 69,
  /// True Ecliptic reference frame.
  refFrame_TRUE_ECLIPTIC = 70,
  /// Launch go-inertial reference frame.
  refFrame_UVW_GO_INERTIAL = 71,
  /// WGS 84 Earth-fixed terrestrial system.
  refFrame_WGS84 = 72,
  /// Accelerometer reference frame.
  refFrame_ACC_i = 73,
  /// Actuator reference frame.
  refFrame_ACTUATOR_i = 74,
  /// Autonomous Star Tracker reference frame.
  refFrame_AST_i = 75,
  /// Coarse Sun Sensor reference frame.
  refFrame_CSS_i = 76,
  /// Digital Sun Sensor reference frame.
  refFrame_DSS_i = 77,
  /// Earth Sensor Assembly reference frame.
  refFrame_ESA_i = 78,
  /// Gyro reference frame.
  refFrame_GYRO_FRAME_i = 79,
  /// Inertial Measurement Unit reference frame.
  refFrame_IMU_FRAME_i = 80,
  /// Instrument reference frame.
  refFrame_INSTRUMENT_i = 81,
  /// Magnetic Torque Assembly reference frame.
  refFrame_MTA_i = 82,
  /// Reaction Wheel reference frame.
  refFrame_RW_i = 83,
  /// Solar Array reference frame.
  refFrame_SA_i = 84,
  /// Spacecraft Body reference frame.
  refFrame_SC_BODY_i = 85,
  /// Sensor reference frame.
  refFrame_SENSOR_i = 86,
  /// Star Tracker reference frame.
  refFrame_STARTRACKER_i = 87,
  /// Three Axis Magnetometer reference frame.
  refFrame_TAM_i = 88,
  refFrame_MIN = refFrame_ECEF,
  refFrame_MAX = refFrame_TAM_i
};

inline const refFrame (&EnumValuesrefFrame())[89] {
  static const refFrame values[] = {
    refFrame_ECEF,
    refFrame_ICRF,
    refFrame_TEME,
    refFrame_ENU,
    refFrame_NED,
    refFrame_NEU,
    refFrame_RIC,
    refFrame_J2000,
    refFrame_GCRF,
    refFrame_GRC,
    refFrame_ITRF2000,
    refFrame_ITRF93,
    refFrame_ITRF97,
    refFrame_TDR,
    refFrame_TOD,
    refFrame_RTN,
    refFrame_TVN,
    refFrame_VVLH,
    refFrame_VLVH,
    refFrame_LTP,
    refFrame_LVLH,
    refFrame_PNE,
    refFrame_BRF,
    refFrame_RSW,
    refFrame_TNW,
    refFrame_UVW,
    refFrame_EQW_INERTIAL,
    refFrame_LVLH_INERTIAL,
    refFrame_LVLH_ROTATING,
    refFrame_NSW_INERTIAL,
    refFrame_NSW_ROTATING,
    refFrame_NTW_INERTIAL,
    refFrame_NTW_ROTATING,
    refFrame_PQW_INERTIAL,
    refFrame_RSW_INERTIAL,
    refFrame_RSW_ROTATING,
    refFrame_SEZ_INERTIAL,
    refFrame_SEZ_ROTATING,
    refFrame_TNW_INERTIAL,
    refFrame_TNW_ROTATING,
    refFrame_VNC_INERTIAL,
    refFrame_VNC_ROTATING,
    refFrame_ALIGN_CB,
    refFrame_ALIGN_EARTH,
    refFrame_B1950,
    refFrame_CIRS,
    refFrame_DTRFyyyy,
    refFrame_EFG,
    refFrame_EME2000,
    refFrame_FIXED_CB,
    refFrame_FIXED_EARTH,
    refFrame_GCRFn,
    refFrame_GTOD,
    refFrame_MOD_CB,
    refFrame_MOD_EARTH,
    refFrame_MOD_MOON,
    refFrame_MOE_CB,
    refFrame_MOE_EARTH,
    refFrame_MOON_ME,
    refFrame_MOON_MEIAUE,
    refFrame_MOON_PAxxx,
    refFrame_TEMEOFDATE,
    refFrame_TEMEOFEPOCH,
    refFrame_TIRS,
    refFrame_TOD_CB,
    refFrame_TOD_EARTH,
    refFrame_TOD_MOON,
    refFrame_TOE_CB,
    refFrame_TOE_EARTH,
    refFrame_TOE_MOON,
    refFrame_TRUE_ECLIPTIC,
    refFrame_UVW_GO_INERTIAL,
    refFrame_WGS84,
    refFrame_ACC_i,
    refFrame_ACTUATOR_i,
    refFrame_AST_i,
    refFrame_CSS_i,
    refFrame_DSS_i,
    refFrame_ESA_i,
    refFrame_GYRO_FRAME_i,
    refFrame_IMU_FRAME_i,
    refFrame_INSTRUMENT_i,
    refFrame_MTA_i,
    refFrame_RW_i,
    refFrame_SA_i,
    refFrame_SC_BODY_i,
    refFrame_SENSOR_i,
    refFrame_STARTRACKER_i,
    refFrame_TAM_i
  };
  return values;
}

inline const char * const *EnumNamesrefFrame() {
  static const char * const names[90] = {
    "ECEF",
    "ICRF",
    "TEME",
    "ENU",
    "NED",
    "NEU",
    "RIC",
    "J2000",
    "GCRF",
    "GRC",
    "ITRF2000",
    "ITRF93",
    "ITRF97",
    "TDR",
    "TOD",
    "RTN",
    "TVN",
    "VVLH",
    "VLVH",
    "LTP",
    "LVLH",
    "PNE",
    "BRF",
    "RSW",
    "TNW",
    "UVW",
    "EQW_INERTIAL",
    "LVLH_INERTIAL",
    "LVLH_ROTATING",
    "NSW_INERTIAL",
    "NSW_ROTATING",
    "NTW_INERTIAL",
    "NTW_ROTATING",
    "PQW_INERTIAL",
    "RSW_INERTIAL",
    "RSW_ROTATING",
    "SEZ_INERTIAL",
    "SEZ_ROTATING",
    "TNW_INERTIAL",
    "TNW_ROTATING",
    "VNC_INERTIAL",
    "VNC_ROTATING",
    "ALIGN_CB",
    "ALIGN_EARTH",
    "B1950",
    "CIRS",
    "DTRFyyyy",
    "EFG",
    "EME2000",
    "FIXED_CB",
    "FIXED_EARTH",
    "GCRFn",
    "GTOD",
    "MOD_CB",
    "MOD_EARTH",
    "MOD_MOON",
    "MOE_CB",
    "MOE_EARTH",
    "MOON_ME",
    "MOON_MEIAUE",
    "MOON_PAxxx",
    "TEMEOFDATE",
    "TEMEOFEPOCH",
    "TIRS",
    "TOD_CB",
    "TOD_EARTH",
    "TOD_MOON",
    "TOE_CB",
    "TOE_EARTH",
    "TOE_MOON",
    "TRUE_ECLIPTIC",
    "UVW_GO_INERTIAL",
    "WGS84",
    "ACC_i",
    "ACTUATOR_i",
    "AST_i",
    "CSS_i",
    "DSS_i",
    "ESA_i",
    "GYRO_FRAME_i",
    "IMU_FRAME_i",
    "INSTRUMENT_i",
    "MTA_i",
    "RW_i",
    "SA_i",
    "SC_BODY_i",
    "SENSOR_i",
    "STARTRACKER_i",
    "TAM_i",
    nullptr
  };
  return names;
}

inline const char *EnumNamerefFrame(refFrame e) {
  if (::flatbuffers::IsOutRange(e, refFrame_ECEF, refFrame_TAM_i)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesrefFrame()[index];
}

/// Reference Frame Message
struct RFM FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RFMBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REFERENCE_FRAME = 4
  };
  refFrame REFERENCE_FRAME() const {
    return static_cast<refFrame>(GetField<int8_t>(VT_REFERENCE_FRAME, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_REFERENCE_FRAME, 1) &&
           verifier.EndTable();
  }
};

struct RFMBuilder {
  typedef RFM Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_REFERENCE_FRAME(refFrame REFERENCE_FRAME) {
    fbb_.AddElement<int8_t>(RFM::VT_REFERENCE_FRAME, static_cast<int8_t>(REFERENCE_FRAME), 0);
  }
  explicit RFMBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RFM> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RFM>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RFM> CreateRFM(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    refFrame REFERENCE_FRAME = refFrame_ECEF) {
  RFMBuilder builder_(_fbb);
  builder_.add_REFERENCE_FRAME(REFERENCE_FRAME);
  return builder_.Finish();
}

inline const RFM *GetRFM(const void *buf) {
  return ::flatbuffers::GetRoot<RFM>(buf);
}

inline const RFM *GetSizePrefixedRFM(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<RFM>(buf);
}

inline const char *RFMIdentifier() {
  return "$RFM";
}

inline bool RFMBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RFMIdentifier());
}

inline bool SizePrefixedRFMBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RFMIdentifier(), true);
}

inline bool VerifyRFMBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RFM>(RFMIdentifier());
}

inline bool VerifySizePrefixedRFMBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RFM>(RFMIdentifier());
}

inline void FinishRFMBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RFM> root) {
  fbb.Finish(root, RFMIdentifier());
}

inline void FinishSizePrefixedRFMBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RFM> root) {
  fbb.FinishSizePrefixed(root, RFMIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
