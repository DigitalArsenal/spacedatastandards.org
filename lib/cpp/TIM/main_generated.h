// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct TIM;
struct TIMBuilder;

struct TIMCOLLECTION;
struct TIMCOLLECTIONBuilder;

enum timeSystem : int8_t {
  /// Greenwich Mean Sidereal Time
  timeSystem_GMST = 0,
  /// Global Positioning System
  timeSystem_GPS = 1,
  /// Mission Elapsed Time
  timeSystem_MET = 2,
  /// Mission Relative Time
  timeSystem_MRT = 3,
  /// Spacecraft Clock (receiver) (requires rules for interpretation in ICD)
  timeSystem_SCLK = 4,
  /// International Atomic Time
  timeSystem_TAI = 5,
  /// Barycentric Coordinate Time
  timeSystem_TCB = 6,
  /// Barycentric Dynamical Time
  timeSystem_TDB = 7,
  /// Geocentric Coordinate Time
  timeSystem_TCG = 8,
  /// Terrestrial Time
  timeSystem_TT = 9,
  /// Universal Time
  timeSystem_UT1 = 10,
  /// Coordinated Universal Time
  timeSystem_UTC = 11,
  timeSystem_MIN = timeSystem_GMST,
  timeSystem_MAX = timeSystem_UTC
};

inline const timeSystem (&EnumValuestimeSystem())[12] {
  static const timeSystem values[] = {
    timeSystem_GMST,
    timeSystem_GPS,
    timeSystem_MET,
    timeSystem_MRT,
    timeSystem_SCLK,
    timeSystem_TAI,
    timeSystem_TCB,
    timeSystem_TDB,
    timeSystem_TCG,
    timeSystem_TT,
    timeSystem_UT1,
    timeSystem_UTC
  };
  return values;
}

inline const char * const *EnumNamestimeSystem() {
  static const char * const names[13] = {
    "GMST",
    "GPS",
    "MET",
    "MRT",
    "SCLK",
    "TAI",
    "TCB",
    "TDB",
    "TCG",
    "TT",
    "UT1",
    "UTC",
    nullptr
  };
  return names;
}

inline const char *EnumNametimeSystem(timeSystem e) {
  if (::flatbuffers::IsOutRange(e, timeSystem_GMST, timeSystem_UTC)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamestimeSystem()[index];
}

struct TIM FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TIMBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME_SYSTEM = 4
  };
  timeSystem TIME_SYSTEM() const {
    return static_cast<timeSystem>(GetField<int8_t>(VT_TIME_SYSTEM, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TIME_SYSTEM, 1) &&
           verifier.EndTable();
  }
};

struct TIMBuilder {
  typedef TIM Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_TIME_SYSTEM(timeSystem TIME_SYSTEM) {
    fbb_.AddElement<int8_t>(TIM::VT_TIME_SYSTEM, static_cast<int8_t>(TIME_SYSTEM), 0);
  }
  explicit TIMBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TIM> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TIM>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TIM> CreateTIM(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    timeSystem TIME_SYSTEM = timeSystem_GMST) {
  TIMBuilder builder_(_fbb);
  builder_.add_TIME_SYSTEM(TIME_SYSTEM);
  return builder_.Finish();
}

struct TIMCOLLECTION FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TIMCOLLECTIONBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORDS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<TIM>> *RECORDS() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<TIM>> *>(VT_RECORDS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RECORDS) &&
           verifier.VerifyVector(RECORDS()) &&
           verifier.VerifyVectorOfTables(RECORDS()) &&
           verifier.EndTable();
  }
};

struct TIMCOLLECTIONBuilder {
  typedef TIMCOLLECTION Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_RECORDS(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<TIM>>> RECORDS) {
    fbb_.AddOffset(TIMCOLLECTION::VT_RECORDS, RECORDS);
  }
  explicit TIMCOLLECTIONBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TIMCOLLECTION> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TIMCOLLECTION>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TIMCOLLECTION> CreateTIMCOLLECTION(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<TIM>>> RECORDS = 0) {
  TIMCOLLECTIONBuilder builder_(_fbb);
  builder_.add_RECORDS(RECORDS);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TIMCOLLECTION> CreateTIMCOLLECTIONDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<TIM>> *RECORDS = nullptr) {
  auto RECORDS__ = RECORDS ? _fbb.CreateVector<::flatbuffers::Offset<TIM>>(*RECORDS) : 0;
  return CreateTIMCOLLECTION(
      _fbb,
      RECORDS__);
}

inline const TIM *GetTIM(const void *buf) {
  return ::flatbuffers::GetRoot<TIM>(buf);
}

inline const TIM *GetSizePrefixedTIM(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<TIM>(buf);
}

inline const char *TIMIdentifier() {
  return "$TIM";
}

inline bool TIMBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, TIMIdentifier());
}

inline bool SizePrefixedTIMBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, TIMIdentifier(), true);
}

inline bool VerifyTIMBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TIM>(TIMIdentifier());
}

inline bool VerifySizePrefixedTIMBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TIM>(TIMIdentifier());
}

inline void FinishTIMBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TIM> root) {
  fbb.Finish(root, TIMIdentifier());
}

inline void FinishSizePrefixedTIMBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TIM> root) {
  fbb.FinishSizePrefixed(root, TIMIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
