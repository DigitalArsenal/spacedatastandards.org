// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ATM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Atmospheric Model Message
type ATM struct {
	_tab flatbuffers.Table
}

const ATMIdentifier = "$ATM"

func GetRootAsATM(buf []byte, offset flatbuffers.UOffsetT) *ATM {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ATM{}
	x.Init(buf, n+offset)
	return x
}

func FinishATMBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ATMIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ATMBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ATMIdentifier)
}

func GetSizePrefixedRootAsATM(buf []byte, offset flatbuffers.UOffsetT) *ATM {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ATM{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedATMBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ATMIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedATMBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ATMIdentifier)
}

func (rcv *ATM) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ATM) Table() flatbuffers.Table {
	return rcv._tab
}

/// Canonical model family
func (rcv *ATM) MODEL() AtmosphericModelFamily {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return AtmosphericModelFamily(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Canonical model family
func (rcv *ATM) MutateMODEL(n AtmosphericModelFamily) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

/// Four-digit year identifying the model version (e.g., 1970, 2008, 2020)
func (rcv *ATM) YEAR() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Four-digit year identifying the model version (e.g., 1970, 2008, 2020)
func (rcv *ATM) MutateYEAR(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func ATMStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ATMAddMODEL(builder *flatbuffers.Builder, MODEL AtmosphericModelFamily) {
	builder.PrependInt8Slot(0, int8(MODEL), 0)
}
func ATMAddYEAR(builder *flatbuffers.Builder, YEAR int32) {
	builder.PrependInt32Slot(1, YEAR, 0)
}
func ATMEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
