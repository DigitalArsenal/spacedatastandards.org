// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package PRG

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Program Description Message
type PRG struct {
	_tab flatbuffers.Table
}

func GetRootAsPRG(buf []byte, offset flatbuffers.UOffsetT) *PRG {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PRG{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPRG(buf []byte, offset flatbuffers.UOffsetT) *PRG {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PRG{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PRG) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PRG) Table() flatbuffers.Table {
	return rcv._tab
}

/// The name of the program
func (rcv *PRG) NAME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the program
/// Hierarchical Deterministic (HD) derivation path for the program's key, used in cryptocurrency wallets
func (rcv *PRG) HD_KEY_PATH() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Hierarchical Deterministic (HD) derivation path for the program's key, used in cryptocurrency wallets
/// Vector of standard message types used by the program
func (rcv *PRG) MESSAGE_TYPES(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *PRG) MESSAGE_TYPESLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Vector of standard message types used by the program
/// Vector of users associated with the program, each user can have assigned message types
func (rcv *PRG) USERS(obj *USR, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *PRG) USERSLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Vector of users associated with the program, each user can have assigned message types
func PRGStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func PRGAddNAME(builder *flatbuffers.Builder, NAME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(NAME), 0)
}
func PRGAddHD_KEY_PATH(builder *flatbuffers.Builder, HD_KEY_PATH flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(HD_KEY_PATH), 0)
}
func PRGAddMESSAGE_TYPES(builder *flatbuffers.Builder, MESSAGE_TYPES flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(MESSAGE_TYPES), 0)
}
func PRGStartMESSAGE_TYPESVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PRGAddUSERS(builder *flatbuffers.Builder, USERS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(USERS), 0)
}
func PRGStartUSERSVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PRGEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
