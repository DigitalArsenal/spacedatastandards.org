// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IDM

import "strconv"

type DeviceType int8

const (
	/// Basic or undefined sensor type
	DeviceTypeUNKNOWN                  DeviceType = 0
	/// General optical sensors
	DeviceTypeOPTICAL                  DeviceType = 1
	/// Detects infrared radiation
	DeviceTypeINFRARED_SENSOR          DeviceType = 2
	/// Sensitive to ultraviolet light
	DeviceTypeULTRAVIOLET_SENSOR       DeviceType = 3
	/// For X-ray detection
	DeviceTypeX_RAY_SENSOR             DeviceType = 4
	/// For gamma-ray detection
	DeviceTypeGAMMA_RAY_SENSOR         DeviceType = 5
	/// Basic radar systems
	DeviceTypeRADAR                    DeviceType = 6
	/// Advanced radar with phased array technology
	DeviceTypePHASED_ARRAY_RADAR       DeviceType = 7
	/// For high-resolution imaging
	DeviceTypeSYNTHETIC_APERTURE_RADAR DeviceType = 8
	/// For astronomical observations using bistatic setup
	DeviceTypeBISTATIC_RADIO_TELESCOPE DeviceType = 9
	/// For radio astronomy
	DeviceTypeRADIO_TELESCOPE          DeviceType = 10
	/// For atmospheric studies
	DeviceTypeATMOSPHERIC_SENSOR       DeviceType = 11
	/// For observing space weather phenomena
	DeviceTypeSPACE_WEATHER_SENSOR     DeviceType = 12
	/// General environmental monitoring
	DeviceTypeENVIRONMENTAL_SENSOR     DeviceType = 13
	/// For measuring seismic activities
	DeviceTypeSEISMIC_SENSOR           DeviceType = 14
	/// For gravity measurements
	DeviceTypeGRAVIMETRIC_SENSOR       DeviceType = 15
	/// For magnetic field detection
	DeviceTypeMAGNETIC_SENSOR          DeviceType = 16
	/// For electromagnetic field analysis
	DeviceTypeELECTROMAGNETIC_SENSOR   DeviceType = 17
	/// For temperature and heat detection
	DeviceTypeTHERMAL_SENSOR           DeviceType = 18
	/// For detecting chemicals and substances
	DeviceTypeCHEMICAL_SENSOR          DeviceType = 19
	/// For biological research and detection
	DeviceTypeBIOLOGICAL_SENSOR        DeviceType = 20
	/// For detecting ionizing radiation
	DeviceTypeRADIATION_SENSOR         DeviceType = 21
	/// For detecting subatomic particles
	DeviceTypePARTICLE_DETECTOR        DeviceType = 22
	/// Light Detection and Ranging
	DeviceTypeLIDAR                    DeviceType = 23
	/// Sound Navigation and Ranging
	DeviceTypeSONAR                    DeviceType = 24
	/// General telescopes for astronomical observations
	DeviceTypeTELESCOPE                DeviceType = 25
	/// For spectral analysis
	DeviceTypeSPECTROSCOPIC_SENSOR     DeviceType = 26
	/// For measuring light intensity
	DeviceTypePHOTOMETRIC_SENSOR       DeviceType = 27
	/// For analyzing polarization of light
	DeviceTypePOLARIMETRIC_SENSOR      DeviceType = 28
	/// For detailed imaging using interference
	DeviceTypeINTERFEROMETRIC_SENSOR   DeviceType = 29
	/// Capturing image data at multiple wavelengths
	DeviceTypeMULTISPECTRAL_SENSOR     DeviceType = 30
	/// Advanced imaging across many spectral bands
	DeviceTypeHYPERSPECTRAL_SENSOR     DeviceType = 31
	/// For Global Positioning System reception
	DeviceTypeGPS_RECEIVER             DeviceType = 32
	/// Standard radio communication device
	DeviceTypeRADIO_COMMUNICATIONS     DeviceType = 33
	/// Advanced laser communication system
	DeviceTypeLASER_COMMUNICATIONS     DeviceType = 34
	/// Satellite communication system
	DeviceTypeSATELLITE_COMMUNICATIONS DeviceType = 35
	/// Device for laser-based experiments and measurements
	DeviceTypeLASER_INSTRUMENT         DeviceType = 36
	/// Radio frequency analysis and measurement device
	DeviceTypeRF_ANALYZER              DeviceType = 37
	/// Device for ionospheric research
	DeviceTypeIONOSPHERIC_SENSOR       DeviceType = 38
	/// Device for laser-based imaging
	DeviceTypeLASER_IMAGING            DeviceType = 39
	/// Advanced optical telescope
	DeviceTypeOPTICAL_TELESCOPE        DeviceType = 40
	/// Device for high-resolution optical observations
	DeviceTypeHIGH_RESOLUTION_OPTICAL  DeviceType = 41
	DeviceTypeRADIO                    DeviceType = 42
	/// Microwave communication device
	DeviceTypeMICROWAVE_TRANSMITTER    DeviceType = 43
	/// Device for radio frequency monitoring
	DeviceTypeRF_MONITOR               DeviceType = 44
	/// High-frequency radio communication device
	DeviceTypeHF_RADIO_COMMUNICATIONS  DeviceType = 45
)

var EnumNamesDeviceType = map[DeviceType]string{
	DeviceTypeUNKNOWN:                  "UNKNOWN",
	DeviceTypeOPTICAL:                  "OPTICAL",
	DeviceTypeINFRARED_SENSOR:          "INFRARED_SENSOR",
	DeviceTypeULTRAVIOLET_SENSOR:       "ULTRAVIOLET_SENSOR",
	DeviceTypeX_RAY_SENSOR:             "X_RAY_SENSOR",
	DeviceTypeGAMMA_RAY_SENSOR:         "GAMMA_RAY_SENSOR",
	DeviceTypeRADAR:                    "RADAR",
	DeviceTypePHASED_ARRAY_RADAR:       "PHASED_ARRAY_RADAR",
	DeviceTypeSYNTHETIC_APERTURE_RADAR: "SYNTHETIC_APERTURE_RADAR",
	DeviceTypeBISTATIC_RADIO_TELESCOPE: "BISTATIC_RADIO_TELESCOPE",
	DeviceTypeRADIO_TELESCOPE:          "RADIO_TELESCOPE",
	DeviceTypeATMOSPHERIC_SENSOR:       "ATMOSPHERIC_SENSOR",
	DeviceTypeSPACE_WEATHER_SENSOR:     "SPACE_WEATHER_SENSOR",
	DeviceTypeENVIRONMENTAL_SENSOR:     "ENVIRONMENTAL_SENSOR",
	DeviceTypeSEISMIC_SENSOR:           "SEISMIC_SENSOR",
	DeviceTypeGRAVIMETRIC_SENSOR:       "GRAVIMETRIC_SENSOR",
	DeviceTypeMAGNETIC_SENSOR:          "MAGNETIC_SENSOR",
	DeviceTypeELECTROMAGNETIC_SENSOR:   "ELECTROMAGNETIC_SENSOR",
	DeviceTypeTHERMAL_SENSOR:           "THERMAL_SENSOR",
	DeviceTypeCHEMICAL_SENSOR:          "CHEMICAL_SENSOR",
	DeviceTypeBIOLOGICAL_SENSOR:        "BIOLOGICAL_SENSOR",
	DeviceTypeRADIATION_SENSOR:         "RADIATION_SENSOR",
	DeviceTypePARTICLE_DETECTOR:        "PARTICLE_DETECTOR",
	DeviceTypeLIDAR:                    "LIDAR",
	DeviceTypeSONAR:                    "SONAR",
	DeviceTypeTELESCOPE:                "TELESCOPE",
	DeviceTypeSPECTROSCOPIC_SENSOR:     "SPECTROSCOPIC_SENSOR",
	DeviceTypePHOTOMETRIC_SENSOR:       "PHOTOMETRIC_SENSOR",
	DeviceTypePOLARIMETRIC_SENSOR:      "POLARIMETRIC_SENSOR",
	DeviceTypeINTERFEROMETRIC_SENSOR:   "INTERFEROMETRIC_SENSOR",
	DeviceTypeMULTISPECTRAL_SENSOR:     "MULTISPECTRAL_SENSOR",
	DeviceTypeHYPERSPECTRAL_SENSOR:     "HYPERSPECTRAL_SENSOR",
	DeviceTypeGPS_RECEIVER:             "GPS_RECEIVER",
	DeviceTypeRADIO_COMMUNICATIONS:     "RADIO_COMMUNICATIONS",
	DeviceTypeLASER_COMMUNICATIONS:     "LASER_COMMUNICATIONS",
	DeviceTypeSATELLITE_COMMUNICATIONS: "SATELLITE_COMMUNICATIONS",
	DeviceTypeLASER_INSTRUMENT:         "LASER_INSTRUMENT",
	DeviceTypeRF_ANALYZER:              "RF_ANALYZER",
	DeviceTypeIONOSPHERIC_SENSOR:       "IONOSPHERIC_SENSOR",
	DeviceTypeLASER_IMAGING:            "LASER_IMAGING",
	DeviceTypeOPTICAL_TELESCOPE:        "OPTICAL_TELESCOPE",
	DeviceTypeHIGH_RESOLUTION_OPTICAL:  "HIGH_RESOLUTION_OPTICAL",
	DeviceTypeRADIO:                    "RADIO",
	DeviceTypeMICROWAVE_TRANSMITTER:    "MICROWAVE_TRANSMITTER",
	DeviceTypeRF_MONITOR:               "RF_MONITOR",
	DeviceTypeHF_RADIO_COMMUNICATIONS:  "HF_RADIO_COMMUNICATIONS",
}

var EnumValuesDeviceType = map[string]DeviceType{
	"UNKNOWN":                  DeviceTypeUNKNOWN,
	"OPTICAL":                  DeviceTypeOPTICAL,
	"INFRARED_SENSOR":          DeviceTypeINFRARED_SENSOR,
	"ULTRAVIOLET_SENSOR":       DeviceTypeULTRAVIOLET_SENSOR,
	"X_RAY_SENSOR":             DeviceTypeX_RAY_SENSOR,
	"GAMMA_RAY_SENSOR":         DeviceTypeGAMMA_RAY_SENSOR,
	"RADAR":                    DeviceTypeRADAR,
	"PHASED_ARRAY_RADAR":       DeviceTypePHASED_ARRAY_RADAR,
	"SYNTHETIC_APERTURE_RADAR": DeviceTypeSYNTHETIC_APERTURE_RADAR,
	"BISTATIC_RADIO_TELESCOPE": DeviceTypeBISTATIC_RADIO_TELESCOPE,
	"RADIO_TELESCOPE":          DeviceTypeRADIO_TELESCOPE,
	"ATMOSPHERIC_SENSOR":       DeviceTypeATMOSPHERIC_SENSOR,
	"SPACE_WEATHER_SENSOR":     DeviceTypeSPACE_WEATHER_SENSOR,
	"ENVIRONMENTAL_SENSOR":     DeviceTypeENVIRONMENTAL_SENSOR,
	"SEISMIC_SENSOR":           DeviceTypeSEISMIC_SENSOR,
	"GRAVIMETRIC_SENSOR":       DeviceTypeGRAVIMETRIC_SENSOR,
	"MAGNETIC_SENSOR":          DeviceTypeMAGNETIC_SENSOR,
	"ELECTROMAGNETIC_SENSOR":   DeviceTypeELECTROMAGNETIC_SENSOR,
	"THERMAL_SENSOR":           DeviceTypeTHERMAL_SENSOR,
	"CHEMICAL_SENSOR":          DeviceTypeCHEMICAL_SENSOR,
	"BIOLOGICAL_SENSOR":        DeviceTypeBIOLOGICAL_SENSOR,
	"RADIATION_SENSOR":         DeviceTypeRADIATION_SENSOR,
	"PARTICLE_DETECTOR":        DeviceTypePARTICLE_DETECTOR,
	"LIDAR":                    DeviceTypeLIDAR,
	"SONAR":                    DeviceTypeSONAR,
	"TELESCOPE":                DeviceTypeTELESCOPE,
	"SPECTROSCOPIC_SENSOR":     DeviceTypeSPECTROSCOPIC_SENSOR,
	"PHOTOMETRIC_SENSOR":       DeviceTypePHOTOMETRIC_SENSOR,
	"POLARIMETRIC_SENSOR":      DeviceTypePOLARIMETRIC_SENSOR,
	"INTERFEROMETRIC_SENSOR":   DeviceTypeINTERFEROMETRIC_SENSOR,
	"MULTISPECTRAL_SENSOR":     DeviceTypeMULTISPECTRAL_SENSOR,
	"HYPERSPECTRAL_SENSOR":     DeviceTypeHYPERSPECTRAL_SENSOR,
	"GPS_RECEIVER":             DeviceTypeGPS_RECEIVER,
	"RADIO_COMMUNICATIONS":     DeviceTypeRADIO_COMMUNICATIONS,
	"LASER_COMMUNICATIONS":     DeviceTypeLASER_COMMUNICATIONS,
	"SATELLITE_COMMUNICATIONS": DeviceTypeSATELLITE_COMMUNICATIONS,
	"LASER_INSTRUMENT":         DeviceTypeLASER_INSTRUMENT,
	"RF_ANALYZER":              DeviceTypeRF_ANALYZER,
	"IONOSPHERIC_SENSOR":       DeviceTypeIONOSPHERIC_SENSOR,
	"LASER_IMAGING":            DeviceTypeLASER_IMAGING,
	"OPTICAL_TELESCOPE":        DeviceTypeOPTICAL_TELESCOPE,
	"HIGH_RESOLUTION_OPTICAL":  DeviceTypeHIGH_RESOLUTION_OPTICAL,
	"RADIO":                    DeviceTypeRADIO,
	"MICROWAVE_TRANSMITTER":    DeviceTypeMICROWAVE_TRANSMITTER,
	"RF_MONITOR":               DeviceTypeRF_MONITOR,
	"HF_RADIO_COMMUNICATIONS":  DeviceTypeHF_RADIO_COMMUNICATIONS,
}

func (v DeviceType) String() string {
	if s, ok := EnumNamesDeviceType[v]; ok {
		return s
	}
	return "DeviceType(" + strconv.FormatInt(int64(v), 10) + ")"
}
