// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SPW

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Space Weather Data Record
type SPW struct {
	_tab flatbuffers.Table
}

const SPWIdentifier = "$SPW"

func GetRootAsSPW(buf []byte, offset flatbuffers.UOffsetT) *SPW {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SPW{}
	x.Init(buf, n+offset)
	return x
}

func FinishSPWBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SPWIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SPWBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SPWIdentifier)
}

func GetSizePrefixedRootAsSPW(buf []byte, offset flatbuffers.UOffsetT) *SPW {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SPW{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSPWBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SPWIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSPWBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SPWIdentifier)
}

func (rcv *SPW) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SPW) Table() flatbuffers.Table {
	return rcv._tab
}

/// Date in ISO 8601 format
func (rcv *SPW) DATE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date in ISO 8601 format
/// Bartels Solar Rotation Number
func (rcv *SPW) BSRN() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Bartels Solar Rotation Number
func (rcv *SPW) MutateBSRN(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// Day within Bartels cycle (1-27)
func (rcv *SPW) ND() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Day within Bartels cycle (1-27)
func (rcv *SPW) MutateND(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// Planetary 3-hour Range Index (Kp) for 0000-0300 UT, multiplied by 10
func (rcv *SPW) KP1() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Planetary 3-hour Range Index (Kp) for 0000-0300 UT, multiplied by 10
func (rcv *SPW) MutateKP1(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Planetary 3-hour Range Index (Kp) for 0300-0600 UT, multiplied by 10
func (rcv *SPW) KP2() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Planetary 3-hour Range Index (Kp) for 0300-0600 UT, multiplied by 10
func (rcv *SPW) MutateKP2(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// Planetary 3-hour Range Index (Kp) for 0600-0900 UT, multiplied by 10
func (rcv *SPW) KP3() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Planetary 3-hour Range Index (Kp) for 0600-0900 UT, multiplied by 10
func (rcv *SPW) MutateKP3(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

/// Planetary 3-hour Range Index (Kp) for 0900-1200 UT, multiplied by 10
func (rcv *SPW) KP4() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Planetary 3-hour Range Index (Kp) for 0900-1200 UT, multiplied by 10
func (rcv *SPW) MutateKP4(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// Planetary 3-hour Range Index (Kp) for 1200-1500 UT, multiplied by 10
func (rcv *SPW) KP5() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Planetary 3-hour Range Index (Kp) for 1200-1500 UT, multiplied by 10
func (rcv *SPW) MutateKP5(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// Planetary 3-hour Range Index (Kp) for 1500-1800 UT, multiplied by 10
func (rcv *SPW) KP6() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Planetary 3-hour Range Index (Kp) for 1500-1800 UT, multiplied by 10
func (rcv *SPW) MutateKP6(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

/// Planetary 3-hour Range Index (Kp) for 1800-2100 UT, multiplied by 10
func (rcv *SPW) KP7() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Planetary 3-hour Range Index (Kp) for 1800-2100 UT, multiplied by 10
func (rcv *SPW) MutateKP7(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

/// Planetary 3-hour Range Index (Kp) for 2100-0000 UT, multiplied by 10
func (rcv *SPW) KP8() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Planetary 3-hour Range Index (Kp) for 2100-0000 UT, multiplied by 10
func (rcv *SPW) MutateKP8(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

/// Sum of the 8 Kp indices for the day
func (rcv *SPW) KP_SUM() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Sum of the 8 Kp indices for the day
func (rcv *SPW) MutateKP_SUM(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

/// Planetary Equivalent Amplitude (Ap) for 0000-0300 UT
func (rcv *SPW) AP1() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Planetary Equivalent Amplitude (Ap) for 0000-0300 UT
func (rcv *SPW) MutateAP1(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// Planetary Equivalent Amplitude (Ap) for 0300-0600 UT
func (rcv *SPW) AP2() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Planetary Equivalent Amplitude (Ap) for 0300-0600 UT
func (rcv *SPW) MutateAP2(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

/// Planetary Equivalent Amplitude (Ap) for 0600-0900 UT
func (rcv *SPW) AP3() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Planetary Equivalent Amplitude (Ap) for 0600-0900 UT
func (rcv *SPW) MutateAP3(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// Planetary Equivalent Amplitude (Ap) for 0900-1200 UT
func (rcv *SPW) AP4() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Planetary Equivalent Amplitude (Ap) for 0900-1200 UT
func (rcv *SPW) MutateAP4(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// Planetary Equivalent Amplitude (Ap) for 1200-1500 UT
func (rcv *SPW) AP5() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Planetary Equivalent Amplitude (Ap) for 1200-1500 UT
func (rcv *SPW) MutateAP5(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

/// Planetary Equivalent Amplitude (Ap) for 1500-1800 UT
func (rcv *SPW) AP6() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Planetary Equivalent Amplitude (Ap) for 1500-1800 UT
func (rcv *SPW) MutateAP6(n int32) bool {
	return rcv._tab.MutateInt32Slot(38, n)
}

/// Planetary Equivalent Amplitude (Ap) for 1800-2100 UT
func (rcv *SPW) AP7() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Planetary Equivalent Amplitude (Ap) for 1800-2100 UT
func (rcv *SPW) MutateAP7(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

/// Planetary Equivalent Amplitude (Ap) for 2100-0000 UT
func (rcv *SPW) AP8() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Planetary Equivalent Amplitude (Ap) for 2100-0000 UT
func (rcv *SPW) MutateAP8(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

/// Arithmetic average of the 8 Ap indices for the day
func (rcv *SPW) AP_AVG() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Arithmetic average of the 8 Ap indices for the day
func (rcv *SPW) MutateAP_AVG(n int32) bool {
	return rcv._tab.MutateInt32Slot(44, n)
}

/// Planetary Daily Character Figure (0.0 to 2.5)
func (rcv *SPW) CP() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Planetary Daily Character Figure (0.0 to 2.5)
func (rcv *SPW) MutateCP(n float32) bool {
	return rcv._tab.MutateFloat32Slot(46, n)
}

/// C9 index (0-9)
func (rcv *SPW) C9() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// C9 index (0-9)
func (rcv *SPW) MutateC9(n int32) bool {
	return rcv._tab.MutateInt32Slot(48, n)
}

/// International Sunspot Number
func (rcv *SPW) ISN() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// International Sunspot Number
func (rcv *SPW) MutateISN(n int32) bool {
	return rcv._tab.MutateInt32Slot(50, n)
}

/// Observed 10.7cm Solar Radio Flux
func (rcv *SPW) F107_OBS() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Observed 10.7cm Solar Radio Flux
func (rcv *SPW) MutateF107_OBS(n float32) bool {
	return rcv._tab.MutateFloat32Slot(52, n)
}

/// Adjusted 10.7cm Solar Radio Flux (to 1 AU)
func (rcv *SPW) F107_ADJ() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Adjusted 10.7cm Solar Radio Flux (to 1 AU)
func (rcv *SPW) MutateF107_ADJ(n float32) bool {
	return rcv._tab.MutateFloat32Slot(54, n)
}

/// F10.7 Data Type
func (rcv *SPW) F107_DATA_TYPE() F107DataType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return F107DataType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// F10.7 Data Type
func (rcv *SPW) MutateF107_DATA_TYPE(n F107DataType) bool {
	return rcv._tab.MutateInt8Slot(56, int8(n))
}

/// 81-day centered average of observed F10.7
func (rcv *SPW) F107_OBS_CENTER81() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 81-day centered average of observed F10.7
func (rcv *SPW) MutateF107_OBS_CENTER81(n float32) bool {
	return rcv._tab.MutateFloat32Slot(58, n)
}

/// 81-day trailing average of observed F10.7
func (rcv *SPW) F107_OBS_LAST81() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 81-day trailing average of observed F10.7
func (rcv *SPW) MutateF107_OBS_LAST81(n float32) bool {
	return rcv._tab.MutateFloat32Slot(60, n)
}

/// 81-day centered average of adjusted F10.7
func (rcv *SPW) F107_ADJ_CENTER81() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 81-day centered average of adjusted F10.7
func (rcv *SPW) MutateF107_ADJ_CENTER81(n float32) bool {
	return rcv._tab.MutateFloat32Slot(62, n)
}

/// 81-day trailing average of adjusted F10.7
func (rcv *SPW) F107_ADJ_LAST81() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 81-day trailing average of adjusted F10.7
func (rcv *SPW) MutateF107_ADJ_LAST81(n float32) bool {
	return rcv._tab.MutateFloat32Slot(64, n)
}

func SPWStart(builder *flatbuffers.Builder) {
	builder.StartObject(31)
}
func SPWAddDATE(builder *flatbuffers.Builder, DATE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(DATE), 0)
}
func SPWAddBSRN(builder *flatbuffers.Builder, BSRN int32) {
	builder.PrependInt32Slot(1, BSRN, 0)
}
func SPWAddND(builder *flatbuffers.Builder, ND int32) {
	builder.PrependInt32Slot(2, ND, 0)
}
func SPWAddKP1(builder *flatbuffers.Builder, KP1 int32) {
	builder.PrependInt32Slot(3, KP1, 0)
}
func SPWAddKP2(builder *flatbuffers.Builder, KP2 int32) {
	builder.PrependInt32Slot(4, KP2, 0)
}
func SPWAddKP3(builder *flatbuffers.Builder, KP3 int32) {
	builder.PrependInt32Slot(5, KP3, 0)
}
func SPWAddKP4(builder *flatbuffers.Builder, KP4 int32) {
	builder.PrependInt32Slot(6, KP4, 0)
}
func SPWAddKP5(builder *flatbuffers.Builder, KP5 int32) {
	builder.PrependInt32Slot(7, KP5, 0)
}
func SPWAddKP6(builder *flatbuffers.Builder, KP6 int32) {
	builder.PrependInt32Slot(8, KP6, 0)
}
func SPWAddKP7(builder *flatbuffers.Builder, KP7 int32) {
	builder.PrependInt32Slot(9, KP7, 0)
}
func SPWAddKP8(builder *flatbuffers.Builder, KP8 int32) {
	builder.PrependInt32Slot(10, KP8, 0)
}
func SPWAddKP_SUM(builder *flatbuffers.Builder, KP_SUM int32) {
	builder.PrependInt32Slot(11, KP_SUM, 0)
}
func SPWAddAP1(builder *flatbuffers.Builder, AP1 int32) {
	builder.PrependInt32Slot(12, AP1, 0)
}
func SPWAddAP2(builder *flatbuffers.Builder, AP2 int32) {
	builder.PrependInt32Slot(13, AP2, 0)
}
func SPWAddAP3(builder *flatbuffers.Builder, AP3 int32) {
	builder.PrependInt32Slot(14, AP3, 0)
}
func SPWAddAP4(builder *flatbuffers.Builder, AP4 int32) {
	builder.PrependInt32Slot(15, AP4, 0)
}
func SPWAddAP5(builder *flatbuffers.Builder, AP5 int32) {
	builder.PrependInt32Slot(16, AP5, 0)
}
func SPWAddAP6(builder *flatbuffers.Builder, AP6 int32) {
	builder.PrependInt32Slot(17, AP6, 0)
}
func SPWAddAP7(builder *flatbuffers.Builder, AP7 int32) {
	builder.PrependInt32Slot(18, AP7, 0)
}
func SPWAddAP8(builder *flatbuffers.Builder, AP8 int32) {
	builder.PrependInt32Slot(19, AP8, 0)
}
func SPWAddAP_AVG(builder *flatbuffers.Builder, AP_AVG int32) {
	builder.PrependInt32Slot(20, AP_AVG, 0)
}
func SPWAddCP(builder *flatbuffers.Builder, CP float32) {
	builder.PrependFloat32Slot(21, CP, 0.0)
}
func SPWAddC9(builder *flatbuffers.Builder, C9 int32) {
	builder.PrependInt32Slot(22, C9, 0)
}
func SPWAddISN(builder *flatbuffers.Builder, ISN int32) {
	builder.PrependInt32Slot(23, ISN, 0)
}
func SPWAddF107_OBS(builder *flatbuffers.Builder, F107_OBS float32) {
	builder.PrependFloat32Slot(24, F107_OBS, 0.0)
}
func SPWAddF107_ADJ(builder *flatbuffers.Builder, F107_ADJ float32) {
	builder.PrependFloat32Slot(25, F107_ADJ, 0.0)
}
func SPWAddF107_DATA_TYPE(builder *flatbuffers.Builder, F107_DATA_TYPE F107DataType) {
	builder.PrependInt8Slot(26, int8(F107_DATA_TYPE), 0)
}
func SPWAddF107_OBS_CENTER81(builder *flatbuffers.Builder, F107_OBS_CENTER81 float32) {
	builder.PrependFloat32Slot(27, F107_OBS_CENTER81, 0.0)
}
func SPWAddF107_OBS_LAST81(builder *flatbuffers.Builder, F107_OBS_LAST81 float32) {
	builder.PrependFloat32Slot(28, F107_OBS_LAST81, 0.0)
}
func SPWAddF107_ADJ_CENTER81(builder *flatbuffers.Builder, F107_ADJ_CENTER81 float32) {
	builder.PrependFloat32Slot(29, F107_ADJ_CENTER81, 0.0)
}
func SPWAddF107_ADJ_LAST81(builder *flatbuffers.Builder, F107_ADJ_LAST81 float32) {
	builder.PrependFloat32Slot(30, F107_ADJ_LAST81, 0.0)
}
func SPWEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
