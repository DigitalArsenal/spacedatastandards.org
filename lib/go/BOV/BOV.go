// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package BOV

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Burn Out Vector Message
type BOV struct {
	_tab flatbuffers.Table
}

func GetRootAsBOV(buf []byte, offset flatbuffers.UOffsetT) *BOV {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BOV{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBOV(buf []byte, offset flatbuffers.UOffsetT) *BOV {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BOV{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BOV) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BOV) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BOV) E_COORDINATE() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BOV) MutateE_COORDINATE(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

func (rcv *BOV) F_COORDINATE() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BOV) MutateF_COORDINATE(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *BOV) G_COORDINATE() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BOV) MutateG_COORDINATE(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *BOV) E_DOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BOV) MutateE_DOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *BOV) F_DOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BOV) MutateF_DOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func (rcv *BOV) G_DOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BOV) MutateG_DOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

func (rcv *BOV) EPOCH_TIME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BOV) TIME_FROM_LAUNCH() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BOV) MutateTIME_FROM_LAUNCH(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

func BOVStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func BOVAddE_COORDINATE(builder *flatbuffers.Builder, E_COORDINATE float64) {
	builder.PrependFloat64Slot(0, E_COORDINATE, 0.0)
}
func BOVAddF_COORDINATE(builder *flatbuffers.Builder, F_COORDINATE float64) {
	builder.PrependFloat64Slot(1, F_COORDINATE, 0.0)
}
func BOVAddG_COORDINATE(builder *flatbuffers.Builder, G_COORDINATE float64) {
	builder.PrependFloat64Slot(2, G_COORDINATE, 0.0)
}
func BOVAddE_DOT(builder *flatbuffers.Builder, E_DOT float64) {
	builder.PrependFloat64Slot(3, E_DOT, 0.0)
}
func BOVAddF_DOT(builder *flatbuffers.Builder, F_DOT float64) {
	builder.PrependFloat64Slot(4, F_DOT, 0.0)
}
func BOVAddG_DOT(builder *flatbuffers.Builder, G_DOT float64) {
	builder.PrependFloat64Slot(5, G_DOT, 0.0)
}
func BOVAddEPOCH_TIME(builder *flatbuffers.Builder, EPOCH_TIME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(EPOCH_TIME), 0)
}
func BOVAddTIME_FROM_LAUNCH(builder *flatbuffers.Builder, TIME_FROM_LAUNCH float64) {
	builder.PrependFloat64Slot(7, TIME_FROM_LAUNCH, 0.0)
}
func BOVEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
