// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OSM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Observation Stability Message
type OSM struct {
	_tab flatbuffers.Table
}

func GetRootAsOSM(buf []byte, offset flatbuffers.UOffsetT) *OSM {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OSM{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsOSM(buf []byte, offset flatbuffers.UOffsetT) *OSM {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OSM{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *OSM) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OSM) Table() flatbuffers.Table {
	return rcv._tab
}

/// Indicates whether the observation is stable or not
func (rcv *OSM) IS_STABLE() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indicates whether the observation is stable or not
func (rcv *OSM) MutateIS_STABLE(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// The number of observations
func (rcv *OSM) NUM_OBS() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of observations
func (rcv *OSM) MutateNUM_OBS(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// Unique identifier for the object being observed
func (rcv *OSM) OBJECT_ID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier for the object being observed
/// Identifier of the sensor
func (rcv *OSM) ID_SENSOR() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the sensor
/// Timestamp of data creation
func (rcv *OSM) PASS_START() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Timestamp of data creation
/// Duration of the observation pass in seconds
func (rcv *OSM) PASS_DURATION() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Duration of the observation pass in seconds
func (rcv *OSM) MutatePASS_DURATION(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func OSMStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func OSMAddIS_STABLE(builder *flatbuffers.Builder, IS_STABLE bool) {
	builder.PrependBoolSlot(0, IS_STABLE, false)
}
func OSMAddNUM_OBS(builder *flatbuffers.Builder, NUM_OBS int32) {
	builder.PrependInt32Slot(1, NUM_OBS, 0)
}
func OSMAddOBJECT_ID(builder *flatbuffers.Builder, OBJECT_ID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(OBJECT_ID), 0)
}
func OSMAddID_SENSOR(builder *flatbuffers.Builder, ID_SENSOR flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(ID_SENSOR), 0)
}
func OSMAddPASS_START(builder *flatbuffers.Builder, PASS_START flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(PASS_START), 0)
}
func OSMAddPASS_DURATION(builder *flatbuffers.Builder, PASS_DURATION int32) {
	builder.PrependInt32Slot(5, PASS_DURATION, 0)
}
func OSMEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
