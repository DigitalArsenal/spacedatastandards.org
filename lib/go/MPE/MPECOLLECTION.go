// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MPE

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Collection of MPE Records
type MPECOLLECTION struct {
	_tab flatbuffers.Table
}

func GetRootAsMPECOLLECTION(buf []byte, offset flatbuffers.UOffsetT) *MPECOLLECTION {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MPECOLLECTION{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMPECOLLECTION(buf []byte, offset flatbuffers.UOffsetT) *MPECOLLECTION {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MPECOLLECTION{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MPECOLLECTION) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MPECOLLECTION) Table() flatbuffers.Table {
	return rcv._tab
}

/// Default value = U
func (rcv *MPECOLLECTION) CLASSIFICATION_TYPE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Default value = U
/// Name of the reference frame (TEME, EME2000, etc.)
func (rcv *MPECOLLECTION) REF_FRAME() referenceFrame {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return referenceFrame(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 9
}

/// Name of the reference frame (TEME, EME2000, etc.)
func (rcv *MPECOLLECTION) MutateREF_FRAME(n referenceFrame) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

/// Epoch of the Reference Frame. (UNIX TimeStamp)
func (rcv *MPECOLLECTION) REF_FRAME_EPOCH() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Epoch of the Reference Frame. (UNIX TimeStamp)
func (rcv *MPECOLLECTION) MutateREF_FRAME_EPOCH(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// Time system used for the orbit state and covariance matrix. (UTC)
func (rcv *MPECOLLECTION) TIME_SYSTEM() timeSystem {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return timeSystem(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 11
}

/// Time system used for the orbit state and covariance matrix. (UTC)
func (rcv *MPECOLLECTION) MutateTIME_SYSTEM(n timeSystem) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

/// Description of the Mean Element Theory. (SGP4,DSST,USM)
func (rcv *MPECOLLECTION) MEAN_ELEMENT_THEORY() meanElementTheory {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return meanElementTheory(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Description of the Mean Element Theory. (SGP4,DSST,USM)
func (rcv *MPECOLLECTION) MutateMEAN_ELEMENT_THEORY(n meanElementTheory) bool {
	return rcv._tab.MutateInt8Slot(12, int8(n))
}

/// Array of MPE records
func (rcv *MPECOLLECTION) RECORDS(obj *MPE, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MPECOLLECTION) RECORDSLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of MPE records
func MPECOLLECTIONStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func MPECOLLECTIONAddCLASSIFICATION_TYPE(builder *flatbuffers.Builder, CLASSIFICATION_TYPE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(CLASSIFICATION_TYPE), 0)
}
func MPECOLLECTIONAddREF_FRAME(builder *flatbuffers.Builder, REF_FRAME referenceFrame) {
	builder.PrependInt8Slot(1, int8(REF_FRAME), 9)
}
func MPECOLLECTIONAddREF_FRAME_EPOCH(builder *flatbuffers.Builder, REF_FRAME_EPOCH float64) {
	builder.PrependFloat64Slot(2, REF_FRAME_EPOCH, 0.0)
}
func MPECOLLECTIONAddTIME_SYSTEM(builder *flatbuffers.Builder, TIME_SYSTEM timeSystem) {
	builder.PrependInt8Slot(3, int8(TIME_SYSTEM), 11)
}
func MPECOLLECTIONAddMEAN_ELEMENT_THEORY(builder *flatbuffers.Builder, MEAN_ELEMENT_THEORY meanElementTheory) {
	builder.PrependInt8Slot(4, int8(MEAN_ELEMENT_THEORY), 0)
}
func MPECOLLECTIONAddRECORDS(builder *flatbuffers.Builder, RECORDS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(RECORDS), 0)
}
func MPECOLLECTIONStartRECORDSVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MPECOLLECTIONEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
