// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OEM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SpacecraftFrameWrapper struct {
	_tab flatbuffers.Table
}

func GetRootAsSpacecraftFrameWrapper(buf []byte, offset flatbuffers.UOffsetT) *SpacecraftFrameWrapper {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SpacecraftFrameWrapper{}
	x.Init(buf, n+offset)
	return x
}

func FinishSpacecraftFrameWrapperBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSpacecraftFrameWrapper(buf []byte, offset flatbuffers.UOffsetT) *SpacecraftFrameWrapper {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SpacecraftFrameWrapper{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSpacecraftFrameWrapperBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SpacecraftFrameWrapper) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SpacecraftFrameWrapper) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SpacecraftFrameWrapper) Frame() SpacecraftFrame {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return SpacecraftFrame(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SpacecraftFrameWrapper) MutateFrame(n SpacecraftFrame) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func SpacecraftFrameWrapperStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func SpacecraftFrameWrapperAddFrame(builder *flatbuffers.Builder, frame SpacecraftFrame) {
	builder.PrependInt8Slot(0, int8(frame), 0)
}
func SpacecraftFrameWrapperEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
