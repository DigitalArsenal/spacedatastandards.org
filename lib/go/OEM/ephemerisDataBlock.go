// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ephemerisDataBlock

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// OEM Ephemeris Data Block
type ephemerisDataBlock struct {
	_tab flatbuffers.Table
}

func GetRootAsephemerisDataBlock(buf []byte, offset flatbuffers.UOffsetT) *ephemerisDataBlock {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ephemerisDataBlock{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsephemerisDataBlock(buf []byte, offset flatbuffers.UOffsetT) *ephemerisDataBlock {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ephemerisDataBlock{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ephemerisDataBlock) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ephemerisDataBlock) Table() flatbuffers.Table {
	return rcv._tab
}

/// Plain-Text Comment
func (rcv *ephemerisDataBlock) COMMENT() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Plain-Text Comment
/// Satellite Name(s)
func (rcv *ephemerisDataBlock) OBJECT_NAME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Satellite Name(s)
/// International Designator (YYYY-NNNAAA)
func (rcv *ephemerisDataBlock) OBJECT_ID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// International Designator (YYYY-NNNAAA)
/// Origin of reference frame (EARTH, MARS, MOON, etc.)
func (rcv *ephemerisDataBlock) CENTER_NAME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Origin of reference frame (EARTH, MARS, MOON, etc.)
/// Name of the reference frame (TEME, EME2000, etc.)
func (rcv *ephemerisDataBlock) REF_FRAME() referenceFrame {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return referenceFrame(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Name of the reference frame (TEME, EME2000, etc.)
func (rcv *ephemerisDataBlock) MutateREF_FRAME(n referenceFrame) bool {
	return rcv._tab.MutateInt8Slot(12, int8(n))
}

/// Epoch of reference frame, if not intrinsic to the definition of the reference frame
func (rcv *ephemerisDataBlock) REF_FRAME_EPOCH() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Epoch of reference frame, if not intrinsic to the definition of the reference frame
/// Time system used for the orbit state and covariance matrix. (UTC)
func (rcv *ephemerisDataBlock) TIME_SYSTEM() timeSystem {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return timeSystem(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Time system used for the orbit state and covariance matrix. (UTC)
func (rcv *ephemerisDataBlock) MutateTIME_SYSTEM(n timeSystem) bool {
	return rcv._tab.MutateInt8Slot(16, int8(n))
}

/// Start of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)
func (rcv *ephemerisDataBlock) START_TIME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Start of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)
/// Optional start USEABLE time span covered by ephemeris data (ISO 8601)
func (rcv *ephemerisDataBlock) USEABLE_START_TIME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional start USEABLE time span covered by ephemeris data (ISO 8601)
/// Optional end of USEABLE time span covered by ephemeris data (ISO 8601)
func (rcv *ephemerisDataBlock) USEABLE_STOP_TIME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional end of USEABLE time span covered by ephemeris data (ISO 8601)
/// End of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)
func (rcv *ephemerisDataBlock) STOP_TIME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// End of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)
/// Recommended interpolation method for ephemeris data (Hermite, Linear, Lagrange, etc.)
func (rcv *ephemerisDataBlock) INTERPOLATION() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Recommended interpolation method for ephemeris data (Hermite, Linear, Lagrange, etc.)
/// Recommended interpolation degree for ephemeris data
func (rcv *ephemerisDataBlock) INTERPOLATION_DEGREE() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Recommended interpolation degree for ephemeris data
func (rcv *ephemerisDataBlock) MutateINTERPOLATION_DEGREE(n uint32) bool {
	return rcv._tab.MutateUint32Slot(28, n)
}

/// Array of ephemeris data lines
func (rcv *ephemerisDataBlock) EPHEMERIS_DATA_LINES(obj *ephemerisDataLine, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ephemerisDataBlock) EPHEMERIS_DATA_LINESLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of ephemeris data lines
/// Array of covariance matrix lines
func (rcv *ephemerisDataBlock) COVARIANCE_MATRIX_LINES(obj *covarianceMatrixLine, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ephemerisDataBlock) COVARIANCE_MATRIX_LINESLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of covariance matrix lines
func ephemerisDataBlockStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func ephemerisDataBlockAddCOMMENT(builder *flatbuffers.Builder, COMMENT flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(COMMENT), 0)
}
func ephemerisDataBlockAddOBJECT_NAME(builder *flatbuffers.Builder, OBJECT_NAME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(OBJECT_NAME), 0)
}
func ephemerisDataBlockAddOBJECT_ID(builder *flatbuffers.Builder, OBJECT_ID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(OBJECT_ID), 0)
}
func ephemerisDataBlockAddCENTER_NAME(builder *flatbuffers.Builder, CENTER_NAME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(CENTER_NAME), 0)
}
func ephemerisDataBlockAddREF_FRAME(builder *flatbuffers.Builder, REF_FRAME referenceFrame) {
	builder.PrependInt8Slot(4, int8(REF_FRAME), 0)
}
func ephemerisDataBlockAddREF_FRAME_EPOCH(builder *flatbuffers.Builder, REF_FRAME_EPOCH flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(REF_FRAME_EPOCH), 0)
}
func ephemerisDataBlockAddTIME_SYSTEM(builder *flatbuffers.Builder, TIME_SYSTEM timeSystem) {
	builder.PrependInt8Slot(6, int8(TIME_SYSTEM), 0)
}
func ephemerisDataBlockAddSTART_TIME(builder *flatbuffers.Builder, START_TIME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(START_TIME), 0)
}
func ephemerisDataBlockAddUSEABLE_START_TIME(builder *flatbuffers.Builder, USEABLE_START_TIME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(USEABLE_START_TIME), 0)
}
func ephemerisDataBlockAddUSEABLE_STOP_TIME(builder *flatbuffers.Builder, USEABLE_STOP_TIME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(USEABLE_STOP_TIME), 0)
}
func ephemerisDataBlockAddSTOP_TIME(builder *flatbuffers.Builder, STOP_TIME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(STOP_TIME), 0)
}
func ephemerisDataBlockAddINTERPOLATION(builder *flatbuffers.Builder, INTERPOLATION flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(INTERPOLATION), 0)
}
func ephemerisDataBlockAddINTERPOLATION_DEGREE(builder *flatbuffers.Builder, INTERPOLATION_DEGREE uint32) {
	builder.PrependUint32Slot(12, INTERPOLATION_DEGREE, 0)
}
func ephemerisDataBlockAddEPHEMERIS_DATA_LINES(builder *flatbuffers.Builder, EPHEMERIS_DATA_LINES flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(EPHEMERIS_DATA_LINES), 0)
}
func ephemerisDataBlockStartEPHEMERIS_DATA_LINESVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ephemerisDataBlockAddCOVARIANCE_MATRIX_LINES(builder *flatbuffers.Builder, COVARIANCE_MATRIX_LINES flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(COVARIANCE_MATRIX_LINES), 0)
}
func ephemerisDataBlockStartCOVARIANCE_MATRIX_LINESVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ephemerisDataBlockEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
