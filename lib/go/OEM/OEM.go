// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OEM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Orbit Ephemeris Message
type OEM struct {
	_tab flatbuffers.Table
}

const OEMIdentifier = "$OEM"

func GetRootAsOEM(buf []byte, offset flatbuffers.UOffsetT) *OEM {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OEM{}
	x.Init(buf, n+offset)
	return x
}

func FinishOEMBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OEMIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func OEMBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, OEMIdentifier)
}

func GetSizePrefixedRootAsOEM(buf []byte, offset flatbuffers.UOffsetT) *OEM {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OEM{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOEMBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OEMIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedOEMBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, OEMIdentifier)
}

func (rcv *OEM) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OEM) Table() flatbuffers.Table {
	return rcv._tab
}

/// OEM Header
/// Classification marking of the data in IC/CAPCO Portion-marked format.
func (rcv *OEM) CLASSIFICATION() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// OEM Header
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// OEM Version
func (rcv *OEM) CCSDS_OEM_VERS() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// OEM Version
func (rcv *OEM) MutateCCSDS_OEM_VERS(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// Creation Date
func (rcv *OEM) CREATION_DATE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Creation Date
/// Originator
func (rcv *OEM) ORIGINATOR() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originator
/// Array of ephemeris data blocks
func (rcv *OEM) EPHEMERIS_DATA_BLOCK(obj *ephemerisDataBlock, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *OEM) EPHEMERIS_DATA_BLOCKLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of ephemeris data blocks
func OEMStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func OEMAddCLASSIFICATION(builder *flatbuffers.Builder, CLASSIFICATION flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(CLASSIFICATION), 0)
}
func OEMAddCCSDS_OEM_VERS(builder *flatbuffers.Builder, CCSDS_OEM_VERS float64) {
	builder.PrependFloat64Slot(1, CCSDS_OEM_VERS, 0.0)
}
func OEMAddCREATION_DATE(builder *flatbuffers.Builder, CREATION_DATE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(CREATION_DATE), 0)
}
func OEMAddORIGINATOR(builder *flatbuffers.Builder, ORIGINATOR flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(ORIGINATOR), 0)
}
func OEMAddEPHEMERIS_DATA_BLOCK(builder *flatbuffers.Builder, EPHEMERIS_DATA_BLOCK flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(EPHEMERIS_DATA_BLOCK), 0)
}
func OEMStartEPHEMERIS_DATA_BLOCKVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OEMEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
