// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ephemerisDataLine

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// A single ephemeris data line
type ephemerisDataLine struct {
	_tab flatbuffers.Table
}

func GetRootAsephemerisDataLine(buf []byte, offset flatbuffers.UOffsetT) *ephemerisDataLine {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ephemerisDataLine{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsephemerisDataLine(buf []byte, offset flatbuffers.UOffsetT) *ephemerisDataLine {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ephemerisDataLine{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ephemerisDataLine) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ephemerisDataLine) Table() flatbuffers.Table {
	return rcv._tab
}

/// Epoch of state vector (ISO 8601)
func (rcv *ephemerisDataLine) EPOCH() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Epoch of state vector (ISO 8601)
/// Position vector X-component km
func (rcv *ephemerisDataLine) X() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Position vector X-component km
func (rcv *ephemerisDataLine) MutateX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// Position vector Y-component km
func (rcv *ephemerisDataLine) Y() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Position vector Y-component km
func (rcv *ephemerisDataLine) MutateY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// Position vector Z-component km
func (rcv *ephemerisDataLine) Z() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Position vector Z-component km
func (rcv *ephemerisDataLine) MutateZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// Velocity vector X-component km/s
func (rcv *ephemerisDataLine) X_DOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Velocity vector X-component km/s
func (rcv *ephemerisDataLine) MutateX_DOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Velocity vector Y-component km/s
func (rcv *ephemerisDataLine) Y_DOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Velocity vector Y-component km/s
func (rcv *ephemerisDataLine) MutateY_DOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Velocity vector Z-component km/s
func (rcv *ephemerisDataLine) Z_DOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Velocity vector Z-component km/s
func (rcv *ephemerisDataLine) MutateZ_DOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Optional: Acceleration vector X-component km/s/s
func (rcv *ephemerisDataLine) X_DDOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Optional: Acceleration vector X-component km/s/s
func (rcv *ephemerisDataLine) MutateX_DDOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Optional: Acceleration vector Y-component km/s/s
func (rcv *ephemerisDataLine) Y_DDOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Optional: Acceleration vector Y-component km/s/s
func (rcv *ephemerisDataLine) MutateY_DDOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Optional: Acceleration vector Z-component km/s/s
func (rcv *ephemerisDataLine) Z_DDOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Optional: Acceleration vector Z-component km/s/s
func (rcv *ephemerisDataLine) MutateZ_DDOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

func ephemerisDataLineStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func ephemerisDataLineAddEPOCH(builder *flatbuffers.Builder, EPOCH flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(EPOCH), 0)
}
func ephemerisDataLineAddX(builder *flatbuffers.Builder, X float64) {
	builder.PrependFloat64Slot(1, X, 0.0)
}
func ephemerisDataLineAddY(builder *flatbuffers.Builder, Y float64) {
	builder.PrependFloat64Slot(2, Y, 0.0)
}
func ephemerisDataLineAddZ(builder *flatbuffers.Builder, Z float64) {
	builder.PrependFloat64Slot(3, Z, 0.0)
}
func ephemerisDataLineAddX_DOT(builder *flatbuffers.Builder, X_DOT float64) {
	builder.PrependFloat64Slot(4, X_DOT, 0.0)
}
func ephemerisDataLineAddY_DOT(builder *flatbuffers.Builder, Y_DOT float64) {
	builder.PrependFloat64Slot(5, Y_DOT, 0.0)
}
func ephemerisDataLineAddZ_DOT(builder *flatbuffers.Builder, Z_DOT float64) {
	builder.PrependFloat64Slot(6, Z_DOT, 0.0)
}
func ephemerisDataLineAddX_DDOT(builder *flatbuffers.Builder, X_DDOT float64) {
	builder.PrependFloat64Slot(7, X_DDOT, 0.0)
}
func ephemerisDataLineAddY_DDOT(builder *flatbuffers.Builder, Y_DDOT float64) {
	builder.PrependFloat64Slot(8, Y_DDOT, 0.0)
}
func ephemerisDataLineAddZ_DDOT(builder *flatbuffers.Builder, Z_DDOT float64) {
	builder.PrependFloat64Slot(9, Z_DDOT, 0.0)
}
func ephemerisDataLineEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
