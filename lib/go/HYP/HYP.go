// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package HYP

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Hypothesis Message
type HYP struct {
	_tab flatbuffers.Table
}

func GetRootAsHYP(buf []byte, offset flatbuffers.UOffsetT) *HYP {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HYP{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsHYP(buf []byte, offset flatbuffers.UOffsetT) *HYP {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &HYP{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *HYP) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HYP) Table() flatbuffers.Table {
	return rcv._tab
}

/// Space Objects Involved
func (rcv *HYP) CAT_IDS(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *HYP) CAT_IDSLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Space Objects Involved
/// Space Objects Involved
func (rcv *HYP) SIT_IDS(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *HYP) SIT_IDSLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Space Objects Involved
/// Name of the hypothesis
func (rcv *HYP) NAME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the hypothesis
/// Category of the hypothesis
func (rcv *HYP) CATEGORY() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Category of the hypothesis
/// Row indicators for the hypothesis matrix
func (rcv *HYP) ROW_INDICATORS(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *HYP) ROW_INDICATORSLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Row indicators for the hypothesis matrix
/// Column indicators for the hypothesis matrix
func (rcv *HYP) COL_INDICATORS(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *HYP) COL_INDICATORSLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Column indicators for the hypothesis matrix
/// Matrix data as a boolean array in row major format; if overflow, adds additional rows
func (rcv *HYP) MATRIX(j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetBool(a + flatbuffers.UOffsetT(j*1))
	}
	return false
}

func (rcv *HYP) MATRIXLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Matrix data as a boolean array in row major format; if overflow, adds additional rows
func (rcv *HYP) MutateMATRIX(j int, n bool) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateBool(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

/// Scores for objects
func (rcv *HYP) SCORE(obj *Score, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *HYP) SCORELength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Scores for objects
/// Analysis methodology used to form the hypothesis
func (rcv *HYP) ANALYSIS_METHOD() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Analysis methodology used to form the hypothesis
func (rcv *HYP) EVENT_START_TIME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *HYP) EVENT_END_TIME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func HYPStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func HYPAddCAT_IDS(builder *flatbuffers.Builder, CAT_IDS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(CAT_IDS), 0)
}
func HYPStartCAT_IDSVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func HYPAddSIT_IDS(builder *flatbuffers.Builder, SIT_IDS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(SIT_IDS), 0)
}
func HYPStartSIT_IDSVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func HYPAddNAME(builder *flatbuffers.Builder, NAME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(NAME), 0)
}
func HYPAddCATEGORY(builder *flatbuffers.Builder, CATEGORY flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(CATEGORY), 0)
}
func HYPAddROW_INDICATORS(builder *flatbuffers.Builder, ROW_INDICATORS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(ROW_INDICATORS), 0)
}
func HYPStartROW_INDICATORSVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func HYPAddCOL_INDICATORS(builder *flatbuffers.Builder, COL_INDICATORS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(COL_INDICATORS), 0)
}
func HYPStartCOL_INDICATORSVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func HYPAddMATRIX(builder *flatbuffers.Builder, MATRIX flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(MATRIX), 0)
}
func HYPStartMATRIXVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func HYPAddSCORE(builder *flatbuffers.Builder, SCORE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(SCORE), 0)
}
func HYPStartSCOREVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func HYPAddANALYSIS_METHOD(builder *flatbuffers.Builder, ANALYSIS_METHOD flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(ANALYSIS_METHOD), 0)
}
func HYPAddEVENT_START_TIME(builder *flatbuffers.Builder, EVENT_START_TIME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(EVENT_START_TIME), 0)
}
func HYPAddEVENT_END_TIME(builder *flatbuffers.Builder, EVENT_END_TIME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(EVENT_END_TIME), 0)
}
func HYPEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
