// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OCM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Metadata struct {
	_tab flatbuffers.Table
}

func GetRootAsMetadata(buf []byte, offset flatbuffers.UOffsetT) *Metadata {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Metadata{}
	x.Init(buf, n+offset)
	return x
}

func FinishMetadataBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMetadata(buf []byte, offset flatbuffers.UOffsetT) *Metadata {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Metadata{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMetadataBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Metadata) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Metadata) Table() flatbuffers.Table {
	return rcv._tab
}

/// Comments in the Metadata section.
func (rcv *Metadata) COMMENT(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Metadata) COMMENTLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Comments in the Metadata section.
/// Free-text field containing the name of the object.
func (rcv *Metadata) OBJECT_NAME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Free-text field containing the name of the object.
/// International designator for the object as assigned by COSPAR.
func (rcv *Metadata) INTERNATIONAL_DESIGNATOR() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// International designator for the object as assigned by COSPAR.
/// Satellite catalog source from which 'OBJECT_DESIGNATOR' was obtained.
func (rcv *Metadata) CATALOG_NAME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Satellite catalog source from which 'OBJECT_DESIGNATOR' was obtained.
/// Unique satellite identification designator from the catalog.
func (rcv *Metadata) OBJECT_DESIGNATOR() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique satellite identification designator from the catalog.
/// Alternate names of this space object.
func (rcv *Metadata) ALTERNATE_NAMES(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Metadata) ALTERNATE_NAMESLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Alternate names of this space object.
/// Originator or programmatic Point-of-Contact (PoC) for OCM.
func (rcv *Metadata) ORIGINATOR_POC() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originator or programmatic Point-of-Contact (PoC) for OCM.
/// Contact position of the originator PoC.
func (rcv *Metadata) ORIGINATOR_POSITION() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Contact position of the originator PoC.
/// Originator PoC phone number.
func (rcv *Metadata) ORIGINATOR_PHONE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originator PoC phone number.
/// Originator PoC email address.
func (rcv *Metadata) ORIGINATOR_EMAIL() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originator PoC email address.
/// Originator's physical address information.
func (rcv *Metadata) ORIGINATOR_ADDRESS() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originator's physical address information.
/// Creating agency or operator for technical contact.
func (rcv *Metadata) TECH_ORG() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Creating agency or operator for technical contact.
/// Technical Point-of-Contact (PoC) for OCM.
func (rcv *Metadata) TECH_POC() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Technical Point-of-Contact (PoC) for OCM.
/// Contact position of the technical PoC.
func (rcv *Metadata) TECH_POSITION() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Contact position of the technical PoC.
/// Technical PoC phone number.
func (rcv *Metadata) TECH_PHONE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Technical PoC phone number.
/// Technical PoC email address.
func (rcv *Metadata) TECH_EMAIL() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Technical PoC email address.
/// Technical PoC physical address information.
func (rcv *Metadata) TECH_ADDRESS() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Technical PoC physical address information.
/// ID that uniquely identifies the previous message from this originator.
func (rcv *Metadata) PREVIOUS_MESSAGE_ID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID that uniquely identifies the previous message from this originator.
/// ID that uniquely identifies the next message from this originator.
func (rcv *Metadata) NEXT_MESSAGE_ID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID that uniquely identifies the next message from this originator.
/// Unique identifier of Attitude Data Messages linked to this OCM.
func (rcv *Metadata) ADM_MSG_LINK() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of Attitude Data Messages linked to this OCM.
/// Unique identifier of Conjunction Data Messages linked to this OCM.
func (rcv *Metadata) CDM_MSG_LINK() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of Conjunction Data Messages linked to this OCM.
/// Unique identifier of Pointing Request Messages linked to this OCM.
func (rcv *Metadata) PRM_MSG_LINK() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of Pointing Request Messages linked to this OCM.
/// Unique identifier of Reentry Data Messages linked to this OCM.
func (rcv *Metadata) RDM_MSG_LINK() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of Reentry Data Messages linked to this OCM.
/// List of Tracking Data Messages upon which this orbit determination is based.
func (rcv *Metadata) TDM_MSG_LINK(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Metadata) TDM_MSG_LINKLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of Tracking Data Messages upon which this orbit determination is based.
/// Operator of the space object.
func (rcv *Metadata) OPERATOR() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Operator of the space object.
/// Owner of the space object.
func (rcv *Metadata) OWNER() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Owner of the space object.
/// Country where the space object owner is based.
func (rcv *Metadata) COUNTRY() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Country where the space object owner is based.
/// Name of the constellation to which this space object belongs.
func (rcv *Metadata) CONSTELLATION() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the constellation to which this space object belongs.
/// Specification of the type of object (e.g., PAYLOAD, ROCKET BODY, DEBRIS).
func (rcv *Metadata) OBJECT_TYPE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specification of the type of object (e.g., PAYLOAD, ROCKET BODY, DEBRIS).
/// Time system for all absolute time stamps in this OCM, including EPOCH_TZERO.
func (rcv *Metadata) TIME_SYSTEM() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time system for all absolute time stamps in this OCM, including EPOCH_TZERO.
/// Default epoch to which all relative times are referenced in data blocks.
func (rcv *Metadata) EPOCH_TZERO() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Default epoch to which all relative times are referenced in data blocks.
/// Specification of the operational status of the space object.
func (rcv *Metadata) OPS_STATUS() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specification of the operational status of the space object.
/// Specification of the type of orbit (e.g., GEO, LEO).
func (rcv *Metadata) ORBIT_CATEGORY() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specification of the type of orbit (e.g., GEO, LEO).
/// List of elements of information data blocks included in this message.
func (rcv *Metadata) OCM_DATA_ELEMENTS(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Metadata) OCM_DATA_ELEMENTSLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of elements of information data blocks included in this message.
/// Number of spacecraft clock counts at EPOCH_TZERO (used if TIME_SYSTEM is SCLK).
func (rcv *Metadata) SCLK_OFFSET_AT_EPOCH() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Number of spacecraft clock counts at EPOCH_TZERO (used if TIME_SYSTEM is SCLK).
func (rcv *Metadata) MutateSCLK_OFFSET_AT_EPOCH(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// Number of clock seconds occurring during one SI second (used if TIME_SYSTEM is SCLK).
func (rcv *Metadata) SCLK_SEC_PER_SI_SEC() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Number of clock seconds occurring during one SI second (used if TIME_SYSTEM is SCLK).
func (rcv *Metadata) MutateSCLK_SEC_PER_SI_SEC(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// Creation epoch of the previous message from this originator.
func (rcv *Metadata) PREVIOUS_MESSAGE_EPOCH() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Creation epoch of the previous message from this originator.
/// Anticipated (or actual) epoch of the next message from this originator.
func (rcv *Metadata) NEXT_MESSAGE_EPOCH() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Anticipated (or actual) epoch of the next message from this originator.
/// Time of the earliest data contained in the OCM.
func (rcv *Metadata) START_TIME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of the earliest data contained in the OCM.
/// Time of the latest data contained in the OCM.
func (rcv *Metadata) STOP_TIME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of the latest data contained in the OCM.
/// Span of time that the OCM covers, measured in days.
func (rcv *Metadata) TIME_SPAN() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Span of time that the OCM covers, measured in days.
func (rcv *Metadata) MutateTIME_SPAN(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// Difference (TAI - UTC) in seconds at EPOCH_TZERO.
func (rcv *Metadata) TAIMUTC_AT_TZERO() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Difference (TAI - UTC) in seconds at EPOCH_TZERO.
func (rcv *Metadata) MutateTAIMUTC_AT_TZERO(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// Epoch of next leap second.
func (rcv *Metadata) NEXT_LEAP_EPOCH() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Epoch of next leap second.
/// Difference (TAI - UTC) in seconds at NEXT_LEAP_EPOCH.
func (rcv *Metadata) NEXT_LEAP_TAIMUTC() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Difference (TAI - UTC) in seconds at NEXT_LEAP_EPOCH.
func (rcv *Metadata) MutateNEXT_LEAP_TAIMUTC(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// Difference (UT1 - UTC) in seconds at EPOCH_TZERO.
func (rcv *Metadata) UT1MUTC_AT_TZERO() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Difference (UT1 - UTC) in seconds at EPOCH_TZERO.
func (rcv *Metadata) MutateUT1MUTC_AT_TZERO(n float64) bool {
	return rcv._tab.MutateFloat64Slot(92, n)
}

/// Source and version of Earth Orientation Parameters used.
func (rcv *Metadata) EOP_SOURCE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source and version of Earth Orientation Parameters used.
/// Method used to select or interpolate sequential EOP data.
func (rcv *Metadata) INTERP_METHOD_EOP() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Method used to select or interpolate sequential EOP data.
/// Source and version of celestial body ephemeris data used.
func (rcv *Metadata) CELESTIAL_SOURCE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source and version of celestial body ephemeris data used.
func MetadataStart(builder *flatbuffers.Builder) {
	builder.StartObject(48)
}
func MetadataAddCOMMENT(builder *flatbuffers.Builder, COMMENT flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(COMMENT), 0)
}
func MetadataStartCOMMENTVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MetadataAddOBJECT_NAME(builder *flatbuffers.Builder, OBJECT_NAME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(OBJECT_NAME), 0)
}
func MetadataAddINTERNATIONAL_DESIGNATOR(builder *flatbuffers.Builder, INTERNATIONAL_DESIGNATOR flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(INTERNATIONAL_DESIGNATOR), 0)
}
func MetadataAddCATALOG_NAME(builder *flatbuffers.Builder, CATALOG_NAME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(CATALOG_NAME), 0)
}
func MetadataAddOBJECT_DESIGNATOR(builder *flatbuffers.Builder, OBJECT_DESIGNATOR flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(OBJECT_DESIGNATOR), 0)
}
func MetadataAddALTERNATE_NAMES(builder *flatbuffers.Builder, ALTERNATE_NAMES flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(ALTERNATE_NAMES), 0)
}
func MetadataStartALTERNATE_NAMESVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MetadataAddORIGINATOR_POC(builder *flatbuffers.Builder, ORIGINATOR_POC flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(ORIGINATOR_POC), 0)
}
func MetadataAddORIGINATOR_POSITION(builder *flatbuffers.Builder, ORIGINATOR_POSITION flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(ORIGINATOR_POSITION), 0)
}
func MetadataAddORIGINATOR_PHONE(builder *flatbuffers.Builder, ORIGINATOR_PHONE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(ORIGINATOR_PHONE), 0)
}
func MetadataAddORIGINATOR_EMAIL(builder *flatbuffers.Builder, ORIGINATOR_EMAIL flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(ORIGINATOR_EMAIL), 0)
}
func MetadataAddORIGINATOR_ADDRESS(builder *flatbuffers.Builder, ORIGINATOR_ADDRESS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(ORIGINATOR_ADDRESS), 0)
}
func MetadataAddTECH_ORG(builder *flatbuffers.Builder, TECH_ORG flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(TECH_ORG), 0)
}
func MetadataAddTECH_POC(builder *flatbuffers.Builder, TECH_POC flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(TECH_POC), 0)
}
func MetadataAddTECH_POSITION(builder *flatbuffers.Builder, TECH_POSITION flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(TECH_POSITION), 0)
}
func MetadataAddTECH_PHONE(builder *flatbuffers.Builder, TECH_PHONE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(TECH_PHONE), 0)
}
func MetadataAddTECH_EMAIL(builder *flatbuffers.Builder, TECH_EMAIL flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(TECH_EMAIL), 0)
}
func MetadataAddTECH_ADDRESS(builder *flatbuffers.Builder, TECH_ADDRESS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(TECH_ADDRESS), 0)
}
func MetadataAddPREVIOUS_MESSAGE_ID(builder *flatbuffers.Builder, PREVIOUS_MESSAGE_ID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(PREVIOUS_MESSAGE_ID), 0)
}
func MetadataAddNEXT_MESSAGE_ID(builder *flatbuffers.Builder, NEXT_MESSAGE_ID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(NEXT_MESSAGE_ID), 0)
}
func MetadataAddADM_MSG_LINK(builder *flatbuffers.Builder, ADM_MSG_LINK flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(ADM_MSG_LINK), 0)
}
func MetadataAddCDM_MSG_LINK(builder *flatbuffers.Builder, CDM_MSG_LINK flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(CDM_MSG_LINK), 0)
}
func MetadataAddPRM_MSG_LINK(builder *flatbuffers.Builder, PRM_MSG_LINK flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(PRM_MSG_LINK), 0)
}
func MetadataAddRDM_MSG_LINK(builder *flatbuffers.Builder, RDM_MSG_LINK flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(RDM_MSG_LINK), 0)
}
func MetadataAddTDM_MSG_LINK(builder *flatbuffers.Builder, TDM_MSG_LINK flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(TDM_MSG_LINK), 0)
}
func MetadataStartTDM_MSG_LINKVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MetadataAddOPERATOR(builder *flatbuffers.Builder, OPERATOR flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(OPERATOR), 0)
}
func MetadataAddOWNER(builder *flatbuffers.Builder, OWNER flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(OWNER), 0)
}
func MetadataAddCOUNTRY(builder *flatbuffers.Builder, COUNTRY flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(COUNTRY), 0)
}
func MetadataAddCONSTELLATION(builder *flatbuffers.Builder, CONSTELLATION flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(CONSTELLATION), 0)
}
func MetadataAddOBJECT_TYPE(builder *flatbuffers.Builder, OBJECT_TYPE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(OBJECT_TYPE), 0)
}
func MetadataAddTIME_SYSTEM(builder *flatbuffers.Builder, TIME_SYSTEM flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(TIME_SYSTEM), 0)
}
func MetadataAddEPOCH_TZERO(builder *flatbuffers.Builder, EPOCH_TZERO flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(EPOCH_TZERO), 0)
}
func MetadataAddOPS_STATUS(builder *flatbuffers.Builder, OPS_STATUS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(OPS_STATUS), 0)
}
func MetadataAddORBIT_CATEGORY(builder *flatbuffers.Builder, ORBIT_CATEGORY flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(ORBIT_CATEGORY), 0)
}
func MetadataAddOCM_DATA_ELEMENTS(builder *flatbuffers.Builder, OCM_DATA_ELEMENTS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(OCM_DATA_ELEMENTS), 0)
}
func MetadataStartOCM_DATA_ELEMENTSVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MetadataAddSCLK_OFFSET_AT_EPOCH(builder *flatbuffers.Builder, SCLK_OFFSET_AT_EPOCH float64) {
	builder.PrependFloat64Slot(34, SCLK_OFFSET_AT_EPOCH, 0.0)
}
func MetadataAddSCLK_SEC_PER_SI_SEC(builder *flatbuffers.Builder, SCLK_SEC_PER_SI_SEC float64) {
	builder.PrependFloat64Slot(35, SCLK_SEC_PER_SI_SEC, 0.0)
}
func MetadataAddPREVIOUS_MESSAGE_EPOCH(builder *flatbuffers.Builder, PREVIOUS_MESSAGE_EPOCH flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(PREVIOUS_MESSAGE_EPOCH), 0)
}
func MetadataAddNEXT_MESSAGE_EPOCH(builder *flatbuffers.Builder, NEXT_MESSAGE_EPOCH flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(NEXT_MESSAGE_EPOCH), 0)
}
func MetadataAddSTART_TIME(builder *flatbuffers.Builder, START_TIME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(START_TIME), 0)
}
func MetadataAddSTOP_TIME(builder *flatbuffers.Builder, STOP_TIME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(STOP_TIME), 0)
}
func MetadataAddTIME_SPAN(builder *flatbuffers.Builder, TIME_SPAN float64) {
	builder.PrependFloat64Slot(40, TIME_SPAN, 0.0)
}
func MetadataAddTAIMUTC_AT_TZERO(builder *flatbuffers.Builder, TAIMUTC_AT_TZERO float64) {
	builder.PrependFloat64Slot(41, TAIMUTC_AT_TZERO, 0.0)
}
func MetadataAddNEXT_LEAP_EPOCH(builder *flatbuffers.Builder, NEXT_LEAP_EPOCH flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(NEXT_LEAP_EPOCH), 0)
}
func MetadataAddNEXT_LEAP_TAIMUTC(builder *flatbuffers.Builder, NEXT_LEAP_TAIMUTC float64) {
	builder.PrependFloat64Slot(43, NEXT_LEAP_TAIMUTC, 0.0)
}
func MetadataAddUT1MUTC_AT_TZERO(builder *flatbuffers.Builder, UT1MUTC_AT_TZERO float64) {
	builder.PrependFloat64Slot(44, UT1MUTC_AT_TZERO, 0.0)
}
func MetadataAddEOP_SOURCE(builder *flatbuffers.Builder, EOP_SOURCE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(EOP_SOURCE), 0)
}
func MetadataAddINTERP_METHOD_EOP(builder *flatbuffers.Builder, INTERP_METHOD_EOP flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(INTERP_METHOD_EOP), 0)
}
func MetadataAddCELESTIAL_SOURCE(builder *flatbuffers.Builder, CELESTIAL_SOURCE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(CELESTIAL_SOURCE), 0)
}
func MetadataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
