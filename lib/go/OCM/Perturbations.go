// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OCM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Perturbations struct {
	_tab flatbuffers.Table
}

func GetRootAsPerturbations(buf []byte, offset flatbuffers.UOffsetT) *Perturbations {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Perturbations{}
	x.Init(buf, n+offset)
	return x
}

func FinishPerturbationsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPerturbations(buf []byte, offset flatbuffers.UOffsetT) *Perturbations {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Perturbations{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPerturbationsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Perturbations) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Perturbations) Table() flatbuffers.Table {
	return rcv._tab
}

/// Comments in the Perturbations section.
func (rcv *Perturbations) COMMENT(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Perturbations) COMMENTLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Comments in the Perturbations section.
/// Atmospheric model used.
func (rcv *Perturbations) ATMOSPHERIC_MODEL() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Atmospheric model used.
/// Gravity model used.
func (rcv *Perturbations) GRAVITY_MODEL() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Gravity model used.
/// Degree of the gravity model.
func (rcv *Perturbations) GRAVITY_DEGREE() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Degree of the gravity model.
func (rcv *Perturbations) MutateGRAVITY_DEGREE(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Order of the gravity model.
func (rcv *Perturbations) GRAVITY_ORDER() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Order of the gravity model.
func (rcv *Perturbations) MutateGRAVITY_ORDER(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// Gravitational constant times the mass of the central body.
func (rcv *Perturbations) GM() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Gravitational constant times the mass of the central body.
func (rcv *Perturbations) MutateGM(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// List of celestial bodies included in n-body perturbations.
func (rcv *Perturbations) N_BODY_PERTURBATIONS(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Perturbations) N_BODY_PERTURBATIONSLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of celestial bodies included in n-body perturbations.
/// Ocean tides model used.
func (rcv *Perturbations) OCEAN_TIDES_MODEL() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ocean tides model used.
/// Solid tides model used.
func (rcv *Perturbations) SOLID_TIDES_MODEL() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Solid tides model used.
/// Atmospheric tides model used.
func (rcv *Perturbations) ATMOSPHERIC_TIDES_MODEL() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Atmospheric tides model used.
/// Geopotential model used.
func (rcv *Perturbations) GEOPOTENTIAL_MODEL() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geopotential model used.
/// Solar radiation pressure model used.
func (rcv *Perturbations) SOLAR_RAD_PRESSURE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Solar radiation pressure model used.
/// Albedo model used.
func (rcv *Perturbations) ALBEDO() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Albedo model used.
/// Thermal model used.
func (rcv *Perturbations) THERMAL() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Thermal model used.
/// Relativity model used.
func (rcv *Perturbations) RELATIVITY() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Relativity model used.
/// Atmospheric drag model used.
func (rcv *Perturbations) ATMOSPHERIC_DRAG() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Atmospheric drag model used.
/// Fixed geomagnetic Kp index used.
func (rcv *Perturbations) FIXED_GEOMAG_KP() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Fixed geomagnetic Kp index used.
func (rcv *Perturbations) MutateFIXED_GEOMAG_KP(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Fixed F10.7 solar flux value used.
func (rcv *Perturbations) FIXED_F10P7() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Fixed F10.7 solar flux value used.
func (rcv *Perturbations) MutateFIXED_F10P7(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Fixed mean F10.7 solar flux value used.
func (rcv *Perturbations) FIXED_F10P7_MEAN() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Fixed mean F10.7 solar flux value used.
func (rcv *Perturbations) MutateFIXED_F10P7_MEAN(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

func PerturbationsStart(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func PerturbationsAddCOMMENT(builder *flatbuffers.Builder, COMMENT flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(COMMENT), 0)
}
func PerturbationsStartCOMMENTVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PerturbationsAddATMOSPHERIC_MODEL(builder *flatbuffers.Builder, ATMOSPHERIC_MODEL flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(ATMOSPHERIC_MODEL), 0)
}
func PerturbationsAddGRAVITY_MODEL(builder *flatbuffers.Builder, GRAVITY_MODEL flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(GRAVITY_MODEL), 0)
}
func PerturbationsAddGRAVITY_DEGREE(builder *flatbuffers.Builder, GRAVITY_DEGREE int32) {
	builder.PrependInt32Slot(3, GRAVITY_DEGREE, 0)
}
func PerturbationsAddGRAVITY_ORDER(builder *flatbuffers.Builder, GRAVITY_ORDER int32) {
	builder.PrependInt32Slot(4, GRAVITY_ORDER, 0)
}
func PerturbationsAddGM(builder *flatbuffers.Builder, GM float64) {
	builder.PrependFloat64Slot(5, GM, 0.0)
}
func PerturbationsAddN_BODY_PERTURBATIONS(builder *flatbuffers.Builder, N_BODY_PERTURBATIONS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(N_BODY_PERTURBATIONS), 0)
}
func PerturbationsStartN_BODY_PERTURBATIONSVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PerturbationsAddOCEAN_TIDES_MODEL(builder *flatbuffers.Builder, OCEAN_TIDES_MODEL flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(OCEAN_TIDES_MODEL), 0)
}
func PerturbationsAddSOLID_TIDES_MODEL(builder *flatbuffers.Builder, SOLID_TIDES_MODEL flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(SOLID_TIDES_MODEL), 0)
}
func PerturbationsAddATMOSPHERIC_TIDES_MODEL(builder *flatbuffers.Builder, ATMOSPHERIC_TIDES_MODEL flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(ATMOSPHERIC_TIDES_MODEL), 0)
}
func PerturbationsAddGEOPOTENTIAL_MODEL(builder *flatbuffers.Builder, GEOPOTENTIAL_MODEL flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(GEOPOTENTIAL_MODEL), 0)
}
func PerturbationsAddSOLAR_RAD_PRESSURE(builder *flatbuffers.Builder, SOLAR_RAD_PRESSURE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(SOLAR_RAD_PRESSURE), 0)
}
func PerturbationsAddALBEDO(builder *flatbuffers.Builder, ALBEDO flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(ALBEDO), 0)
}
func PerturbationsAddTHERMAL(builder *flatbuffers.Builder, THERMAL flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(THERMAL), 0)
}
func PerturbationsAddRELATIVITY(builder *flatbuffers.Builder, RELATIVITY flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(RELATIVITY), 0)
}
func PerturbationsAddATMOSPHERIC_DRAG(builder *flatbuffers.Builder, ATMOSPHERIC_DRAG flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(ATMOSPHERIC_DRAG), 0)
}
func PerturbationsAddFIXED_GEOMAG_KP(builder *flatbuffers.Builder, FIXED_GEOMAG_KP float64) {
	builder.PrependFloat64Slot(16, FIXED_GEOMAG_KP, 0.0)
}
func PerturbationsAddFIXED_F10P7(builder *flatbuffers.Builder, FIXED_F10P7 float64) {
	builder.PrependFloat64Slot(17, FIXED_F10P7, 0.0)
}
func PerturbationsAddFIXED_F10P7_MEAN(builder *flatbuffers.Builder, FIXED_F10P7_MEAN float64) {
	builder.PrependFloat64Slot(18, FIXED_F10P7_MEAN, 0.0)
}
func PerturbationsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
