// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OCM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Maneuver struct {
	_tab flatbuffers.Table
}

func GetRootAsManeuver(buf []byte, offset flatbuffers.UOffsetT) *Maneuver {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Maneuver{}
	x.Init(buf, n+offset)
	return x
}

func FinishManeuverBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsManeuver(buf []byte, offset flatbuffers.UOffsetT) *Maneuver {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Maneuver{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedManeuverBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Maneuver) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Maneuver) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier for the maneuver.
func (rcv *Maneuver) MAN_ID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier for the maneuver.
/// Basis of the maneuver plan (e.g., planned, predicted, estimated).
func (rcv *Maneuver) MAN_BASIS() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Basis of the maneuver plan (e.g., planned, predicted, estimated).
/// Identifier of the maneuver device.
func (rcv *Maneuver) MAN_DEVICE_ID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the maneuver device.
/// Identifier of the previous maneuver.
func (rcv *Maneuver) MAN_PREV_ID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the previous maneuver.
/// Purpose of the maneuver.
func (rcv *Maneuver) MAN_PURPOSE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Purpose of the maneuver.
/// Reference frame for the maneuver data.
func (rcv *Maneuver) MAN_REF_FRAME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Reference frame for the maneuver data.
/// Epoch of the maneuver reference frame.
func (rcv *Maneuver) MAN_FRAME_EPOCH() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Epoch of the maneuver reference frame.
/// Type of maneuver (e.g., IMPULSIVE, FINITE).
func (rcv *Maneuver) MAN_TYPE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of maneuver (e.g., IMPULSIVE, FINITE).
/// Start epoch of the maneuver.
func (rcv *Maneuver) MAN_EPOCH_START() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Start epoch of the maneuver.
/// Duration of the maneuver.
func (rcv *Maneuver) MAN_DURATION() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Duration of the maneuver.
func (rcv *Maneuver) MutateMAN_DURATION(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Units for the maneuver data values.
func (rcv *Maneuver) MAN_UNITS(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Maneuver) MAN_UNITSLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Units for the maneuver data values.
/// Data associated with the maneuver.
func (rcv *Maneuver) DATA(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Maneuver) DATALength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Data associated with the maneuver.
/// Comments related to the maneuver.
func (rcv *Maneuver) MAN_COMMENT(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Maneuver) MAN_COMMENTLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Comments related to the maneuver.
func ManeuverStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func ManeuverAddMAN_ID(builder *flatbuffers.Builder, MAN_ID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(MAN_ID), 0)
}
func ManeuverAddMAN_BASIS(builder *flatbuffers.Builder, MAN_BASIS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(MAN_BASIS), 0)
}
func ManeuverAddMAN_DEVICE_ID(builder *flatbuffers.Builder, MAN_DEVICE_ID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(MAN_DEVICE_ID), 0)
}
func ManeuverAddMAN_PREV_ID(builder *flatbuffers.Builder, MAN_PREV_ID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(MAN_PREV_ID), 0)
}
func ManeuverAddMAN_PURPOSE(builder *flatbuffers.Builder, MAN_PURPOSE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(MAN_PURPOSE), 0)
}
func ManeuverAddMAN_REF_FRAME(builder *flatbuffers.Builder, MAN_REF_FRAME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(MAN_REF_FRAME), 0)
}
func ManeuverAddMAN_FRAME_EPOCH(builder *flatbuffers.Builder, MAN_FRAME_EPOCH flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(MAN_FRAME_EPOCH), 0)
}
func ManeuverAddMAN_TYPE(builder *flatbuffers.Builder, MAN_TYPE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(MAN_TYPE), 0)
}
func ManeuverAddMAN_EPOCH_START(builder *flatbuffers.Builder, MAN_EPOCH_START flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(MAN_EPOCH_START), 0)
}
func ManeuverAddMAN_DURATION(builder *flatbuffers.Builder, MAN_DURATION float64) {
	builder.PrependFloat64Slot(9, MAN_DURATION, 0.0)
}
func ManeuverAddMAN_UNITS(builder *flatbuffers.Builder, MAN_UNITS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(MAN_UNITS), 0)
}
func ManeuverStartMAN_UNITSVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ManeuverAddDATA(builder *flatbuffers.Builder, DATA flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(DATA), 0)
}
func ManeuverStartDATAVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ManeuverAddMAN_COMMENT(builder *flatbuffers.Builder, MAN_COMMENT flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(MAN_COMMENT), 0)
}
func ManeuverStartMAN_COMMENTVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ManeuverEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
