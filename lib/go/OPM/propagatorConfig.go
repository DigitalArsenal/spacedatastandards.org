// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OPM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Propagator configuration structure to describe propagation settings
type propagatorConfig struct {
	_tab flatbuffers.Table
}

func GetRootAspropagatorConfig(buf []byte, offset flatbuffers.UOffsetT) *propagatorConfig {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &propagatorConfig{}
	x.Init(buf, n+offset)
	return x
}

func FinishpropagatorConfigBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAspropagatorConfig(buf []byte, offset flatbuffers.UOffsetT) *propagatorConfig {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &propagatorConfig{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedpropagatorConfigBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *propagatorConfig) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *propagatorConfig) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *propagatorConfig) PROPAGATOR_NAME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *propagatorConfig) PROPAGATOR_TYPE() propagatorType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return propagatorType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *propagatorConfig) MutatePROPAGATOR_TYPE(n propagatorType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func (rcv *propagatorConfig) FORCE_MODELS(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *propagatorConfig) FORCE_MODELSLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *propagatorConfig) EPOCH() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *propagatorConfig) TIME_STEP() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *propagatorConfig) MutateTIME_STEP(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func (rcv *propagatorConfig) ZONAL_HARMONIC_TERMS(j int) zonalHarmonic {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return zonalHarmonic(rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1)))
	}
	return 0
}

func (rcv *propagatorConfig) ZONAL_HARMONIC_TERMSLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *propagatorConfig) MutateZONAL_HARMONIC_TERMS(j int, n zonalHarmonic) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), int8(n))
	}
	return false
}

func propagatorConfigStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func propagatorConfigAddPROPAGATOR_NAME(builder *flatbuffers.Builder, PROPAGATOR_NAME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(PROPAGATOR_NAME), 0)
}
func propagatorConfigAddPROPAGATOR_TYPE(builder *flatbuffers.Builder, PROPAGATOR_TYPE propagatorType) {
	builder.PrependInt8Slot(1, int8(PROPAGATOR_TYPE), 0)
}
func propagatorConfigAddFORCE_MODELS(builder *flatbuffers.Builder, FORCE_MODELS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(FORCE_MODELS), 0)
}
func propagatorConfigStartFORCE_MODELSVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func propagatorConfigAddEPOCH(builder *flatbuffers.Builder, EPOCH flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(EPOCH), 0)
}
func propagatorConfigAddTIME_STEP(builder *flatbuffers.Builder, TIME_STEP float64) {
	builder.PrependFloat64Slot(4, TIME_STEP, 0.0)
}
func propagatorConfigAddZONAL_HARMONIC_TERMS(builder *flatbuffers.Builder, ZONAL_HARMONIC_TERMS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(ZONAL_HARMONIC_TERMS), 0)
}
func propagatorConfigStartZONAL_HARMONIC_TERMSVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func propagatorConfigEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
