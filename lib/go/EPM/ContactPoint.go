// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ContactPoint

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Information about a contact point
type ContactPoint struct {
	_tab flatbuffers.Table
}

func GetRootAsContactPoint(buf []byte, offset flatbuffers.UOffsetT) *ContactPoint {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ContactPoint{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsContactPoint(buf []byte, offset flatbuffers.UOffsetT) *ContactPoint {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ContactPoint{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ContactPoint) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ContactPoint) Table() flatbuffers.Table {
	return rcv._tab
}

/// Name of the contact point or person
func (rcv *ContactPoint) NAME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the contact point or person
/// Type of contact (e.g., customer service, technical support)
func (rcv *ContactPoint) CONTACT_TYPE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of contact (e.g., customer service, technical support)
/// Email address
func (rcv *ContactPoint) EMAIL() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Email address
/// Telephone number
func (rcv *ContactPoint) TELEPHONE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Telephone number
/// Available contact options (e.g., HearingImpairedSupported)
func (rcv *ContactPoint) CONTACT_OPTION() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Available contact options (e.g., HearingImpairedSupported)
/// Geographic area where the service is available
func (rcv *ContactPoint) AREA_SERVED() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geographic area where the service is available
/// Language available for communication
func (rcv *ContactPoint) AVAILABLE_LANGUAGE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Language available for communication
/// Country of the address
func (rcv *ContactPoint) ADDRESS_COUNTRY() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Country of the address
/// Region of the address (e.g., state or province)
func (rcv *ContactPoint) ADDRESS_REGION() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Region of the address (e.g., state or province)
/// Locality of the address (e.g., city or town)
func (rcv *ContactPoint) ADDRESS_LOCALITY() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Locality of the address (e.g., city or town)
/// Postal code of the address
func (rcv *ContactPoint) POSTAL_CODE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Postal code of the address
/// Street address
func (rcv *ContactPoint) STREET_ADDRESS() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Street address
/// Post office box number
func (rcv *ContactPoint) POST_OFFICE_BOX_NUMBER() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Post office box number
func ContactPointStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func ContactPointAddNAME(builder *flatbuffers.Builder, NAME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(NAME), 0)
}
func ContactPointAddCONTACT_TYPE(builder *flatbuffers.Builder, CONTACT_TYPE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(CONTACT_TYPE), 0)
}
func ContactPointAddEMAIL(builder *flatbuffers.Builder, EMAIL flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(EMAIL), 0)
}
func ContactPointAddTELEPHONE(builder *flatbuffers.Builder, TELEPHONE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(TELEPHONE), 0)
}
func ContactPointAddCONTACT_OPTION(builder *flatbuffers.Builder, CONTACT_OPTION flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(CONTACT_OPTION), 0)
}
func ContactPointAddAREA_SERVED(builder *flatbuffers.Builder, AREA_SERVED flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(AREA_SERVED), 0)
}
func ContactPointAddAVAILABLE_LANGUAGE(builder *flatbuffers.Builder, AVAILABLE_LANGUAGE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(AVAILABLE_LANGUAGE), 0)
}
func ContactPointAddADDRESS_COUNTRY(builder *flatbuffers.Builder, ADDRESS_COUNTRY flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(ADDRESS_COUNTRY), 0)
}
func ContactPointAddADDRESS_REGION(builder *flatbuffers.Builder, ADDRESS_REGION flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(ADDRESS_REGION), 0)
}
func ContactPointAddADDRESS_LOCALITY(builder *flatbuffers.Builder, ADDRESS_LOCALITY flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(ADDRESS_LOCALITY), 0)
}
func ContactPointAddPOSTAL_CODE(builder *flatbuffers.Builder, POSTAL_CODE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(POSTAL_CODE), 0)
}
func ContactPointAddSTREET_ADDRESS(builder *flatbuffers.Builder, STREET_ADDRESS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(STREET_ADDRESS), 0)
}
func ContactPointAddPOST_OFFICE_BOX_NUMBER(builder *flatbuffers.Builder, POST_OFFICE_BOX_NUMBER flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(POST_OFFICE_BOX_NUMBER), 0)
}
func ContactPointEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
