// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EPM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Entity Profile Message
type EPM struct {
	_tab flatbuffers.Table
}

func GetRootAsEPM(buf []byte, offset flatbuffers.UOffsetT) *EPM {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EPM{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEPM(buf []byte, offset flatbuffers.UOffsetT) *EPM {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EPM{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *EPM) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EPM) Table() flatbuffers.Table {
	return rcv._tab
}

/// Common name of the entity (person or organization)
func (rcv *EPM) NAME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Common name of the entity (person or organization)
/// Alternate names for the entity
func (rcv *EPM) ALTERNATE_NAMES(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EPM) ALTERNATE_NAMESLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Alternate names for the entity
/// Email address of the entity
func (rcv *EPM) EMAIL() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Email address of the entity
/// Telephone number of the entity
func (rcv *EPM) TELEPHONE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Telephone number of the entity
/// Cryptographic keys associated with the entity
func (rcv *EPM) KEYS(obj *CryptoKey, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *EPM) KEYSLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Cryptographic keys associated with the entity
/// Multiformat addresses associated with the entity
func (rcv *EPM) MULTIFORMAT_ADDRESS(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EPM) MULTIFORMAT_ADDRESSLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Multiformat addresses associated with the entity
func (rcv *EPM) AttributesType() SpecificAttributes {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return SpecificAttributes(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EPM) MutateAttributesType(n SpecificAttributes) bool {
	return rcv._tab.MutateByteSlot(16, byte(n))
}

/// Specific attributes for the entity, either Person or Organization
func (rcv *EPM) ATTRIBUTES(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

/// Specific attributes for the entity, either Person or Organization
func EPMStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func EPMAddNAME(builder *flatbuffers.Builder, NAME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(NAME), 0)
}
func EPMAddALTERNATE_NAMES(builder *flatbuffers.Builder, ALTERNATE_NAMES flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(ALTERNATE_NAMES), 0)
}
func EPMStartALTERNATE_NAMESVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EPMAddEMAIL(builder *flatbuffers.Builder, EMAIL flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(EMAIL), 0)
}
func EPMAddTELEPHONE(builder *flatbuffers.Builder, TELEPHONE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(TELEPHONE), 0)
}
func EPMAddKEYS(builder *flatbuffers.Builder, KEYS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(KEYS), 0)
}
func EPMStartKEYSVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EPMAddMULTIFORMAT_ADDRESS(builder *flatbuffers.Builder, MULTIFORMAT_ADDRESS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(MULTIFORMAT_ADDRESS), 0)
}
func EPMStartMULTIFORMAT_ADDRESSVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EPMAddAttributesType(builder *flatbuffers.Builder, attributesType SpecificAttributes) {
	builder.PrependByteSlot(6, byte(attributesType), 0)
}
func EPMAddATTRIBUTES(builder *flatbuffers.Builder, ATTRIBUTES flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(ATTRIBUTES), 0)
}
func EPMEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
