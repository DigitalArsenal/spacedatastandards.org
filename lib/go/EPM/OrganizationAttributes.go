// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OrganizationAttributes

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Specific attributes for an Organization
type OrganizationAttributes struct {
	_tab flatbuffers.Table
}

func GetRootAsOrganizationAttributes(buf []byte, offset flatbuffers.UOffsetT) *OrganizationAttributes {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OrganizationAttributes{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsOrganizationAttributes(buf []byte, offset flatbuffers.UOffsetT) *OrganizationAttributes {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OrganizationAttributes{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *OrganizationAttributes) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OrganizationAttributes) Table() flatbuffers.Table {
	return rcv._tab
}

/// Legal name of the organization
func (rcv *OrganizationAttributes) LEGAL_NAME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Legal name of the organization
func OrganizationAttributesStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func OrganizationAttributesAddLEGAL_NAME(builder *flatbuffers.Builder, LEGAL_NAME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(LEGAL_NAME), 0)
}
func OrganizationAttributesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
