// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EPM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Represents a component of a Distinguished Name (DN) in LDAP
type DNComponent struct {
	_tab flatbuffers.Table
}

func GetRootAsDNComponent(buf []byte, offset flatbuffers.UOffsetT) *DNComponent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DNComponent{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDNComponent(buf []byte, offset flatbuffers.UOffsetT) *DNComponent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DNComponent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DNComponent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DNComponent) Table() flatbuffers.Table {
	return rcv._tab
}

/// The type of the DN component
func (rcv *DNComponent) TYPE() LDIFAttributeType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return LDIFAttributeType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The type of the DN component
func (rcv *DNComponent) MutateTYPE(n LDIFAttributeType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

/// The value of the DN component
func (rcv *DNComponent) VALUE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The value of the DN component
func DNComponentStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DNComponentAddTYPE(builder *flatbuffers.Builder, TYPE LDIFAttributeType) {
	builder.PrependInt8Slot(0, int8(TYPE), 0)
}
func DNComponentAddVALUE(builder *flatbuffers.Builder, VALUE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(VALUE), 0)
}
func DNComponentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
