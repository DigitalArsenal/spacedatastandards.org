// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OBSERVERLocationReferenceFrame

import "strconv"

type OBSERVERLocationReferenceFrame int8

const (
	/// Earth Mean Equator and Equinox of J2000
	OBSERVERLocationReferenceFrameEME2000  OBSERVERLocationReferenceFrame = 0
	///  Geocentric Celestial Reference Frame
	OBSERVERLocationReferenceFrameGCRF     OBSERVERLocationReferenceFrame = 1
	/// Greenwich Rotating Coordinates
	OBSERVERLocationReferenceFrameGRC      OBSERVERLocationReferenceFrame = 2
	/// International Celestial Reference Frame
	OBSERVERLocationReferenceFrameICRF     OBSERVERLocationReferenceFrame = 3
	/// International Terrestrial Reference Frame 2000
	OBSERVERLocationReferenceFrameITRF2000 OBSERVERLocationReferenceFrame = 4
	/// International Terrestrial Reference Frame 1993
	OBSERVERLocationReferenceFrameITRF93   OBSERVERLocationReferenceFrame = 5
	/// International Terrestrial Reference Frame 1997
	OBSERVERLocationReferenceFrameITRF97   OBSERVERLocationReferenceFrame = 6
	/// Mars Centered Inertial
	OBSERVERLocationReferenceFrameMCI      OBSERVERLocationReferenceFrame = 7
	/// True of Date, Rotating
	OBSERVERLocationReferenceFrameTDR      OBSERVERLocationReferenceFrame = 8
	/// True Equator Mean Equinox
	OBSERVERLocationReferenceFrameTEME     OBSERVERLocationReferenceFrame = 9
	/// True of Date
	OBSERVERLocationReferenceFrameTOD      OBSERVERLocationReferenceFrame = 10
	/// Vehicle-Body-Local-Horizontal (VVLH): An orbit reference frame with X-axis pointing from the center of the central body to the vehicle, Z-axis oppoOBSERVER to the orbital angular momentum vector, and Y-axis completing the right-handed system.
	OBSERVERLocationReferenceFrameVVLH     OBSERVERLocationReferenceFrame = 11
	/// Radial-Intrack-Crosstrack (RIC): A local orbital reference frame with the radial axis pointing away from the central body, the intrack axis in the direction of motion, and the crosstrack axis completing the right-handed system.
	OBSERVERLocationReferenceFrameRIC      OBSERVERLocationReferenceFrame = 12
	/// Vehicle-Local-Vertical-Local-Horizontal (VLVH): An orbit reference frame similar to VVLH, often used in close proximity operations or surface-oriented missions.
	OBSERVERLocationReferenceFrameVLVH     OBSERVERLocationReferenceFrame = 13
	/// East-North-Up (ENU): A terrestrial reference frame where the X-axis points East, the Y-axis points North, and the Z-axis points Up (away from the center of the Earth).
	OBSERVERLocationReferenceFrameENU      OBSERVERLocationReferenceFrame = 14
	/// North-East-Down (NED): Similar to ENU, but with axes oriented Northward, Eastward, and Downward towards the Earth's center.
	OBSERVERLocationReferenceFrameNED      OBSERVERLocationReferenceFrame = 15
	/// Local Tangent Plane (LTP): A local, surface-fixed reference frame often used for terrestrial applications, aligned with the local horizon.
	OBSERVERLocationReferenceFrameLTP      OBSERVERLocationReferenceFrame = 16
	/// Local Vertical-Local Horizontal (LVLH): An orbit reference frame with the Z-axis pointing towards the center of the central body (oppoOBSERVER to local vertical), the X-axis in the velocity direction (local horizontal), and the Y-axis completing the right-hand system.
	OBSERVERLocationReferenceFrameLVLH     OBSERVERLocationReferenceFrame = 17
	/// Polar-North-East (PNE): A variation of local coordinate systems typically used in polar regions, with axes aligned toward the geographic North Pole, Eastward, and perpendicular to the Earth's surface.
	OBSERVERLocationReferenceFramePNE      OBSERVERLocationReferenceFrame = 18
	/// Body-Fixed Reference Frame (BRF): A reference frame fixed to the body of a spacecraft or celestial object, oriented according to the body's principal axes.
	OBSERVERLocationReferenceFrameBRF      OBSERVERLocationReferenceFrame = 19
)

var EnumNamesOBSERVERLocationReferenceFrame = map[OBSERVERLocationReferenceFrame]string{
	OBSERVERLocationReferenceFrameEME2000:  "EME2000",
	OBSERVERLocationReferenceFrameGCRF:     "GCRF",
	OBSERVERLocationReferenceFrameGRC:      "GRC",
	OBSERVERLocationReferenceFrameICRF:     "ICRF",
	OBSERVERLocationReferenceFrameITRF2000: "ITRF2000",
	OBSERVERLocationReferenceFrameITRF93:   "ITRF93",
	OBSERVERLocationReferenceFrameITRF97:   "ITRF97",
	OBSERVERLocationReferenceFrameMCI:      "MCI",
	OBSERVERLocationReferenceFrameTDR:      "TDR",
	OBSERVERLocationReferenceFrameTEME:     "TEME",
	OBSERVERLocationReferenceFrameTOD:      "TOD",
	OBSERVERLocationReferenceFrameVVLH:     "VVLH",
	OBSERVERLocationReferenceFrameRIC:      "RIC",
	OBSERVERLocationReferenceFrameVLVH:     "VLVH",
	OBSERVERLocationReferenceFrameENU:      "ENU",
	OBSERVERLocationReferenceFrameNED:      "NED",
	OBSERVERLocationReferenceFrameLTP:      "LTP",
	OBSERVERLocationReferenceFrameLVLH:     "LVLH",
	OBSERVERLocationReferenceFramePNE:      "PNE",
	OBSERVERLocationReferenceFrameBRF:      "BRF",
}

var EnumValuesOBSERVERLocationReferenceFrame = map[string]OBSERVERLocationReferenceFrame{
	"EME2000":  OBSERVERLocationReferenceFrameEME2000,
	"GCRF":     OBSERVERLocationReferenceFrameGCRF,
	"GRC":      OBSERVERLocationReferenceFrameGRC,
	"ICRF":     OBSERVERLocationReferenceFrameICRF,
	"ITRF2000": OBSERVERLocationReferenceFrameITRF2000,
	"ITRF93":   OBSERVERLocationReferenceFrameITRF93,
	"ITRF97":   OBSERVERLocationReferenceFrameITRF97,
	"MCI":      OBSERVERLocationReferenceFrameMCI,
	"TDR":      OBSERVERLocationReferenceFrameTDR,
	"TEME":     OBSERVERLocationReferenceFrameTEME,
	"TOD":      OBSERVERLocationReferenceFrameTOD,
	"VVLH":     OBSERVERLocationReferenceFrameVVLH,
	"RIC":      OBSERVERLocationReferenceFrameRIC,
	"VLVH":     OBSERVERLocationReferenceFrameVLVH,
	"ENU":      OBSERVERLocationReferenceFrameENU,
	"NED":      OBSERVERLocationReferenceFrameNED,
	"LTP":      OBSERVERLocationReferenceFrameLTP,
	"LVLH":     OBSERVERLocationReferenceFrameLVLH,
	"PNE":      OBSERVERLocationReferenceFramePNE,
	"BRF":      OBSERVERLocationReferenceFrameBRF,
}

func (v OBSERVERLocationReferenceFrame) String() string {
	if s, ok := EnumNamesOBSERVERLocationReferenceFrame[v]; ok {
		return s
	}
	return "OBSERVERLocationReferenceFrame(" + strconv.FormatInt(int64(v), 10) + ")"
}
