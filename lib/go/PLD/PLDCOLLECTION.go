// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package PLD

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Collection of Payload Information Records
type PLDCOLLECTION struct {
	_tab flatbuffers.Table
}

func GetRootAsPLDCOLLECTION(buf []byte, offset flatbuffers.UOffsetT) *PLDCOLLECTION {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PLDCOLLECTION{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPLDCOLLECTION(buf []byte, offset flatbuffers.UOffsetT) *PLDCOLLECTION {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PLDCOLLECTION{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PLDCOLLECTION) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PLDCOLLECTION) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PLDCOLLECTION) RECORDS(obj *PLD, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *PLDCOLLECTION) RECORDSLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func PLDCOLLECTIONStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func PLDCOLLECTIONAddRECORDS(builder *flatbuffers.Builder, RECORDS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(RECORDS), 0)
}
func PLDCOLLECTIONStartRECORDSVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PLDCOLLECTIONEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
