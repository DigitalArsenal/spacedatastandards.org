// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LDM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Stokes parameters, representing different aspects of polarization
type StokesParameters struct {
	_tab flatbuffers.Table
}

func GetRootAsStokesParameters(buf []byte, offset flatbuffers.UOffsetT) *StokesParameters {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StokesParameters{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStokesParameters(buf []byte, offset flatbuffers.UOffsetT) *StokesParameters {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StokesParameters{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *StokesParameters) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StokesParameters) Table() flatbuffers.Table {
	return rcv._tab
}

/// Intensity
func (rcv *StokesParameters) I() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Intensity
func (rcv *StokesParameters) MutateI(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// Linear polarization
func (rcv *StokesParameters) Q() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Linear polarization
func (rcv *StokesParameters) MutateQ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// Another linear polarization, orthogonal to Q
func (rcv *StokesParameters) U() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Another linear polarization, orthogonal to Q
func (rcv *StokesParameters) MutateU(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// Circular polarization
func (rcv *StokesParameters) V() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Circular polarization
func (rcv *StokesParameters) MutateV(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func StokesParametersStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func StokesParametersAddI(builder *flatbuffers.Builder, I float64) {
	builder.PrependFloat64Slot(0, I, 0.0)
}
func StokesParametersAddQ(builder *flatbuffers.Builder, Q float64) {
	builder.PrependFloat64Slot(1, Q, 0.0)
}
func StokesParametersAddU(builder *flatbuffers.Builder, U float64) {
	builder.PrependFloat64Slot(2, U, 0.0)
}
func StokesParametersAddV(builder *flatbuffers.Builder, V float64) {
	builder.PrependFloat64Slot(3, V, 0.0)
}
func StokesParametersEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
