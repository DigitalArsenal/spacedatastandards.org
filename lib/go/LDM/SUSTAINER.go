// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LDM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Sustainer Details
type SUSTAINER struct {
	_tab flatbuffers.Table
}

func GetRootAsSUSTAINER(buf []byte, offset flatbuffers.UOffsetT) *SUSTAINER {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SUSTAINER{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSUSTAINER(buf []byte, offset flatbuffers.UOffsetT) *SUSTAINER {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SUSTAINER{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SUSTAINER) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SUSTAINER) Table() flatbuffers.Table {
	return rcv._tab
}

/// Name of the Sustainer
func (rcv *SUSTAINER) SUSTAINER_NAME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the Sustainer
/// Thrust Produced by the Sustainer (in Newtons)
func (rcv *SUSTAINER) THRUST() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Thrust Produced by the Sustainer (in Newtons)
func (rcv *SUSTAINER) MutateTHRUST(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// Duration of the Burn (in Seconds)
func (rcv *SUSTAINER) BURN_DURATION() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Duration of the Burn (in Seconds)
func (rcv *SUSTAINER) MutateBURN_DURATION(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func SUSTAINERStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SUSTAINERAddSUSTAINER_NAME(builder *flatbuffers.Builder, SUSTAINER_NAME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(SUSTAINER_NAME), 0)
}
func SUSTAINERAddTHRUST(builder *flatbuffers.Builder, THRUST float64) {
	builder.PrependFloat64Slot(1, THRUST, 0.0)
}
func SUSTAINERAddBURN_DURATION(builder *flatbuffers.Builder, BURN_DURATION float64) {
	builder.PrependFloat64Slot(2, BURN_DURATION, 0.0)
}
func SUSTAINEREnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
