// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LDM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Geometry table with information about geometric properties
type Geometry struct {
	_tab flatbuffers.Table
}

func GetRootAsGeometry(buf []byte, offset flatbuffers.UOffsetT) *Geometry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Geometry{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsGeometry(buf []byte, offset flatbuffers.UOffsetT) *Geometry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Geometry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Geometry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Geometry) Table() flatbuffers.Table {
	return rcv._tab
}

/// Type of geometry
func (rcv *Geometry) GEOMETRY_TYPE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of geometry
/// Coordinates of the geometry
func (rcv *Geometry) COORDINATES(j int) float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *Geometry) COORDINATESLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Coordinates of the geometry
func (rcv *Geometry) MutateCOORDINATES(j int, n float32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func GeometryStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func GeometryAddGEOMETRY_TYPE(builder *flatbuffers.Builder, GEOMETRY_TYPE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(GEOMETRY_TYPE), 0)
}
func GeometryAddCOORDINATES(builder *flatbuffers.Builder, COORDINATES flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(COORDINATES), 0)
}
func GeometryStartCOORDINATESVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GeometryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
