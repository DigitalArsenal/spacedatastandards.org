// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LDM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Engine Details
type ENGINE struct {
	_tab flatbuffers.Table
}

func GetRootAsENGINE(buf []byte, offset flatbuffers.UOffsetT) *ENGINE {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ENGINE{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsENGINE(buf []byte, offset flatbuffers.UOffsetT) *ENGINE {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ENGINE{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ENGINE) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ENGINE) Table() flatbuffers.Table {
	return rcv._tab
}

/// Engine Name
func (rcv *ENGINE) ENGINE_NAME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Engine Name
/// Type of Engine
func (rcv *ENGINE) TYPE() ENGINE_TYPE {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ENGINE_TYPE(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Type of Engine
func (rcv *ENGINE) MutateTYPE(n ENGINE_TYPE) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

/// Thrust Produced by the Engine (in Newtons)
func (rcv *ENGINE) THRUST() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Thrust Produced by the Engine (in Newtons)
func (rcv *ENGINE) MutateTHRUST(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func ENGINEStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ENGINEAddENGINE_NAME(builder *flatbuffers.Builder, ENGINE_NAME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ENGINE_NAME), 0)
}
func ENGINEAddTYPE(builder *flatbuffers.Builder, TYPE ENGINE_TYPE) {
	builder.PrependInt8Slot(1, int8(TYPE), 0)
}
func ENGINEAddTHRUST(builder *flatbuffers.Builder, THRUST float64) {
	builder.PrependFloat64Slot(2, THRUST, 0.0)
}
func ENGINEEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
