// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LDM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Site Information Message
type SIT struct {
	_tab flatbuffers.Table
}

func GetRootAsSIT(buf []byte, offset flatbuffers.UOffsetT) *SIT {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SIT{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSIT(buf []byte, offset flatbuffers.UOffsetT) *SIT {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SIT{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SIT) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SIT) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier for the site, BE_NUMBER
func (rcv *SIT) ID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier for the site, BE_NUMBER
/// Name of the site
func (rcv *SIT) NAME() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the site
/// Abbreviation
func (rcv *SIT) ABBREVIATION() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Abbreviation
/// Site type as defined in SiteType enum
func (rcv *SIT) SITE_TYPE() SiteType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return SiteType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Site type as defined in SiteType enum
func (rcv *SIT) MutateSITE_TYPE(n SiteType) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

/// Site type CATCODE
func (rcv *SIT) CATCODE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Site type CATCODE
/// Network identifier
func (rcv *SIT) NETWORK() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Network identifier
/// Latitude of the site
func (rcv *SIT) LATITUDE() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Latitude of the site
func (rcv *SIT) MutateLATITUDE(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

/// Longitude of the site
func (rcv *SIT) LONGITUDE() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Longitude of the site
func (rcv *SIT) MutateLONGITUDE(n float32) bool {
	return rcv._tab.MutateFloat32Slot(18, n)
}

/// Altitude of the site
func (rcv *SIT) ALTITUDE() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Altitude of the site
func (rcv *SIT) MutateALTITUDE(n float32) bool {
	return rcv._tab.MutateFloat32Slot(20, n)
}

/// Geometry of the site
func (rcv *SIT) GEOMETRY(obj *Geometry) *Geometry {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Geometry)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Geometry of the site
/// Center point geometry coordinates
func (rcv *SIT) CENTER_POINT_GEOMETRY(j int) float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *SIT) CENTER_POINT_GEOMETRYLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Center point geometry coordinates
func (rcv *SIT) MutateCENTER_POINT_GEOMETRY(j int, n float32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

/// Classification marking of the site
func (rcv *SIT) CLASSIFICATION() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the site
/// CTR ISO 3166 Numeric code as string
func (rcv *SIT) CTR_ID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// CTR ISO 3166 Numeric code as string
/// Identifier of the user who created the site data
func (rcv *SIT) CREATED_BY() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the user who created the site data
/// Description of the site
func (rcv *SIT) DESCRIPTION() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the site
/// URL for the 3D model of the site
func (rcv *SIT) MODEL_URL() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// URL for the 3D model of the site
/// Source of the site data
func (rcv *SIT) SOURCE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the site data
/// Indicates if the site is taskable
func (rcv *SIT) TASKABLE() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indicates if the site is taskable
func (rcv *SIT) MutateTASKABLE(n bool) bool {
	return rcv._tab.MutateBoolSlot(38, n)
}

/// Operational status of the site (e.g., active, inactive, under construction)
func (rcv *SIT) OPERATIONAL_STATUS() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Operational status of the site (e.g., active, inactive, under construction)
/// Date of establishment
func (rcv *SIT) ESTABLISHMENT_DATE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date of establishment
/// Contact information for the site
func (rcv *SIT) CONTACT_INFO() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Contact information for the site
/// Environmental impact or considerations
func (rcv *SIT) ENVIRONMENTAL_IMPACT() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Environmental impact or considerations
/// Accessibility and infrastructure details
func (rcv *SIT) ACCESSIBILITY_INFRA() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Accessibility and infrastructure details
/// Vector of Integrated Devices (IDM)
func (rcv *SIT) INTEGRATED_DEVICES(obj *IDM, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SIT) INTEGRATED_DEVICESLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Vector of Integrated Devices (IDM)
func SITStart(builder *flatbuffers.Builder) {
	builder.StartObject(24)
}
func SITAddID(builder *flatbuffers.Builder, ID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ID), 0)
}
func SITAddNAME(builder *flatbuffers.Builder, NAME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(NAME), 0)
}
func SITAddABBREVIATION(builder *flatbuffers.Builder, ABBREVIATION flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(ABBREVIATION), 0)
}
func SITAddSITE_TYPE(builder *flatbuffers.Builder, SITE_TYPE SiteType) {
	builder.PrependInt8Slot(3, int8(SITE_TYPE), 0)
}
func SITAddCATCODE(builder *flatbuffers.Builder, CATCODE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(CATCODE), 0)
}
func SITAddNETWORK(builder *flatbuffers.Builder, NETWORK flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(NETWORK), 0)
}
func SITAddLATITUDE(builder *flatbuffers.Builder, LATITUDE float32) {
	builder.PrependFloat32Slot(6, LATITUDE, 0.0)
}
func SITAddLONGITUDE(builder *flatbuffers.Builder, LONGITUDE float32) {
	builder.PrependFloat32Slot(7, LONGITUDE, 0.0)
}
func SITAddALTITUDE(builder *flatbuffers.Builder, ALTITUDE float32) {
	builder.PrependFloat32Slot(8, ALTITUDE, 0.0)
}
func SITAddGEOMETRY(builder *flatbuffers.Builder, GEOMETRY flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(GEOMETRY), 0)
}
func SITAddCENTER_POINT_GEOMETRY(builder *flatbuffers.Builder, CENTER_POINT_GEOMETRY flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(CENTER_POINT_GEOMETRY), 0)
}
func SITStartCENTER_POINT_GEOMETRYVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SITAddCLASSIFICATION(builder *flatbuffers.Builder, CLASSIFICATION flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(CLASSIFICATION), 0)
}
func SITAddCTR_ID(builder *flatbuffers.Builder, CTR_ID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(CTR_ID), 0)
}
func SITAddCREATED_BY(builder *flatbuffers.Builder, CREATED_BY flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(CREATED_BY), 0)
}
func SITAddDESCRIPTION(builder *flatbuffers.Builder, DESCRIPTION flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(DESCRIPTION), 0)
}
func SITAddMODEL_URL(builder *flatbuffers.Builder, MODEL_URL flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(MODEL_URL), 0)
}
func SITAddSOURCE(builder *flatbuffers.Builder, SOURCE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(SOURCE), 0)
}
func SITAddTASKABLE(builder *flatbuffers.Builder, TASKABLE bool) {
	builder.PrependBoolSlot(17, TASKABLE, false)
}
func SITAddOPERATIONAL_STATUS(builder *flatbuffers.Builder, OPERATIONAL_STATUS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(OPERATIONAL_STATUS), 0)
}
func SITAddESTABLISHMENT_DATE(builder *flatbuffers.Builder, ESTABLISHMENT_DATE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(ESTABLISHMENT_DATE), 0)
}
func SITAddCONTACT_INFO(builder *flatbuffers.Builder, CONTACT_INFO flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(CONTACT_INFO), 0)
}
func SITAddENVIRONMENTAL_IMPACT(builder *flatbuffers.Builder, ENVIRONMENTAL_IMPACT flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(ENVIRONMENTAL_IMPACT), 0)
}
func SITAddACCESSIBILITY_INFRA(builder *flatbuffers.Builder, ACCESSIBILITY_INFRA flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(ACCESSIBILITY_INFRA), 0)
}
func SITAddINTEGRATED_DEVICES(builder *flatbuffers.Builder, INTEGRATED_DEVICES flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(INTEGRATED_DEVICES), 0)
}
func SITStartINTEGRATED_DEVICESVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SITEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
