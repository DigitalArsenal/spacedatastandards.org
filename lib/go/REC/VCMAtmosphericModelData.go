// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package REC

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// VCM Atmospheric and Perturbation Model Data
type VCMAtmosphericModelData struct {
	_tab flatbuffers.Table
}

func GetRootAsVCMAtmosphericModelData(buf []byte, offset flatbuffers.UOffsetT) *VCMAtmosphericModelData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &VCMAtmosphericModelData{}
	x.Init(buf, n+offset)
	return x
}

func FinishVCMAtmosphericModelDataBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsVCMAtmosphericModelData(buf []byte, offset flatbuffers.UOffsetT) *VCMAtmosphericModelData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &VCMAtmosphericModelData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedVCMAtmosphericModelDataBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *VCMAtmosphericModelData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *VCMAtmosphericModelData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *VCMAtmosphericModelData) ATMOSPHERIC_MODEL() atmosphericModel {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return atmosphericModel(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *VCMAtmosphericModelData) MutateATMOSPHERIC_MODEL(n atmosphericModel) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *VCMAtmosphericModelData) GEOPOTENTIAL_MODEL() geopotentialModel {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return geopotentialModel(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *VCMAtmosphericModelData) MutateGEOPOTENTIAL_MODEL(n geopotentialModel) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func (rcv *VCMAtmosphericModelData) LUNAR_SOLAR_PERTURBATION() perturbationStatus {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return perturbationStatus(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *VCMAtmosphericModelData) MutateLUNAR_SOLAR_PERTURBATION(n perturbationStatus) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func (rcv *VCMAtmosphericModelData) LUNAR_PERTURBATION_MODEL() lunarPerturbationModel {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return lunarPerturbationModel(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *VCMAtmosphericModelData) MutateLUNAR_PERTURBATION_MODEL(n lunarPerturbationModel) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func (rcv *VCMAtmosphericModelData) SOLAR_PERTURBATION_MODEL() solarPerturbationModel {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return solarPerturbationModel(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *VCMAtmosphericModelData) MutateSOLAR_PERTURBATION_MODEL(n solarPerturbationModel) bool {
	return rcv._tab.MutateInt8Slot(12, int8(n))
}

func (rcv *VCMAtmosphericModelData) SOLAR_RADIATION_PRESSURE() perturbationStatus {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return perturbationStatus(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *VCMAtmosphericModelData) MutateSOLAR_RADIATION_PRESSURE(n perturbationStatus) bool {
	return rcv._tab.MutateInt8Slot(14, int8(n))
}

func (rcv *VCMAtmosphericModelData) SRP_MODEL() solarRadiationPressureModel {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return solarRadiationPressureModel(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *VCMAtmosphericModelData) MutateSRP_MODEL(n solarRadiationPressureModel) bool {
	return rcv._tab.MutateInt8Slot(16, int8(n))
}

func (rcv *VCMAtmosphericModelData) RESONANCE_MODEL() resonanceModel {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return resonanceModel(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *VCMAtmosphericModelData) MutateRESONANCE_MODEL(n resonanceModel) bool {
	return rcv._tab.MutateInt8Slot(18, int8(n))
}

func VCMAtmosphericModelDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func VCMAtmosphericModelDataAddATMOSPHERIC_MODEL(builder *flatbuffers.Builder, ATMOSPHERIC_MODEL atmosphericModel) {
	builder.PrependInt8Slot(0, int8(ATMOSPHERIC_MODEL), 0)
}
func VCMAtmosphericModelDataAddGEOPOTENTIAL_MODEL(builder *flatbuffers.Builder, GEOPOTENTIAL_MODEL geopotentialModel) {
	builder.PrependInt8Slot(1, int8(GEOPOTENTIAL_MODEL), 0)
}
func VCMAtmosphericModelDataAddLUNAR_SOLAR_PERTURBATION(builder *flatbuffers.Builder, LUNAR_SOLAR_PERTURBATION perturbationStatus) {
	builder.PrependInt8Slot(2, int8(LUNAR_SOLAR_PERTURBATION), 0)
}
func VCMAtmosphericModelDataAddLUNAR_PERTURBATION_MODEL(builder *flatbuffers.Builder, LUNAR_PERTURBATION_MODEL lunarPerturbationModel) {
	builder.PrependInt8Slot(3, int8(LUNAR_PERTURBATION_MODEL), 0)
}
func VCMAtmosphericModelDataAddSOLAR_PERTURBATION_MODEL(builder *flatbuffers.Builder, SOLAR_PERTURBATION_MODEL solarPerturbationModel) {
	builder.PrependInt8Slot(4, int8(SOLAR_PERTURBATION_MODEL), 0)
}
func VCMAtmosphericModelDataAddSOLAR_RADIATION_PRESSURE(builder *flatbuffers.Builder, SOLAR_RADIATION_PRESSURE perturbationStatus) {
	builder.PrependInt8Slot(5, int8(SOLAR_RADIATION_PRESSURE), 0)
}
func VCMAtmosphericModelDataAddSRP_MODEL(builder *flatbuffers.Builder, SRP_MODEL solarRadiationPressureModel) {
	builder.PrependInt8Slot(6, int8(SRP_MODEL), 0)
}
func VCMAtmosphericModelDataAddRESONANCE_MODEL(builder *flatbuffers.Builder, RESONANCE_MODEL resonanceModel) {
	builder.PrependInt8Slot(7, int8(RESONANCE_MODEL), 0)
}
func VCMAtmosphericModelDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
