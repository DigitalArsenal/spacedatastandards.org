// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package REC

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// VCM State Vector (position and velocity)
type VCMStateVector struct {
	_tab flatbuffers.Table
}

func GetRootAsVCMStateVector(buf []byte, offset flatbuffers.UOffsetT) *VCMStateVector {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &VCMStateVector{}
	x.Init(buf, n+offset)
	return x
}

func FinishVCMStateVectorBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsVCMStateVector(buf []byte, offset flatbuffers.UOffsetT) *VCMStateVector {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &VCMStateVector{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedVCMStateVectorBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *VCMStateVector) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *VCMStateVector) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *VCMStateVector) EPOCH() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *VCMStateVector) X() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *VCMStateVector) MutateX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *VCMStateVector) Y() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *VCMStateVector) MutateY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *VCMStateVector) Z() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *VCMStateVector) MutateZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *VCMStateVector) X_DOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *VCMStateVector) MutateX_DOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func (rcv *VCMStateVector) Y_DOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *VCMStateVector) MutateY_DOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

func (rcv *VCMStateVector) Z_DOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *VCMStateVector) MutateZ_DOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

func VCMStateVectorStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func VCMStateVectorAddEPOCH(builder *flatbuffers.Builder, EPOCH flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(EPOCH), 0)
}
func VCMStateVectorAddX(builder *flatbuffers.Builder, X float64) {
	builder.PrependFloat64Slot(1, X, 0.0)
}
func VCMStateVectorAddY(builder *flatbuffers.Builder, Y float64) {
	builder.PrependFloat64Slot(2, Y, 0.0)
}
func VCMStateVectorAddZ(builder *flatbuffers.Builder, Z float64) {
	builder.PrependFloat64Slot(3, Z, 0.0)
}
func VCMStateVectorAddX_DOT(builder *flatbuffers.Builder, X_DOT float64) {
	builder.PrependFloat64Slot(4, X_DOT, 0.0)
}
func VCMStateVectorAddY_DOT(builder *flatbuffers.Builder, Y_DOT float64) {
	builder.PrependFloat64Slot(5, Y_DOT, 0.0)
}
func VCMStateVectorAddZ_DOT(builder *flatbuffers.Builder, Z_DOT float64) {
	builder.PrependFloat64Slot(6, Z_DOT, 0.0)
}
func VCMStateVectorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
