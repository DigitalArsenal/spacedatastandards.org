// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package REC

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Keplerian Elements
type keplerianElements struct {
	_tab flatbuffers.Table
}

func GetRootAskeplerianElements(buf []byte, offset flatbuffers.UOffsetT) *keplerianElements {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &keplerianElements{}
	x.Init(buf, n+offset)
	return x
}

func FinishkeplerianElementsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAskeplerianElements(buf []byte, offset flatbuffers.UOffsetT) *keplerianElements {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &keplerianElements{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedkeplerianElementsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *keplerianElements) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *keplerianElements) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *keplerianElements) SEMI_MAJOR_AXIS() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *keplerianElements) MutateSEMI_MAJOR_AXIS(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

func (rcv *keplerianElements) ECCENTRICITY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *keplerianElements) MutateECCENTRICITY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *keplerianElements) INCLINATION() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *keplerianElements) MutateINCLINATION(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *keplerianElements) RA_OF_ASC_NODE() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *keplerianElements) MutateRA_OF_ASC_NODE(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *keplerianElements) ARG_OF_PERICENTER() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *keplerianElements) MutateARG_OF_PERICENTER(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func (rcv *keplerianElements) ANOMALY_TYPE() anomalyType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return anomalyType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *keplerianElements) MutateANOMALY_TYPE(n anomalyType) bool {
	return rcv._tab.MutateInt8Slot(14, int8(n))
}

func (rcv *keplerianElements) ANOMALY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *keplerianElements) MutateANOMALY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

func keplerianElementsStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func keplerianElementsAddSEMI_MAJOR_AXIS(builder *flatbuffers.Builder, SEMI_MAJOR_AXIS float64) {
	builder.PrependFloat64Slot(0, SEMI_MAJOR_AXIS, 0.0)
}
func keplerianElementsAddECCENTRICITY(builder *flatbuffers.Builder, ECCENTRICITY float64) {
	builder.PrependFloat64Slot(1, ECCENTRICITY, 0.0)
}
func keplerianElementsAddINCLINATION(builder *flatbuffers.Builder, INCLINATION float64) {
	builder.PrependFloat64Slot(2, INCLINATION, 0.0)
}
func keplerianElementsAddRA_OF_ASC_NODE(builder *flatbuffers.Builder, RA_OF_ASC_NODE float64) {
	builder.PrependFloat64Slot(3, RA_OF_ASC_NODE, 0.0)
}
func keplerianElementsAddARG_OF_PERICENTER(builder *flatbuffers.Builder, ARG_OF_PERICENTER float64) {
	builder.PrependFloat64Slot(4, ARG_OF_PERICENTER, 0.0)
}
func keplerianElementsAddANOMALY_TYPE(builder *flatbuffers.Builder, ANOMALY_TYPE anomalyType) {
	builder.PrependInt8Slot(5, int8(ANOMALY_TYPE), 0)
}
func keplerianElementsAddANOMALY(builder *flatbuffers.Builder, ANOMALY float64) {
	builder.PrependFloat64Slot(6, ANOMALY, 0.0)
}
func keplerianElementsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
