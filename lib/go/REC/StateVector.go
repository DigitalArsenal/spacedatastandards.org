// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package REC

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StateVector struct {
	_tab flatbuffers.Table
}

func GetRootAsStateVector(buf []byte, offset flatbuffers.UOffsetT) *StateVector {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StateVector{}
	x.Init(buf, n+offset)
	return x
}

func FinishStateVectorBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsStateVector(buf []byte, offset flatbuffers.UOffsetT) *StateVector {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StateVector{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedStateVectorBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *StateVector) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StateVector) Table() flatbuffers.Table {
	return rcv._tab
}

/// Epoch of the state vector.
func (rcv *StateVector) EPOCH() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Epoch of the state vector.
/// X component of position in the specified reference frame.
func (rcv *StateVector) X() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// X component of position in the specified reference frame.
func (rcv *StateVector) MutateX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// Y component of position.
func (rcv *StateVector) Y() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Y component of position.
func (rcv *StateVector) MutateY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// Z component of position.
func (rcv *StateVector) Z() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Z component of position.
func (rcv *StateVector) MutateZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// X component of velocity.
func (rcv *StateVector) X_DOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// X component of velocity.
func (rcv *StateVector) MutateX_DOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Y component of velocity.
func (rcv *StateVector) Y_DOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Y component of velocity.
func (rcv *StateVector) MutateY_DOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Z component of velocity.
func (rcv *StateVector) Z_DOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Z component of velocity.
func (rcv *StateVector) MutateZ_DOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// X component of acceleration.
func (rcv *StateVector) X_DDOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// X component of acceleration.
func (rcv *StateVector) MutateX_DDOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Y component of acceleration.
func (rcv *StateVector) Y_DDOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Y component of acceleration.
func (rcv *StateVector) MutateY_DDOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Z component of acceleration.
func (rcv *StateVector) Z_DDOT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Z component of acceleration.
func (rcv *StateVector) MutateZ_DDOT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

func StateVectorStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func StateVectorAddEPOCH(builder *flatbuffers.Builder, EPOCH flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(EPOCH), 0)
}
func StateVectorAddX(builder *flatbuffers.Builder, X float64) {
	builder.PrependFloat64Slot(1, X, 0.0)
}
func StateVectorAddY(builder *flatbuffers.Builder, Y float64) {
	builder.PrependFloat64Slot(2, Y, 0.0)
}
func StateVectorAddZ(builder *flatbuffers.Builder, Z float64) {
	builder.PrependFloat64Slot(3, Z, 0.0)
}
func StateVectorAddX_DOT(builder *flatbuffers.Builder, X_DOT float64) {
	builder.PrependFloat64Slot(4, X_DOT, 0.0)
}
func StateVectorAddY_DOT(builder *flatbuffers.Builder, Y_DOT float64) {
	builder.PrependFloat64Slot(5, Y_DOT, 0.0)
}
func StateVectorAddZ_DOT(builder *flatbuffers.Builder, Z_DOT float64) {
	builder.PrependFloat64Slot(6, Z_DOT, 0.0)
}
func StateVectorAddX_DDOT(builder *flatbuffers.Builder, X_DDOT float64) {
	builder.PrependFloat64Slot(7, X_DDOT, 0.0)
}
func StateVectorAddY_DDOT(builder *flatbuffers.Builder, Y_DDOT float64) {
	builder.PrependFloat64Slot(8, Y_DDOT, 0.0)
}
func StateVectorAddZ_DDOT(builder *flatbuffers.Builder, Z_DDOT float64) {
	builder.PrependFloat64Slot(9, Z_DDOT, 0.0)
}
func StateVectorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
