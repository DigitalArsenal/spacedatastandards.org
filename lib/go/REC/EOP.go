// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package REC

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Earth Orientation Parameters
type EOP struct {
	_tab flatbuffers.Table
}

const EOPIdentifier = "$EOP"

func GetRootAsEOP(buf []byte, offset flatbuffers.UOffsetT) *EOP {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EOP{}
	x.Init(buf, n+offset)
	return x
}

func FinishEOPBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EOPIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EOPBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EOPIdentifier)
}

func GetSizePrefixedRootAsEOP(buf []byte, offset flatbuffers.UOffsetT) *EOP {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EOP{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEOPBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EOPIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEOPBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EOPIdentifier)
}

func (rcv *EOP) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EOP) Table() flatbuffers.Table {
	return rcv._tab
}

/// Date in ISO 8601 format
func (rcv *EOP) DATE() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date in ISO 8601 format
/// Modified Julian Date
func (rcv *EOP) MJD() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Modified Julian Date
func (rcv *EOP) MutateMJD(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

/// x pole coordinate in arcseconds
func (rcv *EOP) X() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// x pole coordinate in arcseconds
func (rcv *EOP) MutateX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

/// y pole coordinate in arcseconds
func (rcv *EOP) Y() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// y pole coordinate in arcseconds
func (rcv *EOP) MutateY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

/// UT1-UTC in seconds
func (rcv *EOP) UT1_MINUS_UTC() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// UT1-UTC in seconds
func (rcv *EOP) MutateUT1_MINUS_UTC(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

/// Length of Day correction in seconds
func (rcv *EOP) LOD() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Length of Day correction in seconds
func (rcv *EOP) MutateLOD(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

/// Nutation correction in longitude (δΔψ) in arcseconds
func (rcv *EOP) DPSI() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Nutation correction in longitude (δΔψ) in arcseconds
func (rcv *EOP) MutateDPSI(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

/// Nutation correction in obliquity (δΔε) in arcseconds
func (rcv *EOP) DEPS() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Nutation correction in obliquity (δΔε) in arcseconds
func (rcv *EOP) MutateDEPS(n float32) bool {
	return rcv._tab.MutateFloat32Slot(18, n)
}

/// Celestial pole offset in x (δX) in arcseconds
func (rcv *EOP) DX() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Celestial pole offset in x (δX) in arcseconds
func (rcv *EOP) MutateDX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(20, n)
}

/// Celestial pole offset in y (δY) in arcseconds
func (rcv *EOP) DY() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Celestial pole offset in y (δY) in arcseconds
func (rcv *EOP) MutateDY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(22, n)
}

/// Delta Atomic Time (TAI-UTC) in seconds
func (rcv *EOP) DAT() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

/// Delta Atomic Time (TAI-UTC) in seconds
func (rcv *EOP) MutateDAT(n uint16) bool {
	return rcv._tab.MutateUint16Slot(24, n)
}

/// Data type (O = Observed, P = Predicted)
func (rcv *EOP) DATA_TYPE() DataType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return DataType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Data type (O = Observed, P = Predicted)
func (rcv *EOP) MutateDATA_TYPE(n DataType) bool {
	return rcv._tab.MutateInt8Slot(26, int8(n))
}

func EOPStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func EOPAddDATE(builder *flatbuffers.Builder, DATE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(DATE), 0)
}
func EOPAddMJD(builder *flatbuffers.Builder, MJD uint32) {
	builder.PrependUint32Slot(1, MJD, 0)
}
func EOPAddX(builder *flatbuffers.Builder, X float32) {
	builder.PrependFloat32Slot(2, X, 0.0)
}
func EOPAddY(builder *flatbuffers.Builder, Y float32) {
	builder.PrependFloat32Slot(3, Y, 0.0)
}
func EOPAddUT1_MINUS_UTC(builder *flatbuffers.Builder, UT1_MINUS_UTC float32) {
	builder.PrependFloat32Slot(4, UT1_MINUS_UTC, 0.0)
}
func EOPAddLOD(builder *flatbuffers.Builder, LOD float32) {
	builder.PrependFloat32Slot(5, LOD, 0.0)
}
func EOPAddDPSI(builder *flatbuffers.Builder, DPSI float32) {
	builder.PrependFloat32Slot(6, DPSI, 0.0)
}
func EOPAddDEPS(builder *flatbuffers.Builder, DEPS float32) {
	builder.PrependFloat32Slot(7, DEPS, 0.0)
}
func EOPAddDX(builder *flatbuffers.Builder, DX float32) {
	builder.PrependFloat32Slot(8, DX, 0.0)
}
func EOPAddDY(builder *flatbuffers.Builder, DY float32) {
	builder.PrependFloat32Slot(9, DY, 0.0)
}
func EOPAddDAT(builder *flatbuffers.Builder, DAT uint16) {
	builder.PrependUint16Slot(10, DAT, 0)
}
func EOPAddDATA_TYPE(builder *flatbuffers.Builder, DATA_TYPE DataType) {
	builder.PrependInt8Slot(11, int8(DATA_TYPE), 0)
}
func EOPEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
