// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package REC

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Reference Frame Message
type RFM struct {
	_tab flatbuffers.Table
}

const RFMIdentifier = "$RFM"

func GetRootAsRFM(buf []byte, offset flatbuffers.UOffsetT) *RFM {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RFM{}
	x.Init(buf, n+offset)
	return x
}

func FinishRFMBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RFMIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func RFMBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, RFMIdentifier)
}

func GetSizePrefixedRootAsRFM(buf []byte, offset flatbuffers.UOffsetT) *RFM {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RFM{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRFMBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RFMIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedRFMBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, RFMIdentifier)
}

func (rcv *RFM) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RFM) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RFM) ReferenceFrameType() RFMUnion {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return RFMUnion(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *RFM) MutateReferenceFrameType(n RFMUnion) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *RFM) REFERENCE_FRAME(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *RFM) INDEX() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func RFMStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RFMAddReferenceFrameType(builder *flatbuffers.Builder, referenceFrameType RFMUnion) {
	builder.PrependByteSlot(0, byte(referenceFrameType), 0)
}
func RFMAddREFERENCE_FRAME(builder *flatbuffers.Builder, REFERENCE_FRAME flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(REFERENCE_FRAME), 0)
}
func RFMAddINDEX(builder *flatbuffers.Builder, INDEX flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(INDEX), 0)
}
func RFMEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
