// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package CDM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Legacy Country Code
type LCC struct {
	_tab flatbuffers.Table
}

func GetRootAsLCC(buf []byte, offset flatbuffers.UOffsetT) *LCC {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LCC{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsLCC(buf []byte, offset flatbuffers.UOffsetT) *LCC {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LCC{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *LCC) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LCC) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LCC) OWNER() legacyCountryCode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return legacyCountryCode(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *LCC) MutateOWNER(n legacyCountryCode) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func LCCStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func LCCAddOWNER(builder *flatbuffers.Builder, OWNER legacyCountryCode) {
	builder.PrependInt8Slot(0, int8(OWNER), 0)
}
func LCCEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
