// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package VCM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Equinoctial Elements
type equinoctialElements struct {
	_tab flatbuffers.Table
}

func GetRootAsequinoctialElements(buf []byte, offset flatbuffers.UOffsetT) *equinoctialElements {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &equinoctialElements{}
	x.Init(buf, n+offset)
	return x
}

func FinishequinoctialElementsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsequinoctialElements(buf []byte, offset flatbuffers.UOffsetT) *equinoctialElements {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &equinoctialElements{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedequinoctialElementsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *equinoctialElements) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *equinoctialElements) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *equinoctialElements) AF() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *equinoctialElements) MutateAF(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

func (rcv *equinoctialElements) AG() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *equinoctialElements) MutateAG(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *equinoctialElements) L() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *equinoctialElements) MutateL(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *equinoctialElements) N() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *equinoctialElements) MutateN(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *equinoctialElements) CHI() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *equinoctialElements) MutateCHI(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func (rcv *equinoctialElements) PSI() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *equinoctialElements) MutatePSI(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

func equinoctialElementsStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func equinoctialElementsAddAF(builder *flatbuffers.Builder, AF float64) {
	builder.PrependFloat64Slot(0, AF, 0.0)
}
func equinoctialElementsAddAG(builder *flatbuffers.Builder, AG float64) {
	builder.PrependFloat64Slot(1, AG, 0.0)
}
func equinoctialElementsAddL(builder *flatbuffers.Builder, L float64) {
	builder.PrependFloat64Slot(2, L, 0.0)
}
func equinoctialElementsAddN(builder *flatbuffers.Builder, N float64) {
	builder.PrependFloat64Slot(3, N, 0.0)
}
func equinoctialElementsAddCHI(builder *flatbuffers.Builder, CHI float64) {
	builder.PrependFloat64Slot(4, CHI, 0.0)
}
func equinoctialElementsAddPSI(builder *flatbuffers.Builder, PSI float64) {
	builder.PrependFloat64Slot(5, PSI, 0.0)
}
func equinoctialElementsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
