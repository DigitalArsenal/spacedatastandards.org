// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package PNM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Publish Notification Message
type PNM struct {
	_tab flatbuffers.Table
}

func GetRootAsPNM(buf []byte, offset flatbuffers.UOffsetT) *PNM {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PNM{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPNM(buf []byte, offset flatbuffers.UOffsetT) *PNM {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PNM{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PNM) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PNM) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unencrypted PNM Details
/// This field contains the details of the Publish Notification Message without encryption.
func (rcv *PNM) FILE(obj *Detail) *Detail {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Detail)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Unencrypted PNM Details
/// This field contains the details of the Publish Notification Message without encryption.
/// Encrypted PNM Details
/// This field contains the details of the Publish Notification Message with encryption.
func (rcv *PNM) FILE_ENCRYPTED(obj *Detail) *Detail {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Detail)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Encrypted PNM Details
/// This field contains the details of the Publish Notification Message with encryption.
func PNMStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func PNMAddFILE(builder *flatbuffers.Builder, FILE flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(FILE), 0)
}
func PNMAddFILE_ENCRYPTED(builder *flatbuffers.Builder, FILE_ENCRYPTED flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(FILE_ENCRYPTED), 0)
}
func PNMEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
