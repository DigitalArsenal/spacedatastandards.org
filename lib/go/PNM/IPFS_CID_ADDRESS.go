// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IPFS_CID_ADDRESS

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// IPFS CID and Account Identifier
type IPFS_CID_ADDRESS struct {
	_tab flatbuffers.Table
}

func GetRootAsIPFS_CID_ADDRESS(buf []byte, offset flatbuffers.UOffsetT) *IPFS_CID_ADDRESS {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IPFS_CID_ADDRESS{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsIPFS_CID_ADDRESS(buf []byte, offset flatbuffers.UOffsetT) *IPFS_CID_ADDRESS {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IPFS_CID_ADDRESS{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *IPFS_CID_ADDRESS) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IPFS_CID_ADDRESS) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *IPFS_CID_ADDRESS) IPFS_CID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *IPFS_CID_ADDRESS) KEY_ADDRESS() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func IPFS_CID_ADDRESSStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func IPFS_CID_ADDRESSAddIPFS_CID(builder *flatbuffers.Builder, IPFS_CID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(IPFS_CID), 0)
}
func IPFS_CID_ADDRESSAddKEY_ADDRESS(builder *flatbuffers.Builder, KEY_ADDRESS flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(KEY_ADDRESS), 0)
}
func IPFS_CID_ADDRESSEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
