<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Frequency range with lower and upper limits
class FrequencyRange extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return FrequencyRange
     */
    public static function getRootAsFrequencyRange(ByteBuffer $bb)
    {
        $obj = new FrequencyRange();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function FrequencyRangeIdentifier()
    {
        return "$IDM";
    }

    public static function FrequencyRangeBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::FrequencyRangeIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return FrequencyRange
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Lower frequency in MHz
    /**
     * @return double
     */
    public function getLOWER()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Upper frequency in MHz
    /**
     * @return double
     */
    public function getUPPER()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startFrequencyRange(FlatBufferBuilder $builder)
    {
        $builder->StartObject(2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return FrequencyRange
     */
    public static function createFrequencyRange(FlatBufferBuilder $builder, $LOWER, $UPPER)
    {
        $builder->startObject(2);
        self::addLOWER($builder, $LOWER);
        self::addUPPER($builder, $UPPER);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLOWER(FlatBufferBuilder $builder, $LOWER)
    {
        $builder->addDoubleX(0, $LOWER, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUPPER(FlatBufferBuilder $builder, $UPPER)
    {
        $builder->addDoubleX(1, $UPPER, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endFrequencyRange(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
