<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Orbit Parameter Message
class OPM extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return OPM
     */
    public static function getRootAsOPM(ByteBuffer $bb)
    {
        $obj = new OPM();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return OPM
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return double
     */
    public function getCCSDS_OMM_VERS()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    public function getCREATION_DATE()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getORIGINATOR()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getOBJECT_NAME()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getOBJECT_ID()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getCENTER_NAME()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getREF_FRAME()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getTIME_SYSTEM()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getSTATE_VECTOR()
    {
        $obj = new OpmStateVector();
        $o = $this->__offset(20);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    public function getKEPLERIAN_ELEMENTS()
    {
        $obj = new KeplerianElements();
        $o = $this->__offset(22);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    public function getEQUINOCTIAL_ELEMENTS()
    {
        $obj = new EquinoctialElements();
        $o = $this->__offset(24);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /**
     * @return double
     */
    public function getGM()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    public function getATMOSPHERIC_MODEL_DATA()
    {
        $obj = new OpmAtmosphericModelData();
        $o = $this->__offset(28);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    public function getPROPAGATOR_SETTINGS()
    {
        $obj = new PropagatorConfig();
        $o = $this->__offset(30);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /**
     * @returnVectorOffset
     */
    public function getCOVARIANCE_MATRIX($j)
    {
        $o = $this->__offset(32);
        $obj = new OpmCovarianceMatrixLine();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getCOVARIANCE_MATRIXLength()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    public function getUVW_SIGMAS()
    {
        $obj = new UvwSigmas();
        $o = $this->__offset(34);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /**
     * @return double
     */
    public function getMASS()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getSOLAR_RAD_AREA()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getSOLAR_RAD_COEFF()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getDRAG_AREA()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getDRAG_COEFF()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return sbyte
     */
    public function getSRP()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \perturbationStatus::OFF;
    }

    public function getCLASSIFICATION_TYPE()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return uint
     */
    public function getNORAD_CAT_ID()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 0;
    }

    /**
     * @return uint
     */
    public function getELEMENT_SET_NO()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 0;
    }

    /**
     * @return double
     */
    public function getREV_AT_EPOCH()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getBSTAR()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getMEAN_MOTION_DOT()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getMEAN_MOTION_DDOT()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    public function getCOV_REFERENCE_FRAME()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return double
     */
    public function getCX_X()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getCY_X()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getCZ_X()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getCX_DOT_X()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return uint
     */
    public function getUSER_DEFINED_BIP_0044_TYPE()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 0;
    }

    public function getUSER_DEFINED_OBJECT_DESIGNATOR()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getUSER_DEFINED_EARTH_MODEL()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return double
     */
    public function getUSER_DEFINED_EPOCH_TIMESTAMP()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getUSER_DEFINED_MICROSECONDS()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startOPM(FlatBufferBuilder $builder)
    {
        $builder->StartObject(39);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return OPM
     */
    public static function createOPM(FlatBufferBuilder $builder, $CCSDS_OMM_VERS, $CREATION_DATE, $ORIGINATOR, $OBJECT_NAME, $OBJECT_ID, $CENTER_NAME, $REF_FRAME, $TIME_SYSTEM, $STATE_VECTOR, $KEPLERIAN_ELEMENTS, $EQUINOCTIAL_ELEMENTS, $GM, $ATMOSPHERIC_MODEL_DATA, $PROPAGATOR_SETTINGS, $COVARIANCE_MATRIX, $UVW_SIGMAS, $MASS, $SOLAR_RAD_AREA, $SOLAR_RAD_COEFF, $DRAG_AREA, $DRAG_COEFF, $SRP, $CLASSIFICATION_TYPE, $NORAD_CAT_ID, $ELEMENT_SET_NO, $REV_AT_EPOCH, $BSTAR, $MEAN_MOTION_DOT, $MEAN_MOTION_DDOT, $COV_REFERENCE_FRAME, $CX_X, $CY_X, $CZ_X, $CX_DOT_X, $USER_DEFINED_BIP_0044_TYPE, $USER_DEFINED_OBJECT_DESIGNATOR, $USER_DEFINED_EARTH_MODEL, $USER_DEFINED_EPOCH_TIMESTAMP, $USER_DEFINED_MICROSECONDS)
    {
        $builder->startObject(39);
        self::addCCSDS_OMM_VERS($builder, $CCSDS_OMM_VERS);
        self::addCREATION_DATE($builder, $CREATION_DATE);
        self::addORIGINATOR($builder, $ORIGINATOR);
        self::addOBJECT_NAME($builder, $OBJECT_NAME);
        self::addOBJECT_ID($builder, $OBJECT_ID);
        self::addCENTER_NAME($builder, $CENTER_NAME);
        self::addREF_FRAME($builder, $REF_FRAME);
        self::addTIME_SYSTEM($builder, $TIME_SYSTEM);
        self::addSTATE_VECTOR($builder, $STATE_VECTOR);
        self::addKEPLERIAN_ELEMENTS($builder, $KEPLERIAN_ELEMENTS);
        self::addEQUINOCTIAL_ELEMENTS($builder, $EQUINOCTIAL_ELEMENTS);
        self::addGM($builder, $GM);
        self::addATMOSPHERIC_MODEL_DATA($builder, $ATMOSPHERIC_MODEL_DATA);
        self::addPROPAGATOR_SETTINGS($builder, $PROPAGATOR_SETTINGS);
        self::addCOVARIANCE_MATRIX($builder, $COVARIANCE_MATRIX);
        self::addUVW_SIGMAS($builder, $UVW_SIGMAS);
        self::addMASS($builder, $MASS);
        self::addSOLAR_RAD_AREA($builder, $SOLAR_RAD_AREA);
        self::addSOLAR_RAD_COEFF($builder, $SOLAR_RAD_COEFF);
        self::addDRAG_AREA($builder, $DRAG_AREA);
        self::addDRAG_COEFF($builder, $DRAG_COEFF);
        self::addSRP($builder, $SRP);
        self::addCLASSIFICATION_TYPE($builder, $CLASSIFICATION_TYPE);
        self::addNORAD_CAT_ID($builder, $NORAD_CAT_ID);
        self::addELEMENT_SET_NO($builder, $ELEMENT_SET_NO);
        self::addREV_AT_EPOCH($builder, $REV_AT_EPOCH);
        self::addBSTAR($builder, $BSTAR);
        self::addMEAN_MOTION_DOT($builder, $MEAN_MOTION_DOT);
        self::addMEAN_MOTION_DDOT($builder, $MEAN_MOTION_DDOT);
        self::addCOV_REFERENCE_FRAME($builder, $COV_REFERENCE_FRAME);
        self::addCX_X($builder, $CX_X);
        self::addCY_X($builder, $CY_X);
        self::addCZ_X($builder, $CZ_X);
        self::addCX_DOT_X($builder, $CX_DOT_X);
        self::addUSER_DEFINED_BIP_0044_TYPE($builder, $USER_DEFINED_BIP_0044_TYPE);
        self::addUSER_DEFINED_OBJECT_DESIGNATOR($builder, $USER_DEFINED_OBJECT_DESIGNATOR);
        self::addUSER_DEFINED_EARTH_MODEL($builder, $USER_DEFINED_EARTH_MODEL);
        self::addUSER_DEFINED_EPOCH_TIMESTAMP($builder, $USER_DEFINED_EPOCH_TIMESTAMP);
        self::addUSER_DEFINED_MICROSECONDS($builder, $USER_DEFINED_MICROSECONDS);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCCSDS_OMM_VERS(FlatBufferBuilder $builder, $CCSDS_OMM_VERS)
    {
        $builder->addDoubleX(0, $CCSDS_OMM_VERS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCREATION_DATE(FlatBufferBuilder $builder, $CREATION_DATE)
    {
        $builder->addOffsetX(1, $CREATION_DATE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORIGINATOR(FlatBufferBuilder $builder, $ORIGINATOR)
    {
        $builder->addOffsetX(2, $ORIGINATOR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOBJECT_NAME(FlatBufferBuilder $builder, $OBJECT_NAME)
    {
        $builder->addOffsetX(3, $OBJECT_NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOBJECT_ID(FlatBufferBuilder $builder, $OBJECT_ID)
    {
        $builder->addOffsetX(4, $OBJECT_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCENTER_NAME(FlatBufferBuilder $builder, $CENTER_NAME)
    {
        $builder->addOffsetX(5, $CENTER_NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addREF_FRAME(FlatBufferBuilder $builder, $REF_FRAME)
    {
        $builder->addOffsetX(6, $REF_FRAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTIME_SYSTEM(FlatBufferBuilder $builder, $TIME_SYSTEM)
    {
        $builder->addOffsetX(7, $TIME_SYSTEM, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSTATE_VECTOR(FlatBufferBuilder $builder, $STATE_VECTOR)
    {
        $builder->addOffsetX(8, $STATE_VECTOR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addKEPLERIAN_ELEMENTS(FlatBufferBuilder $builder, $KEPLERIAN_ELEMENTS)
    {
        $builder->addOffsetX(9, $KEPLERIAN_ELEMENTS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEQUINOCTIAL_ELEMENTS(FlatBufferBuilder $builder, $EQUINOCTIAL_ELEMENTS)
    {
        $builder->addOffsetX(10, $EQUINOCTIAL_ELEMENTS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addGM(FlatBufferBuilder $builder, $GM)
    {
        $builder->addDoubleX(11, $GM, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addATMOSPHERIC_MODEL_DATA(FlatBufferBuilder $builder, $ATMOSPHERIC_MODEL_DATA)
    {
        $builder->addOffsetX(12, $ATMOSPHERIC_MODEL_DATA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPROPAGATOR_SETTINGS(FlatBufferBuilder $builder, $PROPAGATOR_SETTINGS)
    {
        $builder->addOffsetX(13, $PROPAGATOR_SETTINGS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCOVARIANCE_MATRIX(FlatBufferBuilder $builder, $COVARIANCE_MATRIX)
    {
        $builder->addOffsetX(14, $COVARIANCE_MATRIX, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCOVARIANCE_MATRIXVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCOVARIANCE_MATRIXVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addUVW_SIGMAS(FlatBufferBuilder $builder, $UVW_SIGMAS)
    {
        $builder->addOffsetX(15, $UVW_SIGMAS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMASS(FlatBufferBuilder $builder, $MASS)
    {
        $builder->addDoubleX(16, $MASS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSOLAR_RAD_AREA(FlatBufferBuilder $builder, $SOLAR_RAD_AREA)
    {
        $builder->addDoubleX(17, $SOLAR_RAD_AREA, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSOLAR_RAD_COEFF(FlatBufferBuilder $builder, $SOLAR_RAD_COEFF)
    {
        $builder->addDoubleX(18, $SOLAR_RAD_COEFF, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDRAG_AREA(FlatBufferBuilder $builder, $DRAG_AREA)
    {
        $builder->addDoubleX(19, $DRAG_AREA, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDRAG_COEFF(FlatBufferBuilder $builder, $DRAG_COEFF)
    {
        $builder->addDoubleX(20, $DRAG_COEFF, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addSRP(FlatBufferBuilder $builder, $SRP)
    {
        $builder->addSbyteX(21, $SRP, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCLASSIFICATION_TYPE(FlatBufferBuilder $builder, $CLASSIFICATION_TYPE)
    {
        $builder->addOffsetX(22, $CLASSIFICATION_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addNORAD_CAT_ID(FlatBufferBuilder $builder, $NORAD_CAT_ID)
    {
        $builder->addUintX(23, $NORAD_CAT_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addELEMENT_SET_NO(FlatBufferBuilder $builder, $ELEMENT_SET_NO)
    {
        $builder->addUintX(24, $ELEMENT_SET_NO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addREV_AT_EPOCH(FlatBufferBuilder $builder, $REV_AT_EPOCH)
    {
        $builder->addDoubleX(25, $REV_AT_EPOCH, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBSTAR(FlatBufferBuilder $builder, $BSTAR)
    {
        $builder->addDoubleX(26, $BSTAR, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMEAN_MOTION_DOT(FlatBufferBuilder $builder, $MEAN_MOTION_DOT)
    {
        $builder->addDoubleX(27, $MEAN_MOTION_DOT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMEAN_MOTION_DDOT(FlatBufferBuilder $builder, $MEAN_MOTION_DDOT)
    {
        $builder->addDoubleX(28, $MEAN_MOTION_DDOT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCOV_REFERENCE_FRAME(FlatBufferBuilder $builder, $COV_REFERENCE_FRAME)
    {
        $builder->addOffsetX(29, $COV_REFERENCE_FRAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCX_X(FlatBufferBuilder $builder, $CX_X)
    {
        $builder->addDoubleX(30, $CX_X, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCY_X(FlatBufferBuilder $builder, $CY_X)
    {
        $builder->addDoubleX(31, $CY_X, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCZ_X(FlatBufferBuilder $builder, $CZ_X)
    {
        $builder->addDoubleX(32, $CZ_X, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCX_DOT_X(FlatBufferBuilder $builder, $CX_DOT_X)
    {
        $builder->addDoubleX(33, $CX_DOT_X, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addUSER_DEFINED_BIP_0044_TYPE(FlatBufferBuilder $builder, $USER_DEFINED_BIP_0044_TYPE)
    {
        $builder->addUintX(34, $USER_DEFINED_BIP_0044_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUSER_DEFINED_OBJECT_DESIGNATOR(FlatBufferBuilder $builder, $USER_DEFINED_OBJECT_DESIGNATOR)
    {
        $builder->addOffsetX(35, $USER_DEFINED_OBJECT_DESIGNATOR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUSER_DEFINED_EARTH_MODEL(FlatBufferBuilder $builder, $USER_DEFINED_EARTH_MODEL)
    {
        $builder->addOffsetX(36, $USER_DEFINED_EARTH_MODEL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUSER_DEFINED_EPOCH_TIMESTAMP(FlatBufferBuilder $builder, $USER_DEFINED_EPOCH_TIMESTAMP)
    {
        $builder->addDoubleX(37, $USER_DEFINED_EPOCH_TIMESTAMP, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUSER_DEFINED_MICROSECONDS(FlatBufferBuilder $builder, $USER_DEFINED_MICROSECONDS)
    {
        $builder->addDoubleX(38, $USER_DEFINED_MICROSECONDS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endOPM(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishOPMBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset);
    }
}
