<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Payload Information
class PLD extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return PLD
     */
    public static function getRootAsPLD(ByteBuffer $bb)
    {
        $obj = new PLD();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function PLDIdentifier()
    {
        return "$PLD";
    }

    public static function PLDBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::PLDIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return PLD
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getPAYLOAD_DURATION()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return float
     */
    public function getMASS_AT_LAUNCH()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    public function getDIMENSIONS()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return float
     */
    public function getSOLAR_ARRAY_AREA()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    public function getSOLAR_ARRAY_DIMENSIONS()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getNOMINAL_OPERATIONAL_LIFETIME()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @returnVectorOffset
     */
    public function getINSTRUMENTS($j)
    {
        $o = $this->__offset(16);
        $obj = new IDM();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getINSTRUMENTSLength()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startPLD(FlatBufferBuilder $builder)
    {
        $builder->StartObject(7);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return PLD
     */
    public static function createPLD(FlatBufferBuilder $builder, $PAYLOAD_DURATION, $MASS_AT_LAUNCH, $DIMENSIONS, $SOLAR_ARRAY_AREA, $SOLAR_ARRAY_DIMENSIONS, $NOMINAL_OPERATIONAL_LIFETIME, $INSTRUMENTS)
    {
        $builder->startObject(7);
        self::addPAYLOAD_DURATION($builder, $PAYLOAD_DURATION);
        self::addMASS_AT_LAUNCH($builder, $MASS_AT_LAUNCH);
        self::addDIMENSIONS($builder, $DIMENSIONS);
        self::addSOLAR_ARRAY_AREA($builder, $SOLAR_ARRAY_AREA);
        self::addSOLAR_ARRAY_DIMENSIONS($builder, $SOLAR_ARRAY_DIMENSIONS);
        self::addNOMINAL_OPERATIONAL_LIFETIME($builder, $NOMINAL_OPERATIONAL_LIFETIME);
        self::addINSTRUMENTS($builder, $INSTRUMENTS);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPAYLOAD_DURATION(FlatBufferBuilder $builder, $PAYLOAD_DURATION)
    {
        $builder->addOffsetX(0, $PAYLOAD_DURATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addMASS_AT_LAUNCH(FlatBufferBuilder $builder, $MASS_AT_LAUNCH)
    {
        $builder->addFloatX(1, $MASS_AT_LAUNCH, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDIMENSIONS(FlatBufferBuilder $builder, $DIMENSIONS)
    {
        $builder->addOffsetX(2, $DIMENSIONS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addSOLAR_ARRAY_AREA(FlatBufferBuilder $builder, $SOLAR_ARRAY_AREA)
    {
        $builder->addFloatX(3, $SOLAR_ARRAY_AREA, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSOLAR_ARRAY_DIMENSIONS(FlatBufferBuilder $builder, $SOLAR_ARRAY_DIMENSIONS)
    {
        $builder->addOffsetX(4, $SOLAR_ARRAY_DIMENSIONS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNOMINAL_OPERATIONAL_LIFETIME(FlatBufferBuilder $builder, $NOMINAL_OPERATIONAL_LIFETIME)
    {
        $builder->addOffsetX(5, $NOMINAL_OPERATIONAL_LIFETIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addINSTRUMENTS(FlatBufferBuilder $builder, $INSTRUMENTS)
    {
        $builder->addOffsetX(6, $INSTRUMENTS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createINSTRUMENTSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startINSTRUMENTSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endPLD(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
