<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class OrbitDetermination extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return OrbitDetermination
     */
    public static function getRootAsOrbitDetermination(ByteBuffer $bb)
    {
        $obj = new OrbitDetermination();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function OrbitDeterminationIdentifier()
    {
        return "$OCM";
    }

    public static function OrbitDeterminationBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::OrbitDeterminationIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return OrbitDetermination
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier for the orbit determination.
    public function getOD_ID()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the previous orbit determination.
    public function getOD_PREV_ID()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Algorithm used for orbit determination.
    public function getOD_ALGORITHM()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Method used for orbit determination.
    public function getOD_METHOD()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Epoch of the orbit determination.
    public function getOD_EPOCH()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time tag of the orbit determination.
    public function getOD_TIME_TAG()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Process noise model used.
    public function getOD_PROCESS_NOISE()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Covariance reduction techniques used.
    public function getOD_COV_REDUCTION()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Noise models used.
    public function getOD_NOISE_MODELS()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Types of observations used (e.g., RANGE, DOPPLER).
    /**
     * @param int offset
     * @return string
     */
    public function getOD_OBSERVATIONS_TYPE($j)
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getOD_OBSERVATIONS_TYPELength()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Number of observations used.
    /**
     * @return int
     */
    public function getOD_OBSERVATIONS_USED()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Number of tracks used.
    /**
     * @return int
     */
    public function getOD_TRACKS_USED()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Data weighting scheme used.
    public function getOD_DATA_WEIGHTING()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Convergence criteria used.
    public function getOD_CONVERGENCE_CRITERIA()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Parameters estimated during orbit determination.
    /**
     * @param int offset
     * @return string
     */
    public function getOD_EST_PARAMETERS($j)
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getOD_EST_PARAMETERSLength()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// A priori data used for orbit determination.
    public function getOD_APRIORI_DATA()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Residuals from the orbit determination.
    public function getOD_RESIDUALS()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startOrbitDetermination(FlatBufferBuilder $builder)
    {
        $builder->StartObject(17);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return OrbitDetermination
     */
    public static function createOrbitDetermination(FlatBufferBuilder $builder, $OD_ID, $OD_PREV_ID, $OD_ALGORITHM, $OD_METHOD, $OD_EPOCH, $OD_TIME_TAG, $OD_PROCESS_NOISE, $OD_COV_REDUCTION, $OD_NOISE_MODELS, $OD_OBSERVATIONS_TYPE, $OD_OBSERVATIONS_USED, $OD_TRACKS_USED, $OD_DATA_WEIGHTING, $OD_CONVERGENCE_CRITERIA, $OD_EST_PARAMETERS, $OD_APRIORI_DATA, $OD_RESIDUALS)
    {
        $builder->startObject(17);
        self::addOD_ID($builder, $OD_ID);
        self::addOD_PREV_ID($builder, $OD_PREV_ID);
        self::addOD_ALGORITHM($builder, $OD_ALGORITHM);
        self::addOD_METHOD($builder, $OD_METHOD);
        self::addOD_EPOCH($builder, $OD_EPOCH);
        self::addOD_TIME_TAG($builder, $OD_TIME_TAG);
        self::addOD_PROCESS_NOISE($builder, $OD_PROCESS_NOISE);
        self::addOD_COV_REDUCTION($builder, $OD_COV_REDUCTION);
        self::addOD_NOISE_MODELS($builder, $OD_NOISE_MODELS);
        self::addOD_OBSERVATIONS_TYPE($builder, $OD_OBSERVATIONS_TYPE);
        self::addOD_OBSERVATIONS_USED($builder, $OD_OBSERVATIONS_USED);
        self::addOD_TRACKS_USED($builder, $OD_TRACKS_USED);
        self::addOD_DATA_WEIGHTING($builder, $OD_DATA_WEIGHTING);
        self::addOD_CONVERGENCE_CRITERIA($builder, $OD_CONVERGENCE_CRITERIA);
        self::addOD_EST_PARAMETERS($builder, $OD_EST_PARAMETERS);
        self::addOD_APRIORI_DATA($builder, $OD_APRIORI_DATA);
        self::addOD_RESIDUALS($builder, $OD_RESIDUALS);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOD_ID(FlatBufferBuilder $builder, $OD_ID)
    {
        $builder->addOffsetX(0, $OD_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOD_PREV_ID(FlatBufferBuilder $builder, $OD_PREV_ID)
    {
        $builder->addOffsetX(1, $OD_PREV_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOD_ALGORITHM(FlatBufferBuilder $builder, $OD_ALGORITHM)
    {
        $builder->addOffsetX(2, $OD_ALGORITHM, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOD_METHOD(FlatBufferBuilder $builder, $OD_METHOD)
    {
        $builder->addOffsetX(3, $OD_METHOD, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOD_EPOCH(FlatBufferBuilder $builder, $OD_EPOCH)
    {
        $builder->addOffsetX(4, $OD_EPOCH, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOD_TIME_TAG(FlatBufferBuilder $builder, $OD_TIME_TAG)
    {
        $builder->addOffsetX(5, $OD_TIME_TAG, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOD_PROCESS_NOISE(FlatBufferBuilder $builder, $OD_PROCESS_NOISE)
    {
        $builder->addOffsetX(6, $OD_PROCESS_NOISE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOD_COV_REDUCTION(FlatBufferBuilder $builder, $OD_COV_REDUCTION)
    {
        $builder->addOffsetX(7, $OD_COV_REDUCTION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOD_NOISE_MODELS(FlatBufferBuilder $builder, $OD_NOISE_MODELS)
    {
        $builder->addOffsetX(8, $OD_NOISE_MODELS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addOD_OBSERVATIONS_TYPE(FlatBufferBuilder $builder, $OD_OBSERVATIONS_TYPE)
    {
        $builder->addOffsetX(9, $OD_OBSERVATIONS_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createOD_OBSERVATIONS_TYPEVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startOD_OBSERVATIONS_TYPEVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addOD_OBSERVATIONS_USED(FlatBufferBuilder $builder, $OD_OBSERVATIONS_USED)
    {
        $builder->addIntX(10, $OD_OBSERVATIONS_USED, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addOD_TRACKS_USED(FlatBufferBuilder $builder, $OD_TRACKS_USED)
    {
        $builder->addIntX(11, $OD_TRACKS_USED, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOD_DATA_WEIGHTING(FlatBufferBuilder $builder, $OD_DATA_WEIGHTING)
    {
        $builder->addOffsetX(12, $OD_DATA_WEIGHTING, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOD_CONVERGENCE_CRITERIA(FlatBufferBuilder $builder, $OD_CONVERGENCE_CRITERIA)
    {
        $builder->addOffsetX(13, $OD_CONVERGENCE_CRITERIA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addOD_EST_PARAMETERS(FlatBufferBuilder $builder, $OD_EST_PARAMETERS)
    {
        $builder->addOffsetX(14, $OD_EST_PARAMETERS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createOD_EST_PARAMETERSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startOD_EST_PARAMETERSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOD_APRIORI_DATA(FlatBufferBuilder $builder, $OD_APRIORI_DATA)
    {
        $builder->addOffsetX(15, $OD_APRIORI_DATA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOD_RESIDUALS(FlatBufferBuilder $builder, $OD_RESIDUALS)
    {
        $builder->addOffsetX(16, $OD_RESIDUALS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endOrbitDetermination(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
