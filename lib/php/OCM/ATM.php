<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Atmospheric Model Message
class ATM extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return ATM
     */
    public static function getRootAsATM(ByteBuffer $bb)
    {
        $obj = new ATM();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function ATMIdentifier()
    {
        return "$ATM";
    }

    public static function ATMBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ATMIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return ATM
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Canonical model family
    /**
     * @return sbyte
     */
    public function getMODEL()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \AtmosphericModelFamily::CIRA_XX;
    }

    /// Four-digit year identifying the model version (e.g., 1970, 2008, 2020)
    /**
     * @return int
     */
    public function getYEAR()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startATM(FlatBufferBuilder $builder)
    {
        $builder->StartObject(2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return ATM
     */
    public static function createATM(FlatBufferBuilder $builder, $MODEL, $YEAR)
    {
        $builder->startObject(2);
        self::addMODEL($builder, $MODEL);
        self::addYEAR($builder, $YEAR);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addMODEL(FlatBufferBuilder $builder, $MODEL)
    {
        $builder->addSbyteX(0, $MODEL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addYEAR(FlatBufferBuilder $builder, $YEAR)
    {
        $builder->addIntX(1, $YEAR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endATM(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishATMBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$ATM");
    }
}
