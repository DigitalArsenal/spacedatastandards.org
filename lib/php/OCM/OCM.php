<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Orbit Comprehensive Message
class OCM extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return OCM
     */
    public static function getRootAsOCM(ByteBuffer $bb)
    {
        $obj = new OCM();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function OCMIdentifier()
    {
        return "$OCM";
    }

    public static function OCMBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::OCMIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return OCM
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Header section of the OCM.
    public function getHEADER()
    {
        $obj = new Header();
        $o = $this->__offset(4);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// Metadata section of the OCM.
    public function getMETADATA()
    {
        $obj = new Metadata();
        $o = $this->__offset(6);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// Trajectory type (e.g., PROPAGATED, ESTIMATED).
    public function getTRAJ_TYPE()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// State vector data.
    /**
     * @returnVectorOffset
     */
    public function getSTATE_DATA($j)
    {
        $o = $this->__offset(10);
        $obj = new StateVector();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getSTATE_DATALength()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Physical properties of the space object.
    public function getPHYSICAL_PROPERTIES()
    {
        $obj = new PhysicalProperties();
        $o = $this->__offset(12);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// Covariance data associated with the state vectors.
    /**
     * @returnVectorOffset
     */
    public function getCOVARIANCE_DATA($j)
    {
        $o = $this->__offset(14);
        $obj = new StateVector();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getCOVARIANCE_DATALength()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Maneuver data.
    /**
     * @returnVectorOffset
     */
    public function getMANEUVER_DATA($j)
    {
        $o = $this->__offset(16);
        $obj = new Maneuver();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getMANEUVER_DATALength()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Perturbations parameters used.
    public function getPERTURBATIONS()
    {
        $obj = new Perturbations();
        $o = $this->__offset(18);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// Orbit determination data.
    public function getORBIT_DETERMINATION()
    {
        $obj = new OrbitDetermination();
        $o = $this->__offset(20);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// User-defined parameters and supplemental comments.
    /**
     * @returnVectorOffset
     */
    public function getUSER_DEFINED_PARAMETERS($j)
    {
        $o = $this->__offset(22);
        $obj = new UserDefinedParameters();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getUSER_DEFINED_PARAMETERSLength()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startOCM(FlatBufferBuilder $builder)
    {
        $builder->StartObject(10);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return OCM
     */
    public static function createOCM(FlatBufferBuilder $builder, $HEADER, $METADATA, $TRAJ_TYPE, $STATE_DATA, $PHYSICAL_PROPERTIES, $COVARIANCE_DATA, $MANEUVER_DATA, $PERTURBATIONS, $ORBIT_DETERMINATION, $USER_DEFINED_PARAMETERS)
    {
        $builder->startObject(10);
        self::addHEADER($builder, $HEADER);
        self::addMETADATA($builder, $METADATA);
        self::addTRAJ_TYPE($builder, $TRAJ_TYPE);
        self::addSTATE_DATA($builder, $STATE_DATA);
        self::addPHYSICAL_PROPERTIES($builder, $PHYSICAL_PROPERTIES);
        self::addCOVARIANCE_DATA($builder, $COVARIANCE_DATA);
        self::addMANEUVER_DATA($builder, $MANEUVER_DATA);
        self::addPERTURBATIONS($builder, $PERTURBATIONS);
        self::addORBIT_DETERMINATION($builder, $ORBIT_DETERMINATION);
        self::addUSER_DEFINED_PARAMETERS($builder, $USER_DEFINED_PARAMETERS);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addHEADER(FlatBufferBuilder $builder, $HEADER)
    {
        $builder->addOffsetX(0, $HEADER, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMETADATA(FlatBufferBuilder $builder, $METADATA)
    {
        $builder->addOffsetX(1, $METADATA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTRAJ_TYPE(FlatBufferBuilder $builder, $TRAJ_TYPE)
    {
        $builder->addOffsetX(2, $TRAJ_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSTATE_DATA(FlatBufferBuilder $builder, $STATE_DATA)
    {
        $builder->addOffsetX(3, $STATE_DATA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSTATE_DATAVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSTATE_DATAVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPHYSICAL_PROPERTIES(FlatBufferBuilder $builder, $PHYSICAL_PROPERTIES)
    {
        $builder->addOffsetX(4, $PHYSICAL_PROPERTIES, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCOVARIANCE_DATA(FlatBufferBuilder $builder, $COVARIANCE_DATA)
    {
        $builder->addOffsetX(5, $COVARIANCE_DATA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCOVARIANCE_DATAVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCOVARIANCE_DATAVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMANEUVER_DATA(FlatBufferBuilder $builder, $MANEUVER_DATA)
    {
        $builder->addOffsetX(6, $MANEUVER_DATA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMANEUVER_DATAVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMANEUVER_DATAVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPERTURBATIONS(FlatBufferBuilder $builder, $PERTURBATIONS)
    {
        $builder->addOffsetX(7, $PERTURBATIONS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addORBIT_DETERMINATION(FlatBufferBuilder $builder, $ORBIT_DETERMINATION)
    {
        $builder->addOffsetX(8, $ORBIT_DETERMINATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addUSER_DEFINED_PARAMETERS(FlatBufferBuilder $builder, $USER_DEFINED_PARAMETERS)
    {
        $builder->addOffsetX(9, $USER_DEFINED_PARAMETERS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createUSER_DEFINED_PARAMETERSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startUSER_DEFINED_PARAMETERSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endOCM(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishOCMBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$OCM");
    }
}
