<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class Maneuver extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Maneuver
     */
    public static function getRootAsManeuver(ByteBuffer $bb)
    {
        $obj = new Maneuver();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function ManeuverIdentifier()
    {
        return "$OCM";
    }

    public static function ManeuverBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ManeuverIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Maneuver
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier for the maneuver.
    public function getMAN_ID()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Basis of the maneuver plan (e.g., planned, predicted, estimated).
    public function getMAN_BASIS()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the maneuver device.
    public function getMAN_DEVICE_ID()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the previous maneuver.
    public function getMAN_PREV_ID()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Purpose of the maneuver.
    public function getMAN_PURPOSE()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Reference frame for the maneuver data.
    public function getMAN_REF_FRAME()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Epoch of the maneuver reference frame.
    public function getMAN_FRAME_EPOCH()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of maneuver (e.g., IMPULSIVE, FINITE).
    public function getMAN_TYPE()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Start epoch of the maneuver.
    public function getMAN_EPOCH_START()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Duration of the maneuver.
    /**
     * @return double
     */
    public function getMAN_DURATION()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Units for the maneuver data values.
    /**
     * @param int offset
     * @return string
     */
    public function getMAN_UNITS($j)
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMAN_UNITSLength()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Data associated with the maneuver.
    /**
     * @param int offset
     * @return string
     */
    public function getDATA($j)
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getDATALength()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Comments related to the maneuver.
    /**
     * @param int offset
     * @return string
     */
    public function getMAN_COMMENT($j)
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMAN_COMMENTLength()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startManeuver(FlatBufferBuilder $builder)
    {
        $builder->StartObject(13);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Maneuver
     */
    public static function createManeuver(FlatBufferBuilder $builder, $MAN_ID, $MAN_BASIS, $MAN_DEVICE_ID, $MAN_PREV_ID, $MAN_PURPOSE, $MAN_REF_FRAME, $MAN_FRAME_EPOCH, $MAN_TYPE, $MAN_EPOCH_START, $MAN_DURATION, $MAN_UNITS, $DATA, $MAN_COMMENT)
    {
        $builder->startObject(13);
        self::addMAN_ID($builder, $MAN_ID);
        self::addMAN_BASIS($builder, $MAN_BASIS);
        self::addMAN_DEVICE_ID($builder, $MAN_DEVICE_ID);
        self::addMAN_PREV_ID($builder, $MAN_PREV_ID);
        self::addMAN_PURPOSE($builder, $MAN_PURPOSE);
        self::addMAN_REF_FRAME($builder, $MAN_REF_FRAME);
        self::addMAN_FRAME_EPOCH($builder, $MAN_FRAME_EPOCH);
        self::addMAN_TYPE($builder, $MAN_TYPE);
        self::addMAN_EPOCH_START($builder, $MAN_EPOCH_START);
        self::addMAN_DURATION($builder, $MAN_DURATION);
        self::addMAN_UNITS($builder, $MAN_UNITS);
        self::addDATA($builder, $DATA);
        self::addMAN_COMMENT($builder, $MAN_COMMENT);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMAN_ID(FlatBufferBuilder $builder, $MAN_ID)
    {
        $builder->addOffsetX(0, $MAN_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMAN_BASIS(FlatBufferBuilder $builder, $MAN_BASIS)
    {
        $builder->addOffsetX(1, $MAN_BASIS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMAN_DEVICE_ID(FlatBufferBuilder $builder, $MAN_DEVICE_ID)
    {
        $builder->addOffsetX(2, $MAN_DEVICE_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMAN_PREV_ID(FlatBufferBuilder $builder, $MAN_PREV_ID)
    {
        $builder->addOffsetX(3, $MAN_PREV_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMAN_PURPOSE(FlatBufferBuilder $builder, $MAN_PURPOSE)
    {
        $builder->addOffsetX(4, $MAN_PURPOSE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMAN_REF_FRAME(FlatBufferBuilder $builder, $MAN_REF_FRAME)
    {
        $builder->addOffsetX(5, $MAN_REF_FRAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMAN_FRAME_EPOCH(FlatBufferBuilder $builder, $MAN_FRAME_EPOCH)
    {
        $builder->addOffsetX(6, $MAN_FRAME_EPOCH, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMAN_TYPE(FlatBufferBuilder $builder, $MAN_TYPE)
    {
        $builder->addOffsetX(7, $MAN_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMAN_EPOCH_START(FlatBufferBuilder $builder, $MAN_EPOCH_START)
    {
        $builder->addOffsetX(8, $MAN_EPOCH_START, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMAN_DURATION(FlatBufferBuilder $builder, $MAN_DURATION)
    {
        $builder->addDoubleX(9, $MAN_DURATION, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMAN_UNITS(FlatBufferBuilder $builder, $MAN_UNITS)
    {
        $builder->addOffsetX(10, $MAN_UNITS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMAN_UNITSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMAN_UNITSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addDATA(FlatBufferBuilder $builder, $DATA)
    {
        $builder->addOffsetX(11, $DATA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createDATAVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startDATAVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMAN_COMMENT(FlatBufferBuilder $builder, $MAN_COMMENT)
    {
        $builder->addOffsetX(12, $MAN_COMMENT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMAN_COMMENTVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMAN_COMMENTVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endManeuver(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
