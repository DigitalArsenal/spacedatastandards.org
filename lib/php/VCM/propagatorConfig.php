<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Propagator configuration structure to describe propagation settings
class propagatorConfig extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return propagatorConfig
     */
    public static function getRootAspropagatorConfig(ByteBuffer $bb)
    {
        $obj = new propagatorConfig();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return propagatorConfig
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getPROPAGATOR_NAME()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return sbyte
     */
    public function getPROPAGATOR_TYPE()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \propagatorType::NONE;
    }

    /**
     * @param int offset
     * @return string
     */
    public function getFORCE_MODELS($j)
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getFORCE_MODELSLength()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    public function getEPOCH()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return double
     */
    public function getTIME_STEP()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param int offset
     * @return sbyte
     */
    public function getZONAL_HARMONIC_TERMS($j)
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getSbyte($this->__vector($o) + $j * 1) : \zonalHarmonic::NONE;
    }

    /**
     * @return int
     */
    public function getZONAL_HARMONIC_TERMSLength()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startpropagatorConfig(FlatBufferBuilder $builder)
    {
        $builder->StartObject(6);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return propagatorConfig
     */
    public static function createpropagatorConfig(FlatBufferBuilder $builder, $PROPAGATOR_NAME, $PROPAGATOR_TYPE, $FORCE_MODELS, $EPOCH, $TIME_STEP, $ZONAL_HARMONIC_TERMS)
    {
        $builder->startObject(6);
        self::addPROPAGATOR_NAME($builder, $PROPAGATOR_NAME);
        self::addPROPAGATOR_TYPE($builder, $PROPAGATOR_TYPE);
        self::addFORCE_MODELS($builder, $FORCE_MODELS);
        self::addEPOCH($builder, $EPOCH);
        self::addTIME_STEP($builder, $TIME_STEP);
        self::addZONAL_HARMONIC_TERMS($builder, $ZONAL_HARMONIC_TERMS);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPROPAGATOR_NAME(FlatBufferBuilder $builder, $PROPAGATOR_NAME)
    {
        $builder->addOffsetX(0, $PROPAGATOR_NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addPROPAGATOR_TYPE(FlatBufferBuilder $builder, $PROPAGATOR_TYPE)
    {
        $builder->addSbyteX(1, $PROPAGATOR_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addFORCE_MODELS(FlatBufferBuilder $builder, $FORCE_MODELS)
    {
        $builder->addOffsetX(2, $FORCE_MODELS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createFORCE_MODELSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startFORCE_MODELSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEPOCH(FlatBufferBuilder $builder, $EPOCH)
    {
        $builder->addOffsetX(3, $EPOCH, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTIME_STEP(FlatBufferBuilder $builder, $TIME_STEP)
    {
        $builder->addDoubleX(4, $TIME_STEP, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addZONAL_HARMONIC_TERMS(FlatBufferBuilder $builder, $ZONAL_HARMONIC_TERMS)
    {
        $builder->addOffsetX(5, $ZONAL_HARMONIC_TERMS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createZONAL_HARMONIC_TERMSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(1, count($data), 1);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putSbyte($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startZONAL_HARMONIC_TERMSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(1, $numElems, 1);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endpropagatorConfig(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
