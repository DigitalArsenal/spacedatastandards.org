<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class RFM extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RFM
     */
    public static function getRootAsRFM(ByteBuffer $bb)
    {
        $obj = new RFM();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function RFMIdentifier()
    {
        return "$RFM";
    }

    public static function RFMBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::RFMIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RFM
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return byte
     */
    public function getREFERENCEFRAMEType()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : \RFMUnion::NONE;
    }

    /**
     * @returnint
     */
    public function getREFERENCE_FRAME($obj)
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__union($obj, $o) : null;
    }

    public function getINDEX()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRFM(FlatBufferBuilder $builder)
    {
        $builder->StartObject(3);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RFM
     */
    public static function createRFM(FlatBufferBuilder $builder, $REFERENCE_FRAME_type, $REFERENCE_FRAME, $INDEX)
    {
        $builder->startObject(3);
        self::addREFERENCEFRAMEType($builder, $REFERENCE_FRAME_type);
        self::addREFERENCE_FRAME($builder, $REFERENCE_FRAME);
        self::addINDEX($builder, $INDEX);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addREFERENCEFRAMEType(FlatBufferBuilder $builder, $rEFERENCEFRAMEType)
    {
        $builder->addByteX(0, $rEFERENCEFRAMEType, 0);
    }

    public static function addREFERENCE_FRAME(FlatBufferBuilder $builder, $offset)
    {
        $builder->addOffsetX(1, $offset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addINDEX(FlatBufferBuilder $builder, $INDEX)
    {
        $builder->addOffsetX(2, $INDEX, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRFM(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishRFMBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$RFM");
    }
}
