<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Hypothesis Message
class HYP extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return HYP
     */
    public static function getRootAsHYP(ByteBuffer $bb)
    {
        $obj = new HYP();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function HYPIdentifier()
    {
        return "$HYP";
    }

    public static function HYPBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::HYPIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return HYP
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Space Objects Involved
    /**
     * @param int offset
     * @return string
     */
    public function getCAT_IDS($j)
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCAT_IDSLength()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Space Objects Involved
    /**
     * @param int offset
     * @return string
     */
    public function getSIT_IDS($j)
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getSIT_IDSLength()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Name of the hypothesis
    public function getNAME()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Category of the hypothesis
    public function getCATEGORY()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Row indicators for the hypothesis matrix
    /**
     * @param int offset
     * @return string
     */
    public function getROW_INDICATORS($j)
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getROW_INDICATORSLength()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Column indicators for the hypothesis matrix
    /**
     * @param int offset
     * @return string
     */
    public function getCOL_INDICATORS($j)
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCOL_INDICATORSLength()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Matrix data as a boolean array in row major format; if overflow, adds additional rows
    /**
     * @param int offset
     * @return bool
     */
    public function getMATRIX($j)
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getBool($this->__vector($o) + $j * 1) : 0;
    }

    /**
     * @return int
     */
    public function getMATRIXLength()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Scores for objects
    /**
     * @returnVectorOffset
     */
    public function getSCORE($j)
    {
        $o = $this->__offset(18);
        $obj = new Score();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getSCORELength()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Analysis methodology used to form the hypothesis
    public function getANALYSIS_METHOD()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getEVENT_START_TIME()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getEVENT_END_TIME()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startHYP(FlatBufferBuilder $builder)
    {
        $builder->StartObject(11);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return HYP
     */
    public static function createHYP(FlatBufferBuilder $builder, $CAT_IDS, $SIT_IDS, $NAME, $CATEGORY, $ROW_INDICATORS, $COL_INDICATORS, $MATRIX, $SCORE, $ANALYSIS_METHOD, $EVENT_START_TIME, $EVENT_END_TIME)
    {
        $builder->startObject(11);
        self::addCAT_IDS($builder, $CAT_IDS);
        self::addSIT_IDS($builder, $SIT_IDS);
        self::addNAME($builder, $NAME);
        self::addCATEGORY($builder, $CATEGORY);
        self::addROW_INDICATORS($builder, $ROW_INDICATORS);
        self::addCOL_INDICATORS($builder, $COL_INDICATORS);
        self::addMATRIX($builder, $MATRIX);
        self::addSCORE($builder, $SCORE);
        self::addANALYSIS_METHOD($builder, $ANALYSIS_METHOD);
        self::addEVENT_START_TIME($builder, $EVENT_START_TIME);
        self::addEVENT_END_TIME($builder, $EVENT_END_TIME);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCAT_IDS(FlatBufferBuilder $builder, $CAT_IDS)
    {
        $builder->addOffsetX(0, $CAT_IDS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCAT_IDSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCAT_IDSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSIT_IDS(FlatBufferBuilder $builder, $SIT_IDS)
    {
        $builder->addOffsetX(1, $SIT_IDS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSIT_IDSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSIT_IDSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNAME(FlatBufferBuilder $builder, $NAME)
    {
        $builder->addOffsetX(2, $NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCATEGORY(FlatBufferBuilder $builder, $CATEGORY)
    {
        $builder->addOffsetX(3, $CATEGORY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addROW_INDICATORS(FlatBufferBuilder $builder, $ROW_INDICATORS)
    {
        $builder->addOffsetX(4, $ROW_INDICATORS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createROW_INDICATORSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startROW_INDICATORSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCOL_INDICATORS(FlatBufferBuilder $builder, $COL_INDICATORS)
    {
        $builder->addOffsetX(5, $COL_INDICATORS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCOL_INDICATORSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCOL_INDICATORSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMATRIX(FlatBufferBuilder $builder, $MATRIX)
    {
        $builder->addOffsetX(6, $MATRIX, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMATRIXVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(1, count($data), 1);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putBool($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMATRIXVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(1, $numElems, 1);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSCORE(FlatBufferBuilder $builder, $SCORE)
    {
        $builder->addOffsetX(7, $SCORE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSCOREVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSCOREVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addANALYSIS_METHOD(FlatBufferBuilder $builder, $ANALYSIS_METHOD)
    {
        $builder->addOffsetX(8, $ANALYSIS_METHOD, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEVENT_START_TIME(FlatBufferBuilder $builder, $EVENT_START_TIME)
    {
        $builder->addOffsetX(9, $EVENT_START_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEVENT_END_TIME(FlatBufferBuilder $builder, $EVENT_END_TIME)
    {
        $builder->addOffsetX(10, $EVENT_END_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endHYP(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishHYPBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$HYP");
    }
}
