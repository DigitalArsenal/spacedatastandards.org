<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Observation Stability Message
class OSM extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return OSM
     */
    public static function getRootAsOSM(ByteBuffer $bb)
    {
        $obj = new OSM();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function OSMIdentifier()
    {
        return "$OSM";
    }

    public static function OSMBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::OSMIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return OSM
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Indicates whether the observation is stable or not
    /**
     * @return bool
     */
    public function getIS_STABLE()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The number of observations
    /**
     * @return int
     */
    public function getNUM_OBS()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Unique identifier for the object being observed
    public function getOBJECT_ID()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the sensor
    public function getID_SENSOR()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Timestamp of data creation
    public function getPASS_START()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Duration of the observation pass in seconds
    /**
     * @return int
     */
    public function getPASS_DURATION()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startOSM(FlatBufferBuilder $builder)
    {
        $builder->StartObject(6);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return OSM
     */
    public static function createOSM(FlatBufferBuilder $builder, $IS_STABLE, $NUM_OBS, $OBJECT_ID, $ID_SENSOR, $PASS_START, $PASS_DURATION)
    {
        $builder->startObject(6);
        self::addIS_STABLE($builder, $IS_STABLE);
        self::addNUM_OBS($builder, $NUM_OBS);
        self::addOBJECT_ID($builder, $OBJECT_ID);
        self::addID_SENSOR($builder, $ID_SENSOR);
        self::addPASS_START($builder, $PASS_START);
        self::addPASS_DURATION($builder, $PASS_DURATION);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addIS_STABLE(FlatBufferBuilder $builder, $IS_STABLE)
    {
        $builder->addBoolX(0, $IS_STABLE, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNUM_OBS(FlatBufferBuilder $builder, $NUM_OBS)
    {
        $builder->addIntX(1, $NUM_OBS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOBJECT_ID(FlatBufferBuilder $builder, $OBJECT_ID)
    {
        $builder->addOffsetX(2, $OBJECT_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addID_SENSOR(FlatBufferBuilder $builder, $ID_SENSOR)
    {
        $builder->addOffsetX(3, $ID_SENSOR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPASS_START(FlatBufferBuilder $builder, $PASS_START)
    {
        $builder->addOffsetX(4, $PASS_START, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPASS_DURATION(FlatBufferBuilder $builder, $PASS_DURATION)
    {
        $builder->addIntX(5, $PASS_DURATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endOSM(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishOSMBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$OSM");
    }
}
