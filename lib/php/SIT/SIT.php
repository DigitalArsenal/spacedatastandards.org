<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Site Information Message
class SIT extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return SIT
     */
    public static function getRootAsSIT(ByteBuffer $bb)
    {
        $obj = new SIT();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function SITIdentifier()
    {
        return "$SIT";
    }

    public static function SITBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::SITIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return SIT
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier for the site, BE_NUMBER
    public function getID()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the site
    public function getNAME()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Abbreviation
    public function getABBREVIATION()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Site type as defined in SiteType enum
    /**
     * @return sbyte
     */
    public function getSITE_TYPE()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SiteType::LAUNCH_SITE;
    }

    /// Site type CATCODE
    public function getCATCODE()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Network identifier
    public function getNETWORK()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Latitude of the site
    /**
     * @return float
     */
    public function getLATITUDE()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Longitude of the site
    /**
     * @return float
     */
    public function getLONGITUDE()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Altitude of the site
    /**
     * @return float
     */
    public function getALTITUDE()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Geometry of the site
    public function getGEOMETRY()
    {
        $obj = new Geometry();
        $o = $this->__offset(22);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// Center point geometry coordinates
    /**
     * @param int offset
     * @return float
     */
    public function getCENTER_POINT_GEOMETRY($j)
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getFloat($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCENTER_POINT_GEOMETRYLength()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Classification marking of the site
    public function getCLASSIFICATION()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// CTR ISO 3166 Numeric code as string
    public function getCTR_ID()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier of the user who created the site data
    public function getCREATED_BY()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of the site
    public function getDESCRIPTION()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// URL for the 3D model of the site
    public function getMODEL_URL()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the site data
    public function getSOURCE()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates if the site is taskable
    /**
     * @return bool
     */
    public function getTASKABLE()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Operational status of the site (e.g., active, inactive, under construction)
    public function getOPERATIONAL_STATUS()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Date of establishment
    public function getESTABLISHMENT_DATE()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Contact information for the site
    public function getCONTACT_INFO()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Environmental impact or considerations
    public function getENVIRONMENTAL_IMPACT()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Accessibility and infrastructure details
    public function getACCESSIBILITY_INFRA()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Vector of Integrated Devices (IDM)
    /**
     * @returnVectorOffset
     */
    public function getINTEGRATED_DEVICES($j)
    {
        $o = $this->__offset(50);
        $obj = new IDM();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getINTEGRATED_DEVICESLength()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSIT(FlatBufferBuilder $builder)
    {
        $builder->StartObject(24);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return SIT
     */
    public static function createSIT(FlatBufferBuilder $builder, $ID, $NAME, $ABBREVIATION, $SITE_TYPE, $CATCODE, $NETWORK, $LATITUDE, $LONGITUDE, $ALTITUDE, $GEOMETRY, $CENTER_POINT_GEOMETRY, $CLASSIFICATION, $CTR_ID, $CREATED_BY, $DESCRIPTION, $MODEL_URL, $SOURCE, $TASKABLE, $OPERATIONAL_STATUS, $ESTABLISHMENT_DATE, $CONTACT_INFO, $ENVIRONMENTAL_IMPACT, $ACCESSIBILITY_INFRA, $INTEGRATED_DEVICES)
    {
        $builder->startObject(24);
        self::addID($builder, $ID);
        self::addNAME($builder, $NAME);
        self::addABBREVIATION($builder, $ABBREVIATION);
        self::addSITE_TYPE($builder, $SITE_TYPE);
        self::addCATCODE($builder, $CATCODE);
        self::addNETWORK($builder, $NETWORK);
        self::addLATITUDE($builder, $LATITUDE);
        self::addLONGITUDE($builder, $LONGITUDE);
        self::addALTITUDE($builder, $ALTITUDE);
        self::addGEOMETRY($builder, $GEOMETRY);
        self::addCENTER_POINT_GEOMETRY($builder, $CENTER_POINT_GEOMETRY);
        self::addCLASSIFICATION($builder, $CLASSIFICATION);
        self::addCTR_ID($builder, $CTR_ID);
        self::addCREATED_BY($builder, $CREATED_BY);
        self::addDESCRIPTION($builder, $DESCRIPTION);
        self::addMODEL_URL($builder, $MODEL_URL);
        self::addSOURCE($builder, $SOURCE);
        self::addTASKABLE($builder, $TASKABLE);
        self::addOPERATIONAL_STATUS($builder, $OPERATIONAL_STATUS);
        self::addESTABLISHMENT_DATE($builder, $ESTABLISHMENT_DATE);
        self::addCONTACT_INFO($builder, $CONTACT_INFO);
        self::addENVIRONMENTAL_IMPACT($builder, $ENVIRONMENTAL_IMPACT);
        self::addACCESSIBILITY_INFRA($builder, $ACCESSIBILITY_INFRA);
        self::addINTEGRATED_DEVICES($builder, $INTEGRATED_DEVICES);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addID(FlatBufferBuilder $builder, $ID)
    {
        $builder->addOffsetX(0, $ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNAME(FlatBufferBuilder $builder, $NAME)
    {
        $builder->addOffsetX(1, $NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addABBREVIATION(FlatBufferBuilder $builder, $ABBREVIATION)
    {
        $builder->addOffsetX(2, $ABBREVIATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addSITE_TYPE(FlatBufferBuilder $builder, $SITE_TYPE)
    {
        $builder->addSbyteX(3, $SITE_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCATCODE(FlatBufferBuilder $builder, $CATCODE)
    {
        $builder->addOffsetX(4, $CATCODE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNETWORK(FlatBufferBuilder $builder, $NETWORK)
    {
        $builder->addOffsetX(5, $NETWORK, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addLATITUDE(FlatBufferBuilder $builder, $LATITUDE)
    {
        $builder->addFloatX(6, $LATITUDE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addLONGITUDE(FlatBufferBuilder $builder, $LONGITUDE)
    {
        $builder->addFloatX(7, $LONGITUDE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addALTITUDE(FlatBufferBuilder $builder, $ALTITUDE)
    {
        $builder->addFloatX(8, $ALTITUDE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addGEOMETRY(FlatBufferBuilder $builder, $GEOMETRY)
    {
        $builder->addOffsetX(9, $GEOMETRY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCENTER_POINT_GEOMETRY(FlatBufferBuilder $builder, $CENTER_POINT_GEOMETRY)
    {
        $builder->addOffsetX(10, $CENTER_POINT_GEOMETRY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCENTER_POINT_GEOMETRYVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putFloat($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCENTER_POINT_GEOMETRYVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCLASSIFICATION(FlatBufferBuilder $builder, $CLASSIFICATION)
    {
        $builder->addOffsetX(11, $CLASSIFICATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCTR_ID(FlatBufferBuilder $builder, $CTR_ID)
    {
        $builder->addOffsetX(12, $CTR_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCREATED_BY(FlatBufferBuilder $builder, $CREATED_BY)
    {
        $builder->addOffsetX(13, $CREATED_BY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDESCRIPTION(FlatBufferBuilder $builder, $DESCRIPTION)
    {
        $builder->addOffsetX(14, $DESCRIPTION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMODEL_URL(FlatBufferBuilder $builder, $MODEL_URL)
    {
        $builder->addOffsetX(15, $MODEL_URL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSOURCE(FlatBufferBuilder $builder, $SOURCE)
    {
        $builder->addOffsetX(16, $SOURCE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addTASKABLE(FlatBufferBuilder $builder, $TASKABLE)
    {
        $builder->addBoolX(17, $TASKABLE, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOPERATIONAL_STATUS(FlatBufferBuilder $builder, $OPERATIONAL_STATUS)
    {
        $builder->addOffsetX(18, $OPERATIONAL_STATUS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addESTABLISHMENT_DATE(FlatBufferBuilder $builder, $ESTABLISHMENT_DATE)
    {
        $builder->addOffsetX(19, $ESTABLISHMENT_DATE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCONTACT_INFO(FlatBufferBuilder $builder, $CONTACT_INFO)
    {
        $builder->addOffsetX(20, $CONTACT_INFO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addENVIRONMENTAL_IMPACT(FlatBufferBuilder $builder, $ENVIRONMENTAL_IMPACT)
    {
        $builder->addOffsetX(21, $ENVIRONMENTAL_IMPACT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addACCESSIBILITY_INFRA(FlatBufferBuilder $builder, $ACCESSIBILITY_INFRA)
    {
        $builder->addOffsetX(22, $ACCESSIBILITY_INFRA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addINTEGRATED_DEVICES(FlatBufferBuilder $builder, $INTEGRATED_DEVICES)
    {
        $builder->addOffsetX(23, $INTEGRATED_DEVICES, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createINTEGRATED_DEVICESVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startINTEGRATED_DEVICESVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSIT(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSITBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$SIT");
    }
}
