<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Stage Details
class STAGE extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return STAGE
     */
    public static function getRootAsSTAGE(ByteBuffer $bb)
    {
        $obj = new STAGE();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function STAGEIdentifier()
    {
        return "$ROC";
    }

    public static function STAGEBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::STAGEIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return STAGE
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Stage Number
    /**
     * @return int
     */
    public function getSTAGE_NUMBER()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Engines Used in This Stage
    /**
     * @returnVectorOffset
     */
    public function getENGINES($j)
    {
        $o = $this->__offset(6);
        $obj = new ENGINE();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getENGINESLength()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Fuel Type Used in This Stage
    public function getFUEL_TYPE()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Thrust Produced by This Stage (in Newtons)
    /**
     * @return double
     */
    public function getTHRUST()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Duration of the Burn (in Seconds)
    /**
     * @return double
     */
    public function getBURN_DURATION()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSTAGE(FlatBufferBuilder $builder)
    {
        $builder->StartObject(5);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return STAGE
     */
    public static function createSTAGE(FlatBufferBuilder $builder, $STAGE_NUMBER, $ENGINES, $FUEL_TYPE, $THRUST, $BURN_DURATION)
    {
        $builder->startObject(5);
        self::addSTAGE_NUMBER($builder, $STAGE_NUMBER);
        self::addENGINES($builder, $ENGINES);
        self::addFUEL_TYPE($builder, $FUEL_TYPE);
        self::addTHRUST($builder, $THRUST);
        self::addBURN_DURATION($builder, $BURN_DURATION);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSTAGE_NUMBER(FlatBufferBuilder $builder, $STAGE_NUMBER)
    {
        $builder->addIntX(0, $STAGE_NUMBER, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addENGINES(FlatBufferBuilder $builder, $ENGINES)
    {
        $builder->addOffsetX(1, $ENGINES, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createENGINESVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startENGINESVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFUEL_TYPE(FlatBufferBuilder $builder, $FUEL_TYPE)
    {
        $builder->addOffsetX(2, $FUEL_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTHRUST(FlatBufferBuilder $builder, $THRUST)
    {
        $builder->addDoubleX(3, $THRUST, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBURN_DURATION(FlatBufferBuilder $builder, $BURN_DURATION)
    {
        $builder->addDoubleX(4, $BURN_DURATION, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSTAGE(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
