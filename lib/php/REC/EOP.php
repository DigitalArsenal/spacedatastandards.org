<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Earth Orientation Parameters
class EOP extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EOP
     */
    public static function getRootAsEOP(ByteBuffer $bb)
    {
        $obj = new EOP();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EOPIdentifier()
    {
        return "$EOP";
    }

    public static function EOPBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EOPIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EOP
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    ///  Date in ISO 8601 format, e.g., "2018-01-01T00:00:00Z"
    public function getDATE()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    ///  Modified Julian Date in UTC, e.g., 58119
    /**
     * @return uint
     */
    public function getMJD()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 0;
    }

    ///  x component of Pole Wander in radians, e.g., 2.872908911518888E-7
    /**
     * @return float
     */
    public function getX_POLE_WANDER_RADIANS()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    ///  y component of Pole Wander in radians, e.g., 1.2003259523750447E-6
    /**
     * @return float
     */
    public function getY_POLE_WANDER_RADIANS()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    ///  x component of Celestial Pole Offset in radians, e.g., 5.720801437092525E-10
    /**
     * @return float
     */
    public function getX_CELESTIAL_POLE_OFFSET_RADIANS()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    ///  y component of Celestial Pole Offset in radians, e.g., -8.484239419416879E-10
    /**
     * @return float
     */
    public function getY_CELESTIAL_POLE_OFFSET_RADIANS()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    ///  UT1 minus UTC in seconds, e.g., 0.2163567
    /**
     * @return float
     */
    public function getUT1_MINUS_UTC_SECONDS()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    ///  TAI minus UTC in seconds, e.g., 37
    /**
     * @return ushort
     */
    public function getTAI_MINUS_UTC_SECONDS()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getUshort($o + $this->bb_pos) : 0;
    }

    ///  Correction to Length of Day in seconds, e.g., 8.094E-4
    /**
     * @return float
     */
    public function getLENGTH_OF_DAY_CORRECTION_SECONDS()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    ///  Data type (O = Observed, P = Predicted)
    /**
     * @return sbyte
     */
    public function getDATA_TYPE()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \DataType::OBSERVED;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEOP(FlatBufferBuilder $builder)
    {
        $builder->StartObject(10);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EOP
     */
    public static function createEOP(FlatBufferBuilder $builder, $DATE, $MJD, $X_POLE_WANDER_RADIANS, $Y_POLE_WANDER_RADIANS, $X_CELESTIAL_POLE_OFFSET_RADIANS, $Y_CELESTIAL_POLE_OFFSET_RADIANS, $UT1_MINUS_UTC_SECONDS, $TAI_MINUS_UTC_SECONDS, $LENGTH_OF_DAY_CORRECTION_SECONDS, $DATA_TYPE)
    {
        $builder->startObject(10);
        self::addDATE($builder, $DATE);
        self::addMJD($builder, $MJD);
        self::addX_POLE_WANDER_RADIANS($builder, $X_POLE_WANDER_RADIANS);
        self::addY_POLE_WANDER_RADIANS($builder, $Y_POLE_WANDER_RADIANS);
        self::addX_CELESTIAL_POLE_OFFSET_RADIANS($builder, $X_CELESTIAL_POLE_OFFSET_RADIANS);
        self::addY_CELESTIAL_POLE_OFFSET_RADIANS($builder, $Y_CELESTIAL_POLE_OFFSET_RADIANS);
        self::addUT1_MINUS_UTC_SECONDS($builder, $UT1_MINUS_UTC_SECONDS);
        self::addTAI_MINUS_UTC_SECONDS($builder, $TAI_MINUS_UTC_SECONDS);
        self::addLENGTH_OF_DAY_CORRECTION_SECONDS($builder, $LENGTH_OF_DAY_CORRECTION_SECONDS);
        self::addDATA_TYPE($builder, $DATA_TYPE);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDATE(FlatBufferBuilder $builder, $DATE)
    {
        $builder->addOffsetX(0, $DATE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addMJD(FlatBufferBuilder $builder, $MJD)
    {
        $builder->addUintX(1, $MJD, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addX_POLE_WANDER_RADIANS(FlatBufferBuilder $builder, $X_POLE_WANDER_RADIANS)
    {
        $builder->addFloatX(2, $X_POLE_WANDER_RADIANS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addY_POLE_WANDER_RADIANS(FlatBufferBuilder $builder, $Y_POLE_WANDER_RADIANS)
    {
        $builder->addFloatX(3, $Y_POLE_WANDER_RADIANS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addX_CELESTIAL_POLE_OFFSET_RADIANS(FlatBufferBuilder $builder, $X_CELESTIAL_POLE_OFFSET_RADIANS)
    {
        $builder->addFloatX(4, $X_CELESTIAL_POLE_OFFSET_RADIANS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addY_CELESTIAL_POLE_OFFSET_RADIANS(FlatBufferBuilder $builder, $Y_CELESTIAL_POLE_OFFSET_RADIANS)
    {
        $builder->addFloatX(5, $Y_CELESTIAL_POLE_OFFSET_RADIANS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addUT1_MINUS_UTC_SECONDS(FlatBufferBuilder $builder, $UT1_MINUS_UTC_SECONDS)
    {
        $builder->addFloatX(6, $UT1_MINUS_UTC_SECONDS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param ushort
     * @return void
     */
    public static function addTAI_MINUS_UTC_SECONDS(FlatBufferBuilder $builder, $TAI_MINUS_UTC_SECONDS)
    {
        $builder->addUshortX(7, $TAI_MINUS_UTC_SECONDS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addLENGTH_OF_DAY_CORRECTION_SECONDS(FlatBufferBuilder $builder, $LENGTH_OF_DAY_CORRECTION_SECONDS)
    {
        $builder->addFloatX(8, $LENGTH_OF_DAY_CORRECTION_SECONDS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDATA_TYPE(FlatBufferBuilder $builder, $DATA_TYPE)
    {
        $builder->addSbyteX(9, $DATA_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEOP(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEOPBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$EOP");
    }
}
