<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// UVW Sigmas (Covariance matrix in UVW frame)
class uvwSigmas extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return uvwSigmas
     */
    public static function getRootAsuvwSigmas(ByteBuffer $bb)
    {
        $obj = new uvwSigmas();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return uvwSigmas
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return double
     */
    public function getU_SIGMA()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getV_SIGMA()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getW_SIGMA()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getUD_SIGMA()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getVD_SIGMA()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getWD_SIGMA()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startuvwSigmas(FlatBufferBuilder $builder)
    {
        $builder->StartObject(6);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return uvwSigmas
     */
    public static function createuvwSigmas(FlatBufferBuilder $builder, $U_SIGMA, $V_SIGMA, $W_SIGMA, $UD_SIGMA, $VD_SIGMA, $WD_SIGMA)
    {
        $builder->startObject(6);
        self::addU_SIGMA($builder, $U_SIGMA);
        self::addV_SIGMA($builder, $V_SIGMA);
        self::addW_SIGMA($builder, $W_SIGMA);
        self::addUD_SIGMA($builder, $UD_SIGMA);
        self::addVD_SIGMA($builder, $VD_SIGMA);
        self::addWD_SIGMA($builder, $WD_SIGMA);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addU_SIGMA(FlatBufferBuilder $builder, $U_SIGMA)
    {
        $builder->addDoubleX(0, $U_SIGMA, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addV_SIGMA(FlatBufferBuilder $builder, $V_SIGMA)
    {
        $builder->addDoubleX(1, $V_SIGMA, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addW_SIGMA(FlatBufferBuilder $builder, $W_SIGMA)
    {
        $builder->addDoubleX(2, $W_SIGMA, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUD_SIGMA(FlatBufferBuilder $builder, $UD_SIGMA)
    {
        $builder->addDoubleX(3, $UD_SIGMA, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVD_SIGMA(FlatBufferBuilder $builder, $VD_SIGMA)
    {
        $builder->addDoubleX(4, $VD_SIGMA, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addWD_SIGMA(FlatBufferBuilder $builder, $WD_SIGMA)
    {
        $builder->addDoubleX(5, $WD_SIGMA, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function enduvwSigmas(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
