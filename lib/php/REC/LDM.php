<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Launch Data Message
class LDM extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return LDM
     */
    public static function getRootAsLDM(ByteBuffer $bb)
    {
        $obj = new LDM();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function LDMIdentifier()
    {
        return "$LDM";
    }

    public static function LDMBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::LDMIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return LDM
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Launch Site Information
    public function getSITE()
    {
        $obj = new SIT();
        $o = $this->__offset(4);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// Azimuth at Launch (in Degrees)
    /**
     * @return float
     */
    public function getAZIMUTH()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// References for Launch Data
    public function getREFERENCES()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Launching Agency Name
    public function getAGENCY_NAME()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Points of Contact for Launch
    /**
     * @returnVectorOffset
     */
    public function getPOINTS_OF_CONTACT($j)
    {
        $o = $this->__offset(12);
        $obj = new EPM();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getPOINTS_OF_CONTACTLength()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Operations Points of Contact for Launch
    /**
     * @returnVectorOffset
     */
    public function getOPERATIONS_POINTS_OF_CONTACT($j)
    {
        $o = $this->__offset(14);
        $obj = new EPM();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getOPERATIONS_POINTS_OF_CONTACTLength()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Net Launch Time (UTC Format)
    public function getNET()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Rocket Configuration Details
    public function getROCKET_CONFIGURATION()
    {
        $obj = new ROC();
        $o = $this->__offset(18);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// Mission Name
    public function getMISSION_NAME()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of the Mission
    public function getMISSION_DESCRIPTION()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of the Mission (e.g., Test Flight, Satellite Deployment)
    public function getMISSION_TYPE()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Target Orbit Type (e.g., LEO, GEO)
    public function getORBIT_TYPE()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Weather and Environmental Conditions at Launch
    public function getWEATHER_CONDITIONS()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Launch Outcome and Status (e.g., Successful, Failed)
    public function getLAUNCH_STATUS()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Webcast URL for the Launch
    public function getWEBCAST_URL()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Media Links Related to the Launch
    /**
     * @param int offset
     * @return string
     */
    public function getMEDIA_LINKS($j)
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMEDIA_LINKSLength()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Earliest Possible Launch Times
    /**
     * @param int offset
     * @return string
     */
    public function getEARLIEST_LAUNCH_TIMES($j)
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getEARLIEST_LAUNCH_TIMESLength()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Latest Possible Launch Times
    /**
     * @param int offset
     * @return string
     */
    public function getLATEST_LAUNCH_TIMES($j)
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLATEST_LAUNCH_TIMESLength()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Launch Collision Avoidance Information
    /**
     * @param int offset
     * @return string
     */
    public function getLCOLA_WINDOW_CLOSURES($j)
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getLCOLA_WINDOW_CLOSURESLength()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Payload Information (Catalog Entities)
    /**
     * @returnVectorOffset
     */
    public function getOBJECTS($j)
    {
        $o = $this->__offset(42);
        $obj = new CAT();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getOBJECTSLength()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Tracking and Collision Avoidance Requirements
    /**
     * @param int offset
     * @return string
     */
    public function getTRACKING_REQUIREMENTS($j)
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTRACKING_REQUIREMENTSLength()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Duration of Collision Avoidance Screen (in Seconds)
    public function getCOLA_SCREEN_DURATION()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Probability of Collision Threshold (Percentage)
    public function getPROBABILITY_OF_COLLISION_THRESHOLD()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Number of Required Collision Avoidance Runs
    public function getCOLA_RUNS_REQUIRED()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Points of Contact for Collision Avoidance
    /**
     * @returnVectorOffset
     */
    public function getCOLA_POINTS_OF_CONTACT($j)
    {
        $o = $this->__offset(52);
        $obj = new EPM();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getCOLA_POINTS_OF_CONTACTLength()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Orbital Parameters of the Launch
    /**
     * @param int offset
     * @return string
     */
    public function getORBITAL_PARAMETERS($j)
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getORBITAL_PARAMETERSLength()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Burn Out Vectors for the Launch
    /**
     * @returnVectorOffset
     */
    public function getBURN_OUT_VECTORS($j)
    {
        $o = $this->__offset(56);
        $obj = new BOV();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getBURN_OUT_VECTORSLength()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startLDM(FlatBufferBuilder $builder)
    {
        $builder->StartObject(27);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return LDM
     */
    public static function createLDM(FlatBufferBuilder $builder, $SITE, $AZIMUTH, $REFERENCES, $AGENCY_NAME, $POINTS_OF_CONTACT, $OPERATIONS_POINTS_OF_CONTACT, $NET, $ROCKET_CONFIGURATION, $MISSION_NAME, $MISSION_DESCRIPTION, $MISSION_TYPE, $ORBIT_TYPE, $WEATHER_CONDITIONS, $LAUNCH_STATUS, $WEBCAST_URL, $MEDIA_LINKS, $EARLIEST_LAUNCH_TIMES, $LATEST_LAUNCH_TIMES, $LCOLA_WINDOW_CLOSURES, $OBJECTS, $TRACKING_REQUIREMENTS, $COLA_SCREEN_DURATION, $PROBABILITY_OF_COLLISION_THRESHOLD, $COLA_RUNS_REQUIRED, $COLA_POINTS_OF_CONTACT, $ORBITAL_PARAMETERS, $BURN_OUT_VECTORS)
    {
        $builder->startObject(27);
        self::addSITE($builder, $SITE);
        self::addAZIMUTH($builder, $AZIMUTH);
        self::addREFERENCES($builder, $REFERENCES);
        self::addAGENCY_NAME($builder, $AGENCY_NAME);
        self::addPOINTS_OF_CONTACT($builder, $POINTS_OF_CONTACT);
        self::addOPERATIONS_POINTS_OF_CONTACT($builder, $OPERATIONS_POINTS_OF_CONTACT);
        self::addNET($builder, $NET);
        self::addROCKET_CONFIGURATION($builder, $ROCKET_CONFIGURATION);
        self::addMISSION_NAME($builder, $MISSION_NAME);
        self::addMISSION_DESCRIPTION($builder, $MISSION_DESCRIPTION);
        self::addMISSION_TYPE($builder, $MISSION_TYPE);
        self::addORBIT_TYPE($builder, $ORBIT_TYPE);
        self::addWEATHER_CONDITIONS($builder, $WEATHER_CONDITIONS);
        self::addLAUNCH_STATUS($builder, $LAUNCH_STATUS);
        self::addWEBCAST_URL($builder, $WEBCAST_URL);
        self::addMEDIA_LINKS($builder, $MEDIA_LINKS);
        self::addEARLIEST_LAUNCH_TIMES($builder, $EARLIEST_LAUNCH_TIMES);
        self::addLATEST_LAUNCH_TIMES($builder, $LATEST_LAUNCH_TIMES);
        self::addLCOLA_WINDOW_CLOSURES($builder, $LCOLA_WINDOW_CLOSURES);
        self::addOBJECTS($builder, $OBJECTS);
        self::addTRACKING_REQUIREMENTS($builder, $TRACKING_REQUIREMENTS);
        self::addCOLA_SCREEN_DURATION($builder, $COLA_SCREEN_DURATION);
        self::addPROBABILITY_OF_COLLISION_THRESHOLD($builder, $PROBABILITY_OF_COLLISION_THRESHOLD);
        self::addCOLA_RUNS_REQUIRED($builder, $COLA_RUNS_REQUIRED);
        self::addCOLA_POINTS_OF_CONTACT($builder, $COLA_POINTS_OF_CONTACT);
        self::addORBITAL_PARAMETERS($builder, $ORBITAL_PARAMETERS);
        self::addBURN_OUT_VECTORS($builder, $BURN_OUT_VECTORS);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSITE(FlatBufferBuilder $builder, $SITE)
    {
        $builder->addOffsetX(0, $SITE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addAZIMUTH(FlatBufferBuilder $builder, $AZIMUTH)
    {
        $builder->addFloatX(1, $AZIMUTH, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addREFERENCES(FlatBufferBuilder $builder, $REFERENCES)
    {
        $builder->addOffsetX(2, $REFERENCES, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAGENCY_NAME(FlatBufferBuilder $builder, $AGENCY_NAME)
    {
        $builder->addOffsetX(3, $AGENCY_NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPOINTS_OF_CONTACT(FlatBufferBuilder $builder, $POINTS_OF_CONTACT)
    {
        $builder->addOffsetX(4, $POINTS_OF_CONTACT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createPOINTS_OF_CONTACTVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startPOINTS_OF_CONTACTVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addOPERATIONS_POINTS_OF_CONTACT(FlatBufferBuilder $builder, $OPERATIONS_POINTS_OF_CONTACT)
    {
        $builder->addOffsetX(5, $OPERATIONS_POINTS_OF_CONTACT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createOPERATIONS_POINTS_OF_CONTACTVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startOPERATIONS_POINTS_OF_CONTACTVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNET(FlatBufferBuilder $builder, $NET)
    {
        $builder->addOffsetX(6, $NET, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addROCKET_CONFIGURATION(FlatBufferBuilder $builder, $ROCKET_CONFIGURATION)
    {
        $builder->addOffsetX(7, $ROCKET_CONFIGURATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMISSION_NAME(FlatBufferBuilder $builder, $MISSION_NAME)
    {
        $builder->addOffsetX(8, $MISSION_NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMISSION_DESCRIPTION(FlatBufferBuilder $builder, $MISSION_DESCRIPTION)
    {
        $builder->addOffsetX(9, $MISSION_DESCRIPTION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMISSION_TYPE(FlatBufferBuilder $builder, $MISSION_TYPE)
    {
        $builder->addOffsetX(10, $MISSION_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORBIT_TYPE(FlatBufferBuilder $builder, $ORBIT_TYPE)
    {
        $builder->addOffsetX(11, $ORBIT_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWEATHER_CONDITIONS(FlatBufferBuilder $builder, $WEATHER_CONDITIONS)
    {
        $builder->addOffsetX(12, $WEATHER_CONDITIONS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLAUNCH_STATUS(FlatBufferBuilder $builder, $LAUNCH_STATUS)
    {
        $builder->addOffsetX(13, $LAUNCH_STATUS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWEBCAST_URL(FlatBufferBuilder $builder, $WEBCAST_URL)
    {
        $builder->addOffsetX(14, $WEBCAST_URL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMEDIA_LINKS(FlatBufferBuilder $builder, $MEDIA_LINKS)
    {
        $builder->addOffsetX(15, $MEDIA_LINKS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMEDIA_LINKSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMEDIA_LINKSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEARLIEST_LAUNCH_TIMES(FlatBufferBuilder $builder, $EARLIEST_LAUNCH_TIMES)
    {
        $builder->addOffsetX(16, $EARLIEST_LAUNCH_TIMES, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEARLIEST_LAUNCH_TIMESVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEARLIEST_LAUNCH_TIMESVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLATEST_LAUNCH_TIMES(FlatBufferBuilder $builder, $LATEST_LAUNCH_TIMES)
    {
        $builder->addOffsetX(17, $LATEST_LAUNCH_TIMES, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLATEST_LAUNCH_TIMESVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLATEST_LAUNCH_TIMESVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addLCOLA_WINDOW_CLOSURES(FlatBufferBuilder $builder, $LCOLA_WINDOW_CLOSURES)
    {
        $builder->addOffsetX(18, $LCOLA_WINDOW_CLOSURES, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createLCOLA_WINDOW_CLOSURESVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startLCOLA_WINDOW_CLOSURESVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addOBJECTS(FlatBufferBuilder $builder, $OBJECTS)
    {
        $builder->addOffsetX(19, $OBJECTS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createOBJECTSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startOBJECTSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTRACKING_REQUIREMENTS(FlatBufferBuilder $builder, $TRACKING_REQUIREMENTS)
    {
        $builder->addOffsetX(20, $TRACKING_REQUIREMENTS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTRACKING_REQUIREMENTSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTRACKING_REQUIREMENTSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCOLA_SCREEN_DURATION(FlatBufferBuilder $builder, $COLA_SCREEN_DURATION)
    {
        $builder->addOffsetX(21, $COLA_SCREEN_DURATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPROBABILITY_OF_COLLISION_THRESHOLD(FlatBufferBuilder $builder, $PROBABILITY_OF_COLLISION_THRESHOLD)
    {
        $builder->addOffsetX(22, $PROBABILITY_OF_COLLISION_THRESHOLD, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCOLA_RUNS_REQUIRED(FlatBufferBuilder $builder, $COLA_RUNS_REQUIRED)
    {
        $builder->addOffsetX(23, $COLA_RUNS_REQUIRED, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCOLA_POINTS_OF_CONTACT(FlatBufferBuilder $builder, $COLA_POINTS_OF_CONTACT)
    {
        $builder->addOffsetX(24, $COLA_POINTS_OF_CONTACT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCOLA_POINTS_OF_CONTACTVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCOLA_POINTS_OF_CONTACTVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addORBITAL_PARAMETERS(FlatBufferBuilder $builder, $ORBITAL_PARAMETERS)
    {
        $builder->addOffsetX(25, $ORBITAL_PARAMETERS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createORBITAL_PARAMETERSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startORBITAL_PARAMETERSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addBURN_OUT_VECTORS(FlatBufferBuilder $builder, $BURN_OUT_VECTORS)
    {
        $builder->addOffsetX(26, $BURN_OUT_VECTORS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createBURN_OUT_VECTORSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startBURN_OUT_VECTORSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endLDM(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishLDMBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$LDM");
    }
}
