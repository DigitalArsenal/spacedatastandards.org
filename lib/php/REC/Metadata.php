<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class Metadata extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Metadata
     */
    public static function getRootAsMetadata(ByteBuffer $bb)
    {
        $obj = new Metadata();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function MetadataIdentifier()
    {
        return "$OCM";
    }

    public static function MetadataBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::MetadataIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Metadata
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Comments in the Metadata section.
    /**
     * @param int offset
     * @return string
     */
    public function getCOMMENT($j)
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCOMMENTLength()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Free-text field containing the name of the object.
    public function getOBJECT_NAME()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// International designator for the object as assigned by COSPAR.
    public function getINTERNATIONAL_DESIGNATOR()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite catalog source from which 'OBJECT_DESIGNATOR' was obtained.
    public function getCATALOG_NAME()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique satellite identification designator from the catalog.
    public function getOBJECT_DESIGNATOR()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Alternate names of this space object.
    /**
     * @param int offset
     * @return string
     */
    public function getALTERNATE_NAMES($j)
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getALTERNATE_NAMESLength()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Originator or programmatic Point-of-Contact (PoC) for OCM.
    public function getORIGINATOR_POC()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Contact position of the originator PoC.
    public function getORIGINATOR_POSITION()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originator PoC phone number.
    public function getORIGINATOR_PHONE()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originator PoC email address.
    public function getORIGINATOR_EMAIL()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originator's physical address information.
    public function getORIGINATOR_ADDRESS()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Creating agency or operator for technical contact.
    public function getTECH_ORG()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Technical Point-of-Contact (PoC) for OCM.
    public function getTECH_POC()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Contact position of the technical PoC.
    public function getTECH_POSITION()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Technical PoC phone number.
    public function getTECH_PHONE()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Technical PoC email address.
    public function getTECH_EMAIL()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Technical PoC physical address information.
    public function getTECH_ADDRESS()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID that uniquely identifies the previous message from this originator.
    public function getPREVIOUS_MESSAGE_ID()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID that uniquely identifies the next message from this originator.
    public function getNEXT_MESSAGE_ID()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of Attitude Data Messages linked to this OCM.
    public function getADM_MSG_LINK()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of Conjunction Data Messages linked to this OCM.
    public function getCDM_MSG_LINK()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of Pointing Request Messages linked to this OCM.
    public function getPRM_MSG_LINK()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of Reentry Data Messages linked to this OCM.
    public function getRDM_MSG_LINK()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// List of Tracking Data Messages upon which this orbit determination is based.
    /**
     * @param int offset
     * @return string
     */
    public function getTDM_MSG_LINK($j)
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getTDM_MSG_LINKLength()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Operator of the space object.
    public function getOPERATOR()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Owner of the space object.
    public function getOWNER()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Country where the space object owner is based.
    public function getCOUNTRY()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the constellation to which this space object belongs.
    public function getCONSTELLATION()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specification of the type of object (e.g., PAYLOAD, ROCKET BODY, DEBRIS).
    public function getOBJECT_TYPE()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time system for all absolute time stamps in this OCM, including EPOCH_TZERO.
    public function getTIME_SYSTEM()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Default epoch to which all relative times are referenced in data blocks.
    public function getEPOCH_TZERO()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specification of the operational status of the space object.
    public function getOPS_STATUS()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specification of the type of orbit (e.g., GEO, LEO).
    public function getORBIT_CATEGORY()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// List of elements of information data blocks included in this message.
    /**
     * @param int offset
     * @return string
     */
    public function getOCM_DATA_ELEMENTS($j)
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getOCM_DATA_ELEMENTSLength()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Number of spacecraft clock counts at EPOCH_TZERO (used if TIME_SYSTEM is SCLK).
    /**
     * @return double
     */
    public function getSCLK_OFFSET_AT_EPOCH()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Number of clock seconds occurring during one SI second (used if TIME_SYSTEM is SCLK).
    /**
     * @return double
     */
    public function getSCLK_SEC_PER_SI_SEC()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Creation epoch of the previous message from this originator.
    public function getPREVIOUS_MESSAGE_EPOCH()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Anticipated (or actual) epoch of the next message from this originator.
    public function getNEXT_MESSAGE_EPOCH()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time of the earliest data contained in the OCM.
    public function getSTART_TIME()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time of the latest data contained in the OCM.
    public function getSTOP_TIME()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Span of time that the OCM covers, measured in days.
    /**
     * @return double
     */
    public function getTIME_SPAN()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Difference (TAI - UTC) in seconds at EPOCH_TZERO.
    /**
     * @return double
     */
    public function getTAIMUTC_AT_TZERO()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Epoch of next leap second.
    public function getNEXT_LEAP_EPOCH()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Difference (TAI - UTC) in seconds at NEXT_LEAP_EPOCH.
    /**
     * @return double
     */
    public function getNEXT_LEAP_TAIMUTC()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Difference (UT1 - UTC) in seconds at EPOCH_TZERO.
    /**
     * @return double
     */
    public function getUT1MUTC_AT_TZERO()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Source and version of Earth Orientation Parameters used.
    public function getEOP_SOURCE()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Method used to select or interpolate sequential EOP data.
    public function getINTERP_METHOD_EOP()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source and version of celestial body ephemeris data used.
    public function getCELESTIAL_SOURCE()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startMetadata(FlatBufferBuilder $builder)
    {
        $builder->StartObject(48);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Metadata
     */
    public static function createMetadata(FlatBufferBuilder $builder, $COMMENT, $OBJECT_NAME, $INTERNATIONAL_DESIGNATOR, $CATALOG_NAME, $OBJECT_DESIGNATOR, $ALTERNATE_NAMES, $ORIGINATOR_POC, $ORIGINATOR_POSITION, $ORIGINATOR_PHONE, $ORIGINATOR_EMAIL, $ORIGINATOR_ADDRESS, $TECH_ORG, $TECH_POC, $TECH_POSITION, $TECH_PHONE, $TECH_EMAIL, $TECH_ADDRESS, $PREVIOUS_MESSAGE_ID, $NEXT_MESSAGE_ID, $ADM_MSG_LINK, $CDM_MSG_LINK, $PRM_MSG_LINK, $RDM_MSG_LINK, $TDM_MSG_LINK, $OPERATOR, $OWNER, $COUNTRY, $CONSTELLATION, $OBJECT_TYPE, $TIME_SYSTEM, $EPOCH_TZERO, $OPS_STATUS, $ORBIT_CATEGORY, $OCM_DATA_ELEMENTS, $SCLK_OFFSET_AT_EPOCH, $SCLK_SEC_PER_SI_SEC, $PREVIOUS_MESSAGE_EPOCH, $NEXT_MESSAGE_EPOCH, $START_TIME, $STOP_TIME, $TIME_SPAN, $TAIMUTC_AT_TZERO, $NEXT_LEAP_EPOCH, $NEXT_LEAP_TAIMUTC, $UT1MUTC_AT_TZERO, $EOP_SOURCE, $INTERP_METHOD_EOP, $CELESTIAL_SOURCE)
    {
        $builder->startObject(48);
        self::addCOMMENT($builder, $COMMENT);
        self::addOBJECT_NAME($builder, $OBJECT_NAME);
        self::addINTERNATIONAL_DESIGNATOR($builder, $INTERNATIONAL_DESIGNATOR);
        self::addCATALOG_NAME($builder, $CATALOG_NAME);
        self::addOBJECT_DESIGNATOR($builder, $OBJECT_DESIGNATOR);
        self::addALTERNATE_NAMES($builder, $ALTERNATE_NAMES);
        self::addORIGINATOR_POC($builder, $ORIGINATOR_POC);
        self::addORIGINATOR_POSITION($builder, $ORIGINATOR_POSITION);
        self::addORIGINATOR_PHONE($builder, $ORIGINATOR_PHONE);
        self::addORIGINATOR_EMAIL($builder, $ORIGINATOR_EMAIL);
        self::addORIGINATOR_ADDRESS($builder, $ORIGINATOR_ADDRESS);
        self::addTECH_ORG($builder, $TECH_ORG);
        self::addTECH_POC($builder, $TECH_POC);
        self::addTECH_POSITION($builder, $TECH_POSITION);
        self::addTECH_PHONE($builder, $TECH_PHONE);
        self::addTECH_EMAIL($builder, $TECH_EMAIL);
        self::addTECH_ADDRESS($builder, $TECH_ADDRESS);
        self::addPREVIOUS_MESSAGE_ID($builder, $PREVIOUS_MESSAGE_ID);
        self::addNEXT_MESSAGE_ID($builder, $NEXT_MESSAGE_ID);
        self::addADM_MSG_LINK($builder, $ADM_MSG_LINK);
        self::addCDM_MSG_LINK($builder, $CDM_MSG_LINK);
        self::addPRM_MSG_LINK($builder, $PRM_MSG_LINK);
        self::addRDM_MSG_LINK($builder, $RDM_MSG_LINK);
        self::addTDM_MSG_LINK($builder, $TDM_MSG_LINK);
        self::addOPERATOR($builder, $OPERATOR);
        self::addOWNER($builder, $OWNER);
        self::addCOUNTRY($builder, $COUNTRY);
        self::addCONSTELLATION($builder, $CONSTELLATION);
        self::addOBJECT_TYPE($builder, $OBJECT_TYPE);
        self::addTIME_SYSTEM($builder, $TIME_SYSTEM);
        self::addEPOCH_TZERO($builder, $EPOCH_TZERO);
        self::addOPS_STATUS($builder, $OPS_STATUS);
        self::addORBIT_CATEGORY($builder, $ORBIT_CATEGORY);
        self::addOCM_DATA_ELEMENTS($builder, $OCM_DATA_ELEMENTS);
        self::addSCLK_OFFSET_AT_EPOCH($builder, $SCLK_OFFSET_AT_EPOCH);
        self::addSCLK_SEC_PER_SI_SEC($builder, $SCLK_SEC_PER_SI_SEC);
        self::addPREVIOUS_MESSAGE_EPOCH($builder, $PREVIOUS_MESSAGE_EPOCH);
        self::addNEXT_MESSAGE_EPOCH($builder, $NEXT_MESSAGE_EPOCH);
        self::addSTART_TIME($builder, $START_TIME);
        self::addSTOP_TIME($builder, $STOP_TIME);
        self::addTIME_SPAN($builder, $TIME_SPAN);
        self::addTAIMUTC_AT_TZERO($builder, $TAIMUTC_AT_TZERO);
        self::addNEXT_LEAP_EPOCH($builder, $NEXT_LEAP_EPOCH);
        self::addNEXT_LEAP_TAIMUTC($builder, $NEXT_LEAP_TAIMUTC);
        self::addUT1MUTC_AT_TZERO($builder, $UT1MUTC_AT_TZERO);
        self::addEOP_SOURCE($builder, $EOP_SOURCE);
        self::addINTERP_METHOD_EOP($builder, $INTERP_METHOD_EOP);
        self::addCELESTIAL_SOURCE($builder, $CELESTIAL_SOURCE);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCOMMENT(FlatBufferBuilder $builder, $COMMENT)
    {
        $builder->addOffsetX(0, $COMMENT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCOMMENTVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCOMMENTVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOBJECT_NAME(FlatBufferBuilder $builder, $OBJECT_NAME)
    {
        $builder->addOffsetX(1, $OBJECT_NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addINTERNATIONAL_DESIGNATOR(FlatBufferBuilder $builder, $INTERNATIONAL_DESIGNATOR)
    {
        $builder->addOffsetX(2, $INTERNATIONAL_DESIGNATOR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCATALOG_NAME(FlatBufferBuilder $builder, $CATALOG_NAME)
    {
        $builder->addOffsetX(3, $CATALOG_NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOBJECT_DESIGNATOR(FlatBufferBuilder $builder, $OBJECT_DESIGNATOR)
    {
        $builder->addOffsetX(4, $OBJECT_DESIGNATOR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addALTERNATE_NAMES(FlatBufferBuilder $builder, $ALTERNATE_NAMES)
    {
        $builder->addOffsetX(5, $ALTERNATE_NAMES, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createALTERNATE_NAMESVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startALTERNATE_NAMESVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORIGINATOR_POC(FlatBufferBuilder $builder, $ORIGINATOR_POC)
    {
        $builder->addOffsetX(6, $ORIGINATOR_POC, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORIGINATOR_POSITION(FlatBufferBuilder $builder, $ORIGINATOR_POSITION)
    {
        $builder->addOffsetX(7, $ORIGINATOR_POSITION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORIGINATOR_PHONE(FlatBufferBuilder $builder, $ORIGINATOR_PHONE)
    {
        $builder->addOffsetX(8, $ORIGINATOR_PHONE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORIGINATOR_EMAIL(FlatBufferBuilder $builder, $ORIGINATOR_EMAIL)
    {
        $builder->addOffsetX(9, $ORIGINATOR_EMAIL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORIGINATOR_ADDRESS(FlatBufferBuilder $builder, $ORIGINATOR_ADDRESS)
    {
        $builder->addOffsetX(10, $ORIGINATOR_ADDRESS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTECH_ORG(FlatBufferBuilder $builder, $TECH_ORG)
    {
        $builder->addOffsetX(11, $TECH_ORG, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTECH_POC(FlatBufferBuilder $builder, $TECH_POC)
    {
        $builder->addOffsetX(12, $TECH_POC, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTECH_POSITION(FlatBufferBuilder $builder, $TECH_POSITION)
    {
        $builder->addOffsetX(13, $TECH_POSITION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTECH_PHONE(FlatBufferBuilder $builder, $TECH_PHONE)
    {
        $builder->addOffsetX(14, $TECH_PHONE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTECH_EMAIL(FlatBufferBuilder $builder, $TECH_EMAIL)
    {
        $builder->addOffsetX(15, $TECH_EMAIL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTECH_ADDRESS(FlatBufferBuilder $builder, $TECH_ADDRESS)
    {
        $builder->addOffsetX(16, $TECH_ADDRESS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPREVIOUS_MESSAGE_ID(FlatBufferBuilder $builder, $PREVIOUS_MESSAGE_ID)
    {
        $builder->addOffsetX(17, $PREVIOUS_MESSAGE_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNEXT_MESSAGE_ID(FlatBufferBuilder $builder, $NEXT_MESSAGE_ID)
    {
        $builder->addOffsetX(18, $NEXT_MESSAGE_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addADM_MSG_LINK(FlatBufferBuilder $builder, $ADM_MSG_LINK)
    {
        $builder->addOffsetX(19, $ADM_MSG_LINK, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCDM_MSG_LINK(FlatBufferBuilder $builder, $CDM_MSG_LINK)
    {
        $builder->addOffsetX(20, $CDM_MSG_LINK, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPRM_MSG_LINK(FlatBufferBuilder $builder, $PRM_MSG_LINK)
    {
        $builder->addOffsetX(21, $PRM_MSG_LINK, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRDM_MSG_LINK(FlatBufferBuilder $builder, $RDM_MSG_LINK)
    {
        $builder->addOffsetX(22, $RDM_MSG_LINK, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTDM_MSG_LINK(FlatBufferBuilder $builder, $TDM_MSG_LINK)
    {
        $builder->addOffsetX(23, $TDM_MSG_LINK, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTDM_MSG_LINKVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTDM_MSG_LINKVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOPERATOR(FlatBufferBuilder $builder, $OPERATOR)
    {
        $builder->addOffsetX(24, $OPERATOR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOWNER(FlatBufferBuilder $builder, $OWNER)
    {
        $builder->addOffsetX(25, $OWNER, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCOUNTRY(FlatBufferBuilder $builder, $COUNTRY)
    {
        $builder->addOffsetX(26, $COUNTRY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCONSTELLATION(FlatBufferBuilder $builder, $CONSTELLATION)
    {
        $builder->addOffsetX(27, $CONSTELLATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOBJECT_TYPE(FlatBufferBuilder $builder, $OBJECT_TYPE)
    {
        $builder->addOffsetX(28, $OBJECT_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTIME_SYSTEM(FlatBufferBuilder $builder, $TIME_SYSTEM)
    {
        $builder->addOffsetX(29, $TIME_SYSTEM, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEPOCH_TZERO(FlatBufferBuilder $builder, $EPOCH_TZERO)
    {
        $builder->addOffsetX(30, $EPOCH_TZERO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOPS_STATUS(FlatBufferBuilder $builder, $OPS_STATUS)
    {
        $builder->addOffsetX(31, $OPS_STATUS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORBIT_CATEGORY(FlatBufferBuilder $builder, $ORBIT_CATEGORY)
    {
        $builder->addOffsetX(32, $ORBIT_CATEGORY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addOCM_DATA_ELEMENTS(FlatBufferBuilder $builder, $OCM_DATA_ELEMENTS)
    {
        $builder->addOffsetX(33, $OCM_DATA_ELEMENTS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createOCM_DATA_ELEMENTSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startOCM_DATA_ELEMENTSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSCLK_OFFSET_AT_EPOCH(FlatBufferBuilder $builder, $SCLK_OFFSET_AT_EPOCH)
    {
        $builder->addDoubleX(34, $SCLK_OFFSET_AT_EPOCH, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSCLK_SEC_PER_SI_SEC(FlatBufferBuilder $builder, $SCLK_SEC_PER_SI_SEC)
    {
        $builder->addDoubleX(35, $SCLK_SEC_PER_SI_SEC, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPREVIOUS_MESSAGE_EPOCH(FlatBufferBuilder $builder, $PREVIOUS_MESSAGE_EPOCH)
    {
        $builder->addOffsetX(36, $PREVIOUS_MESSAGE_EPOCH, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNEXT_MESSAGE_EPOCH(FlatBufferBuilder $builder, $NEXT_MESSAGE_EPOCH)
    {
        $builder->addOffsetX(37, $NEXT_MESSAGE_EPOCH, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSTART_TIME(FlatBufferBuilder $builder, $START_TIME)
    {
        $builder->addOffsetX(38, $START_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSTOP_TIME(FlatBufferBuilder $builder, $STOP_TIME)
    {
        $builder->addOffsetX(39, $STOP_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTIME_SPAN(FlatBufferBuilder $builder, $TIME_SPAN)
    {
        $builder->addDoubleX(40, $TIME_SPAN, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTAIMUTC_AT_TZERO(FlatBufferBuilder $builder, $TAIMUTC_AT_TZERO)
    {
        $builder->addDoubleX(41, $TAIMUTC_AT_TZERO, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNEXT_LEAP_EPOCH(FlatBufferBuilder $builder, $NEXT_LEAP_EPOCH)
    {
        $builder->addOffsetX(42, $NEXT_LEAP_EPOCH, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addNEXT_LEAP_TAIMUTC(FlatBufferBuilder $builder, $NEXT_LEAP_TAIMUTC)
    {
        $builder->addDoubleX(43, $NEXT_LEAP_TAIMUTC, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUT1MUTC_AT_TZERO(FlatBufferBuilder $builder, $UT1MUTC_AT_TZERO)
    {
        $builder->addDoubleX(44, $UT1MUTC_AT_TZERO, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEOP_SOURCE(FlatBufferBuilder $builder, $EOP_SOURCE)
    {
        $builder->addOffsetX(45, $EOP_SOURCE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addINTERP_METHOD_EOP(FlatBufferBuilder $builder, $INTERP_METHOD_EOP)
    {
        $builder->addOffsetX(46, $INTERP_METHOD_EOP, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCELESTIAL_SOURCE(FlatBufferBuilder $builder, $CELESTIAL_SOURCE)
    {
        $builder->addOffsetX(47, $CELESTIAL_SOURCE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endMetadata(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
