<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class Score extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Score
     */
    public static function getRootAsScore(ByteBuffer $bb)
    {
        $obj = new Score();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function ScoreIdentifier()
    {
        return "$HYP";
    }

    public static function ScoreBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ScoreIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Score
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getNORAD_CAT_ID()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return sbyte
     */
    public function getTYPE()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \ScoreType::OUTLIER;
    }

    public function getTAG()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return float
     */
    public function getSCORE()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startScore(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Score
     */
    public static function createScore(FlatBufferBuilder $builder, $NORAD_CAT_ID, $TYPE, $TAG, $SCORE)
    {
        $builder->startObject(4);
        self::addNORAD_CAT_ID($builder, $NORAD_CAT_ID);
        self::addTYPE($builder, $TYPE);
        self::addTAG($builder, $TAG);
        self::addSCORE($builder, $SCORE);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNORAD_CAT_ID(FlatBufferBuilder $builder, $NORAD_CAT_ID)
    {
        $builder->addOffsetX(0, $NORAD_CAT_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addTYPE(FlatBufferBuilder $builder, $TYPE)
    {
        $builder->addSbyteX(1, $TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTAG(FlatBufferBuilder $builder, $TAG)
    {
        $builder->addOffsetX(2, $TAG, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addSCORE(FlatBufferBuilder $builder, $SCORE)
    {
        $builder->addFloatX(3, $SCORE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endScore(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
