<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Program Description Message
class PRG extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return PRG
     */
    public static function getRootAsPRG(ByteBuffer $bb)
    {
        $obj = new PRG();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function PRGIdentifier()
    {
        return "$PRG";
    }

    public static function PRGBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::PRGIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return PRG
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The name of the program
    public function getNAME()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Hierarchical Deterministic (HD) derivation path for the program's key, used in cryptocurrency wallets
    public function getHD_KEY_PATH()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Vector of standard message types used by the program
    /**
     * @param int offset
     * @return string
     */
    public function getMESSAGE_TYPES($j)
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMESSAGE_TYPESLength()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Vector of users associated with the program, each user can have assigned message types
    /**
     * @returnVectorOffset
     */
    public function getUSERS($j)
    {
        $o = $this->__offset(10);
        $obj = new USR();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getUSERSLength()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startPRG(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return PRG
     */
    public static function createPRG(FlatBufferBuilder $builder, $NAME, $HD_KEY_PATH, $MESSAGE_TYPES, $USERS)
    {
        $builder->startObject(4);
        self::addNAME($builder, $NAME);
        self::addHD_KEY_PATH($builder, $HD_KEY_PATH);
        self::addMESSAGE_TYPES($builder, $MESSAGE_TYPES);
        self::addUSERS($builder, $USERS);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNAME(FlatBufferBuilder $builder, $NAME)
    {
        $builder->addOffsetX(0, $NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHD_KEY_PATH(FlatBufferBuilder $builder, $HD_KEY_PATH)
    {
        $builder->addOffsetX(1, $HD_KEY_PATH, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMESSAGE_TYPES(FlatBufferBuilder $builder, $MESSAGE_TYPES)
    {
        $builder->addOffsetX(2, $MESSAGE_TYPES, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMESSAGE_TYPESVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMESSAGE_TYPESVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addUSERS(FlatBufferBuilder $builder, $USERS)
    {
        $builder->addOffsetX(3, $USERS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createUSERSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startUSERSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endPRG(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishPRGBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$PRG");
    }
}
