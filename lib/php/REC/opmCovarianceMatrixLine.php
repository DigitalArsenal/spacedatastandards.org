<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// OPM Covariance Matrix Line
class opmCovarianceMatrixLine extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return opmCovarianceMatrixLine
     */
    public static function getRootAsopmCovarianceMatrixLine(ByteBuffer $bb)
    {
        $obj = new opmCovarianceMatrixLine();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return opmCovarianceMatrixLine
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return double
     */
    public function getCX_X()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getCY_X()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getCZ_X()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getCX_DOT_X()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startopmCovarianceMatrixLine(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return opmCovarianceMatrixLine
     */
    public static function createopmCovarianceMatrixLine(FlatBufferBuilder $builder, $CX_X, $CY_X, $CZ_X, $CX_DOT_X)
    {
        $builder->startObject(4);
        self::addCX_X($builder, $CX_X);
        self::addCY_X($builder, $CY_X);
        self::addCZ_X($builder, $CZ_X);
        self::addCX_DOT_X($builder, $CX_DOT_X);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCX_X(FlatBufferBuilder $builder, $CX_X)
    {
        $builder->addDoubleX(0, $CX_X, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCY_X(FlatBufferBuilder $builder, $CY_X)
    {
        $builder->addDoubleX(1, $CY_X, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCZ_X(FlatBufferBuilder $builder, $CZ_X)
    {
        $builder->addDoubleX(2, $CZ_X, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCX_DOT_X(FlatBufferBuilder $builder, $CX_DOT_X)
    {
        $builder->addDoubleX(3, $CX_DOT_X, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endopmCovarianceMatrixLine(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
