<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Sustainer Details
class SUSTAINER extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return SUSTAINER
     */
    public static function getRootAsSUSTAINER(ByteBuffer $bb)
    {
        $obj = new SUSTAINER();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function SUSTAINERIdentifier()
    {
        return "$ROC";
    }

    public static function SUSTAINERBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::SUSTAINERIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return SUSTAINER
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Name of the Sustainer
    public function getSUSTAINER_NAME()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Thrust Produced by the Sustainer (in Newtons)
    /**
     * @return double
     */
    public function getTHRUST()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Duration of the Burn (in Seconds)
    /**
     * @return double
     */
    public function getBURN_DURATION()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSUSTAINER(FlatBufferBuilder $builder)
    {
        $builder->StartObject(3);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return SUSTAINER
     */
    public static function createSUSTAINER(FlatBufferBuilder $builder, $SUSTAINER_NAME, $THRUST, $BURN_DURATION)
    {
        $builder->startObject(3);
        self::addSUSTAINER_NAME($builder, $SUSTAINER_NAME);
        self::addTHRUST($builder, $THRUST);
        self::addBURN_DURATION($builder, $BURN_DURATION);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSUSTAINER_NAME(FlatBufferBuilder $builder, $SUSTAINER_NAME)
    {
        $builder->addOffsetX(0, $SUSTAINER_NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTHRUST(FlatBufferBuilder $builder, $THRUST)
    {
        $builder->addDoubleX(1, $THRUST, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addBURN_DURATION(FlatBufferBuilder $builder, $BURN_DURATION)
    {
        $builder->addDoubleX(2, $BURN_DURATION, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSUSTAINER(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
