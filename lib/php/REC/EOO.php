<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Electro-Optical Observation
class EOO extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EOO
     */
    public static function getRootAsEOO(ByteBuffer $bb)
    {
        $obj = new EOO();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EOOIdentifier()
    {
        return "$EOO";
    }

    public static function EOOBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EOOIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EOO
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier for Earth Observation Observation
    public function getEOBSERVATION_ID()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data
    public function getCLASSIFICATION()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Observation time in UTC
    public function getOB_TIME()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Quality of the correlation
    /**
     * @return float
     */
    public function getCORR_QUALITY()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Identifier for the satellite on orbit
    public function getID_ON_ORBIT()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier for the sensor
    public function getSENSOR_ID()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Method of data collection
    public function getCOLLECT_METHOD()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// NORAD catalog identifier for the satellite
    /**
     * @return int
     */
    public function getNORAD_CAT_ID()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Identifier for the task
    public function getTASK_ID()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier for the transaction
    public function getTRANSACTION_ID()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier for the track
    public function getTRACK_ID()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Position of the observation
    public function getOB_POSITION()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Original object identifier
    public function getORIG_OBJECT_ID()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Original sensor identifier
    public function getORIG_SENSOR_ID()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Universal Coordinated Time flag
    /**
     * @return bool
     */
    public function getUCT()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Azimuth angle
    /**
     * @return float
     */
    public function getAZIMUTH()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty in azimuth angle
    /**
     * @return float
     */
    public function getAZIMUTH_UNC()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Bias in azimuth angle
    /**
     * @return float
     */
    public function getAZIMUTH_BIAS()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change in azimuth
    /**
     * @return float
     */
    public function getAZIMUTH_RATE()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Elevation angle
    /**
     * @return float
     */
    public function getELEVATION()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty in elevation angle
    /**
     * @return float
     */
    public function getELEVATION_UNC()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Bias in elevation angle
    /**
     * @return float
     */
    public function getELEVATION_BIAS()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change in elevation
    /**
     * @return float
     */
    public function getELEVATION_RATE()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Range to the target
    /**
     * @return float
     */
    public function getRANGE()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty in range
    /**
     * @return float
     */
    public function getRANGE_UNC()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Bias in range measurement
    /**
     * @return float
     */
    public function getRANGE_BIAS()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change in range
    /**
     * @return float
     */
    public function getRANGE_RATE()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty in range rate
    /**
     * @return float
     */
    public function getRANGE_RATE_UNC()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Right ascension
    /**
     * @return float
     */
    public function getRA()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change in right ascension
    /**
     * @return float
     */
    public function getRA_RATE()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty in right ascension
    /**
     * @return float
     */
    public function getRA_UNC()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Bias in right ascension
    /**
     * @return float
     */
    public function getRA_BIAS()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Declination angle
    /**
     * @return float
     */
    public function getDECLINATION()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change in declination
    /**
     * @return float
     */
    public function getDECLINATION_RATE()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty in declination
    /**
     * @return float
     */
    public function getDECLINATION_UNC()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Bias in declination
    /**
     * @return float
     */
    public function getDECLINATION_BIAS()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// X-component of line-of-sight vector
    /**
     * @return float
     */
    public function getLOSX()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Y-component of line-of-sight vector
    /**
     * @return float
     */
    public function getLOSY()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Z-component of line-of-sight vector
    /**
     * @return float
     */
    public function getLOSZ()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty in line-of-sight vector
    /**
     * @return float
     */
    public function getLOS_UNC()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// X-component of line-of-sight velocity
    /**
     * @return float
     */
    public function getLOSXVEL()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Y-component of line-of-sight velocity
    /**
     * @return float
     */
    public function getLOSYVEL()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Z-component of line-of-sight velocity
    /**
     * @return float
     */
    public function getLOSZVEL()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Latitude of sensor
    /**
     * @return float
     */
    public function getSENLAT()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Longitude of sensor
    /**
     * @return float
     */
    public function getSENLON()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Altitude of sensor
    /**
     * @return float
     */
    public function getSENALT()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// X-coordinate of sensor position
    /**
     * @return float
     */
    public function getSENX()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Y-coordinate of sensor position
    /**
     * @return float
     */
    public function getSENY()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Z-coordinate of sensor position
    /**
     * @return float
     */
    public function getSENZ()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Number of fields of view
    /**
     * @return int
     */
    public function getFOV_COUNT()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Duration of the exposure
    /**
     * @return float
     */
    public function getEXP_DURATION()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Zero-point displacement
    /**
     * @return float
     */
    public function getZEROPTD()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Net object signal
    /**
     * @return float
     */
    public function getNET_OBJ_SIG()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty in net object signal
    /**
     * @return float
     */
    public function getNET_OBJ_SIG_UNC()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Magnitude of the observation
    /**
     * @return float
     */
    public function getMAG()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty in magnitude
    /**
     * @return float
     */
    public function getMAG_UNC()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Normalized range for magnitude
    /**
     * @return float
     */
    public function getMAG_NORM_RANGE()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Geocentric latitude
    /**
     * @return float
     */
    public function getGEOLAT()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Geocentric longitude
    /**
     * @return float
     */
    public function getGEOLON()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Geocentric altitude
    /**
     * @return float
     */
    public function getGEOALT()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Geocentric range
    /**
     * @return float
     */
    public function getGEORANGE()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Sky background level
    /**
     * @return float
     */
    public function getSKY_BKGRND()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Primary extinction
    /**
     * @return float
     */
    public function getPRIMARY_EXTINCTION()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty in primary extinction
    /**
     * @return float
     */
    public function getPRIMARY_EXTINCTION_UNC()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Solar phase angle
    /**
     * @return float
     */
    public function getSOLAR_PHASE_ANGLE()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Solar equatorial phase angle
    /**
     * @return float
     */
    public function getSOLAR_EQ_PHASE_ANGLE()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Solar declination angle
    /**
     * @return float
     */
    public function getSOLAR_DEC_ANGLE()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Shutter delay
    /**
     * @return float
     */
    public function getSHUTTER_DELAY()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Timing bias
    /**
     * @return float
     */
    public function getTIMING_BIAS()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// URI of the raw data file
    public function getRAW_FILE_URI()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Intensity of the observation
    /**
     * @return float
     */
    public function getINTENSITY()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Background intensity
    /**
     * @return float
     */
    public function getBG_INTENSITY()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Descriptor of the provided data
    public function getDESCRIPTOR()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Source of the data
    public function getSOURCE()
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Origin of the data
    public function getORIGIN()
    {
        $o = $this->__offset(152);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mode of the data
    public function getDATA_MODE()
    {
        $o = $this->__offset(154);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Creation time of the record
    public function getCREATED_AT()
    {
        $o = $this->__offset(156);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// User who created the record
    public function getCREATED_BY()
    {
        $o = $this->__offset(158);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Reference frame of the observation
    /**
     * @return sbyte
     */
    public function getREFERENCE_FRAME()
    {
        $o = $this->__offset(160);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \referenceFrame::ECEF;
    }

    /// Reference frame of the sensor
    public function getSEN_REFERENCE_FRAME()
    {
        $o = $this->__offset(162);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Flag for umbra (total eclipse)
    /**
     * @return bool
     */
    public function getUMBRA()
    {
        $o = $this->__offset(164);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Flag for penumbra (partial eclipse)
    /**
     * @return bool
     */
    public function getPENUMBRA()
    {
        $o = $this->__offset(166);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Original network identifier
    public function getORIG_NETWORK()
    {
        $o = $this->__offset(168);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Data link source
    public function getSOURCE_DL()
    {
        $o = $this->__offset(170);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of the observation
    public function getTYPE()
    {
        $o = $this->__offset(172);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEOO(FlatBufferBuilder $builder)
    {
        $builder->StartObject(85);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EOO
     */
    public static function createEOO(FlatBufferBuilder $builder, $EOBSERVATION_ID, $CLASSIFICATION, $OB_TIME, $CORR_QUALITY, $ID_ON_ORBIT, $SENSOR_ID, $COLLECT_METHOD, $NORAD_CAT_ID, $TASK_ID, $TRANSACTION_ID, $TRACK_ID, $OB_POSITION, $ORIG_OBJECT_ID, $ORIG_SENSOR_ID, $UCT, $AZIMUTH, $AZIMUTH_UNC, $AZIMUTH_BIAS, $AZIMUTH_RATE, $ELEVATION, $ELEVATION_UNC, $ELEVATION_BIAS, $ELEVATION_RATE, $RANGE, $RANGE_UNC, $RANGE_BIAS, $RANGE_RATE, $RANGE_RATE_UNC, $RA, $RA_RATE, $RA_UNC, $RA_BIAS, $DECLINATION, $DECLINATION_RATE, $DECLINATION_UNC, $DECLINATION_BIAS, $LOSX, $LOSY, $LOSZ, $LOS_UNC, $LOSXVEL, $LOSYVEL, $LOSZVEL, $SENLAT, $SENLON, $SENALT, $SENX, $SENY, $SENZ, $FOV_COUNT, $EXP_DURATION, $ZEROPTD, $NET_OBJ_SIG, $NET_OBJ_SIG_UNC, $MAG, $MAG_UNC, $MAG_NORM_RANGE, $GEOLAT, $GEOLON, $GEOALT, $GEORANGE, $SKY_BKGRND, $PRIMARY_EXTINCTION, $PRIMARY_EXTINCTION_UNC, $SOLAR_PHASE_ANGLE, $SOLAR_EQ_PHASE_ANGLE, $SOLAR_DEC_ANGLE, $SHUTTER_DELAY, $TIMING_BIAS, $RAW_FILE_URI, $INTENSITY, $BG_INTENSITY, $DESCRIPTOR, $SOURCE, $ORIGIN, $DATA_MODE, $CREATED_AT, $CREATED_BY, $REFERENCE_FRAME, $SEN_REFERENCE_FRAME, $UMBRA, $PENUMBRA, $ORIG_NETWORK, $SOURCE_DL, $TYPE)
    {
        $builder->startObject(85);
        self::addEOBSERVATION_ID($builder, $EOBSERVATION_ID);
        self::addCLASSIFICATION($builder, $CLASSIFICATION);
        self::addOB_TIME($builder, $OB_TIME);
        self::addCORR_QUALITY($builder, $CORR_QUALITY);
        self::addID_ON_ORBIT($builder, $ID_ON_ORBIT);
        self::addSENSOR_ID($builder, $SENSOR_ID);
        self::addCOLLECT_METHOD($builder, $COLLECT_METHOD);
        self::addNORAD_CAT_ID($builder, $NORAD_CAT_ID);
        self::addTASK_ID($builder, $TASK_ID);
        self::addTRANSACTION_ID($builder, $TRANSACTION_ID);
        self::addTRACK_ID($builder, $TRACK_ID);
        self::addOB_POSITION($builder, $OB_POSITION);
        self::addORIG_OBJECT_ID($builder, $ORIG_OBJECT_ID);
        self::addORIG_SENSOR_ID($builder, $ORIG_SENSOR_ID);
        self::addUCT($builder, $UCT);
        self::addAZIMUTH($builder, $AZIMUTH);
        self::addAZIMUTH_UNC($builder, $AZIMUTH_UNC);
        self::addAZIMUTH_BIAS($builder, $AZIMUTH_BIAS);
        self::addAZIMUTH_RATE($builder, $AZIMUTH_RATE);
        self::addELEVATION($builder, $ELEVATION);
        self::addELEVATION_UNC($builder, $ELEVATION_UNC);
        self::addELEVATION_BIAS($builder, $ELEVATION_BIAS);
        self::addELEVATION_RATE($builder, $ELEVATION_RATE);
        self::addRANGE($builder, $RANGE);
        self::addRANGE_UNC($builder, $RANGE_UNC);
        self::addRANGE_BIAS($builder, $RANGE_BIAS);
        self::addRANGE_RATE($builder, $RANGE_RATE);
        self::addRANGE_RATE_UNC($builder, $RANGE_RATE_UNC);
        self::addRA($builder, $RA);
        self::addRA_RATE($builder, $RA_RATE);
        self::addRA_UNC($builder, $RA_UNC);
        self::addRA_BIAS($builder, $RA_BIAS);
        self::addDECLINATION($builder, $DECLINATION);
        self::addDECLINATION_RATE($builder, $DECLINATION_RATE);
        self::addDECLINATION_UNC($builder, $DECLINATION_UNC);
        self::addDECLINATION_BIAS($builder, $DECLINATION_BIAS);
        self::addLOSX($builder, $LOSX);
        self::addLOSY($builder, $LOSY);
        self::addLOSZ($builder, $LOSZ);
        self::addLOS_UNC($builder, $LOS_UNC);
        self::addLOSXVEL($builder, $LOSXVEL);
        self::addLOSYVEL($builder, $LOSYVEL);
        self::addLOSZVEL($builder, $LOSZVEL);
        self::addSENLAT($builder, $SENLAT);
        self::addSENLON($builder, $SENLON);
        self::addSENALT($builder, $SENALT);
        self::addSENX($builder, $SENX);
        self::addSENY($builder, $SENY);
        self::addSENZ($builder, $SENZ);
        self::addFOV_COUNT($builder, $FOV_COUNT);
        self::addEXP_DURATION($builder, $EXP_DURATION);
        self::addZEROPTD($builder, $ZEROPTD);
        self::addNET_OBJ_SIG($builder, $NET_OBJ_SIG);
        self::addNET_OBJ_SIG_UNC($builder, $NET_OBJ_SIG_UNC);
        self::addMAG($builder, $MAG);
        self::addMAG_UNC($builder, $MAG_UNC);
        self::addMAG_NORM_RANGE($builder, $MAG_NORM_RANGE);
        self::addGEOLAT($builder, $GEOLAT);
        self::addGEOLON($builder, $GEOLON);
        self::addGEOALT($builder, $GEOALT);
        self::addGEORANGE($builder, $GEORANGE);
        self::addSKY_BKGRND($builder, $SKY_BKGRND);
        self::addPRIMARY_EXTINCTION($builder, $PRIMARY_EXTINCTION);
        self::addPRIMARY_EXTINCTION_UNC($builder, $PRIMARY_EXTINCTION_UNC);
        self::addSOLAR_PHASE_ANGLE($builder, $SOLAR_PHASE_ANGLE);
        self::addSOLAR_EQ_PHASE_ANGLE($builder, $SOLAR_EQ_PHASE_ANGLE);
        self::addSOLAR_DEC_ANGLE($builder, $SOLAR_DEC_ANGLE);
        self::addSHUTTER_DELAY($builder, $SHUTTER_DELAY);
        self::addTIMING_BIAS($builder, $TIMING_BIAS);
        self::addRAW_FILE_URI($builder, $RAW_FILE_URI);
        self::addINTENSITY($builder, $INTENSITY);
        self::addBG_INTENSITY($builder, $BG_INTENSITY);
        self::addDESCRIPTOR($builder, $DESCRIPTOR);
        self::addSOURCE($builder, $SOURCE);
        self::addORIGIN($builder, $ORIGIN);
        self::addDATA_MODE($builder, $DATA_MODE);
        self::addCREATED_AT($builder, $CREATED_AT);
        self::addCREATED_BY($builder, $CREATED_BY);
        self::addREFERENCE_FRAME($builder, $REFERENCE_FRAME);
        self::addSEN_REFERENCE_FRAME($builder, $SEN_REFERENCE_FRAME);
        self::addUMBRA($builder, $UMBRA);
        self::addPENUMBRA($builder, $PENUMBRA);
        self::addORIG_NETWORK($builder, $ORIG_NETWORK);
        self::addSOURCE_DL($builder, $SOURCE_DL);
        self::addTYPE($builder, $TYPE);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEOBSERVATION_ID(FlatBufferBuilder $builder, $EOBSERVATION_ID)
    {
        $builder->addOffsetX(0, $EOBSERVATION_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCLASSIFICATION(FlatBufferBuilder $builder, $CLASSIFICATION)
    {
        $builder->addOffsetX(1, $CLASSIFICATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOB_TIME(FlatBufferBuilder $builder, $OB_TIME)
    {
        $builder->addOffsetX(2, $OB_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addCORR_QUALITY(FlatBufferBuilder $builder, $CORR_QUALITY)
    {
        $builder->addFloatX(3, $CORR_QUALITY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addID_ON_ORBIT(FlatBufferBuilder $builder, $ID_ON_ORBIT)
    {
        $builder->addOffsetX(4, $ID_ON_ORBIT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSENSOR_ID(FlatBufferBuilder $builder, $SENSOR_ID)
    {
        $builder->addOffsetX(5, $SENSOR_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCOLLECT_METHOD(FlatBufferBuilder $builder, $COLLECT_METHOD)
    {
        $builder->addOffsetX(6, $COLLECT_METHOD, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNORAD_CAT_ID(FlatBufferBuilder $builder, $NORAD_CAT_ID)
    {
        $builder->addIntX(7, $NORAD_CAT_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTASK_ID(FlatBufferBuilder $builder, $TASK_ID)
    {
        $builder->addOffsetX(8, $TASK_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTRANSACTION_ID(FlatBufferBuilder $builder, $TRANSACTION_ID)
    {
        $builder->addOffsetX(9, $TRANSACTION_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTRACK_ID(FlatBufferBuilder $builder, $TRACK_ID)
    {
        $builder->addOffsetX(10, $TRACK_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOB_POSITION(FlatBufferBuilder $builder, $OB_POSITION)
    {
        $builder->addOffsetX(11, $OB_POSITION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORIG_OBJECT_ID(FlatBufferBuilder $builder, $ORIG_OBJECT_ID)
    {
        $builder->addOffsetX(12, $ORIG_OBJECT_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORIG_SENSOR_ID(FlatBufferBuilder $builder, $ORIG_SENSOR_ID)
    {
        $builder->addOffsetX(13, $ORIG_SENSOR_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addUCT(FlatBufferBuilder $builder, $UCT)
    {
        $builder->addBoolX(14, $UCT, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addAZIMUTH(FlatBufferBuilder $builder, $AZIMUTH)
    {
        $builder->addFloatX(15, $AZIMUTH, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addAZIMUTH_UNC(FlatBufferBuilder $builder, $AZIMUTH_UNC)
    {
        $builder->addFloatX(16, $AZIMUTH_UNC, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addAZIMUTH_BIAS(FlatBufferBuilder $builder, $AZIMUTH_BIAS)
    {
        $builder->addFloatX(17, $AZIMUTH_BIAS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addAZIMUTH_RATE(FlatBufferBuilder $builder, $AZIMUTH_RATE)
    {
        $builder->addFloatX(18, $AZIMUTH_RATE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addELEVATION(FlatBufferBuilder $builder, $ELEVATION)
    {
        $builder->addFloatX(19, $ELEVATION, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addELEVATION_UNC(FlatBufferBuilder $builder, $ELEVATION_UNC)
    {
        $builder->addFloatX(20, $ELEVATION_UNC, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addELEVATION_BIAS(FlatBufferBuilder $builder, $ELEVATION_BIAS)
    {
        $builder->addFloatX(21, $ELEVATION_BIAS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addELEVATION_RATE(FlatBufferBuilder $builder, $ELEVATION_RATE)
    {
        $builder->addFloatX(22, $ELEVATION_RATE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addRANGE(FlatBufferBuilder $builder, $RANGE)
    {
        $builder->addFloatX(23, $RANGE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addRANGE_UNC(FlatBufferBuilder $builder, $RANGE_UNC)
    {
        $builder->addFloatX(24, $RANGE_UNC, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addRANGE_BIAS(FlatBufferBuilder $builder, $RANGE_BIAS)
    {
        $builder->addFloatX(25, $RANGE_BIAS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addRANGE_RATE(FlatBufferBuilder $builder, $RANGE_RATE)
    {
        $builder->addFloatX(26, $RANGE_RATE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addRANGE_RATE_UNC(FlatBufferBuilder $builder, $RANGE_RATE_UNC)
    {
        $builder->addFloatX(27, $RANGE_RATE_UNC, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addRA(FlatBufferBuilder $builder, $RA)
    {
        $builder->addFloatX(28, $RA, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addRA_RATE(FlatBufferBuilder $builder, $RA_RATE)
    {
        $builder->addFloatX(29, $RA_RATE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addRA_UNC(FlatBufferBuilder $builder, $RA_UNC)
    {
        $builder->addFloatX(30, $RA_UNC, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addRA_BIAS(FlatBufferBuilder $builder, $RA_BIAS)
    {
        $builder->addFloatX(31, $RA_BIAS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addDECLINATION(FlatBufferBuilder $builder, $DECLINATION)
    {
        $builder->addFloatX(32, $DECLINATION, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addDECLINATION_RATE(FlatBufferBuilder $builder, $DECLINATION_RATE)
    {
        $builder->addFloatX(33, $DECLINATION_RATE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addDECLINATION_UNC(FlatBufferBuilder $builder, $DECLINATION_UNC)
    {
        $builder->addFloatX(34, $DECLINATION_UNC, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addDECLINATION_BIAS(FlatBufferBuilder $builder, $DECLINATION_BIAS)
    {
        $builder->addFloatX(35, $DECLINATION_BIAS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addLOSX(FlatBufferBuilder $builder, $LOSX)
    {
        $builder->addFloatX(36, $LOSX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addLOSY(FlatBufferBuilder $builder, $LOSY)
    {
        $builder->addFloatX(37, $LOSY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addLOSZ(FlatBufferBuilder $builder, $LOSZ)
    {
        $builder->addFloatX(38, $LOSZ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addLOS_UNC(FlatBufferBuilder $builder, $LOS_UNC)
    {
        $builder->addFloatX(39, $LOS_UNC, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addLOSXVEL(FlatBufferBuilder $builder, $LOSXVEL)
    {
        $builder->addFloatX(40, $LOSXVEL, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addLOSYVEL(FlatBufferBuilder $builder, $LOSYVEL)
    {
        $builder->addFloatX(41, $LOSYVEL, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addLOSZVEL(FlatBufferBuilder $builder, $LOSZVEL)
    {
        $builder->addFloatX(42, $LOSZVEL, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addSENLAT(FlatBufferBuilder $builder, $SENLAT)
    {
        $builder->addFloatX(43, $SENLAT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addSENLON(FlatBufferBuilder $builder, $SENLON)
    {
        $builder->addFloatX(44, $SENLON, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addSENALT(FlatBufferBuilder $builder, $SENALT)
    {
        $builder->addFloatX(45, $SENALT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addSENX(FlatBufferBuilder $builder, $SENX)
    {
        $builder->addFloatX(46, $SENX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addSENY(FlatBufferBuilder $builder, $SENY)
    {
        $builder->addFloatX(47, $SENY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addSENZ(FlatBufferBuilder $builder, $SENZ)
    {
        $builder->addFloatX(48, $SENZ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addFOV_COUNT(FlatBufferBuilder $builder, $FOV_COUNT)
    {
        $builder->addIntX(49, $FOV_COUNT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addEXP_DURATION(FlatBufferBuilder $builder, $EXP_DURATION)
    {
        $builder->addFloatX(50, $EXP_DURATION, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addZEROPTD(FlatBufferBuilder $builder, $ZEROPTD)
    {
        $builder->addFloatX(51, $ZEROPTD, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addNET_OBJ_SIG(FlatBufferBuilder $builder, $NET_OBJ_SIG)
    {
        $builder->addFloatX(52, $NET_OBJ_SIG, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addNET_OBJ_SIG_UNC(FlatBufferBuilder $builder, $NET_OBJ_SIG_UNC)
    {
        $builder->addFloatX(53, $NET_OBJ_SIG_UNC, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addMAG(FlatBufferBuilder $builder, $MAG)
    {
        $builder->addFloatX(54, $MAG, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addMAG_UNC(FlatBufferBuilder $builder, $MAG_UNC)
    {
        $builder->addFloatX(55, $MAG_UNC, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addMAG_NORM_RANGE(FlatBufferBuilder $builder, $MAG_NORM_RANGE)
    {
        $builder->addFloatX(56, $MAG_NORM_RANGE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addGEOLAT(FlatBufferBuilder $builder, $GEOLAT)
    {
        $builder->addFloatX(57, $GEOLAT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addGEOLON(FlatBufferBuilder $builder, $GEOLON)
    {
        $builder->addFloatX(58, $GEOLON, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addGEOALT(FlatBufferBuilder $builder, $GEOALT)
    {
        $builder->addFloatX(59, $GEOALT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addGEORANGE(FlatBufferBuilder $builder, $GEORANGE)
    {
        $builder->addFloatX(60, $GEORANGE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addSKY_BKGRND(FlatBufferBuilder $builder, $SKY_BKGRND)
    {
        $builder->addFloatX(61, $SKY_BKGRND, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addPRIMARY_EXTINCTION(FlatBufferBuilder $builder, $PRIMARY_EXTINCTION)
    {
        $builder->addFloatX(62, $PRIMARY_EXTINCTION, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addPRIMARY_EXTINCTION_UNC(FlatBufferBuilder $builder, $PRIMARY_EXTINCTION_UNC)
    {
        $builder->addFloatX(63, $PRIMARY_EXTINCTION_UNC, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addSOLAR_PHASE_ANGLE(FlatBufferBuilder $builder, $SOLAR_PHASE_ANGLE)
    {
        $builder->addFloatX(64, $SOLAR_PHASE_ANGLE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addSOLAR_EQ_PHASE_ANGLE(FlatBufferBuilder $builder, $SOLAR_EQ_PHASE_ANGLE)
    {
        $builder->addFloatX(65, $SOLAR_EQ_PHASE_ANGLE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addSOLAR_DEC_ANGLE(FlatBufferBuilder $builder, $SOLAR_DEC_ANGLE)
    {
        $builder->addFloatX(66, $SOLAR_DEC_ANGLE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addSHUTTER_DELAY(FlatBufferBuilder $builder, $SHUTTER_DELAY)
    {
        $builder->addFloatX(67, $SHUTTER_DELAY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addTIMING_BIAS(FlatBufferBuilder $builder, $TIMING_BIAS)
    {
        $builder->addFloatX(68, $TIMING_BIAS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRAW_FILE_URI(FlatBufferBuilder $builder, $RAW_FILE_URI)
    {
        $builder->addOffsetX(69, $RAW_FILE_URI, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addINTENSITY(FlatBufferBuilder $builder, $INTENSITY)
    {
        $builder->addFloatX(70, $INTENSITY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addBG_INTENSITY(FlatBufferBuilder $builder, $BG_INTENSITY)
    {
        $builder->addFloatX(71, $BG_INTENSITY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDESCRIPTOR(FlatBufferBuilder $builder, $DESCRIPTOR)
    {
        $builder->addOffsetX(72, $DESCRIPTOR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSOURCE(FlatBufferBuilder $builder, $SOURCE)
    {
        $builder->addOffsetX(73, $SOURCE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORIGIN(FlatBufferBuilder $builder, $ORIGIN)
    {
        $builder->addOffsetX(74, $ORIGIN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDATA_MODE(FlatBufferBuilder $builder, $DATA_MODE)
    {
        $builder->addOffsetX(75, $DATA_MODE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCREATED_AT(FlatBufferBuilder $builder, $CREATED_AT)
    {
        $builder->addOffsetX(76, $CREATED_AT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCREATED_BY(FlatBufferBuilder $builder, $CREATED_BY)
    {
        $builder->addOffsetX(77, $CREATED_BY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addREFERENCE_FRAME(FlatBufferBuilder $builder, $REFERENCE_FRAME)
    {
        $builder->addSbyteX(78, $REFERENCE_FRAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSEN_REFERENCE_FRAME(FlatBufferBuilder $builder, $SEN_REFERENCE_FRAME)
    {
        $builder->addOffsetX(79, $SEN_REFERENCE_FRAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addUMBRA(FlatBufferBuilder $builder, $UMBRA)
    {
        $builder->addBoolX(80, $UMBRA, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addPENUMBRA(FlatBufferBuilder $builder, $PENUMBRA)
    {
        $builder->addBoolX(81, $PENUMBRA, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORIG_NETWORK(FlatBufferBuilder $builder, $ORIG_NETWORK)
    {
        $builder->addOffsetX(82, $ORIG_NETWORK, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSOURCE_DL(FlatBufferBuilder $builder, $SOURCE_DL)
    {
        $builder->addOffsetX(83, $SOURCE_DL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTYPE(FlatBufferBuilder $builder, $TYPE)
    {
        $builder->addOffsetX(84, $TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEOO(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEOOBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$EOO");
    }
}
