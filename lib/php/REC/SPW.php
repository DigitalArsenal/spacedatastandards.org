<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Space Weather Data Record
class SPW extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return SPW
     */
    public static function getRootAsSPW(ByteBuffer $bb)
    {
        $obj = new SPW();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function SPWIdentifier()
    {
        return "$SPW";
    }

    public static function SPWBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::SPWIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return SPW
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Date in ISO 8601 format
    public function getDATE()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Bartels Solar Rotation Number
    /**
     * @return int
     */
    public function getBSRN()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Day within Bartels cycle (1-27)
    /**
     * @return int
     */
    public function getND()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary 3-hour Range Index (Kp) for 0000-0300 UT, multiplied by 10
    /**
     * @return int
     */
    public function getKP1()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary 3-hour Range Index (Kp) for 0300-0600 UT, multiplied by 10
    /**
     * @return int
     */
    public function getKP2()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary 3-hour Range Index (Kp) for 0600-0900 UT, multiplied by 10
    /**
     * @return int
     */
    public function getKP3()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary 3-hour Range Index (Kp) for 0900-1200 UT, multiplied by 10
    /**
     * @return int
     */
    public function getKP4()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary 3-hour Range Index (Kp) for 1200-1500 UT, multiplied by 10
    /**
     * @return int
     */
    public function getKP5()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary 3-hour Range Index (Kp) for 1500-1800 UT, multiplied by 10
    /**
     * @return int
     */
    public function getKP6()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary 3-hour Range Index (Kp) for 1800-2100 UT, multiplied by 10
    /**
     * @return int
     */
    public function getKP7()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary 3-hour Range Index (Kp) for 2100-0000 UT, multiplied by 10
    /**
     * @return int
     */
    public function getKP8()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Sum of the 8 Kp indices for the day
    /**
     * @return int
     */
    public function getKP_SUM()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary Equivalent Amplitude (Ap) for 0000-0300 UT
    /**
     * @return int
     */
    public function getAP1()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary Equivalent Amplitude (Ap) for 0300-0600 UT
    /**
     * @return int
     */
    public function getAP2()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary Equivalent Amplitude (Ap) for 0600-0900 UT
    /**
     * @return int
     */
    public function getAP3()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary Equivalent Amplitude (Ap) for 0900-1200 UT
    /**
     * @return int
     */
    public function getAP4()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary Equivalent Amplitude (Ap) for 1200-1500 UT
    /**
     * @return int
     */
    public function getAP5()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary Equivalent Amplitude (Ap) for 1500-1800 UT
    /**
     * @return int
     */
    public function getAP6()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary Equivalent Amplitude (Ap) for 1800-2100 UT
    /**
     * @return int
     */
    public function getAP7()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary Equivalent Amplitude (Ap) for 2100-0000 UT
    /**
     * @return int
     */
    public function getAP8()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Arithmetic average of the 8 Ap indices for the day
    /**
     * @return int
     */
    public function getAP_AVG()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Planetary Daily Character Figure (0.0 to 2.5)
    /**
     * @return float
     */
    public function getCP()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// C9 index (0-9)
    /**
     * @return int
     */
    public function getC9()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// International Sunspot Number
    /**
     * @return int
     */
    public function getISN()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Observed 10.7cm Solar Radio Flux
    /**
     * @return float
     */
    public function getF107_OBS()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Adjusted 10.7cm Solar Radio Flux (to 1 AU)
    /**
     * @return float
     */
    public function getF107_ADJ()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// F10.7 Data Type
    /**
     * @return sbyte
     */
    public function getF107_DATA_TYPE()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \F107DataType::OBS;
    }

    /// 81-day centered average of observed F10.7
    /**
     * @return float
     */
    public function getF107_OBS_CENTER81()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// 81-day trailing average of observed F10.7
    /**
     * @return float
     */
    public function getF107_OBS_LAST81()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// 81-day centered average of adjusted F10.7
    /**
     * @return float
     */
    public function getF107_ADJ_CENTER81()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// 81-day trailing average of adjusted F10.7
    /**
     * @return float
     */
    public function getF107_ADJ_LAST81()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startSPW(FlatBufferBuilder $builder)
    {
        $builder->StartObject(31);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return SPW
     */
    public static function createSPW(FlatBufferBuilder $builder, $DATE, $BSRN, $ND, $KP1, $KP2, $KP3, $KP4, $KP5, $KP6, $KP7, $KP8, $KP_SUM, $AP1, $AP2, $AP3, $AP4, $AP5, $AP6, $AP7, $AP8, $AP_AVG, $CP, $C9, $ISN, $F107_OBS, $F107_ADJ, $F107_DATA_TYPE, $F107_OBS_CENTER81, $F107_OBS_LAST81, $F107_ADJ_CENTER81, $F107_ADJ_LAST81)
    {
        $builder->startObject(31);
        self::addDATE($builder, $DATE);
        self::addBSRN($builder, $BSRN);
        self::addND($builder, $ND);
        self::addKP1($builder, $KP1);
        self::addKP2($builder, $KP2);
        self::addKP3($builder, $KP3);
        self::addKP4($builder, $KP4);
        self::addKP5($builder, $KP5);
        self::addKP6($builder, $KP6);
        self::addKP7($builder, $KP7);
        self::addKP8($builder, $KP8);
        self::addKP_SUM($builder, $KP_SUM);
        self::addAP1($builder, $AP1);
        self::addAP2($builder, $AP2);
        self::addAP3($builder, $AP3);
        self::addAP4($builder, $AP4);
        self::addAP5($builder, $AP5);
        self::addAP6($builder, $AP6);
        self::addAP7($builder, $AP7);
        self::addAP8($builder, $AP8);
        self::addAP_AVG($builder, $AP_AVG);
        self::addCP($builder, $CP);
        self::addC9($builder, $C9);
        self::addISN($builder, $ISN);
        self::addF107_OBS($builder, $F107_OBS);
        self::addF107_ADJ($builder, $F107_ADJ);
        self::addF107_DATA_TYPE($builder, $F107_DATA_TYPE);
        self::addF107_OBS_CENTER81($builder, $F107_OBS_CENTER81);
        self::addF107_OBS_LAST81($builder, $F107_OBS_LAST81);
        self::addF107_ADJ_CENTER81($builder, $F107_ADJ_CENTER81);
        self::addF107_ADJ_LAST81($builder, $F107_ADJ_LAST81);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDATE(FlatBufferBuilder $builder, $DATE)
    {
        $builder->addOffsetX(0, $DATE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addBSRN(FlatBufferBuilder $builder, $BSRN)
    {
        $builder->addIntX(1, $BSRN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addND(FlatBufferBuilder $builder, $ND)
    {
        $builder->addIntX(2, $ND, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addKP1(FlatBufferBuilder $builder, $KP1)
    {
        $builder->addIntX(3, $KP1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addKP2(FlatBufferBuilder $builder, $KP2)
    {
        $builder->addIntX(4, $KP2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addKP3(FlatBufferBuilder $builder, $KP3)
    {
        $builder->addIntX(5, $KP3, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addKP4(FlatBufferBuilder $builder, $KP4)
    {
        $builder->addIntX(6, $KP4, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addKP5(FlatBufferBuilder $builder, $KP5)
    {
        $builder->addIntX(7, $KP5, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addKP6(FlatBufferBuilder $builder, $KP6)
    {
        $builder->addIntX(8, $KP6, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addKP7(FlatBufferBuilder $builder, $KP7)
    {
        $builder->addIntX(9, $KP7, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addKP8(FlatBufferBuilder $builder, $KP8)
    {
        $builder->addIntX(10, $KP8, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addKP_SUM(FlatBufferBuilder $builder, $KP_SUM)
    {
        $builder->addIntX(11, $KP_SUM, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAP1(FlatBufferBuilder $builder, $AP1)
    {
        $builder->addIntX(12, $AP1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAP2(FlatBufferBuilder $builder, $AP2)
    {
        $builder->addIntX(13, $AP2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAP3(FlatBufferBuilder $builder, $AP3)
    {
        $builder->addIntX(14, $AP3, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAP4(FlatBufferBuilder $builder, $AP4)
    {
        $builder->addIntX(15, $AP4, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAP5(FlatBufferBuilder $builder, $AP5)
    {
        $builder->addIntX(16, $AP5, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAP6(FlatBufferBuilder $builder, $AP6)
    {
        $builder->addIntX(17, $AP6, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAP7(FlatBufferBuilder $builder, $AP7)
    {
        $builder->addIntX(18, $AP7, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAP8(FlatBufferBuilder $builder, $AP8)
    {
        $builder->addIntX(19, $AP8, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAP_AVG(FlatBufferBuilder $builder, $AP_AVG)
    {
        $builder->addIntX(20, $AP_AVG, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addCP(FlatBufferBuilder $builder, $CP)
    {
        $builder->addFloatX(21, $CP, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addC9(FlatBufferBuilder $builder, $C9)
    {
        $builder->addIntX(22, $C9, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addISN(FlatBufferBuilder $builder, $ISN)
    {
        $builder->addIntX(23, $ISN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addF107_OBS(FlatBufferBuilder $builder, $F107_OBS)
    {
        $builder->addFloatX(24, $F107_OBS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addF107_ADJ(FlatBufferBuilder $builder, $F107_ADJ)
    {
        $builder->addFloatX(25, $F107_ADJ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addF107_DATA_TYPE(FlatBufferBuilder $builder, $F107_DATA_TYPE)
    {
        $builder->addSbyteX(26, $F107_DATA_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addF107_OBS_CENTER81(FlatBufferBuilder $builder, $F107_OBS_CENTER81)
    {
        $builder->addFloatX(27, $F107_OBS_CENTER81, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addF107_OBS_LAST81(FlatBufferBuilder $builder, $F107_OBS_LAST81)
    {
        $builder->addFloatX(28, $F107_OBS_LAST81, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addF107_ADJ_CENTER81(FlatBufferBuilder $builder, $F107_ADJ_CENTER81)
    {
        $builder->addFloatX(29, $F107_ADJ_CENTER81, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addF107_ADJ_LAST81(FlatBufferBuilder $builder, $F107_ADJ_LAST81)
    {
        $builder->addFloatX(30, $F107_ADJ_LAST81, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endSPW(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishSPWBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$SPW");
    }
}
