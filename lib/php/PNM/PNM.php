<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Details of Published Message
class PNM extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return PNM
     */
    public static function getRootAsPNM(ByteBuffer $bb)
    {
        $obj = new PNM();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function PNMIdentifier()
    {
        return "$PNM";
    }

    public static function PNMBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::PNMIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return PNM
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Multiformat Address
    /// https://multiformats.io/multiaddr/
    /// A universal address format for representing multiple network protocols. Examples include:
    /// - /ip4/192.168.1.1/tcp/80 for an IPv4 address with TCP protocol
    /// - /ip6zone/x/ip6/::1 for an IPv6 address with a zone
    /// - /dns4/example.com for a domain name resolvable only to IPv4 addresses
    /// - /ipfs/bafybeiccfclkdtucu6y4yc5cpr6y3yuinr67svmii46v5cfcrkp47ihehy/README.txt -IPFS address w/CID and path to `README.txt`.
    public function getMULTIFORMAT_ADDRESS()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Publish Time OF THE Publish Notification Message
    public function getPUBLISH_TIMESTAMP()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Concatenated Content Identifier (CID)
    /// This field is a unique ID for distributed systems (CID).
    /// The CID provides a unique identifier within distributed systems, as detailed at https://github.com/multiformats/cid. 
    public function getCID()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// File ID
    /// This field is the file ID / Name
    public function getFID()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Digital Signature of the CID
    /// This is the digital signature of the CID, signed using the specified cryptographic method.
    public function getSIGNATURE()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Timestamp Signature
    /// Digital signature of the publish timestamp, using the specified cryptographic method for timestamp verification.
    public function getTIMESTAMP_SIGNATURE()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of Cryptographic Signature Used
    /// Specifies the type of cryptographic signature used for the SIGNATURE field, indicating the specific blockchain technology, such as Ethereum or BTC.
    public function getSIGNATURE_TYPE()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of Cryptographic Signature Used for Timestamp
    /// Specifies the type of cryptographic signature used for the TIMESTAMP_SIGNATURE field, indicating the specific blockchain technology, such as Ethereum or BTC.
    public function getTIMESTAMP_SIGNATURE_TYPE()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startPNM(FlatBufferBuilder $builder)
    {
        $builder->StartObject(8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return PNM
     */
    public static function createPNM(FlatBufferBuilder $builder, $MULTIFORMAT_ADDRESS, $PUBLISH_TIMESTAMP, $CID, $FID, $SIGNATURE, $TIMESTAMP_SIGNATURE, $SIGNATURE_TYPE, $TIMESTAMP_SIGNATURE_TYPE)
    {
        $builder->startObject(8);
        self::addMULTIFORMAT_ADDRESS($builder, $MULTIFORMAT_ADDRESS);
        self::addPUBLISH_TIMESTAMP($builder, $PUBLISH_TIMESTAMP);
        self::addCID($builder, $CID);
        self::addFID($builder, $FID);
        self::addSIGNATURE($builder, $SIGNATURE);
        self::addTIMESTAMP_SIGNATURE($builder, $TIMESTAMP_SIGNATURE);
        self::addSIGNATURE_TYPE($builder, $SIGNATURE_TYPE);
        self::addTIMESTAMP_SIGNATURE_TYPE($builder, $TIMESTAMP_SIGNATURE_TYPE);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMULTIFORMAT_ADDRESS(FlatBufferBuilder $builder, $MULTIFORMAT_ADDRESS)
    {
        $builder->addOffsetX(0, $MULTIFORMAT_ADDRESS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPUBLISH_TIMESTAMP(FlatBufferBuilder $builder, $PUBLISH_TIMESTAMP)
    {
        $builder->addOffsetX(1, $PUBLISH_TIMESTAMP, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCID(FlatBufferBuilder $builder, $CID)
    {
        $builder->addOffsetX(2, $CID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFID(FlatBufferBuilder $builder, $FID)
    {
        $builder->addOffsetX(3, $FID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSIGNATURE(FlatBufferBuilder $builder, $SIGNATURE)
    {
        $builder->addOffsetX(4, $SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTIMESTAMP_SIGNATURE(FlatBufferBuilder $builder, $TIMESTAMP_SIGNATURE)
    {
        $builder->addOffsetX(5, $TIMESTAMP_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSIGNATURE_TYPE(FlatBufferBuilder $builder, $SIGNATURE_TYPE)
    {
        $builder->addOffsetX(6, $SIGNATURE_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTIMESTAMP_SIGNATURE_TYPE(FlatBufferBuilder $builder, $TIMESTAMP_SIGNATURE_TYPE)
    {
        $builder->addOffsetX(7, $TIMESTAMP_SIGNATURE_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endPNM(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishPNMBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$PNM");
    }
}
