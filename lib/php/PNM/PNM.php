<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Publish Notification Message
class PNM extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return PNM
     */
    public static function getRootAsPNM(ByteBuffer $bb)
    {
        $obj = new PNM();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function PNMIdentifier()
    {
        return "$PNM";
    }

    public static function PNMBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::PNMIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return PNM
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unencrypted PNM Details
    /// This field contains the details of the Publish Notification Message without encryption.
    public function getFILE()
    {
        $obj = new Detail();
        $o = $this->__offset(4);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// Encrypted PNM Details
    /// This field contains the details of the Publish Notification Message with encryption.
    public function getFILE_ENCRYPTED()
    {
        $obj = new Detail();
        $o = $this->__offset(6);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startPNM(FlatBufferBuilder $builder)
    {
        $builder->StartObject(2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return PNM
     */
    public static function createPNM(FlatBufferBuilder $builder, $FILE, $FILE_ENCRYPTED)
    {
        $builder->startObject(2);
        self::addFILE($builder, $FILE);
        self::addFILE_ENCRYPTED($builder, $FILE_ENCRYPTED);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addFILE(FlatBufferBuilder $builder, $FILE)
    {
        $builder->addOffsetX(0, $FILE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addFILE_ENCRYPTED(FlatBufferBuilder $builder, $FILE_ENCRYPTED)
    {
        $builder->addOffsetX(1, $FILE_ENCRYPTED, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endPNM(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
