<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Publish Notification Message
/// This table includes a comprehensive set of cryptographic hashes and a digital signature for file publication.
class PNM extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return PNM
     */
    public static function getRootAsPNM(ByteBuffer $bb)
    {
        $obj = new PNM();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function PNMIdentifier()
    {
        return "$PNM";
    }

    public static function PNMBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::PNMIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return PNM
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// IPFS Content Identifier (CID)
    /// The hash of a file stored on the InterPlanetary File System (IPFS).
    /// Refer to the section on IPFS integration for details.
    public function getIPFS_CID()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier generated from the data provider's public key
    public function getKEY_ADDRESS()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Ethereum Digital Signature
    /// Digital signature of the IPFS file hash using Ethereum's signing mechanism.
    /// Refer to the Ethereum Blockchain integration section for details.
    public function getETH_DIGITAL_SIGNATURE()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Bitcoin Digital Signature
    /// Digital signature of the IPFS file hash using Bitcoin's signing mechanism.
    /// Refer to the Bitcoin Blockchain integration section for details.
    public function getBTC_DIGITAL_SIGNATURE()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Litecoin Digital Signature
    /// Digital signature of the IPFS file hash using Litecoin's signing mechanism.
    /// Refer to the Litecoin Blockchain integration section for details.
    public function getLTC_DIGITAL_SIGNATURE()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Ripple Digital Signature
    /// Digital signature of the IPFS file hash using Ripple's signing mechanism.
    /// Refer to the Ripple Blockchain integration section for details.
    public function getXRP_DIGITAL_SIGNATURE()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Cardano Digital Signature
    /// Digital signature of the IPFS file hash using Cardano's signing mechanism.
    /// Refer to the Cardano Blockchain integration section for details.
    public function getADA_DIGITAL_SIGNATURE()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Stellar Digital Signature
    /// Digital signature of the IPFS file hash using Stellar's signing mechanism.
    /// Refer to the Stellar Blockchain integration section for details.
    public function getXLM_DIGITAL_SIGNATURE()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Dogecoin Digital Signature
    /// Digital signature of the IPFS file hash using Dogecoin's signing mechanism.
    /// Refer to the Dogecoin Blockchain integration section for details.
    public function getDOGE_DIGITAL_SIGNATURE()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Monero Digital Signature
    /// Digital signature of the IPFS file hash using Monero's signing mechanism.
    /// Refer to the Monero Blockchain integration section for details.
    public function getXMR_DIGITAL_SIGNATURE()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Polkadot Digital Signature
    /// Digital signature of the IPFS file hash using Polkadot's signing mechanism.
    /// Refer to the Polkadot Blockchain integration section for details.
    public function getDOT_DIGITAL_SIGNATURE()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Filecoin Digital Signature
    /// Digital signature of the IPFS file hash using Filecoin's signing mechanism.
    /// Refer to the Filecoin Blockchain integration section for details.
    public function getFIL_DIGITAL_SIGNATURE()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Tezos Digital Signature
    /// Digital signature of the IPFS file hash using Tezos's signing mechanism.
    /// Refer to the Tezos Blockchain integration section for details.
    public function getXTZ_DIGITAL_SIGNATURE()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Cosmos Digital Signature
    /// Digital signature of the IPFS file hash using Cosmos's signing mechanism.
    /// Refer to the Cosmos Blockchain integration section for details.
    public function getATOM_DIGITAL_SIGNATURE()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Tron Digital Signature
    /// Digital signature of the IPFS file hash using Tron's signing mechanism.
    /// Refer to the Tron Blockchain integration section for details.
    public function getTRX_DIGITAL_SIGNATURE()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Binance Coin Digital Signature
    /// Digital signature of the IPFS file hash using Binance Coin's signing mechanism.
    /// Refer to the Binance Coin Blockchain integration section for details.
    public function getBNB_DIGITAL_SIGNATURE()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Avalanche Digital Signature
    /// Digital signature of the IPFS file hash using Avalanche's signing mechanism.
    /// Refer to the Avalanche Blockchain integration section for details.
    public function getAVAX_DIGITAL_SIGNATURE()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Solana Digital Signature
    /// Digital signature of the IPFS file hash using Solana's signing mechanism.
    /// Refer to the Solana Blockchain integration section for details.
    public function getSOL_DIGITAL_SIGNATURE()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startPNM(FlatBufferBuilder $builder)
    {
        $builder->StartObject(18);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return PNM
     */
    public static function createPNM(FlatBufferBuilder $builder, $IPFS_CID, $KEY_ADDRESS, $ETH_DIGITAL_SIGNATURE, $BTC_DIGITAL_SIGNATURE, $LTC_DIGITAL_SIGNATURE, $XRP_DIGITAL_SIGNATURE, $ADA_DIGITAL_SIGNATURE, $XLM_DIGITAL_SIGNATURE, $DOGE_DIGITAL_SIGNATURE, $XMR_DIGITAL_SIGNATURE, $DOT_DIGITAL_SIGNATURE, $FIL_DIGITAL_SIGNATURE, $XTZ_DIGITAL_SIGNATURE, $ATOM_DIGITAL_SIGNATURE, $TRX_DIGITAL_SIGNATURE, $BNB_DIGITAL_SIGNATURE, $AVAX_DIGITAL_SIGNATURE, $SOL_DIGITAL_SIGNATURE)
    {
        $builder->startObject(18);
        self::addIPFS_CID($builder, $IPFS_CID);
        self::addKEY_ADDRESS($builder, $KEY_ADDRESS);
        self::addETH_DIGITAL_SIGNATURE($builder, $ETH_DIGITAL_SIGNATURE);
        self::addBTC_DIGITAL_SIGNATURE($builder, $BTC_DIGITAL_SIGNATURE);
        self::addLTC_DIGITAL_SIGNATURE($builder, $LTC_DIGITAL_SIGNATURE);
        self::addXRP_DIGITAL_SIGNATURE($builder, $XRP_DIGITAL_SIGNATURE);
        self::addADA_DIGITAL_SIGNATURE($builder, $ADA_DIGITAL_SIGNATURE);
        self::addXLM_DIGITAL_SIGNATURE($builder, $XLM_DIGITAL_SIGNATURE);
        self::addDOGE_DIGITAL_SIGNATURE($builder, $DOGE_DIGITAL_SIGNATURE);
        self::addXMR_DIGITAL_SIGNATURE($builder, $XMR_DIGITAL_SIGNATURE);
        self::addDOT_DIGITAL_SIGNATURE($builder, $DOT_DIGITAL_SIGNATURE);
        self::addFIL_DIGITAL_SIGNATURE($builder, $FIL_DIGITAL_SIGNATURE);
        self::addXTZ_DIGITAL_SIGNATURE($builder, $XTZ_DIGITAL_SIGNATURE);
        self::addATOM_DIGITAL_SIGNATURE($builder, $ATOM_DIGITAL_SIGNATURE);
        self::addTRX_DIGITAL_SIGNATURE($builder, $TRX_DIGITAL_SIGNATURE);
        self::addBNB_DIGITAL_SIGNATURE($builder, $BNB_DIGITAL_SIGNATURE);
        self::addAVAX_DIGITAL_SIGNATURE($builder, $AVAX_DIGITAL_SIGNATURE);
        self::addSOL_DIGITAL_SIGNATURE($builder, $SOL_DIGITAL_SIGNATURE);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIPFS_CID(FlatBufferBuilder $builder, $IPFS_CID)
    {
        $builder->addOffsetX(0, $IPFS_CID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addKEY_ADDRESS(FlatBufferBuilder $builder, $KEY_ADDRESS)
    {
        $builder->addOffsetX(1, $KEY_ADDRESS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addETH_DIGITAL_SIGNATURE(FlatBufferBuilder $builder, $ETH_DIGITAL_SIGNATURE)
    {
        $builder->addOffsetX(2, $ETH_DIGITAL_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBTC_DIGITAL_SIGNATURE(FlatBufferBuilder $builder, $BTC_DIGITAL_SIGNATURE)
    {
        $builder->addOffsetX(3, $BTC_DIGITAL_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLTC_DIGITAL_SIGNATURE(FlatBufferBuilder $builder, $LTC_DIGITAL_SIGNATURE)
    {
        $builder->addOffsetX(4, $LTC_DIGITAL_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addXRP_DIGITAL_SIGNATURE(FlatBufferBuilder $builder, $XRP_DIGITAL_SIGNATURE)
    {
        $builder->addOffsetX(5, $XRP_DIGITAL_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addADA_DIGITAL_SIGNATURE(FlatBufferBuilder $builder, $ADA_DIGITAL_SIGNATURE)
    {
        $builder->addOffsetX(6, $ADA_DIGITAL_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addXLM_DIGITAL_SIGNATURE(FlatBufferBuilder $builder, $XLM_DIGITAL_SIGNATURE)
    {
        $builder->addOffsetX(7, $XLM_DIGITAL_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDOGE_DIGITAL_SIGNATURE(FlatBufferBuilder $builder, $DOGE_DIGITAL_SIGNATURE)
    {
        $builder->addOffsetX(8, $DOGE_DIGITAL_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addXMR_DIGITAL_SIGNATURE(FlatBufferBuilder $builder, $XMR_DIGITAL_SIGNATURE)
    {
        $builder->addOffsetX(9, $XMR_DIGITAL_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDOT_DIGITAL_SIGNATURE(FlatBufferBuilder $builder, $DOT_DIGITAL_SIGNATURE)
    {
        $builder->addOffsetX(10, $DOT_DIGITAL_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFIL_DIGITAL_SIGNATURE(FlatBufferBuilder $builder, $FIL_DIGITAL_SIGNATURE)
    {
        $builder->addOffsetX(11, $FIL_DIGITAL_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addXTZ_DIGITAL_SIGNATURE(FlatBufferBuilder $builder, $XTZ_DIGITAL_SIGNATURE)
    {
        $builder->addOffsetX(12, $XTZ_DIGITAL_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addATOM_DIGITAL_SIGNATURE(FlatBufferBuilder $builder, $ATOM_DIGITAL_SIGNATURE)
    {
        $builder->addOffsetX(13, $ATOM_DIGITAL_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTRX_DIGITAL_SIGNATURE(FlatBufferBuilder $builder, $TRX_DIGITAL_SIGNATURE)
    {
        $builder->addOffsetX(14, $TRX_DIGITAL_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addBNB_DIGITAL_SIGNATURE(FlatBufferBuilder $builder, $BNB_DIGITAL_SIGNATURE)
    {
        $builder->addOffsetX(15, $BNB_DIGITAL_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAVAX_DIGITAL_SIGNATURE(FlatBufferBuilder $builder, $AVAX_DIGITAL_SIGNATURE)
    {
        $builder->addOffsetX(16, $AVAX_DIGITAL_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSOL_DIGITAL_SIGNATURE(FlatBufferBuilder $builder, $SOL_DIGITAL_SIGNATURE)
    {
        $builder->addOffsetX(17, $SOL_DIGITAL_SIGNATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endPNM(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishPNMBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$PNM");
    }
}
