<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Collection Request Message
class CRM extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return CRM
     */
    public static function getRootAsCRM(ByteBuffer $bb)
    {
        $obj = new CRM();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function CRMIdentifier()
    {
        return "$CRM";
    }

    public static function CRMBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::CRMIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return CRM
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier of the record, auto-generated by the system.
    public function getID()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    public function getCLASSIFICATION()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The type of this collect or contact request.
    public function getTYPE()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the parent plan or schedule associated with this request.
    public function getID_PLAN()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Index number for records within a collection plan or schedule.
    /**
     * @return int
     */
    public function getPLAN_INDEX()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// Task ID associated with this request.
    public function getTASK_ID()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The dwell ID associated with this request.
    public function getDWELL_ID()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional ID from external systems.
    public function getEXTERNAL_ID()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique identifier of the requested/scheduled/planned sensor associated with this request.
    public function getID_SENSOR()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request.
    public function getORIG_SENSOR_ID()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional type of observation requested.
    public function getOB_TYPE()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The priority of the collect request.
    public function getPRIORITY()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The tasking category associated with this request.
    /**
     * @return int
     */
    public function getTASK_CATEGORY()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The tasking suffix associated with this request.
    public function getSUFFIX()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Boolean indicating that this collect request is UCT follow-up.
    /**
     * @return bool
     */
    public function getUCT_FOLLOW_UP()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// The start time of the collect or contact request window, in ISO 8601 UTC format.
    public function getSTART_TIME()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The end time of the collect or contact request window, in ISO 8601 UTC format.
    public function getEND_TIME()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite/catalog number of the target on-orbit object for this request.
    /**
     * @return uint
     */
    public function getNORAD_CAT_ID()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 0;
    }

    /// Optional identifier provided by the data source to indicate the target object of this request.
    public function getORIG_OBJECT_ID()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The tasking group to which the target object is assigned.
    public function getTASK_GROUP()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Inter-Range Operations Number.
    /**
     * @return int
     */
    public function getIRON()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The orbit regime of the target.
    public function getORBIT_REGIME()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The minimum object (diameter) size, in meters, to be reported.
    /**
     * @return double
     */
    public function getTARGET_SIZE()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The minimum Radar Cross-Section of the target, in m^2.
    /**
     * @return double
     */
    public function getRCS_MIN()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Radar Cross-Section of the target, in m^2.
    /**
     * @return double
     */
    public function getRCS()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The maximum Radar Cross-Section of the target, in m^2.
    /**
     * @return double
     */
    public function getRCS_MAX()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The minimum frequency of interest, in MHz.
    /**
     * @return double
     */
    public function getFREQ_MIN()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The estimated or expected emission frequency of the target, in MHz.
    /**
     * @return double
     */
    public function getFREQ()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The maximum frequency of interest, in MHz.
    /**
     * @return double
     */
    public function getFREQ_MAX()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The RF polarization.
    public function getPOLARIZATION()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).
    /**
     * @return double
     */
    public function getVIS_MAG_MIN()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The estimated or expected visual magnitude of the target, in Magnitudes (M).
    /**
     * @return double
     */
    public function getVIS_MAG()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).
    /**
     * @return double
     */
    public function getVIS_MAG_MAX()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The spectral model used for the irradiance calculation.
    public function getSPECTRAL_MODEL()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The fraction of solar energy reflected from target.
    /**
     * @return double
     */
    public function getREFLECTANCE()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The target object irradiance value.
    /**
     * @return double
     */
    public function getIRRADIANCE()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For optical sensors, the requested number of frames to capture at each sensor step.
    /**
     * @return int
     */
    public function getNUM_FRAMES()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// For optical sensors, the frame rate of the camera, in Hz.
    /**
     * @return double
     */
    public function getFRAME_RATE()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// For optical sensors, the integration time per camera frame, in milliseconds.
    /**
     * @return double
     */
    public function getINTEGRATION_TIME()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The number of requested tracks on the target.
    /**
     * @return int
     */
    public function getNUM_TRACKS()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The number of requested observations on the target.
    /**
     * @return int
     */
    public function getNUM_OBS()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The duration of the collect request, in seconds.
    /**
     * @return int
     */
    public function getDURATION()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /// The search pattern to be executed for this request.
    public function getSRCH_PATTERN()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.
    public function getSCENARIO()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID of the Elset of the object associated with this request.
    public function getID_ELSET()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID of the Manifold Elset of the object associated with this request.
    public function getID_MANIFOLD()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID of the State Vector of the object or central vector associated with this request.
    public function getID_STATE_VECTOR()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// ID of the Ephemeris Set of the object associated with this request.
    public function getES_ID()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Epoch time, in ISO 8601 UTC format, of the orbital elements.
    public function getEPOCH()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The average of the periapsis and apoapsis distances, in kilometers.
    /**
     * @return double
     */
    public function getSEMI_MAJOR_AXIS()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The orbital eccentricity of an astronomical object.
    /**
     * @return double
     */
    public function getECCENTRICITY()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The angle, in degrees, between the equator and the orbit plane.
    /**
     * @return double
     */
    public function getINCLINATION()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Right ascension of the ascending node, in degrees.
    /**
     * @return double
     */
    public function getRAAN()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The argument of perigee, in degrees.
    /**
     * @return double
     */
    public function getARG_OF_PERIGEE()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The mean anomaly defines the angular position, in degrees, of the object on its orbital path.
    /**
     * @return double
     */
    public function getMEAN_ANOMALY()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The expected or directed right ascension angle, in degrees.
    /**
     * @return double
     */
    public function getRA()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The expected or directed declination angle, in degrees.
    /**
     * @return double
     */
    public function getDEC()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The expected or directed azimuth angle, in degrees.
    /**
     * @return double
     */
    public function getAZ()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The expected or directed elevation angle, in degrees.
    /**
     * @return double
     */
    public function getEL()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The expected acquisition range or defined center range, in km.
    /**
     * @return double
     */
    public function getRANGE()
    {
        $o = $this->__offset(122);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The extent of the azimuth angle, in degrees, from center azimuth.
    /**
     * @return double
     */
    public function getEXTENT_AZ()
    {
        $o = $this->__offset(124);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The extent of the elevation angle, in degrees, from center elevation.
    /**
     * @return double
     */
    public function getEXTENT_EL()
    {
        $o = $this->__offset(126);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The extent of the range, in km, from center range.
    /**
     * @return double
     */
    public function getEXTENT_RANGE()
    {
        $o = $this->__offset(128);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 latitude, in degrees.
    /**
     * @return double
     */
    public function getLAT()
    {
        $o = $this->__offset(130);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// WGS-84 longitude, in degrees.
    /**
     * @return double
     */
    public function getLON()
    {
        $o = $this->__offset(132);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Height above WGS-84 ellipsoid (HAE), in kilometers.
    /**
     * @return double
     */
    public function getALT()
    {
        $o = $this->__offset(134);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The stopping WGS-84 latitude of a volume definition, in degrees.
    /**
     * @return double
     */
    public function getSTOP_LAT()
    {
        $o = $this->__offset(136);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The stopping WGS-84 longitude of a volume definition, in degrees.
    /**
     * @return double
     */
    public function getSTOP_LON()
    {
        $o = $this->__offset(138);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The stopping HAE WGS-84 height above ellipsoid (HAE), in kilometers.
    /**
     * @return double
     */
    public function getSTOP_ALT()
    {
        $o = $this->__offset(140);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The maximum inclination, in degrees, to be used in search operations.
    /**
     * @return double
     */
    public function getSRCH_INC()
    {
        $o = $this->__offset(142);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The angular distance, in degrees, in the sensor-x direction from scan center.
    /**
     * @return double
     */
    public function getX_ANGLE()
    {
        $o = $this->__offset(144);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The angular distance, in degrees, in the sensor-y direction from scan center.
    /**
     * @return double
     */
    public function getY_ANGLE()
    {
        $o = $this->__offset(146);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.
    /**
     * @return double
     */
    public function getORIENT_ANGLE()
    {
        $o = $this->__offset(148);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The customer for this request.
    public function getCUSTOMER()
    {
        $o = $this->__offset(150);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Notes or comments associated with this request.
    public function getNOTES()
    {
        $o = $this->__offset(152);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    ///  Source of the data.
    public function getSOURCE()
    {
        $o = $this->__offset(154);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    ///  Originating system or organization which produced the data, if different from the source.
    public function getORIGIN()
    {
        $o = $this->__offset(156);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data.
    public function getDATA_MODE()
    {
        $o = $this->__offset(158);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startCRM(FlatBufferBuilder $builder)
    {
        $builder->StartObject(78);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return CRM
     */
    public static function createCRM(FlatBufferBuilder $builder, $ID, $CLASSIFICATION, $TYPE, $ID_PLAN, $PLAN_INDEX, $TASK_ID, $DWELL_ID, $EXTERNAL_ID, $ID_SENSOR, $ORIG_SENSOR_ID, $OB_TYPE, $PRIORITY, $TASK_CATEGORY, $SUFFIX, $UCT_FOLLOW_UP, $START_TIME, $END_TIME, $NORAD_CAT_ID, $ORIG_OBJECT_ID, $TASK_GROUP, $IRON, $ORBIT_REGIME, $TARGET_SIZE, $RCS_MIN, $RCS, $RCS_MAX, $FREQ_MIN, $FREQ, $FREQ_MAX, $POLARIZATION, $VIS_MAG_MIN, $VIS_MAG, $VIS_MAG_MAX, $SPECTRAL_MODEL, $REFLECTANCE, $IRRADIANCE, $NUM_FRAMES, $FRAME_RATE, $INTEGRATION_TIME, $NUM_TRACKS, $NUM_OBS, $DURATION, $SRCH_PATTERN, $SCENARIO, $ID_ELSET, $ID_MANIFOLD, $ID_STATE_VECTOR, $ES_ID, $EPOCH, $SEMI_MAJOR_AXIS, $ECCENTRICITY, $INCLINATION, $RAAN, $ARG_OF_PERIGEE, $MEAN_ANOMALY, $RA, $DEC, $AZ, $EL, $RANGE, $EXTENT_AZ, $EXTENT_EL, $EXTENT_RANGE, $LAT, $LON, $ALT, $STOP_LAT, $STOP_LON, $STOP_ALT, $SRCH_INC, $X_ANGLE, $Y_ANGLE, $ORIENT_ANGLE, $CUSTOMER, $NOTES, $SOURCE, $ORIGIN, $DATA_MODE)
    {
        $builder->startObject(78);
        self::addID($builder, $ID);
        self::addCLASSIFICATION($builder, $CLASSIFICATION);
        self::addTYPE($builder, $TYPE);
        self::addID_PLAN($builder, $ID_PLAN);
        self::addPLAN_INDEX($builder, $PLAN_INDEX);
        self::addTASK_ID($builder, $TASK_ID);
        self::addDWELL_ID($builder, $DWELL_ID);
        self::addEXTERNAL_ID($builder, $EXTERNAL_ID);
        self::addID_SENSOR($builder, $ID_SENSOR);
        self::addORIG_SENSOR_ID($builder, $ORIG_SENSOR_ID);
        self::addOB_TYPE($builder, $OB_TYPE);
        self::addPRIORITY($builder, $PRIORITY);
        self::addTASK_CATEGORY($builder, $TASK_CATEGORY);
        self::addSUFFIX($builder, $SUFFIX);
        self::addUCT_FOLLOW_UP($builder, $UCT_FOLLOW_UP);
        self::addSTART_TIME($builder, $START_TIME);
        self::addEND_TIME($builder, $END_TIME);
        self::addNORAD_CAT_ID($builder, $NORAD_CAT_ID);
        self::addORIG_OBJECT_ID($builder, $ORIG_OBJECT_ID);
        self::addTASK_GROUP($builder, $TASK_GROUP);
        self::addIRON($builder, $IRON);
        self::addORBIT_REGIME($builder, $ORBIT_REGIME);
        self::addTARGET_SIZE($builder, $TARGET_SIZE);
        self::addRCS_MIN($builder, $RCS_MIN);
        self::addRCS($builder, $RCS);
        self::addRCS_MAX($builder, $RCS_MAX);
        self::addFREQ_MIN($builder, $FREQ_MIN);
        self::addFREQ($builder, $FREQ);
        self::addFREQ_MAX($builder, $FREQ_MAX);
        self::addPOLARIZATION($builder, $POLARIZATION);
        self::addVIS_MAG_MIN($builder, $VIS_MAG_MIN);
        self::addVIS_MAG($builder, $VIS_MAG);
        self::addVIS_MAG_MAX($builder, $VIS_MAG_MAX);
        self::addSPECTRAL_MODEL($builder, $SPECTRAL_MODEL);
        self::addREFLECTANCE($builder, $REFLECTANCE);
        self::addIRRADIANCE($builder, $IRRADIANCE);
        self::addNUM_FRAMES($builder, $NUM_FRAMES);
        self::addFRAME_RATE($builder, $FRAME_RATE);
        self::addINTEGRATION_TIME($builder, $INTEGRATION_TIME);
        self::addNUM_TRACKS($builder, $NUM_TRACKS);
        self::addNUM_OBS($builder, $NUM_OBS);
        self::addDURATION($builder, $DURATION);
        self::addSRCH_PATTERN($builder, $SRCH_PATTERN);
        self::addSCENARIO($builder, $SCENARIO);
        self::addID_ELSET($builder, $ID_ELSET);
        self::addID_MANIFOLD($builder, $ID_MANIFOLD);
        self::addID_STATE_VECTOR($builder, $ID_STATE_VECTOR);
        self::addES_ID($builder, $ES_ID);
        self::addEPOCH($builder, $EPOCH);
        self::addSEMI_MAJOR_AXIS($builder, $SEMI_MAJOR_AXIS);
        self::addECCENTRICITY($builder, $ECCENTRICITY);
        self::addINCLINATION($builder, $INCLINATION);
        self::addRAAN($builder, $RAAN);
        self::addARG_OF_PERIGEE($builder, $ARG_OF_PERIGEE);
        self::addMEAN_ANOMALY($builder, $MEAN_ANOMALY);
        self::addRA($builder, $RA);
        self::addDEC($builder, $DEC);
        self::addAZ($builder, $AZ);
        self::addEL($builder, $EL);
        self::addRANGE($builder, $RANGE);
        self::addEXTENT_AZ($builder, $EXTENT_AZ);
        self::addEXTENT_EL($builder, $EXTENT_EL);
        self::addEXTENT_RANGE($builder, $EXTENT_RANGE);
        self::addLAT($builder, $LAT);
        self::addLON($builder, $LON);
        self::addALT($builder, $ALT);
        self::addSTOP_LAT($builder, $STOP_LAT);
        self::addSTOP_LON($builder, $STOP_LON);
        self::addSTOP_ALT($builder, $STOP_ALT);
        self::addSRCH_INC($builder, $SRCH_INC);
        self::addX_ANGLE($builder, $X_ANGLE);
        self::addY_ANGLE($builder, $Y_ANGLE);
        self::addORIENT_ANGLE($builder, $ORIENT_ANGLE);
        self::addCUSTOMER($builder, $CUSTOMER);
        self::addNOTES($builder, $NOTES);
        self::addSOURCE($builder, $SOURCE);
        self::addORIGIN($builder, $ORIGIN);
        self::addDATA_MODE($builder, $DATA_MODE);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addID(FlatBufferBuilder $builder, $ID)
    {
        $builder->addOffsetX(0, $ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCLASSIFICATION(FlatBufferBuilder $builder, $CLASSIFICATION)
    {
        $builder->addOffsetX(1, $CLASSIFICATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTYPE(FlatBufferBuilder $builder, $TYPE)
    {
        $builder->addOffsetX(2, $TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addID_PLAN(FlatBufferBuilder $builder, $ID_PLAN)
    {
        $builder->addOffsetX(3, $ID_PLAN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPLAN_INDEX(FlatBufferBuilder $builder, $PLAN_INDEX)
    {
        $builder->addIntX(4, $PLAN_INDEX, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTASK_ID(FlatBufferBuilder $builder, $TASK_ID)
    {
        $builder->addOffsetX(5, $TASK_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDWELL_ID(FlatBufferBuilder $builder, $DWELL_ID)
    {
        $builder->addOffsetX(6, $DWELL_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEXTERNAL_ID(FlatBufferBuilder $builder, $EXTERNAL_ID)
    {
        $builder->addOffsetX(7, $EXTERNAL_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addID_SENSOR(FlatBufferBuilder $builder, $ID_SENSOR)
    {
        $builder->addOffsetX(8, $ID_SENSOR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORIG_SENSOR_ID(FlatBufferBuilder $builder, $ORIG_SENSOR_ID)
    {
        $builder->addOffsetX(9, $ORIG_SENSOR_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOB_TYPE(FlatBufferBuilder $builder, $OB_TYPE)
    {
        $builder->addOffsetX(10, $OB_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPRIORITY(FlatBufferBuilder $builder, $PRIORITY)
    {
        $builder->addOffsetX(11, $PRIORITY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTASK_CATEGORY(FlatBufferBuilder $builder, $TASK_CATEGORY)
    {
        $builder->addIntX(12, $TASK_CATEGORY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSUFFIX(FlatBufferBuilder $builder, $SUFFIX)
    {
        $builder->addOffsetX(13, $SUFFIX, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addUCT_FOLLOW_UP(FlatBufferBuilder $builder, $UCT_FOLLOW_UP)
    {
        $builder->addBoolX(14, $UCT_FOLLOW_UP, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSTART_TIME(FlatBufferBuilder $builder, $START_TIME)
    {
        $builder->addOffsetX(15, $START_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEND_TIME(FlatBufferBuilder $builder, $END_TIME)
    {
        $builder->addOffsetX(16, $END_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addNORAD_CAT_ID(FlatBufferBuilder $builder, $NORAD_CAT_ID)
    {
        $builder->addUintX(17, $NORAD_CAT_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORIG_OBJECT_ID(FlatBufferBuilder $builder, $ORIG_OBJECT_ID)
    {
        $builder->addOffsetX(18, $ORIG_OBJECT_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTASK_GROUP(FlatBufferBuilder $builder, $TASK_GROUP)
    {
        $builder->addOffsetX(19, $TASK_GROUP, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addIRON(FlatBufferBuilder $builder, $IRON)
    {
        $builder->addIntX(20, $IRON, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORBIT_REGIME(FlatBufferBuilder $builder, $ORBIT_REGIME)
    {
        $builder->addOffsetX(21, $ORBIT_REGIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTARGET_SIZE(FlatBufferBuilder $builder, $TARGET_SIZE)
    {
        $builder->addDoubleX(22, $TARGET_SIZE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRCS_MIN(FlatBufferBuilder $builder, $RCS_MIN)
    {
        $builder->addDoubleX(23, $RCS_MIN, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRCS(FlatBufferBuilder $builder, $RCS)
    {
        $builder->addDoubleX(24, $RCS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRCS_MAX(FlatBufferBuilder $builder, $RCS_MAX)
    {
        $builder->addDoubleX(25, $RCS_MAX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFREQ_MIN(FlatBufferBuilder $builder, $FREQ_MIN)
    {
        $builder->addDoubleX(26, $FREQ_MIN, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFREQ(FlatBufferBuilder $builder, $FREQ)
    {
        $builder->addDoubleX(27, $FREQ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFREQ_MAX(FlatBufferBuilder $builder, $FREQ_MAX)
    {
        $builder->addDoubleX(28, $FREQ_MAX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPOLARIZATION(FlatBufferBuilder $builder, $POLARIZATION)
    {
        $builder->addOffsetX(29, $POLARIZATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVIS_MAG_MIN(FlatBufferBuilder $builder, $VIS_MAG_MIN)
    {
        $builder->addDoubleX(30, $VIS_MAG_MIN, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVIS_MAG(FlatBufferBuilder $builder, $VIS_MAG)
    {
        $builder->addDoubleX(31, $VIS_MAG, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addVIS_MAG_MAX(FlatBufferBuilder $builder, $VIS_MAG_MAX)
    {
        $builder->addDoubleX(32, $VIS_MAG_MAX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSPECTRAL_MODEL(FlatBufferBuilder $builder, $SPECTRAL_MODEL)
    {
        $builder->addOffsetX(33, $SPECTRAL_MODEL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addREFLECTANCE(FlatBufferBuilder $builder, $REFLECTANCE)
    {
        $builder->addDoubleX(34, $REFLECTANCE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addIRRADIANCE(FlatBufferBuilder $builder, $IRRADIANCE)
    {
        $builder->addDoubleX(35, $IRRADIANCE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNUM_FRAMES(FlatBufferBuilder $builder, $NUM_FRAMES)
    {
        $builder->addIntX(36, $NUM_FRAMES, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addFRAME_RATE(FlatBufferBuilder $builder, $FRAME_RATE)
    {
        $builder->addDoubleX(37, $FRAME_RATE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addINTEGRATION_TIME(FlatBufferBuilder $builder, $INTEGRATION_TIME)
    {
        $builder->addDoubleX(38, $INTEGRATION_TIME, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNUM_TRACKS(FlatBufferBuilder $builder, $NUM_TRACKS)
    {
        $builder->addIntX(39, $NUM_TRACKS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addNUM_OBS(FlatBufferBuilder $builder, $NUM_OBS)
    {
        $builder->addIntX(40, $NUM_OBS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDURATION(FlatBufferBuilder $builder, $DURATION)
    {
        $builder->addIntX(41, $DURATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSRCH_PATTERN(FlatBufferBuilder $builder, $SRCH_PATTERN)
    {
        $builder->addOffsetX(42, $SRCH_PATTERN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSCENARIO(FlatBufferBuilder $builder, $SCENARIO)
    {
        $builder->addOffsetX(43, $SCENARIO, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addID_ELSET(FlatBufferBuilder $builder, $ID_ELSET)
    {
        $builder->addOffsetX(44, $ID_ELSET, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addID_MANIFOLD(FlatBufferBuilder $builder, $ID_MANIFOLD)
    {
        $builder->addOffsetX(45, $ID_MANIFOLD, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addID_STATE_VECTOR(FlatBufferBuilder $builder, $ID_STATE_VECTOR)
    {
        $builder->addOffsetX(46, $ID_STATE_VECTOR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addES_ID(FlatBufferBuilder $builder, $ES_ID)
    {
        $builder->addOffsetX(47, $ES_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEPOCH(FlatBufferBuilder $builder, $EPOCH)
    {
        $builder->addOffsetX(48, $EPOCH, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSEMI_MAJOR_AXIS(FlatBufferBuilder $builder, $SEMI_MAJOR_AXIS)
    {
        $builder->addDoubleX(49, $SEMI_MAJOR_AXIS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addECCENTRICITY(FlatBufferBuilder $builder, $ECCENTRICITY)
    {
        $builder->addDoubleX(50, $ECCENTRICITY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addINCLINATION(FlatBufferBuilder $builder, $INCLINATION)
    {
        $builder->addDoubleX(51, $INCLINATION, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRAAN(FlatBufferBuilder $builder, $RAAN)
    {
        $builder->addDoubleX(52, $RAAN, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addARG_OF_PERIGEE(FlatBufferBuilder $builder, $ARG_OF_PERIGEE)
    {
        $builder->addDoubleX(53, $ARG_OF_PERIGEE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMEAN_ANOMALY(FlatBufferBuilder $builder, $MEAN_ANOMALY)
    {
        $builder->addDoubleX(54, $MEAN_ANOMALY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRA(FlatBufferBuilder $builder, $RA)
    {
        $builder->addDoubleX(55, $RA, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDEC(FlatBufferBuilder $builder, $DEC)
    {
        $builder->addDoubleX(56, $DEC, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAZ(FlatBufferBuilder $builder, $AZ)
    {
        $builder->addDoubleX(57, $AZ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEL(FlatBufferBuilder $builder, $EL)
    {
        $builder->addDoubleX(58, $EL, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRANGE(FlatBufferBuilder $builder, $RANGE)
    {
        $builder->addDoubleX(59, $RANGE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEXTENT_AZ(FlatBufferBuilder $builder, $EXTENT_AZ)
    {
        $builder->addDoubleX(60, $EXTENT_AZ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEXTENT_EL(FlatBufferBuilder $builder, $EXTENT_EL)
    {
        $builder->addDoubleX(61, $EXTENT_EL, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addEXTENT_RANGE(FlatBufferBuilder $builder, $EXTENT_RANGE)
    {
        $builder->addDoubleX(62, $EXTENT_RANGE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLAT(FlatBufferBuilder $builder, $LAT)
    {
        $builder->addDoubleX(63, $LAT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLON(FlatBufferBuilder $builder, $LON)
    {
        $builder->addDoubleX(64, $LON, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addALT(FlatBufferBuilder $builder, $ALT)
    {
        $builder->addDoubleX(65, $ALT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSTOP_LAT(FlatBufferBuilder $builder, $STOP_LAT)
    {
        $builder->addDoubleX(66, $STOP_LAT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSTOP_LON(FlatBufferBuilder $builder, $STOP_LON)
    {
        $builder->addDoubleX(67, $STOP_LON, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSTOP_ALT(FlatBufferBuilder $builder, $STOP_ALT)
    {
        $builder->addDoubleX(68, $STOP_ALT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSRCH_INC(FlatBufferBuilder $builder, $SRCH_INC)
    {
        $builder->addDoubleX(69, $SRCH_INC, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addX_ANGLE(FlatBufferBuilder $builder, $X_ANGLE)
    {
        $builder->addDoubleX(70, $X_ANGLE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addY_ANGLE(FlatBufferBuilder $builder, $Y_ANGLE)
    {
        $builder->addDoubleX(71, $Y_ANGLE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addORIENT_ANGLE(FlatBufferBuilder $builder, $ORIENT_ANGLE)
    {
        $builder->addDoubleX(72, $ORIENT_ANGLE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCUSTOMER(FlatBufferBuilder $builder, $CUSTOMER)
    {
        $builder->addOffsetX(73, $CUSTOMER, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNOTES(FlatBufferBuilder $builder, $NOTES)
    {
        $builder->addOffsetX(74, $NOTES, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSOURCE(FlatBufferBuilder $builder, $SOURCE)
    {
        $builder->addOffsetX(75, $SOURCE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORIGIN(FlatBufferBuilder $builder, $ORIGIN)
    {
        $builder->addOffsetX(76, $ORIGIN, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDATA_MODE(FlatBufferBuilder $builder, $DATA_MODE)
    {
        $builder->addOffsetX(77, $DATA_MODE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endCRM(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishCRMBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$CRM");
    }
}
