<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Rocket Configuration
class ROC extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return ROC
     */
    public static function getRootAsROC(ByteBuffer $bb)
    {
        $obj = new ROC();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function ROCIdentifier()
    {
        return "$ROC";
    }

    public static function ROCBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ROCIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return ROC
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Rocket Name
    public function getNAME()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Rocket Family
    public function getFAMILY()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Rocket Variant
    public function getVARIANT()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Stages in the Rocket
    /**
     * @returnVectorOffset
     */
    public function getSTAGES($j)
    {
        $o = $this->__offset(10);
        $obj = new STAGE();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getSTAGESLength()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Sustainers in the Rocket
    /**
     * @returnVectorOffset
     */
    public function getSUSTAINERS($j)
    {
        $o = $this->__offset(12);
        $obj = new SUSTAINER();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getSUSTAINERSLength()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startROC(FlatBufferBuilder $builder)
    {
        $builder->StartObject(5);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return ROC
     */
    public static function createROC(FlatBufferBuilder $builder, $NAME, $FAMILY, $VARIANT, $STAGES, $SUSTAINERS)
    {
        $builder->startObject(5);
        self::addNAME($builder, $NAME);
        self::addFAMILY($builder, $FAMILY);
        self::addVARIANT($builder, $VARIANT);
        self::addSTAGES($builder, $STAGES);
        self::addSUSTAINERS($builder, $SUSTAINERS);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNAME(FlatBufferBuilder $builder, $NAME)
    {
        $builder->addOffsetX(0, $NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFAMILY(FlatBufferBuilder $builder, $FAMILY)
    {
        $builder->addOffsetX(1, $FAMILY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVARIANT(FlatBufferBuilder $builder, $VARIANT)
    {
        $builder->addOffsetX(2, $VARIANT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSTAGES(FlatBufferBuilder $builder, $STAGES)
    {
        $builder->addOffsetX(3, $STAGES, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSTAGESVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSTAGESVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSUSTAINERS(FlatBufferBuilder $builder, $SUSTAINERS)
    {
        $builder->addOffsetX(4, $SUSTAINERS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSUSTAINERSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSUSTAINERSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endROC(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishROCBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$ROC");
    }
}
