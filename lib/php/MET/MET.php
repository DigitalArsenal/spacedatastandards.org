<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class MET extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return MET
     */
    public static function getRootAsMET(ByteBuffer $bb)
    {
        $obj = new MET();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function METIdentifier()
    {
        return "$MET";
    }

    public static function METBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::METIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return MET
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return sbyte
     */
    public function getMEAN_ELEMENT_THEORY()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \meanElementTheory::SGP4;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startMET(FlatBufferBuilder $builder)
    {
        $builder->StartObject(1);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return MET
     */
    public static function createMET(FlatBufferBuilder $builder, $MEAN_ELEMENT_THEORY)
    {
        $builder->startObject(1);
        self::addMEAN_ELEMENT_THEORY($builder, $MEAN_ELEMENT_THEORY);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addMEAN_ELEMENT_THEORY(FlatBufferBuilder $builder, $MEAN_ELEMENT_THEORY)
    {
        $builder->addSbyteX(0, $MEAN_ELEMENT_THEORY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endMET(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishMETBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$MET");
    }
}
