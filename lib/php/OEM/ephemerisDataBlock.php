<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// OEM Ephemeris Data Block
class ephemerisDataBlock extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return ephemerisDataBlock
     */
    public static function getRootAsephemerisDataBlock(ByteBuffer $bb)
    {
        $obj = new ephemerisDataBlock();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function ephemerisDataBlockIdentifier()
    {
        return "$OEM";
    }

    public static function ephemerisDataBlockBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ephemerisDataBlockIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return ephemerisDataBlock
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Plain-Text Comment
    public function getCOMMENT()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Satellite Name(s)
    public function getOBJECT_NAME()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// International Designator (YYYY-NNNAAA)
    public function getOBJECT_ID()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Origin of reference frame (EARTH, MARS, MOON, etc.)
    public function getCENTER_NAME()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the reference frame (TEME, EME2000, etc.)
    /**
     * @return sbyte
     */
    public function getREFERENCE_FRAME()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \refFrame::ECEF;
    }

    /// Epoch of reference frame, if not intrinsic to the definition of the reference frame
    public function getREFERENCE_FRAME_EPOCH()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time system used for the orbit state and covariance matrix. (UTC)
    /**
     * @return sbyte
     */
    public function getTIME_SYSTEM()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \timeSystem::GMST;
    }

    /// Start of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)
    public function getSTART_TIME()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional start USEABLE time span covered by ephemeris data (ISO 8601)
    public function getUSEABLE_START_TIME()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Optional end of USEABLE time span covered by ephemeris data (ISO 8601)
    public function getUSEABLE_STOP_TIME()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// End of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)
    public function getSTOP_TIME()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Step size in seconds separating the epochs of each ephemeris data row
    /**
     * @return double
     */
    public function getSTEP_SIZE()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Recommended interpolation method for ephemeris data (Hermite, Linear, Lagrange, etc.)
    public function getINTERPOLATION()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Recommended interpolation degree for ephemeris data
    /**
     * @return uint
     */
    public function getINTERPOLATION_DEGREE()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 0;
    }

    /// Array of ephemeris data lines
    /**
     * @returnVectorOffset
     */
    public function getEPHEMERIS_DATA_LINES($j)
    {
        $o = $this->__offset(32);
        $obj = new EphemerisDataLine();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getEPHEMERIS_DATA_LINESLength()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Array of covariance matrix lines
    /**
     * @returnVectorOffset
     */
    public function getCOVARIANCE_MATRIX_LINES($j)
    {
        $o = $this->__offset(34);
        $obj = new CovarianceMatrixLine();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getCOVARIANCE_MATRIX_LINESLength()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startephemerisDataBlock(FlatBufferBuilder $builder)
    {
        $builder->StartObject(16);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return ephemerisDataBlock
     */
    public static function createephemerisDataBlock(FlatBufferBuilder $builder, $COMMENT, $OBJECT_NAME, $OBJECT_ID, $CENTER_NAME, $REFERENCE_FRAME, $REFERENCE_FRAME_EPOCH, $TIME_SYSTEM, $START_TIME, $USEABLE_START_TIME, $USEABLE_STOP_TIME, $STOP_TIME, $STEP_SIZE, $INTERPOLATION, $INTERPOLATION_DEGREE, $EPHEMERIS_DATA_LINES, $COVARIANCE_MATRIX_LINES)
    {
        $builder->startObject(16);
        self::addCOMMENT($builder, $COMMENT);
        self::addOBJECT_NAME($builder, $OBJECT_NAME);
        self::addOBJECT_ID($builder, $OBJECT_ID);
        self::addCENTER_NAME($builder, $CENTER_NAME);
        self::addREFERENCE_FRAME($builder, $REFERENCE_FRAME);
        self::addREFERENCE_FRAME_EPOCH($builder, $REFERENCE_FRAME_EPOCH);
        self::addTIME_SYSTEM($builder, $TIME_SYSTEM);
        self::addSTART_TIME($builder, $START_TIME);
        self::addUSEABLE_START_TIME($builder, $USEABLE_START_TIME);
        self::addUSEABLE_STOP_TIME($builder, $USEABLE_STOP_TIME);
        self::addSTOP_TIME($builder, $STOP_TIME);
        self::addSTEP_SIZE($builder, $STEP_SIZE);
        self::addINTERPOLATION($builder, $INTERPOLATION);
        self::addINTERPOLATION_DEGREE($builder, $INTERPOLATION_DEGREE);
        self::addEPHEMERIS_DATA_LINES($builder, $EPHEMERIS_DATA_LINES);
        self::addCOVARIANCE_MATRIX_LINES($builder, $COVARIANCE_MATRIX_LINES);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCOMMENT(FlatBufferBuilder $builder, $COMMENT)
    {
        $builder->addOffsetX(0, $COMMENT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOBJECT_NAME(FlatBufferBuilder $builder, $OBJECT_NAME)
    {
        $builder->addOffsetX(1, $OBJECT_NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOBJECT_ID(FlatBufferBuilder $builder, $OBJECT_ID)
    {
        $builder->addOffsetX(2, $OBJECT_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCENTER_NAME(FlatBufferBuilder $builder, $CENTER_NAME)
    {
        $builder->addOffsetX(3, $CENTER_NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addREFERENCE_FRAME(FlatBufferBuilder $builder, $REFERENCE_FRAME)
    {
        $builder->addSbyteX(4, $REFERENCE_FRAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addREFERENCE_FRAME_EPOCH(FlatBufferBuilder $builder, $REFERENCE_FRAME_EPOCH)
    {
        $builder->addOffsetX(5, $REFERENCE_FRAME_EPOCH, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addTIME_SYSTEM(FlatBufferBuilder $builder, $TIME_SYSTEM)
    {
        $builder->addSbyteX(6, $TIME_SYSTEM, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSTART_TIME(FlatBufferBuilder $builder, $START_TIME)
    {
        $builder->addOffsetX(7, $START_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUSEABLE_START_TIME(FlatBufferBuilder $builder, $USEABLE_START_TIME)
    {
        $builder->addOffsetX(8, $USEABLE_START_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUSEABLE_STOP_TIME(FlatBufferBuilder $builder, $USEABLE_STOP_TIME)
    {
        $builder->addOffsetX(9, $USEABLE_STOP_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSTOP_TIME(FlatBufferBuilder $builder, $STOP_TIME)
    {
        $builder->addOffsetX(10, $STOP_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSTEP_SIZE(FlatBufferBuilder $builder, $STEP_SIZE)
    {
        $builder->addDoubleX(11, $STEP_SIZE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addINTERPOLATION(FlatBufferBuilder $builder, $INTERPOLATION)
    {
        $builder->addOffsetX(12, $INTERPOLATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addINTERPOLATION_DEGREE(FlatBufferBuilder $builder, $INTERPOLATION_DEGREE)
    {
        $builder->addUintX(13, $INTERPOLATION_DEGREE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addEPHEMERIS_DATA_LINES(FlatBufferBuilder $builder, $EPHEMERIS_DATA_LINES)
    {
        $builder->addOffsetX(14, $EPHEMERIS_DATA_LINES, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createEPHEMERIS_DATA_LINESVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startEPHEMERIS_DATA_LINESVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCOVARIANCE_MATRIX_LINES(FlatBufferBuilder $builder, $COVARIANCE_MATRIX_LINES)
    {
        $builder->addOffsetX(15, $COVARIANCE_MATRIX_LINES, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCOVARIANCE_MATRIX_LINESVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCOVARIANCE_MATRIX_LINESVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endephemerisDataBlock(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
