<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// A single ephemeris data line
class ephemerisDataLine extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return ephemerisDataLine
     */
    public static function getRootAsephemerisDataLine(ByteBuffer $bb)
    {
        $obj = new ephemerisDataLine();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function ephemerisDataLineIdentifier()
    {
        return "$OEM";
    }

    public static function ephemerisDataLineBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ephemerisDataLineIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return ephemerisDataLine
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Epoch of state vector (ISO 8601)
    public function getEPOCH()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Position vector X-component km
    /**
     * @return double
     */
    public function getX()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Position vector Y-component km
    /**
     * @return double
     */
    public function getY()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Position vector Z-component km
    /**
     * @return double
     */
    public function getZ()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Velocity vector X-component km/s
    /**
     * @return double
     */
    public function getX_DOT()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Velocity vector Y-component km/s
    /**
     * @return double
     */
    public function getY_DOT()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Velocity vector Z-component km/s
    /**
     * @return double
     */
    public function getZ_DOT()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional: Acceleration vector X-component km/s/s
    /**
     * @return double
     */
    public function getX_DDOT()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional: Acceleration vector Y-component km/s/s
    /**
     * @return double
     */
    public function getY_DDOT()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Optional: Acceleration vector Z-component km/s/s
    /**
     * @return double
     */
    public function getZ_DDOT()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startephemerisDataLine(FlatBufferBuilder $builder)
    {
        $builder->StartObject(10);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return ephemerisDataLine
     */
    public static function createephemerisDataLine(FlatBufferBuilder $builder, $EPOCH, $X, $Y, $Z, $X_DOT, $Y_DOT, $Z_DOT, $X_DDOT, $Y_DDOT, $Z_DDOT)
    {
        $builder->startObject(10);
        self::addEPOCH($builder, $EPOCH);
        self::addX($builder, $X);
        self::addY($builder, $Y);
        self::addZ($builder, $Z);
        self::addX_DOT($builder, $X_DOT);
        self::addY_DOT($builder, $Y_DOT);
        self::addZ_DOT($builder, $Z_DOT);
        self::addX_DDOT($builder, $X_DDOT);
        self::addY_DDOT($builder, $Y_DDOT);
        self::addZ_DDOT($builder, $Z_DDOT);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEPOCH(FlatBufferBuilder $builder, $EPOCH)
    {
        $builder->addOffsetX(0, $EPOCH, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addX(FlatBufferBuilder $builder, $X)
    {
        $builder->addDoubleX(1, $X, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addY(FlatBufferBuilder $builder, $Y)
    {
        $builder->addDoubleX(2, $Y, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZ(FlatBufferBuilder $builder, $Z)
    {
        $builder->addDoubleX(3, $Z, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addX_DOT(FlatBufferBuilder $builder, $X_DOT)
    {
        $builder->addDoubleX(4, $X_DOT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addY_DOT(FlatBufferBuilder $builder, $Y_DOT)
    {
        $builder->addDoubleX(5, $Y_DOT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZ_DOT(FlatBufferBuilder $builder, $Z_DOT)
    {
        $builder->addDoubleX(6, $Z_DOT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addX_DDOT(FlatBufferBuilder $builder, $X_DDOT)
    {
        $builder->addDoubleX(7, $X_DDOT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addY_DDOT(FlatBufferBuilder $builder, $Y_DDOT)
    {
        $builder->addDoubleX(8, $Y_DDOT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addZ_DDOT(FlatBufferBuilder $builder, $Z_DDOT)
    {
        $builder->addDoubleX(9, $Z_DDOT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endephemerisDataLine(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
