<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Earth Orientation Parameters
class EOP extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EOP
     */
    public static function getRootAsEOP(ByteBuffer $bb)
    {
        $obj = new EOP();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EOPIdentifier()
    {
        return "$EOP";
    }

    public static function EOPBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EOPIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EOP
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Date in ISO 8601 format
    public function getDATE()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Modified Julian Date
    /**
     * @return uint
     */
    public function getMJD()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 0;
    }

    /// x pole coordinate in arcseconds
    /**
     * @return float
     */
    public function getX()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// y pole coordinate in arcseconds
    /**
     * @return float
     */
    public function getY()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// UT1-UTC in seconds
    /**
     * @return float
     */
    public function getUT1_MINUS_UTC()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Length of Day correction in seconds
    /**
     * @return float
     */
    public function getLOD()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Nutation correction in longitude (δΔψ) in arcseconds
    /**
     * @return float
     */
    public function getDPSI()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Nutation correction in obliquity (δΔε) in arcseconds
    /**
     * @return float
     */
    public function getDEPS()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Celestial pole offset in x (δX) in arcseconds
    /**
     * @return float
     */
    public function getDX()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Celestial pole offset in y (δY) in arcseconds
    /**
     * @return float
     */
    public function getDY()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Delta Atomic Time (TAI-UTC) in seconds
    /**
     * @return ushort
     */
    public function getDAT()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getUshort($o + $this->bb_pos) : 0;
    }

    /// Data type (O = Observed, P = Predicted)
    /**
     * @return sbyte
     */
    public function getDATA_TYPE()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \DataType::OBSERVED;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEOP(FlatBufferBuilder $builder)
    {
        $builder->StartObject(12);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EOP
     */
    public static function createEOP(FlatBufferBuilder $builder, $DATE, $MJD, $X, $Y, $UT1_MINUS_UTC, $LOD, $DPSI, $DEPS, $DX, $DY, $DAT, $DATA_TYPE)
    {
        $builder->startObject(12);
        self::addDATE($builder, $DATE);
        self::addMJD($builder, $MJD);
        self::addX($builder, $X);
        self::addY($builder, $Y);
        self::addUT1_MINUS_UTC($builder, $UT1_MINUS_UTC);
        self::addLOD($builder, $LOD);
        self::addDPSI($builder, $DPSI);
        self::addDEPS($builder, $DEPS);
        self::addDX($builder, $DX);
        self::addDY($builder, $DY);
        self::addDAT($builder, $DAT);
        self::addDATA_TYPE($builder, $DATA_TYPE);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDATE(FlatBufferBuilder $builder, $DATE)
    {
        $builder->addOffsetX(0, $DATE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addMJD(FlatBufferBuilder $builder, $MJD)
    {
        $builder->addUintX(1, $MJD, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addX(FlatBufferBuilder $builder, $X)
    {
        $builder->addFloatX(2, $X, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addY(FlatBufferBuilder $builder, $Y)
    {
        $builder->addFloatX(3, $Y, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addUT1_MINUS_UTC(FlatBufferBuilder $builder, $UT1_MINUS_UTC)
    {
        $builder->addFloatX(4, $UT1_MINUS_UTC, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addLOD(FlatBufferBuilder $builder, $LOD)
    {
        $builder->addFloatX(5, $LOD, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addDPSI(FlatBufferBuilder $builder, $DPSI)
    {
        $builder->addFloatX(6, $DPSI, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addDEPS(FlatBufferBuilder $builder, $DEPS)
    {
        $builder->addFloatX(7, $DEPS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addDX(FlatBufferBuilder $builder, $DX)
    {
        $builder->addFloatX(8, $DX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addDY(FlatBufferBuilder $builder, $DY)
    {
        $builder->addFloatX(9, $DY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param ushort
     * @return void
     */
    public static function addDAT(FlatBufferBuilder $builder, $DAT)
    {
        $builder->addUshortX(10, $DAT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDATA_TYPE(FlatBufferBuilder $builder, $DATA_TYPE)
    {
        $builder->addSbyteX(11, $DATA_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEOP(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEOPBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$EOP");
    }
}
