<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Collection of MPE Records
class MPECOLLECTION extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return MPECOLLECTION
     */
    public static function getRootAsMPECOLLECTION(ByteBuffer $bb)
    {
        $obj = new MPECOLLECTION();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function MPECOLLECTIONIdentifier()
    {
        return "$MPE";
    }

    public static function MPECOLLECTIONBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::MPECOLLECTIONIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return MPECOLLECTION
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Default value = U
    public function getCLASSIFICATION_TYPE()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the reference frame (TEME, EME2000, etc.)
    /**
     * @return sbyte
     */
    public function getREF_FRAME()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \referenceFrame::TEME;
    }

    /// Epoch of the Reference Frame. (UNIX TimeStamp)
    /**
     * @return double
     */
    public function getREF_FRAME_EPOCH()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Time system used for the orbit state and covariance matrix. (UTC)
    /**
     * @return sbyte
     */
    public function getTIME_SYSTEM()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \timeSystem::UTC;
    }

    /// Description of the Mean Element Theory. (SGP4,DSST,USM)
    /**
     * @return sbyte
     */
    public function getMEAN_ELEMENT_THEORY()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \meanElementTheory::SGP4;
    }

    /// Array of MPE records
    /**
     * @returnVectorOffset
     */
    public function getRECORDS($j)
    {
        $o = $this->__offset(14);
        $obj = new MPE();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getRECORDSLength()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startMPECOLLECTION(FlatBufferBuilder $builder)
    {
        $builder->StartObject(6);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return MPECOLLECTION
     */
    public static function createMPECOLLECTION(FlatBufferBuilder $builder, $CLASSIFICATION_TYPE, $REF_FRAME, $REF_FRAME_EPOCH, $TIME_SYSTEM, $MEAN_ELEMENT_THEORY, $RECORDS)
    {
        $builder->startObject(6);
        self::addCLASSIFICATION_TYPE($builder, $CLASSIFICATION_TYPE);
        self::addREF_FRAME($builder, $REF_FRAME);
        self::addREF_FRAME_EPOCH($builder, $REF_FRAME_EPOCH);
        self::addTIME_SYSTEM($builder, $TIME_SYSTEM);
        self::addMEAN_ELEMENT_THEORY($builder, $MEAN_ELEMENT_THEORY);
        self::addRECORDS($builder, $RECORDS);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCLASSIFICATION_TYPE(FlatBufferBuilder $builder, $CLASSIFICATION_TYPE)
    {
        $builder->addOffsetX(0, $CLASSIFICATION_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addREF_FRAME(FlatBufferBuilder $builder, $REF_FRAME)
    {
        $builder->addSbyteX(1, $REF_FRAME, 9);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addREF_FRAME_EPOCH(FlatBufferBuilder $builder, $REF_FRAME_EPOCH)
    {
        $builder->addDoubleX(2, $REF_FRAME_EPOCH, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addTIME_SYSTEM(FlatBufferBuilder $builder, $TIME_SYSTEM)
    {
        $builder->addSbyteX(3, $TIME_SYSTEM, 11);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addMEAN_ELEMENT_THEORY(FlatBufferBuilder $builder, $MEAN_ELEMENT_THEORY)
    {
        $builder->addSbyteX(4, $MEAN_ELEMENT_THEORY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRECORDS(FlatBufferBuilder $builder, $RECORDS)
    {
        $builder->addOffsetX(5, $RECORDS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRECORDSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRECORDSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endMPECOLLECTION(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishMPECOLLECTIONBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$MPE");
    }
}
