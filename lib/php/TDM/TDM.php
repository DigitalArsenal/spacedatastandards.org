<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Tracking Data Message
class TDM extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return TDM
     */
    public static function getRootAsTDM(ByteBuffer $bb)
    {
        $obj = new TDM();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function TDMIdentifier()
    {
        return "$TDM";
    }

    public static function TDMBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::TDMIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return TDM
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier for the observation OBSERVER -  [Specific CCSDS Document]
    public function getOBSERVER_ID()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Cartesian X coordinate of the OBSERVER location in chosen reference frame
    /**
     * @return double
     */
    public function getOBSERVER_X()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Y coordinate of the OBSERVER location in chosen reference frame 
    /**
     * @return double
     */
    public function getOBSERVER_Y()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Z coordinate of the OBSERVER location in chosen reference frame 
    /**
     * @return double
     */
    public function getOBSERVER_Z()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian X coordinate of the OBSERVER velocity in chosen reference frame
    /**
     * @return double
     */
    public function getOBSERVER_VX()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Y coordinate of the OBSERVER velocity in chosen reference frame 
    /**
     * @return double
     */
    public function getOBSERVER_VY()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Cartesian Z coordinate of the OBSERVER velocity in chosen reference frame 
    /**
     * @return double
     */
    public function getOBSERVER_VZ()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Reference frame used for OBSERVER location Cartesian coordinates (e.g., ECEF, ECI)
    /**
     * @return sbyte
     */
    public function getOBSERVER_POSITION_REFERENCE_FRAME()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \refFrame::ECEF;
    }

    /// Reference frame used for obs location Cartesian coordinates (e.g., ECEF, ECI)
    /**
     * @return sbyte
     */
    public function getOBS_REFERENCE_FRAME()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \refFrame::ECEF;
    }

    /// Epoch or observation time -  CCSDS 503.0-B-1
    public function getEPOCH()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// TDM version number -  CCSDS 503.0-B-1, Page D-9
    public function getCCSDS_TDM_VERS()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Comments regarding TDM -  various sections, e.g., Page D-9
    /**
     * @param int offset
     * @return string
     */
    public function getCOMMENT($j)
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCOMMENTLength()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Date of TDM creation -  CCSDS 503.0-B-1, Page D-9
    public function getCREATION_DATE()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Originator of the TDM -  CCSDS 503.0-B-1, Page D-9
    public function getORIGINATOR()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Start of metadata section -  CCSDS 503.0-B-1, Page D-9
    public function getMETA_START()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time system used -  CCSDS 503.0-B-1, Page D-9
    public function getTIME_SYSTEM()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Start time of the data -  CCSDS 503.0-B-1, Page D-9
    public function getSTART_TIME()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Stop time of the data -  CCSDS 503.0-B-1, Page D-9
    public function getSTOP_TIME()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// First participant in the TDM -  CCSDS 503.0-B-1, Page D-9
    public function getPARTICIPANT_1()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Second participant in the TDM -  CCSDS 503.0-B-1, Page D-9
    public function getPARTICIPANT_2()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Third participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
    public function getPARTICIPANT_3()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Fourth participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
    public function getPARTICIPANT_4()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Fifth participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9, max participants
    public function getPARTICIPANT_5()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mode of TDM -  CCSDS 503.0-B-1, Page D-9
    public function getMODE()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// First path in TDM -  CCSDS 503.0-B-1, Page D-9
    /**
     * @return ushort
     */
    public function getPATH_1()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getUshort($o + $this->bb_pos) : 0;
    }

    /// Second path in TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9
    /**
     * @return ushort
     */
    public function getPATH_2()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getUshort($o + $this->bb_pos) : 0;
    }

    /// Transmit band -  CCSDS 503.0-B-1, Page D-9
    public function getTRANSMIT_BAND()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Receive band -  CCSDS 503.0-B-1, Page D-9
    public function getRECEIVE_BAND()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Integration interval -  CCSDS 503.0-B-1, Page D-9
    /**
     * @return float
     */
    public function getINTEGRATION_INTERVAL()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Integration reference -  CCSDS 503.0-B-1, Page D-9
    public function getINTEGRATION_REF()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Receive delay for second participant -  CCSDS 503.0-B-1, Page D-9
    /**
     * @return double
     */
    public function getRECEIVE_DELAY_2()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Receive delay for third participant -  CCSDS 503.0-B-1, Page D-9
    /**
     * @return double
     */
    public function getRECEIVE_DELAY_3()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Data quality -  CCSDS 503.0-B-1, Page D-9
    public function getDATA_QUALITY()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// End of metadata section -  CCSDS 503.0-B-1, Page D-9
    public function getMETA_STOP()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Start of data section -  CCSDS 503.0-B-1, Page D-9
    public function getDATA_START()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Transmit frequency for first participant -  CCSDS 503.0-B-1, Page D-9
    /**
     * @return double
     */
    public function getTRANSMIT_FREQ_1()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Receive frequency -  CCSDS 503.0-B-1, Page D-9
    /**
     * @param int offset
     * @return double
     */
    public function getRECEIVE_FREQ($j)
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->bb->getDouble($this->__vector($o) + $j * 8) : 0;
    }

    /**
     * @return int
     */
    public function getRECEIVE_FREQLength()
    {
        $o = $this->__offset(76);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// End of data section -  CCSDS 503.0-B-1, Page D-9
    public function getDATA_STOP()
    {
        $o = $this->__offset(78);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional properties as required by the specific application of the TDM...
    /// Reference for time tagging -  CCSDS 503.0-B-1, Page D-10
    public function getTIMETAG_REF()
    {
        $o = $this->__offset(80);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Type of angle data -  CCSDS 503.0-B-1, Page D-12
    /// Can be AZEL, RADEC, XEYN, XSYE, or another value with provided ICD
    public function getANGLE_TYPE()
    {
        $o = $this->__offset(82);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// First angle value -  CCSDS 503.0-B-1, Page D-12
    /**
     * @param int offset
     * @return float
     */
    public function getANGLE_1($j)
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->bb->getFloat($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getANGLE_1Length()
    {
        $o = $this->__offset(84);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Second angle value -  CCSDS 503.0-B-1, Page D-12
    /**
     * @param int offset
     * @return float
     */
    public function getANGLE_2($j)
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->bb->getFloat($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getANGLE_2Length()
    {
        $o = $this->__offset(86);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Uncertainty of first angle -  CCSDS 503.0-B-1
    /**
     * @return float
     */
    public function getANGLE_UNCERTAINTY_1()
    {
        $o = $this->__offset(88);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty of second angle -  CCSDS 503.0-B-1
    /**
     * @return float
     */
    public function getANGLE_UNCERTAINTY_2()
    {
        $o = $this->__offset(90);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Rate of change of range -  CCSDS 503.0-B-1
    /**
     * @return double
     */
    public function getRANGE_RATE()
    {
        $o = $this->__offset(92);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Uncertainty in range -  CCSDS 503.0-B-1
    /**
     * @return double
     */
    public function getRANGE_UNCERTAINTY()
    {
        $o = $this->__offset(94);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Mode of range data -  CCSDS 503.0-B-1, Page D-10
    public function getRANGE_MODE()
    {
        $o = $this->__offset(96);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Modulus value for range data -  CCSDS 503.0-B-1, Page D-10
    /**
     * @return double
     */
    public function getRANGE_MODULUS()
    {
        $o = $this->__offset(98);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// First correction angle -  CCSDS 503.0-B-1, Page D-12
    /**
     * @return float
     */
    public function getCORRECTION_ANGLE_1()
    {
        $o = $this->__offset(100);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Second correction angle -  CCSDS 503.0-B-1, Page D-12
    /**
     * @return float
     */
    public function getCORRECTION_ANGLE_2()
    {
        $o = $this->__offset(102);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /// Indicator of corrections applied -  CCSDS 503.0-B-1, Page D-12
    public function getCORRECTIONS_APPLIED()
    {
        $o = $this->__offset(104);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Dry component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
    /**
     * @param int offset
     * @return double
     */
    public function getTROPO_DRY($j)
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->bb->getDouble($this->__vector($o) + $j * 8) : 0;
    }

    /**
     * @return int
     */
    public function getTROPO_DRYLength()
    {
        $o = $this->__offset(106);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Wet component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14
    /**
     * @param int offset
     * @return double
     */
    public function getTROPO_WET($j)
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->bb->getDouble($this->__vector($o) + $j * 8) : 0;
    }

    /**
     * @return int
     */
    public function getTROPO_WETLength()
    {
        $o = $this->__offset(108);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Slant total electron content -  CCSDS 503.0-B-1, Page D-13
    /**
     * @param int offset
     * @return double
     */
    public function getSTEC($j)
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->bb->getDouble($this->__vector($o) + $j * 8) : 0;
    }

    /**
     * @return int
     */
    public function getSTECLength()
    {
        $o = $this->__offset(110);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Atmospheric pressure -  CCSDS 503.0-B-1, Page D-14
    /**
     * @param int offset
     * @return double
     */
    public function getPRESSURE($j)
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->bb->getDouble($this->__vector($o) + $j * 8) : 0;
    }

    /**
     * @return int
     */
    public function getPRESSURELength()
    {
        $o = $this->__offset(112);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Relative humidity -  CCSDS 503.0-B-1, Page D-14
    /**
     * @param int offset
     * @return double
     */
    public function getRHUMIDITY($j)
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->bb->getDouble($this->__vector($o) + $j * 8) : 0;
    }

    /**
     * @return int
     */
    public function getRHUMIDITYLength()
    {
        $o = $this->__offset(114);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Ambient temperature -  CCSDS 503.0-B-1, Page D-14
    /**
     * @param int offset
     * @return double
     */
    public function getTEMPERATURE($j)
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->bb->getDouble($this->__vector($o) + $j * 8) : 0;
    }

    /**
     * @return int
     */
    public function getTEMPERATURELength()
    {
        $o = $this->__offset(116);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Clock bias values -  CCSDS 503.0-B-1, Page D-15
    /**
     * @param int offset
     * @return double
     */
    public function getCLOCK_BIAS($j)
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->bb->getDouble($this->__vector($o) + $j * 8) : 0;
    }

    /**
     * @return int
     */
    public function getCLOCK_BIASLength()
    {
        $o = $this->__offset(118);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Clock drift values -  CCSDS 503.0-B-1, Page D-15
    /**
     * @param int offset
     * @return double
     */
    public function getCLOCK_DRIFT($j)
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->bb->getDouble($this->__vector($o) + $j * 8) : 0;
    }

    /**
     * @return int
     */
    public function getCLOCK_DRIFTLength()
    {
        $o = $this->__offset(120);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startTDM(FlatBufferBuilder $builder)
    {
        $builder->StartObject(59);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return TDM
     */
    public static function createTDM(FlatBufferBuilder $builder, $OBSERVER_ID, $OBSERVER_X, $OBSERVER_Y, $OBSERVER_Z, $OBSERVER_VX, $OBSERVER_VY, $OBSERVER_VZ, $OBSERVER_POSITION_REFERENCE_FRAME, $OBS_REFERENCE_FRAME, $EPOCH, $CCSDS_TDM_VERS, $COMMENT, $CREATION_DATE, $ORIGINATOR, $META_START, $TIME_SYSTEM, $START_TIME, $STOP_TIME, $PARTICIPANT_1, $PARTICIPANT_2, $PARTICIPANT_3, $PARTICIPANT_4, $PARTICIPANT_5, $MODE, $PATH_1, $PATH_2, $TRANSMIT_BAND, $RECEIVE_BAND, $INTEGRATION_INTERVAL, $INTEGRATION_REF, $RECEIVE_DELAY_2, $RECEIVE_DELAY_3, $DATA_QUALITY, $META_STOP, $DATA_START, $TRANSMIT_FREQ_1, $RECEIVE_FREQ, $DATA_STOP, $TIMETAG_REF, $ANGLE_TYPE, $ANGLE_1, $ANGLE_2, $ANGLE_UNCERTAINTY_1, $ANGLE_UNCERTAINTY_2, $RANGE_RATE, $RANGE_UNCERTAINTY, $RANGE_MODE, $RANGE_MODULUS, $CORRECTION_ANGLE_1, $CORRECTION_ANGLE_2, $CORRECTIONS_APPLIED, $TROPO_DRY, $TROPO_WET, $STEC, $PRESSURE, $RHUMIDITY, $TEMPERATURE, $CLOCK_BIAS, $CLOCK_DRIFT)
    {
        $builder->startObject(59);
        self::addOBSERVER_ID($builder, $OBSERVER_ID);
        self::addOBSERVER_X($builder, $OBSERVER_X);
        self::addOBSERVER_Y($builder, $OBSERVER_Y);
        self::addOBSERVER_Z($builder, $OBSERVER_Z);
        self::addOBSERVER_VX($builder, $OBSERVER_VX);
        self::addOBSERVER_VY($builder, $OBSERVER_VY);
        self::addOBSERVER_VZ($builder, $OBSERVER_VZ);
        self::addOBSERVER_POSITION_REFERENCE_FRAME($builder, $OBSERVER_POSITION_REFERENCE_FRAME);
        self::addOBS_REFERENCE_FRAME($builder, $OBS_REFERENCE_FRAME);
        self::addEPOCH($builder, $EPOCH);
        self::addCCSDS_TDM_VERS($builder, $CCSDS_TDM_VERS);
        self::addCOMMENT($builder, $COMMENT);
        self::addCREATION_DATE($builder, $CREATION_DATE);
        self::addORIGINATOR($builder, $ORIGINATOR);
        self::addMETA_START($builder, $META_START);
        self::addTIME_SYSTEM($builder, $TIME_SYSTEM);
        self::addSTART_TIME($builder, $START_TIME);
        self::addSTOP_TIME($builder, $STOP_TIME);
        self::addPARTICIPANT_1($builder, $PARTICIPANT_1);
        self::addPARTICIPANT_2($builder, $PARTICIPANT_2);
        self::addPARTICIPANT_3($builder, $PARTICIPANT_3);
        self::addPARTICIPANT_4($builder, $PARTICIPANT_4);
        self::addPARTICIPANT_5($builder, $PARTICIPANT_5);
        self::addMODE($builder, $MODE);
        self::addPATH_1($builder, $PATH_1);
        self::addPATH_2($builder, $PATH_2);
        self::addTRANSMIT_BAND($builder, $TRANSMIT_BAND);
        self::addRECEIVE_BAND($builder, $RECEIVE_BAND);
        self::addINTEGRATION_INTERVAL($builder, $INTEGRATION_INTERVAL);
        self::addINTEGRATION_REF($builder, $INTEGRATION_REF);
        self::addRECEIVE_DELAY_2($builder, $RECEIVE_DELAY_2);
        self::addRECEIVE_DELAY_3($builder, $RECEIVE_DELAY_3);
        self::addDATA_QUALITY($builder, $DATA_QUALITY);
        self::addMETA_STOP($builder, $META_STOP);
        self::addDATA_START($builder, $DATA_START);
        self::addTRANSMIT_FREQ_1($builder, $TRANSMIT_FREQ_1);
        self::addRECEIVE_FREQ($builder, $RECEIVE_FREQ);
        self::addDATA_STOP($builder, $DATA_STOP);
        self::addTIMETAG_REF($builder, $TIMETAG_REF);
        self::addANGLE_TYPE($builder, $ANGLE_TYPE);
        self::addANGLE_1($builder, $ANGLE_1);
        self::addANGLE_2($builder, $ANGLE_2);
        self::addANGLE_UNCERTAINTY_1($builder, $ANGLE_UNCERTAINTY_1);
        self::addANGLE_UNCERTAINTY_2($builder, $ANGLE_UNCERTAINTY_2);
        self::addRANGE_RATE($builder, $RANGE_RATE);
        self::addRANGE_UNCERTAINTY($builder, $RANGE_UNCERTAINTY);
        self::addRANGE_MODE($builder, $RANGE_MODE);
        self::addRANGE_MODULUS($builder, $RANGE_MODULUS);
        self::addCORRECTION_ANGLE_1($builder, $CORRECTION_ANGLE_1);
        self::addCORRECTION_ANGLE_2($builder, $CORRECTION_ANGLE_2);
        self::addCORRECTIONS_APPLIED($builder, $CORRECTIONS_APPLIED);
        self::addTROPO_DRY($builder, $TROPO_DRY);
        self::addTROPO_WET($builder, $TROPO_WET);
        self::addSTEC($builder, $STEC);
        self::addPRESSURE($builder, $PRESSURE);
        self::addRHUMIDITY($builder, $RHUMIDITY);
        self::addTEMPERATURE($builder, $TEMPERATURE);
        self::addCLOCK_BIAS($builder, $CLOCK_BIAS);
        self::addCLOCK_DRIFT($builder, $CLOCK_DRIFT);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOBSERVER_ID(FlatBufferBuilder $builder, $OBSERVER_ID)
    {
        $builder->addOffsetX(0, $OBSERVER_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOBSERVER_X(FlatBufferBuilder $builder, $OBSERVER_X)
    {
        $builder->addDoubleX(1, $OBSERVER_X, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOBSERVER_Y(FlatBufferBuilder $builder, $OBSERVER_Y)
    {
        $builder->addDoubleX(2, $OBSERVER_Y, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOBSERVER_Z(FlatBufferBuilder $builder, $OBSERVER_Z)
    {
        $builder->addDoubleX(3, $OBSERVER_Z, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOBSERVER_VX(FlatBufferBuilder $builder, $OBSERVER_VX)
    {
        $builder->addDoubleX(4, $OBSERVER_VX, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOBSERVER_VY(FlatBufferBuilder $builder, $OBSERVER_VY)
    {
        $builder->addDoubleX(5, $OBSERVER_VY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addOBSERVER_VZ(FlatBufferBuilder $builder, $OBSERVER_VZ)
    {
        $builder->addDoubleX(6, $OBSERVER_VZ, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addOBSERVER_POSITION_REFERENCE_FRAME(FlatBufferBuilder $builder, $OBSERVER_POSITION_REFERENCE_FRAME)
    {
        $builder->addSbyteX(7, $OBSERVER_POSITION_REFERENCE_FRAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addOBS_REFERENCE_FRAME(FlatBufferBuilder $builder, $OBS_REFERENCE_FRAME)
    {
        $builder->addSbyteX(8, $OBS_REFERENCE_FRAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEPOCH(FlatBufferBuilder $builder, $EPOCH)
    {
        $builder->addOffsetX(9, $EPOCH, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCCSDS_TDM_VERS(FlatBufferBuilder $builder, $CCSDS_TDM_VERS)
    {
        $builder->addOffsetX(10, $CCSDS_TDM_VERS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCOMMENT(FlatBufferBuilder $builder, $COMMENT)
    {
        $builder->addOffsetX(11, $COMMENT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCOMMENTVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCOMMENTVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCREATION_DATE(FlatBufferBuilder $builder, $CREATION_DATE)
    {
        $builder->addOffsetX(12, $CREATION_DATE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORIGINATOR(FlatBufferBuilder $builder, $ORIGINATOR)
    {
        $builder->addOffsetX(13, $ORIGINATOR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMETA_START(FlatBufferBuilder $builder, $META_START)
    {
        $builder->addOffsetX(14, $META_START, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTIME_SYSTEM(FlatBufferBuilder $builder, $TIME_SYSTEM)
    {
        $builder->addOffsetX(15, $TIME_SYSTEM, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSTART_TIME(FlatBufferBuilder $builder, $START_TIME)
    {
        $builder->addOffsetX(16, $START_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSTOP_TIME(FlatBufferBuilder $builder, $STOP_TIME)
    {
        $builder->addOffsetX(17, $STOP_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPARTICIPANT_1(FlatBufferBuilder $builder, $PARTICIPANT_1)
    {
        $builder->addOffsetX(18, $PARTICIPANT_1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPARTICIPANT_2(FlatBufferBuilder $builder, $PARTICIPANT_2)
    {
        $builder->addOffsetX(19, $PARTICIPANT_2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPARTICIPANT_3(FlatBufferBuilder $builder, $PARTICIPANT_3)
    {
        $builder->addOffsetX(20, $PARTICIPANT_3, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPARTICIPANT_4(FlatBufferBuilder $builder, $PARTICIPANT_4)
    {
        $builder->addOffsetX(21, $PARTICIPANT_4, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPARTICIPANT_5(FlatBufferBuilder $builder, $PARTICIPANT_5)
    {
        $builder->addOffsetX(22, $PARTICIPANT_5, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMODE(FlatBufferBuilder $builder, $MODE)
    {
        $builder->addOffsetX(23, $MODE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param ushort
     * @return void
     */
    public static function addPATH_1(FlatBufferBuilder $builder, $PATH_1)
    {
        $builder->addUshortX(24, $PATH_1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param ushort
     * @return void
     */
    public static function addPATH_2(FlatBufferBuilder $builder, $PATH_2)
    {
        $builder->addUshortX(25, $PATH_2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTRANSMIT_BAND(FlatBufferBuilder $builder, $TRANSMIT_BAND)
    {
        $builder->addOffsetX(26, $TRANSMIT_BAND, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRECEIVE_BAND(FlatBufferBuilder $builder, $RECEIVE_BAND)
    {
        $builder->addOffsetX(27, $RECEIVE_BAND, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addINTEGRATION_INTERVAL(FlatBufferBuilder $builder, $INTEGRATION_INTERVAL)
    {
        $builder->addFloatX(28, $INTEGRATION_INTERVAL, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addINTEGRATION_REF(FlatBufferBuilder $builder, $INTEGRATION_REF)
    {
        $builder->addOffsetX(29, $INTEGRATION_REF, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRECEIVE_DELAY_2(FlatBufferBuilder $builder, $RECEIVE_DELAY_2)
    {
        $builder->addDoubleX(30, $RECEIVE_DELAY_2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRECEIVE_DELAY_3(FlatBufferBuilder $builder, $RECEIVE_DELAY_3)
    {
        $builder->addDoubleX(31, $RECEIVE_DELAY_3, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDATA_QUALITY(FlatBufferBuilder $builder, $DATA_QUALITY)
    {
        $builder->addOffsetX(32, $DATA_QUALITY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMETA_STOP(FlatBufferBuilder $builder, $META_STOP)
    {
        $builder->addOffsetX(33, $META_STOP, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDATA_START(FlatBufferBuilder $builder, $DATA_START)
    {
        $builder->addOffsetX(34, $DATA_START, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTRANSMIT_FREQ_1(FlatBufferBuilder $builder, $TRANSMIT_FREQ_1)
    {
        $builder->addDoubleX(35, $TRANSMIT_FREQ_1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRECEIVE_FREQ(FlatBufferBuilder $builder, $RECEIVE_FREQ)
    {
        $builder->addOffsetX(36, $RECEIVE_FREQ, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRECEIVE_FREQVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(8, count($data), 8);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putDouble($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRECEIVE_FREQVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(8, $numElems, 8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDATA_STOP(FlatBufferBuilder $builder, $DATA_STOP)
    {
        $builder->addOffsetX(37, $DATA_STOP, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTIMETAG_REF(FlatBufferBuilder $builder, $TIMETAG_REF)
    {
        $builder->addOffsetX(38, $TIMETAG_REF, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addANGLE_TYPE(FlatBufferBuilder $builder, $ANGLE_TYPE)
    {
        $builder->addOffsetX(39, $ANGLE_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addANGLE_1(FlatBufferBuilder $builder, $ANGLE_1)
    {
        $builder->addOffsetX(40, $ANGLE_1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createANGLE_1Vector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putFloat($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startANGLE_1Vector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addANGLE_2(FlatBufferBuilder $builder, $ANGLE_2)
    {
        $builder->addOffsetX(41, $ANGLE_2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createANGLE_2Vector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putFloat($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startANGLE_2Vector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addANGLE_UNCERTAINTY_1(FlatBufferBuilder $builder, $ANGLE_UNCERTAINTY_1)
    {
        $builder->addFloatX(42, $ANGLE_UNCERTAINTY_1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addANGLE_UNCERTAINTY_2(FlatBufferBuilder $builder, $ANGLE_UNCERTAINTY_2)
    {
        $builder->addFloatX(43, $ANGLE_UNCERTAINTY_2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRANGE_RATE(FlatBufferBuilder $builder, $RANGE_RATE)
    {
        $builder->addDoubleX(44, $RANGE_RATE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRANGE_UNCERTAINTY(FlatBufferBuilder $builder, $RANGE_UNCERTAINTY)
    {
        $builder->addDoubleX(45, $RANGE_UNCERTAINTY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRANGE_MODE(FlatBufferBuilder $builder, $RANGE_MODE)
    {
        $builder->addOffsetX(46, $RANGE_MODE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRANGE_MODULUS(FlatBufferBuilder $builder, $RANGE_MODULUS)
    {
        $builder->addDoubleX(47, $RANGE_MODULUS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addCORRECTION_ANGLE_1(FlatBufferBuilder $builder, $CORRECTION_ANGLE_1)
    {
        $builder->addFloatX(48, $CORRECTION_ANGLE_1, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addCORRECTION_ANGLE_2(FlatBufferBuilder $builder, $CORRECTION_ANGLE_2)
    {
        $builder->addFloatX(49, $CORRECTION_ANGLE_2, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCORRECTIONS_APPLIED(FlatBufferBuilder $builder, $CORRECTIONS_APPLIED)
    {
        $builder->addOffsetX(50, $CORRECTIONS_APPLIED, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTROPO_DRY(FlatBufferBuilder $builder, $TROPO_DRY)
    {
        $builder->addOffsetX(51, $TROPO_DRY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTROPO_DRYVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(8, count($data), 8);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putDouble($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTROPO_DRYVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(8, $numElems, 8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTROPO_WET(FlatBufferBuilder $builder, $TROPO_WET)
    {
        $builder->addOffsetX(52, $TROPO_WET, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTROPO_WETVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(8, count($data), 8);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putDouble($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTROPO_WETVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(8, $numElems, 8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSTEC(FlatBufferBuilder $builder, $STEC)
    {
        $builder->addOffsetX(53, $STEC, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createSTECVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(8, count($data), 8);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putDouble($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startSTECVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(8, $numElems, 8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPRESSURE(FlatBufferBuilder $builder, $PRESSURE)
    {
        $builder->addOffsetX(54, $PRESSURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createPRESSUREVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(8, count($data), 8);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putDouble($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startPRESSUREVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(8, $numElems, 8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRHUMIDITY(FlatBufferBuilder $builder, $RHUMIDITY)
    {
        $builder->addOffsetX(55, $RHUMIDITY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRHUMIDITYVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(8, count($data), 8);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putDouble($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRHUMIDITYVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(8, $numElems, 8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTEMPERATURE(FlatBufferBuilder $builder, $TEMPERATURE)
    {
        $builder->addOffsetX(56, $TEMPERATURE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createTEMPERATUREVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(8, count($data), 8);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putDouble($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startTEMPERATUREVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(8, $numElems, 8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCLOCK_BIAS(FlatBufferBuilder $builder, $CLOCK_BIAS)
    {
        $builder->addOffsetX(57, $CLOCK_BIAS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCLOCK_BIASVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(8, count($data), 8);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putDouble($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCLOCK_BIASVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(8, $numElems, 8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCLOCK_DRIFT(FlatBufferBuilder $builder, $CLOCK_DRIFT)
    {
        $builder->addOffsetX(58, $CLOCK_DRIFT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCLOCK_DRIFTVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(8, count($data), 8);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putDouble($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCLOCK_DRIFTVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(8, $numElems, 8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endTDM(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishTDMBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$TDM");
    }
}
