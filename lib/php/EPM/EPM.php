<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Entity Profile Message
class EPM extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EPM
     */
    public static function getRootAsEPM(ByteBuffer $bb)
    {
        $obj = new EPM();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EPMIdentifier()
    {
        return "$EPM";
    }

    public static function EPMBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EPMIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EPM
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Common name of the entity (person or organization)
    public function getNAME()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Alternate name for the entity
    public function getALTERNATE_NAME()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Description of the entity
    public function getDESCRIPTION()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// URL of an image representing the entity
    public function getIMAGE()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// URL of a webpage that unambiguously indicates the entity's identity
    public function getSAME_AS()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// URL of the entity's website
    public function getURL()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Telephone number for the entity
    public function getTELEPHONE()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Email address for the entity
    public function getEMAIL()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Cryptographic key information associated with the entity
    /**
     * @returnVectorOffset
     */
    public function getKEY($j)
    {
        $o = $this->__offset(20);
        $obj = new CryptoKey();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getKEYLength()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Contact points for the entity
    /**
     * @returnVectorOffset
     */
    public function getCONTACT_POINT($j)
    {
        $o = $this->__offset(22);
        $obj = new ContactPoint();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getCONTACT_POINTLength()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Address of the entity, using the ContactPoint structure
    public function getADDRESS()
    {
        $obj = new ContactPoint();
        $o = $this->__offset(24);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// Job title of the entity (applicable to persons)
    public function getJOB_TITLE()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return byte
     */
    public function getENTITYType()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : \Entity::NONE;
    }

    /// Union type to represent either a person or an organization
    /**
     * @returnint
     */
    public function getENTITY($obj)
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__union($obj, $o) : null;
    }

    /// Occupation of the entity (applicable to persons)
    public function getHAS_OCCUPATION()
    {
        $obj = new Occupation();
        $o = $this->__offset(32);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEPM(FlatBufferBuilder $builder)
    {
        $builder->StartObject(15);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EPM
     */
    public static function createEPM(FlatBufferBuilder $builder, $NAME, $ALTERNATE_NAME, $DESCRIPTION, $IMAGE, $SAME_AS, $URL, $TELEPHONE, $EMAIL, $KEY, $CONTACT_POINT, $ADDRESS, $JOB_TITLE, $ENTITY_type, $ENTITY, $HAS_OCCUPATION)
    {
        $builder->startObject(15);
        self::addNAME($builder, $NAME);
        self::addALTERNATE_NAME($builder, $ALTERNATE_NAME);
        self::addDESCRIPTION($builder, $DESCRIPTION);
        self::addIMAGE($builder, $IMAGE);
        self::addSAME_AS($builder, $SAME_AS);
        self::addURL($builder, $URL);
        self::addTELEPHONE($builder, $TELEPHONE);
        self::addEMAIL($builder, $EMAIL);
        self::addKEY($builder, $KEY);
        self::addCONTACT_POINT($builder, $CONTACT_POINT);
        self::addADDRESS($builder, $ADDRESS);
        self::addJOB_TITLE($builder, $JOB_TITLE);
        self::addENTITYType($builder, $ENTITY_type);
        self::addENTITY($builder, $ENTITY);
        self::addHAS_OCCUPATION($builder, $HAS_OCCUPATION);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNAME(FlatBufferBuilder $builder, $NAME)
    {
        $builder->addOffsetX(0, $NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addALTERNATE_NAME(FlatBufferBuilder $builder, $ALTERNATE_NAME)
    {
        $builder->addOffsetX(1, $ALTERNATE_NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDESCRIPTION(FlatBufferBuilder $builder, $DESCRIPTION)
    {
        $builder->addOffsetX(2, $DESCRIPTION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIMAGE(FlatBufferBuilder $builder, $IMAGE)
    {
        $builder->addOffsetX(3, $IMAGE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSAME_AS(FlatBufferBuilder $builder, $SAME_AS)
    {
        $builder->addOffsetX(4, $SAME_AS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addURL(FlatBufferBuilder $builder, $URL)
    {
        $builder->addOffsetX(5, $URL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTELEPHONE(FlatBufferBuilder $builder, $TELEPHONE)
    {
        $builder->addOffsetX(6, $TELEPHONE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEMAIL(FlatBufferBuilder $builder, $EMAIL)
    {
        $builder->addOffsetX(7, $EMAIL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addKEY(FlatBufferBuilder $builder, $KEY)
    {
        $builder->addOffsetX(8, $KEY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createKEYVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startKEYVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCONTACT_POINT(FlatBufferBuilder $builder, $CONTACT_POINT)
    {
        $builder->addOffsetX(9, $CONTACT_POINT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCONTACT_POINTVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCONTACT_POINTVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addADDRESS(FlatBufferBuilder $builder, $ADDRESS)
    {
        $builder->addOffsetX(10, $ADDRESS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJOB_TITLE(FlatBufferBuilder $builder, $JOB_TITLE)
    {
        $builder->addOffsetX(11, $JOB_TITLE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addENTITYType(FlatBufferBuilder $builder, $ENTITYType)
    {
        $builder->addByteX(12, $ENTITYType, 0);
    }

    public static function addENTITY(FlatBufferBuilder $builder, $offset)
    {
        $builder->addOffsetX(13, $offset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addHAS_OCCUPATION(FlatBufferBuilder $builder, $HAS_OCCUPATION)
    {
        $builder->addOffsetX(14, $HAS_OCCUPATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEPM(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
