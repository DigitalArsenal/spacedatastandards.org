<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Entity Profile Message
class EPM extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EPM
     */
    public static function getRootAsEPM(ByteBuffer $bb)
    {
        $obj = new EPM();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EPMIdentifier()
    {
        return "$EPM";
    }

    public static function EPMBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EPMIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EPM
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Common name of the entity (person or organization)
    public function getNAME()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Alternate names for the entity
    /**
     * @param int offset
     * @return string
     */
    public function getALTERNATE_NAMES($j)
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getALTERNATE_NAMESLength()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Email address of the entity
    public function getEMAIL()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Telephone number of the entity
    public function getTELEPHONE()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Cryptographic keys associated with the entity
    /**
     * @returnVectorOffset
     */
    public function getKEYS($j)
    {
        $o = $this->__offset(12);
        $obj = new CryptoKey();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getKEYSLength()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Multiformat addresses associated with the entity
    /**
     * @param int offset
     * @return string
     */
    public function getMULTIFORMAT_ADDRESS($j)
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getMULTIFORMAT_ADDRESSLength()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return byte
     */
    public function getATTRIBUTESType()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : \SpecificAttributes::NONE;
    }

    /// Specific attributes for the entity, either Person or Organization
    /**
     * @returnint
     */
    public function getATTRIBUTES($obj)
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__union($obj, $o) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEPM(FlatBufferBuilder $builder)
    {
        $builder->StartObject(8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EPM
     */
    public static function createEPM(FlatBufferBuilder $builder, $NAME, $ALTERNATE_NAMES, $EMAIL, $TELEPHONE, $KEYS, $MULTIFORMAT_ADDRESS, $ATTRIBUTES_type, $ATTRIBUTES)
    {
        $builder->startObject(8);
        self::addNAME($builder, $NAME);
        self::addALTERNATE_NAMES($builder, $ALTERNATE_NAMES);
        self::addEMAIL($builder, $EMAIL);
        self::addTELEPHONE($builder, $TELEPHONE);
        self::addKEYS($builder, $KEYS);
        self::addMULTIFORMAT_ADDRESS($builder, $MULTIFORMAT_ADDRESS);
        self::addATTRIBUTESType($builder, $ATTRIBUTES_type);
        self::addATTRIBUTES($builder, $ATTRIBUTES);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNAME(FlatBufferBuilder $builder, $NAME)
    {
        $builder->addOffsetX(0, $NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addALTERNATE_NAMES(FlatBufferBuilder $builder, $ALTERNATE_NAMES)
    {
        $builder->addOffsetX(1, $ALTERNATE_NAMES, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createALTERNATE_NAMESVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startALTERNATE_NAMESVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEMAIL(FlatBufferBuilder $builder, $EMAIL)
    {
        $builder->addOffsetX(2, $EMAIL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTELEPHONE(FlatBufferBuilder $builder, $TELEPHONE)
    {
        $builder->addOffsetX(3, $TELEPHONE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addKEYS(FlatBufferBuilder $builder, $KEYS)
    {
        $builder->addOffsetX(4, $KEYS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createKEYSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startKEYSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMULTIFORMAT_ADDRESS(FlatBufferBuilder $builder, $MULTIFORMAT_ADDRESS)
    {
        $builder->addOffsetX(5, $MULTIFORMAT_ADDRESS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMULTIFORMAT_ADDRESSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMULTIFORMAT_ADDRESSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addATTRIBUTESType(FlatBufferBuilder $builder, $ATTRIBUTESType)
    {
        $builder->addByteX(6, $ATTRIBUTESType, 0);
    }

    public static function addATTRIBUTES(FlatBufferBuilder $builder, $offset)
    {
        $builder->addOffsetX(7, $offset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEPM(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
