<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Information about a person's occupation
class Occupation extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Occupation
     */
    public static function getRootAsOccupation(ByteBuffer $bb)
    {
        $obj = new Occupation();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function OccupationIdentifier()
    {
        return "$EPM";
    }

    public static function OccupationBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::OccupationIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Occupation
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Name of the occupation
    public function getNAME()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startOccupation(FlatBufferBuilder $builder)
    {
        $builder->StartObject(1);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Occupation
     */
    public static function createOccupation(FlatBufferBuilder $builder, $NAME)
    {
        $builder->startObject(1);
        self::addNAME($builder, $NAME);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNAME(FlatBufferBuilder $builder, $NAME)
    {
        $builder->addOffsetX(0, $NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endOccupation(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
