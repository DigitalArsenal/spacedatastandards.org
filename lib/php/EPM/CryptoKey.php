<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Represents cryptographic key information
class CryptoKey extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return CryptoKey
     */
    public static function getRootAsCryptoKey(ByteBuffer $bb)
    {
        $obj = new CryptoKey();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function CryptoKeyIdentifier()
    {
        return "$EPM";
    }

    public static function CryptoKeyBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::CryptoKeyIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return CryptoKey
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Public part of the cryptographic key
    public function getPUBLIC_KEY()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Extended public key
    public function getXPUB()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Private part of the cryptographic key, should be kept secret
    public function getPRIVATE_KEY()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Extended private key
    public function getXPRIV()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startCryptoKey(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return CryptoKey
     */
    public static function createCryptoKey(FlatBufferBuilder $builder, $PUBLIC_KEY, $XPUB, $PRIVATE_KEY, $XPRIV)
    {
        $builder->startObject(4);
        self::addPUBLIC_KEY($builder, $PUBLIC_KEY);
        self::addXPUB($builder, $XPUB);
        self::addPRIVATE_KEY($builder, $PRIVATE_KEY);
        self::addXPRIV($builder, $XPRIV);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPUBLIC_KEY(FlatBufferBuilder $builder, $PUBLIC_KEY)
    {
        $builder->addOffsetX(0, $PUBLIC_KEY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addXPUB(FlatBufferBuilder $builder, $XPUB)
    {
        $builder->addOffsetX(1, $XPUB, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPRIVATE_KEY(FlatBufferBuilder $builder, $PRIVATE_KEY)
    {
        $builder->addOffsetX(2, $PRIVATE_KEY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addXPRIV(FlatBufferBuilder $builder, $XPRIV)
    {
        $builder->addOffsetX(3, $XPRIV, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endCryptoKey(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
