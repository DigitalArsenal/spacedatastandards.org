<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Represents a component of a Distinguished Name (DN) in LDAP
class DNComponent extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return DNComponent
     */
    public static function getRootAsDNComponent(ByteBuffer $bb)
    {
        $obj = new DNComponent();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function DNComponentIdentifier()
    {
        return "$EPM";
    }

    public static function DNComponentBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::DNComponentIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return DNComponent
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The type of the DN component
    /**
     * @return sbyte
     */
    public function getTYPE()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \LDIFAttributeType::CN;
    }

    /// The value of the DN component
    public function getVALUE()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startDNComponent(FlatBufferBuilder $builder)
    {
        $builder->StartObject(2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return DNComponent
     */
    public static function createDNComponent(FlatBufferBuilder $builder, $TYPE, $VALUE)
    {
        $builder->startObject(2);
        self::addTYPE($builder, $TYPE);
        self::addVALUE($builder, $VALUE);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addTYPE(FlatBufferBuilder $builder, $TYPE)
    {
        $builder->addSbyteX(0, $TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVALUE(FlatBufferBuilder $builder, $VALUE)
    {
        $builder->addOffsetX(1, $VALUE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endDNComponent(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
