<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// User Profile Message
class UPM extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return UPM
     */
    public static function getRootAsUPM(ByteBuffer $bb)
    {
        $obj = new UPM();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function UPMIdentifier()
    {
        return "$UPM";
    }

    public static function UPMBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::UPMIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return UPM
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getNAME()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getALTERNATE_NAME()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getDESCRIPTION()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getIMAGE()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getSAME_AS()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getURL()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getTELEPHONE()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getEMAIL()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @returnVectorOffset
     */
    public function getKEY($j)
    {
        $o = $this->__offset(20);
        $obj = new CryptoKey();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getKEYLength()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @returnVectorOffset
     */
    public function getCONTACT_POINT($j)
    {
        $o = $this->__offset(22);
        $obj = new ContactPoint();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getCONTACT_POINTLength()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    public function getADDRESS()
    {
        $obj = new ContactPoint();
        $o = $this->__offset(24);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    public function getJOB_TITLE()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getAFFILIATION()
    {
        $obj = new Organization();
        $o = $this->__offset(28);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    public function getHAS_OCCUPATION()
    {
        $obj = new Occupation();
        $o = $this->__offset(30);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    public function getFAMILY_NAME()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getGIVEN_NAME()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getADDITIONAL_NAME()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getHONORIFIC_PREFIX()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getHONORIFIC_SUFFIX()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startUPM(FlatBufferBuilder $builder)
    {
        $builder->StartObject(19);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return UPM
     */
    public static function createUPM(FlatBufferBuilder $builder, $NAME, $ALTERNATE_NAME, $DESCRIPTION, $IMAGE, $SAME_AS, $URL, $TELEPHONE, $EMAIL, $KEY, $CONTACT_POINT, $ADDRESS, $JOB_TITLE, $AFFILIATION, $HAS_OCCUPATION, $FAMILY_NAME, $GIVEN_NAME, $ADDITIONAL_NAME, $HONORIFIC_PREFIX, $HONORIFIC_SUFFIX)
    {
        $builder->startObject(19);
        self::addNAME($builder, $NAME);
        self::addALTERNATE_NAME($builder, $ALTERNATE_NAME);
        self::addDESCRIPTION($builder, $DESCRIPTION);
        self::addIMAGE($builder, $IMAGE);
        self::addSAME_AS($builder, $SAME_AS);
        self::addURL($builder, $URL);
        self::addTELEPHONE($builder, $TELEPHONE);
        self::addEMAIL($builder, $EMAIL);
        self::addKEY($builder, $KEY);
        self::addCONTACT_POINT($builder, $CONTACT_POINT);
        self::addADDRESS($builder, $ADDRESS);
        self::addJOB_TITLE($builder, $JOB_TITLE);
        self::addAFFILIATION($builder, $AFFILIATION);
        self::addHAS_OCCUPATION($builder, $HAS_OCCUPATION);
        self::addFAMILY_NAME($builder, $FAMILY_NAME);
        self::addGIVEN_NAME($builder, $GIVEN_NAME);
        self::addADDITIONAL_NAME($builder, $ADDITIONAL_NAME);
        self::addHONORIFIC_PREFIX($builder, $HONORIFIC_PREFIX);
        self::addHONORIFIC_SUFFIX($builder, $HONORIFIC_SUFFIX);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNAME(FlatBufferBuilder $builder, $NAME)
    {
        $builder->addOffsetX(0, $NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addALTERNATE_NAME(FlatBufferBuilder $builder, $ALTERNATE_NAME)
    {
        $builder->addOffsetX(1, $ALTERNATE_NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDESCRIPTION(FlatBufferBuilder $builder, $DESCRIPTION)
    {
        $builder->addOffsetX(2, $DESCRIPTION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIMAGE(FlatBufferBuilder $builder, $IMAGE)
    {
        $builder->addOffsetX(3, $IMAGE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSAME_AS(FlatBufferBuilder $builder, $SAME_AS)
    {
        $builder->addOffsetX(4, $SAME_AS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addURL(FlatBufferBuilder $builder, $URL)
    {
        $builder->addOffsetX(5, $URL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTELEPHONE(FlatBufferBuilder $builder, $TELEPHONE)
    {
        $builder->addOffsetX(6, $TELEPHONE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEMAIL(FlatBufferBuilder $builder, $EMAIL)
    {
        $builder->addOffsetX(7, $EMAIL, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addKEY(FlatBufferBuilder $builder, $KEY)
    {
        $builder->addOffsetX(8, $KEY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createKEYVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startKEYVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCONTACT_POINT(FlatBufferBuilder $builder, $CONTACT_POINT)
    {
        $builder->addOffsetX(9, $CONTACT_POINT, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCONTACT_POINTVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCONTACT_POINTVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addADDRESS(FlatBufferBuilder $builder, $ADDRESS)
    {
        $builder->addOffsetX(10, $ADDRESS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addJOB_TITLE(FlatBufferBuilder $builder, $JOB_TITLE)
    {
        $builder->addOffsetX(11, $JOB_TITLE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAFFILIATION(FlatBufferBuilder $builder, $AFFILIATION)
    {
        $builder->addOffsetX(12, $AFFILIATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addHAS_OCCUPATION(FlatBufferBuilder $builder, $HAS_OCCUPATION)
    {
        $builder->addOffsetX(13, $HAS_OCCUPATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addFAMILY_NAME(FlatBufferBuilder $builder, $FAMILY_NAME)
    {
        $builder->addOffsetX(14, $FAMILY_NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGIVEN_NAME(FlatBufferBuilder $builder, $GIVEN_NAME)
    {
        $builder->addOffsetX(15, $GIVEN_NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addADDITIONAL_NAME(FlatBufferBuilder $builder, $ADDITIONAL_NAME)
    {
        $builder->addOffsetX(16, $ADDITIONAL_NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHONORIFIC_PREFIX(FlatBufferBuilder $builder, $HONORIFIC_PREFIX)
    {
        $builder->addOffsetX(17, $HONORIFIC_PREFIX, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addHONORIFIC_SUFFIX(FlatBufferBuilder $builder, $HONORIFIC_SUFFIX)
    {
        $builder->addOffsetX(18, $HONORIFIC_SUFFIX, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endUPM(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishUPMBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$UPM");
    }
}
