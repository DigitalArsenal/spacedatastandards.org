<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Stokes parameters, representing different aspects of polarization
class StokesParameters extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return StokesParameters
     */
    public static function getRootAsStokesParameters(ByteBuffer $bb)
    {
        $obj = new StokesParameters();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function StokesParametersIdentifier()
    {
        return "$IDM";
    }

    public static function StokesParametersBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::StokesParametersIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return StokesParameters
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Intensity
    /**
     * @return double
     */
    public function getI()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Linear polarization
    /**
     * @return double
     */
    public function getQ()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Another linear polarization, orthogonal to Q
    /**
     * @return double
     */
    public function getU()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Circular polarization
    /**
     * @return double
     */
    public function getV()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startStokesParameters(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return StokesParameters
     */
    public static function createStokesParameters(FlatBufferBuilder $builder, $I, $Q, $U, $V)
    {
        $builder->startObject(4);
        self::addI($builder, $I);
        self::addQ($builder, $Q);
        self::addU($builder, $U);
        self::addV($builder, $V);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addI(FlatBufferBuilder $builder, $I)
    {
        $builder->addDoubleX(0, $I, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addQ(FlatBufferBuilder $builder, $Q)
    {
        $builder->addDoubleX(1, $Q, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addU(FlatBufferBuilder $builder, $U)
    {
        $builder->addDoubleX(2, $U, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addV(FlatBufferBuilder $builder, $V)
    {
        $builder->addDoubleX(3, $V, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endStokesParameters(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
