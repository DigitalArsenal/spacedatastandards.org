<?php
// automatically generated by the FlatBuffers compiler, do not modify

class DeviceType
{
    /// Basic or undefined sensor type
    const UNKNOWN = 0;
    /// General optical sensors
    const OPTICAL = 1;
    /// Detects infrared radiation
    const INFRARED_SENSOR = 2;
    /// Sensitive to ultraviolet light
    const ULTRAVIOLET_SENSOR = 3;
    /// For X-ray detection
    const X_RAY_SENSOR = 4;
    /// For gamma-ray detection
    const GAMMA_RAY_SENSOR = 5;
    /// Basic radar systems
    const RADAR = 6;
    /// Advanced radar with phased array technology
    const PHASED_ARRAY_RADAR = 7;
    /// For high-resolution imaging
    const SYNTHETIC_APERTURE_RADAR = 8;
    /// For astronomical observations using bistatic setup
    const BISTATIC_RADIO_TELESCOPE = 9;
    /// For radio astronomy
    const RADIO_TELESCOPE = 10;
    /// For atmospheric studies
    const ATMOSPHERIC_SENSOR = 11;
    /// For observing space weather phenomena
    const SPACE_WEATHER_SENSOR = 12;
    /// General environmental monitoring
    const ENVIRONMENTAL_SENSOR = 13;
    /// For measuring seismic activities
    const SEISMIC_SENSOR = 14;
    /// For gravity measurements
    const GRAVIMETRIC_SENSOR = 15;
    /// For magnetic field detection
    const MAGNETIC_SENSOR = 16;
    /// For electromagnetic field analysis
    const ELECTROMAGNETIC_SENSOR = 17;
    /// For temperature and heat detection
    const THERMAL_SENSOR = 18;
    /// For detecting chemicals and substances
    const CHEMICAL_SENSOR = 19;
    /// For biological research and detection
    const BIOLOGICAL_SENSOR = 20;
    /// For detecting ionizing radiation
    const RADIATION_SENSOR = 21;
    /// For detecting subatomic particles
    const PARTICLE_DETECTOR = 22;
    /// Light Detection and Ranging
    const LIDAR = 23;
    /// Sound Navigation and Ranging
    const SONAR = 24;
    /// General telescopes for astronomical observations
    const TELESCOPE = 25;
    /// For spectral analysis
    const SPECTROSCOPIC_SENSOR = 26;
    /// For measuring light intensity
    const PHOTOMETRIC_SENSOR = 27;
    /// For analyzing polarization of light
    const POLARIMETRIC_SENSOR = 28;
    /// For detailed imaging using interference
    const INTERFEROMETRIC_SENSOR = 29;
    /// Capturing image data at multiple wavelengths
    const MULTISPECTRAL_SENSOR = 30;
    /// Advanced imaging across many spectral bands
    const HYPERSPECTRAL_SENSOR = 31;
    /// For Global Positioning System reception
    const GPS_RECEIVER = 32;
    /// Standard radio communication device
    const RADIO_COMMUNICATIONS = 33;
    /// Advanced laser communication system
    const LASER_COMMUNICATIONS = 34;
    /// Satellite communication system
    const SATELLITE_COMMUNICATIONS = 35;
    /// Device for laser-based experiments and measurements
    const LASER_INSTRUMENT = 36;
    /// Radio frequency analysis and measurement device
    const RF_ANALYZER = 37;
    /// Device for ionospheric research
    const IONOSPHERIC_SENSOR = 38;
    /// Device for laser-based imaging
    const LASER_IMAGING = 39;
    /// Advanced optical telescope
    const OPTICAL_TELESCOPE = 40;
    /// Device for high-resolution optical observations
    const HIGH_RESOLUTION_OPTICAL = 41;
    const RADIO = 42;
    /// Microwave communication device
    const MICROWAVE_TRANSMITTER = 43;
    /// Device for radio frequency monitoring
    const RF_MONITOR = 44;
    /// High-frequency radio communication device
    const HF_RADIO_COMMUNICATIONS = 45;

    private static $names = array(
        DeviceType::UNKNOWN=>"UNKNOWN",
        DeviceType::OPTICAL=>"OPTICAL",
        DeviceType::INFRARED_SENSOR=>"INFRARED_SENSOR",
        DeviceType::ULTRAVIOLET_SENSOR=>"ULTRAVIOLET_SENSOR",
        DeviceType::X_RAY_SENSOR=>"X_RAY_SENSOR",
        DeviceType::GAMMA_RAY_SENSOR=>"GAMMA_RAY_SENSOR",
        DeviceType::RADAR=>"RADAR",
        DeviceType::PHASED_ARRAY_RADAR=>"PHASED_ARRAY_RADAR",
        DeviceType::SYNTHETIC_APERTURE_RADAR=>"SYNTHETIC_APERTURE_RADAR",
        DeviceType::BISTATIC_RADIO_TELESCOPE=>"BISTATIC_RADIO_TELESCOPE",
        DeviceType::RADIO_TELESCOPE=>"RADIO_TELESCOPE",
        DeviceType::ATMOSPHERIC_SENSOR=>"ATMOSPHERIC_SENSOR",
        DeviceType::SPACE_WEATHER_SENSOR=>"SPACE_WEATHER_SENSOR",
        DeviceType::ENVIRONMENTAL_SENSOR=>"ENVIRONMENTAL_SENSOR",
        DeviceType::SEISMIC_SENSOR=>"SEISMIC_SENSOR",
        DeviceType::GRAVIMETRIC_SENSOR=>"GRAVIMETRIC_SENSOR",
        DeviceType::MAGNETIC_SENSOR=>"MAGNETIC_SENSOR",
        DeviceType::ELECTROMAGNETIC_SENSOR=>"ELECTROMAGNETIC_SENSOR",
        DeviceType::THERMAL_SENSOR=>"THERMAL_SENSOR",
        DeviceType::CHEMICAL_SENSOR=>"CHEMICAL_SENSOR",
        DeviceType::BIOLOGICAL_SENSOR=>"BIOLOGICAL_SENSOR",
        DeviceType::RADIATION_SENSOR=>"RADIATION_SENSOR",
        DeviceType::PARTICLE_DETECTOR=>"PARTICLE_DETECTOR",
        DeviceType::LIDAR=>"LIDAR",
        DeviceType::SONAR=>"SONAR",
        DeviceType::TELESCOPE=>"TELESCOPE",
        DeviceType::SPECTROSCOPIC_SENSOR=>"SPECTROSCOPIC_SENSOR",
        DeviceType::PHOTOMETRIC_SENSOR=>"PHOTOMETRIC_SENSOR",
        DeviceType::POLARIMETRIC_SENSOR=>"POLARIMETRIC_SENSOR",
        DeviceType::INTERFEROMETRIC_SENSOR=>"INTERFEROMETRIC_SENSOR",
        DeviceType::MULTISPECTRAL_SENSOR=>"MULTISPECTRAL_SENSOR",
        DeviceType::HYPERSPECTRAL_SENSOR=>"HYPERSPECTRAL_SENSOR",
        DeviceType::GPS_RECEIVER=>"GPS_RECEIVER",
        DeviceType::RADIO_COMMUNICATIONS=>"RADIO_COMMUNICATIONS",
        DeviceType::LASER_COMMUNICATIONS=>"LASER_COMMUNICATIONS",
        DeviceType::SATELLITE_COMMUNICATIONS=>"SATELLITE_COMMUNICATIONS",
        DeviceType::LASER_INSTRUMENT=>"LASER_INSTRUMENT",
        DeviceType::RF_ANALYZER=>"RF_ANALYZER",
        DeviceType::IONOSPHERIC_SENSOR=>"IONOSPHERIC_SENSOR",
        DeviceType::LASER_IMAGING=>"LASER_IMAGING",
        DeviceType::OPTICAL_TELESCOPE=>"OPTICAL_TELESCOPE",
        DeviceType::HIGH_RESOLUTION_OPTICAL=>"HIGH_RESOLUTION_OPTICAL",
        DeviceType::RADIO=>"RADIO",
        DeviceType::MICROWAVE_TRANSMITTER=>"MICROWAVE_TRANSMITTER",
        DeviceType::RF_MONITOR=>"RF_MONITOR",
        DeviceType::HF_RADIO_COMMUNICATIONS=>"HF_RADIO_COMMUNICATIONS",
    );

    public static function Name($e)
    {
        if (!isset(self::$names[$e])) {
            throw new \Exception();
        }
        return self::$names[$e];
    }
}
