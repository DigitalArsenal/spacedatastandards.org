<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Integrated Device Message
class IDM extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return IDM
     */
    public static function getRootAsIDM(ByteBuffer $bb)
    {
        $obj = new IDM();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function IDMIdentifier()
    {
        return "$IDM";
    }

    public static function IDMBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::IDMIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return IDM
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Unique identifier for the EMT
    public function getID()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Name of the EMT
    public function getNAME()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Mode of the data (real, simulated, synthetic)
    /**
     * @return sbyte
     */
    public function getDATA_MODE()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \DataMode::REAL;
    }

    /// Uplink frequency range
    public function getUPLINK()
    {
        $obj = new FrequencyRange();
        $o = $this->__offset(10);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// Downlink frequency range
    public function getDOWNLINK()
    {
        $obj = new FrequencyRange();
        $o = $this->__offset(12);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// Beacon frequency range
    public function getBEACON()
    {
        $obj = new FrequencyRange();
        $o = $this->__offset(14);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// Bands associated with the EMT
    /**
     * @returnVectorOffset
     */
    public function getBAND($j)
    {
        $o = $this->__offset(16);
        $obj = new Band();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getBANDLength()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// Type of polarization used
    /**
     * @return sbyte
     */
    public function getPOLARIZATION_TYPE()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \PolarizationType::linear;
    }

    /// Simple polarization configuration
    /**
     * @return sbyte
     */
    public function getSIMPLE_POLARIZATION()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \SimplePolarization::vertical;
    }

    /// Stokes parameters for polarization characterization
    public function getSTOKES_PARAMETERS()
    {
        $obj = new StokesParameters();
        $o = $this->__offset(22);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// Power required in Watts
    /**
     * @return double
     */
    public function getPOWER_REQUIRED()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Type of power (eg. AC or DC)
    public function getPOWER_TYPE()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates if the EMT can transmit
    /**
     * @return bool
     */
    public function getTRANSMIT()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Indicates if the EMT can receive
    /**
     * @return bool
     */
    public function getRECEIVE()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Type of the sensor
    /**
     * @return sbyte
     */
    public function getSENSOR_TYPE()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \DeviceType::UNKNOWN;
    }

    /// Source of the data
    public function getSOURCE()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Timestamp of the last observation
    public function getLAST_OB_TIME()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Lower left elevation limit
    /**
     * @return double
     */
    public function getLOWER_LEFT_ELEVATION_LIMIT()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Upper left azimuth limit
    /**
     * @return double
     */
    public function getUPPER_LEFT_AZIMUTH_LIMIT()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Lower right elevation limit
    /**
     * @return double
     */
    public function getLOWER_RIGHT_ELEVATION_LIMIT()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Lower left azimuth limit
    /**
     * @return double
     */
    public function getLOWER_LEFT_AZIMUTH_LIMIT()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Upper right elevation limit
    /**
     * @return double
     */
    public function getUPPER_RIGHT_ELEVATION_LIMIT()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Upper right azimuth limit
    /**
     * @return double
     */
    public function getUPPER_RIGHT_AZIMUTH_LIMIT()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Lower right azimuth limit
    /**
     * @return double
     */
    public function getLOWER_RIGHT_AZIMUTH_LIMIT()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Upper left elevation limit
    /**
     * @return double
     */
    public function getUPPER_LEFT_ELEVATION_LIMIT()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Right geostationary belt limit
    /**
     * @return double
     */
    public function getRIGHT_GEO_BELT_LIMIT()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Left geostationary belt limit
    /**
     * @return double
     */
    public function getLEFT_GEO_BELT_LIMIT()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Magnitude limit of the sensor
    /**
     * @return double
     */
    public function getMAGNITUDE_LIMIT()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Indicates if the site is taskable
    /**
     * @return bool
     */
    public function getTASKABLE()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startIDM(FlatBufferBuilder $builder)
    {
        $builder->StartObject(29);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return IDM
     */
    public static function createIDM(FlatBufferBuilder $builder, $ID, $NAME, $DATA_MODE, $UPLINK, $DOWNLINK, $BEACON, $BAND, $POLARIZATION_TYPE, $SIMPLE_POLARIZATION, $STOKES_PARAMETERS, $POWER_REQUIRED, $POWER_TYPE, $TRANSMIT, $RECEIVE, $SENSOR_TYPE, $SOURCE, $LAST_OB_TIME, $LOWER_LEFT_ELEVATION_LIMIT, $UPPER_LEFT_AZIMUTH_LIMIT, $LOWER_RIGHT_ELEVATION_LIMIT, $LOWER_LEFT_AZIMUTH_LIMIT, $UPPER_RIGHT_ELEVATION_LIMIT, $UPPER_RIGHT_AZIMUTH_LIMIT, $LOWER_RIGHT_AZIMUTH_LIMIT, $UPPER_LEFT_ELEVATION_LIMIT, $RIGHT_GEO_BELT_LIMIT, $LEFT_GEO_BELT_LIMIT, $MAGNITUDE_LIMIT, $TASKABLE)
    {
        $builder->startObject(29);
        self::addID($builder, $ID);
        self::addNAME($builder, $NAME);
        self::addDATA_MODE($builder, $DATA_MODE);
        self::addUPLINK($builder, $UPLINK);
        self::addDOWNLINK($builder, $DOWNLINK);
        self::addBEACON($builder, $BEACON);
        self::addBAND($builder, $BAND);
        self::addPOLARIZATION_TYPE($builder, $POLARIZATION_TYPE);
        self::addSIMPLE_POLARIZATION($builder, $SIMPLE_POLARIZATION);
        self::addSTOKES_PARAMETERS($builder, $STOKES_PARAMETERS);
        self::addPOWER_REQUIRED($builder, $POWER_REQUIRED);
        self::addPOWER_TYPE($builder, $POWER_TYPE);
        self::addTRANSMIT($builder, $TRANSMIT);
        self::addRECEIVE($builder, $RECEIVE);
        self::addSENSOR_TYPE($builder, $SENSOR_TYPE);
        self::addSOURCE($builder, $SOURCE);
        self::addLAST_OB_TIME($builder, $LAST_OB_TIME);
        self::addLOWER_LEFT_ELEVATION_LIMIT($builder, $LOWER_LEFT_ELEVATION_LIMIT);
        self::addUPPER_LEFT_AZIMUTH_LIMIT($builder, $UPPER_LEFT_AZIMUTH_LIMIT);
        self::addLOWER_RIGHT_ELEVATION_LIMIT($builder, $LOWER_RIGHT_ELEVATION_LIMIT);
        self::addLOWER_LEFT_AZIMUTH_LIMIT($builder, $LOWER_LEFT_AZIMUTH_LIMIT);
        self::addUPPER_RIGHT_ELEVATION_LIMIT($builder, $UPPER_RIGHT_ELEVATION_LIMIT);
        self::addUPPER_RIGHT_AZIMUTH_LIMIT($builder, $UPPER_RIGHT_AZIMUTH_LIMIT);
        self::addLOWER_RIGHT_AZIMUTH_LIMIT($builder, $LOWER_RIGHT_AZIMUTH_LIMIT);
        self::addUPPER_LEFT_ELEVATION_LIMIT($builder, $UPPER_LEFT_ELEVATION_LIMIT);
        self::addRIGHT_GEO_BELT_LIMIT($builder, $RIGHT_GEO_BELT_LIMIT);
        self::addLEFT_GEO_BELT_LIMIT($builder, $LEFT_GEO_BELT_LIMIT);
        self::addMAGNITUDE_LIMIT($builder, $MAGNITUDE_LIMIT);
        self::addTASKABLE($builder, $TASKABLE);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addID(FlatBufferBuilder $builder, $ID)
    {
        $builder->addOffsetX(0, $ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNAME(FlatBufferBuilder $builder, $NAME)
    {
        $builder->addOffsetX(1, $NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDATA_MODE(FlatBufferBuilder $builder, $DATA_MODE)
    {
        $builder->addSbyteX(2, $DATA_MODE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addUPLINK(FlatBufferBuilder $builder, $UPLINK)
    {
        $builder->addOffsetX(3, $UPLINK, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDOWNLINK(FlatBufferBuilder $builder, $DOWNLINK)
    {
        $builder->addOffsetX(4, $DOWNLINK, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addBEACON(FlatBufferBuilder $builder, $BEACON)
    {
        $builder->addOffsetX(5, $BEACON, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addBAND(FlatBufferBuilder $builder, $BAND)
    {
        $builder->addOffsetX(6, $BAND, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createBANDVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startBANDVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addPOLARIZATION_TYPE(FlatBufferBuilder $builder, $POLARIZATION_TYPE)
    {
        $builder->addSbyteX(7, $POLARIZATION_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addSIMPLE_POLARIZATION(FlatBufferBuilder $builder, $SIMPLE_POLARIZATION)
    {
        $builder->addSbyteX(8, $SIMPLE_POLARIZATION, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSTOKES_PARAMETERS(FlatBufferBuilder $builder, $STOKES_PARAMETERS)
    {
        $builder->addOffsetX(9, $STOKES_PARAMETERS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPOWER_REQUIRED(FlatBufferBuilder $builder, $POWER_REQUIRED)
    {
        $builder->addDoubleX(10, $POWER_REQUIRED, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPOWER_TYPE(FlatBufferBuilder $builder, $POWER_TYPE)
    {
        $builder->addOffsetX(11, $POWER_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addTRANSMIT(FlatBufferBuilder $builder, $TRANSMIT)
    {
        $builder->addBoolX(12, $TRANSMIT, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addRECEIVE(FlatBufferBuilder $builder, $RECEIVE)
    {
        $builder->addBoolX(13, $RECEIVE, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addSENSOR_TYPE(FlatBufferBuilder $builder, $SENSOR_TYPE)
    {
        $builder->addSbyteX(14, $SENSOR_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSOURCE(FlatBufferBuilder $builder, $SOURCE)
    {
        $builder->addOffsetX(15, $SOURCE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLAST_OB_TIME(FlatBufferBuilder $builder, $LAST_OB_TIME)
    {
        $builder->addOffsetX(16, $LAST_OB_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLOWER_LEFT_ELEVATION_LIMIT(FlatBufferBuilder $builder, $LOWER_LEFT_ELEVATION_LIMIT)
    {
        $builder->addDoubleX(17, $LOWER_LEFT_ELEVATION_LIMIT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUPPER_LEFT_AZIMUTH_LIMIT(FlatBufferBuilder $builder, $UPPER_LEFT_AZIMUTH_LIMIT)
    {
        $builder->addDoubleX(18, $UPPER_LEFT_AZIMUTH_LIMIT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLOWER_RIGHT_ELEVATION_LIMIT(FlatBufferBuilder $builder, $LOWER_RIGHT_ELEVATION_LIMIT)
    {
        $builder->addDoubleX(19, $LOWER_RIGHT_ELEVATION_LIMIT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLOWER_LEFT_AZIMUTH_LIMIT(FlatBufferBuilder $builder, $LOWER_LEFT_AZIMUTH_LIMIT)
    {
        $builder->addDoubleX(20, $LOWER_LEFT_AZIMUTH_LIMIT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUPPER_RIGHT_ELEVATION_LIMIT(FlatBufferBuilder $builder, $UPPER_RIGHT_ELEVATION_LIMIT)
    {
        $builder->addDoubleX(21, $UPPER_RIGHT_ELEVATION_LIMIT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUPPER_RIGHT_AZIMUTH_LIMIT(FlatBufferBuilder $builder, $UPPER_RIGHT_AZIMUTH_LIMIT)
    {
        $builder->addDoubleX(22, $UPPER_RIGHT_AZIMUTH_LIMIT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLOWER_RIGHT_AZIMUTH_LIMIT(FlatBufferBuilder $builder, $LOWER_RIGHT_AZIMUTH_LIMIT)
    {
        $builder->addDoubleX(23, $LOWER_RIGHT_AZIMUTH_LIMIT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addUPPER_LEFT_ELEVATION_LIMIT(FlatBufferBuilder $builder, $UPPER_LEFT_ELEVATION_LIMIT)
    {
        $builder->addDoubleX(24, $UPPER_LEFT_ELEVATION_LIMIT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRIGHT_GEO_BELT_LIMIT(FlatBufferBuilder $builder, $RIGHT_GEO_BELT_LIMIT)
    {
        $builder->addDoubleX(25, $RIGHT_GEO_BELT_LIMIT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addLEFT_GEO_BELT_LIMIT(FlatBufferBuilder $builder, $LEFT_GEO_BELT_LIMIT)
    {
        $builder->addDoubleX(26, $LEFT_GEO_BELT_LIMIT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMAGNITUDE_LIMIT(FlatBufferBuilder $builder, $MAGNITUDE_LIMIT)
    {
        $builder->addDoubleX(27, $MAGNITUDE_LIMIT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addTASKABLE(FlatBufferBuilder $builder, $TASKABLE)
    {
        $builder->addBoolX(28, $TASKABLE, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endIDM(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishIDMBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$IDM");
    }
}
