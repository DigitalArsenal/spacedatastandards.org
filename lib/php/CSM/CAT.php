<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Catalog Entity Message
class CAT extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return CAT
     */
    public static function getRootAsCAT(ByteBuffer $bb)
    {
        $obj = new CAT();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function CATIdentifier()
    {
        return "$CAT";
    }

    public static function CATBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::CATIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return CAT
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Satellite Name(s)
    public function getOBJECT_NAME()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// International Designator (YYYY-NNNAAA)
    public function getOBJECT_ID()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// NORAD Catalog Number
    /**
     * @return uint
     */
    public function getNORAD_CAT_ID()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 0;
    }

    /// Object type (Payload, Rocket body, Debris, Unknown)
    /**
     * @return sbyte
     */
    public function getOBJECT_TYPE()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \objectType::UNKNOWN;
    }

    /// Operational Status Code
    /**
     * @return sbyte
     */
    public function getOPS_STATUS_CODE()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \opsStatusCode::UNKNOWN;
    }

    /// Ownership, typically country or company
    /**
     * @return sbyte
     */
    public function getOWNER()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \ownerCode::AB;
    }

    /// Launch Date [year-month-day] (ISO 8601)
    public function getLAUNCH_DATE()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Launch Site
    public function getLAUNCH_SITE()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Decay Date, if applicable [year-month-day] (ISO 8601)
    public function getDECAY_DATE()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Orbital period [minutes]
    /**
     * @return double
     */
    public function getPERIOD()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Inclination [degrees]
    /**
     * @return double
     */
    public function getINCLINATION()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Apogee Altitude [kilometers]
    /**
     * @return double
     */
    public function getAPOGEE()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Perigee Altitude [kilometers]
    /**
     * @return double
     */
    public function getPERIGEE()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Radar Cross Section [meters2]; blank if no data available
    /**
     * @return double
     */
    public function getRCS()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Data status code; blank otherwise
    /**
     * @return sbyte
     */
    public function getDATA_STATUS_CODE()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \dataStatusCode::NO_CURRENT_ELEMENTS;
    }

    /// Orbit center
    public function getORBIT_CENTER()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Orbit type (Orbit, Landing, Impact, Docked to RSO, roundtrip)
    /**
     * @return sbyte
     */
    public function getORBIT_TYPE()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \orbitType::ORBIT;
    }

    /// Deployment Date [year-month-day] (ISO 8601)
    public function getDEPLOYMENT_DATE()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Indicates if the object is maneuverable
    /**
     * @return bool
     */
    public function getMANEUVERABLE()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /// Size [meters]; blank if no data available
    /**
     * @return double
     */
    public function getSIZE()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Mass [kilograms]; blank if no data available
    /**
     * @return double
     */
    public function getMASS()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// Mass type (Dry, Wet)
    /**
     * @return sbyte
     */
    public function getMASS_TYPE()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \massType::DRY;
    }

    /// Vector of PAYLOADS
    /**
     * @returnVectorOffset
     */
    public function getPAYLOADS($j)
    {
        $o = $this->__offset(48);
        $obj = new PLD();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getPAYLOADSLength()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startCAT(FlatBufferBuilder $builder)
    {
        $builder->StartObject(23);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return CAT
     */
    public static function createCAT(FlatBufferBuilder $builder, $OBJECT_NAME, $OBJECT_ID, $NORAD_CAT_ID, $OBJECT_TYPE, $OPS_STATUS_CODE, $OWNER, $LAUNCH_DATE, $LAUNCH_SITE, $DECAY_DATE, $PERIOD, $INCLINATION, $APOGEE, $PERIGEE, $RCS, $DATA_STATUS_CODE, $ORBIT_CENTER, $ORBIT_TYPE, $DEPLOYMENT_DATE, $MANEUVERABLE, $SIZE, $MASS, $MASS_TYPE, $PAYLOADS)
    {
        $builder->startObject(23);
        self::addOBJECT_NAME($builder, $OBJECT_NAME);
        self::addOBJECT_ID($builder, $OBJECT_ID);
        self::addNORAD_CAT_ID($builder, $NORAD_CAT_ID);
        self::addOBJECT_TYPE($builder, $OBJECT_TYPE);
        self::addOPS_STATUS_CODE($builder, $OPS_STATUS_CODE);
        self::addOWNER($builder, $OWNER);
        self::addLAUNCH_DATE($builder, $LAUNCH_DATE);
        self::addLAUNCH_SITE($builder, $LAUNCH_SITE);
        self::addDECAY_DATE($builder, $DECAY_DATE);
        self::addPERIOD($builder, $PERIOD);
        self::addINCLINATION($builder, $INCLINATION);
        self::addAPOGEE($builder, $APOGEE);
        self::addPERIGEE($builder, $PERIGEE);
        self::addRCS($builder, $RCS);
        self::addDATA_STATUS_CODE($builder, $DATA_STATUS_CODE);
        self::addORBIT_CENTER($builder, $ORBIT_CENTER);
        self::addORBIT_TYPE($builder, $ORBIT_TYPE);
        self::addDEPLOYMENT_DATE($builder, $DEPLOYMENT_DATE);
        self::addMANEUVERABLE($builder, $MANEUVERABLE);
        self::addSIZE($builder, $SIZE);
        self::addMASS($builder, $MASS);
        self::addMASS_TYPE($builder, $MASS_TYPE);
        self::addPAYLOADS($builder, $PAYLOADS);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOBJECT_NAME(FlatBufferBuilder $builder, $OBJECT_NAME)
    {
        $builder->addOffsetX(0, $OBJECT_NAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addOBJECT_ID(FlatBufferBuilder $builder, $OBJECT_ID)
    {
        $builder->addOffsetX(1, $OBJECT_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addNORAD_CAT_ID(FlatBufferBuilder $builder, $NORAD_CAT_ID)
    {
        $builder->addUintX(2, $NORAD_CAT_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addOBJECT_TYPE(FlatBufferBuilder $builder, $OBJECT_TYPE)
    {
        $builder->addSbyteX(3, $OBJECT_TYPE, 3);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addOPS_STATUS_CODE(FlatBufferBuilder $builder, $OPS_STATUS_CODE)
    {
        $builder->addSbyteX(4, $OPS_STATUS_CODE, 7);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addOWNER(FlatBufferBuilder $builder, $OWNER)
    {
        $builder->addSbyteX(5, $OWNER, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLAUNCH_DATE(FlatBufferBuilder $builder, $LAUNCH_DATE)
    {
        $builder->addOffsetX(6, $LAUNCH_DATE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addLAUNCH_SITE(FlatBufferBuilder $builder, $LAUNCH_SITE)
    {
        $builder->addOffsetX(7, $LAUNCH_SITE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDECAY_DATE(FlatBufferBuilder $builder, $DECAY_DATE)
    {
        $builder->addOffsetX(8, $DECAY_DATE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPERIOD(FlatBufferBuilder $builder, $PERIOD)
    {
        $builder->addDoubleX(9, $PERIOD, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addINCLINATION(FlatBufferBuilder $builder, $INCLINATION)
    {
        $builder->addDoubleX(10, $INCLINATION, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addAPOGEE(FlatBufferBuilder $builder, $APOGEE)
    {
        $builder->addDoubleX(11, $APOGEE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addPERIGEE(FlatBufferBuilder $builder, $PERIGEE)
    {
        $builder->addDoubleX(12, $PERIGEE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRCS(FlatBufferBuilder $builder, $RCS)
    {
        $builder->addDoubleX(13, $RCS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDATA_STATUS_CODE(FlatBufferBuilder $builder, $DATA_STATUS_CODE)
    {
        $builder->addSbyteX(14, $DATA_STATUS_CODE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORBIT_CENTER(FlatBufferBuilder $builder, $ORBIT_CENTER)
    {
        $builder->addOffsetX(15, $ORBIT_CENTER, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addORBIT_TYPE(FlatBufferBuilder $builder, $ORBIT_TYPE)
    {
        $builder->addSbyteX(16, $ORBIT_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addDEPLOYMENT_DATE(FlatBufferBuilder $builder, $DEPLOYMENT_DATE)
    {
        $builder->addOffsetX(17, $DEPLOYMENT_DATE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addMANEUVERABLE(FlatBufferBuilder $builder, $MANEUVERABLE)
    {
        $builder->addBoolX(18, $MANEUVERABLE, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSIZE(FlatBufferBuilder $builder, $SIZE)
    {
        $builder->addDoubleX(19, $SIZE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMASS(FlatBufferBuilder $builder, $MASS)
    {
        $builder->addDoubleX(20, $MASS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addMASS_TYPE(FlatBufferBuilder $builder, $MASS_TYPE)
    {
        $builder->addSbyteX(21, $MASS_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPAYLOADS(FlatBufferBuilder $builder, $PAYLOADS)
    {
        $builder->addOffsetX(22, $PAYLOADS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createPAYLOADSVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startPAYLOADSVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endCAT(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishCATBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$CAT");
    }
}
