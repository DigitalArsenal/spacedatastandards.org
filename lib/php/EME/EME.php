<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Encrypted Message Envelope
class EME extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return EME
     */
    public static function getRootAsEME(ByteBuffer $bb)
    {
        $obj = new EME();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function EMEIdentifier()
    {
        return "$EME";
    }

    public static function EMEBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::EMEIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return EME
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Encrypted data blob, containing the ciphertext of the original plaintext message.
    /**
     * @param int offset
     * @return byte
     */
    public function getENCRYPTED_BLOB($j)
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getByte($this->__vector($o) + $j * 1) : 0;
    }

    /**
     * @return int
     */
    public function getENCRYPTED_BLOBLength()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return string
     */
    public function getENCRYPTED_BLOBBytes()
    {
        return $this->__vector_as_bytes(4);
    }

    /// Temporary public key used for the encryption session, contributing to the derivation of the shared secret.
    public function getEPHEMERAL_PUBLIC_KEY()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Message Authentication Code to verify the integrity and authenticity of the encrypted message.
    public function getMAC()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Unique value used to ensure that the same plaintext produces a different ciphertext for each encryption.
    public function getNONCE()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Additional authentication tag used in some encryption schemes for integrity and authenticity verification.
    public function getTAG()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Initialization vector used to introduce randomness in the encryption process, enhancing security.
    public function getIV()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Identifier for the public key used, aiding in recipient key management and message decryption.
    public function getPUBLIC_KEY_IDENTIFIER()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Specifies the set of cryptographic algorithms used in the encryption process.
    public function getCIPHER_SUITE()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Parameters for the Key Derivation Function, guiding the process of deriving keys from the shared secret.
    public function getKDF_PARAMETERS()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Parameters defining specific settings for the encryption algorithm, such as block size or operation mode.
    public function getENCRYPTION_ALGORITHM_PARAMETERS()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEME(FlatBufferBuilder $builder)
    {
        $builder->StartObject(10);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return EME
     */
    public static function createEME(FlatBufferBuilder $builder, $ENCRYPTED_BLOB, $EPHEMERAL_PUBLIC_KEY, $MAC, $NONCE, $TAG, $IV, $PUBLIC_KEY_IDENTIFIER, $CIPHER_SUITE, $KDF_PARAMETERS, $ENCRYPTION_ALGORITHM_PARAMETERS)
    {
        $builder->startObject(10);
        self::addENCRYPTED_BLOB($builder, $ENCRYPTED_BLOB);
        self::addEPHEMERAL_PUBLIC_KEY($builder, $EPHEMERAL_PUBLIC_KEY);
        self::addMAC($builder, $MAC);
        self::addNONCE($builder, $NONCE);
        self::addTAG($builder, $TAG);
        self::addIV($builder, $IV);
        self::addPUBLIC_KEY_IDENTIFIER($builder, $PUBLIC_KEY_IDENTIFIER);
        self::addCIPHER_SUITE($builder, $CIPHER_SUITE);
        self::addKDF_PARAMETERS($builder, $KDF_PARAMETERS);
        self::addENCRYPTION_ALGORITHM_PARAMETERS($builder, $ENCRYPTION_ALGORITHM_PARAMETERS);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addENCRYPTED_BLOB(FlatBufferBuilder $builder, $ENCRYPTED_BLOB)
    {
        $builder->addOffsetX(0, $ENCRYPTED_BLOB, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createENCRYPTED_BLOBVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(1, count($data), 1);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putByte($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startENCRYPTED_BLOBVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(1, $numElems, 1);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEPHEMERAL_PUBLIC_KEY(FlatBufferBuilder $builder, $EPHEMERAL_PUBLIC_KEY)
    {
        $builder->addOffsetX(1, $EPHEMERAL_PUBLIC_KEY, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMAC(FlatBufferBuilder $builder, $MAC)
    {
        $builder->addOffsetX(2, $MAC, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNONCE(FlatBufferBuilder $builder, $NONCE)
    {
        $builder->addOffsetX(3, $NONCE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTAG(FlatBufferBuilder $builder, $TAG)
    {
        $builder->addOffsetX(4, $TAG, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addIV(FlatBufferBuilder $builder, $IV)
    {
        $builder->addOffsetX(5, $IV, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPUBLIC_KEY_IDENTIFIER(FlatBufferBuilder $builder, $PUBLIC_KEY_IDENTIFIER)
    {
        $builder->addOffsetX(6, $PUBLIC_KEY_IDENTIFIER, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCIPHER_SUITE(FlatBufferBuilder $builder, $CIPHER_SUITE)
    {
        $builder->addOffsetX(7, $CIPHER_SUITE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addKDF_PARAMETERS(FlatBufferBuilder $builder, $KDF_PARAMETERS)
    {
        $builder->addOffsetX(8, $KDF_PARAMETERS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addENCRYPTION_ALGORITHM_PARAMETERS(FlatBufferBuilder $builder, $ENCRYPTION_ALGORITHM_PARAMETERS)
    {
        $builder->addOffsetX(9, $ENCRYPTION_ALGORITHM_PARAMETERS, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEME(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEMEBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$EME");
    }
}
