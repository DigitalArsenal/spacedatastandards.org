<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Geometry table with information about geometric properties
class Geometry extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Geometry
     */
    public static function getRootAsGeometry(ByteBuffer $bb)
    {
        $obj = new Geometry();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function GeometryIdentifier()
    {
        return "$SIT";
    }

    public static function GeometryBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::GeometryIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Geometry
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Type of geometry
    public function getGEOMETRY_TYPE()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Coordinates of the geometry
    /**
     * @param int offset
     * @return float
     */
    public function getCOORDINATES($j)
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getFloat($this->__vector($o) + $j * 4) : 0;
    }

    /**
     * @return int
     */
    public function getCOORDINATESLength()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startGeometry(FlatBufferBuilder $builder)
    {
        $builder->StartObject(2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Geometry
     */
    public static function createGeometry(FlatBufferBuilder $builder, $GEOMETRY_TYPE, $COORDINATES)
    {
        $builder->startObject(2);
        self::addGEOMETRY_TYPE($builder, $GEOMETRY_TYPE);
        self::addCOORDINATES($builder, $COORDINATES);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addGEOMETRY_TYPE(FlatBufferBuilder $builder, $GEOMETRY_TYPE)
    {
        $builder->addOffsetX(0, $GEOMETRY_TYPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCOORDINATES(FlatBufferBuilder $builder, $COORDINATES)
    {
        $builder->addOffsetX(1, $COORDINATES, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCOORDINATESVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putFloat($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCOORDINATESVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endGeometry(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
