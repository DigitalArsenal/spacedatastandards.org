<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Burn Out Vector Message
class BOV extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return BOV
     */
    public static function getRootAsBOV(ByteBuffer $bb)
    {
        $obj = new BOV();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function BOVIdentifier()
    {
        return "$BOV";
    }

    public static function BOVBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::BOVIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return BOV
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return double
     */
    public function getE_COORDINATE()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getF_COORDINATE()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getG_COORDINATE()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getE_DOT()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getF_DOT()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return double
     */
    public function getG_DOT()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    public function getEPOCH_TIME()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return double
     */
    public function getTIME_FROM_LAUNCH()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startBOV(FlatBufferBuilder $builder)
    {
        $builder->StartObject(8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return BOV
     */
    public static function createBOV(FlatBufferBuilder $builder, $E_COORDINATE, $F_COORDINATE, $G_COORDINATE, $E_DOT, $F_DOT, $G_DOT, $EPOCH_TIME, $TIME_FROM_LAUNCH)
    {
        $builder->startObject(8);
        self::addE_COORDINATE($builder, $E_COORDINATE);
        self::addF_COORDINATE($builder, $F_COORDINATE);
        self::addG_COORDINATE($builder, $G_COORDINATE);
        self::addE_DOT($builder, $E_DOT);
        self::addF_DOT($builder, $F_DOT);
        self::addG_DOT($builder, $G_DOT);
        self::addEPOCH_TIME($builder, $EPOCH_TIME);
        self::addTIME_FROM_LAUNCH($builder, $TIME_FROM_LAUNCH);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addE_COORDINATE(FlatBufferBuilder $builder, $E_COORDINATE)
    {
        $builder->addDoubleX(0, $E_COORDINATE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addF_COORDINATE(FlatBufferBuilder $builder, $F_COORDINATE)
    {
        $builder->addDoubleX(1, $F_COORDINATE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addG_COORDINATE(FlatBufferBuilder $builder, $G_COORDINATE)
    {
        $builder->addDoubleX(2, $G_COORDINATE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addE_DOT(FlatBufferBuilder $builder, $E_DOT)
    {
        $builder->addDoubleX(3, $E_DOT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addF_DOT(FlatBufferBuilder $builder, $F_DOT)
    {
        $builder->addDoubleX(4, $F_DOT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addG_DOT(FlatBufferBuilder $builder, $G_DOT)
    {
        $builder->addDoubleX(5, $G_DOT, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addEPOCH_TIME(FlatBufferBuilder $builder, $EPOCH_TIME)
    {
        $builder->addOffsetX(6, $EPOCH_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addTIME_FROM_LAUNCH(FlatBufferBuilder $builder, $TIME_FROM_LAUNCH)
    {
        $builder->addDoubleX(7, $TIME_FROM_LAUNCH, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endBOV(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
