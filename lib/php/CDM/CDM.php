<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Conjunction Data Message
class CDM extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return CDM
     */
    public static function getRootAsCDM(ByteBuffer $bb)
    {
        $obj = new CDM();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function CDMIdentifier()
    {
        return "$CDM";
    }

    public static function CDMBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::CDMIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return CDM
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The version of the CCSDS CDM standard used
    /**
     * @return double
     */
    public function getCCSDS_CDM_VERS()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The date the CDM message was created
    public function getCREATION_DATE()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The originator of the CDM message
    public function getORIGINATOR()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The intended recipient of the CDM message
    public function getMESSAGE_FOR()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// A unique identifier for the CDM message
    public function getMESSAGE_ID()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Time of closest approach
    public function getTCA()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The miss distance between the two objects
    /**
     * @return double
     */
    public function getMISS_DISTANCE()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The relative speed between the two objects
    /**
     * @return double
     */
    public function getRELATIVE_SPEED()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The relative position R component
    /**
     * @return double
     */
    public function getRELATIVE_POSITION_R()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The relative position T component
    /**
     * @return double
     */
    public function getRELATIVE_POSITION_T()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The relative position N component
    /**
     * @return double
     */
    public function getRELATIVE_POSITION_N()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The relative velocity R component
    /**
     * @return double
     */
    public function getRELATIVE_VELOCITY_R()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The relative velocity T component
    /**
     * @return double
     */
    public function getRELATIVE_VELOCITY_T()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The relative velocity N component
    /**
     * @return double
     */
    public function getRELATIVE_VELOCITY_N()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The start time of the screening period
    public function getSTART_SCREEN_PERIOD()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The end time of the screening period
    public function getSTOP_SCREEN_PERIOD()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The reference frame for the screening volume
    /**
     * @return sbyte
     */
    public function getSCREEN_VOLUME_FRAME()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \refFrame::ECEF;
    }

    /// The shape of the screening volume
    /**
     * @return sbyte
     */
    public function getSCREEN_VOLUME_SHAPE()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \screeningVolumeShape::ELLIPSOID;
    }

    /// The X dimension of the screening volume
    /**
     * @return double
     */
    public function getSCREEN_VOLUME_X()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Y dimension of the screening volume
    /**
     * @return double
     */
    public function getSCREEN_VOLUME_Y()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The Z dimension of the screening volume
    /**
     * @return double
     */
    public function getSCREEN_VOLUME_Z()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The time the objects entered the screening volume
    public function getSCREEN_ENTRY_TIME()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The time the objects exited the screening volume
    public function getSCREEN_EXIT_TIME()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The probability of collision between the two objects
    /**
     * @return double
     */
    public function getCOLLISION_PROBABILITY()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /// The method used to calculate the collision probability
    public function getCOLLISION_PROBABILITY_METHOD()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// The first object in the CDM message
    public function getOBJECT1()
    {
        $obj = new CDMObject();
        $o = $this->__offset(54);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// The second object in the CDM message
    public function getOBJECT2()
    {
        $obj = new CDMObject();
        $o = $this->__offset(56);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// Data Source for the positional information for Object 1
    public function getOBJECT1_DATASOURCE()
    {
        $obj = new PNM();
        $o = $this->__offset(58);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// Data Source for the positional information for Object 2
    public function getOBJECT2_DATASOURCE()
    {
        $obj = new PNM();
        $o = $this->__offset(60);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startCDM(FlatBufferBuilder $builder)
    {
        $builder->StartObject(29);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return CDM
     */
    public static function createCDM(FlatBufferBuilder $builder, $CCSDS_CDM_VERS, $CREATION_DATE, $ORIGINATOR, $MESSAGE_FOR, $MESSAGE_ID, $TCA, $MISS_DISTANCE, $RELATIVE_SPEED, $RELATIVE_POSITION_R, $RELATIVE_POSITION_T, $RELATIVE_POSITION_N, $RELATIVE_VELOCITY_R, $RELATIVE_VELOCITY_T, $RELATIVE_VELOCITY_N, $START_SCREEN_PERIOD, $STOP_SCREEN_PERIOD, $SCREEN_VOLUME_FRAME, $SCREEN_VOLUME_SHAPE, $SCREEN_VOLUME_X, $SCREEN_VOLUME_Y, $SCREEN_VOLUME_Z, $SCREEN_ENTRY_TIME, $SCREEN_EXIT_TIME, $COLLISION_PROBABILITY, $COLLISION_PROBABILITY_METHOD, $OBJECT1, $OBJECT2, $OBJECT1_DATASOURCE, $OBJECT2_DATASOURCE)
    {
        $builder->startObject(29);
        self::addCCSDS_CDM_VERS($builder, $CCSDS_CDM_VERS);
        self::addCREATION_DATE($builder, $CREATION_DATE);
        self::addORIGINATOR($builder, $ORIGINATOR);
        self::addMESSAGE_FOR($builder, $MESSAGE_FOR);
        self::addMESSAGE_ID($builder, $MESSAGE_ID);
        self::addTCA($builder, $TCA);
        self::addMISS_DISTANCE($builder, $MISS_DISTANCE);
        self::addRELATIVE_SPEED($builder, $RELATIVE_SPEED);
        self::addRELATIVE_POSITION_R($builder, $RELATIVE_POSITION_R);
        self::addRELATIVE_POSITION_T($builder, $RELATIVE_POSITION_T);
        self::addRELATIVE_POSITION_N($builder, $RELATIVE_POSITION_N);
        self::addRELATIVE_VELOCITY_R($builder, $RELATIVE_VELOCITY_R);
        self::addRELATIVE_VELOCITY_T($builder, $RELATIVE_VELOCITY_T);
        self::addRELATIVE_VELOCITY_N($builder, $RELATIVE_VELOCITY_N);
        self::addSTART_SCREEN_PERIOD($builder, $START_SCREEN_PERIOD);
        self::addSTOP_SCREEN_PERIOD($builder, $STOP_SCREEN_PERIOD);
        self::addSCREEN_VOLUME_FRAME($builder, $SCREEN_VOLUME_FRAME);
        self::addSCREEN_VOLUME_SHAPE($builder, $SCREEN_VOLUME_SHAPE);
        self::addSCREEN_VOLUME_X($builder, $SCREEN_VOLUME_X);
        self::addSCREEN_VOLUME_Y($builder, $SCREEN_VOLUME_Y);
        self::addSCREEN_VOLUME_Z($builder, $SCREEN_VOLUME_Z);
        self::addSCREEN_ENTRY_TIME($builder, $SCREEN_ENTRY_TIME);
        self::addSCREEN_EXIT_TIME($builder, $SCREEN_EXIT_TIME);
        self::addCOLLISION_PROBABILITY($builder, $COLLISION_PROBABILITY);
        self::addCOLLISION_PROBABILITY_METHOD($builder, $COLLISION_PROBABILITY_METHOD);
        self::addOBJECT1($builder, $OBJECT1);
        self::addOBJECT2($builder, $OBJECT2);
        self::addOBJECT1_DATASOURCE($builder, $OBJECT1_DATASOURCE);
        self::addOBJECT2_DATASOURCE($builder, $OBJECT2_DATASOURCE);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCCSDS_CDM_VERS(FlatBufferBuilder $builder, $CCSDS_CDM_VERS)
    {
        $builder->addDoubleX(0, $CCSDS_CDM_VERS, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCREATION_DATE(FlatBufferBuilder $builder, $CREATION_DATE)
    {
        $builder->addOffsetX(1, $CREATION_DATE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addORIGINATOR(FlatBufferBuilder $builder, $ORIGINATOR)
    {
        $builder->addOffsetX(2, $ORIGINATOR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMESSAGE_FOR(FlatBufferBuilder $builder, $MESSAGE_FOR)
    {
        $builder->addOffsetX(3, $MESSAGE_FOR, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMESSAGE_ID(FlatBufferBuilder $builder, $MESSAGE_ID)
    {
        $builder->addOffsetX(4, $MESSAGE_ID, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTCA(FlatBufferBuilder $builder, $TCA)
    {
        $builder->addOffsetX(5, $TCA, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMISS_DISTANCE(FlatBufferBuilder $builder, $MISS_DISTANCE)
    {
        $builder->addDoubleX(6, $MISS_DISTANCE, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRELATIVE_SPEED(FlatBufferBuilder $builder, $RELATIVE_SPEED)
    {
        $builder->addDoubleX(7, $RELATIVE_SPEED, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRELATIVE_POSITION_R(FlatBufferBuilder $builder, $RELATIVE_POSITION_R)
    {
        $builder->addDoubleX(8, $RELATIVE_POSITION_R, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRELATIVE_POSITION_T(FlatBufferBuilder $builder, $RELATIVE_POSITION_T)
    {
        $builder->addDoubleX(9, $RELATIVE_POSITION_T, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRELATIVE_POSITION_N(FlatBufferBuilder $builder, $RELATIVE_POSITION_N)
    {
        $builder->addDoubleX(10, $RELATIVE_POSITION_N, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRELATIVE_VELOCITY_R(FlatBufferBuilder $builder, $RELATIVE_VELOCITY_R)
    {
        $builder->addDoubleX(11, $RELATIVE_VELOCITY_R, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRELATIVE_VELOCITY_T(FlatBufferBuilder $builder, $RELATIVE_VELOCITY_T)
    {
        $builder->addDoubleX(12, $RELATIVE_VELOCITY_T, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addRELATIVE_VELOCITY_N(FlatBufferBuilder $builder, $RELATIVE_VELOCITY_N)
    {
        $builder->addDoubleX(13, $RELATIVE_VELOCITY_N, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSTART_SCREEN_PERIOD(FlatBufferBuilder $builder, $START_SCREEN_PERIOD)
    {
        $builder->addOffsetX(14, $START_SCREEN_PERIOD, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSTOP_SCREEN_PERIOD(FlatBufferBuilder $builder, $STOP_SCREEN_PERIOD)
    {
        $builder->addOffsetX(15, $STOP_SCREEN_PERIOD, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addSCREEN_VOLUME_FRAME(FlatBufferBuilder $builder, $SCREEN_VOLUME_FRAME)
    {
        $builder->addSbyteX(16, $SCREEN_VOLUME_FRAME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addSCREEN_VOLUME_SHAPE(FlatBufferBuilder $builder, $SCREEN_VOLUME_SHAPE)
    {
        $builder->addSbyteX(17, $SCREEN_VOLUME_SHAPE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSCREEN_VOLUME_X(FlatBufferBuilder $builder, $SCREEN_VOLUME_X)
    {
        $builder->addDoubleX(18, $SCREEN_VOLUME_X, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSCREEN_VOLUME_Y(FlatBufferBuilder $builder, $SCREEN_VOLUME_Y)
    {
        $builder->addDoubleX(19, $SCREEN_VOLUME_Y, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addSCREEN_VOLUME_Z(FlatBufferBuilder $builder, $SCREEN_VOLUME_Z)
    {
        $builder->addDoubleX(20, $SCREEN_VOLUME_Z, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSCREEN_ENTRY_TIME(FlatBufferBuilder $builder, $SCREEN_ENTRY_TIME)
    {
        $builder->addOffsetX(21, $SCREEN_ENTRY_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSCREEN_EXIT_TIME(FlatBufferBuilder $builder, $SCREEN_EXIT_TIME)
    {
        $builder->addOffsetX(22, $SCREEN_EXIT_TIME, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addCOLLISION_PROBABILITY(FlatBufferBuilder $builder, $COLLISION_PROBABILITY)
    {
        $builder->addDoubleX(23, $COLLISION_PROBABILITY, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCOLLISION_PROBABILITY_METHOD(FlatBufferBuilder $builder, $COLLISION_PROBABILITY_METHOD)
    {
        $builder->addOffsetX(24, $COLLISION_PROBABILITY_METHOD, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addOBJECT1(FlatBufferBuilder $builder, $OBJECT1)
    {
        $builder->addOffsetX(25, $OBJECT1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addOBJECT2(FlatBufferBuilder $builder, $OBJECT2)
    {
        $builder->addOffsetX(26, $OBJECT2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addOBJECT1_DATASOURCE(FlatBufferBuilder $builder, $OBJECT1_DATASOURCE)
    {
        $builder->addOffsetX(27, $OBJECT1_DATASOURCE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addOBJECT2_DATASOURCE(FlatBufferBuilder $builder, $OBJECT2_DATASOURCE)
    {
        $builder->addOffsetX(28, $OBJECT2_DATASOURCE, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endCDM(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishCDMBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$CDM");
    }
}
