<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Legacy Country Code
class LCC extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return LCC
     */
    public static function getRootAsLCC(ByteBuffer $bb)
    {
        $obj = new LCC();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function LCCIdentifier()
    {
        return "$LCC";
    }

    public static function LCCBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::LCCIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return LCC
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return sbyte
     */
    public function getOWNER()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \legacyCountryCode::AB;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startLCC(FlatBufferBuilder $builder)
    {
        $builder->StartObject(1);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return LCC
     */
    public static function createLCC(FlatBufferBuilder $builder, $OWNER)
    {
        $builder->startObject(1);
        self::addOWNER($builder, $OWNER);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addOWNER(FlatBufferBuilder $builder, $OWNER)
    {
        $builder->addSbyteX(0, $OWNER, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endLCC(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishLCCBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "$LCC");
    }
}
