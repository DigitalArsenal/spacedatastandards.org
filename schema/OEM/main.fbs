// Space Data Standard - 5 - Orbit Ephemeris Message (OEM)
// Description
// Orbit information may be exchanged between two participants by sending an
// ephemeris in the form of a series of state vectors (Cartesian vectors providing position and
// velocity, and optionally accelerations) using an Orbit Ephemeris Message (OEM). The
// message recipient must have a means of interpolating across these state vectors to obtain the
// state at an arbitrary time contained within the span of the ephemeris.
// CCSDS Reference documentation: 502x0b2c1e2.

enum referenceFrame : byte {
  /// Earth Mean Equator and Equinox of J2000
  EME2000,
  /// Geocentric Celestial Reference Frame
  GCRF,
  /// Greenwich Rotating Coordinates
  GRC,
  /// International Celestial Reference Frame
  ICRF,
  /// International Terrestrial Reference Frame 2000
  ITRF2000,
  /// International Terrestrial Reference Frame 1993
  ITRF93,
  /// International Terrestrial Reference Frame 1997
  ITRF97,
  /// Mars Centered Inertial
  MCI,
  /// True of Date, Rotating
  TDR,
  /// True Equator Mean Equinox
  TEME,
  /// True of Date
  TOD
}

enum timeSystem : byte {
  /// Greenwich Mean Sidereal Time
  GMST,
  /// Global Positioning System
  GPS,
  /// Mission Elapsed Time
  MET,
  /// Mission Relative Time
  MRT,
  /// Spacecraft Clock (receiver) (requires rules for interpretation in ICD)
  SCLK,
  /// International Atomic Time
  TAI,
  /// Barycentric Coordinate Time
  TCB,
  /// Barycentric Dynamical Time
  TDB,
  /// Geocentric Coordinate Time
  TCG,
  /// Terrestrial Time
  TT,
  /// Universal Time
  UT1,
  /// Coordinated Universal Time
  UTC
}

enum manCovRefFrame : byte {
  /// Another name for 'Radial, Transverse, Normal'
  RSW,
  /// Radial, Transverse, Normal
  RTN,
  /// A local orbital coordinate frame
  TNW
}

/// A single ephemeris data line
table ephemerisDataLine {
  /// Epoch of state vector (ISO 8601)
  EPOCH:string;
  /// Position vector X-component km
  X:double;
  /// Position vector Y-component km
  Y:double;
  /// Position vector Z-component km
  Z:double;
  /// Velocity vector X-component km/s
  X_DOT:double;
  /// Velocity vector Y-component km/s
  Y_DOT:double;
  /// Velocity vector Z-component km/s
  Z_DOT:double;
  /// Optional: Acceleration vector X-component km/s/s
  X_DDOT:double;
  /// Optional: Acceleration vector Y-component km/s/s
  Y_DDOT:double;
  /// Optional: Acceleration vector Z-component km/s/s
  Z_DDOT:double;
}

/// Position/Velocity Covariance Matrix Line
table covarianceMatrixLine {
  /// Epoch
  EPOCH:string;
  /// Reference frame for the covariance matrix
  COV_REF_FRAME:manCovRefFrame;
  /// Covariance matrix [1,1] km**2
  CX_X:double;
  /// Covariance matrix [2,1] km**2
  CY_X:double;
  /// Covariance matrix [2,2] km**2
  CY_Y:double;
  /// Covariance matrix [3,1] km**2
  CZ_X:double;
  /// Covariance matrix [3,2] km**2
  CZ_Y:double;
  /// Covariance matrix [3,3] km**2
  CZ_Z:double;
  /// Covariance matrix [4,1] km**2/s
  CX_DOT_X:double;
  /// Covariance matrix [4,2] km**2/s
  CX_DOT_Y:double;
  /// Covariance matrix [4,3] km**2/s
  CX_DOT_Z:double;
  /// Covariance matrix [4,4] km**2/s**2
  CX_DOT_X_DOT:double;
  /// Covariance matrix [5,1] km**2/s
  CY_DOT_X:double;
  /// Covariance matrix [5,2] km**2/s
  CY_DOT_Y:double;
  /// Covariance matrix [5,3] km**2/s
  CY_DOT_Z:double;
  /// Covariance matrix [5,4] km**2/s**2
  CY_DOT_X_DOT:double;
  /// Covariance matrix [5,5] km**2/s**2
  CY_DOT_Y_DOT:double;
  /// Covariance matrix [6,1] km**2/s
  CZ_DOT_X:double;
  /// Covariance matrix [6,2] km**2/s
  CZ_DOT_Y:double;
  /// Covariance matrix [6,3] km**2/s
  CZ_DOT_Z:double;
  /// Covariance matrix [6,4] km**2/s**2
  CZ_DOT_X_DOT:double;
  /// Covariance matrix [6,5] km**2/s**2
  CZ_DOT_Y_DOT:double;
  /// Covariance matrix [6,6] km**2/s**2
  CZ_DOT_Z_DOT:double;
}

/// OEM Ephemeris Data Block
table ephemerisDataBlock {
  /// Plain-Text Comment
  COMMENT:string;
  /// Satellite Name(s)
  OBJECT_NAME:string;
  /// International Designator (YYYY-NNNAAA)
  OBJECT_ID:string;
  /// Origin of reference frame (EARTH, MARS, MOON, etc.)
  CENTER_NAME:string;
  /// Name of the reference frame (TEME, EME2000, etc.)
  REF_FRAME:referenceFrame;
  /// Epoch of reference frame, if not intrinsic to the definition of the reference frame
  REF_FRAME_EPOCH:string;
  /// Time system used for the orbit state and covariance matrix. (UTC)
  TIME_SYSTEM:timeSystem;
  /// Start of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)
  START_TIME:string;
  /// Optional start USEABLE time span covered by ephemeris data (ISO 8601)
  USEABLE_START_TIME:string;
  /// Optional end of USEABLE time span covered by ephemeris data (ISO 8601)
  USEABLE_STOP_TIME:string;
  /// End of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)
  STOP_TIME:string;
  /// Recommended interpolation method for ephemeris data (Hermite, Linear, Lagrange, etc.)
  INTERPOLATION:string;
  /// Recommended interpolation degree for ephemeris data
  INTERPOLATION_DEGREE:uint;

  /// Array of ephemeris data lines
  EPHEMERIS_DATA_LINES:[ephemerisDataLine];
  /// Array of covariance matrix lines
  COVARIANCE_MATRIX_LINES:[covarianceMatrixLine];
}

/// Orbit Ephemeris Message
table OEM {
  /// OEM Header
  /// OEM Version
  CCSDS_OEM_VERS:double;
  /// Creation Date
  CREATION_DATE:string;
  /// Originator
  ORIGINATOR:string;

  /// Array of ephemeris data blocks
  EPHEMERIS_DATA_BLOCK:[ephemerisDataBlock];
}

/// Collection of OEM messages
table OEMCOLLECTION {
  /// Array of OEM records
  RECORDS:[OEM];
}

root_type OEM;
file_identifier "$OEM";
