// Hash: 7838ba65bc8c72f405bcd3d4fcccf8ea5d859aa9dd82e932ebf7950e95d3eaac
// Version: 1.0.4
// -----------------------------------END_HEADER
include "../RFM/main.fbs";
include "../IDM/main.fbs";

/// Enumeration for data collection methods
enum CollectMethod : byte {
  SIDEREAL,
  RATE_TRACK,
  FIXED_STARE,
  OTHER
}

enum ObservationPosition : byte {
  FENCE,
  FIRST,
  IN,
  LAST,
  SINGLE
}

/// Electro-Optical Observation
table EOO {
  
  /// Unique identifier of the record.
  ID: string;

  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  CLASSIFICATION: string;

  /// Ob detection time in ISO 8601 UTC (YYYY-MM-DDTHH:MM:SS.ssssssZ), up to microsecond precision.
  OB_TIME: string;

  /// Correlation score of the observation when compared to a known orbit state.
  CORR_QUALITY: float;

  /// Server will auto-populate with SAT_NO if available.
  ID_ON_ORBIT: string;

  /// Unique ID of the sensor. Must have a corresponding sensor record on the server.
  SENSOR_ID: string;

  /// Accepted Collection Method
  COLLECT_METHOD: CollectMethod;

  /// 18SDS satellite number. Only list if correlated against the 18SDS catalog.
  NORAD_CAT_ID: int;

  /// Identifier for the collectRequest message if the collection was in response to tasking.
  TASK_ID: string;

  /// Optional identifier to track a transaction.
  TRANSACTION_ID: string;

  /// Identifier of the track to which this observation belongs, if applicable.
  TRACK_ID: string;

  /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).
  OB_POSITION: ObservationPosition;

  /// Provider maintained ID. May not be consistent with 18SDS SAT_NO.
  ORIG_OBJECT_ID: string;

  /// Sensor ID.
  ORIG_SENSOR_ID: string;

  /// Required if correlation is attempted. Indicates whether correlation succeeded.
  UCT: bool;

  /// Line of sight azimuth angle in degrees and topocentric frame.
  AZIMUTH: float;

  /// One sigma uncertainty in the line of sight azimuth angle, in degrees.
  AZIMUTH_UNC: float;
  
  /// Sensor line of sight azimuth angle bias in degrees.
  AZIMUTH_BIAS: float;

  /// Rate of change of the line of sight azimuth in degrees per second.
  AZIMUTH_RATE: float;

  /// Line of sight elevation in degrees and topocentric frame.
  ELEVATION: float;

  /// One sigma uncertainty in the line of sight elevation angle, in degrees.
  ELEVATION_UNC: float;

  /// Sensor line of sight elevation bias in degrees.
  ELEVATION_BIAS: float;

  /// Rate of change of the line of sight elevation in degrees per second.
  ELEVATION_RATE: float;

  /// Line of sight range in km. Reported value should include all applicable corrections.
  RANGE: float;

  /// One sigma uncertainty in the line of sight range, in km.
  RANGE_UNC: float;

  /// Sensor line of sight range bias in km.
  RANGE_BIAS: float;

  /// Range rate in km/s. Reported value should include all applicable corrections.
  RANGE_RATE: float;

  /// One sigma uncertainty in the line of sight range rate, in km/sec.
  RANGE_RATE_UNC: float;

  /// Right ascension in degrees. Required metric reporting field for EO observations.
  RA: float;

  /// Line of sight right ascension rate of change, in degrees/sec.
  RA_RATE: float;

  /// One sigma uncertainty in the line of sight right ascension angle, in degrees.
  RA_UNC: float;

  /// Sensor line of sight right ascension bias in degrees.
  RA_BIAS: float;

  /// Declination in degrees. Required metric reporting field for EO observations.
  DECLINATION: float;

  /// Line of sight declination rate of change, in degrees/sec.
  DECLINATION_RATE: float;

  /// One sigma uncertainty in the line of sight declination angle, in degrees.
  DECLINATION_UNC: float;

  /// Sensor line of sight declination angle bias in degrees.
  DECLINATION_BIAS: float;

  /// X-component of the unit vector representing the line-of-sight direction in the observer's reference frame.
  LOSX: float;

  /// Y-component of the unit vector representing the line-of-sight direction in the observer's reference frame.
  LOSY: float;

  /// Z-component of the unit vector representing the line-of-sight direction in the observer's reference frame.
  LOSZ: float;

  /// One sigma uncertainty in the line-of-sight direction vector components.
  LOS_UNC: float;

  /// X-component of the velocity vector along the line of sight, in km/s.
  LOSXVEL: float;

  /// Y-component of the velocity vector along the line of sight, in km/s.
  LOSYVEL: float;

  /// Z-component of the velocity vector along the line of sight, in km/s.
  LOSZVEL: float;

  /// WGS-84 latitude in decimal degrees at the time of the observation.
  SENLAT: float;

  /// WGS-84 longitude in decimal degrees at the time of the observation.
  SENLON: float;

  /// Sensor height in km relative to the WGS-84 ellipsoid at the time of the observation.
  SENALT: float;

  /// Cartesian X position in km at the time of the observation.
  SENX: float;

  /// Cartesian Y position in km at the time of the observation.
  SENY: float;

  /// Cartesian Z position in km at the time of the observation.
  SENZ: float;

  /// Total number of satellites in the field of view.
  FOV_COUNT: int;

  /// Number of uncorrelated satellites in the field of view (JCO).
  FOV_COUNT_UCTS: int;

  /// Image exposure duration in seconds. For observations performed using frame stacking or synthetic tracking methods, 
  /// the exposure duration should be the total integration time. This field is highly recommended / required if the 
  /// observations are going to be used for photometric processing.
  EXP_DURATION: float;

  /// Formula: 2.5 * log_10 (zero_mag_counts / EXP_DURATION).
  ZEROPTD: float;

  /// Net object signature = counts / EXP_DURATION.
  NET_OBJ_SIG: float;

  /// Net object signature uncertainty = counts uncertainty / EXP_DURATION.
  NET_OBJ_SIG_UNC: float;

  /// Measure of observed brightness calibrated against the Gaia G-band.
  MAG: float;

  /// Uncertainty of the observed brightness.
  MAG_UNC: float;

  /// [Definition needed].
  MAG_NORM_RANGE: float;

  /// Computed estimate of the latitude, positive degrees north. It should be computed based on the assumed slant range 
  /// and corresponding viewing geometry. It must NOT be computed from the orbit state.
  GEOLAT: float;

  /// Computed estimate of the longitude as +/- 180 degrees east. It should be computed based on the assumed slant range 
  /// and viewing geometry. It must NOT be computed from the orbit state.
  GEOLON: float;

  /// Computed estimate of satellite altitude in km at the reported location. It must NOT be computed from the orbit state.
  GEOALT: float;

  /// Computed estimate of the slant range in km. It must NOT be computed from the orbit state.
  GEORANGE: float;

  /// Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently 
  /// empty part of the night sky.
  SKY_BKGRND: float;

  /// Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass 
  /// to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, 
  /// describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical 
  /// object and the observer.
  PRIMARY_EXTINCTION: float;

  /// Primary Extinction Coefficient Uncertainty, in Magnitudes.
  PRIMARY_EXTINCTION_UNC: float;

  /// The angle, in degrees, between the target-to-observer vector and the target-to-sun vector. Recommend using the 
  /// calculation listed in the EOSSA documentation, pg 106 of the EOSSA spec.
  SOLAR_PHASE_ANGLE: float;

  /// The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector 
  /// onto the equatorial plane. The convention used is negative when closing (i.e., before the opposition) 
  /// and positive when opening (after the opposition).
  SOLAR_EQ_PHASE_ANGLE: float;

  /// Angle from the sun to the equatorial plane.
  SOLAR_DEC_ANGLE: float;

  /// Shutter delay in seconds.
  SHUTTER_DELAY: float;

  /// Sensor timing bias in seconds.
  TIMING_BIAS: float;

  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. 
  RAW_FILE_URI: string;

   /// Intensity of the target for IR observations, in kw/sr/em.
  INTENSITY: float;

  /// Background intensity for IR observations, in kw/sr/um.
  BG_INTENSITY: float;

  /// Optional source-provided and searchable metadata or descriptor of the data.
  DESCRIPTOR: string;

  /// Source of the data.
  SOURCE: string;

  /// Originating system or organization which produced the data, if different from the source.
  /// The origin may be different than the source if the source was a mediating system which forwarded 
  /// the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  ORIGIN: string;

  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST.
  DATA_MODE: DataMode;

  /// Time the row was created in the database, auto-populated by the system.
  CREATED_AT: string;

  /// Application user who created the row in the database, auto-populated by the system.
  CREATED_BY: string;

  /// EO observations are assumed to be topocentric J2000 coordinates ('J2000') as defined by the IAU, unless otherwise specified.
  REFERENCE_FRAME: refFrame;

  /// The sensor reference frame is assumed to be the International Terrestrial Reference Frame (ITRF), 
  /// unless otherwise specified. (ITRF is equivalent to Earth-Centered Earth-Fixed (ECEF) for this purpose). 
  /// Lat / long / height values should be reported using the WGS-84 ellipsoid, where applicable.
  SEN_REFERENCE_FRAME: string;

  /// Boolean indicating that the target object was in umbral eclipse at the time of this observation.
  UMBRA: bool;

  /// Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
  /// This field is highly recommended if the observations will be used for photometric processing.
  PENUMBRA: bool;

  /// The originating source network on which this record was created, auto-populated by the system.
  ORIG_NETWORK: string;

  /// The source from which this record was received.
  SOURCE_DL: string;

  /// Device Type
  TYPE: DeviceType;

  /// True if measured, false if computed. Required if azimuth is reported.
  AZIMUTH_MEASURED: bool;

  /// True if measured, false if computed. Required if elevation is reported.
  ELEVATION_MEASURED: bool;

  /// True if measured, false if computed. Required if range is reported.
  RANGE_MEASURED: bool;

  /// True if measured, false if computed. Required if range-rate is reported.
  RANGERATE_MEASURED: bool;

  /// True if measured, false if computed. Required if right ascension is reported.
  RA_MEASURED: bool;

  /// True if measured, false if computed. Required if declination is reported.
  DECLINATION_MEASURED: bool;

}

table EOOCOLLECTION {
  RECORDS: [EOO];
}

root_type EOO;
file_identifier "$EOO";