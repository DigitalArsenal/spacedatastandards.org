/// Collection Request Message
table CRM {
  /// Unique identifier of the record, auto-generated by the system.
  ID: string;

  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  CLASSIFICATION: string;

  /// The type of this collect or contact request.
  TYPE: string;

  /// Unique identifier of the parent plan or schedule associated with this request.
  ID_PLAN: string;

  /// Index number for records within a collection plan or schedule.
  PLAN_INDEX: int;

  /// Task ID associated with this request.
  TASK_ID: string;

  /// The dwell ID associated with this request.
  DWELL_ID: string;

  /// Optional ID from external systems.
  EXTERNAL_ID: string;

  /// Unique identifier of the requested/scheduled/planned sensor associated with this request.
  ID_SENSOR: string;

  /// Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request.
  ORIG_SENSOR_ID: string;

  /// Optional type of observation requested.
  OB_TYPE: string;

  /// The priority of the collect request.
  PRIORITY: string;

  /// The tasking category associated with this request.
  TASK_CATEGORY: int;

  /// The tasking suffix associated with this request.
  SUFFIX: string;

  /// Boolean indicating that this collect request is UCT follow-up.
  UCT_FOLLOW_UP: bool;

  /// The start time of the collect or contact request window, in ISO 8601 UTC format.
  START_TIME: string;

  /// The end time of the collect or contact request window, in ISO 8601 UTC format.
  END_TIME: string;

  /// Satellite/catalog number of the target on-orbit object for this request.
  NORAD_CAT_ID: uint32;

  /// Optional identifier provided by the data source to indicate the target object of this request.
  ORIG_OBJECT_ID: string;

  /// The tasking group to which the target object is assigned.
  TASK_GROUP: string;

  /// Inter-Range Operations Number.
  IRON: int;

  /// The orbit regime of the target.
  ORBIT_REGIME: string;

  /// The minimum object (diameter) size, in meters, to be reported.
  TARGET_SIZE: double;

  /// The minimum Radar Cross-Section of the target, in m^2.
  RCS_MIN: double;

  /// The Radar Cross-Section of the target, in m^2.
  RCS: double;

  /// The maximum Radar Cross-Section of the target, in m^2.
  RCS_MAX: double;

  /// The minimum frequency of interest, in MHz.
  FREQ_MIN: double;

  /// The estimated or expected emission frequency of the target, in MHz.
  FREQ: double;

  /// The maximum frequency of interest, in MHz.
  FREQ_MAX: double;

  /// The RF polarization.
  POLARIZATION: string;

  /// The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).
  VIS_MAG_MIN: double;

  /// The estimated or expected visual magnitude of the target, in Magnitudes (M).
  VIS_MAG: double;

  /// The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).
  VIS_MAG_MAX: double;

  /// The spectral model used for the irradiance calculation.
  SPECTRAL_MODEL: string;

  /// The fraction of solar energy reflected from target.
  REFLECTANCE: double;

  /// The target object irradiance value.
  IRRADIANCE: double;

  /// For optical sensors, the requested number of frames to capture at each sensor step.
  NUM_FRAMES: int;

  /// For optical sensors, the frame rate of the camera, in Hz.
  FRAME_RATE: double;

  /// For optical sensors, the integration time per camera frame, in milliseconds.
  INTEGRATION_TIME: double;

  /// The number of requested tracks on the target.
  NUM_TRACKS: int;

  /// The number of requested observations on the target.
  NUM_OBS: int;

  /// The duration of the collect request, in seconds.
  DURATION: int;

  /// The search pattern to be executed for this request.
  SRCH_PATTERN: string;

  /// Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.
  SCENARIO: string;

  /// ID of the Elset of the object associated with this request.
  ID_ELSET: string;

  /// ID of the Manifold Elset of the object associated with this request.
  ID_MANIFOLD: string;

  /// ID of the State Vector of the object or central vector associated with this request.
  ID_STATE_VECTOR: string;

  /// ID of the Ephemeris Set of the object associated with this request.
  ES_ID: string;

  /// Epoch time, in ISO 8601 UTC format, of the orbital elements.
  EPOCH: string;

  /// The average of the periapsis and apoapsis distances, in kilometers.
  SEMI_MAJOR_AXIS: double;

  /// The orbital eccentricity of an astronomical object.
  ECCENTRICITY: double;

  /// The angle, in degrees, between the equator and the orbit plane.
  INCLINATION: double;

  /// Right ascension of the ascending node, in degrees.
  RAAN: double;

  /// The argument of perigee, in degrees.
  ARG_OF_PERIGEE: double;

  /// The mean anomaly defines the angular position, in degrees, of the object on its orbital path.
  MEAN_ANOMALY: double;

  /// The expected or directed right ascension angle, in degrees.
  RA: double;

  /// The expected or directed declination angle, in degrees.
  DEC: double;

  /// The expected or directed azimuth angle, in degrees.
  AZ: double;

  /// The expected or directed elevation angle, in degrees.
  EL: double;

  /// The expected acquisition range or defined center range, in km.
  RANGE: double;

  /// The extent of the azimuth angle, in degrees, from center azimuth.
  EXTENT_AZ: double;

  /// The extent of the elevation angle, in degrees, from center elevation.
  EXTENT_EL: double;

  /// The extent of the range, in km, from center range.
  EXTENT_RANGE: double;

  /// WGS-84 latitude, in degrees.
  LAT: double;

  /// WGS-84 longitude, in degrees.
  LON: double;

  /// Height above WGS-84 ellipsoid (HAE), in kilometers.
  ALT: double;

  /// The stopping WGS-84 latitude of a volume definition, in degrees.
  STOP_LAT: double;

  /// The stopping WGS-84 longitude of a volume definition, in degrees.
  STOP_LON: double;

  /// The stopping HAE WGS-84 height above ellipsoid (HAE), in kilometers.
  STOP_ALT: double;

  /// The maximum inclination, in degrees, to be used in search operations.
  SRCH_INC: double;

  /// The angular distance, in degrees, in the sensor-x direction from scan center.
  X_ANGLE: double;

  /// The angular distance, in degrees, in the sensor-y direction from scan center.
  Y_ANGLE: double;

  /// The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.
  ORIENT_ANGLE: double;

  /// The customer for this request.
  CUSTOMER: string;

  /// Notes or comments associated with this request.
  NOTES: string;

  ///  Source of the data.
  SOURCE: string;

  ///  Originating system or organization which produced the data, if different from the source.
  ORIGIN: string;

  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data.
  DATA_MODE: string;
}

table CRMCOLLECTION {
  RECORDS: [CRM];
}

root_type CRM;
file_identifier "$CRM";
