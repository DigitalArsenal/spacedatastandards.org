{
    "version": "1.47.0+1744066381111",
    "STANDARDS": {
        "CRM": {
            "IDL": "// Hash: 35dff0608cc3d6804c86e624fdbe3914b585d6a36825bfe29e7d385fe1db76ec\n// Version: 1.0.1\n// -----------------------------------END_HEADER\n/// Collection Request Message\ntable CRM {\n  /// Unique identifier of the record, auto-generated by the system.\n  ID: string;\n\n  /// Classification marking of the data in IC/CAPCO Portion-marked format.\n  CLASSIFICATION: string;\n\n  /// The type of this collect or contact request.\n  TYPE: string;\n\n  /// Unique identifier of the parent plan or schedule associated with this request.\n  ID_PLAN: string;\n\n  /// Index number for records within a collection plan or schedule.\n  PLAN_INDEX: int;\n\n  /// Task ID associated with this request.\n  TASK_ID: string;\n\n  /// The dwell ID associated with this request.\n  DWELL_ID: string;\n\n  /// Optional ID from external systems.\n  EXTERNAL_ID: string;\n\n  /// Unique identifier of the requested/scheduled/planned sensor associated with this request.\n  ID_SENSOR: string;\n\n  /// Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request.\n  ORIG_SENSOR_ID: string;\n\n  /// Optional type of observation requested.\n  OB_TYPE: string;\n\n  /// The priority of the collect request.\n  PRIORITY: string;\n\n  /// The tasking category associated with this request.\n  TASK_CATEGORY: int;\n\n  /// The tasking suffix associated with this request.\n  SUFFIX: string;\n\n  /// Boolean indicating that this collect request is UCT follow-up.\n  UCT_FOLLOW_UP: bool;\n\n  /// The start time of the collect or contact request window, in ISO 8601 UTC format.\n  START_TIME: string;\n\n  /// The end time of the collect or contact request window, in ISO 8601 UTC format.\n  END_TIME: string;\n\n  /// Satellite/catalog number of the target on-orbit object for this request.\n  NORAD_CAT_ID: uint32;\n\n  /// Optional identifier provided by the data source to indicate the target object of this request.\n  ORIG_OBJECT_ID: string;\n\n  /// The tasking group to which the target object is assigned.\n  TASK_GROUP: string;\n\n  /// Inter-Range Operations Number.\n  IRON: int;\n\n  /// The orbit regime of the target.\n  ORBIT_REGIME: string;\n\n  /// The minimum object (diameter) size, in meters, to be reported.\n  TARGET_SIZE: double;\n\n  /// The minimum Radar Cross-Section of the target, in m^2.\n  RCS_MIN: double;\n\n  /// The Radar Cross-Section of the target, in m^2.\n  RCS: double;\n\n  /// The maximum Radar Cross-Section of the target, in m^2.\n  RCS_MAX: double;\n\n  /// The minimum frequency of interest, in MHz.\n  FREQ_MIN: double;\n\n  /// The estimated or expected emission frequency of the target, in MHz.\n  FREQ: double;\n\n  /// The maximum frequency of interest, in MHz.\n  FREQ_MAX: double;\n\n  /// The RF polarization.\n  POLARIZATION: string;\n\n  /// The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).\n  VIS_MAG_MIN: double;\n\n  /// The estimated or expected visual magnitude of the target, in Magnitudes (M).\n  VIS_MAG: double;\n\n  /// The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).\n  VIS_MAG_MAX: double;\n\n  /// The spectral model used for the irradiance calculation.\n  SPECTRAL_MODEL: string;\n\n  /// The fraction of solar energy reflected from target.\n  REFLECTANCE: double;\n\n  /// The target object irradiance value.\n  IRRADIANCE: double;\n\n  /// For optical sensors, the requested number of frames to capture at each sensor step.\n  NUM_FRAMES: int;\n\n  /// For optical sensors, the frame rate of the camera, in Hz.\n  FRAME_RATE: double;\n\n  /// For optical sensors, the integration time per camera frame, in milliseconds.\n  INTEGRATION_TIME: double;\n\n  /// The number of requested tracks on the target.\n  NUM_TRACKS: int;\n\n  /// The number of requested observations on the target.\n  NUM_OBS: int;\n\n  /// The duration of the collect request, in seconds.\n  DURATION: int;\n\n  /// The search pattern to be executed for this request.\n  SRCH_PATTERN: string;\n\n  /// Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.\n  SCENARIO: string;\n\n  /// ID of the Elset of the object associated with this request.\n  ID_ELSET: string;\n\n  /// ID of the Manifold Elset of the object associated with this request.\n  ID_MANIFOLD: string;\n\n  /// ID of the State Vector of the object or central vector associated with this request.\n  ID_STATE_VECTOR: string;\n\n  /// ID of the Ephemeris Set of the object associated with this request.\n  ES_ID: string;\n\n  /// Epoch time, in ISO 8601 UTC format, of the orbital elements.\n  EPOCH: string;\n\n  /// The average of the periapsis and apoapsis distances, in kilometers.\n  SEMI_MAJOR_AXIS: double;\n\n  /// The orbital eccentricity of an astronomical object.\n  ECCENTRICITY: double;\n\n  /// The angle, in degrees, between the equator and the orbit plane.\n  INCLINATION: double;\n\n  /// Right ascension of the ascending node, in degrees.\n  RAAN: double;\n\n  /// The argument of perigee, in degrees.\n  ARG_OF_PERIGEE: double;\n\n  /// The mean anomaly defines the angular position, in degrees, of the object on its orbital path.\n  MEAN_ANOMALY: double;\n\n  /// The expected or directed right ascension angle, in degrees.\n  RA: double;\n\n  /// The expected or directed declination angle, in degrees.\n  DEC: double;\n\n  /// The expected or directed azimuth angle, in degrees.\n  AZ: double;\n\n  /// The expected or directed elevation angle, in degrees.\n  EL: double;\n\n  /// The expected acquisition range or defined center range, in km.\n  RANGE: double;\n\n  /// The extent of the azimuth angle, in degrees, from center azimuth.\n  EXTENT_AZ: double;\n\n  /// The extent of the elevation angle, in degrees, from center elevation.\n  EXTENT_EL: double;\n\n  /// The extent of the range, in km, from center range.\n  EXTENT_RANGE: double;\n\n  /// WGS-84 latitude, in degrees.\n  LAT: double;\n\n  /// WGS-84 longitude, in degrees.\n  LON: double;\n\n  /// Height above WGS-84 ellipsoid (HAE), in kilometers.\n  ALT: double;\n\n  /// The stopping WGS-84 latitude of a volume definition, in degrees.\n  STOP_LAT: double;\n\n  /// The stopping WGS-84 longitude of a volume definition, in degrees.\n  STOP_LON: double;\n\n  /// The stopping HAE WGS-84 height above ellipsoid (HAE), in kilometers.\n  STOP_ALT: double;\n\n  /// The maximum inclination, in degrees, to be used in search operations.\n  SRCH_INC: double;\n\n  /// The angular distance, in degrees, in the sensor-x direction from scan center.\n  X_ANGLE: double;\n\n  /// The angular distance, in degrees, in the sensor-y direction from scan center.\n  Y_ANGLE: double;\n\n  /// The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.\n  ORIENT_ANGLE: double;\n\n  /// The customer for this request.\n  CUSTOMER: string;\n\n  /// Notes or comments associated with this request.\n  NOTES: string;\n\n  ///  Source of the data.\n  SOURCE: string;\n\n  ///  Originating system or organization which produced the data, if different from the source.\n  ORIGIN: string;\n\n  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data.\n  DATA_MODE: string;\n}\n\nroot_type CRM;\nfile_identifier \"$CRM\";",
            "files": [
                "./dist/CRM/CRM.js.tar.gz",
                "./dist/CRM/CRM.kt.tar.gz",
                "./dist/CRM/CRM.sw.tar.gz",
                "./dist/CRM/CRM.dart.tar.gz",
                "./dist/CRM/CRM.py.tar.gz",
                "./dist/CRM/CRM.rs.tar.gz",
                "./dist/CRM/CRM.go.tar.gz",
                "./dist/CRM/CRM.php.tar.gz",
                "./dist/CRM/CRM.lob.tar.gz",
                "./dist/CRM/CRM.cpp.tar.gz",
                "./dist/CRM/CRM.ts.tar.gz",
                "./dist/CRM/CRM.json.tar.gz",
                "./dist/CRM/CRM.java.tar.gz",
                "./dist/CRM/CRM.cs.tar.gz"
            ]
        },
        "OMM": {
            "IDL": "// Hash: 53fcd859a4ee426eb9de8c600857cfc18081315a19684820934a83475dbcd47e\n// Version: 1.0.2\n// -----------------------------------END_HEADER\ninclude \"../RFM/main.fbs\";\ninclude \"../TIM/main.fbs\";\ninclude \"../MET/main.fbs\";\n\n// Orbit Mean Elements Message (OMM)\n//\n// Orbit information may be exchanged between two participants by sending an orbital\n// state based on mean Keplerian elements for a specified epoch using an\n// Orbit Mean-Elements Message (OMM). The message recipient must use appropriate orbit\n// propagator algorithms in order to correctly propagate the OMM state to compute the orbit at\n// other desired epochs. \n// Legacy format description can be found here.\n// CCSDS Reference documentation: 502x0b2c1e2.\n\nenum ephemerisType : byte {\n  /// Simplified General Perturbation Model\n  SGP,\n  /// Simplified General Perturbation Model 4\n  SGP4,\n  /// Simplified Deep Space Perturbation Model 4\n  SDP4,\n  /// Simplified General Perturbation Model 8\n  SGP8,\n  /// Simplified Deep Space Perturbation Model 8\n  SDP8\n}\n\n/// Orbit Mean Elements Message\ntable OMM {\n  /// CCSDS OMM Version \n  CCSDS_OMM_VERS:double;\n  /// Creation Date (ISO 8601 UTC format) \n  CREATION_DATE:string;\n  /// Originator \n  ORIGINATOR:string;\n\n  /// Satellite Name(s)\n  OBJECT_NAME:string;\n  /// International Designator (YYYY-NNNAAA)\n  OBJECT_ID:string;\n  /// Center Name (e.g. EARTH, MARS)\n  CENTER_NAME:string;\n  /// Reference Frame\n  REFERENCE_FRAME:refFrame = TEME;\n  /// Reference Frame Epoch (ISO 8601 UTC format)\n  REFERENCE_FRAME_EPOCH:string;\n  /// Time System [M, UTC]\n  TIME_SYSTEM:timeSystem = UTC;\n  /// Mean Element Theory\n  MEAN_ELEMENT_THEORY:meanElementTheory = SGP4;\n\n  /// COMMENT (O)\n  COMMENT:string;\n  /// EPOCH of Mean Keplerian elements (ISO 8601 UTC format)\n  EPOCH:string;\n  /// Semi-major axis in km or Mean Motion in rev/day\n  SEMI_MAJOR_AXIS:double;\n  /// Mean motion in rev/day if MEAN_ELEMENT_THEORY=SGP/SGP4 else unused\n  MEAN_MOTION:double;\n  /// Eccentricity (unitless)\n  ECCENTRICITY:double;\n  /// Inclination in degrees\n  INCLINATION:double;\n  /// RA_OF_ASC_NODE in degrees\n  RA_OF_ASC_NODE:double;\n  /// ARG_OF_PERICENTER in degrees\n  ARG_OF_PERICENTER:double;\n  /// MEAN_ANOMALY in degrees\n  MEAN_ANOMALY:double;\n  /// GM in km**3/s**2\n  GM:double;\n  \n  /// MASS in kg\n  MASS:double;\n  /// SOLAR_RAD_AREA in m**2\n  SOLAR_RAD_AREA:double;\n  /// SOLAR_RAD_COEFF (unitless)\n  SOLAR_RAD_COEFF:double;\n  /// DRAG_AREA in m**2\n  DRAG_AREA:double;\n  /// DRAG_COEFF (unitless)\n  DRAG_COEFF:double;\n\n  /// TLE Related Parameters (Only if MEAN_ELEMENT_THEORY=SGP/SGP4)\n  /// EPHEMERIS_TYPE Default=0\n  EPHEMERIS_TYPE:ephemerisType = SGP4;\n  /// CLASSIFICATION_TYPE Default=U\n  CLASSIFICATION_TYPE:string;\n  /// NORAD_CAT_ID (integer) [O if SGP/SGP4]\n  NORAD_CAT_ID:uint32;\n  /// ELEMENT_SET_NO [O if SGP/SGP4]\n  ELEMENT_SET_NO:uint32;\n  /// REV_AT_EPOCH [O if SGP/SGP4]\n  REV_AT_EPOCH:double;\n  /// BSTAR in 1/Earth radii or BTERM in m\u00b2/kg depending on MEAN_ELEMENT_THEORY [C]\n  BSTAR:double;\n  /// MEAN_MOTION_DOT in rev/day\u00b2 [C if SGP or PPT3]\n  MEAN_MOTION_DOT:double;\n  /// MEAN_MOTION_DDOT in rev/day\u00b3 if SGP/PPT3 or AGOM in m\u00b2/kg if SGP4-XP [C]\n  MEAN_MOTION_DDOT:double;\n\n  /// Position/Velocity Covariance Matrix (6x6 Lower Triangular) [C if any covariance provided]\n  /// COV_REF_FRAME reference frame for covariance [C if covariance given]\n  COV_REFERENCE_FRAME:refFrame = RSW;\n  /// CX_X [km**2]\n  CX_X:double;\n  /// CY_X [km**2]\n  CY_X:double;\n  /// CY_Y [km**2]\n  CY_Y:double;\n  /// CZ_X [km**2]\n  CZ_X:double;\n  /// CZ_Y [km**2]\n  CZ_Y:double;\n  /// CZ_Z [km**2]\n  CZ_Z:double;\n  /// CX_DOT_X [km**2/s]\n  CX_DOT_X:double;\n  /// CX_DOT_Y [km**2/s]\n  CX_DOT_Y:double;\n  /// CX_DOT_Z [km**2/s]\n  CX_DOT_Z:double;\n  /// CX_DOT_X_DOT [km**2/s**2]\n  CX_DOT_X_DOT:double;\n  /// CY_DOT_X [km**2/s]\n  CY_DOT_X:double;\n  /// CY_DOT_Y [km**2/s]\n  CY_DOT_Y:double;\n  /// CY_DOT_Z [km**2/s]\n  CY_DOT_Z:double;\n  /// CY_DOT_X_DOT [km**2/s**2]\n  CY_DOT_X_DOT:double;\n  /// CY_DOT_Y_DOT [km**2/s**2]\n  CY_DOT_Y_DOT:double;\n  /// CZ_DOT_X [km**2/s]\n  CZ_DOT_X:double;\n  /// CZ_DOT_Y [km**2/s]\n  CZ_DOT_Y:double;\n  /// CZ_DOT_Z [km**2/s]\n  CZ_DOT_Z:double;\n  /// CZ_DOT_X_DOT [km**2/s**2]\n  CZ_DOT_X_DOT:double;\n  /// CZ_DOT_Y_DOT [km**2/s**2]\n  CZ_DOT_Y_DOT:double;\n  /// CZ_DOT_Z_DOT [km**2/s**2]\n  CZ_DOT_Z_DOT:double;\n\n  /// USER_DEFINED_BIP_0044_TYPE [O, units per ICD]\n  USER_DEFINED_BIP_0044_TYPE:uint;\n  /// USER_DEFINED_OBJECT_DESIGNATOR [O, units per ICD]\n  USER_DEFINED_OBJECT_DESIGNATOR:string;\n  /// USER_DEFINED_EARTH_MODEL [O, units per ICD]\n  USER_DEFINED_EARTH_MODEL:string;\n  /// USER_DEFINED_EPOCH_TIMESTAMP [O, units per ICD]\n  USER_DEFINED_EPOCH_TIMESTAMP: double;\n  /// USER_DEFINED_MICROSECONDS [O, units per ICD]\n  USER_DEFINED_MICROSECONDS: double;\n}\n\nroot_type OMM;\nfile_identifier \"$OMM\";",
            "files": [
                "./dist/OMM/OMM.js.tar.gz",
                "./dist/OMM/OMM.kt.tar.gz",
                "./dist/OMM/OMM.sw.tar.gz",
                "./dist/OMM/OMM.dart.tar.gz",
                "./dist/OMM/OMM.py.tar.gz",
                "./dist/OMM/OMM.rs.tar.gz",
                "./dist/OMM/OMM.go.tar.gz",
                "./dist/OMM/OMM.php.tar.gz",
                "./dist/OMM/OMM.lob.tar.gz",
                "./dist/OMM/OMM.cpp.tar.gz",
                "./dist/OMM/OMM.ts.tar.gz",
                "./dist/OMM/OMM.json.tar.gz",
                "./dist/OMM/OMM.java.tar.gz",
                "./dist/OMM/OMM.cs.tar.gz"
            ]
        },
        "PRG": {
            "IDL": "// Hash: 3a34a38f5acc86d5e54658a8b51db91ceb5b5a0f3a5fe1d8ea28d3358dd43466\n// Version: 1.0.1\n// -----------------------------------END_HEADER\n/// Program Description Message\ntable PRG {\n  /// The name of the program\n  NAME: string;\n\n  /// Hierarchical Deterministic (HD) derivation path for the program's key, used in cryptocurrency wallets\n  HD_KEY_PATH: string;\n\n  /// Vector of standard message types used by the program\n  MESSAGE_TYPES: [string];\n\n  /// Vector of users associated with the program, each user can have assigned message types\n  USERS: [USR];\n}\n\n// User information, including assigned message types\ntable USR {\n  ID: string;\n\n  // Vector of message types assigned to the user, indicating which messages the user can access or use\n  // Location: Specified by user\n  MESSAGE_TYPES: [string];\n}\n\nroot_type PRG;\nfile_identifier \"$PRG\";",
            "files": [
                "./dist/PRG/PRG.js.tar.gz",
                "./dist/PRG/PRG.kt.tar.gz",
                "./dist/PRG/PRG.sw.tar.gz",
                "./dist/PRG/PRG.dart.tar.gz",
                "./dist/PRG/PRG.py.tar.gz",
                "./dist/PRG/PRG.rs.tar.gz",
                "./dist/PRG/PRG.go.tar.gz",
                "./dist/PRG/PRG.php.tar.gz",
                "./dist/PRG/PRG.lob.tar.gz",
                "./dist/PRG/PRG.cpp.tar.gz",
                "./dist/PRG/PRG.ts.tar.gz",
                "./dist/PRG/PRG.json.tar.gz",
                "./dist/PRG/PRG.java.tar.gz",
                "./dist/PRG/PRG.cs.tar.gz"
            ]
        },
        "OSM": {
            "IDL": "// Hash: 73b7213a83295e6678f2aba1b5ff579d1d9de6a57607741e64e9c98b023b1807\n// Version: 1.0.1\n// -----------------------------------END_HEADER\n/// Observation Stability Message\ntable OSM {\n  /// Indicates whether the observation is stable or not\n  IS_STABLE: bool;\n  /// The number of observations\n  NUM_OBS: int;\n  /// Unique identifier for the object being observed\n  OBJECT_ID: string;\n  /// Identifier of the sensor\n  ID_SENSOR: string;\n  /// Timestamp of data creation\n  PASS_START: string;\n  /// Duration of the observation pass in seconds\n  PASS_DURATION: int;\n}\n\n\nroot_type OSM;\nfile_identifier \"$OSM\";",
            "files": [
                "./dist/OSM/OSM.js.tar.gz",
                "./dist/OSM/OSM.kt.tar.gz",
                "./dist/OSM/OSM.sw.tar.gz",
                "./dist/OSM/OSM.dart.tar.gz",
                "./dist/OSM/OSM.py.tar.gz",
                "./dist/OSM/OSM.rs.tar.gz",
                "./dist/OSM/OSM.go.tar.gz",
                "./dist/OSM/OSM.php.tar.gz",
                "./dist/OSM/OSM.lob.tar.gz",
                "./dist/OSM/OSM.cpp.tar.gz",
                "./dist/OSM/OSM.ts.tar.gz",
                "./dist/OSM/OSM.json.tar.gz",
                "./dist/OSM/OSM.java.tar.gz",
                "./dist/OSM/OSM.cs.tar.gz"
            ]
        },
        "EPM": {
            "IDL": "// Hash: 56a7c33178d35833096bcaff5591b808a11da3adc5e19523ce26aba0aafb3aec\n// Version: 1.0.1\n// -----------------------------------END_HEADER\nenum KeyType : byte {\n  Signing,\n  Encryption\n}\n\n/// Represents cryptographic key information\ntable CryptoKey {\n  /// Public part of the cryptographic key, in hexidecimal format\n  PUBLIC_KEY: string;\n  /// Extended public key https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#extended-keys\n  XPUB: string;\n  /// Private part of the cryptographic key in hexidecimal format, should be kept secret \n  PRIVATE_KEY: string;\n  /// Extended private key https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#extended-keys\n  XPRIV: string;\n  /// Address generated from the cryptographic key\n  KEY_ADDRESS: string;\n  /// Type of the address generated from the cryptographic key\n  ADDRESS_TYPE: string;\n  /// Type of the cryptographic key (signing or encryption)\n  KEY_TYPE: KeyType;\n}\n\n/// Represents a geographic address\ntable Address {\n  /// Country of the address\n  COUNTRY: string;\n  /// Region of the address (e.g., state or province)\n  REGION: string;\n  /// Locality of the address (e.g., city or town)\n  LOCALITY: string;\n  /// Postal code of the address\n  POSTAL_CODE: string;\n  /// Street address\n  STREET: string;\n  /// Post office box number\n  POST_OFFICE_BOX_NUMBER: string;\n}\n\n/// Entity Profile Message\ntable EPM {\n  /// Distinguished Name of the entity\n  DN: string;\n  /// Common name of the entity (person or organization)\n  LEGAL_NAME: string;\n  /// Family name or surname of the person\n  FAMILY_NAME: string;\n  /// Given name or first name of the person\n  GIVEN_NAME: string;\n  /// Additional name or middle name of the person\n  ADDITIONAL_NAME: string;\n  /// Honorific prefix preceding the person's name (e.g., Mr., Dr.)\n  HONORIFIC_PREFIX: string;\n  /// Honorific suffix following the person's name (e.g., Jr., Sr.)\n  HONORIFIC_SUFFIX: string;\n  /// Job title of the person\n  JOB_TITLE: string;\n  /// Occupation of the person\n  OCCUPATION: string;\n  /// Physical Address\n  ADDRESS: Address;\n  /// Alternate names for the entity\n  ALTERNATE_NAMES: [string];\n  /// Email address of the entity\n  EMAIL: string;\n  /// Telephone number of the entity\n  TELEPHONE: string;\n  /// Cryptographic keys associated with the entity\n  KEYS: [CryptoKey];\n  /// Multiformat addresses associated with the entity\n  MULTIFORMAT_ADDRESS: [string];\n}\n\nroot_type EPM;\n\nfile_identifier \"$EPM\";",
            "files": [
                "./dist/EPM/EPM.js.tar.gz",
                "./dist/EPM/EPM.kt.tar.gz",
                "./dist/EPM/EPM.sw.tar.gz",
                "./dist/EPM/EPM.dart.tar.gz",
                "./dist/EPM/EPM.py.tar.gz",
                "./dist/EPM/EPM.rs.tar.gz",
                "./dist/EPM/EPM.go.tar.gz",
                "./dist/EPM/EPM.php.tar.gz",
                "./dist/EPM/EPM.lob.tar.gz",
                "./dist/EPM/EPM.cpp.tar.gz",
                "./dist/EPM/EPM.ts.tar.gz",
                "./dist/EPM/EPM.json.tar.gz",
                "./dist/EPM/EPM.java.tar.gz",
                "./dist/EPM/EPM.cs.tar.gz"
            ]
        },
        "MPE": {
            "IDL": "// Hash: 564dd96a264924dd1c243dfbc822b7a3915dd7104ecbed63eb02e64c86f39424\n// Version: 1.0.3\n// -----------------------------------END_HEADER\ninclude \"../MET/main.fbs\";\n\n// Minimum-Propagatable-Element-Set (MPE)\n// Description\n// Truncated version of the Orbit Mean-Elements Message (OMM). Includes only the Mean Elements required to propagate an orbit.\n// Legacy format description can be found here.\n// CCSDS Reference documentation: 502x0b2c1e2.\n\n/// Minimum Propagatable Element Set\ntable MPE {  \n  /// Unique ID as a String [no units]\n  ENTITY_ID: string;\n  /// Epoch of Mean Keplerian elements (UNIX timestamp) [numeric seconds since 1970-01-01T00:00:00 UTC]\n  EPOCH: double;\n  /// Mean motion in rev/day [M if chosen to represent orbit size for SGP/SGP4 elements]\n  MEAN_MOTION: double;\n  /// Eccentricity (unitless)\n  ECCENTRICITY: double;\n  /// Inclination in degrees\n  INCLINATION: double;\n  /// Right ascension of ascending node in degrees\n  RA_OF_ASC_NODE: double;\n  /// Argument of pericenter in degrees\n  ARG_OF_PERICENTER: double;\n  /// Mean anomaly in degrees\n  MEAN_ANOMALY: double;\n  /// SGP/SGP4 drag-like coefficient (BSTAR) in units of 1/[Earth radii]\n  BSTAR: double;\n  /// Description of the Mean Element Theory (SGP4, DSST, USM)\n  MEAN_ELEMENT_THEORY:meanElementTheory = SGP4;\n}\n\nroot_type MPE;\nfile_identifier \"$MPE\";",
            "files": [
                "./dist/MPE/MPE.js.tar.gz",
                "./dist/MPE/MPE.kt.tar.gz",
                "./dist/MPE/MPE.sw.tar.gz",
                "./dist/MPE/MPE.dart.tar.gz",
                "./dist/MPE/MPE.py.tar.gz",
                "./dist/MPE/MPE.rs.tar.gz",
                "./dist/MPE/MPE.go.tar.gz",
                "./dist/MPE/MPE.php.tar.gz",
                "./dist/MPE/MPE.lob.tar.gz",
                "./dist/MPE/MPE.cpp.tar.gz",
                "./dist/MPE/MPE.ts.tar.gz",
                "./dist/MPE/MPE.json.tar.gz",
                "./dist/MPE/MPE.java.tar.gz",
                "./dist/MPE/MPE.cs.tar.gz"
            ]
        },
        "EME": {
            "IDL": "// Hash: 863f34b95eccb3f6f6508934073b1bf595a6116636b750804165aa8c3dff38e3\n// Version: 1.0.1\n// -----------------------------------END_HEADER\n/// Encrypted Message Envelope\ntable EME {\n  /// Encrypted data blob, containing the ciphertext of the original plaintext message.\n  ENCRYPTED_BLOB: [ubyte];\n\n  /// Temporary public key used for the encryption session, contributing to the derivation of the shared secret.\n  EPHEMERAL_PUBLIC_KEY: string;\n\n  /// Message Authentication Code to verify the integrity and authenticity of the encrypted message.\n  MAC: string;\n\n  /// Unique value used to ensure that the same plaintext produces a different ciphertext for each encryption.\n  NONCE: string;\n\n  /// Additional authentication tag used in some encryption schemes for integrity and authenticity verification.\n  TAG: string;\n\n  /// Initialization vector used to introduce randomness in the encryption process, enhancing security.\n  IV: string;\n\n  /// Identifier for the public key used, aiding in recipient key management and message decryption.\n  PUBLIC_KEY_IDENTIFIER: string;\n\n  /// Specifies the set of cryptographic algorithms used in the encryption process.\n  CIPHER_SUITE: string;\n\n  /// Parameters for the Key Derivation Function, guiding the process of deriving keys from the shared secret.\n  KDF_PARAMETERS: string;\n\n  /// Parameters defining specific settings for the encryption algorithm, such as block size or operation mode.\n  ENCRYPTION_ALGORITHM_PARAMETERS: string;\n}\n\nroot_type EME;\nfile_identifier \"$EME\";",
            "files": [
                "./dist/EME/EME.js.tar.gz",
                "./dist/EME/EME.kt.tar.gz",
                "./dist/EME/EME.sw.tar.gz",
                "./dist/EME/EME.dart.tar.gz",
                "./dist/EME/EME.py.tar.gz",
                "./dist/EME/EME.rs.tar.gz",
                "./dist/EME/EME.go.tar.gz",
                "./dist/EME/EME.php.tar.gz",
                "./dist/EME/EME.lob.tar.gz",
                "./dist/EME/EME.cpp.tar.gz",
                "./dist/EME/EME.ts.tar.gz",
                "./dist/EME/EME.json.tar.gz",
                "./dist/EME/EME.java.tar.gz",
                "./dist/EME/EME.cs.tar.gz"
            ]
        },
        "OEM": {
            "IDL": "// Hash: 50be368b27dd83f6571878ec735d94bdcb22831f797f6280b24b60d5ece509a9\n// Version: 1.0.2\n// -----------------------------------END_HEADER\ninclude \"../RFM/main.fbs\";\ninclude \"../TIM/main.fbs\";\ninclude \"../CAT/main.fbs\";\n\n// Orbit Ephemeris Message (OEM)\n// Description\n// Orbit information may be exchanged between two participants by sending an\n// ephemeris in the form of a series of state vectors (Cartesian vectors providing position and\n// velocity, and optionally accelerations) using an Orbit Ephemeris Message (OEM). The\n// message recipient must have a means of interpolating across these state vectors to obtain the\n// state at an arbitrary time contained within the span of the ephemeris.\n// CCSDS Reference documentation: 502x0b2c1e2.\n\n/// A single ephemeris data line\ntable ephemerisDataLine {\n  /// Epoch time, in ISO 8601 UTC format\n  EPOCH:string;\n  /// Position vector X-component km\n  X:double;\n  /// Position vector Y-component km\n  Y:double;\n  /// Position vector Z-component km\n  Z:double;\n  /// Velocity vector X-component km/s\n  X_DOT:double;\n  /// Velocity vector Y-component km/s\n  Y_DOT:double;\n  /// Velocity vector Z-component km/s\n  Z_DOT:double;\n  /// Optional: Acceleration vector X-component km/s/s\n  X_DDOT:double;\n  /// Optional: Acceleration vector Y-component km/s/s\n  Y_DDOT:double;\n  /// Optional: Acceleration vector Z-component km/s/s\n  Z_DDOT:double;\n}\n\n/// Position/Velocity Covariance Matrix Line\ntable covarianceMatrixLine {\n  /// Epoch\n  EPOCH:string;\n  /// Covariance matrix [1,1] km**2\n  CX_X:double;\n  /// Covariance matrix [2,1] km**2\n  CY_X:double;\n  /// Covariance matrix [2,2] km**2\n  CY_Y:double;\n  /// Covariance matrix [3,1] km**2\n  CZ_X:double;\n  /// Covariance matrix [3,2] km**2\n  CZ_Y:double;\n  /// Covariance matrix [3,3] km**2\n  CZ_Z:double;\n  /// Covariance matrix [4,1] km**2/s\n  CX_DOT_X:double;\n  /// Covariance matrix [4,2] km**2/s\n  CX_DOT_Y:double;\n  /// Covariance matrix [4,3] km**2/s\n  CX_DOT_Z:double;\n  /// Covariance matrix [4,4] km**2/s**2\n  CX_DOT_X_DOT:double;\n  /// Covariance matrix [5,1] km**2/s\n  CY_DOT_X:double;\n  /// Covariance matrix [5,2] km**2/s\n  CY_DOT_Y:double;\n  /// Covariance matrix [5,3] km**2/s\n  CY_DOT_Z:double;\n  /// Covariance matrix [5,4] km**2/s**2\n  CY_DOT_X_DOT:double;\n  /// Covariance matrix [5,5] km**2/s**2\n  CY_DOT_Y_DOT:double;\n  /// Covariance matrix [6,1] km**2/s\n  CZ_DOT_X:double;\n  /// Covariance matrix [6,2] km**2/s\n  CZ_DOT_Y:double;\n  /// Covariance matrix [6,3] km**2/s\n  CZ_DOT_Z:double;\n  /// Covariance matrix [6,4] km**2/s**2\n  CZ_DOT_X_DOT:double;\n  /// Covariance matrix [6,5] km**2/s**2\n  CZ_DOT_Y_DOT:double;\n  /// Covariance matrix [6,6] km**2/s**2\n  CZ_DOT_Z_DOT:double;\n}\n\n/// OEM Ephemeris Data Block\ntable ephemerisDataBlock {\n  /// Plain-Text Comment\n  COMMENT:string;\n  /// Satellite name for the first object\n  OBJECT: CAT;\n  /// Origin of reference frame (EARTH, MARS, MOON, etc.)\n  CENTER_NAME:string;\n  /// Name of the reference frame (TEME, EME2000, etc.)\n  REFERENCE_FRAME:refFrame;\n  /// Epoch of reference frame, if not intrinsic to the definition of the reference frame\n  REFERENCE_FRAME_EPOCH:string;\n  /// Reference frame for the covariance matrix\n  COV_REFERENCE_FRAME:refFrame;\n  /// Time system used for the orbit state and covariance matrix. (UTC)\n  TIME_SYSTEM:timeSystem;\n  /// Start of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)\n  START_TIME:string;\n  /// Optional start USEABLE time span covered by ephemeris data (ISO 8601)\n  USEABLE_START_TIME:string;\n  /// Optional end of USEABLE time span covered by ephemeris data (ISO 8601)\n  USEABLE_STOP_TIME:string;\n  /// End of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)\n  STOP_TIME:string;\n  /// Step size in seconds separating the epochs of each ephemeris data row\n  STEP_SIZE:double;\n  /// Recommended interpolation method for ephemeris data (Hermite, Linear, Lagrange, etc.)\n  INTERPOLATION:string;\n  /// Recommended interpolation degree for ephemeris data\n  INTERPOLATION_DEGREE:uint;\n\n  /// Array of ephemeris data lines\n  EPHEMERIS_DATA_LINES:[ephemerisDataLine];\n  /// Array of covariance matrix lines\n  COVARIANCE_MATRIX_LINES:[covarianceMatrixLine];\n}\n\n/// Orbit Ephemeris Message\ntable OEM {\n  /// OEM Header\n  /// Classification marking of the data in IC/CAPCO Portion-marked format.\n  CLASSIFICATION: string;\n  /// OEM Version\n  CCSDS_OEM_VERS:double;\n  /// Creation Date\n  CREATION_DATE:string;\n  /// Originator\n  ORIGINATOR:string;\n\n  /// Array of ephemeris data blocks\n  EPHEMERIS_DATA_BLOCK:[ephemerisDataBlock];\n}\n\nroot_type OEM;\nfile_identifier \"$OEM\";",
            "files": [
                "./dist/OEM/OEM.js.tar.gz",
                "./dist/OEM/OEM.kt.tar.gz",
                "./dist/OEM/OEM.sw.tar.gz",
                "./dist/OEM/OEM.dart.tar.gz",
                "./dist/OEM/OEM.py.tar.gz",
                "./dist/OEM/OEM.rs.tar.gz",
                "./dist/OEM/OEM.go.tar.gz",
                "./dist/OEM/OEM.php.tar.gz",
                "./dist/OEM/OEM.lob.tar.gz",
                "./dist/OEM/OEM.cpp.tar.gz",
                "./dist/OEM/OEM.ts.tar.gz",
                "./dist/OEM/OEM.json.tar.gz",
                "./dist/OEM/OEM.java.tar.gz",
                "./dist/OEM/OEM.cs.tar.gz"
            ]
        },
        "VCM": {
            "IDL": "// Hash: 8e522b102dc43b982b77cd5964a2973ca324bc51196c64ed5532cd6a5df8074b\n// Version: 1.2.6\n// -----------------------------------END_HEADER\ninclude \"../RFM/main.fbs\";\ninclude \"../TIM/main.fbs\";\ninclude \"../MET/main.fbs\";\n\n// Vector Covariance Message (VCM)\n//\n// The Vector Covariance Message (VCM) is used to exchange detailed orbit information, which\n// includes the spacecraft state vector, Keplerian elements, equinoctial elements, and relevant\n// physical parameters. The VCM provides a versatile format that can support a variety of\n// propagators, models, and perturbations, allowing users to fully describe the orbital state\n// and the conditions influencing its propagation.\n//\n// VCM supports both mean and osculating element sets, along with additional perturbative models\n// like geopotential, atmospheric drag, solar radiation pressure, and resonance effects. Covariance\n// matrices and custom user-defined fields can also be included to enhance precision and flexibility.\n//\n// The message recipient must use the appropriate orbit propagation algorithms and models to correctly\n// propagate the orbit based on the provided data. The message is compatible with both classical\n// and modern perturbation models, making it ideal for high-precision orbit prediction and analysis.\n//\n// CCSDS Reference documentation: 502.0-B-3.\n// https://github.com/DigitalArsenal/spacedatastandards.org/blob/main/survey/legacy-messages/vcm/README.md\n\nenum elementType : byte {\n  OSCULATING = 0,\n  MEAN = 1\n}\n\nenum anomalyType : byte {\n  TRUE_ANOMALY = 0,\n  MEAN_ANOMALY = 1\n}\n\n/// Enum to represent common atmospheric models\nenum atmosphericModel : byte {\n  NONE = 0,\n  JACCHIA_70 = 1,\n  JB2008 = 2,\n  NRLMSISE_00 = 3,\n  DTM_2000 = 4,\n  HWM14 = 5,\n  HASDM = 6\n}\n\n/// Enum to represent common geopotential models\nenum geopotentialModel : byte {\n  NONE = 0,\n  EGM96 = 1,\n  WGS84 = 2,\n  JGM2 = 3,\n  GEMT3 = 4,\n  EGM96_J5 = 5\n}\n\n/// Enum to represent zonal harmonics\nenum zonalHarmonic : byte {\n  NONE = 0,\n  J2 = 1,\n  J3 = 2,\n  J4 = 3,\n  J5 = 4,\n  J6 = 5,\n  J7 = 6,\n  J8 = 7,\n  J9 = 8,\n  J10 = 9,\n  J11 = 10,\n  J12 = 11\n}\n\n/// Enum to represent solar radiation pressure models\nenum solarRadiationPressureModel : byte {\n  NONE = 0,\n  SPHERICAL_MODEL = 1,\n  FLAT_PLATE_MODEL = 2\n}\n\n/// Enum to represent common lunar perturbation models\nenum lunarPerturbationModel : byte {\n  NONE = 0,\n  DE430 = 1,\n  DE431 = 2,\n  LP150Q = 3\n}\n\n/// Enum to represent various solar perturbation models\nenum solarPerturbationModel : byte {\n  NONE = 0,\n  DE430 = 1,\n  DE431 = 2\n}\n\n/// Enum to represent resonance models\nenum resonanceModel : byte {\n  NONE = 0,\n  HIGH_ALTITUDE_RESONANCE = 1,\n  LOW_ALTITUDE_RESONANCE = 2,\n  LUNAR_RESONANCE = 3,\n  SOLAR_RESONANCE = 4\n}\n\n/// Enum to represent the status of various perturbations (ON/OFF)\nenum perturbationStatus : byte {\n  OFF = 0,\n  ON = 1\n}\n\n/// Enum to represent propagator types\nenum propagatorType : byte {\n  NONE = 0,\n  SEMI_ANALYTICAL = 1,\n  VINTI = 2,\n  SGP4 = 3,\n  COWELL = 4,\n  RK4 = 5,\n  NYX = 6,\n  GMAT = 7,\n  SPICE = 8,\n  SGP = 9,\n  SDP4 = 10,\n  SGP8 = 11,\n  SDP8 = 12\n}\n\n/// Propagator configuration structure to describe propagation settings\ntable propagatorConfig {\n  PROPAGATOR_NAME: string;\n  PROPAGATOR_TYPE: propagatorType;\n  FORCE_MODELS: [string];\n  EPOCH: string;\n  TIME_STEP: double;\n  ZONAL_HARMONIC_TERMS: [zonalHarmonic];  // Full list of zonal harmonic terms (J2 through J12)\n}\n\n/// VCM State Vector (position and velocity)\ntable VCMStateVector {\n  EPOCH: string;\n  X: double;\n  Y: double;\n  Z: double;\n  X_DOT: double;\n  Y_DOT: double;\n  Z_DOT: double;\n}\n\n/// VCM Covariance Matrix Line\ntable VCMCovarianceMatrixLine {\n  CX_X: double;\n  CY_X: double;\n  CZ_X: double;\n  CX_DOT_X: double;\n}\n\n/// Keplerian Elements\ntable keplerianElements {\n  SEMI_MAJOR_AXIS: double; // km\n  ECCENTRICITY: double;\n  INCLINATION: double;     // degrees\n  RA_OF_ASC_NODE: double;  // degrees\n  ARG_OF_PERICENTER: double; // degrees\n  ANOMALY_TYPE: anomalyType;\n  ANOMALY: double;         // degrees\n}\n\n/// Equinoctial Elements\ntable equinoctialElements {\n  AF: double;           // e cos(\u03c9 + fr\u03a9)\n  AG: double;           // e sin(\u03c9 + fr\u03a9)\n  L: double;            // True longitude\n  N: double;            // Semi-major axis (a)\n  CHI: double;          // TAN(i/2) SIN(\u03a9)\n  PSI: double;          // TAN(i/2) COS(\u03a9)\n}\n\n/// UVW Sigmas (Covariance matrix in UVW frame)\ntable uvwSigmas {\n  U_SIGMA: double;        // Standard deviation in U direction\n  V_SIGMA: double;        // Standard deviation in V direction\n  W_SIGMA: double;        // Standard deviation in W direction\n  UD_SIGMA: double;       // Standard deviation in U direction for velocity\n  VD_SIGMA: double;       // Standard deviation in V direction for velocity\n  WD_SIGMA: double;       // Standard deviation in W direction for velocity\n}\n\n/// VCM Atmospheric and Perturbation Model Data\ntable VCMAtmosphericModelData {\n  ATMOSPHERIC_MODEL: atmosphericModel;\n  GEOPOTENTIAL_MODEL: geopotentialModel;\n  LUNAR_SOLAR_PERTURBATION: perturbationStatus;\n  LUNAR_PERTURBATION_MODEL: lunarPerturbationModel;\n  SOLAR_PERTURBATION_MODEL: solarPerturbationModel;\n  SOLAR_RADIATION_PRESSURE: perturbationStatus;\n  SRP_MODEL: solarRadiationPressureModel;\n  RESONANCE_MODEL: resonanceModel;\n}\n\n/// Vector Covariance Message\ntable VCM {\n  CCSDS_OMM_VERS: double;\n  CREATION_DATE: string;\n  ORIGINATOR: string;\n\n  OBJECT_NAME: string;\n  OBJECT_ID: string;      // International Designator (YYYY-NNNAAA)\n  CENTER_NAME: string;\n  REF_FRAME: string;\n  TIME_SYSTEM: string;\n\n  STATE_VECTOR: VCMStateVector;\n  KEPLERIAN_ELEMENTS: keplerianElements;\n  EQUINOCTIAL_ELEMENTS: equinoctialElements;\n\n  GM: double;              // Gravitational Coefficient\n\n  ATMOSPHERIC_MODEL_DATA: VCMAtmosphericModelData;\n  PROPAGATOR_SETTINGS: propagatorConfig;\n\n  COVARIANCE_MATRIX: [VCMCovarianceMatrixLine];\n  UVW_SIGMAS: uvwSigmas;\n\n  // Spacecraft Parameters from OMM and OCM\n  MASS: double;\n  SOLAR_RAD_AREA: double;\n  SOLAR_RAD_COEFF: double; // Solar Radiation Pressure Coefficient\n  DRAG_AREA: double;\n  DRAG_COEFF: double;\n  SRP: perturbationStatus; // Solar Radiation Pressure\n\n  // TLE Related Parameters\n  CLASSIFICATION_TYPE: string;\n  NORAD_CAT_ID: uint32;\n  ELEMENT_SET_NO: uint32;\n  REV_AT_EPOCH: double;\n  BSTAR: double;\n  MEAN_MOTION_DOT: double;\n  MEAN_MOTION_DDOT: double;\n\n  // Covariance Matrix for position/velocity\n  COV_REFERENCE_FRAME: string;\n  CX_X: double;\n  CY_X: double;\n  CZ_X: double;\n  CX_DOT_X: double;\n\n  // User-defined fields\n  USER_DEFINED_BIP_0044_TYPE: uint;\n  USER_DEFINED_OBJECT_DESIGNATOR: string;\n  USER_DEFINED_EARTH_MODEL: string;\n  USER_DEFINED_EPOCH_TIMESTAMP: double;\n  USER_DEFINED_MICROSECONDS: double;\n}\n\nroot_type VCM;",
            "files": [
                "./dist/VCM/VCM.js.tar.gz",
                "./dist/VCM/VCM.kt.tar.gz",
                "./dist/VCM/VCM.sw.tar.gz",
                "./dist/VCM/VCM.dart.tar.gz",
                "./dist/VCM/VCM.py.tar.gz",
                "./dist/VCM/VCM.rs.tar.gz",
                "./dist/VCM/VCM.go.tar.gz",
                "./dist/VCM/VCM.php.tar.gz",
                "./dist/VCM/VCM.lob.tar.gz",
                "./dist/VCM/VCM.cpp.tar.gz",
                "./dist/VCM/VCM.ts.tar.gz",
                "./dist/VCM/VCM.json.tar.gz",
                "./dist/VCM/VCM.java.tar.gz",
                "./dist/VCM/VCM.cs.tar.gz"
            ]
        },
        "CDM": {
            "IDL": "// Hash: 8e790d04f04a1129f047da111e14449c4debb9770bfaa476835a4d4742142d8b\n// Version: 1.0.1\n// -----------------------------------END_HEADER\ninclude \"../PNM/main.fbs\";\ninclude \"../CAT/main.fbs\";\ninclude \"../EPM/main.fbs\";\ninclude \"../RFM/main.fbs\";\n\nenum screeningVolumeShape : byte {\n  ELLIPSOID,\n  BOX\n}\n\nenum covarianceMethod : byte {\n  CALCULATED,\n  DEFAULT\n}\n\ntable CDMObject {\n  /// A comment\n  COMMENT:string;\n  // Catalog Definition\n  OBJECT:CAT;\n  /// Point of Contact\n  POC:EPM;\n  /// Operator contact position\n  OPERATOR_CONTACT_POSITION:string;\n  /// Operator organization\n  OPERATOR_ORGANIZATION:string;\n  /// Ephemeris name\n  EPHEMERIS_NAME:string;\n  /// Covariance method\n  COVARIANCE_METHOD:covarianceMethod;\n  /// Reference Frame in which the object position is defined\n  REFERENCE_FRAME:refFrame;\n  /// Gravity model\n  GRAVITY_MODEL:string;\n  /// Atmospheric model\n  ATMOSPHERIC_MODEL:string;\n  /// N-body perturbations\n  N_BODY_PERTURBATIONS:string;\n  /// Solar radiation pressure\n  SOLAR_RAD_PRESSURE:bool;\n  /// Earth tides\n  EARTH_TIDES:bool;\n  /// Intrack thrust\n  INTRACK_THRUST:bool;\n  /// Time of last observation start\n  TIME_LASTOB_START:string;\n  /// Time of last observation end\n  TIME_LASTOB_END:string;\n  /// Recommended observation data span\n  RECOMMENDED_OD_SPAN:double;\n  /// Actual observation data span\n  ACTUAL_OD_SPAN:double;\n  /// Number of observations available\n  OBS_AVAILABLE:uint;\n  /// Number of observations used\n  OBS_USED:uint;\n  /// Number of tracks available\n  TRACKS_AVAILABLE:uint;\n  /// Number of tracks used\n  TRACKS_USED:uint;\n  /// Residuals accepted\n  RESIDUALS_ACCEPTED:double;\n  /// Weighted root mean square\n  WEIGHTED_RMS:double;\n  /// Area of the object\n  AREA_PC:double;\n  /// Area of the object drag\n  AREA_DRG:double;\n  /// Area of the object solar radiation pressure\n  AREA_SRP:double;\n  /// Object's area-to-mass ratio\n  CR_AREA_OVER_MASS:double;\n  /// Object's thrust acceleration\n  THRUST_ACCELERATION:double;\n  /// Object's solar flux\n  SEDR:double;\n  /// X-coordinate of the object's position in RTN coordinates\n  X:double;\n  /// Y-coordinate of the object's position in RTN\n  Y:double;\n  /// Z-coordinate of the object's position in RTN\n  Z:double;\n  /// X-coordinate of the object's position in RTN coordinates\n  X_DOT:double;\n  /// Y-coordinate of the object's position in RTN\n  Y_DOT:double;\n  /// Z-coordinate of the object's position in RTN\n  Z_DOT:double;\n  \n  // (Covariance Matrix 9\u00d79 Lower Triangular Form. All parameters of the 6\u00d76 position/velocity submatrix must be given)\n\n  /// Covariance Matrix component\n  CR_R:double;\n  /// Covariance Matrix component\n  CT_R:double;\n  /// Covariance Matrix component\n  CT_T:double;\n  /// Covariance Matrix component\n  CN_R:double;\n  /// Covariance Matrix component\n  CN_T:double;\n  /// Covariance Matrix component\n  CN_N:double;\n  /// Covariance Matrix component\n  CRDOT_R:double;\n  /// Covariance Matrix component\n  CRDOT_T:double;\n  /// Covariance Matrix component\n  CRDOT_N:double;\n  /// Covariance Matrix component\n  CRDOT_RDOT:double;\n  /// Covariance Matrix component\n  CTDOT_R:double;\n  /// Covariance Matrix component\n  CTDOT_T:double;\n  /// Covariance Matrix component\n  CTDOT_N:double;\n  /// Covariance Matrix component\n  CTDOT_RDOT:double;\n  /// Covariance Matrix component\n  CTDOT_TDOT:double;\n  /// Covariance Matrix component\n  CNDOT_R:double;\n  /// Covariance Matrix component\n  CNDOT_T:double;\n  /// Covariance Matrix component\n  CNDOT_N:double;\n  /// Covariance Matrix component\n  CNDOT_RDOT:double;\n  /// Covariance Matrix component\n  CNDOT_TDOT:double;\n  /// Covariance Matrix component\n  CNDOT_NDOT:double;\n  /// Covariance Matrix component\n  CDRG_R:double;\n  /// Covariance Matrix component\n  CDRG_T:double;\n  /// Covariance Matrix component\n  CDRG_N:double;\n  /// Covariance Matrix component\n  CDRG_RDOT:double;\n  /// Covariance Matrix component\n  CDRG_TDOT:double;\n  /// Covariance Matrix component\n  CDRG_NDOT:double;\n  /// Covariance Matrix component\n  CDRG_DRG:double;\n  /// Covariance Matrix component\n  CSRP_R:double;\n  /// Covariance Matrix component\n  CSRP_T:double;\n  /// Covariance Matrix component\n  CSRP_N:double;\n  /// Covariance Matrix component\n  CSRP_RDOT:double;\n  /// Covariance Matrix component\n  CSRP_TDOT:double;\n  /// Covariance Matrix component\n  CSRP_NDOT:double;\n  /// Covariance Matrix component\n  CSRP_DRG:double;\n  /// Covariance Matrix component\n  CSRP_SRP:double;\n  /// Covariance Matrix component\n  CTHR_R:double;\n  /// Covariance Matrix component\n  CTHR_T:double;\n  /// Covariance Matrix component\n  CTHR_N:double;\n  /// Covariance Matrix component\n  CTHR_RDOT:double;\n  /// Covariance Matrix component\n  CTHR_TDOT:double;\n  /// Covariance Matrix component\n  CTHR_NDOT:double;\n  /// Covariance Matrix component\n  CTHR_DRG:double;\n  /// Covariance Matrix component\n  CTHR_SRP:double;\n  /// Covariance Matrix component\n  CTHR_THR:double;\n}\n\n/// Conjunction Data Message\ntable CDM {\n  /// The version of the CCSDS CDM standard used\n  CCSDS_CDM_VERS:double;\n  /// The date the CDM message was created\n  CREATION_DATE:string;\n  /// The originator of the CDM message\n  ORIGINATOR:string;\n  /// The intended recipient of the CDM message\n  MESSAGE_FOR:string;\n  /// A unique identifier for the CDM message\n  MESSAGE_ID:string;\n  /// Time of closest approach\n  TCA:string;\n  /// The miss distance between the two objects\n  MISS_DISTANCE:double;\n  /// The relative speed between the two objects\n  RELATIVE_SPEED:double;\n  /// The relative position R component\n  RELATIVE_POSITION_R:double;\n  /// The relative position T component\n  RELATIVE_POSITION_T:double;\n  /// The relative position N component\n  RELATIVE_POSITION_N:double;\n  /// The relative velocity R component\n  RELATIVE_VELOCITY_R:double;\n  /// The relative velocity T component\n  RELATIVE_VELOCITY_T:double;\n  /// The relative velocity N component\n  RELATIVE_VELOCITY_N:double;\n  /// The start time of the screening period\n  START_SCREEN_PERIOD:string;\n  /// The end time of the screening period\n  STOP_SCREEN_PERIOD:string;\n  /// The reference frame for the screening volume\n  SCREEN_VOLUME_FRAME:refFrame;\n  /// The shape of the screening volume\n  SCREEN_VOLUME_SHAPE:screeningVolumeShape;\n  /// The X dimension of the screening volume\n  SCREEN_VOLUME_X:double;\n  /// The Y dimension of the screening volume\n  SCREEN_VOLUME_Y:double;\n  /// The Z dimension of the screening volume\n  SCREEN_VOLUME_Z:double;\n  /// The time the objects entered the screening volume\n  SCREEN_ENTRY_TIME:string;\n  /// The time the objects exited the screening volume\n  SCREEN_EXIT_TIME:string;\n  /// The probability of collision between the two objects\n  COLLISION_PROBABILITY:double;\n  /// The method used to calculate the collision probability\n  COLLISION_PROBABILITY_METHOD:string;\n  /// The first object in the CDM message\n  OBJECT1:CDMObject;\n  /// The second object in the CDM message\n  OBJECT2:CDMObject;\n  /// Data Source for the positional information for Object 1\n  OBJECT1_DATASOURCE:PNM;\n  /// Data Source for the positional information for Object 2\n  OBJECT2_DATASOURCE:PNM;\n}\n\n\nroot_type CDM;\nfile_identifier \"$CDM\";",
            "files": [
                "./dist/CDM/CDM.js.tar.gz",
                "./dist/CDM/CDM.kt.tar.gz",
                "./dist/CDM/CDM.sw.tar.gz",
                "./dist/CDM/CDM.dart.tar.gz",
                "./dist/CDM/CDM.py.tar.gz",
                "./dist/CDM/CDM.rs.tar.gz",
                "./dist/CDM/CDM.go.tar.gz",
                "./dist/CDM/CDM.php.tar.gz",
                "./dist/CDM/CDM.lob.tar.gz",
                "./dist/CDM/CDM.cpp.tar.gz",
                "./dist/CDM/CDM.ts.tar.gz",
                "./dist/CDM/CDM.json.tar.gz",
                "./dist/CDM/CDM.java.tar.gz",
                "./dist/CDM/CDM.cs.tar.gz"
            ]
        },
        "IDM": {
            "IDL": "// Hash: 9142dced239a49aa8bf81bad7f2dcb57688340389780e43684fd5eaa1f7a82ab\n// Version: 1.0.3\n// -----------------------------------END_HEADER\n/// Different types of polarization in EMT\nenum PolarizationType: byte {\n  linear,\n  circular,\n  elliptical,\n  unpolarized\n}\n\n/// Simple polarization types\nenum SimplePolarization: byte {\n  vertical,\n  horizontal,\n  leftHandCircular,\n  rightHandCircular\n}\n\n/// Frequency range with lower and upper limits\ntable FrequencyRange {\n  /// Lower frequency in MHz\n  LOWER: double;\n  /// Upper frequency in MHz\n  UPPER: double;\n}\n\n/// Stokes parameters, representing different aspects of polarization\ntable StokesParameters {\n  /// Intensity\n  I: double;\n  /// Linear polarization\n  Q: double;\n  /// Another linear polarization, orthogonal to Q\n  U: double;\n  /// Circular polarization\n  V: double;\n}\n\n/// Table representing a frequency band with a name and frequency range\ntable Band {\n  /// Name of the band\n  NAME: string;\n  /// Frequency range of the band\n  FREQUENCY_RANGE: FrequencyRange;\n}\n\n/// Enum for the mode of data (real, simulated, synthetic)\nenum DataMode: byte {\n  /// Data collected during an exercise scenario.\n  EXERCISE,\n  /// Data collected from real-world observations.\n  REAL,\n  /// Data generated through simulation.\n  SIMULATED,\n  /// Data collected for testing purposes.\n  TEST\n}\n\nenum DeviceType: byte {\n  \n  // Basic and General Sensors\n  \n  /// Basic or undefined sensor type\n  UNKNOWN,\n  /// General optical sensors\n  OPTICAL,\n\n  // Electromagnetic Spectrum Sensors\n\n  /// Detects infrared radiation\n  INFRARED_SENSOR,\n  /// Sensitive to ultraviolet light\n  ULTRAVIOLET_SENSOR,\n  /// For X-ray detection\n  X_RAY_SENSOR,\n  /// For gamma-ray detection\n  GAMMA_RAY_SENSOR,\n\n  // Radar and Radio Telescopes\n\n  /// Basic radar systems\n  RADAR,\n  /// Advanced radar with phased array technology\n  PHASED_ARRAY_RADAR,\n  /// For high-resolution imaging\n  SYNTHETIC_APERTURE_RADAR,\n  /// For astronomical observations using bistatic setup\n  BISTATIC_RADIO_TELESCOPE,\n  /// For radio astronomy\n  RADIO_TELESCOPE,\n\n  // Environmental and Atmospheric Sensors\n\n  /// For atmospheric studies\n  ATMOSPHERIC_SENSOR,\n  /// For observing space weather phenomena\n  SPACE_WEATHER_SENSOR,\n  /// General environmental monitoring\n  ENVIRONMENTAL_SENSOR,\n\n  // Specialized Scientific Sensors\n\n  /// For measuring seismic activities\n  SEISMIC_SENSOR,\n  /// For gravity measurements\n  GRAVIMETRIC_SENSOR,\n  /// For magnetic field detection\n  MAGNETIC_SENSOR,\n  /// For electromagnetic field analysis\n  ELECTROMAGNETIC_SENSOR,\n  /// For temperature and heat detection\n  THERMAL_SENSOR,\n  /// For detecting chemicals and substances\n  CHEMICAL_SENSOR,\n  /// For biological research and detection\n  BIOLOGICAL_SENSOR,\n  /// For detecting ionizing radiation\n  RADIATION_SENSOR,\n  /// For detecting subatomic particles\n  PARTICLE_DETECTOR,\n\n  // Advanced Optical and Imaging Sensors\n\n  /// Light Detection and Ranging\n  LIDAR,\n  /// Sound Navigation and Ranging\n  SONAR,\n  /// General telescopes for astronomical observations\n  TELESCOPE,\n  /// For spectral analysis\n  SPECTROSCOPIC_SENSOR,\n  /// For measuring light intensity\n  PHOTOMETRIC_SENSOR,\n  /// For analyzing polarization of light\n  POLARIMETRIC_SENSOR,\n  /// For detailed imaging using interference\n  INTERFEROMETRIC_SENSOR,\n  /// Capturing image data at multiple wavelengths\n  MULTISPECTRAL_SENSOR,\n  /// Advanced imaging across many spectral bands\n  HYPERSPECTRAL_SENSOR,\n\n  // Positioning and Tracking Sensors\n\n  /// For Global Positioning System reception\n  GPS_RECEIVER,\n\n  // Communication Devices\n\n  /// Standard radio communication device\n  RADIO_COMMUNICATIONS,\n  /// Advanced laser communication system\n  LASER_COMMUNICATIONS,\n  /// Satellite communication system\n  SATELLITE_COMMUNICATIONS,\n\n  // Specialized Scientific Instruments\n\n  /// Device for laser-based experiments and measurements\n  LASER_INSTRUMENT,\n  /// Radio frequency analysis and measurement device\n  RF_ANALYZER,\n  /// Device for ionospheric research\n  IONOSPHERIC_SENSOR,\n\n  // Optical Devices\n\n  /// Device for laser-based imaging\n  LASER_IMAGING,\n  /// Advanced optical telescope\n  OPTICAL_TELESCOPE,\n  /// Device for high-resolution optical observations\n  HIGH_RESOLUTION_OPTICAL,\n\n  // Radio and Microwave Devices\n\n  RADIO,\n  /// Microwave communication device\n  MICROWAVE_TRANSMITTER,\n  /// Device for radio frequency monitoring\n  RF_MONITOR,\n  /// High-frequency radio communication device\n  HF_RADIO_COMMUNICATIONS,\n}\n\n/// Integrated Device Message\ntable IDM {\n  /// Unique identifier for the EMT\n  ID: string;\n  /// Name of the EMT\n  NAME: string;\n  /// Mode of the data (real, simulated, synthetic)\n  DATA_MODE: DataMode;\n  /// Uplink frequency range\n  UPLINK: FrequencyRange;\n  /// Downlink frequency range\n  DOWNLINK: FrequencyRange;\n  /// Beacon frequency range\n  BEACON: FrequencyRange;\n  /// Bands associated with the EMT\n  BAND: [Band];\n  /// Type of polarization used\n  POLARIZATION_TYPE: PolarizationType;\n  /// Simple polarization configuration\n  SIMPLE_POLARIZATION: SimplePolarization;\n  /// Stokes parameters for polarization characterization\n  STOKES_PARAMETERS: StokesParameters;\n  /// Power required in Watts\n  POWER_REQUIRED: double;\n  /// Type of power (eg. AC or DC)\n  POWER_TYPE: string;\n  /// Indicates if the EMT can transmit\n  TRANSMIT: bool;\n  /// Indicates if the EMT can receive\n  RECEIVE: bool;\n  /// Type of the sensor\n  SENSOR_TYPE: DeviceType;\n  /// Source of the data\n  SOURCE: string;\n  /// Timestamp of the last observation\n  LAST_OB_TIME: string;\n  /// Lower left elevation limit\n  LOWER_LEFT_ELEVATION_LIMIT: double;\n  /// Upper left azimuth limit\n  UPPER_LEFT_AZIMUTH_LIMIT: double;\n  /// Lower right elevation limit\n  LOWER_RIGHT_ELEVATION_LIMIT: double;\n  /// Lower left azimuth limit\n  LOWER_LEFT_AZIMUTH_LIMIT: double;\n  /// Upper right elevation limit\n  UPPER_RIGHT_ELEVATION_LIMIT: double;\n  /// Upper right azimuth limit\n  UPPER_RIGHT_AZIMUTH_LIMIT: double;\n  /// Lower right azimuth limit\n  LOWER_RIGHT_AZIMUTH_LIMIT: double;\n  /// Upper left elevation limit\n  UPPER_LEFT_ELEVATION_LIMIT: double;\n  /// Right geostationary belt limit\n  RIGHT_GEO_BELT_LIMIT: double;\n  /// Left geostationary belt limit\n  LEFT_GEO_BELT_LIMIT: double;\n  /// Magnitude limit of the sensor\n  MAGNITUDE_LIMIT: double;\n  /// Indicates if the site is taskable\n  TASKABLE: bool;\n}\n\nroot_type IDM;\nfile_identifier \"$IDM\";",
            "files": [
                "./dist/IDM/IDM.js.tar.gz",
                "./dist/IDM/IDM.kt.tar.gz",
                "./dist/IDM/IDM.sw.tar.gz",
                "./dist/IDM/IDM.dart.tar.gz",
                "./dist/IDM/IDM.py.tar.gz",
                "./dist/IDM/IDM.rs.tar.gz",
                "./dist/IDM/IDM.go.tar.gz",
                "./dist/IDM/IDM.php.tar.gz",
                "./dist/IDM/IDM.lob.tar.gz",
                "./dist/IDM/IDM.cpp.tar.gz",
                "./dist/IDM/IDM.ts.tar.gz",
                "./dist/IDM/IDM.json.tar.gz",
                "./dist/IDM/IDM.java.tar.gz",
                "./dist/IDM/IDM.cs.tar.gz"
            ]
        },
        "SCM": {
            "IDL": "// Hash: 2f9fc90dd4401a2235a71af63b002e83dc5797977e5e8c96938adfdf0905c096\n// Version: 1.0.1\n// -----------------------------------END_HEADER\n/// Schema Standard Definition\ntable SCHEMA_STANDARD {\n  /// Unique identifier for the standard\n  key: string;\n\n  /// IDL\n  idl: string;\n\n  /// List Of File Paths\n  files: [string];\n}\n\n/// Schema Manifest\ntable SCM {\n  /// Version of Space Data Standards\n  version: string;\n\n  /// Standards Dictionary\n  RECORDS: [SCHEMA_STANDARD];\n}\n\n/// Declaring the root type\nroot_type SCM;\nfile_identifier \"$SCM\";",
            "files": [
                "./dist/SCM/SCM.js.tar.gz",
                "./dist/SCM/SCM.kt.tar.gz",
                "./dist/SCM/SCM.sw.tar.gz",
                "./dist/SCM/SCM.dart.tar.gz",
                "./dist/SCM/SCM.py.tar.gz",
                "./dist/SCM/SCM.rs.tar.gz",
                "./dist/SCM/SCM.go.tar.gz",
                "./dist/SCM/SCM.php.tar.gz",
                "./dist/SCM/SCM.lob.tar.gz",
                "./dist/SCM/SCM.cpp.tar.gz",
                "./dist/SCM/SCM.ts.tar.gz",
                "./dist/SCM/SCM.json.tar.gz",
                "./dist/SCM/SCM.java.tar.gz",
                "./dist/SCM/SCM.cs.tar.gz"
            ]
        },
        "PNM": {
            "IDL": "// Hash: 0fd38107c4f49f612457f9e117a96e00c2d1ec719ec1ee8315d73a50357545c4\n// Version: 1.0.1\n// -----------------------------------END_HEADER\n/// Publish Notification Message\ntable PNM {\n  /// Multiformat Address\n  /// https://multiformats.io/multiaddr/\n  /// A universal address format for representing multiple network protocols. Examples include:\n  /// - /ip4/192.168.1.1/tcp/80 for an IPv4 address with TCP protocol\n  /// - /ip6zone/x/ip6/::1 for an IPv6 address with a zone\n  /// - /dns4/example.com for a domain name resolvable only to IPv4 addresses\n  /// - /ipfs/bafybeiccfclkdtucu6y4yc5cpr6y3yuinr67svmii46v5cfcrkp47ihehy/README.txt -IPFS address w/CID and path to `README.txt`.\n  MULTIFORMAT_ADDRESS: string;\n\n  /// Publish Time OF THE Publish Notification Message\n  PUBLISH_TIMESTAMP: string;\n\n  /// Concatenated Content Identifier (CID)\n  /// This field is a unique ID for distributed systems (CID).\n  /// The CID provides a unique identifier within distributed systems, as detailed at https://github.com/multiformats/cid. \n  CID: string;\n\n  /// File ID\n  /// This field is the Name\n  FILE_NAME: string;\n\n  /// File ID\n  /// This field is the file ID / Standard Type\n  FILE_ID: string;\n\n  /// Digital Signature of the CID\n  /// This is the digital signature of the CID, signed using the specified cryptographic method.\n  SIGNATURE: string;\n\n  /// Timestamp Signature\n  /// Digital signature of the publish timestamp, using the specified cryptographic method for timestamp verification.\n  TIMESTAMP_SIGNATURE: string;\n\n  /// Type of Cryptographic Signature Used\n  /// Specifies the type of cryptographic signature used for the SIGNATURE field, indicating the specific blockchain technology, such as Ethereum or BTC.\n  SIGNATURE_TYPE: string;\n\n  /// Type of Cryptographic Signature Used for Timestamp\n  /// Specifies the type of cryptographic signature used for the TIMESTAMP_SIGNATURE field, indicating the specific blockchain technology, such as Ethereum or BTC.\n  TIMESTAMP_SIGNATURE_TYPE: string;\n}\n\nroot_type PNM;\nfile_identifier \"$PNM\";",
            "files": [
                "./dist/PNM/PNM.js.tar.gz",
                "./dist/PNM/PNM.kt.tar.gz",
                "./dist/PNM/PNM.sw.tar.gz",
                "./dist/PNM/PNM.dart.tar.gz",
                "./dist/PNM/PNM.py.tar.gz",
                "./dist/PNM/PNM.rs.tar.gz",
                "./dist/PNM/PNM.go.tar.gz",
                "./dist/PNM/PNM.php.tar.gz",
                "./dist/PNM/PNM.lob.tar.gz",
                "./dist/PNM/PNM.cpp.tar.gz",
                "./dist/PNM/PNM.ts.tar.gz",
                "./dist/PNM/PNM.json.tar.gz",
                "./dist/PNM/PNM.java.tar.gz",
                "./dist/PNM/PNM.cs.tar.gz"
            ]
        },
        "CSM": {
            "IDL": "// Hash: 4e5b5ec4cc6130e8bdf277d462e702fd04482c4c58c7ce6479b1b564635d1fca\n// Version: 1.0.1\n// -----------------------------------END_HEADER\ninclude \"../CAT/main.fbs\";\n\n/// Conjunction Summary Message\ntable CSM {\n  /// Satellite name for the first object\n  OBJECT_1: CAT;\n  /// Days since epoch for the first object\n  DSE_1: double;      \n  /// Satellite name for the second object\n  OBJECT_2: CAT;    \n  /// Days since epoch for the second object\n  DSE_2: double;     \n  /// Time of closest approach as a Unix timestamp\n  TCA: double;\n  /// The distance or range between the two objects at TCA\n  TCA_RANGE: double;   \n  /// The magnitude of the relative velocity at TCA\n  TCA_RELATIVE_SPEED: double;   \n  /// Maximum probability\n  MAX_PROB: double;   \n  /// Standard deviation that produces the maximum probability\n  DILUTION: double;   \n}\n\n\nroot_type CSM;\nfile_identifier \"$CSM\";",
            "files": [
                "./dist/CSM/CSM.js.tar.gz",
                "./dist/CSM/CSM.kt.tar.gz",
                "./dist/CSM/CSM.sw.tar.gz",
                "./dist/CSM/CSM.dart.tar.gz",
                "./dist/CSM/CSM.py.tar.gz",
                "./dist/CSM/CSM.rs.tar.gz",
                "./dist/CSM/CSM.go.tar.gz",
                "./dist/CSM/CSM.php.tar.gz",
                "./dist/CSM/CSM.lob.tar.gz",
                "./dist/CSM/CSM.cpp.tar.gz",
                "./dist/CSM/CSM.ts.tar.gz",
                "./dist/CSM/CSM.json.tar.gz",
                "./dist/CSM/CSM.java.tar.gz",
                "./dist/CSM/CSM.cs.tar.gz"
            ]
        },
        "HYP": {
            "IDL": "// Hash: bfaaad305a59ac09dccdfb1e3224fe56c86746ab98612f470553b2e53d4c2834\n// Version: 1.0.1\n// -----------------------------------END_HEADER\nenum ScoreType: byte {\n  OUTLIER = 0\n}\n\ntable Score {\n  NORAD_CAT_ID: string;\n  TYPE: ScoreType;\n  TAG: string;\n  SCORE: float;\n}\n\n/// Hypothesis Message\ntable HYP {\n  /// Space Objects Involved\n  CAT_IDS: [string];\n  /// Space Objects Involved\n  SIT_IDS: [string];\n  /// Name of the hypothesis\n  NAME: string;\n  /// Category of the hypothesis\n  CATEGORY: string;\n  /// Row indicators for the hypothesis matrix\n  ROW_INDICATORS: [string];\n  /// Column indicators for the hypothesis matrix\n  COL_INDICATORS: [string];\n  /// Matrix data as a boolean array in row major format; if overflow, adds additional rows\n  MATRIX: [bool];\n  /// Scores for objects\n  SCORE: [Score];\n  /// Analysis methodology used to form the hypothesis\n  ANALYSIS_METHOD: string;\n  // Refer to CCSDS Time Code Formats (CCSDS 301.0-B4, ANNEX B3.4)\n  EVENT_START_TIME: string;\n  // Refer to CCSDS Time Code Formats (CCSDS 301.0-B4, ANNEX B3.4)\n  EVENT_END_TIME: string;\n}\n\nroot_type HYP;\nfile_identifier \"$HYP\";",
            "files": [
                "./dist/HYP/HYP.js.tar.gz",
                "./dist/HYP/HYP.kt.tar.gz",
                "./dist/HYP/HYP.sw.tar.gz",
                "./dist/HYP/HYP.dart.tar.gz",
                "./dist/HYP/HYP.py.tar.gz",
                "./dist/HYP/HYP.rs.tar.gz",
                "./dist/HYP/HYP.go.tar.gz",
                "./dist/HYP/HYP.php.tar.gz",
                "./dist/HYP/HYP.lob.tar.gz",
                "./dist/HYP/HYP.cpp.tar.gz",
                "./dist/HYP/HYP.ts.tar.gz",
                "./dist/HYP/HYP.json.tar.gz",
                "./dist/HYP/HYP.java.tar.gz",
                "./dist/HYP/HYP.cs.tar.gz"
            ]
        },
        "LCC": {
            "IDL": "// Hash: f4ca2876e82fadd42986ca54d6047bbc7552086059bcd79ade2eca5fb8bc9db6\n// Version: 1.0.1\n// -----------------------------------END_HEADER\nenum legacyCountryCode : byte {\n  /// Arab Satellite Communications Organization\n  AB,\n  /// Asia Broadcast Satellite\n  ABS,\n  /// Asia Satellite Telecommunications Company (ASIASAT)\n  AC,\n  /// Algeria\n  ALG,\n  /// Angola\n  ANG,\n  /// Argentina\n  ARGN,\n  /// Republic of Armenia\n  ARM,\n  /// Austria\n  ASRA,\n  /// Australia\n  AUS,\n  /// Azerbaijan\n  AZER,\n  /// Belgium\n  BEL,\n  /// Belarus\n  BELA,\n  /// Bermuda\n  BERM,\n  /// People's Republic of Bangladesh\n  BGD,\n  /// Kingdom of Bhutan\n  BHUT,\n  /// Bolivia\n  BOL,\n  /// Brazil\n  BRAZ,\n  /// Bulgaria\n  BUL,\n  /// Canada\n  CA,\n  /// China/Brazil\n  CHBZ,\n  /// China/Turkey\n  CHTU,\n  /// Chile\n  CHLE,\n  /// Commonwealth of Independent States (former USSR)\n  CIS,\n  /// Colombia\n  COL,\n  /// Republic of Costa Rica\n  CRI,\n  /// Czech Republic (former Czechoslovakia)\n  CZCH,\n  /// Denmark\n  DEN,\n  /// Republic of Djibouti\n  DJI,\n  /// Ecuador\n  ECU,\n  /// Egypt\n  EGYP,\n  /// European Space Agency\n  ESA,\n  /// European Space Research Organization\n  ESRO,\n  /// Estonia\n  EST,\n  /// Ethiopia\n  ETH,\n  /// European Organization for the Exploitation of Meteorological Satellites (EUMETSAT)\n  EUME,\n  /// European Telecommunications Satellite Organization (EUTELSAT)\n  EUTE,\n  /// France/Germany\n  FGER,\n  /// Finland\n  FIN,\n  /// France\n  FR,\n  /// France/Italy\n  FRIT,\n  /// Germany\n  GER,\n  /// Republic of Ghana\n  GHA,\n  /// Globalstar\n  GLOB,\n  /// Greece\n  GREC,\n  /// Greece/Saudi Arabia\n  GRSA,\n  /// Guatemala\n  GUAT,\n  /// Hungary\n  HUN,\n  /// International Mobile Satellite Organization (INMARSAT)\n  IM,\n  /// India\n  IND,\n  /// Indonesia\n  INDO,\n  /// Iran\n  IRAN,\n  /// Iraq\n  IRAQ,\n  /// Iridium\n  IRID,\n  /// Ireland\n  IRL,\n  /// Israel\n  ISRA,\n  /// Indian Space Research Organisation\n  ISRO,\n  /// International Space Station\n  ISS,\n  /// Italy\n  IT,\n  /// International Telecommunications Satellite Organization (INTELSAT)\n  ITSO,\n  /// Japan\n  JPN,\n  /// Kazakhstan\n  KAZ,\n  /// Republic of Kenya\n  KEN,\n  /// Laos\n  LAOS,\n  /// Democratic Socialist Republic of Sri Lanka\n  LKA,\n  /// Lithuania\n  LTU,\n  /// Luxembourg\n  LUXE,\n  /// Morocco\n  MA,\n  /// Malaysia\n  MALA,\n  /// Principality of Monaco\n  MCO,\n  /// Republic of Moldova\n  MDA,\n  /// Mexico\n  MEX,\n  /// Republic of the Union of Myanmar\n  MMR,\n  /// Mongolia\n  MNG,\n  /// Mauritius\n  MUS,\n  /// North Atlantic Treaty Organization\n  NATO,\n  /// Netherlands\n  NETH,\n  /// New ICO\n  NICO,\n  /// Nigeria\n  NIG,\n  /// Democratic People's Republic of Korea\n  NKOR,\n  /// Norway\n  NOR,\n  /// Federal Democratic Republic of Nepal\n  NPL,\n  /// New Zealand\n  NZ,\n  /// O3b Networks\n  O3B,\n  /// ORBCOMM\n  ORB,\n  /// Pakistan\n  PAKI,\n  /// Peru\n  PERU,\n  /// Poland\n  POL,\n  /// Portugal\n  POR,\n  /// People's Republic of China\n  PRC,\n  /// Republic of Paraguay\n  PRY,\n  /// People's Republic of China/European Space Agency\n  PRES,\n  /// State of Qatar\n  QAT,\n  /// RascomStar-QAF\n  RASC,\n  /// Taiwan (Republic of China)\n  ROC,\n  /// Romania\n  ROM,\n  /// Philippines (Republic of the Philippines)\n  RP,\n  /// Republic of Rwanda\n  RWA,\n  /// South Africa\n  SAFR,\n  /// Saudi Arabia\n  SAUD,\n  /// Republic of Sudan\n  SDN,\n  /// Sea Launch\n  SEAL,\n  /// SES\n  SES,\n  /// Singapore/Japan\n  SGJP,\n  /// Singapore\n  SING,\n  /// Republic of Korea\n  SKOR,\n  /// Spain\n  SPN,\n  /// Singapore/Taiwan\n  STCT,\n  /// Slovenia\n  SVN,\n  /// Sweden\n  SWED,\n  /// Switzerland\n  SWTZ,\n  /// To Be Determined\n  TBD,\n  /// Thailand\n  THAI,\n  /// Turkmenistan/Monaco\n  TMMC,\n  /// Republic of Tunisia\n  TUN,\n  /// Turkey\n  TURK,\n  /// United Arab Emirates\n  UAE,\n  /// United Kingdom\n  UK,\n  /// Ukraine\n  UKR,\n  /// Unknown\n  UNK,\n  /// Uruguay\n  URY,\n  /// United States\n  US,\n  /// United States/Brazil\n  USBZ,\n  /// Vatican City State\n  VAT,\n  /// Venezuela\n  VENZ,\n  /// Vietnam\n  VTNM,\n  /// Republic of Zimbabwe\n  ZWE\n}\n\n/// Legacy Country Code\ntable LCC {\n  OWNER: legacyCountryCode;\n}\nroot_type LCC;\nfile_identifier \"$LCC\";",
            "files": [
                "./dist/LCC/LCC.js.tar.gz",
                "./dist/LCC/LCC.kt.tar.gz",
                "./dist/LCC/LCC.sw.tar.gz",
                "./dist/LCC/LCC.dart.tar.gz",
                "./dist/LCC/LCC.py.tar.gz",
                "./dist/LCC/LCC.rs.tar.gz",
                "./dist/LCC/LCC.go.tar.gz",
                "./dist/LCC/LCC.php.tar.gz",
                "./dist/LCC/LCC.lob.tar.gz",
                "./dist/LCC/LCC.cpp.tar.gz",
                "./dist/LCC/LCC.ts.tar.gz",
                "./dist/LCC/LCC.json.tar.gz",
                "./dist/LCC/LCC.java.tar.gz",
                "./dist/LCC/LCC.cs.tar.gz"
            ]
        },
        "ROC": {
            "IDL": "// Hash: 5510e67118ccd08096b15bd935bdf6ea459d4e33d708eda38aaaa9f9cd730562\n// Version: 1.0.1\n// -----------------------------------END_HEADER\n/// Rocket Configuration\ntable ROC {\n  /// Rocket Name\n  NAME: string;\n\n  /// Rocket Family\n  FAMILY: string;\n\n  /// Rocket Variant\n  VARIANT: string;\n\n  /// Stages in the Rocket\n  STAGES: [STAGE];\n\n  /// Sustainers in the Rocket\n  SUSTAINERS: [SUSTAINER];\n}\n\n/// Enumeration of Engine Types\nenum ENGINE_TYPE: byte {\n  LIQUID,\n  SOLID,\n  HYBRID,\n  ION,\n  NUCLEAR_THERMAL,\n  OTHER\n}\n\n/// Stage Details\ntable STAGE {\n  /// Stage Number\n  STAGE_NUMBER: int;\n\n  /// Engines Used in This Stage\n  ENGINES: [ENGINE];\n\n  /// Fuel Type Used in This Stage\n  FUEL_TYPE: string;\n\n  /// Thrust Produced by This Stage (in Newtons)\n  THRUST: double;\n\n  /// Duration of the Burn (in Seconds)\n  BURN_DURATION: double;\n}\n\n/// Sustainer Details\ntable SUSTAINER {\n  /// Name of the Sustainer\n  SUSTAINER_NAME: string;\n\n  /// Thrust Produced by the Sustainer (in Newtons)\n  THRUST: double;\n\n  /// Duration of the Burn (in Seconds)\n  BURN_DURATION: double;\n}\n\n/// Engine Details\ntable ENGINE {\n  /// Engine Name\n  ENGINE_NAME: string;\n\n  /// Type of Engine\n  TYPE: ENGINE_TYPE;\n\n  /// Thrust Produced by the Engine (in Newtons)\n  THRUST: double;\n}\n\nroot_type ROC;\nfile_identifier \"$ROC\";",
            "files": [
                "./dist/ROC/ROC.js.tar.gz",
                "./dist/ROC/ROC.kt.tar.gz",
                "./dist/ROC/ROC.sw.tar.gz",
                "./dist/ROC/ROC.dart.tar.gz",
                "./dist/ROC/ROC.py.tar.gz",
                "./dist/ROC/ROC.rs.tar.gz",
                "./dist/ROC/ROC.go.tar.gz",
                "./dist/ROC/ROC.php.tar.gz",
                "./dist/ROC/ROC.lob.tar.gz",
                "./dist/ROC/ROC.cpp.tar.gz",
                "./dist/ROC/ROC.ts.tar.gz",
                "./dist/ROC/ROC.json.tar.gz",
                "./dist/ROC/ROC.java.tar.gz",
                "./dist/ROC/ROC.cs.tar.gz"
            ]
        },
        "EOP": {
            "IDL": "// Hash: 219b7e16d36a3b61cca3b2ef10f6026ea38be8aef260ccd63e80515048db6a40\n// Version: 1.0.1\n// -----------------------------------END_HEADER\nenum DataType: byte {\n  OBSERVED = 0,\n  PREDICTED = 1\n}\n\n/// Earth Orientation Parameters\ntable EOP {\n  ///  Date in ISO 8601 format, e.g., \"2018-01-01T00:00:00Z\"\n  DATE: string;\n\n  ///  Modified Julian Date in UTC, e.g., 58119\n  MJD: uint;\n\n  ///  x component of Pole Wander in radians, e.g., 2.872908911518888E-7\n  X_POLE_WANDER_RADIANS: float;\n\n  ///  y component of Pole Wander in radians, e.g., 1.2003259523750447E-6\n  Y_POLE_WANDER_RADIANS: float;\n\n  ///  x component of Celestial Pole Offset in radians, e.g., 5.720801437092525E-10\n  X_CELESTIAL_POLE_OFFSET_RADIANS: float;\n\n  ///  y component of Celestial Pole Offset in radians, e.g., -8.484239419416879E-10\n  Y_CELESTIAL_POLE_OFFSET_RADIANS: float;\n\n  ///  UT1 minus UTC in seconds, e.g., 0.2163567\n  UT1_MINUS_UTC_SECONDS: float;\n\n  ///  TAI minus UTC in seconds, e.g., 37\n  TAI_MINUS_UTC_SECONDS: ushort;\n\n  ///  Correction to Length of Day in seconds, e.g., 8.094E-4\n  LENGTH_OF_DAY_CORRECTION_SECONDS: float;\n   \n  ///  Data type (O = Observed, P = Predicted)\n  DATA_TYPE: DataType;\n}\n\nroot_type EOP;\nfile_identifier \"$EOP\";",
            "files": [
                "./dist/EOP/EOP.js.tar.gz",
                "./dist/EOP/EOP.kt.tar.gz",
                "./dist/EOP/EOP.sw.tar.gz",
                "./dist/EOP/EOP.dart.tar.gz",
                "./dist/EOP/EOP.py.tar.gz",
                "./dist/EOP/EOP.rs.tar.gz",
                "./dist/EOP/EOP.go.tar.gz",
                "./dist/EOP/EOP.php.tar.gz",
                "./dist/EOP/EOP.lob.tar.gz",
                "./dist/EOP/EOP.cpp.tar.gz",
                "./dist/EOP/EOP.ts.tar.gz",
                "./dist/EOP/EOP.json.tar.gz",
                "./dist/EOP/EOP.java.tar.gz",
                "./dist/EOP/EOP.cs.tar.gz"
            ]
        },
        "CAT": {
            "IDL": "// Hash: 44d0ac66e039b9a459a4e2216958c6bdde12b4397d82f8235d2b2eddc969df07\n// Version: 1.0.1\n// -----------------------------------END_HEADER\ninclude \"../PLD/main.fbs\";\ninclude \"../LCC/main.fbs\";\n\n// https://www.celestrak.com/satcat/satcat-format.php\n\nenum objectType: byte {\n  /// 0\n  PAYLOAD,\n  /// 1\n  ROCKET_BODY,\n  /// 2\n  DEBRIS,\n  /// 3\n  UNKNOWN\n}\n\nenum opsStatusCode: byte {\n  /// +\n  OPERATIONAL,\n  /// -\n  NONOPERATIONAL,\n  /// P\n  PARTIALLY_OPERATIONAL,\n  /// B\n  BACKUP_STANDBY,\n  /// S\n  SPARE,\n  /// X\n  EXTENDED_MISSION,\n  /// D\n  DECAYED,\n  /// ?\n  UNKNOWN\n}\n\nenum dataStatusCode: byte {\n  /// NCE\n  NO_CURRENT_ELEMENTS,\n  /// NIE\n  NO_INITIAL_ELEMENTS,\n  /// NEA\n  NO_ELEMENTS_AVAILABLE,\n  /// OK\n  OK\n}\n\nenum orbitType: byte {\n  /// 0\n  ORBIT,\n  /// 1\n  LANDING,\n  /// 2\n  IMPACT,\n  /// 3\n  DOCKED,\n  /// 4\n  ROUNDTRIP\n}\n\nenum massType: byte {\n  DRY,\n  WET\n}\n\n/// Catalog Entity Message\ntable CAT {\n  /// Satellite Name(s)\n  OBJECT_NAME: string;\n  /// International Designator (YYYY-NNNAAA)\n  OBJECT_ID: string;\n  /// NORAD Catalog Number\n  NORAD_CAT_ID: uint;\n  /// Object type (Payload, Rocket body, Debris, Unknown)\n  OBJECT_TYPE: objectType = UNKNOWN;\n  /// Operational Status Code\n  OPS_STATUS_CODE: opsStatusCode = UNKNOWN;\n  /// Ownership, typically country or company\n  OWNER: legacyCountryCode;\n  /// Launch Date [year-month-day] (ISO 8601)\n  LAUNCH_DATE: string;\n  /// Launch Site\n  LAUNCH_SITE: string;\n  /// Decay Date, if applicable [year-month-day] (ISO 8601)\n  DECAY_DATE: string;\n  /// Orbital period [minutes]\n  PERIOD: double;\n  /// Inclination [degrees]\n  INCLINATION: double;\n  /// Apogee Altitude [kilometers]\n  APOGEE: double;\n  /// Perigee Altitude [kilometers]\n  PERIGEE: double;\n  /// Radar Cross Section [meters2]; blank if no data available\n  RCS: double;\n  /// Data status code; blank otherwise\n  DATA_STATUS_CODE: dataStatusCode;\n  /// Orbit center\n  ORBIT_CENTER: string;\n  /// Orbit type (Orbit, Landing, Impact, Docked to RSO, roundtrip)\n  ORBIT_TYPE: orbitType;\n  /// Deployment Date [year-month-day] (ISO 8601)\n  DEPLOYMENT_DATE: string;\n  /// Indicates if the object is maneuverable\n  MANEUVERABLE: bool;\n  /// Size [meters]; blank if no data available\n  SIZE: double;\n  /// Mass [kilograms]; blank if no data available\n  MASS: double;\n  /// Mass type (Dry, Wet)\n  MASS_TYPE: massType = DRY;\n  /// Vector of PAYLOADS\n  PAYLOADS: [PLD];\n}\n\nroot_type CAT;\nfile_identifier \"$CAT\";",
            "files": [
                "./dist/CAT/CAT.js.tar.gz",
                "./dist/CAT/CAT.kt.tar.gz",
                "./dist/CAT/CAT.sw.tar.gz",
                "./dist/CAT/CAT.dart.tar.gz",
                "./dist/CAT/CAT.py.tar.gz",
                "./dist/CAT/CAT.rs.tar.gz",
                "./dist/CAT/CAT.go.tar.gz",
                "./dist/CAT/CAT.php.tar.gz",
                "./dist/CAT/CAT.lob.tar.gz",
                "./dist/CAT/CAT.cpp.tar.gz",
                "./dist/CAT/CAT.ts.tar.gz",
                "./dist/CAT/CAT.json.tar.gz",
                "./dist/CAT/CAT.java.tar.gz",
                "./dist/CAT/CAT.cs.tar.gz"
            ]
        },
        "REC": {
            "IDL": "// Hash: 037d9b6926461818fef26c3460e07d1c1e74ad8e6769164ce7f5e34f479705b0\n// Version: 1.44.2\n// -----------------------------------END_HEADER\ninclude \"../BOV/main.fbs\";\ninclude \"../CAT/main.fbs\";\ninclude \"../CDM/main.fbs\";\ninclude \"../CRM/main.fbs\";\ninclude \"../CSM/main.fbs\";\ninclude \"../CTR/main.fbs\";\ninclude \"../EME/main.fbs\";\ninclude \"../EOO/main.fbs\";\ninclude \"../EOP/main.fbs\";\ninclude \"../EPM/main.fbs\";\ninclude \"../HYP/main.fbs\";\ninclude \"../IDM/main.fbs\";\ninclude \"../LCC/main.fbs\";\ninclude \"../LDM/main.fbs\";\ninclude \"../MET/main.fbs\";\ninclude \"../MPE/main.fbs\";\ninclude \"../OCM/main.fbs\";\ninclude \"../OEM/main.fbs\";\ninclude \"../OMM/main.fbs\";\ninclude \"../OSM/main.fbs\";\ninclude \"../PLD/main.fbs\";\ninclude \"../PNM/main.fbs\";\ninclude \"../PRG/main.fbs\";\ninclude \"../RFM/main.fbs\";\ninclude \"../ROC/main.fbs\";\ninclude \"../SCM/main.fbs\";\ninclude \"../SIT/main.fbs\";\ninclude \"../TDM/main.fbs\";\ninclude \"../TIM/main.fbs\";\ninclude \"../VCM/main.fbs\";\n\nunion RecordType {\n  BOV, CAT, CDM, CRM,\n  CSM, CTR, EME, EOO,\n  EOP, EPM, HYP, IDM,\n  LCC, LDM, MET, MPE,\n  OCM, OEM, OMM, OSM,\n  PLD, PNM, PRG, RFM,\n  ROC, SCM, SIT, TDM,\n  TIM, VCM\n}  // Union of all record types\n\ntable Record {\n  value: RecordType; \n  type: string;\n}\n\n/// Collection of Standard Records\ntable REC {\n  version: string;\n  standard: string;\n  RECORDS: [Record]; \n}\n\nroot_type REC;\nfile_identifier \"$REC\";",
            "files": [
                "./dist/REC/REC.js.tar.gz",
                "./dist/REC/REC.kt.tar.gz",
                "./dist/REC/REC.sw.tar.gz",
                "./dist/REC/REC.dart.tar.gz",
                "./dist/REC/REC.py.tar.gz",
                "./dist/REC/REC.rs.tar.gz",
                "./dist/REC/REC.go.tar.gz",
                "./dist/REC/REC.php.tar.gz",
                "./dist/REC/REC.lob.tar.gz",
                "./dist/REC/REC.cpp.tar.gz",
                "./dist/REC/REC.ts.tar.gz",
                "./dist/REC/REC.json.tar.gz",
                "./dist/REC/REC.java.tar.gz",
                "./dist/REC/REC.cs.tar.gz"
            ]
        },
        "OCM": {
            "IDL": "// Hash: a1268499b780f660d9d469e33c045293071b42a36309d6ebed30542260398d04\n// Version: 1.0.3\n// -----------------------------------END_HEADER\n// Orbit Comprehensive Message (OCM)\n// Description\n// The Orbit Comprehensive Message (OCM) is a standardized format used for exchanging detailed\n// orbit data between participants. It includes state vectors, physical properties, maneuver information,\n// perturbation parameters, covariance data, orbit determination details, and user-defined parameters.\n// The OCM is designed to provide a comprehensive set of orbit-related information to support mission\n// operations, analysis, and planning activities.\n// CCSDS Reference documentation: 502.0-B-3 (April 2023).\n\ntable Header {\n  /// Format version in the form of 'x.y', where 'y' is incremented for minor changes, and 'x' for major changes.\n  CCSDS_OCM_VERS: string;\n  /// Comments (a contiguous set of one or more comment lines may be provided immediately after the version number).\n  COMMENT: [string];\n  /// User-defined free-text message classification/caveats of this OCM.\n  CLASSIFICATION: string;\n  /// File creation date/time in UTC.\n  CREATION_DATE: string;\n  /// Creating agency or operator.\n  ORIGINATOR: string;\n  /// Free-text field containing an ID that uniquely identifies a message from this originator.\n  MESSAGE_ID: string;\n}\n\ntable Metadata {\n  /// Comments in the Metadata section.\n  COMMENT: [string];\n  /// Free-text field containing the name of the object.\n  OBJECT_NAME: string;\n  /// International designator for the object as assigned by COSPAR.\n  INTERNATIONAL_DESIGNATOR: string;\n  /// Satellite catalog source from which 'OBJECT_DESIGNATOR' was obtained.\n  CATALOG_NAME: string;\n  /// Unique satellite identification designator from the catalog.\n  OBJECT_DESIGNATOR: string;\n  /// Alternate names of this space object.\n  ALTERNATE_NAMES: [string];\n  /// Originator or programmatic Point-of-Contact (PoC) for OCM.\n  ORIGINATOR_POC: string;\n  /// Contact position of the originator PoC.\n  ORIGINATOR_POSITION: string;\n  /// Originator PoC phone number.\n  ORIGINATOR_PHONE: string;\n  /// Originator PoC email address.\n  ORIGINATOR_EMAIL: string;\n  /// Originator's physical address information.\n  ORIGINATOR_ADDRESS: string;\n  /// Creating agency or operator for technical contact.\n  TECH_ORG: string;\n  /// Technical Point-of-Contact (PoC) for OCM.\n  TECH_POC: string;\n  /// Contact position of the technical PoC.\n  TECH_POSITION: string;\n  /// Technical PoC phone number.\n  TECH_PHONE: string;\n  /// Technical PoC email address.\n  TECH_EMAIL: string;\n  /// Technical PoC physical address information.\n  TECH_ADDRESS: string;\n  /// ID that uniquely identifies the previous message from this originator.\n  PREVIOUS_MESSAGE_ID: string;\n  /// ID that uniquely identifies the next message from this originator.\n  NEXT_MESSAGE_ID: string;\n  /// Unique identifier of Attitude Data Messages linked to this OCM.\n  ADM_MSG_LINK: string;\n  /// Unique identifier of Conjunction Data Messages linked to this OCM.\n  CDM_MSG_LINK: string;\n  /// Unique identifier of Pointing Request Messages linked to this OCM.\n  PRM_MSG_LINK: string;\n  /// Unique identifier of Reentry Data Messages linked to this OCM.\n  RDM_MSG_LINK: string;\n  /// List of Tracking Data Messages upon which this orbit determination is based.\n  TDM_MSG_LINK: [string];\n  /// Operator of the space object.\n  OPERATOR: string;\n  /// Owner of the space object.\n  OWNER: string;\n  /// Country where the space object owner is based.\n  COUNTRY: string;\n  /// Name of the constellation to which this space object belongs.\n  CONSTELLATION: string;\n  /// Specification of the type of object (e.g., PAYLOAD, ROCKET BODY, DEBRIS).\n  OBJECT_TYPE: string;\n  /// Time system for all absolute time stamps in this OCM, including EPOCH_TZERO.\n  TIME_SYSTEM: string;\n  /// Default epoch to which all relative times are referenced in data blocks.\n  EPOCH_TZERO: string;\n  /// Specification of the operational status of the space object.\n  OPS_STATUS: string;\n  /// Specification of the type of orbit (e.g., GEO, LEO).\n  ORBIT_CATEGORY: string;\n  /// List of elements of information data blocks included in this message.\n  OCM_DATA_ELEMENTS: [string];\n  /// Number of spacecraft clock counts at EPOCH_TZERO (used if TIME_SYSTEM is SCLK).\n  SCLK_OFFSET_AT_EPOCH: double;\n  /// Number of clock seconds occurring during one SI second (used if TIME_SYSTEM is SCLK).\n  SCLK_SEC_PER_SI_SEC: double;\n  /// Creation epoch of the previous message from this originator.\n  PREVIOUS_MESSAGE_EPOCH: string;\n  /// Anticipated (or actual) epoch of the next message from this originator.\n  NEXT_MESSAGE_EPOCH: string;\n  /// Time of the earliest data contained in the OCM.\n  START_TIME: string;\n  /// Time of the latest data contained in the OCM.\n  STOP_TIME: string;\n  /// Span of time that the OCM covers, measured in days.\n  TIME_SPAN: double;\n  /// Difference (TAI - UTC) in seconds at EPOCH_TZERO.\n  TAIMUTC_AT_TZERO: double;\n  /// Epoch of next leap second.\n  NEXT_LEAP_EPOCH: string;\n  /// Difference (TAI - UTC) in seconds at NEXT_LEAP_EPOCH.\n  NEXT_LEAP_TAIMUTC: double;\n  /// Difference (UT1 - UTC) in seconds at EPOCH_TZERO.\n  UT1MUTC_AT_TZERO: double;\n  /// Source and version of Earth Orientation Parameters used.\n  EOP_SOURCE: string;\n  /// Method used to select or interpolate sequential EOP data.\n  INTERP_METHOD_EOP: string;\n  /// Source and version of celestial body ephemeris data used.\n  CELESTIAL_SOURCE: string;\n}\n\ntable StateVector {\n  /// Epoch of the state vector.\n  EPOCH: string;\n  /// X component of position in the specified reference frame.\n  X: double;\n  /// Y component of position.\n  Y: double;\n  /// Z component of position.\n  Z: double;\n  /// X component of velocity.\n  X_DOT: double;\n  /// Y component of velocity.\n  Y_DOT: double;\n  /// Z component of velocity.\n  Z_DOT: double;\n  /// X component of acceleration.\n  X_DDOT: double;\n  /// Y component of acceleration.\n  Y_DDOT: double;\n  /// Z component of acceleration.\n  Z_DDOT: double;\n}\n\ntable PhysicalProperties {\n  /// Comments in the Physical Properties section.\n  COMMENT: [string];\n  /// Wet mass of the space object.\n  WET_MASS: double;\n  /// Dry mass of the space object.\n  DRY_MASS: double;\n  /// Units for mass values.\n  MASS_UNITS: string;\n  /// Quaternion component q1 of orientation from OEB to EME2000.\n  OEB_Q1: double;\n  /// Quaternion component q2.\n  OEB_Q2: double;\n  /// Quaternion component q3.\n  OEB_Q3: double;\n  /// Quaternion scalar component qc.\n  OEB_QC: double;\n  /// Maximum dimension of the object along OEB frame axes.\n  OEB_MAX: double;\n  /// Intermediate dimension along OEB frame axes.\n  OEB_INT: double;\n  /// Minimum dimension of the object along OEB frame axes.\n  OEB_MIN: double;\n  /// Area along OEB_MAX axis.\n  AREA_ALONG_OEB_MAX: double;\n  /// Area along OEB_INT axis.\n  AREA_ALONG_OEB_INT: double;\n  /// Area along OEB_MIN axis.\n  AREA_ALONG_OEB_MIN: double;\n  /// Units for area values.\n  AREA_UNITS: string;\n  /// Constant area for drag computations.\n  DRAG_CONST_AREA: double;\n  /// Nominal drag coefficient.\n  DRAG_COEFF_NOM: double;\n  /// Uncertainty in the drag coefficient.\n  DRAG_UNCERTAINTY: double;\n  /// Constant area for solar radiation pressure computations.\n  SRP_CONST_AREA: double;\n  /// Nominal solar radiation pressure coefficient.\n  SOLAR_RAD_COEFF: double;\n  /// Uncertainty in the solar radiation pressure coefficient.\n  SRP_UNCERTAINTY: double;\n}\n\ntable Perturbations {\n  /// Comments in the Perturbations section.\n  COMMENT: [string];\n  /// Atmospheric model used.\n  ATMOSPHERIC_MODEL: string;\n  /// Gravity model used.\n  GRAVITY_MODEL: string;\n  /// Degree of the gravity model.\n  GRAVITY_DEGREE: int;\n  /// Order of the gravity model.\n  GRAVITY_ORDER: int;\n  /// Gravitational constant times the mass of the central body.\n  GM: double;\n  /// List of celestial bodies included in n-body perturbations.\n  N_BODY_PERTURBATIONS: [string];\n  /// Ocean tides model used.\n  OCEAN_TIDES_MODEL: string;\n  /// Solid tides model used.\n  SOLID_TIDES_MODEL: string;\n  /// Atmospheric tides model used.\n  ATMOSPHERIC_TIDES_MODEL: string;\n  /// Geopotential model used.\n  GEOPOTENTIAL_MODEL: string;\n  /// Solar radiation pressure model used.\n  SOLAR_RAD_PRESSURE: string;\n  /// Albedo model used.\n  ALBEDO: string;\n  /// Thermal model used.\n  THERMAL: string;\n  /// Relativity model used.\n  RELATIVITY: string;\n  /// Atmospheric drag model used.\n  ATMOSPHERIC_DRAG: string;\n  /// Fixed geomagnetic Kp index used.\n  FIXED_GEOMAG_KP: double;\n  /// Fixed F10.7 solar flux value used.\n  FIXED_F10P7: double;\n  /// Fixed mean F10.7 solar flux value used.\n  FIXED_F10P7_MEAN: double;\n}\n\ntable Maneuver {\n  /// Unique identifier for the maneuver.\n  MAN_ID: string;\n  /// Basis of the maneuver plan (e.g., planned, predicted, estimated).\n  MAN_BASIS: string;\n  /// Identifier of the maneuver device.\n  MAN_DEVICE_ID: string;\n  /// Identifier of the previous maneuver.\n  MAN_PREV_ID: string;\n  /// Purpose of the maneuver.\n  MAN_PURPOSE: string;\n  /// Reference frame for the maneuver data.\n  MAN_REF_FRAME: string;\n  /// Epoch of the maneuver reference frame.\n  MAN_FRAME_EPOCH: string;\n  /// Type of maneuver (e.g., IMPULSIVE, FINITE).\n  MAN_TYPE: string;\n  /// Start epoch of the maneuver.\n  MAN_EPOCH_START: string;\n  /// Duration of the maneuver.\n  MAN_DURATION: double;\n  /// Units for the maneuver data values.\n  MAN_UNITS: [string];\n  /// Data associated with the maneuver.\n  DATA: [string];\n  /// Comments related to the maneuver.\n  MAN_COMMENT: [string];\n}\n\ntable OrbitDetermination {\n  /// Unique identifier for the orbit determination.\n  OD_ID: string;\n  /// Identifier of the previous orbit determination.\n  OD_PREV_ID: string;\n  /// Algorithm used for orbit determination.\n  OD_ALGORITHM: string;\n  /// Method used for orbit determination.\n  OD_METHOD: string;\n  /// Epoch of the orbit determination.\n  OD_EPOCH: string;\n  /// Time tag of the orbit determination.\n  OD_TIME_TAG: string;\n  /// Process noise model used.\n  OD_PROCESS_NOISE: string;\n  /// Covariance reduction techniques used.\n  OD_COV_REDUCTION: string;\n  /// Noise models used.\n  OD_NOISE_MODELS: string;\n  /// Types of observations used (e.g., RANGE, DOPPLER).\n  OD_OBSERVATIONS_TYPE: [string];\n  /// Number of observations used.\n  OD_OBSERVATIONS_USED: int;\n  /// Number of tracks used.\n  OD_TRACKS_USED: int;\n  /// Data weighting scheme used.\n  OD_DATA_WEIGHTING: string;\n  /// Convergence criteria used.\n  OD_CONVERGENCE_CRITERIA: string;\n  /// Parameters estimated during orbit determination.\n  OD_EST_PARAMETERS: [string];\n  /// A priori data used for orbit determination.\n  OD_APRIORI_DATA: string;\n  /// Residuals from the orbit determination.\n  OD_RESIDUALS: string;\n}\n\ntable UserDefinedParameters {\n  /// Name of the user-defined parameter.\n  PARAM_NAME: string;\n  /// Value of the user-defined parameter.\n  PARAM_VALUE: string;\n}\n\n/// Orbit Comprehensive Message\ntable OCM {\n  /// Header section of the OCM.\n  HEADER: Header;\n  /// Metadata section of the OCM.\n  METADATA: Metadata;\n  /// Trajectory type (e.g., PROPAGATED, ESTIMATED).\n  TRAJ_TYPE: string;\n  /// State vector data.\n  STATE_DATA: [StateVector];\n  /// Physical properties of the space object.\n  PHYSICAL_PROPERTIES: PhysicalProperties;\n  /// Covariance data associated with the state vectors.\n  COVARIANCE_DATA: [StateVector]; // Replace with specific CovarianceData table if needed\n  /// Maneuver data.\n  MANEUVER_DATA: [Maneuver];\n  /// Perturbations parameters used.\n  PERTURBATIONS: Perturbations;\n  /// Orbit determination data.\n  ORBIT_DETERMINATION: OrbitDetermination;\n  /// User-defined parameters and supplemental comments.\n  USER_DEFINED_PARAMETERS: [UserDefinedParameters];\n}\n\nroot_type OCM;\nfile_identifier \"$OCM\";",
            "files": [
                "./dist/OCM/OCM.js.tar.gz",
                "./dist/OCM/OCM.kt.tar.gz",
                "./dist/OCM/OCM.sw.tar.gz",
                "./dist/OCM/OCM.dart.tar.gz",
                "./dist/OCM/OCM.py.tar.gz",
                "./dist/OCM/OCM.rs.tar.gz",
                "./dist/OCM/OCM.go.tar.gz",
                "./dist/OCM/OCM.php.tar.gz",
                "./dist/OCM/OCM.lob.tar.gz",
                "./dist/OCM/OCM.cpp.tar.gz",
                "./dist/OCM/OCM.ts.tar.gz",
                "./dist/OCM/OCM.json.tar.gz",
                "./dist/OCM/OCM.java.tar.gz",
                "./dist/OCM/OCM.cs.tar.gz"
            ]
        },
        "CTR": {
            "IDL": "// Hash: dab5d80eaef2995b6a7502233c9248052cb5d33fc6b1e8fd43ac807b3fcb382c\n// Version: 1.0.1\n// -----------------------------------END_HEADER\n/// Country Identity Message\ntable CTR {\n  /// ISO 3166 Numeric code\n  ID: string;\n  \n  /// Country name\n  NAME: string;\n\n  /// GENC code\n  GENC_CODE: string;\n\n  /// ISO 3166 Alpha-2 code\n  ALPHA_2_CODE: string;\n\n  /// ISO 3166 Alpha-3 code\n  ALPHA_3_CODE: string;\n\n  /// Stanag code\n  STANAG_CODE: string;\n\n  /// Internet country code top-level domain (ccTLD)\n  INTERNET_CCTLD: string;\n\n  /// Additional comments\n  COMMENT: string;\n}\n\n\nroot_type CTR;\nfile_identifier \"$CTR\";",
            "files": [
                "./dist/CTR/CTR.js.tar.gz",
                "./dist/CTR/CTR.kt.tar.gz",
                "./dist/CTR/CTR.sw.tar.gz",
                "./dist/CTR/CTR.dart.tar.gz",
                "./dist/CTR/CTR.py.tar.gz",
                "./dist/CTR/CTR.rs.tar.gz",
                "./dist/CTR/CTR.go.tar.gz",
                "./dist/CTR/CTR.php.tar.gz",
                "./dist/CTR/CTR.lob.tar.gz",
                "./dist/CTR/CTR.cpp.tar.gz",
                "./dist/CTR/CTR.ts.tar.gz",
                "./dist/CTR/CTR.json.tar.gz",
                "./dist/CTR/CTR.java.tar.gz",
                "./dist/CTR/CTR.cs.tar.gz"
            ]
        },
        "TIM": {
            "IDL": "// Hash: af813818b2917f80f7a0f423e22a07f17a07f776d50b8e6dc5c54c6c12260e98\n// Version: 1.0.1\n// -----------------------------------END_HEADER\nenum timeSystem : byte {\n  /// Greenwich Mean Sidereal Time\n  GMST,\n  /// Global Positioning System\n  GPS,\n  /// Mission Elapsed Time\n  MET,\n  /// Mission Relative Time\n  MRT,\n  /// Spacecraft Clock (receiver) (requires rules for interpretation in ICD)\n  SCLK,\n  /// International Atomic Time\n  TAI,\n  /// Barycentric Coordinate Time\n  TCB,\n  /// Barycentric Dynamical Time\n  TDB,\n  /// Geocentric Coordinate Time\n  TCG,\n  /// Terrestrial Time\n  TT,\n  /// Universal Time\n  UT1,\n  /// Coordinated Universal Time\n  UTC\n}\n\n/// Time System\ntable TIM {\n  TIME_SYSTEM: timeSystem;\n}\nroot_type TIM;\nfile_identifier \"$TIM\";",
            "files": [
                "./dist/TIM/TIM.js.tar.gz",
                "./dist/TIM/TIM.kt.tar.gz",
                "./dist/TIM/TIM.sw.tar.gz",
                "./dist/TIM/TIM.dart.tar.gz",
                "./dist/TIM/TIM.py.tar.gz",
                "./dist/TIM/TIM.rs.tar.gz",
                "./dist/TIM/TIM.go.tar.gz",
                "./dist/TIM/TIM.php.tar.gz",
                "./dist/TIM/TIM.lob.tar.gz",
                "./dist/TIM/TIM.cpp.tar.gz",
                "./dist/TIM/TIM.ts.tar.gz",
                "./dist/TIM/TIM.json.tar.gz",
                "./dist/TIM/TIM.java.tar.gz",
                "./dist/TIM/TIM.cs.tar.gz"
            ]
        },
        "MET": {
            "IDL": "// Hash: 6249ba868a102d60f27aea94dc497b18fb5505b545bf08b363a8fcb752c7d88e\n// Version: 1.0.1\n// -----------------------------------END_HEADER\nenum meanElementTheory : byte {\n  /// Simplified General Perturbation Model 4\n  SGP4,\n  /// Simplified General Perturbation Model 4 eXtended Perturbations (https://amostech.com/TechnicalPapers/2022/Astrodynamics/Payne_2.pdf)\n  SGP4XP,\n  /// Draper Semi-analytical Satellite Theory\n  DSST,\n  /// Universal Semianalytical Method\n  USM\n}\n\n/// Mean Element Theory\ntable MET {\n  MEAN_ELEMENT_THEORY:meanElementTheory;\n}\nroot_type MET;\nfile_identifier \"$MET\";",
            "files": [
                "./dist/MET/MET.js.tar.gz",
                "./dist/MET/MET.kt.tar.gz",
                "./dist/MET/MET.sw.tar.gz",
                "./dist/MET/MET.dart.tar.gz",
                "./dist/MET/MET.py.tar.gz",
                "./dist/MET/MET.rs.tar.gz",
                "./dist/MET/MET.go.tar.gz",
                "./dist/MET/MET.php.tar.gz",
                "./dist/MET/MET.lob.tar.gz",
                "./dist/MET/MET.cpp.tar.gz",
                "./dist/MET/MET.ts.tar.gz",
                "./dist/MET/MET.json.tar.gz",
                "./dist/MET/MET.java.tar.gz",
                "./dist/MET/MET.cs.tar.gz"
            ]
        },
        "PLD": {
            "IDL": "// Hash: b842e97c88ccbbfc0cae1b838e02a9531d6835d491d0698787a21ed8cb4228b7\n// Version: 1.0.1\n// -----------------------------------END_HEADER\ninclude \"../IDM/main.fbs\";\n\n/// Payload Information\ntable PLD {\n  PAYLOAD_DURATION: string;\n  MASS_AT_LAUNCH: float;\n  DIMENSIONS: string;\n  SOLAR_ARRAY_AREA: float;\n  SOLAR_ARRAY_DIMENSIONS: string;\n  NOMINAL_OPERATIONAL_LIFETIME: string;\n  INSTRUMENTS: [IDM]; // Vector of Instrument Data Messages\n}\n\nroot_type PLD;\nfile_identifier \"$PLD\";",
            "files": [
                "./dist/PLD/PLD.js.tar.gz",
                "./dist/PLD/PLD.kt.tar.gz",
                "./dist/PLD/PLD.sw.tar.gz",
                "./dist/PLD/PLD.dart.tar.gz",
                "./dist/PLD/PLD.py.tar.gz",
                "./dist/PLD/PLD.rs.tar.gz",
                "./dist/PLD/PLD.go.tar.gz",
                "./dist/PLD/PLD.php.tar.gz",
                "./dist/PLD/PLD.lob.tar.gz",
                "./dist/PLD/PLD.cpp.tar.gz",
                "./dist/PLD/PLD.ts.tar.gz",
                "./dist/PLD/PLD.json.tar.gz",
                "./dist/PLD/PLD.java.tar.gz",
                "./dist/PLD/PLD.cs.tar.gz"
            ]
        },
        "EOO": {
            "IDL": "// Hash: 69121db1b68d5a6b4980f23021c6471787d46f904115d419d49d5ab1a6c5cddc\n// Version: 1.0.8\n// -----------------------------------END_HEADER\ninclude \"../RFM/main.fbs\";\ninclude \"../IDM/main.fbs\";\n\n/// Enumeration for data collection methods\nenum CollectMethod : byte {\n  SIDEREAL,\n  RATE_TRACK,\n  FIXED_STARE,\n  OTHER\n}\n\nenum ObservationPosition : byte {\n  FENCE,\n  FIRST,\n  IN,\n  LAST,\n  SINGLE\n}\n\n/// Electro-Optical Observation\ntable EOO {\n  \n  /// Unique identifier of the record.\n  ID: string;\n\n  /// Classification marking of the data in IC/CAPCO Portion-marked format.\n  CLASSIFICATION: string;\n\n  /// Ob detection time in ISO 8601 UTC (YYYY-MM-DDTHH:MM:SS.ssssssZ), up to microsecond precision.\n  OB_TIME: string;\n\n  /// Correlation score of the observation when compared to a known orbit state.\n  CORR_QUALITY: float;\n\n  /// Server will auto-populate with SAT_NO if available.\n  ID_ON_ORBIT: string;\n\n  /// Unique ID of the sensor. Must have a corresponding sensor record on the server.\n  SENSOR_ID: string;\n\n  /// Accepted Collection Method\n  COLLECT_METHOD: CollectMethod;\n\n  /// 18SDS satellite number. Only list if correlated against the 18SDS catalog.\n  NORAD_CAT_ID: int;\n\n  /// Identifier for the collectRequest message if the collection was in response to tasking.\n  TASK_ID: string;\n\n  /// Optional identifier to track a transaction.\n  TRANSACTION_ID: string;\n\n  /// The user-defined set ID of a sequence of images.\n  IMAGE_SET_ID: string;\n\n  /// The number of images in an image set.\n  IMAGE_SET_LENGTH: int;\n\n  /// The sequence ID of an image within an image set.\n  SEQUENCE_ID: int;\n\n  /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).\n  OB_POSITION: ObservationPosition;\n\n  /// Provider maintained ID. May not be consistent with 18SDS SAT_NO.\n  ORIG_OBJECT_ID: string;\n\n  /// Sensor ID.\n  ORIG_SENSOR_ID: string;\n\n  /// Required if correlation is attempted. Indicates whether correlation succeeded.\n  UCT: bool;\n\n  /// Line of sight azimuth angle in degrees and topocentric frame.\n  AZIMUTH: float;\n\n  /// One sigma uncertainty in the line of sight azimuth angle, in degrees.\n  AZIMUTH_UNC: float;\n  \n  /// Sensor line of sight azimuth angle bias in degrees.\n  AZIMUTH_BIAS: float;\n\n  /// Rate of change of the line of sight azimuth in degrees per second.\n  AZIMUTH_RATE: float;\n\n  /// Line of sight elevation in degrees and topocentric frame.\n  ELEVATION: float;\n\n  /// One sigma uncertainty in the line of sight elevation angle, in degrees.\n  ELEVATION_UNC: float;\n\n  /// Sensor line of sight elevation bias in degrees.\n  ELEVATION_BIAS: float;\n\n  /// Rate of change of the line of sight elevation in degrees per second.\n  ELEVATION_RATE: float;\n\n  /// Line of sight range in km. Reported value should include all applicable corrections.\n  RANGE: float;\n\n  /// One sigma uncertainty in the line of sight range, in km.\n  RANGE_UNC: float;\n\n  /// Sensor line of sight range bias in km.\n  RANGE_BIAS: float;\n\n  /// Range rate in km/s. Reported value should include all applicable corrections.\n  RANGE_RATE: float;\n\n  /// One sigma uncertainty in the line of sight range rate, in km/sec.\n  RANGE_RATE_UNC: float;\n\n  /// Right ascension in degrees. Required metric reporting field for EO observations.\n  RA: float;\n\n  /// Line of sight right ascension rate of change, in degrees/sec.\n  RA_RATE: float;\n\n  /// One sigma uncertainty in the line of sight right ascension angle, in degrees.\n  RA_UNC: float;\n\n  /// Sensor line of sight right ascension bias in degrees.\n  RA_BIAS: float;\n\n  /// Declination in degrees. Required metric reporting field for EO observations.\n  DECLINATION: float;\n\n  /// Line of sight declination rate of change, in degrees/sec.\n  DECLINATION_RATE: float;\n\n  /// One sigma uncertainty in the line of sight declination angle, in degrees.\n  DECLINATION_UNC: float;\n\n  /// Sensor line of sight declination angle bias in degrees.\n  DECLINATION_BIAS: float;\n\n  /// X-component of the unit vector representing the line-of-sight direction in the observer's reference frame.\n  LOSX: float;\n\n  /// Y-component of the unit vector representing the line-of-sight direction in the observer's reference frame.\n  LOSY: float;\n\n  /// Z-component of the unit vector representing the line-of-sight direction in the observer's reference frame.\n  LOSZ: float;\n\n  /// One sigma uncertainty in the line-of-sight direction vector components.\n  LOS_UNC: float;\n\n  /// X-component of the velocity vector along the line of sight, in km/s.\n  LOSXVEL: float;\n\n  /// Y-component of the velocity vector along the line of sight, in km/s.\n  LOSYVEL: float;\n\n  /// Z-component of the velocity vector along the line of sight, in km/s.\n  LOSZVEL: float;\n\n  /// WGS-84 latitude in decimal degrees at the time of the observation.\n  SENLAT: float;\n\n  /// WGS-84 longitude in decimal degrees at the time of the observation.\n  SENLON: float;\n\n  /// Sensor height in km relative to the WGS-84 ellipsoid at the time of the observation.\n  SENALT: float;\n\n  /// Cartesian X position in km at the time of the observation.\n  SENX: float;\n\n  /// Cartesian Y position in km at the time of the observation.\n  SENY: float;\n\n  /// Cartesian Z position in km at the time of the observation.\n  SENZ: float;\n\n  /// Total number of satellites in the field of view.\n  FOV_COUNT: int;\n\n  /// Number of uncorrelated satellites in the field of view (JCO).\n  FOV_COUNT_UCTS: int;\n\n  /// Image exposure duration in seconds. For observations performed using frame stacking or synthetic tracking methods, \n  /// the exposure duration should be the total integration time. This field is highly recommended / required if the \n  /// observations are going to be used for photometric processing.\n  EXP_DURATION: float;\n\n  /// Formula: 2.5 * log_10 (zero_mag_counts / EXP_DURATION).\n  ZEROPTD: float;\n\n  /// Net object signature = counts / EXP_DURATION.\n  NET_OBJ_SIG: float;\n\n  /// Net object signature uncertainty = counts uncertainty / EXP_DURATION.\n  NET_OBJ_SIG_UNC: float;\n\n  /// Measure of observed brightness calibrated against the Gaia G-band.\n  MAG: float;\n\n  /// Uncertainty of the observed brightness.\n  MAG_UNC: float;\n\n  /// [Definition needed].\n  MAG_NORM_RANGE: float;\n\n  /// Computed estimate of the latitude, positive degrees north. It should be computed based on the assumed slant range \n  /// and corresponding viewing geometry. It must NOT be computed from the orbit state.\n  GEOLAT: float;\n\n  /// Computed estimate of the longitude as +/- 180 degrees east. It should be computed based on the assumed slant range \n  /// and viewing geometry. It must NOT be computed from the orbit state.\n  GEOLON: float;\n\n  /// Computed estimate of satellite altitude in km at the reported location. It must NOT be computed from the orbit state.\n  GEOALT: float;\n\n  /// Computed estimate of the slant range in km. It must NOT be computed from the orbit state.\n  GEORANGE: float;\n\n  /// Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently \n  /// empty part of the night sky.\n  SKY_BKGRND: float;\n\n  /// Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass \n  /// to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, \n  /// describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical \n  /// object and the observer.\n  PRIMARY_EXTINCTION: float;\n\n  /// Primary Extinction Coefficient Uncertainty, in Magnitudes.\n  PRIMARY_EXTINCTION_UNC: float;\n\n  /// The angle, in degrees, between the target-to-observer vector and the target-to-sun vector. Recommend using the \n  /// calculation listed in the EOSSA documentation, pg 106 of the EOSSA spec.\n  SOLAR_PHASE_ANGLE: float;\n\n  /// The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector \n  /// onto the equatorial plane. The convention used is negative when closing (i.e., before the opposition) \n  /// and positive when opening (after the opposition).\n  SOLAR_EQ_PHASE_ANGLE: float;\n\n  /// Angle from the sun to the equatorial plane.\n  SOLAR_DEC_ANGLE: float;\n\n  /// Shutter delay in seconds.\n  SHUTTER_DELAY: float;\n\n  /// Sensor timing bias in seconds.\n  TIMING_BIAS: float;\n\n  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. \n  RAW_FILE_URI: string;\n\n   /// Intensity of the target for IR observations, in kw/sr/em.\n  INTENSITY: float;\n\n  /// Background intensity for IR observations, in kw/sr/um.\n  BG_INTENSITY: float;\n\n  /// Optional source-provided and searchable metadata or descriptor of the data.\n  DESCRIPTOR: string;\n\n  /// Source of the data.\n  SOURCE: string;\n\n  /// Originating system or organization which produced the data, if different from the source.\n  /// The origin may be different than the source if the source was a mediating system which forwarded \n  /// the data on behalf of the origin system. If null, the source may be assumed to be the origin.\n  ORIGIN: string;\n\n  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST.\n  DATA_MODE: DataMode;\n\n  /// Time the row was created in the database, auto-populated by the system.\n  CREATED_AT: string;\n\n  /// Application user who created the row in the database, auto-populated by the system.\n  CREATED_BY: string;\n\n  /// EO observations are assumed to be topocentric J2000 coordinates ('J2000') as defined by the IAU, unless otherwise specified.\n  REFERENCE_FRAME: refFrame;\n\n  /// The sensor reference frame is assumed to be the International Terrestrial Reference Frame (ITRF), \n  /// unless otherwise specified. (ITRF is equivalent to Earth-Centered Earth-Fixed (ECEF) for this purpose). \n  /// Lat / long / height values should be reported using the WGS-84 ellipsoid, where applicable.\n  SEN_REFERENCE_FRAME: refFrame;\n\n  /// Boolean indicating that the target object was in umbral eclipse at the time of this observation.\n  UMBRA: bool;\n\n  /// Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.\n  /// This field is highly recommended if the observations will be used for photometric processing.\n  PENUMBRA: bool;\n\n  /// The originating source network on which this record was created, auto-populated by the system.\n  ORIG_NETWORK: string;\n\n  /// The source from which this record was received.\n  SOURCE_DL: string;\n\n  /// Device Type\n  TYPE: DeviceType;\n\n  /// True if measured, false if computed. Required if azimuth is reported.\n  AZIMUTH_MEASURED: bool;\n\n  /// True if measured, false if computed. Required if elevation is reported.\n  ELEVATION_MEASURED: bool;\n\n  /// True if measured, false if computed. Required if range is reported.\n  RANGE_MEASURED: bool;\n\n  /// True if measured, false if computed. Required if range-rate is reported.\n  RANGERATE_MEASURED: bool;\n\n  /// True if measured, false if computed. Required if right ascension is reported.\n  RA_MEASURED: bool;\n\n  /// True if measured, false if computed. Required if declination is reported.\n  DECLINATION_MEASURED: bool;\n\n  /// National Imagery Interpretability Rating Scale (NIIRS). Ranging from 0 (lowest) to 9 (highest).\n  NIIRS: float;\n\n  /// Ground sample distance in meters per pixel.\n  METERS_PER_PIXEL: float;\n\n  /// Signal-to-noise ratio of the image. Higher values indicate cleaner imagery.\n  IMAGE_SNR: float;\n\n  /// Bit depth of the image (e.g., 8, 12, 16).\n  IMAGE_BIT_DEPTH: int;\n\n  /// Width of the image in pixels.\n  IMAGE_WIDTH: int;\n\n  /// Height of the image in pixels.\n  IMAGE_HEIGHT: int;\n\n  /// Compression type used for the image, e.g., \"JPEG\", \"PNG\", \"RAW\", etc.\n  IMAGE_COMPRESSION: string;\n\n  /// Compression ratio used (original size / compressed size), if applicable.\n  IMAGE_COMPRESSION_RATIO: float;\n\n  /// URI to the processed image used for this observation.\n  PROCESSED_IMAGE_URI: string;\n\n  /// Flag indicating whether the image was auto-enhanced (e.g., contrast stretch, denoise).\n  IMAGE_AUTO_ENHANCED: bool;\n\n  /// True if the observation was taken with multiple frames stacked into one image.\n  MULTI_FRAME_STACKED: bool;\n\n  /// True if synthetic tracking was used to create the image.\n  SYNTHETIC_TRACKING_USED: bool;\n\n  /// Sharpness metric of the image based on the Tenengrad method or variance of Laplacian. Higher values indicate sharper images.\n  IMAGE_SHARPNESS: float;\n\n  /// Noise level of the image, estimated via pixel intensity variance in background regions.\n  IMAGE_NOISE_STDDEV: float;\n\n  /// Contrast metric of the image, such as Michelson contrast or RMS contrast.\n  IMAGE_CONTRAST: float;\n\n  /// Dynamic range of the image (max pixel value / min pixel value), indicating tonal spread.\n  IMAGE_DYNAMIC_RANGE: float;\n\n  /// Entropy of the image, representing the richness of information content. Higher entropy suggests higher texture detail.\n  IMAGE_ENTROPY: float;\n\n  /// Background uniformity metric (e.g., mean gradient in background areas). Lower values indicate more uniform background.\n  BACKGROUND_UNIFORMITY: float;\n\n  /// Mean background level, computed from non-object regions in pixel units.\n  BACKGROUND_MEAN_LEVEL: float;\n\n  /// Percentage of saturated pixels in the image. Indicates overexposure when high.\n  SATURATED_PIXEL_PERCENT: float;\n\n  /// Percentage of dead or zero-value pixels in the image. Indicates sensor defects or underexposure.\n  DEAD_PIXEL_PERCENT: float;\n\n  /// Estimated Point Spread Function (PSF) Full Width at Half Maximum (FWHM) in pixels. Indicates image blur or focus.\n  PSF_FWHM: float;\n\n  /// Estimated percentage of cloud cover in the image. Derived using cloud detection algorithms such as Fmask or machine learning classifiers.\n  CLOUD_COVER_PERCENT: float;\n\n  /// Confidence score of the cloud detection result, from 0 (low confidence) to 1 (high confidence).\n  CLOUD_DETECTION_CONFIDENCE: float;\n\n  /// Estimated percentage of the image obscured by haze or atmospheric scattering effects.\n  HAZE_PERCENT: float;\n\n  /// Estimated aerosol optical thickness (AOT) at 550 nm, indicating particulate matter in the atmosphere affecting image clarity.\n  AEROSOL_OPTICAL_THICKNESS: float;\n\n  /// Estimated water vapor content (e.g., total column precipitable water) at the time of imaging, in mm.\n  WATER_VAPOR_CONTENT: float;\n\n  /// Sun elevation angle at the time of image capture, in degrees above the horizon.\n  SUN_ELEVATION: float;\n\n  /// Sun azimuth angle at the time of image capture, in degrees from true north.\n  SUN_AZIMUTH: float;\n\n  /// View zenith angle (sensor line-of-sight angle from nadir), in degrees.\n  VIEW_ZENITH_ANGLE: float;\n\n  /// View azimuth angle (direction of sensor relative to north), in degrees.\n  VIEW_AZIMUTH_ANGLE: float;\n\n  /// Off-nadir angle of the sensor at the time of image capture, in degrees.\n  OFF_NADIR_ANGLE: float;\n\n  /// Ground coverage width of the image swath in kilometers.\n  SWATH_WIDTH_KM: float;\n\n  /// Mean terrain elevation in the image footprint, in meters above sea level.\n  MEAN_TERRAIN_ELEVATION: float;\n\n  /// Standard deviation of terrain elevation in the image footprint, in meters.\n  TERRAIN_ELEVATION_STDDEV: float;\n\n  /// Percentage of the image affected by shadows, derived via topographic or object shadow detection.\n  SHADOW_COVER_PERCENT: float;\n\n  /// Flag indicating whether sunglint is present in the image (true if high reflectance from water surface due to sun geometry).\n  SUNGLINT_PRESENT: bool;\n\n  /// Percentage of image affected by sunglint.\n  SUNGLINT_PERCENT: float;\n\n  /// Estimated percentage of snow or ice coverage in the image footprint.\n  SNOW_ICE_COVER_PERCENT: float;\n\n  /// Total area covered by valid data (non-masked, usable imagery) in square kilometers.\n  VALID_DATA_AREA_KM2: float;\n\n}\n\nroot_type EOO;\nfile_identifier \"$EOO\";",
            "files": [
                "./dist/EOO/EOO.js.tar.gz",
                "./dist/EOO/EOO.kt.tar.gz",
                "./dist/EOO/EOO.sw.tar.gz",
                "./dist/EOO/EOO.dart.tar.gz",
                "./dist/EOO/EOO.py.tar.gz",
                "./dist/EOO/EOO.rs.tar.gz",
                "./dist/EOO/EOO.go.tar.gz",
                "./dist/EOO/EOO.php.tar.gz",
                "./dist/EOO/EOO.lob.tar.gz",
                "./dist/EOO/EOO.cpp.tar.gz",
                "./dist/EOO/EOO.ts.tar.gz",
                "./dist/EOO/EOO.json.tar.gz",
                "./dist/EOO/EOO.java.tar.gz",
                "./dist/EOO/EOO.cs.tar.gz"
            ]
        },
        "SIT": {
            "IDL": "// Hash: 6f282637e3795d2d62105c0454bf0837ef252daa6109b006f74852a2b0ee8015\n// Version: 1.0.1\n// -----------------------------------END_HEADER\ninclude \"../IDM/main.fbs\";\n\n/// Enum for the type of site\nenum SiteType: byte {\n  LAUNCH_SITE,\n  OBSERVATION_STATION,\n  HOBBYIST_OBSERVER,\n  RESEARCH_FACILITY,\n  SATELLITE_GROUND_STATION,\n  SPACEPORT,\n  MILITARY_BASE,\n  WEATHER_STATION,\n  ASTRONOMICAL_OBSERVATORY,\n  EDUCATIONAL_INSTITUTE,\n  COMMUNICATION_HUB,\n  POWER_PLANT,\n  INDUSTRIAL_COMPLEX,\n  TRANSPORTATION_HUB,\n  URBAN_AREA,\n  NATIONAL_PARK,\n  HISTORICAL_SITE,\n  OTHER\n}\n\n/// Geometry table with information about geometric properties\ntable Geometry {\n  /// Type of geometry\n  GEOMETRY_TYPE: string;\n  /// Coordinates of the geometry\n  COORDINATES: [float];\n}\n\n/// Site Information Message\ntable SIT {\n  /// Unique identifier for the site, BE_NUMBER\n  ID: string;\n  /// Name of the site\n  NAME: string;\n  /// Abbreviation\n  ABBREVIATION: string;\n  /// Site type as defined in SiteType enum\n  SITE_TYPE: SiteType;\n  /// Site type CATCODE\n  CATCODE: string;\n  /// Network identifier\n  NETWORK: string;\n  /// Latitude of the site\n  LATITUDE: float;\n  /// Longitude of the site\n  LONGITUDE: float;\n  /// Altitude of the site\n  ALTITUDE: float;\n  /// Geometry of the site\n  GEOMETRY: Geometry;\n  /// Center point geometry coordinates\n  CENTER_POINT_GEOMETRY: [float];\n  /// Classification marking of the site\n  CLASSIFICATION: string;\n  /// CTR ISO 3166 Numeric code as string\n  CTR_ID: string;\n  /// Identifier of the user who created the site data\n  CREATED_BY: string;\n  /// Description of the site\n  DESCRIPTION: string;\n  /// URL for the 3D model of the site\n  MODEL_URL: string;\n  /// Source of the site data\n  SOURCE: string;\n  /// Indicates if the site is taskable\n  TASKABLE: bool;\n  /// Operational status of the site (e.g., active, inactive, under construction)\n  OPERATIONAL_STATUS: string;\n  /// Date of establishment\n  ESTABLISHMENT_DATE: string;\n  /// Contact information for the site\n  CONTACT_INFO: string;\n  /// Environmental impact or considerations\n  ENVIRONMENTAL_IMPACT: string;\n  /// Accessibility and infrastructure details\n  ACCESSIBILITY_INFRA: string;\n  /// Vector of Integrated Devices (IDM)\n  INTEGRATED_DEVICES: [IDM];\n}\n\nroot_type SIT;\nfile_identifier \"$SIT\";",
            "files": [
                "./dist/SIT/SIT.js.tar.gz",
                "./dist/SIT/SIT.kt.tar.gz",
                "./dist/SIT/SIT.sw.tar.gz",
                "./dist/SIT/SIT.dart.tar.gz",
                "./dist/SIT/SIT.py.tar.gz",
                "./dist/SIT/SIT.rs.tar.gz",
                "./dist/SIT/SIT.go.tar.gz",
                "./dist/SIT/SIT.php.tar.gz",
                "./dist/SIT/SIT.lob.tar.gz",
                "./dist/SIT/SIT.cpp.tar.gz",
                "./dist/SIT/SIT.ts.tar.gz",
                "./dist/SIT/SIT.json.tar.gz",
                "./dist/SIT/SIT.java.tar.gz",
                "./dist/SIT/SIT.cs.tar.gz"
            ]
        },
        "RFM": {
            "IDL": "// Hash: 63bb6c64954b75ef655efc22f9f6f2e6e02548954dac8b6dac91b872c8c15aeb\n// Version: 3.0.2\n// -----------------------------------END_HEADER\nenum refFrame : byte {\n  /// Earth-Centered-Earth-Fixed: Rotates with Earth. X-axis at prime meridian, Y eastward, Z towards North Pole.\n  ECEF,\n  /// International Celestial Reference Frame: Fixed relative to distant stars. Used in astronomy.\n  ICRF,\n  /// True Equator Mean Equinox: Dynamic frame for SGP4 satellite tracking.\n  TEME,\n  /// East-North-Up: Local tangent plane for surface points. Suitable for stationary objects.\n  ENU,\n  /// North-East-Down: Aviation/navigation frame aligned with gravity.\n  NED,\n  /// North-East-Up: Similar to NED, with \"Up\" opposite gravity.\n  NEU,\n  /// Radial-Intrack-Cross-track: Spacecraft orientation aligned with orbit.\n  RIC,\n  /// Earth Mean Equator and Equinox of J2000: Fixed relative to stars, used for celestial mechanics.\n  J2000,\n  /// Geocentric Celestial Reference Frame: Inertial Earth-centered frame.\n  GCRF,\n  /// Greenwich Rotating Coordinates: Rotates with Earth's true equator.\n  GRC,\n  /// International Terrestrial Reference Frame 2000: Rotating Earth-fixed frame.\n  ITRF2000,\n  /// International Terrestrial Reference Frame 1993: Older ITRF realization.\n  ITRF93,\n  /// International Terrestrial Reference Frame 1997: Intermediate ITRF realization.\n  ITRF97,\n  /// True of Date, Rotating: Rotates with Earth's true equator.\n  TDR,\n  /// True of Date: Similar to TDR, without rotation.\n  TOD,\n  /// Radial, Transverse, Normal: Orbit frame for spacecraft dynamics.\n  RTN,\n  /// Transverse, Velocity, Normal: Alternative orbit frame.\n  TVN,\n  /// Vehicle-Body-Local-Horizontal: Orbit frame aligned with spacecraft.\n  VVLH,\n  /// Vehicle-Local-Vertical-Local-Horizontal: Used in surface or proximity ops.\n  VLVH,\n  /// Local Tangent Plane: Surface-fixed frame for terrestrial uses.\n  LTP,\n  /// Local Vertical-Local Horizontal: Orbit frame with Z towards Earth center.\n  LVLH,\n  /// Polar-North-East: Polar coordinate frame.\n  PNE,\n  /// Body-Fixed Reference Frame: Fixed to a spacecraft or celestial object.\n  BRF,\n  /// Radial, Down-track, Cross-track: Alternate name for RTN.\n  RSW,\n  /// Tangential, Normal, Cross-track: Local orbit frame.\n  TNW,\n  /// Radial, Along-track, Cross-track: Satellite motion frame.\n  UVW,\n  /// Equinoctial Inertial: Frame with axes aligned to orbital properties.\n  EQW_INERTIAL,\n  /// Inertial version of LVLH.\n  LVLH_INERTIAL,\n  /// Rotating LVLH frame.\n  LVLH_ROTATING,\n  /// Inertial Nadir-Sun-Normal frame.\n  NSW_INERTIAL,\n  /// Rotating Nadir-Sun-Normal frame.\n  NSW_ROTATING,\n  /// Inertial Transverse-Velocity-Normal frame.\n  NTW_INERTIAL,\n  /// Rotating Transverse-Velocity-Normal frame.\n  NTW_ROTATING,\n  /// Perifocal Coordinate System: Inertial frame aligned to periapsis.\n  PQW_INERTIAL,\n  /// Inertial Radial, Transverse, Normal frame.\n  RSW_INERTIAL,\n  /// Rotating RSW frame: Aligned with orbit angular momentum.\n  RSW_ROTATING,\n  /// South/East/Zenith inertial frame.\n  SEZ_INERTIAL,\n  /// Rotating South/East/Zenith frame.\n  SEZ_ROTATING,\n  /// Inertial Tangential, Normal, Cross-track frame.\n  TNW_INERTIAL,\n  /// Rotating Tangential, Normal, Cross-track frame.\n  TNW_ROTATING,\n  /// Velocity, Normal, Co-normal inertial frame.\n  VNC_INERTIAL,\n  /// Rotating Velocity, Normal, Co-normal frame.\n  VNC_ROTATING,\n  /// Central Body alignment inertial frame.\n  ALIGN_CB,\n  /// Earth alignment inertial frame.\n  ALIGN_EARTH,\n  /// Inertial realization of B1950 epoch.\n  B1950,\n  /// Celestial Intermediate Reference System.\n  CIRS,\n  /// DTRF Inertial frame with corrections.\n  DTRFyyyy,\n  /// Earth-Fixed Greenwich rotating frame.\n  EFG,\n  /// Earth Mean Equator and Equinox of 2000 epoch.\n  EME2000,\n  /// Central Body fixed rotating frame.\n  FIXED_CB,\n  /// Earth-fixed rotating frame.\n  FIXED_EARTH,\n  /// Geocentric Celestial Reference Frame with versioning.\n  GCRFn,\n  /// Greenwich True-of-Date rotating frame.\n  GTOD,\n  /// Mean of Date for all central bodies except Earth and Moon.\n  MOD_CB,\n  /// Mean of Date for Earth.\n  MOD_EARTH,\n  /// Mean of Date for Moon.\n  MOD_MOON,\n  /// Mean of Epoch for central bodies.\n  MOE_CB,\n  /// Mean of Epoch for Earth.\n  MOE_EARTH,\n  /// Lunar Moon Mean Earth reference frame.\n  MOON_ME,\n  /// Lunar Mean Equator and IAU Node reference frame.\n  MOON_MEIAUE,\n  /// Lunar Principal Axis rotating frame.\n  MOON_PAxxx,\n  /// True Equator Mean Equinox of Date.\n  TEMEOFDATE,\n  /// True Equator Mean Equinox of Epoch.\n  TEMEOFEPOCH,\n  /// Terrestrial Intermediate Reference System.\n  TIRS,\n  /// True of Date for central bodies.\n  TOD_CB,\n  /// True of Date for Earth.\n  TOD_EARTH,\n  /// True of Date for Moon.\n  TOD_MOON,\n  /// True of Epoch for central bodies.\n  TOE_CB,\n  /// True of Epoch for Earth.\n  TOE_EARTH,\n  /// True of Epoch for Moon.\n  TOE_MOON,\n  /// True Ecliptic reference frame.\n  TRUE_ECLIPTIC,\n  /// Launch go-inertial reference frame.\n  UVW_GO_INERTIAL,\n  /// WGS 84 Earth-fixed terrestrial system.\n  WGS84,\n  /// Accelerometer reference frame.\n  ACC_i,\n  /// Actuator reference frame.\n  ACTUATOR_i,\n  /// Autonomous Star Tracker reference frame.\n  AST_i,\n  /// Coarse Sun Sensor reference frame.\n  CSS_i,\n  /// Digital Sun Sensor reference frame.\n  DSS_i,\n  /// Earth Sensor Assembly reference frame.\n  ESA_i,\n  /// Gyro reference frame.\n  GYRO_FRAME_i,\n  /// Inertial Measurement Unit reference frame.\n  IMU_FRAME_i,\n  /// Instrument reference frame.\n  INSTRUMENT_i,\n  /// Magnetic Torque Assembly reference frame.\n  MTA_i,\n  /// Reaction Wheel reference frame.\n  RW_i,\n  /// Solar Array reference frame.\n  SA_i,\n  /// Spacecraft Body reference frame.\n  SC_BODY_i,\n  /// Sensor reference frame.\n  SENSOR_i,\n  /// Star Tracker reference frame.\n  STARTRACKER_i,\n  /// Three Axis Magnetometer reference frame.\n  TAM_i\n}\n\n/// Reference Frame Message\ntable RFM {\n  REFERENCE_FRAME: refFrame;\n}\n\nroot_type RFM;\nfile_identifier \"$RFM\";",
            "files": [
                "./dist/RFM/RFM.js.tar.gz",
                "./dist/RFM/RFM.kt.tar.gz",
                "./dist/RFM/RFM.sw.tar.gz",
                "./dist/RFM/RFM.dart.tar.gz",
                "./dist/RFM/RFM.py.tar.gz",
                "./dist/RFM/RFM.rs.tar.gz",
                "./dist/RFM/RFM.go.tar.gz",
                "./dist/RFM/RFM.php.tar.gz",
                "./dist/RFM/RFM.lob.tar.gz",
                "./dist/RFM/RFM.cpp.tar.gz",
                "./dist/RFM/RFM.ts.tar.gz",
                "./dist/RFM/RFM.json.tar.gz",
                "./dist/RFM/RFM.java.tar.gz",
                "./dist/RFM/RFM.cs.tar.gz"
            ]
        },
        "BOV": {
            "IDL": "// Hash: 9ee0399a8ebd63e61d726efa31554c7616feb0b46b908e3406588cbb44b41a8d\n// Version: 1.0.1\n// -----------------------------------END_HEADER\n/// Burn Out Vector Message\ntable BOV {\n  // EFG Coordinates\n  E_COORDINATE: double; // 11 significant figures\n  F_COORDINATE: double; // 11 significant figures\n  G_COORDINATE: double; // 11 significant figures\n\n  // Velocity in EFG Coordinates\n  E_DOT: double; // 9 significant figures\n  F_DOT: double; // 9 significant figures\n  G_DOT: double; // 9 significant figures\n\n  // Epoch time, in ISO 8601 UTC format\n  EPOCH: string;\n\n  // Time from Launch in Seconds\n  TIME_FROM_LAUNCH: double; // Seconds with appropriate precision\n}\n\nroot_type BOV;\nfile_identifier \"$BOV\";",
            "files": [
                "./dist/BOV/BOV.js.tar.gz",
                "./dist/BOV/BOV.kt.tar.gz",
                "./dist/BOV/BOV.sw.tar.gz",
                "./dist/BOV/BOV.dart.tar.gz",
                "./dist/BOV/BOV.py.tar.gz",
                "./dist/BOV/BOV.rs.tar.gz",
                "./dist/BOV/BOV.go.tar.gz",
                "./dist/BOV/BOV.php.tar.gz",
                "./dist/BOV/BOV.lob.tar.gz",
                "./dist/BOV/BOV.cpp.tar.gz",
                "./dist/BOV/BOV.ts.tar.gz",
                "./dist/BOV/BOV.json.tar.gz",
                "./dist/BOV/BOV.java.tar.gz",
                "./dist/BOV/BOV.cs.tar.gz"
            ]
        },
        "LDM": {
            "IDL": "// Hash: 25557a81e571c04e94ad7ff97f4becbc6f70e8a0c2dd0c8b83a15498fee2b7b9\n// Version: 1.0.1\n// -----------------------------------END_HEADER\ninclude \"../SIT/main.fbs\";\ninclude \"../EPM/main.fbs\";\ninclude \"../CAT/main.fbs\";\ninclude \"../ROC/main.fbs\"; // For Rocket Configuration\ninclude \"../BOV/main.fbs\"; \n\n/// Launch Data Message\ntable LDM {\n  /// Launch Site Information\n  SITE: SIT;\n\n  /// Azimuth at Launch (in Degrees)\n  AZIMUTH: float;\n\n  /// References for Launch Data\n  REFERENCES: string;\n\n  /// Launching Agency Name\n  AGENCY_NAME: string;\n\n  /// Points of Contact for Launch\n  POINTS_OF_CONTACT: [EPM];\n\n  /// Operations Points of Contact for Launch\n  OPERATIONS_POINTS_OF_CONTACT: [EPM];\n\n  /// Net Launch Time (UTC Format)\n  NET: string;\n\n  /// Rocket Configuration Details\n  ROCKET_CONFIGURATION: ROC;\n\n  /// Mission Name\n  MISSION_NAME: string;\n\n  /// Description of the Mission\n  MISSION_DESCRIPTION: string;\n\n  /// Type of the Mission (e.g., Test Flight, Satellite Deployment)\n  MISSION_TYPE: string;\n\n  /// Target Orbit Type (e.g., LEO, GEO)\n  ORBIT_TYPE: string;\n\n  /// Weather and Environmental Conditions at Launch\n  WEATHER_CONDITIONS: string;\n\n  /// Launch Outcome and Status (e.g., Successful, Failed)\n  LAUNCH_STATUS: string;\n\n  /// Webcast URL for the Launch\n  WEBCAST_URL: string;\n\n  /// Media Links Related to the Launch\n  MEDIA_LINKS: [string];\n\n  /// Earliest Possible Launch Times\n  EARLIEST_LAUNCH_TIMES: [string];\n\n  /// Latest Possible Launch Times\n  LATEST_LAUNCH_TIMES: [string];\n\n  /// Launch Collision Avoidance Information\n  LCOLA_WINDOW_CLOSURES: [string];\n\n  /// Payload Information (Catalog Entities)\n  OBJECTS: [CAT];\n\n  /// Tracking and Collision Avoidance Requirements\n  TRACKING_REQUIREMENTS: [string];\n\n  /// Duration of Collision Avoidance Screen (in Seconds)\n  COLA_SCREEN_DURATION: string;\n\n  /// Probability of Collision Threshold (Percentage)\n  PROBABILITY_OF_COLLISION_THRESHOLD: string;\n\n  /// Number of Required Collision Avoidance Runs\n  COLA_RUNS_REQUIRED: string;\n\n  /// Points of Contact for Collision Avoidance\n  COLA_POINTS_OF_CONTACT: [EPM];\n\n  /// Orbital Parameters of the Launch\n  ORBITAL_PARAMETERS: [string];\n\n  /// Burn Out Vectors for the Launch\n  BURN_OUT_VECTORS: [BOV];\n}\n\n// Collection of Launch Data Messages\n\nroot_type LDM;\nfile_identifier \"$LDM\";",
            "files": [
                "./dist/LDM/LDM.js.tar.gz",
                "./dist/LDM/LDM.kt.tar.gz",
                "./dist/LDM/LDM.sw.tar.gz",
                "./dist/LDM/LDM.dart.tar.gz",
                "./dist/LDM/LDM.py.tar.gz",
                "./dist/LDM/LDM.rs.tar.gz",
                "./dist/LDM/LDM.go.tar.gz",
                "./dist/LDM/LDM.php.tar.gz",
                "./dist/LDM/LDM.lob.tar.gz",
                "./dist/LDM/LDM.cpp.tar.gz",
                "./dist/LDM/LDM.ts.tar.gz",
                "./dist/LDM/LDM.json.tar.gz",
                "./dist/LDM/LDM.java.tar.gz",
                "./dist/LDM/LDM.cs.tar.gz"
            ]
        },
        "TDM": {
            "IDL": "// Hash: 03b965c198dd6fc49b3e4a07f6256dd817363aed89239df0e45d21cb3d65a11e\n// Version: 1.0.1\n// -----------------------------------END_HEADER\ninclude \"../RFM/main.fbs\";\n\n// Based on CCSDS 503.0-B-1 standard, November 2007\n/// Tracking Data Message\ntable TDM {\n\n  /// Unique identifier for the observation OBSERVER -  [Specific CCSDS Document]\n  OBSERVER_ID: string;\n\n  /// Cartesian X coordinate of the OBSERVER location in chosen reference frame\n  OBSERVER_X: double;\n\n  /// Cartesian Y coordinate of the OBSERVER location in chosen reference frame \n  OBSERVER_Y: double;\n\n  /// Cartesian Z coordinate of the OBSERVER location in chosen reference frame \n  OBSERVER_Z: double;\n\n  /// Cartesian X coordinate of the OBSERVER velocity in chosen reference frame\n  OBSERVER_VX: double;\n\n  /// Cartesian Y coordinate of the OBSERVER velocity in chosen reference frame \n  OBSERVER_VY: double;\n\n  /// Cartesian Z coordinate of the OBSERVER velocity in chosen reference frame \n  OBSERVER_VZ: double;\n  \n  /// Reference frame used for OBSERVER location Cartesian coordinates (e.g., ECEF, ECI)\n  OBSERVER_POSITION_REFERENCE_FRAME: refFrame;\n\n  /// Reference frame used for obs location Cartesian coordinates (e.g., ECEF, ECI)\n  OBS_REFERENCE_FRAME: refFrame;\n\n  /// Epoch time or observation time, in ISO 8601 UTC format -  CCSDS 503.0-B-1\n  EPOCH: string;\n\n  /// TDM version number -  CCSDS 503.0-B-1, Page D-9\n  CCSDS_TDM_VERS: string;\n\n  /// Comments regarding TDM -  various sections, e.g., Page D-9\n  COMMENT: [string];\n\n  /// Date of TDM creation -  CCSDS 503.0-B-1, Page D-9\n  CREATION_DATE: string;\n\n  /// Originator of the TDM -  CCSDS 503.0-B-1, Page D-9\n  ORIGINATOR: string;\n\n  /// Start of metadata section -  CCSDS 503.0-B-1, Page D-9\n  META_START: string;\n\n  /// Time system used -  CCSDS 503.0-B-1, Page D-9\n  TIME_SYSTEM: string;\n\n  /// Start time of the data -  CCSDS 503.0-B-1, Page D-9\n  START_TIME: string;\n\n  /// Stop time of the data -  CCSDS 503.0-B-1, Page D-9\n  STOP_TIME: string;\n\n  /// First participant in the TDM -  CCSDS 503.0-B-1, Page D-9\n  PARTICIPANT_1: string;\n\n  /// Second participant in the TDM -  CCSDS 503.0-B-1, Page D-9\n  PARTICIPANT_2: string;\n\n  /// Third participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9\n  PARTICIPANT_3: string;\n\n  /// Fourth participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9\n  PARTICIPANT_4: string;\n\n  /// Fifth participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9, max participants\n  PARTICIPANT_5: string;\n\n  /// Mode of TDM -  CCSDS 503.0-B-1, Page D-9\n  MODE: string;\n\n  /// First path in TDM -  CCSDS 503.0-B-1, Page D-9\n  PATH_1: ushort;\n\n  /// Second path in TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9\n  PATH_2: ushort;\n\n  /// Transmit band -  CCSDS 503.0-B-1, Page D-9\n  TRANSMIT_BAND: string;\n\n  /// Receive band -  CCSDS 503.0-B-1, Page D-9\n  RECEIVE_BAND: string;\n\n  /// Integration interval -  CCSDS 503.0-B-1, Page D-9\n  INTEGRATION_INTERVAL: float;\n\n  /// Integration reference -  CCSDS 503.0-B-1, Page D-9\n  INTEGRATION_REF: string;\n\n  /// Receive delay for second participant -  CCSDS 503.0-B-1, Page D-9\n  RECEIVE_DELAY_2: double;\n\n  /// Receive delay for third participant -  CCSDS 503.0-B-1, Page D-9\n  RECEIVE_DELAY_3: double;\n\n  /// Data quality -  CCSDS 503.0-B-1, Page D-9\n  DATA_QUALITY: string;\n\n  /// End of metadata section -  CCSDS 503.0-B-1, Page D-9\n  META_STOP: string;\n\n  /// Start of data section -  CCSDS 503.0-B-1, Page D-9\n  DATA_START: string;\n\n  /// Transmit frequency for first participant -  CCSDS 503.0-B-1, Page D-9\n  TRANSMIT_FREQ_1: double;\n\n  /// Receive frequency -  CCSDS 503.0-B-1, Page D-9\n  RECEIVE_FREQ: [double];\n\n  /// End of data section -  CCSDS 503.0-B-1, Page D-9\n  DATA_STOP: string;\n\n  /// Additional properties as required by the specific application of the TDM...\n  /// Reference for time tagging -  CCSDS 503.0-B-1, Page D-10\n  TIMETAG_REF: string;\n\n  /// Type of angle data -  CCSDS 503.0-B-1, Page D-12\n  /// Can be AZEL, RADEC, XEYN, XSYE, or another value with provided ICD\n  ANGLE_TYPE: string;\n\n  /// First angle value -  CCSDS 503.0-B-1, Page D-12\n  ANGLE_1: [float];\n\n  /// Second angle value -  CCSDS 503.0-B-1, Page D-12\n  ANGLE_2: [float];\n\n  /// Uncertainty of first angle -  CCSDS 503.0-B-1\n  ANGLE_UNCERTAINTY_1: float;\n\n  /// Uncertainty of second angle -  CCSDS 503.0-B-1\n  ANGLE_UNCERTAINTY_2: float;\n\n  /// Rate of change of range -  CCSDS 503.0-B-1\n  RANGE_RATE: double;\n\n  /// Uncertainty in range -  CCSDS 503.0-B-1\n  RANGE_UNCERTAINTY: double;\n\n  /// Mode of range data -  CCSDS 503.0-B-1, Page D-10\n  RANGE_MODE: string;\n\n  /// Modulus value for range data -  CCSDS 503.0-B-1, Page D-10\n  RANGE_MODULUS: double;\n\n  /// First correction angle -  CCSDS 503.0-B-1, Page D-12\n  CORRECTION_ANGLE_1: float;\n\n  /// Second correction angle -  CCSDS 503.0-B-1, Page D-12\n  CORRECTION_ANGLE_2: float;\n\n  /// Indicator of corrections applied -  CCSDS 503.0-B-1, Page D-12\n  CORRECTIONS_APPLIED: string;\n\n  /// Dry component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14\n  TROPO_DRY: [double];\n\n  /// Wet component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14\n  TROPO_WET: [double];\n\n  /// Slant total electron content -  CCSDS 503.0-B-1, Page D-13\n  STEC: [double];\n\n  /// Atmospheric pressure -  CCSDS 503.0-B-1, Page D-14\n  PRESSURE: [double];\n\n  /// Relative humidity -  CCSDS 503.0-B-1, Page D-14\n  RHUMIDITY: [double];\n\n  /// Ambient temperature -  CCSDS 503.0-B-1, Page D-14\n  TEMPERATURE: [double];\n\n  /// Clock bias values -  CCSDS 503.0-B-1, Page D-15\n  CLOCK_BIAS: [double];\n\n  /// Clock drift values -  CCSDS 503.0-B-1, Page D-15\n  CLOCK_DRIFT: [double];\n}\n\nroot_type TDM;\nfile_identifier \"$TDM\";",
            "files": [
                "./dist/TDM/TDM.js.tar.gz",
                "./dist/TDM/TDM.kt.tar.gz",
                "./dist/TDM/TDM.sw.tar.gz",
                "./dist/TDM/TDM.dart.tar.gz",
                "./dist/TDM/TDM.py.tar.gz",
                "./dist/TDM/TDM.rs.tar.gz",
                "./dist/TDM/TDM.go.tar.gz",
                "./dist/TDM/TDM.php.tar.gz",
                "./dist/TDM/TDM.lob.tar.gz",
                "./dist/TDM/TDM.cpp.tar.gz",
                "./dist/TDM/TDM.ts.tar.gz",
                "./dist/TDM/TDM.json.tar.gz",
                "./dist/TDM/TDM.java.tar.gz",
                "./dist/TDM/TDM.cs.tar.gz"
            ]
        }
    }
}