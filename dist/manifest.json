{
    "version": "1.0.126+1710800582878",
    "STANDARDS": {
        "MPE": {
            "IDL": "// Space Data Standard - 6 - Minimum-Propagatable-Element-Set (MPE)\n// Description\n// Truncated version of the Orbit Mean-Elements Message (OMM). Includes only the Mean Elements required to propagate an orbit.\n// Legacy format description can be found here.\n// CCSDS Reference documentation: 502x0b2c1e2.\n\nenum referenceFrame : byte {\n  /// Earth Mean Equator and Equinox of J2000\n  EME2000,\n  /// Geocentric Celestial Reference Frame\n  GCRF,\n  /// Greenwich Rotating Coordinates\n  GRC,\n  /// International Celestial Reference Frame\n  ICRF,\n  /// International Terrestrial Reference Frame 2000\n  ITRF2000,\n  /// International Terrestrial Reference Frame 1993\n  ITRF93,\n  /// International Terrestrial Reference Frame 1997\n  ITRF97,\n  /// Mars Centered Inertial\n  MCI,\n  /// True of Date, Rotating\n  TDR,\n  /// True Equator Mean Equinox\n  TEME,\n  /// True of Date\n  TOD\n}\n\nenum timeSystem : byte {\n  /// Greenwich Mean Sidereal Time\n  GMST,\n  /// Global Positioning System\n  GPS,\n  /// Mission Elapsed Time\n  MET,\n  /// Mission Relative Time\n  MRT,\n  /// Spacecraft Clock (receiver) (requires rules for interpretation in ICD)\n  SCLK,\n  /// International Atomic Time\n  TAI,\n  /// Barycentric Coordinate Time\n  TCB,\n  /// Barycentric Dynamical Time\n  TDB,\n  /// Geocentric Coordinate Time\n  TCG,\n  /// Terrestrial Time\n  TT,\n  /// Universal Time\n  UT1,\n  /// Coordinated Universal Time\n  UTC\n}\n\nenum meanElementTheory : byte {\n  /// Simplified General Perturbation Model 4\n  SGP4,\n  /// Draper Semi-analytical Satellite Theory\n  DSST,\n  /// Universal Semianalytical Method\n  USM\n}\n\n/// Minimum Propagatable Element Set\ntable MPE {  \n  /// Unique ID as a String\n  ENTITY_ID: string;\n  /// Epoch of Mean Keplerian elements. (UNIX TimeStamp)\n  EPOCH: double;\n  /// Semi-major axis in km or mean motion in rev/day\n  MEAN_MOTION: double;\n  /// Eccentricity\n  ECCENTRICITY: double;\n  /// Inclination\n  INCLINATION: double;\n  /// Right ascension of ascending node\n  RA_OF_ASC_NODE: double;\n  /// Argument of pericenter\n  ARG_OF_PERICENTER: double;\n  /// Mean anomaly\n  MEAN_ANOMALY: double;\n  /// SGP/SGP4 drag-like coefficient (in units 1/[Earth radii])\n  BSTAR: double;\n}\n\n/// Collection of MPE Records\n\nroot_type MPE;\nfile_identifier \"$MPE\";\n",
            "files": [
                "./dist/MPE/MPE.php.tar.gz",
                "./dist/MPE/MPE.json.tar.gz",
                "./dist/MPE/MPE.py.tar.gz",
                "./dist/MPE/MPE.java.tar.gz",
                "./dist/MPE/MPE.rs.tar.gz",
                "./dist/MPE/MPE.lob.tar.gz",
                "./dist/MPE/MPE.ts.tar.gz",
                "./dist/MPE/MPE.js.tar.gz",
                "./dist/MPE/MPE.dart.tar.gz",
                "./dist/MPE/MPE.kt.tar.gz",
                "./dist/MPE/MPE.cs.tar.gz",
                "./dist/MPE/MPE.cpp.tar.gz",
                "./dist/MPE/MPE.sw.tar.gz",
                "./dist/MPE/MPE.go.tar.gz"
            ]
        },
        "OMM": {
            "IDL": "// Orbit Mean Elements Message (OMM)\n//\n// Orbit information may be exchanged between two participants by sending an orbital\n// state based on mean Keplerian elements for a specified epoch using an\n// Orbit Mean-Elements Message (OMM). The message recipient must use appropriate orbit\n// propagator algorithms in order to correctly propagate the OMM state to compute the orbit at\n// other desired epochs. \n// Legacy format description can be found here.\n// CCSDS Reference documentation: 502x0b2c1e2.\n\nenum referenceFrame : byte {\n  /// Earth Mean Equator and Equinox of J2000\n  EME2000,\n  /// Geocentric Celestial Reference Frame\n  GCRF,\n  /// Greenwich Rotating Coordinates\n  GRC,\n  /// International Celestial Reference Frame\n  ICRF,\n  /// International Terrestrial Reference Frame 2000\n  ITRF2000,\n  /// International Terrestrial Reference Frame 1993\n  ITRF93, \n  /// International Terrestrial Reference Frame 1997\n  ITRF97,\n  /// Mars Centered Inertial\n  MCI,\n  /// True of Date, Rotating\n  TDR,\n  /// True Equator Mean Equinox\n  TEME,\n  /// True of Date\n  TOD\n}\n\nenum ephemerisType : byte {\n  /// Simplified General Perturbation Model\n  SGP,\n  /// Simplified General Perturbation Model 4\n  SGP4,\n  /// Simplified Deep Space Perturbation Model 4\n  SDP4,\n  /// Simplified General Perturbation Model 8\n  SGP8,\n  /// Simplified Deep Space Perturbation Model 8\n  SDP8\n}\n\nenum timeSystem : byte {\n  /// Greenwich Mean Sidereal Time\n  GMST,\n  /// Global Positioning System\n  GPS,\n  /// Mission Elapsed Time\n  MET,\n  /// Mission Relative Time\n  MRT,\n  /// Spacecraft Clock (receiver)\n  SCLK,\n  /// International Atomic Time\n  TAI,\n  /// Barycentric Coordinate Time\n  TCB,\n  /// Barycentric Dynamical Time\n  TDB,\n  /// Geocentric Coordinate Time\n  TCG,\n  /// Terrestrial Time\n  TT,\n  /// Universal Time\n  UT1,\n  /// Coordinated Universal Time\n  UTC\n}\n\nenum meanElementTheory : byte {\n  /// Simplified General Perturbation Model 4\n  SGP4,\n  /// Draper Semi-analytical Satellite Theory\n  DSST,\n  /// Universal Semianalytical Method\n  USM\n}\n\nenum manCovRefFrame : byte {\n  /// Another name for 'Radial, Transverse, Normal'\n  RSW,\n  /// Radial, Transverse, Normal\n  RTN,\n  /// A local orbital coordinate frame\n  TNW\n}\n\n/// Orbit Mean Elements Message\ntable OMM {\n  /// OMM Header\n  CCSDS_OMM_VERS:double;\n  /// Creation Date\n  CREATION_DATE:string;\n  /// Originator\n  ORIGINATOR:string;\n\n  /// OMM Metadata\n  /// Satellite Name(s)\n  OBJECT_NAME:string;\n  /// International Designator (YYYY-NNNAAA)\n  OBJECT_ID:string;\n  /// Origin of reference frame (EARTH, MARS, MOON, etc.)\n  CENTER_NAME:string;\n  /// Name of the reference frame (TEME, EME2000, etc.)\n  REF_FRAME:referenceFrame = TEME;\n  /// REF_FRAME_EPOCH\n  REF_FRAME_EPOCH:string;\n  /// Time system used for the orbit state and covariance matrix. (UTC)\n  TIME_SYSTEM:timeSystem = UTC;\n  /// Description of the Mean Element Theory. (SGP4,DSST,USM)\n  MEAN_ELEMENT_THEORY:meanElementTheory = SGP4;\n\n  /// Mean Keplerian Elements in the Specified Reference Frame\n  /// Plain-Text Comment\n  COMMENT:string;\n  /// Epoch of Mean Keplerian elements. (ISO 8601)\n  EPOCH:string;\n  /// Semi-major axis in km or mean motion in rev/day\n  SEMI_MAJOR_AXIS:double;\n  /// Mean motion\n  MEAN_MOTION:double;\n  /// Eccentricity\n  ECCENTRICITY:double;\n  /// Inclination\n  INCLINATION:double;\n  /// Right ascension of ascending node\n  RA_OF_ASC_NODE:double;\n  /// Argument of pericenter\n  ARG_OF_PERICENTER:double;\n  /// Mean anomaly\n  MEAN_ANOMALY:double;\n  /// Gravitational Coefficient (Gravitational Constant x Central Mass)\n  GM:double;\n  \n  /// Spacecraft Parameters\n  /// S/C Mass\n  MASS:double;\n  /// Solar Radiation Pressure Area (AR) m**2\n  SOLAR_RAD_AREA:double;\n  /// Solar Radiation Pressure Coefficient (CR)\n  SOLAR_RAD_COEFF:double;\n  /// Drag Area (AD) m**2\n  DRAG_AREA:double;\n  /// Drag Coefficient (CD)\n  DRAG_COEFF:double;\n\n  /// TLE Related Parameters (This section is only required if MEAN_ELEMENT_THEORY=SGP/SGP4)\n  /// Default value = 0\n  EPHEMERIS_TYPE:ephemerisType = SGP4;\n  /// Default value = U\n  CLASSIFICATION_TYPE:string;\n  /// NORAD Catalog Number (Satellite Number) an integer\n  NORAD_CAT_ID:uint32;\n  /// Element set number for this satellite\n  ELEMENT_SET_NO:uint32;\n  /// Revolution Number\n  REV_AT_EPOCH:double;\n  /// SGP/SGP4 drag-like coefficient (in units 1/[Earth radii])\n  BSTAR:double;\n  /// First Time Derivative of the Mean Motion\n  MEAN_MOTION_DOT:double;\n  /// Second Time Derivative of Mean Motion\n  MEAN_MOTION_DDOT:double;\n  \n  /// Position/Velocity Covariance Matrix\n  /// Reference frame for the covariance matrix\n  COV_REF_FRAME:manCovRefFrame = RSW;\n  /// Covariance matrix [1,1] km**2\n  CX_X:double;\n  /// Covariance matrix [2,1] km**2\n  CY_X:double;\n  /// Covariance matrix [2,2] km**2\n  CY_Y:double;\n  /// Covariance matrix [3,1] km**2\n  CZ_X:double;\n  /// Covariance matrix [3,2] km**2\n  CZ_Y:double;\n  /// Covariance matrix [3,3] km**2\n  CZ_Z:double;\n  /// Covariance matrix [4,1] km**2/s\n  CX_DOT_X:double;\n  /// Covariance matrix [4,2] km**2/s\n  CX_DOT_Y:double;\n  /// Covariance matrix [4,3] km**2/s\n  CX_DOT_Z:double;\n  /// Covariance matrix [4,4] km**2/s**2\n  CX_DOT_X_DOT:double;\n  /// Covariance matrix [5,1] km**2/s\n  CY_DOT_X:double;\n  /// Covariance matrix [5,2] km**2/s\n  CY_DOT_Y:double;\n  /// Covariance matrix [5,3] km**2/s\n  CY_DOT_Z:double;\n  /// Covariance matrix [5,4] km**2/s**2\n  CY_DOT_X_DOT:double;\n  /// Covariance matrix [5,5] km**2/s**2\n  CY_DOT_Y_DOT:double;\n  /// Covariance matrix [6,1] km**2/s\n  CZ_DOT_X:double;\n  /// Covariance matrix [6,2] km**2/s\n  CZ_DOT_Y:double;\n  /// Covariance matrix [6,3] km**2/s\n  CZ_DOT_Z:double;\n  /// Covariance matrix [6,4] km**2/s**2\n  CZ_DOT_X_DOT:double;\n  /// Covariance matrix [6,5] km**2/s**2\n  CZ_DOT_Y_DOT:double;\n  /// Covariance matrix [6,6] km**2/s**2\n  CZ_DOT_Z_DOT:double;\n\n  /// User defined parameter, must be described in an ICD\n  USER_DEFINED_BIP_0044_TYPE:uint;\n  /// User defined parameter, must be described in an ICD\n  USER_DEFINED_OBJECT_DESIGNATOR:string;\n  /// User defined parameter, must be described in an ICD\n  USER_DEFINED_EARTH_MODEL:string;\n  /// User defined parameter, must be described in an ICD\n  USER_DEFINED_EPOCH_TIMESTAMP: double;\n  /// User defined parameter, must be described in an ICD\n  USER_DEFINED_MICROSECONDS: double;\n}\n\n\nroot_type OMM;\nfile_identifier \"$OMM\";",
            "files": [
                "./dist/OMM/OMM.php.tar.gz",
                "./dist/OMM/OMM.json.tar.gz",
                "./dist/OMM/OMM.py.tar.gz",
                "./dist/OMM/OMM.java.tar.gz",
                "./dist/OMM/OMM.rs.tar.gz",
                "./dist/OMM/OMM.lob.tar.gz",
                "./dist/OMM/OMM.ts.tar.gz",
                "./dist/OMM/OMM.js.tar.gz",
                "./dist/OMM/OMM.dart.tar.gz",
                "./dist/OMM/OMM.kt.tar.gz",
                "./dist/OMM/OMM.cs.tar.gz",
                "./dist/OMM/OMM.cpp.tar.gz",
                "./dist/OMM/OMM.sw.tar.gz",
                "./dist/OMM/OMM.go.tar.gz"
            ]
        },
        "PLD": {
            "IDL": "include \"../IDM/main.fbs\";\n\n/// Payload Information\ntable PLD {\n  PAYLOAD_DURATION: string;\n  MASS_AT_LAUNCH: float;\n  DIMENSIONS: string;\n  SOLAR_ARRAY_AREA: float;\n  SOLAR_ARRAY_DIMENSIONS: string;\n  NOMINAL_OPERATIONAL_LIFETIME: string;\n  INSTRUMENTS: [IDM]; // Vector of Instrument Data Messages\n}\n\n/// Collection of Payload Information Records\n\nroot_type PLD;\nfile_identifier \"$PLD\";",
            "files": [
                "./dist/PLD/PLD.php.tar.gz",
                "./dist/PLD/PLD.json.tar.gz",
                "./dist/PLD/PLD.py.tar.gz",
                "./dist/PLD/PLD.java.tar.gz",
                "./dist/PLD/PLD.rs.tar.gz",
                "./dist/PLD/PLD.lob.tar.gz",
                "./dist/PLD/PLD.ts.tar.gz",
                "./dist/PLD/PLD.js.tar.gz",
                "./dist/PLD/PLD.dart.tar.gz",
                "./dist/PLD/PLD.kt.tar.gz",
                "./dist/PLD/PLD.cs.tar.gz",
                "./dist/PLD/PLD.cpp.tar.gz",
                "./dist/PLD/PLD.sw.tar.gz",
                "./dist/PLD/PLD.go.tar.gz"
            ]
        },
        "CSM": {
            "IDL": "/// Conjunction Summary Message\ntable CSM {\n  /// NORAD Catalog Number for the first object\n  NORAD_CAT_ID_1: uint32;       \n  /// Satellite name for the first object\n  OBJECT_NAME_1: string;\n  /// Days since epoch for the first object\n  DSE_1: double;          \n  /// NORAD Catalog Number for the second object\n  NORAD_CAT_ID_2: uint32;           \n  /// Satellite name for the second object\n  OBJECT_NAME_2: string;      \n  /// Days since epoch for the second object\n  DSE_2: double;       \n  /// Time of closest approach as a Unix timestamp\n  TCA: double;\n  /// The distance or range between the two objects at TCA\n  TCA_RANGE: double;   \n  /// The magnitude of the relative velocity at TCA\n  TCA_RELATIVE_SPEED: double;   \n  /// Maximum probability\n  MAX_PROB: double;   \n  /// Standard deviation that produces the maximum probability\n  DILUTION: double;   \n}\n\n\nroot_type CSM;\nfile_identifier \"$CSM\";",
            "files": [
                "./dist/CSM/CSM.php.tar.gz",
                "./dist/CSM/CSM.json.tar.gz",
                "./dist/CSM/CSM.py.tar.gz",
                "./dist/CSM/CSM.java.tar.gz",
                "./dist/CSM/CSM.rs.tar.gz",
                "./dist/CSM/CSM.lob.tar.gz",
                "./dist/CSM/CSM.ts.tar.gz",
                "./dist/CSM/CSM.js.tar.gz",
                "./dist/CSM/CSM.dart.tar.gz",
                "./dist/CSM/CSM.kt.tar.gz",
                "./dist/CSM/CSM.cs.tar.gz",
                "./dist/CSM/CSM.cpp.tar.gz",
                "./dist/CSM/CSM.sw.tar.gz",
                "./dist/CSM/CSM.go.tar.gz"
            ]
        },
        "OSM": {
            "IDL": "/// Observation Stability Message\ntable OSM {\n  /// Indicates whether the observation is stable or not\n  IS_STABLE: bool;\n  /// The number of observations\n  NUM_OBS: int;\n  /// Unique identifier for the object being observed\n  OBJECT_ID: string;\n  /// Identifier of the sensor\n  ID_SENSOR: string;\n  /// Timestamp of data creation\n  PASS_START: string;\n  /// Duration of the observation pass in seconds\n  PASS_DURATION: int;\n}\n\n\nroot_type OSM;\nfile_identifier \"$OSM\";",
            "files": [
                "./dist/OSM/OSM.php.tar.gz",
                "./dist/OSM/OSM.json.tar.gz",
                "./dist/OSM/OSM.py.tar.gz",
                "./dist/OSM/OSM.java.tar.gz",
                "./dist/OSM/OSM.rs.tar.gz",
                "./dist/OSM/OSM.lob.tar.gz",
                "./dist/OSM/OSM.ts.tar.gz",
                "./dist/OSM/OSM.js.tar.gz",
                "./dist/OSM/OSM.dart.tar.gz",
                "./dist/OSM/OSM.kt.tar.gz",
                "./dist/OSM/OSM.cs.tar.gz",
                "./dist/OSM/OSM.cpp.tar.gz",
                "./dist/OSM/OSM.sw.tar.gz",
                "./dist/OSM/OSM.go.tar.gz"
            ]
        },
        "CAT": {
            "IDL": "include \"../PLD/main.fbs\";\n// https://www.celestrak.com/satcat/satcat-format.php\n\nenum objectType: byte  {\n  ///0\n  PAYLOAD,\n  ///1\n  ROCKET_BODY,\n  ///2\n  DEBRIS,\n  ///3\n  UNKNOWN\n}\n\nenum opsStatusCode: byte {\n  ///+\n  OPERATIONAL,\n  ///-\n  NONOPERATIONAL,\n  ///P\n  PARTIALLY_OPERATIONAL,\n  ///B\n  BACKUP_STANDBY,\n  ///S\n  SPARE,\n  ///X\n  EXTENDED_MISSION,\n  ///D\n  DECAYED,\n  ///?\n  UNKNOWN\n}\n\nenum dataStatusCode: byte {\n  ///NCE\n  NO_CURRENT_ELEMENTS,\n  ///NIE\n  NO_INITIAL_ELEMENTS,\n  ///NEA\n  NO_ELEMENTS_AVAILABLE,\n  ///OK\n  OK\n}\n\nenum orbitType: byte {\n  ///0\n  ORBIT,\n  ///1\n  LANDING,\n  ///2\n  IMPACT,\n  ///3\n  DOCKED,\n  ///4\n  ROUNDTRIP\n}\n\nenum massType: byte {\n  DRY,\n  WET\n}\n\n/// Catalog Entity Message\ntable CAT {\n  /// Satellite Name(s)\n  OBJECT_NAME:string;\n  /// International Designator (YYYY-NNNAAA)\n  OBJECT_ID:string;\n  /// NORAD Catalog Number\n  NORAD_CAT_ID:uint;\n  /// Object type (Payload, Rocket body, Debris, Unknown)\n  OBJECT_TYPE:objectType = UNKNOWN;\n  /// Operational Status Code\n  OPS_STATUS_CODE:opsStatusCode = UNKNOWN;\n  /// Ownership, typically country or company\n  OWNER:string;\n  /// Launch Date [year-month-day] (ISO 8601)\n  LAUNCH_DATE:string;\n  /// Launch Site\n  LAUNCH_SITE:string;\n  /// Decay Date, if applicable [year-month-day] (ISO 8601)\n  DECAY_DATE:string;\n  /// Orbital period [minutes]\n  PERIOD:double;\n  /// Inclination [degrees]\n  INCLINATION:double;\n  /// Apogee Altitude [kilometers]\n  APOGEE:double;\n  /// Perigee Altitude [kilometers]\n  PERIGEE:double;\n  /// Radar Cross Section [meters2]; blank if no data available\n  RCS:double;\n  /// Data status code; blank otherwise\n  DATA_STATUS_CODE:dataStatusCode;\n  /// Orbit center\n  ORBIT_CENTER: string;\n  /// Orbit type (Orbit, Landing, Impact, Docked to RSO, roundtrip)\n  ORBIT_TYPE:orbitType;\n  /// Deployment Date [year-month-day] (ISO 8601)\n  DEPLOYMENT_DATE:string;\n  /// Indicates if the object is maneuverable\n  MANEUVERABLE:bool;\n  /// Size [meters]; blank if no data available\n  SIZE:double;\n  /// Mass [kilograms]; blank if no data available\n  MASS:double;\n  /// Mass type (Dry, Wet)\n  MASS_TYPE:massType = DRY;\n  /// Vector of PAYLOADS\n  PAYLOADS: [PLD];\n}\n\n\n\nroot_type CAT;\nfile_identifier \"$CAT\";\n",
            "files": [
                "./dist/CAT/CAT.php.tar.gz",
                "./dist/CAT/CAT.json.tar.gz",
                "./dist/CAT/CAT.py.tar.gz",
                "./dist/CAT/CAT.java.tar.gz",
                "./dist/CAT/CAT.rs.tar.gz",
                "./dist/CAT/CAT.lob.tar.gz",
                "./dist/CAT/CAT.ts.tar.gz",
                "./dist/CAT/CAT.js.tar.gz",
                "./dist/CAT/CAT.dart.tar.gz",
                "./dist/CAT/CAT.kt.tar.gz",
                "./dist/CAT/CAT.cs.tar.gz",
                "./dist/CAT/CAT.cpp.tar.gz",
                "./dist/CAT/CAT.sw.tar.gz",
                "./dist/CAT/CAT.go.tar.gz"
            ]
        },
        "CRM": {
            "IDL": "/// Collection Request Message\ntable CRM {\n  /// Unique identifier of the record, auto-generated by the system.\n  ID: string;\n\n  /// Classification marking of the data in IC/CAPCO Portion-marked format.\n  CLASSIFICATION: string;\n\n  /// The type of this collect or contact request.\n  TYPE: string;\n\n  /// Unique identifier of the parent plan or schedule associated with this request.\n  ID_PLAN: string;\n\n  /// Index number for records within a collection plan or schedule.\n  PLAN_INDEX: int;\n\n  /// Task ID associated with this request.\n  TASK_ID: string;\n\n  /// The dwell ID associated with this request.\n  DWELL_ID: string;\n\n  /// Optional ID from external systems.\n  EXTERNAL_ID: string;\n\n  /// Unique identifier of the requested/scheduled/planned sensor associated with this request.\n  ID_SENSOR: string;\n\n  /// Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request.\n  ORIG_SENSOR_ID: string;\n\n  /// Optional type of observation requested.\n  OB_TYPE: string;\n\n  /// The priority of the collect request.\n  PRIORITY: string;\n\n  /// The tasking category associated with this request.\n  TASK_CATEGORY: int;\n\n  /// The tasking suffix associated with this request.\n  SUFFIX: string;\n\n  /// Boolean indicating that this collect request is UCT follow-up.\n  UCT_FOLLOW_UP: bool;\n\n  /// The start time of the collect or contact request window, in ISO 8601 UTC format.\n  START_TIME: string;\n\n  /// The end time of the collect or contact request window, in ISO 8601 UTC format.\n  END_TIME: string;\n\n  /// Satellite/catalog number of the target on-orbit object for this request.\n  NORAD_CAT_ID: uint32;\n\n  /// Optional identifier provided by the data source to indicate the target object of this request.\n  ORIG_OBJECT_ID: string;\n\n  /// The tasking group to which the target object is assigned.\n  TASK_GROUP: string;\n\n  /// Inter-Range Operations Number.\n  IRON: int;\n\n  /// The orbit regime of the target.\n  ORBIT_REGIME: string;\n\n  /// The minimum object (diameter) size, in meters, to be reported.\n  TARGET_SIZE: double;\n\n  /// The minimum Radar Cross-Section of the target, in m^2.\n  RCS_MIN: double;\n\n  /// The Radar Cross-Section of the target, in m^2.\n  RCS: double;\n\n  /// The maximum Radar Cross-Section of the target, in m^2.\n  RCS_MAX: double;\n\n  /// The minimum frequency of interest, in MHz.\n  FREQ_MIN: double;\n\n  /// The estimated or expected emission frequency of the target, in MHz.\n  FREQ: double;\n\n  /// The maximum frequency of interest, in MHz.\n  FREQ_MAX: double;\n\n  /// The RF polarization.\n  POLARIZATION: string;\n\n  /// The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).\n  VIS_MAG_MIN: double;\n\n  /// The estimated or expected visual magnitude of the target, in Magnitudes (M).\n  VIS_MAG: double;\n\n  /// The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).\n  VIS_MAG_MAX: double;\n\n  /// The spectral model used for the irradiance calculation.\n  SPECTRAL_MODEL: string;\n\n  /// The fraction of solar energy reflected from target.\n  REFLECTANCE: double;\n\n  /// The target object irradiance value.\n  IRRADIANCE: double;\n\n  /// For optical sensors, the requested number of frames to capture at each sensor step.\n  NUM_FRAMES: int;\n\n  /// For optical sensors, the frame rate of the camera, in Hz.\n  FRAME_RATE: double;\n\n  /// For optical sensors, the integration time per camera frame, in milliseconds.\n  INTEGRATION_TIME: double;\n\n  /// The number of requested tracks on the target.\n  NUM_TRACKS: int;\n\n  /// The number of requested observations on the target.\n  NUM_OBS: int;\n\n  /// The duration of the collect request, in seconds.\n  DURATION: int;\n\n  /// The search pattern to be executed for this request.\n  SRCH_PATTERN: string;\n\n  /// Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.\n  SCENARIO: string;\n\n  /// ID of the Elset of the object associated with this request.\n  ID_ELSET: string;\n\n  /// ID of the Manifold Elset of the object associated with this request.\n  ID_MANIFOLD: string;\n\n  /// ID of the State Vector of the object or central vector associated with this request.\n  ID_STATE_VECTOR: string;\n\n  /// ID of the Ephemeris Set of the object associated with this request.\n  ES_ID: string;\n\n  /// Epoch time, in ISO 8601 UTC format, of the orbital elements.\n  EPOCH: string;\n\n  /// The average of the periapsis and apoapsis distances, in kilometers.\n  SEMI_MAJOR_AXIS: double;\n\n  /// The orbital eccentricity of an astronomical object.\n  ECCENTRICITY: double;\n\n  /// The angle, in degrees, between the equator and the orbit plane.\n  INCLINATION: double;\n\n  /// Right ascension of the ascending node, in degrees.\n  RAAN: double;\n\n  /// The argument of perigee, in degrees.\n  ARG_OF_PERIGEE: double;\n\n  /// The mean anomaly defines the angular position, in degrees, of the object on its orbital path.\n  MEAN_ANOMALY: double;\n\n  /// The expected or directed right ascension angle, in degrees.\n  RA: double;\n\n  /// The expected or directed declination angle, in degrees.\n  DEC: double;\n\n  /// The expected or directed azimuth angle, in degrees.\n  AZ: double;\n\n  /// The expected or directed elevation angle, in degrees.\n  EL: double;\n\n  /// The expected acquisition range or defined center range, in km.\n  RANGE: double;\n\n  /// The extent of the azimuth angle, in degrees, from center azimuth.\n  EXTENT_AZ: double;\n\n  /// The extent of the elevation angle, in degrees, from center elevation.\n  EXTENT_EL: double;\n\n  /// The extent of the range, in km, from center range.\n  EXTENT_RANGE: double;\n\n  /// WGS-84 latitude, in degrees.\n  LAT: double;\n\n  /// WGS-84 longitude, in degrees.\n  LON: double;\n\n  /// Height above WGS-84 ellipsoid (HAE), in kilometers.\n  ALT: double;\n\n  /// The stopping WGS-84 latitude of a volume definition, in degrees.\n  STOP_LAT: double;\n\n  /// The stopping WGS-84 longitude of a volume definition, in degrees.\n  STOP_LON: double;\n\n  /// The stopping HAE WGS-84 height above ellipsoid (HAE), in kilometers.\n  STOP_ALT: double;\n\n  /// The maximum inclination, in degrees, to be used in search operations.\n  SRCH_INC: double;\n\n  /// The angular distance, in degrees, in the sensor-x direction from scan center.\n  X_ANGLE: double;\n\n  /// The angular distance, in degrees, in the sensor-y direction from scan center.\n  Y_ANGLE: double;\n\n  /// The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.\n  ORIENT_ANGLE: double;\n\n  /// The customer for this request.\n  CUSTOMER: string;\n\n  /// Notes or comments associated with this request.\n  NOTES: string;\n\n  ///  Source of the data.\n  SOURCE: string;\n\n  ///  Originating system or organization which produced the data, if different from the source.\n  ORIGIN: string;\n\n  ///  Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data.\n  DATA_MODE: string;\n}\n\n/// Collection of CRM records\n\nroot_type CRM;\nfile_identifier \"$CRM\";\n",
            "files": [
                "./dist/CRM/CRM.php.tar.gz",
                "./dist/CRM/CRM.json.tar.gz",
                "./dist/CRM/CRM.py.tar.gz",
                "./dist/CRM/CRM.java.tar.gz",
                "./dist/CRM/CRM.rs.tar.gz",
                "./dist/CRM/CRM.lob.tar.gz",
                "./dist/CRM/CRM.ts.tar.gz",
                "./dist/CRM/CRM.js.tar.gz",
                "./dist/CRM/CRM.dart.tar.gz",
                "./dist/CRM/CRM.kt.tar.gz",
                "./dist/CRM/CRM.cs.tar.gz",
                "./dist/CRM/CRM.cpp.tar.gz",
                "./dist/CRM/CRM.sw.tar.gz",
                "./dist/CRM/CRM.go.tar.gz"
            ]
        },
        "TDM": {
            "IDL": "// Based on CCSDS 503.0-B-1 standard, November 2007\n\nenum OBSERVERLocationReferenceFrame: byte {\n  /// Earth Mean Equator and Equinox of J2000\n  EME2000,\n  ///  Geocentric Celestial Reference Frame\n  GCRF,\n  /// Greenwich Rotating Coordinates\n  GRC,\n  /// International Celestial Reference Frame\n  ICRF,\n  /// International Terrestrial Reference Frame 2000\n  ITRF2000,\n  /// International Terrestrial Reference Frame 1993\n  ITRF93, \n  /// International Terrestrial Reference Frame 1997\n  ITRF97,\n  /// Mars Centered Inertial\n  MCI,\n  /// True of Date, Rotating\n  TDR,\n  /// True Equator Mean Equinox\n  TEME,\n  /// True of Date\n  TOD,\n  /// Vehicle-Body-Local-Horizontal (VVLH): An orbit reference frame with X-axis pointing from the center of the central body to the vehicle, Z-axis oppoOBSERVER to the orbital angular momentum vector, and Y-axis completing the right-handed system.\n  VVLH,\n  /// Radial-Intrack-Crosstrack (RIC): A local orbital reference frame with the radial axis pointing away from the central body, the intrack axis in the direction of motion, and the crosstrack axis completing the right-handed system.\n  RIC,\n  /// Vehicle-Local-Vertical-Local-Horizontal (VLVH): An orbit reference frame similar to VVLH, often used in close proximity operations or surface-oriented missions.\n  VLVH,\n   /// East-North-Up (ENU): A terrestrial reference frame where the X-axis points East, the Y-axis points North, and the Z-axis points Up (away from the center of the Earth).\n  ENU,\n  /// North-East-Down (NED): Similar to ENU, but with axes oriented Northward, Eastward, and Downward towards the Earth's center.\n  NED,\n  /// Local Tangent Plane (LTP): A local, surface-fixed reference frame often used for terrestrial applications, aligned with the local horizon.\n  LTP,\n  /// Local Vertical-Local Horizontal (LVLH): An orbit reference frame with the Z-axis pointing towards the center of the central body (oppoOBSERVER to local vertical), the X-axis in the velocity direction (local horizontal), and the Y-axis completing the right-hand system.\n  LVLH,\n  /// Polar-North-East (PNE): A variation of local coordinate systems typically used in polar regions, with axes aligned toward the geographic North Pole, Eastward, and perpendicular to the Earth's surface.\n  PNE,\n  /// Body-Fixed Reference Frame (BRF): A reference frame fixed to the body of a spacecraft or celestial object, oriented according to the body's principal axes.\n  BRF\n}\n\n/// Tracking Data Message\ntable TDM {\n\n  /// Unique identifier for the observation OBSERVER -  [Specific CCSDS Document]\n  OBSERVER_ID: string;\n\n  /// Cartesian X coordinate of the OBSERVER location in chosen reference frame\n  OBSERVER_X: double;\n\n  /// Cartesian Y coordinate of the OBSERVER location in chosen reference frame \n  OBSERVER_Y: double;\n\n  /// Cartesian Z coordinate of the OBSERVER location in chosen reference frame \n  OBSERVER_Z: double;\n\n  /// Cartesian X coordinate of the OBSERVER velocity in chosen reference frame\n  OBSERVER_VX: double;\n\n  /// Cartesian Y coordinate of the OBSERVER velocity in chosen reference frame \n  OBSERVER_VY: double;\n\n  /// Cartesian Z coordinate of the OBSERVER velocity in chosen reference frame \n  OBSERVER_VZ: double;\n  \n  /// Reference frame used for OBSERVER location Cartesian coordinates (e.g., ECEF, ECI)\n  OBSERVER_POSITION_REFERENCE_FRAME: OBSERVERLocationReferenceFrame;\n\n  /// Reference frame used for obs location Cartesian coordinates (e.g., ECEF, ECI)\n  OBS_REFERENCE_FRAME: OBSERVERLocationReferenceFrame;\n\n  /// Epoch or observation time -  CCSDS 503.0-B-1\n  EPOCH: string;\n\n  /// TDM version number -  CCSDS 503.0-B-1, Page D-9\n  CCSDS_TDM_VERS: string;\n\n  /// Comments regarding TDM -  various sections, e.g., Page D-9\n  COMMENT: [string];\n\n  /// Date of TDM creation -  CCSDS 503.0-B-1, Page D-9\n  CREATION_DATE: string;\n\n  /// Originator of the TDM -  CCSDS 503.0-B-1, Page D-9\n  ORIGINATOR: string;\n\n  /// Start of metadata section -  CCSDS 503.0-B-1, Page D-9\n  META_START: string;\n\n  /// Time system used -  CCSDS 503.0-B-1, Page D-9\n  TIME_SYSTEM: string;\n\n  /// Start time of the data -  CCSDS 503.0-B-1, Page D-9\n  START_TIME: string;\n\n  /// Stop time of the data -  CCSDS 503.0-B-1, Page D-9\n  STOP_TIME: string;\n\n  /// First participant in the TDM -  CCSDS 503.0-B-1, Page D-9\n  PARTICIPANT_1: string;\n\n  /// Second participant in the TDM -  CCSDS 503.0-B-1, Page D-9\n  PARTICIPANT_2: string;\n\n  /// Third participant in the TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9\n  PARTICIPANT_3: string;\n\n  /// Mode of TDM -  CCSDS 503.0-B-1, Page D-9\n  MODE: string;\n\n  /// First path in TDM -  CCSDS 503.0-B-1, Page D-9\n  PATH_1: ushort;\n\n  /// Second path in TDM (if applicable) -  CCSDS 503.0-B-1, Page D-9\n  PATH_2: ushort;\n\n  /// Transmit band -  CCSDS 503.0-B-1, Page D-9\n  TRANSMIT_BAND: string;\n\n  /// Receive band -  CCSDS 503.0-B-1, Page D-9\n  RECEIVE_BAND: string;\n\n  /// Integration interval -  CCSDS 503.0-B-1, Page D-9\n  INTEGRATION_INTERVAL: float;\n\n  /// Integration reference -  CCSDS 503.0-B-1, Page D-9\n  INTEGRATION_REF: string;\n\n  /// Receive delay for second participant -  CCSDS 503.0-B-1, Page D-9\n  RECEIVE_DELAY_2: double;\n\n  /// Receive delay for third participant -  CCSDS 503.0-B-1, Page D-9\n  RECEIVE_DELAY_3: double;\n\n  /// Data quality -  CCSDS 503.0-B-1, Page D-9\n  DATA_QUALITY: string;\n\n  /// End of metadata section -  CCSDS 503.0-B-1, Page D-9\n  META_STOP: string;\n\n  /// Start of data section -  CCSDS 503.0-B-1, Page D-9\n  DATA_START: string;\n\n  /// Transmit frequency for first participant -  CCSDS 503.0-B-1, Page D-9\n  TRANSMIT_FREQ_1: double;\n\n  /// Receive frequency -  CCSDS 503.0-B-1, Page D-9\n  RECEIVE_FREQ: [double];\n\n  /// End of data section -  CCSDS 503.0-B-1, Page D-9\n  DATA_STOP: string;\n\n  /// Additional properties as required by the specific application of the TDM...\n  /// Reference for time tagging -  CCSDS 503.0-B-1, Page D-10\n  TIMETAG_REF: string;\n\n  /// Type of angle data -  CCSDS 503.0-B-1, Page D-12\n  /// Can be AZEL, RADEC, XEYN, XSYE, or another value with provided ICD\n  ANGLE_TYPE: string;\n\n  /// First angle value -  CCSDS 503.0-B-1, Page D-12\n  ANGLE_1: [float];\n\n  /// Second angle value -  CCSDS 503.0-B-1, Page D-12\n  ANGLE_2: [float];\n\n  /// Uncertainty of first angle -  CCSDS 503.0-B-1\n  ANGLE_UNCERTAINTY_1: float;\n\n  /// Uncertainty of second angle -  CCSDS 503.0-B-1\n  ANGLE_UNCERTAINTY_2: float;\n\n  /// Rate of change of range -  CCSDS 503.0-B-1\n  RANGE_RATE: double;\n\n  /// Uncertainty in range -  CCSDS 503.0-B-1\n  RANGE_UNCERTAINTY: double;\n\n  /// Mode of range data -  CCSDS 503.0-B-1, Page D-10\n  RANGE_MODE: string;\n\n  /// Modulus value for range data -  CCSDS 503.0-B-1, Page D-10\n  RANGE_MODULUS: double;\n\n  /// First correction angle -  CCSDS 503.0-B-1, Page D-12\n  CORRECTION_ANGLE_1: float;\n\n  /// Second correction angle -  CCSDS 503.0-B-1, Page D-12\n  CORRECTION_ANGLE_2: float;\n\n  /// Indicator of corrections applied -  CCSDS 503.0-B-1, Page D-12\n  CORRECTIONS_APPLIED: string;\n\n  /// Dry component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14\n  TROPO_DRY: [double];\n\n  /// Wet component of tropospheric delay -  CCSDS 503.0-B-1, Page D-14\n  TROPO_WET: [double];\n\n  /// Slant total electron content -  CCSDS 503.0-B-1, Page D-13\n  STEC: [double];\n\n  /// Atmospheric pressure -  CCSDS 503.0-B-1, Page D-14\n  PRESSURE: [double];\n\n  /// Relative humidity -  CCSDS 503.0-B-1, Page D-14\n  RHUMIDITY: [double];\n\n  /// Ambient temperature -  CCSDS 503.0-B-1, Page D-14\n  TEMPERATURE: [double];\n\n  /// Clock bias values -  CCSDS 503.0-B-1, Page D-15\n  CLOCK_BIAS: [double];\n\n  /// Clock drift values -  CCSDS 503.0-B-1, Page D-15\n  CLOCK_DRIFT: [double];\n}\n\n/// Collection of TDM records\n\nroot_type TDM;\nfile_identifier \"$TDM\";\n",
            "files": [
                "./dist/TDM/TDM.php.tar.gz",
                "./dist/TDM/TDM.json.tar.gz",
                "./dist/TDM/TDM.py.tar.gz",
                "./dist/TDM/TDM.java.tar.gz",
                "./dist/TDM/TDM.rs.tar.gz",
                "./dist/TDM/TDM.lob.tar.gz",
                "./dist/TDM/TDM.ts.tar.gz",
                "./dist/TDM/TDM.js.tar.gz",
                "./dist/TDM/TDM.dart.tar.gz",
                "./dist/TDM/TDM.kt.tar.gz",
                "./dist/TDM/TDM.cs.tar.gz",
                "./dist/TDM/TDM.cpp.tar.gz",
                "./dist/TDM/TDM.sw.tar.gz",
                "./dist/TDM/TDM.go.tar.gz"
            ]
        },
        "IDM": {
            "IDL": "/// Different types of polarization in EMT\nenum PolarizationType: byte {\n  linear,\n  circular,\n  elliptical,\n  unpolarized\n}\n\n/// Simple polarization types\nenum SimplePolarization: byte {\n  vertical,\n  horizontal,\n  leftHandCircular,\n  rightHandCircular\n}\n\n/// Frequency range with lower and upper limits\ntable FrequencyRange {\n  /// Lower frequency in MHz\n  LOWER: double;\n  /// Upper frequency in MHz\n  UPPER: double;\n}\n\n/// Stokes parameters, representing different aspects of polarization\ntable StokesParameters {\n  /// Intensity\n  I: double;\n  /// Linear polarization\n  Q: double;\n  /// Another linear polarization, orthogonal to Q\n  U: double;\n  /// Circular polarization\n  V: double;\n}\n\n/// Table representing a frequency band with a name and frequency range\ntable Band {\n  /// Name of the band\n  NAME: string;\n  /// Frequency range of the band\n  FREQUENCY_RANGE: FrequencyRange;\n}\n\n/// Enum for the mode of data (real, simulated, synthetic)\nenum DataMode: byte {\n  REAL,\n  SIMULATED,\n  SYNTHETIC\n}\n\nenum DeviceType: byte {\n  \n  // Basic and General Sensors\n  \n  /// Basic or undefined sensor type\n  UNKNOWN,\n  /// General optical sensors\n  OPTICAL,\n\n  // Electromagnetic Spectrum Sensors\n\n  /// Detects infrared radiation\n  INFRARED_SENSOR,\n  /// Sensitive to ultraviolet light\n  ULTRAVIOLET_SENSOR,\n  /// For X-ray detection\n  X_RAY_SENSOR,\n  /// For gamma-ray detection\n  GAMMA_RAY_SENSOR,\n\n  // Radar and Radio Telescopes\n\n  /// Basic radar systems\n  RADAR,\n  /// Advanced radar with phased array technology\n  PHASED_ARRAY_RADAR,\n  /// For high-resolution imaging\n  SYNTHETIC_APERTURE_RADAR,\n  /// For astronomical observations using bistatic setup\n  BISTATIC_RADIO_TELESCOPE,\n  /// For radio astronomy\n  RADIO_TELESCOPE,\n\n  // Environmental and Atmospheric Sensors\n\n  /// For atmospheric studies\n  ATMOSPHERIC_SENSOR,\n  /// For observing space weather phenomena\n  SPACE_WEATHER_SENSOR,\n  /// General environmental monitoring\n  ENVIRONMENTAL_SENSOR,\n\n  // Specialized Scientific Sensors\n\n  /// For measuring seismic activities\n  SEISMIC_SENSOR,\n  /// For gravity measurements\n  GRAVIMETRIC_SENSOR,\n  /// For magnetic field detection\n  MAGNETIC_SENSOR,\n  /// For electromagnetic field analysis\n  ELECTROMAGNETIC_SENSOR,\n  /// For temperature and heat detection\n  THERMAL_SENSOR,\n  /// For detecting chemicals and substances\n  CHEMICAL_SENSOR,\n  /// For biological research and detection\n  BIOLOGICAL_SENSOR,\n  /// For detecting ionizing radiation\n  RADIATION_SENSOR,\n  /// For detecting subatomic particles\n  PARTICLE_DETECTOR,\n\n  // Advanced Optical and Imaging Sensors\n\n  /// Light Detection and Ranging\n  LIDAR,\n  /// Sound Navigation and Ranging\n  SONAR,\n  /// General telescopes for astronomical observations\n  TELESCOPE,\n  /// For spectral analysis\n  SPECTROSCOPIC_SENSOR,\n  /// For measuring light intensity\n  PHOTOMETRIC_SENSOR,\n  /// For analyzing polarization of light\n  POLARIMETRIC_SENSOR,\n  /// For detailed imaging using interference\n  INTERFEROMETRIC_SENSOR,\n  /// Capturing image data at multiple wavelengths\n  MULTISPECTRAL_SENSOR,\n  /// Advanced imaging across many spectral bands\n  HYPERSPECTRAL_SENSOR,\n\n  // Positioning and Tracking Sensors\n\n  /// For Global Positioning System reception\n  GPS_RECEIVER,\n\n  // Communication Devices\n\n  /// Standard radio communication device\n  RADIO_COMMUNICATIONS,\n  /// Advanced laser communication system\n  LASER_COMMUNICATIONS,\n  /// Satellite communication system\n  SATELLITE_COMMUNICATIONS,\n\n  // Specialized Scientific Instruments\n\n  /// Device for laser-based experiments and measurements\n  LASER_INSTRUMENT,\n  /// Radio frequency analysis and measurement device\n  RF_ANALYZER,\n  /// Device for ionospheric research\n  IONOSPHERIC_SENSOR,\n\n  // Optical Devices\n\n  /// Device for laser-based imaging\n  LASER_IMAGING,\n  /// Advanced optical telescope\n  OPTICAL_TELESCOPE,\n  /// Device for high-resolution optical observations\n  HIGH_RESOLUTION_OPTICAL,\n\n  // Radio and Microwave Devices\n\n  RADIO,\n  /// Microwave communication device\n  MICROWAVE_TRANSMITTER,\n  /// Device for radio frequency monitoring\n  RF_MONITOR,\n  /// High-frequency radio communication device\n  HF_RADIO_COMMUNICATIONS,\n}\n\n/// Integrated Device Message\ntable IDM {\n  /// Unique identifier for the EMT\n  ID: string;\n  /// Name of the EMT\n  NAME: string;\n  /// Mode of the data (real, simulated, synthetic)\n  DATA_MODE: DataMode;\n  /// Uplink frequency range\n  UPLINK: FrequencyRange;\n  /// Downlink frequency range\n  DOWNLINK: FrequencyRange;\n  /// Beacon frequency range\n  BEACON: FrequencyRange;\n  /// Bands associated with the EMT\n  BAND: [Band];\n  /// Type of polarization used\n  POLARIZATION_TYPE: PolarizationType;\n  /// Simple polarization configuration\n  SIMPLE_POLARIZATION: SimplePolarization;\n  /// Stokes parameters for polarization characterization\n  STOKES_PARAMETERS: StokesParameters;\n  /// Power required in Watts\n  POWER_REQUIRED: double;\n  /// Type of power (eg. AC or DC)\n  POWER_TYPE: string;\n  /// Indicates if the EMT can transmit\n  TRANSMIT: bool;\n  /// Indicates if the EMT can receive\n  RECEIVE: bool;\n  /// Type of the sensor\n  SENSOR_TYPE: DeviceType;\n  /// Source of the data\n  SOURCE: string;\n  /// Timestamp of the last observation\n  LAST_OB_TIME: string;\n  /// Lower left elevation limit\n  LOWER_LEFT_ELEVATION_LIMIT: double;\n  /// Upper left azimuth limit\n  UPPER_LEFT_AZIMUTH_LIMIT: double;\n  /// Lower right elevation limit\n  LOWER_RIGHT_ELEVATION_LIMIT: double;\n  /// Lower left azimuth limit\n  LOWER_LEFT_AZIMUTH_LIMIT: double;\n  /// Upper right elevation limit\n  UPPER_RIGHT_ELEVATION_LIMIT: double;\n  /// Upper right azimuth limit\n  UPPER_RIGHT_AZIMUTH_LIMIT: double;\n  /// Lower right azimuth limit\n  LOWER_RIGHT_AZIMUTH_LIMIT: double;\n  /// Upper left elevation limit\n  UPPER_LEFT_ELEVATION_LIMIT: double;\n  /// Right geostationary belt limit\n  RIGHT_GEO_BELT_LIMIT: double;\n  /// Left geostationary belt limit\n  LEFT_GEO_BELT_LIMIT: double;\n  /// Magnitude limit of the sensor\n  MAGNITUDE_LIMIT: double;\n  /// Indicates if the site is taskable\n  TASKABLE: bool;\n}\n\n/// Collection of IDM records\n\nroot_type IDM;\nfile_identifier \"$IDM\";\n",
            "files": [
                "./dist/IDM/IDM.php.tar.gz",
                "./dist/IDM/IDM.json.tar.gz",
                "./dist/IDM/IDM.py.tar.gz",
                "./dist/IDM/IDM.java.tar.gz",
                "./dist/IDM/IDM.rs.tar.gz",
                "./dist/IDM/IDM.lob.tar.gz",
                "./dist/IDM/IDM.ts.tar.gz",
                "./dist/IDM/IDM.js.tar.gz",
                "./dist/IDM/IDM.dart.tar.gz",
                "./dist/IDM/IDM.kt.tar.gz",
                "./dist/IDM/IDM.cs.tar.gz",
                "./dist/IDM/IDM.cpp.tar.gz",
                "./dist/IDM/IDM.sw.tar.gz",
                "./dist/IDM/IDM.go.tar.gz"
            ]
        },
        "ROC": {
            "IDL": "/// Rocket Configuration\ntable ROC {\n  /// Rocket Name\n  NAME: string;\n\n  /// Rocket Family\n  FAMILY: string;\n\n  /// Rocket Variant\n  VARIANT: string;\n\n  /// Stages in the Rocket\n  STAGES: [STAGE];\n\n  /// Sustainers in the Rocket\n  SUSTAINERS: [SUSTAINER];\n}\n\n/// Enumeration of Engine Types\nenum ENGINE_TYPE: byte {\n  LIQUID,\n  SOLID,\n  HYBRID,\n  ION,\n  NUCLEAR_THERMAL,\n  OTHER\n}\n\n/// Stage Details\ntable STAGE {\n  /// Stage Number\n  STAGE_NUMBER: int;\n\n  /// Engines Used in This Stage\n  ENGINES: [ENGINE];\n\n  /// Fuel Type Used in This Stage\n  FUEL_TYPE: string;\n\n  /// Thrust Produced by This Stage (in Newtons)\n  THRUST: double;\n\n  /// Duration of the Burn (in Seconds)\n  BURN_DURATION: double;\n}\n\n/// Sustainer Details\ntable SUSTAINER {\n  /// Name of the Sustainer\n  SUSTAINER_NAME: string;\n\n  /// Thrust Produced by the Sustainer (in Newtons)\n  THRUST: double;\n\n  /// Duration of the Burn (in Seconds)\n  BURN_DURATION: double;\n}\n\n/// Engine Details\ntable ENGINE {\n  /// Engine Name\n  ENGINE_NAME: string;\n\n  /// Type of Engine\n  TYPE: ENGINE_TYPE;\n\n  /// Thrust Produced by the Engine (in Newtons)\n  THRUST: double;\n}\n\n/// Collection of Rocket Configurations\n\nroot_type ROC;\nfile_identifier \"$ROC\";\n",
            "files": [
                "./dist/ROC/ROC.php.tar.gz",
                "./dist/ROC/ROC.json.tar.gz",
                "./dist/ROC/ROC.py.tar.gz",
                "./dist/ROC/ROC.java.tar.gz",
                "./dist/ROC/ROC.rs.tar.gz",
                "./dist/ROC/ROC.lob.tar.gz",
                "./dist/ROC/ROC.ts.tar.gz",
                "./dist/ROC/ROC.js.tar.gz",
                "./dist/ROC/ROC.dart.tar.gz",
                "./dist/ROC/ROC.kt.tar.gz",
                "./dist/ROC/ROC.cs.tar.gz",
                "./dist/ROC/ROC.cpp.tar.gz",
                "./dist/ROC/ROC.sw.tar.gz",
                "./dist/ROC/ROC.go.tar.gz"
            ]
        },
        "BOV": {
            "IDL": "/// Burn Out Vector Message\ntable BOV {\n  // EFG Coordinates\n  E_COORDINATE: double; // 11 significant figures\n  F_COORDINATE: double; // 11 significant figures\n  G_COORDINATE: double; // 11 significant figures\n\n  // Velocity in EFG Coordinates\n  E_DOT: double; // 9 significant figures\n  F_DOT: double; // 9 significant figures\n  G_DOT: double; // 9 significant figures\n\n  // Epoch Time (UTC)\n  EPOCH_TIME: string; // Formatted as \"YYYY-MM-DD HH:MM:SS.SSS\"\n\n  // Time from Launch in Seconds\n  TIME_FROM_LAUNCH: double; // Seconds with appropriate precision\n}\n\nroot_type BOV;\nfile_identifier \"$BOV\";\n",
            "files": [
                "./dist/BOV/BOV.php.tar.gz",
                "./dist/BOV/BOV.json.tar.gz",
                "./dist/BOV/BOV.py.tar.gz",
                "./dist/BOV/BOV.java.tar.gz",
                "./dist/BOV/BOV.rs.tar.gz",
                "./dist/BOV/BOV.lob.tar.gz",
                "./dist/BOV/BOV.ts.tar.gz",
                "./dist/BOV/BOV.js.tar.gz",
                "./dist/BOV/BOV.dart.tar.gz",
                "./dist/BOV/BOV.kt.tar.gz",
                "./dist/BOV/BOV.cs.tar.gz",
                "./dist/BOV/BOV.cpp.tar.gz",
                "./dist/BOV/BOV.sw.tar.gz",
                "./dist/BOV/BOV.go.tar.gz"
            ]
        },
        "EOP": {
            "IDL": "enum DataType: byte {\n  OBSERVED = 0,\n  PREDICTED = 1\n}\n\n/// Earth Orientation Parameters\ntable EOP {\n  ///  Date in ISO 8601 format, e.g., \"2018-01-01T00:00:00Z\"\n  DATE: string;\n\n  ///  Modified Julian Date in UTC, e.g., 58119\n  MJD: uint;\n\n  ///  x component of Pole Wander in radians, e.g., 2.872908911518888E-7\n  X_POLE_WANDER_RADIANS: float;\n\n  ///  y component of Pole Wander in radians, e.g., 1.2003259523750447E-6\n  Y_POLE_WANDER_RADIANS: float;\n\n  ///  x component of Celestial Pole Offset in radians, e.g., 5.720801437092525E-10\n  X_CELESTIAL_POLE_OFFSET_RADIANS: float;\n\n  ///  y component of Celestial Pole Offset in radians, e.g., -8.484239419416879E-10\n  Y_CELESTIAL_POLE_OFFSET_RADIANS: float;\n\n  ///  UT1 minus UTC in seconds, e.g., 0.2163567\n  UT1_MINUS_UTC_SECONDS: float;\n\n  ///  TAI minus UTC in seconds, e.g., 37\n  TAI_MINUS_UTC_SECONDS: ushort;\n\n  ///  Correction to Length of Day in seconds, e.g., 8.094E-4\n  LENGTH_OF_DAY_CORRECTION_SECONDS: float;\n   \n  ///  Data type (O = Observed, P = Predicted)\n  DATA_TYPE: DataType;\n}\n\n/// Collection of EOP records\n\nroot_type EOP;\nfile_identifier \"$EOP\";",
            "files": [
                "./dist/EOP/EOP.php.tar.gz",
                "./dist/EOP/EOP.json.tar.gz",
                "./dist/EOP/EOP.py.tar.gz",
                "./dist/EOP/EOP.java.tar.gz",
                "./dist/EOP/EOP.rs.tar.gz",
                "./dist/EOP/EOP.lob.tar.gz",
                "./dist/EOP/EOP.ts.tar.gz",
                "./dist/EOP/EOP.js.tar.gz",
                "./dist/EOP/EOP.dart.tar.gz",
                "./dist/EOP/EOP.kt.tar.gz",
                "./dist/EOP/EOP.cs.tar.gz",
                "./dist/EOP/EOP.cpp.tar.gz",
                "./dist/EOP/EOP.sw.tar.gz",
                "./dist/EOP/EOP.go.tar.gz"
            ]
        },
        "EOO": {
            "IDL": "\n/// Electro-Optical Observation\ntable EOO {\n  \n  /// Unique identifier for Earth Observation Observation\n  EOBSERVATION_ID: string;\n\n  /// Classification marking of the data\n  CLASSIFICATION: string;\n\n  /// Observation time in UTC\n  OB_TIME: string;\n\n  /// Quality of the correlation\n  CORR_QUALITY: float;\n\n  /// Identifier for the satellite on orbit\n  ID_ON_ORBIT: string;\n\n  /// Identifier for the sensor\n  SENSOR_ID: string;\n\n  /// Method of data collection\n  COLLECT_METHOD: string;\n\n  /// NORAD catalog identifier for the satellite\n  NORAD_CAT_ID: int;\n\n  /// Identifier for the task\n  TASK_ID: string;\n\n  /// Identifier for the transaction\n  TRANSACTION_ID: string;\n\n  /// Identifier for the track\n  TRACK_ID: string;\n\n  /// Position of the observation\n  OB_POSITION: string;\n\n  /// Original object identifier\n  ORIG_OBJECT_ID: string;\n\n  /// Original sensor identifier\n  ORIG_SENSOR_ID: string;\n\n  /// Universal Coordinated Time flag\n  UCT: bool;\n\n  /// Azimuth angle\n  AZIMUTH: float;\n\n  /// Uncertainty in azimuth angle\n  AZIMUTH_UNC: float;\n  \n  /// Bias in azimuth angle\n  AZIMUTH_BIAS: float;\n\n  /// Rate of change in azimuth\n  AZIMUTH_RATE: float;\n\n  /// Elevation angle\n  ELEVATION: float;\n\n  /// Uncertainty in elevation angle\n  ELEVATION_UNC: float;\n\n  /// Bias in elevation angle\n  ELEVATION_BIAS: float;\n\n  /// Rate of change in elevation\n  ELEVATION_RATE: float;\n\n  /// Range to the target\n  RANGE: float;\n\n  /// Uncertainty in range\n  RANGE_UNC: float;\n\n  /// Bias in range measurement\n  RANGE_BIAS: float;\n\n  /// Rate of change in range\n  RANGE_RATE: float;\n\n  /// Uncertainty in range rate\n  RANGE_RATE_UNC: float;\n\n  /// Right ascension\n  RA: float;\n\n  /// Rate of change in right ascension\n  RA_RATE: float;\n\n  /// Uncertainty in right ascension\n  RA_UNC: float;\n\n  /// Bias in right ascension\n  RA_BIAS: float;\n\n  /// Declination angle\n  DECLINATION: float;\n\n  /// Rate of change in declination\n  DECLINATION_RATE: float;\n\n  /// Uncertainty in declination\n  DECLINATION_UNC: float;\n\n  /// Bias in declination\n  DECLINATION_BIAS: float;\n\n  /// X-component of line-of-sight vector\n  LOSX: float;\n\n  /// Y-component of line-of-sight vector\n  LOSY: float;\n\n  /// Z-component of line-of-sight vector\n  LOSZ: float;\n\n  /// Uncertainty in line-of-sight vector\n  LOS_UNC: float;\n\n  /// X-component of line-of-sight velocity\n  LOSXVEL: float;\n\n  /// Y-component of line-of-sight velocity\n  LOSYVEL: float;\n\n  /// Z-component of line-of-sight velocity\n  LOSZVEL: float;\n\n  /// Latitude of sensor\n  SENLAT: float;\n\n  /// Longitude of sensor\n  SENLON: float;\n\n  /// Altitude of sensor\n  SENALT: float;\n\n  /// X-coordinate of sensor position\n  SENX: float;\n\n  /// Y-coordinate of sensor position\n  SENY: float;\n\n  /// Z-coordinate of sensor position\n  SENZ: float;\n\n  /// Number of fields of view\n  FOV_COUNT: int;\n\n  /// Duration of the exposure\n  EXP_DURATION: float;\n\n  /// Zero-point displacement\n  ZEROPTD: float;\n\n  /// Net object signal\n  NET_OBJ_SIG: float;\n\n  /// Uncertainty in net object signal\n  NET_OBJ_SIG_UNC: float;\n\n  /// Magnitude of the observation\n  MAG: float;\n\n  /// Uncertainty in magnitude\n  MAG_UNC: float;\n\n  /// Normalized range for magnitude\n  MAG_NORM_RANGE: float;\n\n  /// Geocentric latitude\n  GEOLAT: float;\n\n  /// Geocentric longitude\n  GEOLON: float;\n\n  /// Geocentric altitude\n  GEOALT: float;\n\n  /// Geocentric range\n  GEORANGE: float;\n\n  /// Sky background level\n  SKY_BKGRND: float;\n\n  /// Primary extinction\n  PRIMARY_EXTINCTION: float;\n\n  /// Uncertainty in primary extinction\n  PRIMARY_EXTINCTION_UNC: float;\n\n  /// Solar phase angle\n  SOLAR_PHASE_ANGLE: float;\n\n  /// Solar equatorial phase angle\n  SOLAR_EQ_PHASE_ANGLE: float;\n\n  /// Solar declination angle\n  SOLAR_DEC_ANGLE: float;\n\n  /// Shutter delay\n  SHUTTER_DELAY: float;\n\n  /// Timing bias\n  TIMING_BIAS: float;\n\n  /// URI of the raw data file\n  RAW_FILE_URI: string;\n\n  /// Intensity of the observation\n  INTENSITY: float;\n\n  /// Background intensity\n  BG_INTENSITY: float;\n\n  /// Descriptor of the provided data\n  DESCRIPTOR: string;\n\n  /// Source of the data\n  SOURCE: string;\n\n  /// Origin of the data\n  ORIGIN: string;\n\n  /// Mode of the data\n  DATA_MODE: string;\n\n  /// Creation time of the record\n  CREATED_AT: string;\n\n  /// User who created the record\n  CREATED_BY: string;\n\n  /// Reference frame of the observation\n  REFERENCE_FRAME: string;\n\n  /// Reference frame of the sensor\n  SEN_REFERENCE_FRAME: string;\n\n  /// Flag for umbra (total eclipse)\n  UMBRA: bool;\n\n  /// Flag for penumbra (partial eclipse)\n  PENUMBRA: bool;\n\n  /// Original network identifier\n  ORIG_NETWORK: string;\n\n  /// Data link source\n  SOURCE_DL: string;\n\n  /// Type of the observation\n  TYPE: string;\n}\n\n\nroot_type EOO;\nfile_identifier \"$EOO\";",
            "files": [
                "./dist/EOO/EOO.php.tar.gz",
                "./dist/EOO/EOO.json.tar.gz",
                "./dist/EOO/EOO.py.tar.gz",
                "./dist/EOO/EOO.java.tar.gz",
                "./dist/EOO/EOO.rs.tar.gz",
                "./dist/EOO/EOO.lob.tar.gz",
                "./dist/EOO/EOO.ts.tar.gz",
                "./dist/EOO/EOO.js.tar.gz",
                "./dist/EOO/EOO.dart.tar.gz",
                "./dist/EOO/EOO.kt.tar.gz",
                "./dist/EOO/EOO.cs.tar.gz",
                "./dist/EOO/EOO.cpp.tar.gz",
                "./dist/EOO/EOO.sw.tar.gz",
                "./dist/EOO/EOO.go.tar.gz"
            ]
        },
        "EME": {
            "IDL": "/// Encrypted Message Envelope\ntable EME {\n  /// Encrypted data blob, containing the ciphertext of the original plaintext message.\n  ENCRYPTED_BLOB: [ubyte];\n\n  /// Temporary public key used for the encryption session, contributing to the derivation of the shared secret.\n  EPHEMERAL_PUBLIC_KEY: string;\n\n  /// Message Authentication Code to verify the integrity and authenticity of the encrypted message.\n  MAC: string;\n\n  /// Unique value used to ensure that the same plaintext produces a different ciphertext for each encryption.\n  NONCE: string;\n\n  /// Additional authentication tag used in some encryption schemes for integrity and authenticity verification.\n  TAG: string;\n\n  /// Initialization vector used to introduce randomness in the encryption process, enhancing security.\n  IV: string;\n\n  /// Identifier for the public key used, aiding in recipient key management and message decryption.\n  PUBLIC_KEY_IDENTIFIER: string;\n\n  /// Specifies the set of cryptographic algorithms used in the encryption process.\n  CIPHER_SUITE: string;\n\n  /// Parameters for the Key Derivation Function, guiding the process of deriving keys from the shared secret.\n  KDF_PARAMETERS: string;\n\n  /// Parameters defining specific settings for the encryption algorithm, such as block size or operation mode.\n  ENCRYPTION_ALGORITHM_PARAMETERS: string;\n}\n\nroot_type EME;\nfile_identifier \"$EME\";",
            "files": [
                "./dist/EME/EME.php.tar.gz",
                "./dist/EME/EME.json.tar.gz",
                "./dist/EME/EME.py.tar.gz",
                "./dist/EME/EME.java.tar.gz",
                "./dist/EME/EME.rs.tar.gz",
                "./dist/EME/EME.lob.tar.gz",
                "./dist/EME/EME.ts.tar.gz",
                "./dist/EME/EME.js.tar.gz",
                "./dist/EME/EME.dart.tar.gz",
                "./dist/EME/EME.kt.tar.gz",
                "./dist/EME/EME.cs.tar.gz",
                "./dist/EME/EME.cpp.tar.gz",
                "./dist/EME/EME.sw.tar.gz",
                "./dist/EME/EME.go.tar.gz"
            ]
        },
        "SCHEMA_MANIFEST": {
            "IDL": "/// Schema Standard Definition\ntable SCHEMA_STANDARD {\n    /// Unique identifier for the standard\n    key: string;\n\n    /// IDL\n    idl: string;\n\n    /// List Of File Paths\n    files: [string];\n}\n\n/// Schema Manifest\ntable SCHEMA_MANIFEST {\n    /// Version of Space Data Standards\n    version: string;\n\n    /// Standards Dictionary\n    RECORDS: [SCHEMA_STANDARD];\n}\n\n/// Declaring the root type\nroot_type SCHEMA_MANIFEST;\nfile_identifier \"$SCM\";",
            "files": [
                "./dist/SCHEMA_MANIFEST/SCHEMA_MANIFEST.php.tar.gz",
                "./dist/SCHEMA_MANIFEST/SCHEMA_MANIFEST.json.tar.gz",
                "./dist/SCHEMA_MANIFEST/SCHEMA_MANIFEST.py.tar.gz",
                "./dist/SCHEMA_MANIFEST/SCHEMA_MANIFEST.java.tar.gz",
                "./dist/SCHEMA_MANIFEST/SCHEMA_MANIFEST.rs.tar.gz",
                "./dist/SCHEMA_MANIFEST/SCHEMA_MANIFEST.lob.tar.gz",
                "./dist/SCHEMA_MANIFEST/SCHEMA_MANIFEST.ts.tar.gz",
                "./dist/SCHEMA_MANIFEST/SCHEMA_MANIFEST.js.tar.gz",
                "./dist/SCHEMA_MANIFEST/SCHEMA_MANIFEST.dart.tar.gz",
                "./dist/SCHEMA_MANIFEST/SCHEMA_MANIFEST.kt.tar.gz",
                "./dist/SCHEMA_MANIFEST/SCHEMA_MANIFEST.cs.tar.gz",
                "./dist/SCHEMA_MANIFEST/SCHEMA_MANIFEST.cpp.tar.gz",
                "./dist/SCHEMA_MANIFEST/SCHEMA_MANIFEST.sw.tar.gz",
                "./dist/SCHEMA_MANIFEST/SCHEMA_MANIFEST.go.tar.gz"
            ]
        },
        "LDM": {
            "IDL": "include \"../SIT/main.fbs\";\ninclude \"../EPM/main.fbs\";\ninclude \"../CAT/main.fbs\";\ninclude \"../ROC/main.fbs\"; // For Rocket Configuration\ninclude \"../BOV/main.fbs\"; \n\n/// Launch Data Message\ntable LDM {\n  /// Launch Site Information\n  SITE: SIT;\n\n  /// Azimuth at Launch (in Degrees)\n  AZIMUTH: float;\n\n  /// References for Launch Data\n  REFERENCES: string;\n\n  /// Launching Agency Name\n  AGENCY_NAME: string;\n\n  /// Points of Contact for Launch\n  POINTS_OF_CONTACT: [EPM];\n\n  /// Operations Points of Contact for Launch\n  OPERATIONS_POINTS_OF_CONTACT: [EPM];\n\n  /// Net Launch Time (UTC Format)\n  NET: string;\n\n  /// Rocket Configuration Details\n  ROCKET_CONFIGURATION: ROC;\n\n  /// Mission Name\n  MISSION_NAME: string;\n\n  /// Description of the Mission\n  MISSION_DESCRIPTION: string;\n\n  /// Type of the Mission (e.g., Test Flight, Satellite Deployment)\n  MISSION_TYPE: string;\n\n  /// Target Orbit Type (e.g., LEO, GEO)\n  ORBIT_TYPE: string;\n\n  /// Weather and Environmental Conditions at Launch\n  WEATHER_CONDITIONS: string;\n\n  /// Launch Outcome and Status (e.g., Successful, Failed)\n  LAUNCH_STATUS: string;\n\n  /// Webcast URL for the Launch\n  WEBCAST_URL: string;\n\n  /// Media Links Related to the Launch\n  MEDIA_LINKS: [string];\n\n  /// Earliest Possible Launch Times\n  EARLIEST_LAUNCH_TIMES: [string];\n\n  /// Latest Possible Launch Times\n  LATEST_LAUNCH_TIMES: [string];\n\n  /// Launch Collision Avoidance Information\n  LCOLA_WINDOW_CLOSURES: [string];\n\n  /// Payload Information (Catalog Entities)\n  OBJECTS: [CAT];\n\n  /// Tracking and Collision Avoidance Requirements\n  TRACKING_REQUIREMENTS: [string];\n\n  /// Duration of Collision Avoidance Screen (in Seconds)\n  COLA_SCREEN_DURATION: string;\n\n  /// Probability of Collision Threshold (Percentage)\n  PROBABILITY_OF_COLLISION_THRESHOLD: string;\n\n  /// Number of Required Collision Avoidance Runs\n  COLA_RUNS_REQUIRED: string;\n\n  /// Points of Contact for Collision Avoidance\n  COLA_POINTS_OF_CONTACT: [EPM];\n\n  /// Orbital Parameters of the Launch\n  ORBITAL_PARAMETERS: [string];\n\n  /// Burn Out Vectors for the Launch\n  BURN_OUT_VECTORS: [BOV];\n}\n\n// Collection of Launch Data Messages\n\nroot_type LDM;\nfile_identifier \"$LDM\";\n",
            "files": [
                "./dist/LDM/LDM.php.tar.gz",
                "./dist/LDM/LDM.json.tar.gz",
                "./dist/LDM/LDM.py.tar.gz",
                "./dist/LDM/LDM.java.tar.gz",
                "./dist/LDM/LDM.rs.tar.gz",
                "./dist/LDM/LDM.lob.tar.gz",
                "./dist/LDM/LDM.ts.tar.gz",
                "./dist/LDM/LDM.js.tar.gz",
                "./dist/LDM/LDM.dart.tar.gz",
                "./dist/LDM/LDM.kt.tar.gz",
                "./dist/LDM/LDM.cs.tar.gz",
                "./dist/LDM/LDM.cpp.tar.gz",
                "./dist/LDM/LDM.sw.tar.gz",
                "./dist/LDM/LDM.go.tar.gz"
            ]
        },
        "PNM": {
            "IDL": "// Publish Notification Message\ntable PNM {\n  /// Multiformat Address\n  /// https://multiformats.io/multiaddr/\n  /// A universal address format for representing multiple network protocols. Examples include:\n  /// - /ip4/192.168.1.1/tcp/80 for an IPv4 address with TCP protocol\n  /// - /ip6zone/x/ip6/::1 for an IPv6 address with a zone\n  /// - /dns4/example.com for a domain name resolvable only to IPv4 addresses\n  /// - /ipfs/bafybeiccfclkdtucu6y4yc5cpr6y3yuinr67svmii46v5cfcrkp47ihehy/README.txt -IPFS address w/CID and path to `README.txt`.\n  MULTIFORMAT_ADDRESS: string;\n\n  /// Publish Time OF THE Publish Notification Message\n  PUBLISH_TIMESTAMP: string;\n\n  /// Concatenated Content Identifier (CID)\n  /// This field is a unique ID for distributed systems (CID).\n  /// The CID provides a unique identifier within distributed systems, as detailed at https://github.com/multiformats/cid. \n  CID: string;\n\n  /// File ID\n  /// This field is the file ID / Name\n  FID: string;\n\n  /// Digital Signature of the CID\n  /// This is the digital signature of the CID, signed using the specified cryptographic method.\n  SIGNATURE: string;\n\n  /// Timestamp Signature\n  /// Digital signature of the publish timestamp, using the specified cryptographic method for timestamp verification.\n  TIMESTAMP_SIGNATURE: string;\n\n  /// Type of Cryptographic Signature Used\n  /// Specifies the type of cryptographic signature used for the SIGNATURE field, indicating the specific blockchain technology, such as Ethereum or BTC.\n  SIGNATURE_TYPE: string;\n\n  /// Type of Cryptographic Signature Used for Timestamp\n  /// Specifies the type of cryptographic signature used for the TIMESTAMP_SIGNATURE field, indicating the specific blockchain technology, such as Ethereum or BTC.\n  TIMESTAMP_SIGNATURE_TYPE: string;\n}\n\nroot_type PNM;\nfile_identifier \"$PNM\";",
            "files": [
                "./dist/PNM/PNM.php.tar.gz",
                "./dist/PNM/PNM.json.tar.gz",
                "./dist/PNM/PNM.py.tar.gz",
                "./dist/PNM/PNM.java.tar.gz",
                "./dist/PNM/PNM.rs.tar.gz",
                "./dist/PNM/PNM.lob.tar.gz",
                "./dist/PNM/PNM.ts.tar.gz",
                "./dist/PNM/PNM.js.tar.gz",
                "./dist/PNM/PNM.dart.tar.gz",
                "./dist/PNM/PNM.kt.tar.gz",
                "./dist/PNM/PNM.cs.tar.gz",
                "./dist/PNM/PNM.cpp.tar.gz",
                "./dist/PNM/PNM.sw.tar.gz",
                "./dist/PNM/PNM.go.tar.gz"
            ]
        },
        "HYP": {
            "IDL": "enum ScoreType: byte {\n  OUTLIER = 0\n}\n\ntable Score {\n    NORAD_CAT_ID: string;\n    TYPE: ScoreType;\n    TAG: string;\n    SCORE: float;\n}\n\n/// Hypothesis Message\ntable HYP {\n    /// Space Objects Involved\n    CAT_IDS: [string];\n    /// Space Objects Involved\n    SIT_IDS: [string];\n    /// Name of the hypothesis\n    NAME: string;\n    /// Category of the hypothesis\n    CATEGORY: string;\n    /// Row indicators for the hypothesis matrix\n    ROW_INDICATORS: [string];\n    /// Column indicators for the hypothesis matrix\n    COL_INDICATORS: [string];\n    /// Matrix data as a boolean array in row major format; if overflow, adds additional rows\n    MATRIX: [bool];\n    /// Scores for objects\n    SCORE: [Score];\n    /// Analysis methodology used to form the hypothesis\n    ANALYSIS_METHOD: string;\n    // Refer to CCSDS Time Code Formats (CCSDS 301.0-B4, ANNEX B3.4)\n    EVENT_START_TIME: string;\n    // Refer to CCSDS Time Code Formats (CCSDS 301.0-B4, ANNEX B3.4)\n    EVENT_END_TIME: string;\n}\n\n/// Collection of HYP records\n\nroot_type HYP;\nfile_identifier \"$HYP\";",
            "files": [
                "./dist/HYP/HYP.php.tar.gz",
                "./dist/HYP/HYP.json.tar.gz",
                "./dist/HYP/HYP.py.tar.gz",
                "./dist/HYP/HYP.java.tar.gz",
                "./dist/HYP/HYP.rs.tar.gz",
                "./dist/HYP/HYP.lob.tar.gz",
                "./dist/HYP/HYP.ts.tar.gz",
                "./dist/HYP/HYP.js.tar.gz",
                "./dist/HYP/HYP.dart.tar.gz",
                "./dist/HYP/HYP.kt.tar.gz",
                "./dist/HYP/HYP.cs.tar.gz",
                "./dist/HYP/HYP.cpp.tar.gz",
                "./dist/HYP/HYP.sw.tar.gz",
                "./dist/HYP/HYP.go.tar.gz"
            ]
        },
        "CTR": {
            "IDL": "/// Country Identity Message\ntable CTR {\n  /// ISO 3166 Numeric code\n  ID: string;\n  \n  /// Country name\n  NAME: string;\n\n  /// GENC code\n  GENC_CODE: string;\n\n  /// ISO 3166 Alpha-2 code\n  ALPHA_2_CODE: string;\n\n  /// ISO 3166 Alpha-3 code\n  ALPHA_3_CODE: string;\n\n  /// Stanag code\n  STANAG_CODE: string;\n\n  /// Internet country code top-level domain (ccTLD)\n  INTERNET_CCTLD: string;\n\n  /// Additional comments\n  COMMENT: string;\n}\n\n\nroot_type CTR;\nfile_identifier \"$CTR\";\n",
            "files": [
                "./dist/CTR/CTR.php.tar.gz",
                "./dist/CTR/CTR.json.tar.gz",
                "./dist/CTR/CTR.py.tar.gz",
                "./dist/CTR/CTR.java.tar.gz",
                "./dist/CTR/CTR.rs.tar.gz",
                "./dist/CTR/CTR.lob.tar.gz",
                "./dist/CTR/CTR.ts.tar.gz",
                "./dist/CTR/CTR.js.tar.gz",
                "./dist/CTR/CTR.dart.tar.gz",
                "./dist/CTR/CTR.kt.tar.gz",
                "./dist/CTR/CTR.cs.tar.gz",
                "./dist/CTR/CTR.cpp.tar.gz",
                "./dist/CTR/CTR.sw.tar.gz",
                "./dist/CTR/CTR.go.tar.gz"
            ]
        },
        "CDM": {
            "IDL": "include \"../PNM/main.fbs\";\n\nenum referenceFrame : byte {\n  /// Earth Mean Equator and Equinox of J2000\n  EME2000,\n  /// Geocentric Celestial Reference Frame\n  GCRF,\n  /// International Terrestrial Reference Frame\n  ITRF\n}\n\nenum objectCenteredReferenceFrame : byte {\n  /// Radial, Transverse, Normal\n  RTN,\n  /// Transverse, Velocity, Normal\n  TVN\n}\n\nenum screeningVolumeShape : byte {\n  ELLIPSOID,\n  BOX\n}\n\nenum objectNumber : byte {\n  OBJECT1,\n  OBJECT2\n}\n\nenum objectType : byte {\n  PAYLOAD,\n  ROCKET_BODY,\n  DEBRIS,\n  UNKNOWN,\n  OTHER\n}\n\nenum covarianceMethod : byte {\n  CALCULATED,\n  DEFAULT\n}\n\nenum maneuverableType : byte {\n  YES,\n  NO,\n  NA\n}\n\ntable CDMObject {\n  /// A comment\n  COMMENT:string;\n  /// Object number\n  OBJECT:objectNumber;\n  /// Object designator\n  OBJECT_DESIGNATOR:string;\n  /// Catalog name\n  CATALOG_NAME:string;\n  /// Object name\n  OBJECT_NAME:string;\n  /// International designator\n  INTERNATIONAL_DESIGNATOR:string;\n  /// Object type\n  OBJECT_TYPE:objectType;\n  /// Operator contact position\n  OPERATOR_CONTACT_POSITION:string;\n  /// Operator organization\n  OPERATOR_ORGANIZATION:string;\n  /// Ephemeris name\n  EPHEMERIS_NAME:string;\n  /// Covariance method\n  COVARIANCE_METHOD:covarianceMethod;\n  /// Maneuverable type\n  MANEUVERABLE:maneuverableType;\n  /// Orbit center\n  ORBIT_CENTER:string;\n  /// Reference frame\n  REF_FRAME:referenceFrame;\n  /// Gravity model\n  GRAVITY_MODEL:string;\n  /// Atmospheric model\n  ATMOSPHERIC_MODEL:string;\n  /// N-body perturbations\n  N_BODY_PERTURBATIONS:string;\n  /// Solar radiation pressure\n  SOLAR_RAD_PRESSURE:bool;\n  /// Earth tides\n  EARTH_TIDES:bool;\n  /// Intrack thrust\n  INTRACK_THRUST:bool;\n  /// Time of last observation start\n  TIME_LASTOB_START:string;\n  /// Time of last observation end\n  TIME_LASTOB_END:string;\n  /// Recommended observation data span\n  RECOMMENDED_OD_SPAN:double;\n  /// Actual observation data span\n  ACTUAL_OD_SPAN:double;\n  /// Number of observations available\n  OBS_AVAILABLE:uint;\n  /// Number of observations used\n  OBS_USED:uint;\n  /// Number of tracks available\n  TRACKS_AVAILABLE:uint;\n  /// Number of tracks used\n  TRACKS_USED:uint;\n  /// Residuals accepted\n  RESIDUALS_ACCEPTED:double;\n  /// Weighted root mean square\n  WEIGHTED_RMS:double;\n  /// Area of the object\n  AREA_PC:double;\n  /// Area of the object drag\n  AREA_DRG:double;\n  /// Area of the object solar radiation pressure\n  AREA_SRP:double;\n  /// Mass of the object\n  MASS:double;\n  /// Object's area-to-mass ratio\n  CR_AREA_OVER_MASS:double;\n  /// Object's thrust acceleration\n  THRUST_ACCELERATION:double;\n  /// Object's solar flux\n  SEDR:double;\n  /// X-coordinate of the object's position in RTN coordinates\n  X:double;\n  /// Y-coordinate of the object's position in RTN\n  Y:double;\n  /// Z-coordinate of the object's position in RTN\n  Z:double;\n  /// X-coordinate of the object's position in RTN coordinates\n  X_DOT:double;\n  /// Y-coordinate of the object's position in RTN\n  Y_DOT:double;\n  /// Z-coordinate of the object's position in RTN\n  Z_DOT:double;\n  \n  // (Covariance Matrix 9\u00d79 Lower Triangular Form. All parameters of the 6\u00d76 position/velocity submatrix must be given)\n\n  /// Covariance Matrix component\n  CR_R:double;\n  /// Covariance Matrix component\n  CT_R:double;\n  /// Covariance Matrix component\n  CT_T:double;\n  /// Covariance Matrix component\n  CN_R:double;\n  /// Covariance Matrix component\n  CN_T:double;\n  /// Covariance Matrix component\n  CN_N:double;\n  /// Covariance Matrix component\n  CRDOT_R:double;\n  /// Covariance Matrix component\n  CRDOT_T:double;\n  /// Covariance Matrix component\n  CRDOT_N:double;\n  /// Covariance Matrix component\n  CRDOT_RDOT:double;\n  /// Covariance Matrix component\n  CTDOT_R:double;\n  /// Covariance Matrix component\n  CTDOT_T:double;\n  /// Covariance Matrix component\n  CTDOT_N:double;\n  /// Covariance Matrix component\n  CTDOT_RDOT:double;\n  /// Covariance Matrix component\n  CTDOT_TDOT:double;\n  /// Covariance Matrix component\n  CNDOT_R:double;\n  /// Covariance Matrix component\n  CNDOT_T:double;\n  /// Covariance Matrix component\n  CNDOT_N:double;\n  /// Covariance Matrix component\n  CNDOT_RDOT:double;\n  /// Covariance Matrix component\n  CNDOT_TDOT:double;\n  /// Covariance Matrix component\n  CNDOT_NDOT:double;\n  /// Covariance Matrix component\n  CDRG_R:double;\n  /// Covariance Matrix component\n  CDRG_T:double;\n  /// Covariance Matrix component\n  CDRG_N:double;\n  /// Covariance Matrix component\n  CDRG_RDOT:double;\n  /// Covariance Matrix component\n  CDRG_TDOT:double;\n  /// Covariance Matrix component\n  CDRG_NDOT:double;\n  /// Covariance Matrix component\n  CDRG_DRG:double;\n  /// Covariance Matrix component\n  CSRP_R:double;\n  /// Covariance Matrix component\n  CSRP_T:double;\n  /// Covariance Matrix component\n  CSRP_N:double;\n  /// Covariance Matrix component\n  CSRP_RDOT:double;\n  /// Covariance Matrix component\n  CSRP_TDOT:double;\n  /// Covariance Matrix component\n  CSRP_NDOT:double;\n  /// Covariance Matrix component\n  CSRP_DRG:double;\n  /// Covariance Matrix component\n  CSRP_SRP:double;\n  /// Covariance Matrix component\n  CTHR_R:double;\n  /// Covariance Matrix component\n  CTHR_T:double;\n  /// Covariance Matrix component\n  CTHR_N:double;\n  /// Covariance Matrix component\n  CTHR_RDOT:double;\n  /// Covariance Matrix component\n  CTHR_TDOT:double;\n  /// Covariance Matrix component\n  CTHR_NDOT:double;\n  /// Covariance Matrix component\n  CTHR_DRG:double;\n  /// Covariance Matrix component\n  CTHR_SRP:double;\n  /// Covariance Matrix component\n  CTHR_THR:double;\n}\n\n/// Conjunction Data Message\ntable CDM {\n  /// The version of the CCSDS CDM standard used\n  CCSDS_CDM_VERS:double;\n  /// The date the CDM message was created\n  CREATION_DATE:string;\n  /// The originator of the CDM message\n  ORIGINATOR:string;\n  /// The intended recipient of the CDM message\n  MESSAGE_FOR:string;\n  /// A unique identifier for the CDM message\n  MESSAGE_ID:string;\n  /// Time of closest approach\n  TCA:string;\n  /// The miss distance between the two objects\n  MISS_DISTANCE:double;\n  /// The relative speed between the two objects\n  RELATIVE_SPEED:double;\n  /// The relative position R component\n  RELATIVE_POSITION_R:double;\n  /// The relative position T component\n  RELATIVE_POSITION_T:double;\n  /// The relative position N component\n  RELATIVE_POSITION_N:double;\n  /// The relative velocity R component\n  RELATIVE_VELOCITY_R:double;\n  /// The relative velocity T component\n  RELATIVE_VELOCITY_T:double;\n  /// The relative velocity N component\n  RELATIVE_VELOCITY_N:double;\n  /// The start time of the screening period\n  START_SCREEN_PERIOD:string;\n  /// The end time of the screening period\n  STOP_SCREEN_PERIOD:string;\n  /// The reference frame for the screening volume\n  SCREEN_VOLUME_FRAME:objectCenteredReferenceFrame;\n  /// The shape of the screening volume\n  SCREEN_VOLUME_SHAPE:screeningVolumeShape;\n  /// The X dimension of the screening volume\n  SCREEN_VOLUME_X:double;\n  /// The Y dimension of the screening volume\n  SCREEN_VOLUME_Y:double;\n  /// The Z dimension of the screening volume\n  SCREEN_VOLUME_Z:double;\n  /// The time the objects entered the screening volume\n  SCREEN_ENTRY_TIME:string;\n  /// The time the objects exited the screening volume\n  SCREEN_EXIT_TIME:string;\n  /// The probability of collision between the two objects\n  COLLISION_PROBABILITY:double;\n  /// The method used to calculate the collision probability\n  COLLISION_PROBABILITY_METHOD:string;\n  /// The first object in the CDM message\n  OBJECT1:CDMObject;\n  /// The second object in the CDM message\n  OBJECT2:CDMObject;\n  /// Data Source for the positional information for Object 1\n  OBJECT1_DATASOURCE:PNM;\n  /// Data Source for the positional information for Object 2\n  OBJECT2_DATASOURCE:PNM;\n}\n\n\nroot_type CDM;\nfile_identifier \"$CDM\";\n",
            "files": [
                "./dist/CDM/CDM.php.tar.gz",
                "./dist/CDM/CDM.json.tar.gz",
                "./dist/CDM/CDM.py.tar.gz",
                "./dist/CDM/CDM.java.tar.gz",
                "./dist/CDM/CDM.rs.tar.gz",
                "./dist/CDM/CDM.lob.tar.gz",
                "./dist/CDM/CDM.ts.tar.gz",
                "./dist/CDM/CDM.js.tar.gz",
                "./dist/CDM/CDM.dart.tar.gz",
                "./dist/CDM/CDM.kt.tar.gz",
                "./dist/CDM/CDM.cs.tar.gz",
                "./dist/CDM/CDM.cpp.tar.gz",
                "./dist/CDM/CDM.sw.tar.gz",
                "./dist/CDM/CDM.go.tar.gz"
            ]
        },
        "SIT": {
            "IDL": "include \"../IDM/main.fbs\";\n\n/// Enum for the type of site\nenum SiteType: byte {\n  LAUNCH_SITE,\n  OBSERVATION_STATION,\n  HOBBYIST_OBSERVER,\n  RESEARCH_FACILITY,\n  SATELLITE_GROUND_STATION,\n  SPACEPORT,\n  MILITARY_BASE,\n  WEATHER_STATION,\n  ASTRONOMICAL_OBSERVATORY,\n  EDUCATIONAL_INSTITUTE,\n  COMMUNICATION_HUB,\n  POWER_PLANT,\n  INDUSTRIAL_COMPLEX,\n  TRANSPORTATION_HUB,\n  URBAN_AREA,\n  NATIONAL_PARK,\n  HISTORICAL_SITE,\n  OTHER\n}\n\n/// Geometry table with information about geometric properties\ntable Geometry {\n  /// Type of geometry\n  GEOMETRY_TYPE: string;\n  /// Coordinates of the geometry\n  COORDINATES: [float];\n}\n\n/// Site Information Message\ntable SIT {\n  /// Unique identifier for the site, BE_NUMBER\n  ID: string;\n  /// Name of the site\n  NAME: string;\n  /// Abbreviation\n  ABBREVIATION: string;\n  /// Site type as defined in SiteType enum\n  SITE_TYPE: SiteType;\n  /// Site type CATCODE\n  CATCODE: string;\n  /// Network identifier\n  NETWORK: string;\n  /// Latitude of the site\n  LATITUDE: float;\n  /// Longitude of the site\n  LONGITUDE: float;\n  /// Altitude of the site\n  ALTITUDE: float;\n  /// Geometry of the site\n  GEOMETRY: Geometry;\n  /// Center point geometry coordinates\n  CENTER_POINT_GEOMETRY: [float];\n  /// Classification marking of the site\n  CLASSIFICATION: string;\n  /// CTR ISO 3166 Numeric code as string\n  CTR_ID: string;\n  /// Identifier of the user who created the site data\n  CREATED_BY: string;\n  /// Description of the site\n  DESCRIPTION: string;\n  /// URL for the 3D model of the site\n  MODEL_URL: string;\n  /// Source of the site data\n  SOURCE: string;\n  /// Indicates if the site is taskable\n  TASKABLE: bool;\n  /// Operational status of the site (e.g., active, inactive, under construction)\n  OPERATIONAL_STATUS: string;\n  /// Date of establishment\n  ESTABLISHMENT_DATE: string;\n  /// Contact information for the site\n  CONTACT_INFO: string;\n  /// Environmental impact or considerations\n  ENVIRONMENTAL_IMPACT: string;\n  /// Accessibility and infrastructure details\n  ACCESSIBILITY_INFRA: string;\n  /// Vector of Integrated Devices (IDM)\n  INTEGRATED_DEVICES: [IDM];\n}\n\n/// Collection of SIT records\n\nroot_type SIT;\nfile_identifier \"$SIT\";",
            "files": [
                "./dist/SIT/SIT.php.tar.gz",
                "./dist/SIT/SIT.json.tar.gz",
                "./dist/SIT/SIT.py.tar.gz",
                "./dist/SIT/SIT.java.tar.gz",
                "./dist/SIT/SIT.rs.tar.gz",
                "./dist/SIT/SIT.lob.tar.gz",
                "./dist/SIT/SIT.ts.tar.gz",
                "./dist/SIT/SIT.js.tar.gz",
                "./dist/SIT/SIT.dart.tar.gz",
                "./dist/SIT/SIT.kt.tar.gz",
                "./dist/SIT/SIT.cs.tar.gz",
                "./dist/SIT/SIT.cpp.tar.gz",
                "./dist/SIT/SIT.sw.tar.gz",
                "./dist/SIT/SIT.go.tar.gz"
            ]
        },
        "OEM": {
            "IDL": "// Space Data Standard - 5 - Orbit Ephemeris Message (OEM)\n// Description\n// Orbit information may be exchanged between two participants by sending an\n// ephemeris in the form of a series of state vectors (Cartesian vectors providing position and\n// velocity, and optionally accelerations) using an Orbit Ephemeris Message (OEM). The\n// message recipient must have a means of interpolating across these state vectors to obtain the\n// state at an arbitrary time contained within the span of the ephemeris.\n// CCSDS Reference documentation: 502x0b2c1e2.\n\nenum referenceFrame : byte {\n  /// Earth Mean Equator and Equinox of J2000\n  EME2000,\n  /// Geocentric Celestial Reference Frame\n  GCRF,\n  /// Greenwich Rotating Coordinates\n  GRC,\n  /// International Celestial Reference Frame\n  ICRF,\n  /// International Terrestrial Reference Frame 2000\n  ITRF2000,\n  /// International Terrestrial Reference Frame 1993\n  ITRF93,\n  /// International Terrestrial Reference Frame 1997\n  ITRF97,\n  /// Mars Centered Inertial\n  MCI,\n  /// True of Date, Rotating\n  TDR,\n  /// True Equator Mean Equinox\n  TEME,\n  /// True of Date\n  TOD\n}\n\nenum timeSystem : byte {\n  /// Greenwich Mean Sidereal Time\n  GMST,\n  /// Global Positioning System\n  GPS,\n  /// Mission Elapsed Time\n  MET,\n  /// Mission Relative Time\n  MRT,\n  /// Spacecraft Clock (receiver) (requires rules for interpretation in ICD)\n  SCLK,\n  /// International Atomic Time\n  TAI,\n  /// Barycentric Coordinate Time\n  TCB,\n  /// Barycentric Dynamical Time\n  TDB,\n  /// Geocentric Coordinate Time\n  TCG,\n  /// Terrestrial Time\n  TT,\n  /// Universal Time\n  UT1,\n  /// Coordinated Universal Time\n  UTC\n}\n\nenum manCovRefFrame : byte {\n  /// Another name for 'Radial, Transverse, Normal'\n  RSW,\n  /// Radial, Transverse, Normal\n  RTN,\n  /// A local orbital coordinate frame\n  TNW\n}\n\n/// A single ephemeris data line\ntable ephemerisDataLine {\n  /// Epoch of state vector (ISO 8601)\n  EPOCH:string;\n  /// Position vector X-component km\n  X:double;\n  /// Position vector Y-component km\n  Y:double;\n  /// Position vector Z-component km\n  Z:double;\n  /// Velocity vector X-component km/s\n  X_DOT:double;\n  /// Velocity vector Y-component km/s\n  Y_DOT:double;\n  /// Velocity vector Z-component km/s\n  Z_DOT:double;\n  /// Optional: Acceleration vector X-component km/s/s\n  X_DDOT:double;\n  /// Optional: Acceleration vector Y-component km/s/s\n  Y_DDOT:double;\n  /// Optional: Acceleration vector Z-component km/s/s\n  Z_DDOT:double;\n}\n\n/// Position/Velocity Covariance Matrix Line\ntable covarianceMatrixLine {\n  /// Epoch\n  EPOCH:string;\n  /// Reference frame for the covariance matrix\n  COV_REF_FRAME:manCovRefFrame;\n  /// Covariance matrix [1,1] km**2\n  CX_X:double;\n  /// Covariance matrix [2,1] km**2\n  CY_X:double;\n  /// Covariance matrix [2,2] km**2\n  CY_Y:double;\n  /// Covariance matrix [3,1] km**2\n  CZ_X:double;\n  /// Covariance matrix [3,2] km**2\n  CZ_Y:double;\n  /// Covariance matrix [3,3] km**2\n  CZ_Z:double;\n  /// Covariance matrix [4,1] km**2/s\n  CX_DOT_X:double;\n  /// Covariance matrix [4,2] km**2/s\n  CX_DOT_Y:double;\n  /// Covariance matrix [4,3] km**2/s\n  CX_DOT_Z:double;\n  /// Covariance matrix [4,4] km**2/s**2\n  CX_DOT_X_DOT:double;\n  /// Covariance matrix [5,1] km**2/s\n  CY_DOT_X:double;\n  /// Covariance matrix [5,2] km**2/s\n  CY_DOT_Y:double;\n  /// Covariance matrix [5,3] km**2/s\n  CY_DOT_Z:double;\n  /// Covariance matrix [5,4] km**2/s**2\n  CY_DOT_X_DOT:double;\n  /// Covariance matrix [5,5] km**2/s**2\n  CY_DOT_Y_DOT:double;\n  /// Covariance matrix [6,1] km**2/s\n  CZ_DOT_X:double;\n  /// Covariance matrix [6,2] km**2/s\n  CZ_DOT_Y:double;\n  /// Covariance matrix [6,3] km**2/s\n  CZ_DOT_Z:double;\n  /// Covariance matrix [6,4] km**2/s**2\n  CZ_DOT_X_DOT:double;\n  /// Covariance matrix [6,5] km**2/s**2\n  CZ_DOT_Y_DOT:double;\n  /// Covariance matrix [6,6] km**2/s**2\n  CZ_DOT_Z_DOT:double;\n}\n\n/// OEM Ephemeris Data Block\ntable ephemerisDataBlock {\n  /// Plain-Text Comment\n  COMMENT:string;\n  /// Satellite Name(s)\n  OBJECT_NAME:string;\n  /// International Designator (YYYY-NNNAAA)\n  OBJECT_ID:string;\n  /// Origin of reference frame (EARTH, MARS, MOON, etc.)\n  CENTER_NAME:string;\n  /// Name of the reference frame (TEME, EME2000, etc.)\n  REF_FRAME:referenceFrame;\n  /// Epoch of reference frame, if not intrinsic to the definition of the reference frame\n  REF_FRAME_EPOCH:string;\n  /// Time system used for the orbit state and covariance matrix. (UTC)\n  TIME_SYSTEM:timeSystem;\n  /// Start of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)\n  START_TIME:string;\n  /// Optional start USEABLE time span covered by ephemeris data (ISO 8601)\n  USEABLE_START_TIME:string;\n  /// Optional end of USEABLE time span covered by ephemeris data (ISO 8601)\n  USEABLE_STOP_TIME:string;\n  /// End of TOTAL time span covered by ephemeris data and covariance data (ISO 8601)\n  STOP_TIME:string;\n  /// Recommended interpolation method for ephemeris data (Hermite, Linear, Lagrange, etc.)\n  INTERPOLATION:string;\n  /// Recommended interpolation degree for ephemeris data\n  INTERPOLATION_DEGREE:uint;\n\n  /// Array of ephemeris data lines\n  EPHEMERIS_DATA_LINES:[ephemerisDataLine];\n  /// Array of covariance matrix lines\n  COVARIANCE_MATRIX_LINES:[covarianceMatrixLine];\n}\n\n/// Orbit Ephemeris Message\ntable OEM {\n  /// OEM Header\n  /// OEM Version\n  CCSDS_OEM_VERS:double;\n  /// Creation Date\n  CREATION_DATE:string;\n  /// Originator\n  ORIGINATOR:string;\n\n  /// Array of ephemeris data blocks\n  EPHEMERIS_DATA_BLOCK:[ephemerisDataBlock];\n}\n\n/// Collection of OEM messages\n\nroot_type OEM;\nfile_identifier \"$OEM\";\n",
            "files": [
                "./dist/OEM/OEM.php.tar.gz",
                "./dist/OEM/OEM.json.tar.gz",
                "./dist/OEM/OEM.py.tar.gz",
                "./dist/OEM/OEM.java.tar.gz",
                "./dist/OEM/OEM.rs.tar.gz",
                "./dist/OEM/OEM.lob.tar.gz",
                "./dist/OEM/OEM.ts.tar.gz",
                "./dist/OEM/OEM.js.tar.gz",
                "./dist/OEM/OEM.dart.tar.gz",
                "./dist/OEM/OEM.kt.tar.gz",
                "./dist/OEM/OEM.cs.tar.gz",
                "./dist/OEM/OEM.cpp.tar.gz",
                "./dist/OEM/OEM.sw.tar.gz",
                "./dist/OEM/OEM.go.tar.gz"
            ]
        },
        "EPM": {
            "IDL": "\n\nenum KeyType : byte {\n  Signing,\n  Encryption\n}\n\n/// Represents cryptographic key information\ntable CryptoKey {\n  /// Public part of the cryptographic key\n  PUBLIC_KEY: string;\n  /// Extended public key\n  XPUB: string;\n  /// Private part of the cryptographic key, should be kept secret\n  PRIVATE_KEY: string;\n  /// Extended private key\n  XPRIV: string;\n  /// Address generated from the cryptographic key\n  KEY_ADDRESS: string;\n  /// Type of the address generated from the cryptographic key\n  ADDRESS_TYPE: string;\n  /// Type of the cryptographic key (signing or encryption)\n  KEY_TYPE: KeyType;\n}\n\n/// Represents a geographic address\ntable Address {\n  /// Country of the address\n  COUNTRY: string;\n  /// Region of the address (e.g., state or province)\n  REGION: string;\n  /// Locality of the address (e.g., city or town)\n  LOCALITY: string;\n  /// Postal code of the address\n  POSTAL_CODE: string;\n  /// Street address\n  STREET: string;\n  /// Post office box number\n  POST_OFFICE_BOX_NUMBER: string;\n}\n\n/// Entity Profile Message\ntable EPM {\n  /// Distinguished Name of the entity\n  DN: string;\n  /// Common name of the entity (person or organization)\n  LEGAL_NAME: string;\n  /// Family name or surname of the person\n  FAMILY_NAME: string;\n  /// Given name or first name of the person\n  GIVEN_NAME: string;\n  /// Additional name or middle name of the person\n  ADDITIONAL_NAME: string;\n  /// Honorific prefix preceding the person's name (e.g., Mr., Dr.)\n  HONORIFIC_PREFIX: string;\n  /// Honorific suffix following the person's name (e.g., Jr., Sr.)\n  HONORIFIC_SUFFIX: string;\n  /// Job title of the person\n  JOB_TITLE: string;\n  /// Occupation of the person\n  OCCUPATION: string;\n  /// Physical Address\n  ADDRESS: Address;\n  /// Alternate names for the entity\n  ALTERNATE_NAMES: [string];\n  /// Email address of the entity\n  EMAIL: string;\n  /// Telephone number of the entity\n  TELEPHONE: string;\n  /// Cryptographic keys associated with the entity\n  KEYS: [CryptoKey];\n  /// Multiformat addresses associated with the entity\n  MULTIFORMAT_ADDRESS: [string];\n}\n\nroot_type EPM;\n\nfile_identifier \"$EPM\";\n",
            "files": [
                "./dist/EPM/EPM.php.tar.gz",
                "./dist/EPM/EPM.json.tar.gz",
                "./dist/EPM/EPM.py.tar.gz",
                "./dist/EPM/EPM.java.tar.gz",
                "./dist/EPM/EPM.rs.tar.gz",
                "./dist/EPM/EPM.lob.tar.gz",
                "./dist/EPM/EPM.ts.tar.gz",
                "./dist/EPM/EPM.js.tar.gz",
                "./dist/EPM/EPM.dart.tar.gz",
                "./dist/EPM/EPM.kt.tar.gz",
                "./dist/EPM/EPM.cs.tar.gz",
                "./dist/EPM/EPM.cpp.tar.gz",
                "./dist/EPM/EPM.sw.tar.gz",
                "./dist/EPM/EPM.go.tar.gz"
            ]
        }
    }
}