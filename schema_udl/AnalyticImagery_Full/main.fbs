/// The analytic imagery schema supports data plots and graphics of various types. The records contain general file information, allows for annotations to user-defined areas of interest on the graphics, and supports keyword searching.
table AnalyticImagery_Full {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: ANALYTIC-IMAGERY-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// General type of content of this image (CONTOUR, DIAGRAM, HEATMAP, HISTOGRAM, PLOT, SCREENSHOT).
    /// Example: CONTOUR
    /// Constraints: Minimum length = 1, Maximum length = 36
    content: string;
    /// The message time of this image record, in ISO8601 UTC format with millisecond precision.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    msgTime: string;
    /// The type of image associated with this record (GIF, JPG, PNG, TIF).
    /// Example: JPG
    /// Constraints: Minimum length = 1, Maximum length = 16
    imageType: string;
    /// The image file name.
    /// Example: IMAGE-NAME
    /// Constraints: Minimum length = 1, Maximum length = 128
    filename: string;
    /// The image file size, in bytes.  The maximum file size for this service is 40,000,000 bytes (40MB). Files exceeding the maximum size will be rejected.
    /// Example: 7654321
    /// Constraints: Maximum value = 40000000
    filesize: int64;
    /// The image width (horizontal), in pixels.
    /// Example: 123
    /// Constraints: No constraints specified.
    imgWidth: int32;
    /// The image height (vertical), in pixels.
    /// Example: 123
    /// Constraints: No constraints specified.
    imgHeight: int32;
    /// Optional field indicating the units that apply to the x-axis of the attached image, when applicable.
    /// Example: pixels
    /// Constraints: Minimum length = 0, Maximum length = 36
    xUnits: string;
    /// Optional field indicating the units that apply to the y-axis of the attached image, when applicable.
    /// Example: pixels
    /// Constraints: Minimum length = 0, Maximum length = 36
    yUnits: string;
    /// Optional field indicating the units that apply to the z-axis of the attached image, when applicable.
    /// Example: pixels
    /// Constraints: Minimum length = 0, Maximum length = 36
    zUnits: string;
    /// User-defined set ID of a sequence of images.  Used to associate related analytic image records.
    /// Example: IMAGE-IDS
    /// Constraints: Minimum length = 0, Maximum length = 36
    imageSetId: string;
    /// The number of images in an image set.
    /// Example: 123
    /// Constraints: No constraints specified.
    imageSetLength: int32;
    /// The sequence number of an image within an image set.  If null, then it is assumed that the order of images in an imageSet is not relevant.
    /// Example: 123
    /// Constraints: No constraints specified.
    sequenceId: int32;
    /// Description of the image content and utility.
    /// Example: Image description
    /// Constraints: Minimum length = 1, Maximum length = 512
    description: string;
    /// The start time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    dataStart: string;
    /// The stop time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    dataStop: string;
    /// Rectangular annotation limits, specified in pixels, as an array of arrays of the coordinates [ [UL1x, UL1y], [UR1x, UR1y], [LR1x, LR1y], [LL1x, LL1y] ], indicating the corners of a rectangle beginning with the Upper Left (UL) and moving clockwise. Allows the image provider to highlight one or more rectangular area(s) of interest. The array must contain Nx4 two-element arrays, where N is the number of rectangles of interest.  The associated annotation(s) should be included in the annText array.
    /// Example: [[1, 1], [1, 2], [1, 3], [1, 4]]
    /// Constraints: No constraints specified.
    annLims: [string];
    /// Annotation text, a string array of annotation(s) corresponding to the rectangular areas specified in annLims.  This array contains the annotation text associated with the areas of interest indicated in annLims, in order.  This array should contain one annotation per four values of the area (annLims) array.
    /// Example: ['rec1', 'rec2']
    /// Constraints: No constraints specified.
    annText: [string];
    /// Array of searchable keywords for this analytic imagery record.
    /// Example: ['Key1', 'Key2']
    /// Constraints: No constraints specified.
    keywords: [string];
    /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
    /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    area: string;
    /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    atext: string;
    /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    /// Constraints: No constraints specified.
    agjson: string;
    /// Type of region as projected on the ground.
    /// Example: POLYGON
    /// Constraints: Minimum length = 0, Maximum length = 128
    atype: string;
    /// Number of dimensions of the geometry depicted by region.
    /// Example: 2
    /// Constraints: No constraints specified.
    andims: int32;
    /// Geographical spatial_ref_sys for region.
    /// Example: 4326
    /// Constraints: No constraints specified.
    asrid: int32;
    /// Assessed satellite ID (NORAD RSO object number).  The 'satId' and 'satIdConf' arrays must match in size.
    /// Example: [12004, 12005]
    /// Constraints: No constraints specified.
    satId: [string];
    /// Assessed satellite confidence corresponding to an assessment ID.  Values are between 0.0 and 1.0.  The 'satId' and 'satIdConf' arrays must match in size.
    /// Example: [0.98, 0.22]
    /// Constraints: No constraints specified.
    satIdConf: [string];
    /// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this image. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: ['MTI', 'POI']
    /// Constraints: No constraints specified.
    srcTyps: [string];
    /// Array of UUIDs of the UDL data records that are related to this image. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
    /// Example: ['DOA_ID', 'DWELL_ID']
    /// Constraints: No constraints specified.
    srcIds: [string];
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    tags: [string];
    /// MD5 checksum value of the file. The ingest/create operation will automatically generate the value.
    /// Example: 123
    /// Constraints: Minimum length = 0, Maximum length = 256
    checksumValue: string;
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
    /// Constraints: Minimum length = 0, Maximum length = 64
    transactionId: string;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: ORIGIN
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: TST1
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    sourceDL: string;
    /// Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: AnalyticImagery_Full_dataMode_Enum;
}
enum AnalyticImagery_Full_dataMode_Enum : byte {
    /// No description available.
    REAL,
    /// No description available.
    TEST,
    /// No description available.
    SIMULATED,
    /// No description available.
    EXERCISE
}

