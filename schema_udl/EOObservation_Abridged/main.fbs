/// Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.
table EOObservation_Abridged {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: EOOBSERVATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// Ob detection time in ISO 8601 UTC with microsecond precision.
    /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    obTime: string;
    /// Object Correlation Quality value (non-standardized). Users should consult data providers regarding the expected range of values.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    corrQuality: double;
    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idOnOrbit: string;
    /// Unique identifier of the reporting sensor.
    /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idSensor: string;
    /// Unique identifier of the Sky Imagery.
    /// Example: SKYIMAGERY-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idSkyImagery: string;
    /// Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
    /// Example: AUTOTRACK
    /// Constraints: Minimum length = 0, Maximum length = 24
    collectMethod: string;
    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: 5
    /// Constraints: No constraints specified.
    satNo: int32;
    /// Optional identifier to indicate the specific tasking which produced this observation.
    /// Example: TASK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    taskId: string;
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    transactionId: string;
    /// Optional identifier of the track to which this observation belongs.
    /// Example: TRACK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    trackId: string;
    /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
    /// Example: FIRST
    /// Constraints: Minimum length = 0, Maximum length = 8
    obPosition: string;
    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origObjectId: string;
    /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origSensorId: string;
    /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: False
    /// Constraints: No constraints specified.
    uct: bool;
    /// Line of sight azimuth angle in degrees and topocentric frame.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    azimuth: double;
    /// One sigma uncertainty in the line of sight azimuth angle, in degrees.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    azimuthUnc: double;
    /// Sensor line of sight azimuth angle bias in degrees.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    azimuthBias: double;
    /// Rate of change of the line of sight azimuth in degrees per second.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    azimuthRate: double;
    /// Line of sight elevation in degrees and topocentric frame.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    elevation: double;
    /// One sigma uncertainty in the line of sight elevation angle, in degrees.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    elevationUnc: double;
    /// Sensor line of sight elevation bias in degrees.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    elevationBias: double;
    /// Rate of change of the line of sight elevation in degrees per second.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    elevationRate: double;
    /// Line of sight range in km.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    range: double;
    /// One sigma uncertainty in the line of sight range, in kilometers.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    rangeUnc: double;
    /// Sensor line of sight range bias in km.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    rangeBias: double;
    /// Rate of change of the line of sight range in km/sec.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    rangeRate: double;
    /// One sigma uncertainty in the line of sight range rate, in kilometers/second.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    rangeRateUnc: double;
    /// Line of sight right ascension, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    ra: double;
    /// Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    raRate: double;
    /// One sigma uncertainty in the line of sight right ascension angle, in degrees.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    raUnc: double;
    /// Sensor line of sight right ascension bias in degrees.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    raBias: double;
    /// Line of sight declination, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    declination: double;
    /// Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    declinationRate: double;
    /// One sigma uncertainty in the line of sight declination angle, in degrees.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    declinationUnc: double;
    /// Sensor line of sight declination angle bias in degrees.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    declinationBias: double;
    /// Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    losx: double;
    /// Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    losy: double;
    /// Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    losz: double;
    /// One sigma uncertainty in the line of sight pointing in micro-radians.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    losUnc: double;
    /// Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    losxvel: double;
    /// Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    losyvel: double;
    /// Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    loszvel: double;
    /// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    /// Example: 45.1
    /// Constraints: No constraints specified.
    senlat: double;
    /// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: 179.1
    /// Constraints: No constraints specified.
    senlon: double;
    /// Sensor altitude at obTime (if mobile/onorbit) in km.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    senalt: double;
    /// Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    senx: double;
    /// Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    seny: double;
    /// Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    senz: double;
    /// Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    senvelx: double;
    /// Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    senvely: double;
    /// Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    senvelz: double;
    /// The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).
    /// Example: [0.4492, 0.02, 0.8765, 0.2213]
    /// Constraints: No constraints specified.
    senQuat: [string];
    /// The number of RSOs detected in the sensor field of view.
    /// Example: 1
    /// Constraints: No constraints specified.
    fovCount: int32;
    /// Image exposure duration in seconds.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    expDuration: double;
    /// Formula: 2.5 * log_10 (zero_mag_counts / expDuration).
    /// Example: 1.1
    /// Constraints: No constraints specified.
    zeroptd: double;
    /// Net object signature = counts / expDuration.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    netObjSig: double;
    /// Net object signature uncertainty = counts uncertainty / expDuration.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    netObjSigUnc: double;
    /// Calibrated magnitude in units of magnitudes.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    mag: double;
    /// Uncertainty of calibrated magnitude in units of magnitudes.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    magUnc: double;
    /// Formula: mag - 5.0 * log_10(geo_range / 1000000.0).
    /// Example: 1.1
    /// Constraints: No constraints specified.
    magNormRange: double;
    /// For GEO detections, the latitude in degrees north.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    geolat: double;
    /// For GEO detections, the longitude in degrees east.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    geolon: double;
    /// For GEO detections, the altitude in km.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    geoalt: double;
    /// For GEO detections, the range in km.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    georange: double;
    /// Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    skyBkgrnd: double;
    /// Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    primaryExtinction: double;
    /// Primary Extinction Coefficient Uncertainty, in Magnitudes.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    primaryExtinctionUnc: double;
    /// The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    solarPhaseAngle: double;
    /// The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing and positive when opening.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    solarEqPhaseAngle: double;
    /// Angle from the sun to the equatorial plane.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    solarDecAngle: double;
    /// Shutter delay in seconds.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    shutterDelay: double;
    /// Sensor timing bias in seconds.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    timingBias: double;
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: Example URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    rawFileURI: string;
    /// Intensity of the target for IR observations, in kw/sr/um.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    intensity: double;
    /// Background intensity for IR observations, in kw/sr/um.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    bgIntensity: double;
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: PROVIDED_DATA1
    /// Constraints: Minimum length = 0, Maximum length = 64
    descriptor: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: EOObservation_Abridged_dataMode_Enum;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.
    /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    referenceFrame: EOObservation_Abridged_referenceFrame_Enum;
    /// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
    /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    senReferenceFrame: EOObservation_Abridged_senReferenceFrame_Enum;
    /// Boolean indicating that the target object was in umbral eclipse at the time of this observation.
    /// Example: False
    /// Constraints: No constraints specified.
    umbra: bool;
    /// Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
    /// Example: False
    /// Constraints: No constraints specified.
    penumbra: bool;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    sourceDL: string;
    /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
    /// Example: OPTICAL
    /// Constraints: No constraints specified.
    type: string;
}
enum EOObservation_Abridged_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

enum EOObservation_Abridged_referenceFrame_Enum : byte {
    /// No description available.
    J2000,
    /// No description available.
    GCRF,
    /// No description available.
    ITRF,
    /// No description available.
    TEME
}

enum EOObservation_Abridged_senReferenceFrame_Enum : byte {
    /// No description available.
    J2000,
    /// No description available.
    EFG/TDR,
    /// No description available.
    ECR/ECEF,
    /// No description available.
    TEME,
    /// No description available.
    ITRF,
    /// No description available.
    GCRF
}

