/// These services provide operations for posting space object idenfification observation sets.
table SOIObservationSet_Abridged {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// SOI msgCreateDate time in ISO 8601 UTC time, with millisecond precision.
    /// Example: 2022-07-07T16:00:00.123Z
    /// Constraints: No constraints specified.
    msgCreateDate: string;
    /// ID of the observing sensor.
    /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idSensor: string;
    /// Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies if this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origSensorId: string;
    /// ID of the AttitudeSet record for the observing sensor.
    /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 0, Maximum length = 36
    sensorAsId: string;
    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idOnOrbit: string;
    /// Satellite/catalog number of the target on-orbit object.
    /// Example: 101
    /// Constraints: No constraints specified.
    satNo: int32;
    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    origObjectId: string;
    /// Sensor WGS84 latitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    /// Example: 45.1
    /// Constraints: No constraints specified.
    senlat: double;
    /// Sensor WGS84 longitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values south of equator).
    /// Example: 179.1
    /// Constraints: No constraints specified.
    senlon: double;
    /// Sensor altitude at startTime (if mobile/onorbit) in kilometers.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    senalt: double;
    /// Cartesian X position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    senx: double;
    /// Cartesian Y position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    seny: double;
    /// Cartesian Z position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    senz: double;
    /// Cartesian X velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    senvelx: double;
    /// Cartesian Y velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    senvely: double;
    /// Cartesian Z velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    senvelz: double;
    /// ID of the UDL Elset of the Space Object under observation.
    /// Example: REF-ELSET-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idElset: string;
    /// Observation set detection start time in ISO 8601 UTC with microsecond precision.
    /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    startTime: string;
    /// Observation set detection end time in ISO 8601 UTC with microsecond precision.
    /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    endTime: string;
    /// The number of observation records in the set.
    /// Example: 1
    /// Constraints: No constraints specified.
    numObs: int32;
    /// Observation type (OPTICAL, RADAR).
    /// Example: OPTICAL
    /// Constraints: Minimum length = 1, Maximum length = 24
    type: SOIObservationSet_Abridged_type_Enum;
    /// Polar angle of the gimbal/mount at observation set detection start time in degrees.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    polarAngleStart: double;
    /// Polar angle of the gimbal/mount at observation set detection end time in degrees.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    polarAngleEnd: double;
    /// The reference frame of the observation measurements. If the referenceFrame is null it is assumed to be J2000.
    /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    referenceFrame: SOIObservationSet_Abridged_referenceFrame_Enum;
    /// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
    /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    senReferenceFrame: SOIObservationSet_Abridged_senReferenceFrame_Enum;
    /// Line of sight declination at observation set detection start time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
    /// Example: 1.1
    /// Constraints: No constraints specified.
    losDeclinationStart: double;
    /// Line of sight declination at observation set detection end time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
    /// Example: 1.1
    /// Constraints: No constraints specified.
    losDeclinationEnd: double;
    /// Pointing angle of the Azimuth gimbal/mount at observation set detection start time. Specified in degrees.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    pointingAngleAzStart: double;
    /// Pointing angle of the Azimuth gimbal/mount at observation set detection end time. Specified in degrees.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    pointingAngleAzEnd: double;
    /// Pointing angle of the Elevation gimbal/mount at observation set detection start time. Specified in degrees.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    pointingAngleElStart: double;
    /// Pointing angle of the Elevation gimbal/mount at observation set detection end time. Specified in degrees.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    pointingAngleElEnd: double;
    /// Pixel array size (width) in pixels.
    /// Example: 32
    /// Constraints: No constraints specified.
    pixelArrayWidth: int32;
    /// Pixel array size (height) in pixels.
    /// Example: 32
    /// Constraints: No constraints specified.
    pixelArrayHeight: int32;
    /// The value is the number of spectral filters used.
    /// Example: 10
    /// Constraints: No constraints specified.
    numSpectralFilters: int32;
    /// Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
    /// Example: ['Keyword1', 'Keyword2']
    /// Constraints: No constraints specified.
    spectralFilters: [string];
    /// Mode indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
    /// Example: RATE TRACK
    /// Constraints: Minimum length = 0, Maximum length = 32
    collectionMode: string;
    /// The gain used during the collection, in units of photoelectrons per analog-to-digital unit (e-/ADU). If no gain is used, the value = 1.
    /// Example: 234.2
    /// Constraints: No constraints specified.
    gain: double;
    /// The number of pixels binned horizontally.
    /// Example: 2
    /// Constraints: No constraints specified.
    binningHoriz: int32;
    /// The number of pixels binned vertically.
    /// Example: 2
    /// Constraints: No constraints specified.
    binningVert: int32;
    /// The in-band solar magnitude at 1 A.U.
    /// Example: -26.91
    /// Constraints: No constraints specified.
    solarMag: double;
    /// The minimum valid pixel value.
    /// Example: 0
    /// Constraints: No constraints specified.
    pixelMin: int32;
    /// The maximum valid pixel value.
    /// Example: 16383
    /// Constraints: No constraints specified.
    pixelMax: int32;
    /// Software Version used to Capture, Process, and Deliver the data.
    /// Example: GSV99/17-1
    /// Constraints: Minimum length = 0, Maximum length = 70
    softwareVersion: string;
    /// Name of the target satellite.
    /// Example: TITAN 3C TRANSTAGE R/B
    /// Constraints: Minimum length = 0, Maximum length = 70
    satelliteName: string;
    /// Name of the Star Catalog used for photometry and astrometry.
    /// Example: SSTRC5
    /// Constraints: Minimum length = 0, Maximum length = 70
    starCatName: string;
    /// Object Correlation Quality value. Measures how close the observed object's orbit is to matching an object in the catalog. The scale of this field may vary depending on provider. Users should consult the data provider to verify the meaning of the value (e.g. A value of 0.0 indicates a high/strong correlation, while a value closer to 1.0 indicates low/weak correlation).
    /// Example: 0.327
    /// Constraints: No constraints specified.
    corrQuality: double;
    /// Boolean indicating whether the target object was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: True
    /// Constraints: No constraints specified.
    uct: bool;
    /// Key to indicate which, if any of, the pre/post photometer calibrations are valid for use when generating data for the EOSSA file. If the field is not populated, then the provided calibration data will be used when generating the EOSSA file (e.g. PRE, POST, BOTH, NONE).
    /// Example: BOTH
    /// Constraints: Minimum length = 0, Maximum length = 16
    validCalibrations: string;
    /// Type of calibration used by the Sensor (e.g. ALL SKY, DIFFERENTIAL, DEFAULT, NONE).
    /// Example: ALL SKY
    /// Constraints: Minimum length = 0, Maximum length = 32
    calibrationType: string;
    /// A threshold for percent of pixels that make up object signal that are beyond the saturation point for the sensor that are removed in the EOSSA file, in range of 0 to 1.
    /// Example: 0.1
    /// Constraints: No constraints specified.
    percentSatThreshold: double;
    /// Boolean indicating if any change event was detected, based on historical collection data for the object.
    /// Example: True
    /// Constraints: No constraints specified.
    changeDetected: bool;
    /// Boolean indicating if a periodicity change event was detected, based on historical collection data for the object.
    /// Example: True
    /// Constraints: No constraints specified.
    periodicityChangeDetected: bool;
    /// Boolean indicating if a brightness variance change event was detected, based on historical collection data for the object.
    /// Example: True
    /// Constraints: No constraints specified.
    brightnessVarianceChangeDetected: bool;
    /// Boolean indicating if a solar phase angle brightness change event was detected, based on historical collection data for the object.
    /// Example: True
    /// Constraints: No constraints specified.
    solarPhaseAngleBrightnessChangeDetected: bool;
    /// Overall qualitative confidence assessment of change detection results (e.g. HIGH, MEDIUM, LOW).
    /// Example: MEDIUM
    /// Constraints: Minimum length = 0, Maximum length = 16
    changeConf: string;
    /// Qualitative Collection Density assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
    /// Example: MEDIUM
    /// Constraints: Minimum length = 0, Maximum length = 16
    collectionDensityConf: string;
    /// Qualitative Periodicity Sampling assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
    /// Example: MEDIUM
    /// Constraints: Minimum length = 0, Maximum length = 16
    periodicitySamplingConf: string;
    /// Qualitative assessment of the periodicity detection results from the Attitude and Shape Retrieval (ASR) Periodicity Assessment (PA) Tool (e.g. HIGH, MEDIUM, LOW).
    /// Example: MEDIUM
    /// Constraints: Minimum length = 0, Maximum length = 16
    periodicityDetectionConf: string;
    /// Universally Unique collection ID. Mechanism to correlate Single Point Photometry (SPP) JSON files to images.
    /// Example: b5133288-ab63-4b15-81f6-c7eec0cdb0c0
    /// Constraints: Minimum length = 0, Maximum length = 36
    collectionId: string;
    /// Array of SOI Calibrations associated with this SOIObservationSet.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    calibrations: [string];
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    tags: [string];
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    transactionId: string;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    createdBy: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    sourceDL: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: SOIObservationSet_Abridged_dataMode_Enum;
}
enum SOIObservationSet_Abridged_type_Enum : byte {
    /// No description available.
    OPTICAL,
    /// No description available.
    RADAR
}

enum SOIObservationSet_Abridged_referenceFrame_Enum : byte {
    /// No description available.
    J2000,
    /// No description available.
    EFG/TDR,
    /// No description available.
    ECR/ECEF,
    /// No description available.
    TEME,
    /// No description available.
    ITRF,
    /// No description available.
    GCRF
}

enum SOIObservationSet_Abridged_senReferenceFrame_Enum : byte {
    /// No description available.
    J2000,
    /// No description available.
    EFG/TDR,
    /// No description available.
    ECR/ECEF,
    /// No description available.
    TEME,
    /// No description available.
    ITRF,
    /// No description available.
    GCRF
}

enum SOIObservationSet_Abridged_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

