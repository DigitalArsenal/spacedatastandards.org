/// Flight Plan contains data specifying the details of an intended flight including schedule and expected route.
table FlightPlan_Ingest {
    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) encode/decode procedures.
    /// Example: AJM7939B1123
    /// Constraints: Minimum length = 0, Maximum length = 36
    amcMissionId: string;
    /// The UDL unique identifier of the aircraft sortie associated with this flight plan.
    /// Example: 9d60c1b1-10b1-b2a7-e403-84c5d7eeb170
    /// Constraints: Minimum length = 0, Maximum length = 36
    idSortie: string;
    /// The UDL unique identifier of the aircraft associated with this flight plan.
    /// Example: 4f4a67c6-40fd-11ee-be56-0242ac120002
    /// Constraints: Minimum length = 0, Maximum length = 36
    idAircraft: string;
    /// The leg number of this flight plan.
    /// Example: 100
    /// Constraints: No constraints specified.
    legNum: int32;
    /// The UDL unique identifier of the departure airfield associated with this flight plan.
    /// Example: 2a9020f6-40fd-11ee-be56-0242ac120002
    /// Constraints: Minimum length = 0, Maximum length = 36
    idDepAirfield: string;
    /// The airfield identifier of the departure location, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: KSLV
    /// Constraints: Minimum length = 1, Maximum length = 36
    depAirfield: string;
    /// The UDL unique identifier of the arrival airfield associated with this flight plan.
    /// Example: 363080c2-40fd-11ee-be56-0242ac120002
    /// Constraints: Minimum length = 0, Maximum length = 36
    idArrAirfield: string;
    /// The airfield identifier of the arrival location, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: KCHS
    /// Constraints: Minimum length = 1, Maximum length = 36
    arrAirfield: string;
    /// The source ID of the flight plan from the generating system.
    /// Example: AFMAPP20322347140001
    /// Constraints: Minimum length = 0, Maximum length = 36
    externalId: string;
    /// The generation time of this flight plan in ISO 8601 UTC format, with millisecond precision.
    /// Example: 2023-05-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    genTS: string;
    /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of the aircraft associated with this flight plan. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
    /// Example: KC-130 HERCULES
    /// Constraints: Minimum length = 0, Maximum length = 128
    aircraftMDS: string;
    /// The tail number of the aircraft associated with this flight plan.
    /// Example: 77187
    /// Constraints: Minimum length = 0, Maximum length = 16
    tailNumber: string;
    /// The call sign assigned to the aircraft for this flight plan.
    /// Example: HKY629
    /// Constraints: Minimum length = 0, Maximum length = 8
    callSign: string;
    /// The date and time the weather valid period begins in ISO 8601 UTC format, with millisecond precision.
    /// Example: 2023-05-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    wxValidStart: string;
    /// The date and time the weather valid period ends in ISO 8601 UTC format, with millisecond precision.
    /// Example: 2023-05-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    wxValidEnd: string;
    /// The estimated time of departure for the aircraft, in ISO 8601 UTC format, with millisecond precision.
    /// Example: 2023-05-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    estDepTime: string;
    /// The percent degrade due to drag for this aircraft.
    /// Example: 16.9
    /// Constraints: Minimum value = 0, Maximum value = 100
    dragIndex: double;
    /// The fuel degrade percentage used for this mission.
    /// Example: 10.3
    /// Constraints: Minimum value = 0, Maximum value = 100
    fuelDegrade: double;
    /// Operating weight of the aircraft in pounds.
    /// Example: 251830.5
    /// Constraints: No constraints specified.
    opWeight: double;
    /// The mission index value for this mission. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
    /// Example: 44.1
    /// Constraints: No constraints specified.
    msnIndex: double;
    /// Total of all fuel required to complete the flight in pounds, including fuel to be dispensed on a refueling mission.
    /// Example: 180000.1
    /// Constraints: No constraints specified.
    rampFuel: double;
    /// Fuel required to start engines and taxi to the end of the runway in pounds.
    /// Example: 1500.1
    /// Constraints: No constraints specified.
    taxiFuel: double;
    /// Fuel at takeoff, which is calculated as the ramp fuel minus the taxi fuel in pounds.
    /// Example: 178500.1
    /// Constraints: No constraints specified.
    takeoffFuel: double;
    /// Fuel required from brake release to Top of Climb in pounds.
    /// Example: 7000.1
    /// Constraints: No constraints specified.
    climbFuel: double;
    /// Time required from brake release to Top of Climb expressed as HH:MM.
    /// Example: 00:13
    /// Constraints: Minimum length = 0, Maximum length = 6
    climbTime: string;
    /// Additional fuel burned at Top of Climb in pounds.
    /// Example: 500.1
    /// Constraints: No constraints specified.
    holdDownFuel: double;
    /// Additional fuel burned at Top of Climb for icing in pounds.
    /// Example: 1000.1
    /// Constraints: No constraints specified.
    tocIceFuel: double;
    /// Fuel remaining at Top of Climb in pounds.
    /// Example: 160000.1
    /// Constraints: No constraints specified.
    tocFuel: double;
    /// Fuel required to fly from Top of Climb to Top of Descent in pounds.
    /// Example: 155000.1
    /// Constraints: No constraints specified.
    enrouteFuel: double;
    /// Time required to fly from Top of Climb to Top of Descent expressed as HH:MM.
    /// Example: 06:30
    /// Constraints: Minimum length = 0, Maximum length = 6
    enrouteTime: string;
    /// Additional fuel burned at Top of Descent for thunderstorm avoidance in pounds.
    /// Example: 1000.1
    /// Constraints: No constraints specified.
    thunderAvoidFuel: double;
    /// Additional fuel burned at Top of Descent for icing in pounds.
    /// Example: 2000.1
    /// Constraints: No constraints specified.
    todIceFuel: double;
    /// Additional fuel burned at Top of Descent for the operational condition in pounds.
    /// Example: 5000.1
    /// Constraints: No constraints specified.
    opConditionFuel: double;
    /// Fuel remaining at Top of Descent in pounds.
    /// Example: 32000.1
    /// Constraints: No constraints specified.
    todFuel: double;
    /// Additional fuel burned at landing/missed approach for an early descent in pounds.
    /// Example: 500.1
    /// Constraints: No constraints specified.
    earlyDescentFuel: double;
    /// Additional fuel burned at landing/missed approach for icing during arrival in pounds.
    /// Example: 1000.1
    /// Constraints: No constraints specified.
    arrIceFuel: double;
    /// Additional fuel burned at the destination for holding in pounds.
    /// Example: 6000.1
    /// Constraints: No constraints specified.
    holdFuel: double;
    /// Additional time for holding at the destination expressed as HH:MM.
    /// Example: 01:00
    /// Constraints: Minimum length = 0, Maximum length = 6
    holdTime: string;
    /// Fuel burned from the initial approach point to landing in pounds.
    /// Example: 3000.1
    /// Constraints: No constraints specified.
    appLandingFuel: double;
    /// Fuel planned to be burned during the flight in pounds.
    /// Example: 145000.1
    /// Constraints: No constraints specified.
    burnedFuel: double;
    /// Fuel planned to be remaining on the airplane at landing in pounds.
    /// Example: 19000.1
    /// Constraints: No constraints specified.
    landingFuel: double;
    /// The minimum fuel on board required to divert in pounds.
    /// Example: 25000.1
    /// Constraints: No constraints specified.
    minDivertFuel: double;
    /// Fuel required to fly to alternate landing site 1 and land in pounds.
    /// Example: 6000.1
    /// Constraints: No constraints specified.
    arrAlternate1Fuel: double;
    /// Fuel required to fly to alternate landing site 2 and land in pounds.
    /// Example: 6000.1
    /// Constraints: No constraints specified.
    arrAlternate2Fuel: double;
    /// The amount of contingency fuel in pounds.
    /// Example: 3000.1
    /// Constraints: No constraints specified.
    contingencyFuel: double;
    /// The amount of reserve fuel in pounds.
    /// Example: 10000.1
    /// Constraints: No constraints specified.
    reserveFuel: double;
    /// The depressurization fuel required to fly from the Equal Time Point to the Last Suitable/First Suitable airfield at depressurization altitude in pounds.
    /// Example: 20000.1
    /// Constraints: No constraints specified.
    depressFuel: double;
    /// The amount of unusable fuel in pounds.
    /// Example: 2300.1
    /// Constraints: No constraints specified.
    unusableFuel: double;
    /// The amount of unidentified extra fuel required to get to min landing in pounds.
    /// Example: 5000.1
    /// Constraints: No constraints specified.
    unidentExtraFuel: double;
    /// The amount of identified extra fuel carried and not available in the burn plan in pounds.
    /// Example: 5000.1
    /// Constraints: No constraints specified.
    identExtraFuel: double;
    /// Total fuel remaining at alternate landing site 1 in pounds.
    /// Example: 18000.1
    /// Constraints: No constraints specified.
    remAlternate1Fuel: double;
    /// Total fuel remaining at alternate landing site 2 in pounds.
    /// Example: 18000.1
    /// Constraints: No constraints specified.
    remAlternate2Fuel: double;
    /// Total endurance time based on the fuel on board expressed as HH:MM.
    /// Example: 08:45
    /// Constraints: Minimum length = 0, Maximum length = 6
    enduranceTime: string;
    /// Name of the planned Standard Instrument Departure (SID) procedure.
    /// Example: RENV3B
    /// Constraints: Minimum length = 0, Maximum length = 32
    sid: string;
    /// Name of the planned Standard Terminal Arrival (STAR) procedure.
    /// Example: ADANA
    /// Constraints: Minimum length = 0, Maximum length = 32
    star: string;
    /// The GPS Receiver Autonomous Integrity Monitoring (RAIM) message. A RAIM system assesses the integrity of the GPS signals. This system predicts outages for a specified geographical area. These predictions are based on the location, path, and scheduled GPS satellite outages.
    /// Example: Failed by FAA SAPT 184022AUG2022
    /// Constraints: Minimum length = 0, Maximum length = 128
    gpsRAIM: string;
    /// The departure runway for this flight.
    /// Example: 05L
    /// Constraints: Minimum length = 0, Maximum length = 8
    depRunway: string;
    /// The arrival runway for this flight.
    /// Example: 05L
    /// Constraints: Minimum length = 0, Maximum length = 8
    arrRunway: string;
    /// The 1801 fileable route of flight string for this flight. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
    /// Example: RENV3B RENVI Y86 GOSVA/N0317F260 DCT EVLIT DCT UMUGI DCT NISIX DCT GIGOD DCT DIPEB DCT
GORPI Z80 TILAV L87 RAKIT Z717 PODUS Z130 MAG/N0298F220 Z20 KENIG/N0319F220 Z20 ORTAG T177
ESEGU Z20 BEBLA DCT MASEK/N0300F200 DCT GISEM/N0319F200 DCT BOMBI/N0276F060 DCT RIDSU DCT
    /// Constraints: Minimum length = 0, Maximum length = 1024
    routeString: string;
    /// Array of country codes for the countries overflown during this flight in ISO 3166-1 Alpha-2 format.
    /// Example: ['US', 'CA', 'UK']
    /// Constraints: No constraints specified.
    countryCodes: [string];
    /// The Extended Operations (ETOPS) rating used to calculate this flight plan.
    /// Example: 85 MINUTES
    /// Constraints: Minimum length = 0, Maximum length = 16
    etopsRating: string;
    /// Array of Extended Operations (ETOPS) adequate landing airfields that are within the mission region.
    /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
    /// Constraints: No constraints specified.
    etopsAirfields: [string];
    /// Array of Extended Operations (ETOPS) alternate suitable landing airfields that are within the mission region.
    /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
    /// Constraints: No constraints specified.
    etopsAltAirfields: [string];
    /// The Extended Operations (ETOPS) validity window for the alternate airfield.
    /// Example: LPLA: 0317Z-0722Z
    /// Constraints: Minimum length = 0, Maximum length = 64
    etopsValWindow: string;
    /// Remarks from the planners concerning this flight plan.
    /// Example: Flight plan is good for 2 days before airspace closes over the UK.
    /// Constraints: Minimum length = 0, Maximum length = 512
    plannerRemark: string;
    /// Remarks about the planned cargo associated with this flight plan.
    /// Example: Expecting 55,000 lbs. If different, call us.
    /// Constraints: Minimum length = 0, Maximum length = 512
    cargoRemark: string;
    /// Wind factor for the first half of the route. This is the average wind factor from first Top of Climb to the mid-time of the entire route in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
    /// Example: -1.1
    /// Constraints: No constraints specified.
    windFac1: double;
    /// Wind factor for the second half of the route. This is the average wind factor from the mid-time of the entire route to last Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    windFac2: double;
    /// Average wind factor from Top of Climb to Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
    /// Example: 5.1
    /// Constraints: No constraints specified.
    windFacAvg: double;
    /// Average temperature deviation of the primary, divert, and alternate path for the route between first Top of Climb and last Top of Descent in degrees Celsius.
    /// Example: 16.1
    /// Constraints: No constraints specified.
    avgTempDev: double;
    /// Array of Air Traffic Control (ATC) addresses.
    /// Example: ['EYCBZMFO', 'EUCHZMFP', 'ETARYXYX', 'EDUUZVZI']
    /// Constraints: No constraints specified.
    atcAddresses: [string];
    /// Air Traffic Control address filing the flight plan.
    /// Example: ETARYXYX
    /// Constraints: Minimum length = 0, Maximum length = 24
    originator: string;
    /// The number of aircraft flying this flight plan.
    /// Example: 1
    /// Constraints: No constraints specified.
    numAircraft: int32;
    /// The flight rules this flight plan is being filed under.
    /// Example: l
    /// Constraints: Minimum length = 0, Maximum length = 8
    flightRules: string;
    /// The type of flight (MILITARY, CIVILIAN, etc).
    /// Example: MILITARY
    /// Constraints: Minimum length = 0, Maximum length = 16
    flightType: string;
    /// A character string representation of the initial filed cruise speed for this flight (prepended values of K, N, and M represent kilometers per hour, knots, and Mach, respectively).
    /// Example: N0305
    /// Constraints: Minimum length = 0, Maximum length = 8
    initialCruiseSpeed: string;
    /// A character string representation of the initial filed altitude level for this flight (prepended values of F, S, A, and M represent flight level in hundreds of feet, standard metric level in tens of meters, altitude in hundreds of feet, and altitude in tens of meters, respectively).
    /// Example: F270
    /// Constraints: Minimum length = 0, Maximum length = 8
    initialFlightLevel: string;
    /// The first designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: EDDS
    /// Constraints: Minimum length = 0, Maximum length = 36
    arrAlternate1: string;
    /// The second designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: EDDM
    /// Constraints: Minimum length = 0, Maximum length = 36
    arrAlternate2: string;
    /// The designated alternate departure airfield, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: LFPO
    /// Constraints: Minimum length = 0, Maximum length = 36
    depAlternate: string;
    /// The wake turbulence category for this flight. The categories are assigned by the International Civil Aviation Organization (ICAO) and are based on maximum certified takeoff mass for the purpose of separating aircraft in flight due to wake turbulence. Valid values include LIGHT, MEDIUM, LARGE, HEAVY, and SUPER.
    /// Example: MEDIUM
    /// Constraints: Minimum length = 0, Maximum length = 8
    wakeTurbCat: string;
    /// The list of equipment on the aircraft as defined in the Flight Information Publications (FLIP) General Planning (GP) manual.
    /// Example: SDFGHIRTUWXYZ/H
    /// Constraints: Minimum length = 0, Maximum length = 36
    equipment: string;
    /// Additional remarks for air traffic control for this flight.
    /// Example: STS/STATE PBN/A1B2B5C2C4D2D4 EUR/PROTECTED
    /// Constraints: Minimum length = 0, Maximum length = 64
    notes: string;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    sourceDL: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: FlightPlan_Ingest_dataMode_Enum;
    /// Collection of air refueling events occurring on this flight.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    airRefuelEvents: [string];
    /// Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    flightPlanMessages: [string];
    /// Collection of waypoints associated with this flight plan.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    flightPlanWaypoints: [string];
    /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    flightPlanPointGroups: [string];
}
enum FlightPlan_Ingest_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

