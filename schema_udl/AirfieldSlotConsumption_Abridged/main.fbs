/// Airfield slot use data. Contains the dynamic data associated with the status and use of specific airfield slots.
table AirfieldSlotConsumption_Abridged {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// Unique identifier of the airfield slot for which this slot consumption record is referencing.
    /// Example: 3136498f-2969-3535-1432-e984b2e2e686
    /// Constraints: Minimum length = 1, Maximum length = 36
    idAirfieldSlot: string;
    /// Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).
    /// Example: APPROVED
    /// Constraints: Minimum length = 0, Maximum length = 9
    status: AirfieldSlotConsumption_Abridged_status_Enum;
    /// Flag indicating if the slot is occupied.
    /// Example: True
    /// Constraints: No constraints specified.
    occupied: bool;
    /// Identifying name of the aircraft using this slot. Names are often Prior Permission Required (PPR) numbers or other similar human-readable identifiers.
    /// Example: APRON1-230401001
    /// Constraints: Minimum length = 0, Maximum length = 64
    consumer: string;
    /// The aircraft Model Design Series designation of the aircraft occupying this slot.
    /// Example: C017A
    /// Constraints: Minimum length = 0, Maximum length = 36
    occAircraftMDS: string;
    /// The tail number of the aircraft occupying this slot.
    /// Example: N702JG
    /// Constraints: Minimum length = 0, Maximum length = 16
    occTailNumber: string;
    /// Array of call signs of the aircraft using this slot.
    /// Example: ['RCH123', 'ABC123', 'LLS442']
    /// Constraints: No constraints specified.
    callSigns: [string];
    /// Mission identifier using this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
    /// Example: AJM123456123
    /// Constraints: Minimum length = 0, Maximum length = 36
    missionId: string;
    /// Number of aircraft using this slot for this time.
    /// Example: 1
    /// Constraints: No constraints specified.
    numAircraft: int32;
    /// Time the aircraft began occupying this slot, in ISO 8601 UTC format with millisecond precision.
    /// Example: 2023-01-01T01:01:03.123Z
    /// Constraints: No constraints specified.
    occStartTime: string;
    /// The aircraft Model Design Series designation of the aircraft this slot is reserved for.
    /// Example: C017A
    /// Constraints: Minimum length = 0, Maximum length = 36
    resAircraftMDS: string;
    /// The tail number of the aircraft this slot is reserved for.
    /// Example: N702JG
    /// Constraints: Minimum length = 0, Maximum length = 16
    resTailNumber: string;
    /// Indicates the type of reservation (e.g. M for Mission, A for Aircraft, O for Other).
    /// Example: M
    /// Constraints: Minimum length = 0, Maximum length = 2
    resType: string;
    /// The reason the slot reservation was made.
    /// Example: Maintenance needed
    /// Constraints: Minimum length = 0, Maximum length = 256
    resReason: string;
    /// Mission identifier reserving this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
    /// Example: AJM123456123
    /// Constraints: Minimum length = 0, Maximum length = 36
    resMissionId: string;
    /// The start of the slot window, in ISO 8601 UTC format.
    /// Example: 2023-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    startTime: string;
    /// The end of the slot window, in ISO 8601 UTC format.
    /// Example: 2023-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    endTime: string;
    /// The desired time for aircraft action such as landing, take off, parking, etc., in ISO 8601 UTC format.
    /// Example: 2023-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    targetTime: string;
    /// Unique identifier of the sortie arriving at the slot start time.
    /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
    /// Constraints: Minimum length = 0, Maximum length = 36
    idArrSortie: string;
    /// Unique identifier of the sortie departing at the slot end time.
    /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
    /// Constraints: Minimum length = 0, Maximum length = 36
    idDepSortie: string;
    /// Alternate identifier of the sortie arriving at the slot start time provided by the source.
    /// Example: ALT-SORTIE-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    altArrSortieId: string;
    /// Alternate identifier of the sortie departing at the slot end time provided by the source.
    /// Example: ALT-SORTIE-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    altDepSortieId: string;
    /// Comments from the requester.
    /// Example: Sorry for the late notice.
    /// Constraints: Minimum length = 0, Maximum length = 128
    reqComment: string;
    /// Comments from the approver.
    /// Example: The request was denied due to inoperable fuel pumps.
    /// Constraints: Minimum length = 0, Maximum length = 128
    appComment: string;
    /// Short name of the organization requesting use of this slot.
    /// Example: TACC
    /// Constraints: Minimum length = 0, Maximum length = 32
    reqOrg: string;
    /// Initials of the person requesting the use of this slot. Use SYSTEM if this request is auto-generated by an auto-planning system.
    /// Example: CB
    /// Constraints: Minimum length = 0, Maximum length = 8
    reqInitials: string;
    /// Short name of the organization approving the use of this slot.
    /// Example: KCHS/BOPS
    /// Constraints: Minimum length = 0, Maximum length = 32
    appOrg: string;
    /// Initials of the person approving the use of this slot. Use SYSTEM if auto-approved without human involvement.
    /// Example: CB
    /// Constraints: Minimum length = 0, Maximum length = 8
    appInitials: string;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    sourceDL: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    origNetwork: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: AirfieldSlotConsumption_Abridged_dataMode_Enum;
}
enum AirfieldSlotConsumption_Abridged_status_Enum : byte {
    /// No description available.
    REQUESTED,
    /// No description available.
    APPROVED,
    /// No description available.
    DENIED,
    /// No description available.
    BLOCKED,
    /// No description available.
    OTHER
}

enum AirfieldSlotConsumption_Abridged_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

