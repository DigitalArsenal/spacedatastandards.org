/// Model representation of Signal time and frequency difference of arrival (TDOA/FDOA) information obtained by using passive RF based sensor phenomenologies and sensor triangulation.
table DiffOfArrival_Ingest {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: DIFFOFARRIVAL-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// Ob detection time in ISO 8601 UTC with microsecond precision.
    /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    obTime: string;
    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idOnOrbit: string;
    /// Sensor ID of the primary/1st sensor used for this measurement.
    /// Example: SENSOR1-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idSensor1: string;
    /// Sensor ID of the secondary/2nd sensor used for this measurement.
    /// Example: SENSOR2-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idSensor2: string;
    /// Catalog number of the target on-orbit object.
    /// Example: 25544
    /// Constraints: No constraints specified.
    satNo: int32;
    /// Optional identifier to indicate the specific tasking which produced this observation.
    /// Example: TASK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    taskId: string;
    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origObjectId: string;
    /// Optional identifier provided by DOA source to indicate the primary/1st sensor identifier used for this measurement. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: ORIGSENSOR1-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origSensorId1: string;
    /// Optional identifier provided by DOA source to indicate the secondary/2nd sensor identifier used for this this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: ORIGSENSOR2-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origSensorId2: string;
    /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: False
    /// Constraints: No constraints specified.
    uct: bool;
    /// The signal arrival delay relative to sensor 1 in seconds.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    sensor1Delay: double;
    /// The signal arrival delay relative to sensor 2 in seconds.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    sensor2Delay: double;
    /// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    /// Example: 45.1
    /// Constraints: Minimum value = -90, Maximum value = 90
    senlat: double;
    /// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: 120.1
    /// Constraints: Minimum value = -180, Maximum value = 180
    senlon: double;
    /// Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    senalt: double;
    /// Sensor 2 WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
    /// Example: 1.1
    /// Constraints: Minimum value = -90, Maximum value = 90
    sen2lat: double;
    /// Sensor 2 WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
    /// Example: 1.1
    /// Constraints: Minimum value = -180, Maximum value = 180
    sen2lon: double;
    /// Sensor 2 altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    sen2alt: double;
    /// Center frequency of the collect in Hz.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    frequency: double;
    /// Bandwidth of the signal in Hz.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    bandwidth: double;
    /// Delta range, in km. Delta range calculation convention is (sensor2 - sensor1).
    /// Example: 1.1
    /// Constraints: No constraints specified.
    deltaRange: double;
    /// One sigma uncertainty in delta range, in km.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    deltaRangeUnc: double;
    /// Delta range rate, in km/sec. Delta range rate calculation convention is (sensor2 - sensor1).
    /// Example: 1.1
    /// Constraints: No constraints specified.
    deltaRangeRate: double;
    /// One sigma uncertainty in the delta range rate, in km/sec.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    deltaRangeRateUnc: double;
    /// Signal to noise ratio, in dB.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    snr: double;
    /// Time difference of arrival of the center frequency signal, in seconds.  TDOA calculation convention is (sensor2 - sensor1).
    /// Example: 1.1
    /// Constraints: No constraints specified.
    tdoa: double;
    /// One sigma uncertainty in time difference of arrival of the center frequency signal, in seconds.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    tdoaUnc: double;
    /// Frequency difference of arrival of the center frequency signal, in Hz.  FDOA calculation convention is (sensor2 - sensor1).
    /// Example: 1.1
    /// Constraints: No constraints specified.
    fdoa: double;
    /// One sigma uncertainty in frequency difference of arrival of the center frequency signal, in Hz.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    fdoaUnc: double;
    /// Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
    /// Example: SURVEY
    /// Constraints: Minimum length = 0, Maximum length = 32
    collectionMode: string;
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: No example provided.
    /// Constraints: Minimum length = 0, Maximum length = 256
    rawFileURI: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: DiffOfArrival_Ingest_dataMode_Enum;
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    tags: [string];
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: Example descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    descriptor: string;
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    transactionId: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    origNetwork: string;
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    sourceDL: string;
}
enum DiffOfArrival_Ingest_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

