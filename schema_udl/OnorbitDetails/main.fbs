/// Contains details of the OnOrbit object.
table OnorbitDetails {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: ONORBITDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// UUID of the parent Onorbit record.
    /// Example: REF-ONORBIT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    idOnOrbit: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.
    /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    lastObTime: string;
    /// Current/latest visual magnitude in M.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    vismag: double;
    /// Minimum visual magnitude in M.
    /// Example: 5.23
    /// Constraints: No constraints specified.
    vismagMin: double;
    /// Maximum visual magnitude in M.
    /// Example: 15.23
    /// Constraints: No constraints specified.
    vismagMax: double;
    /// Mean visual magnitude in M.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    vismagMean: double;
    /// Current/latest radar cross section in meters squared.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    rcs: double;
    /// Minimum radar cross section in meters squared.
    /// Example: 5.23
    /// Constraints: No constraints specified.
    rcsMin: double;
    /// Maximum radar cross section in meters squared.
    /// Example: 15.23
    /// Constraints: No constraints specified.
    rcsMax: double;
    /// Mean radar cross section in meters squared.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    rcsMean: double;
    /// The total beginning of life delta V of the spacecraft, in meters per second.
    /// Example: 1000.1
    /// Constraints: No constraints specified.
    bolDeltaV: double;
    /// Maximum delta V available for this on-orbit spacecraft, in meters per second.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    maxDeltaV: double;
    /// The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
    /// Example: 50.1
    /// Constraints: No constraints specified.
    deltaVUnc: double;
    /// Estimated maximum burn duration for the object, in seconds.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    estDeltaVDuration: double;
    /// The number of distinct missions the spacecraft performs.
    /// Example: 2
    /// Constraints: No constraints specified.
    numMission: int32;
    /// Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.
    /// Example: ['Weather', 'Space Weather']
    /// Constraints: No constraints specified.
    missionTypes: [string];
    /// Type of the bus on the spacecraft.
    /// Example: A2100
    /// Constraints: Minimum length = 0, Maximum length = 32
    busType: string;
    /// GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.
    /// Example: 90.23
    /// Constraints: Minimum value = -180, Maximum value = 180
    geoSlot: double;
    /// GEO drift rate, if applicable in degrees per day.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    driftRate: double;
    /// Spacecraft dry mass (without fuel or disposables) in kilograms.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    dryMass: double;
    /// Mass of fuel and disposables at launch time in kilograms.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    additionalMass: double;
    /// Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
    /// Example: 5.23
    /// Constraints: No constraints specified.
    launchMassMin: double;
    /// Nominal mass of spacecraft and fuel at launch time, in kilograms.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    launchMass: double;
    /// Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
    /// Example: 15.23
    /// Constraints: No constraints specified.
    launchMassMax: double;
    /// Spacecraft beginning of life fuel mass, in orbit, in kilograms.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    bolFuelMass: double;
    /// The estimated total current mass of the spacecraft, in kilograms.
    /// Example: 500
    /// Constraints: No constraints specified.
    currentMass: double;
    /// The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
    /// Example: 50.1
    /// Constraints: No constraints specified.
    totalMassUnc: double;
    /// Spacecraft deployed area of solar array in meters squared.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    solarArrayArea: double;
    /// Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.
    /// Example: False
    /// Constraints: No constraints specified.
    maneuverable: bool;
    /// Estimated remaining fuel for the object in kilograms.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    fuelRemaining: double;
    /// Average cross sectional area in meters squared.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    crossSection: double;
    /// Average cross sectional area of the bus in meters squared.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    busCrossSection: double;
    /// Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    maxRadius: double;
    /// Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    colaRadius: double;
    /// The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    adeptRadius: double;
    /// The number of sub-satellites or deployable objects on the spacecraft.
    /// Example: 2
    /// Constraints: No constraints specified.
    numDeployable: int32;
    /// Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.
    /// Example: ['GOES-18A', 'GOES-18B']
    /// Constraints: No constraints specified.
    depNames: [string];
    /// Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
    /// Example: [20, 21]
    /// Constraints: No constraints specified.
    depEstMasses: [string];
    /// Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
    /// Example: [10, 5]
    /// Constraints: No constraints specified.
    depMassUncs: [string];
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// The name of the source who last provided an observation for this idOnOrbit.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    lastObSource: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: OnorbitDetails_dataMode_Enum;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    updatedAt: string;
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    updatedBy: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
}
enum OnorbitDetails_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

