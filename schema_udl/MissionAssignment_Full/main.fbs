/// Platform mission assignment data.
table MissionAssignment_Full {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: MISSIONASSIGNMENT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// The track ID that the status is referencing, addressee.
    /// Example: TRK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    trkId: string;
    /// The timestamp of the mission data, in ISO 8601 UTC format.
    /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    ts: string;
    /// The mission assignment discrete value.
    /// Example: MAD
    /// Constraints: Minimum length = 1, Maximum length = 16
    mad: string;
    /// Receipt/Compliance, values from TABLE B-9.
    /// Example: RC-123
    /// Constraints: Minimum length = 0, Maximum length = 16
    rc: string;
    /// Recurrence rate, receipt/compliance.
    /// Example: 2
    /// Constraints: No constraints specified.
    rr: int32;
    /// Track number objective.
    /// Example: TRACK_NUMBER
    /// Constraints: No constraints specified.
    tno: string;
    /// Threat warning environment.
    /// Example: THREAT_WARNING
    /// Constraints: Minimum length = 0, Maximum length = 16
    twenv: string;
    /// WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: 45.23
    /// Constraints: Minimum value = -90, Maximum value = 90
    lat: double;
    /// WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: 45.23
    /// Constraints: Minimum value = -180, Maximum value = 180
    lon: double;
    /// Origin of index number.
    /// Example: ORIGIN
    /// Constraints: Minimum length = 0, Maximum length = 16
    orginx: string;
    /// Environment.
    /// Example: ENV
    /// Constraints: Minimum length = 0, Maximum length = 16
    env: string;
    /// Strength.
    /// Example: STRENGTH
    /// Constraints: Minimum length = 0, Maximum length = 16
    sz: string;
    /// Index number.
    /// Example: 5
    /// Constraints: No constraints specified.
    index: int32;
    /// TARGET POSITION CONTINUATION WORD - number of associated dmpis.
    /// Example: 3
    /// Constraints: No constraints specified.
    c1associateddmpis: int32;
    /// TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.
    /// Example: C2SPC
    /// Constraints: No constraints specified.
    c2spc: string;
    /// TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.
    /// Example: C2AIR
    /// Constraints: No constraints specified.
    c2air: string;
    /// TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.
    /// Example: C2SUR
    /// Constraints: No constraints specified.
    c2sur: string;
    /// TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.
    /// Example: C2LND
    /// Constraints: No constraints specified.
    c2lnd: string;
    /// TARGET DATA CONTINUATION WORD - identity.
    /// Example: C2ID
    /// Constraints: Minimum length = 0, Maximum length = 16
    c2id: string;
    /// TARGET DATA CONTINUATION WORD - identity amplifying descriptor.
    /// Example: C2IDAMP
    /// Constraints: Minimum length = 0, Maximum length = 16
    c2idamplifyingdescriptor: string;
    /// TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.
    /// Example: 3
    /// Constraints: No constraints specified.
    c2alt: int32;
    /// TARGET DATA CONTINUATION WORD - course in increments of 1 degree.
    /// Example: 3
    /// Constraints: No constraints specified.
    c2crs: int32;
    /// TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.
    /// Example: 3
    /// Constraints: No constraints specified.
    c2spd: int32;
    /// TARGET DATA CONTINUATION WORD - special interest indicator.
    /// Example: C2SPECIAL
    /// Constraints: Minimum length = 0, Maximum length = 16
    c2specialinterestindicator: string;
    /// TARGET DATA CONTINUATION WORD - exercise indicator.
    /// Example: C2EXERCISE
    /// Constraints: Minimum length = 0, Maximum length = 16
    c2exerciseindicator: string;
    /// TARGET DATA CONTINUATION WORD - method of fire.
    /// Example: MOF
    /// Constraints: Minimum length = 0, Maximum length = 16
    c2exercisemof: string;
    /// POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    c3lat: double;
    /// POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    c3lon: double;
    /// POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    c3elv: double;
    /// TARGET DATA CONTINUATION WORD - point type 1.
    /// Example: C3PTL
    /// Constraints: Minimum length = 0, Maximum length = 16
    c3ptl: string;
    /// TARGET DATA CONTINUATION WORD - point number.
    /// Example: C3PTNUM
    /// Constraints: Minimum length = 0, Maximum length = 16
    c3ptnum: string;
    /// SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.
    /// Example: C4TGT
    /// Constraints: Minimum length = 0, Maximum length = 16
    c4tgt: string;
    /// SURFACE ATTACK CONTINUATION WORD - target defenses.
    /// Example: C4DEF
    /// Constraints: Minimum length = 0, Maximum length = 16
    c4def: string;
    /// SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
    /// Example: 5
    /// Constraints: No constraints specified.
    c4runin: int32;
    /// SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
    /// Example: 4
    /// Constraints: No constraints specified.
    c4egress: int32;
    /// SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.
    /// Example: 3
    /// Constraints: No constraints specified.
    c4numberofstores: int32;
    /// SURFACE ATTACK CONTINUATION WORD - type of stores.
    /// Example: 2
    /// Constraints: No constraints specified.
    c4typeofstores: int32;
    /// SURFACE ATTACK CONTINUATION WORD - time discrete.
    /// Example: C4TIMED
    /// Constraints: Minimum length = 0, Maximum length = 16
    c4timediscrete: string;
    /// SURFACE ATTACK CONTINUATION WORD - hour.
    /// Example: 4
    /// Constraints: No constraints specified.
    c4tm: int32;
    /// SURFACE ATTACK CONTINUATION WORD - minute.
    /// Example: 5
    /// Constraints: No constraints specified.
    c4colon: int32;
    /// SURFACE ATTACK CONTINUATION WORD - mode of delivery.
    /// Example: 5
    /// Constraints: No constraints specified.
    c4mod: int32;
    /// CONTINUATION WORD - hae adjustment, measured in 3.125 FT.
    /// Example: 5
    /// Constraints: No constraints specified.
    c5haeadj: int32;
    /// CONTINUATION WORD - time window.
    /// Example: 5
    /// Constraints: No constraints specified.
    c5tw: int32;
    /// CONTINUATION WORD - target bearing.
    /// Example: 5
    /// Constraints: No constraints specified.
    c5tgtbrng: int32;
    /// CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.
    /// Example: 5
    /// Constraints: No constraints specified.
    c5latlsb: int32;
    /// CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.
    /// Example: 5
    /// Constraints: No constraints specified.
    c5lonlsb: int32;
    /// CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.
    /// Example: 5
    /// Constraints: No constraints specified.
    c5elevationlsbs: int32;
    /// SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.
    /// Example: 5
    /// Constraints: No constraints specified.
    c5colon: int32;
    /// TARGETING CONTINUATION WORD - laser illuminator code.
    /// Example: 5
    /// Constraints: No constraints specified.
    c6laser: int32;
    /// TARGETING CONTINUATION WORD - index number, related, 0=NS.
    /// Example: 5
    /// Constraints: No constraints specified.
    c6intel: int32;
    /// TARGETING CONTINUATION WORD - track number, related to 3.
    /// Example: 5
    /// Constraints: No constraints specified.
    c6tnr3: int32;
    /// TARGETING CONTINUATION WORD - designator/seeker pulse code type.
    /// Example: C6DSPCT
    /// Constraints: Minimum length = 0, Maximum length = 16
    c6dspct: string;
    /// TARGETING CONTINUATION WORD - designator/seeker pulse code.
    /// Example: C6DSPC
    /// Constraints: Minimum length = 0, Maximum length = 16
    c6dspc: string;
    /// TARGETING CONTINUATION WORD - first pulse/last pulse mode.
    /// Example: C6FPLPM
    /// Constraints: Minimum length = 0, Maximum length = 16
    c6fplpm: string;
    /// TARGETING CONTINUATION WORD - long pulse mode.
    /// Example: C6LONGPM
    /// Constraints: Minimum length = 0, Maximum length = 16
    c6longpm: string;
    /// THIRD PARTY CONTINUATION WORD  - track number, index originator.
    /// Example: C7TNOR
    /// Constraints: No constraints specified.
    c7tnor: string;
    /// THIRD PARTY CONTINUATION WORD  - index number, third party.
    /// Example: 3
    /// Constraints: No constraints specified.
    c7in3p: int32;
    /// THIRD PARTY CONTINUATION WORD  - elevation angle, 2.
    /// Example: 5.23
    /// Constraints: No constraints specified.
    c7elang2: double;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    updatedAt: string;
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    updatedBy: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: MissionAssignment_Full_dataMode_Enum;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
}
enum MissionAssignment_Full_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

