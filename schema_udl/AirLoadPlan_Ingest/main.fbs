/// Information related to how an aircraft is loaded with cargo, equipment, and passengers.
table AirLoadPlan_Ingest {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: 0457f578-e29c-312e-85aa-0a04a430bdd0
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// Required ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: dec7a61a-cd97-4af0-b7bc-f4c3bb33341b
    /// Constraints: Minimum length = 1, Maximum length = 64
    externalId: string;
    /// The UDL ID of the mission this record is associated with.
    /// Example: 412bebb6-a45e-029c-ca51-e29f8a442b12
    /// Constraints: Minimum length = 0, Maximum length = 36
    idMission: string;
    /// The mission number of the mission supporting this load plan.
    /// Example: AJM123456123
    /// Constraints: Minimum length = 0, Maximum length = 16
    missionNumber: string;
    /// The UDL ID of the aircraft sortie this record is associated with.
    /// Example: 823acfbe6-f36a-157b-ef32-b47c9b589c3
    /// Constraints: Minimum length = 0, Maximum length = 36
    idSortie: string;
    /// The leg number of the mission supporting this load plan.
    /// Example: 200
    /// Constraints: No constraints specified.
    legNum: int32;
    /// The call sign of the mission supporting this load plan.
    /// Example: RCH1234
    /// Constraints: Minimum length = 0, Maximum length = 24
    callSign: string;
    /// The tail number of the aircraft supporting this load plan.
    /// Example: 77187
    /// Constraints: Minimum length = 0, Maximum length = 16
    tailNumber: string;
    /// The Model Design Series designation of the aircraft supporting this load plan.
    /// Example: C17A
    /// Constraints: Minimum length = 1, Maximum length = 128
    aircraftMDS: string;
    /// The departure International Civil Organization (ICAO) code of the departure airfield.
    /// Example: KCHS
    /// Constraints: Minimum length = 0, Maximum length = 4
    depICAO: string;
    /// Optional identifier of departure airfield with no International Civil Organization (ICAO) code.
    /// Example: W99
    /// Constraints: Minimum length = 0, Maximum length = 36
    depAirfield: string;
    /// The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format.
    /// Example: 2023-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    estDepTime: string;
    /// The arrival International Civil Organization (ICAO) code of the landing airfield.
    /// Example: ETAR
    /// Constraints: Minimum length = 0, Maximum length = 4
    arrICAO: string;
    /// Optional identifier of arrival airfield with no International Civil Organization (ICAO) code.
    /// Example: W99
    /// Constraints: Minimum length = 0, Maximum length = 36
    arrAirfield: string;
    /// The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format.
    /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    estArrTime: string;
    /// The number of crew members on the aircraft.
    /// Example: 5
    /// Constraints: No constraints specified.
    crewSize: int32;
    /// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.). Configuration meanings are determined by the data source.
    /// Example: C-1
    /// Constraints: Minimum length = 0, Maximum length = 128
    cargoConfig: string;
    /// Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat, etc.). Configuration meanings are determined by the data source.
    /// Example: Standard
    /// Constraints: Minimum length = 0, Maximum length = 128
    equipConfig: string;
    /// Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration meanings are determined by the data source.
    /// Example: ER
    /// Constraints: Minimum length = 0, Maximum length = 128
    tankConfig: string;
    /// The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in kilograms.
    /// Example: 100.1
    /// Constraints: No constraints specified.
    basicWeight: double;
    /// The basic weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
    /// Example: 2500.1
    /// Constraints: No constraints specified.
    basicMoment: double;
    /// The weight of usable fuel on board the aircraft, in kilograms.
    /// Example: 100.1
    /// Constraints: No constraints specified.
    fuelWeight: double;
    /// The fuel weight on board the aircraft multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
    /// Example: 2500.1
    /// Constraints: No constraints specified.
    fuelMoment: double;
    /// The estimated weight of usable fuel upon landing, in kilograms.
    /// Example: 100.1
    /// Constraints: No constraints specified.
    estLandingFuelWeight: double;
    /// The estimated weight of usable fuel upon landing multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
    /// Example: 2500.1
    /// Constraints: No constraints specified.
    estLandingFuelMoment: double;
    /// The basic weight of the aircraft including passengers and equipment, in kilograms.
    /// Example: 100.1
    /// Constraints: No constraints specified.
    operatingWeight: double;
    /// The operating weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
    /// Example: 2500.1
    /// Constraints: No constraints specified.
    operatingMoment: double;
    /// The weight of the cargo on board the aircraft, in kilograms.
    /// Example: 100.1
    /// Constraints: No constraints specified.
    cargoWeight: double;
    /// The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each individual cargo moment is the weight of the cargo multiplied by the distance between the reference datum and the cargo's center of gravity.
    /// Example: 2500.1
    /// Constraints: No constraints specified.
    cargoMoment: double;
    /// The operating weight of the aircraft including cargo but without usable fuel, in kilograms.
    /// Example: 100.1
    /// Constraints: No constraints specified.
    zeroFuelWeight: double;
    /// The zero fuel weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
    /// Example: 2500.1
    /// Constraints: No constraints specified.
    zeroFuelMoment: double;
    /// The center of gravity of the aircraft using the zero fuel weight and zero fuel total moment, as a percentage of the mean aerodynamic chord (%MAC).
    /// Example: 39.5
    /// Constraints: Minimum value = 0, Maximum value = 100
    zeroFuelCG: double;
    /// The total weight of the aircraft at takeoff including passengers, cargo, equipment, and usable fuel, in kilograms.
    /// Example: 100.1
    /// Constraints: No constraints specified.
    grossWeight: double;
    /// The sum of moments of all items making up the gross weight of the aircraft, in Newton-meters.
    /// Example: 2500.1
    /// Constraints: No constraints specified.
    grossMoment: double;
    /// The center of gravity of the aircraft using the gross weight and gross moment, as a percentage of the mean aerodynamic chord (%MAC).
    /// Example: 38.8
    /// Constraints: Minimum value = 0, Maximum value = 100
    grossCG: double;
    /// The gross weight of the aircraft upon landing, in kilograms.
    /// Example: 100.1
    /// Constraints: No constraints specified.
    landingWeight: double;
    /// The sum of moments of all items making up the gross weight of the aircraft upon landing, in Newton-meters.
    /// Example: 2500.1
    /// Constraints: No constraints specified.
    landingMoment: double;
    /// The center of gravity of the aircraft using the landing weight and landing moment, as a percentage of the mean aerodynamic chord (%MAC).
    /// Example: 38.2
    /// Constraints: Minimum value = 0, Maximum value = 100
    landingCG: double;
    /// Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
    /// Example: 10
    /// Constraints: No constraints specified.
    cargoBayFSMin: int32;
    /// Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
    /// Example: 20
    /// Constraints: No constraints specified.
    cargoBayFSMax: int32;
    /// Width of the cargo bay, in meters.
    /// Example: 3.1
    /// Constraints: No constraints specified.
    cargoBayWidth: double;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2023-03-21T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    sourceDL: string;
    /// Source of the data.
    /// Example: source
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    origNetwork: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: AirLoadPlan_Ingest_dataMode_Enum;
}
enum AirLoadPlan_Ingest_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

