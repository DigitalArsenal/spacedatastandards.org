/// No description available.
table ItemTracking_Ingest {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// The tracking identifier of an item or person. May be similar in representation of a barcode or UPC.
    /// Example: ABC1234
    /// Constraints: Minimum length = 1, Maximum length = 36
    scanCode: string;
    /// The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
    /// Example: bID
    /// Constraints: Minimum length = 0, Maximum length = 36
    scGenTool: string;
    /// The ID of the scanner or input device.
    /// Example: 2051M
    /// Constraints: Minimum length = 1, Maximum length = 36
    scannerId: string;
    /// The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.
    /// Example: 2023-03-21T14:22:00.123Z
    /// Constraints: No constraints specified.
    ts: string;
    /// The UDL ID of the item this record is associated with.
    /// Example: 36054487-bcba-6e2d-4f3b-9f25738b2639
    /// Constraints: Minimum length = 0, Maximum length = 36
    idItem: string;
    /// The type of item that is being scanned (e.g. CARGO, PERSON, MAIL, MICAP, OTHER).
    /// Example: CARGO
    /// Constraints: Minimum length = 0, Maximum length = 32
    type: string;
    /// WGS84 latitude where the item was scanned, in degrees.
    /// Example: 45.23
    /// Constraints: Minimum value = -90, Maximum value = 90
    lat: double;
    /// WGS84 longitude where the item was scanned, in degrees.
    /// Example: 179.1
    /// Constraints: Minimum value = -180, Maximum value = 180
    lon: double;
    /// The type of scan for tracking the item within it's journey  (e.g. IN, OUT, RECEIVED, DELIVERED, TRANSIT, ABANDONDED, REFUSED, UNABLE, RETURNED, HELD, OTHER). For example, received and delivered are for when an item is received from or delivered to the end customer. In and out are for stops in between such as being loaded on an airplane or received at a warehouse.
    /// Example: TRANSIT
    /// Constraints: Minimum length = 0, Maximum length = 64
    scanType: string;
    /// The United States distinguished visitor code of the person scanned, only applicable to people.
    /// Example: DV-4
    /// Constraints: Minimum length = 0, Maximum length = 16
    dvCode: string;
    /// Optional notes or comments about the tracking data.
    /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    notes: string;
    /// Array of keys that may be associated with this tracked item.
    /// Example: ['tapeColor', 'hazmat']
    /// Constraints: No constraints specified.
    keys: [string];
    /// Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
    /// Example: ['yellow', 'false']
    /// Constraints: No constraints specified.
    values: [string];
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2023-03-21T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    sourceDL: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: ItemTracking_Ingest_dataMode_Enum;
}
enum ItemTracking_Ingest_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

