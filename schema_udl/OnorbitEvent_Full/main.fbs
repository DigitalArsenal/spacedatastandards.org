/// No description available.
table OnorbitEvent_Full {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: ONORBITEVENT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// The sources or SCG references from which the classification of this data is derived.
    /// Example: DERIVED_SOURCE
    /// Constraints: Minimum length = 0, Maximum length = 128
    derivedFrom: string;
    /// The declassification date of this data, in ISO 8601 UTC format.
    /// Example: 2021-01-01T01:02:02.123Z
    /// Constraints: No constraints specified.
    declassificationDate: string;
    /// Declassification string of this data.
    /// Example: DECLASS_STRING
    /// Constraints: Minimum length = 0, Maximum length = 256
    declassificationString: string;
    /// Unique identifier of the on-orbit object for this event.
    /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    idOnOrbit: string;
    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: 1
    /// Constraints: No constraints specified.
    satNo: int32;
    /// Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).
    /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origObjectId: string;
    /// Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    eventTime: string;
    /// Notes/remarks on the validity/accuracy of the eventTime.
    /// Example: Notes on validity
    /// Constraints: Minimum length = 0, Maximum length = 128
    eventTimeNotes: string;
    /// Organization ID of the operator of the on-orbit spacecraft at the time of the event.
    /// Example: OPERATORORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    operatorOrgId: string;
    /// Organization ID of the owner of the on-orbit spacecraft at the time of the event.
    /// Example: OWNERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    ownerOrgId: string;
    /// Unique identifier of the organization which leases this on-orbit spacecraft.
    /// Example: LESSEEORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    lesseeOrgId: string;
    /// Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.
    /// Example: OPERATEDONBEHALFOFORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    operatedOnBehalfOfOrgId: string;
    /// GEO position longitude at event time if applicable. Negative values are west.
    /// Example: 45.23
    /// Constraints: No constraints specified.
    geoPosition: double;
    /// GEO plane slot of the spacecraft at event time.
    /// Example: example_slot
    /// Constraints: Minimum length = 0, Maximum length = 16
    planeSlot: string;
    /// GEO slot plane number/designator of the spacecraft at event time.
    /// Example: PL_1
    /// Constraints: Minimum length = 0, Maximum length = 4
    planeNumber: string;
    /// Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).
    /// Example: Stable
    /// Constraints: Minimum length = 0, Maximum length = 128
    positionStatus: string;
    /// Maximum validity time of the event.
    /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    untilTime: string;
    /// Date time of official loss of the spacecraft.
    /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    officialLossDate: string;
    /// Net amount of the insurance claim for the event, in USD.
    /// Example: 10000.23
    /// Constraints: No constraints specified.
    netAmount: double;
    /// Underlying cause of the event.
    /// Example: CAUSE_EXAMPLE
    /// Constraints: Minimum length = 0, Maximum length = 128
    underlyingCause: string;
    /// Spacecraft capability loss incurred, as a fraction of 1.
    /// Example: 0.5
    /// Constraints: No constraints specified.
    capabilityLoss: double;
    /// Spacecraft capacity loss incurred, as a fraction of 1.
    /// Example: 0.5
    /// Constraints: No constraints specified.
    capacityLoss: double;
    /// Insurance loss incurred, as a fraction of 1.
    /// Example: 0.5
    /// Constraints: No constraints specified.
    insuranceLoss: double;
    /// Insurance loss incurred by 3rd party insurance, in USD.
    /// Example: 10000.23
    /// Constraints: No constraints specified.
    thirdPartyInsuranceLoss: double;
    /// Number of humans injured in the event.
    /// Example: 1
    /// Constraints: No constraints specified.
    injured: int32;
    /// Number of humans killed in the event.
    /// Example: 23
    /// Constraints: No constraints specified.
    killed: int32;
    /// Spacecraft life lost due to the event as a percent/fraction of 1.
    /// Example: 0.5
    /// Constraints: No constraints specified.
    lifeLost: double;
    /// Spacecraft age at the event in years.
    /// Example: 5.23
    /// Constraints: No constraints specified.
    ageAtEvent: double;
    /// Achieved phase of flight prior to the event.
    /// Example: Phase 2
    /// Constraints: Minimum length = 0, Maximum length = 64
    achievedFlightPhase: string;
    /// Phase of flight during which the event occurred.
    /// Example: Phase 2
    /// Constraints: Minimum length = 0, Maximum length = 64
    occurrenceFlightPhase: string;
    /// Faulty stage of flight for the event.
    /// Example: Phase 2
    /// Constraints: Minimum length = 0, Maximum length = 64
    stageAtFault: string;
    /// Equipment on the spacecraft which caused the event.
    /// Example: Example Equipment
    /// Constraints: Minimum length = 0, Maximum length = 64
    equipmentAtFault: string;
    /// Type of the equipment on the spacecraft which caused the event.
    /// Example: Example Equipment
    /// Constraints: Minimum length = 0, Maximum length = 64
    equipmentTypeAtFault: string;
    /// Specific part of the equipment on the spacecraft which caused the event.
    /// Example: Example Equipment
    /// Constraints: Minimum length = 0, Maximum length = 64
    equipmentPartAtFault: string;
    /// Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.
    /// Example: Example Equipment
    /// Constraints: Minimum length = 0, Maximum length = 64
    consequentialEquipmentFailure: string;
    /// Boolean indicating if the spacecraft is inclined.
    /// Example: False
    /// Constraints: No constraints specified.
    inclined: bool;
    /// Notes/description of the event.
    /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    description: string;
    /// Additional remarks on the event description.
    /// Example: Example remarks
    /// Constraints: Minimum length = 0, Maximum length = 512
    remarks: string;
    /// Additional insurance notes if the event is an official loss.
    /// Example: Insurance notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    insuranceLossNotes: string;
    /// Notes on capability loss at the time of event.
    /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    capabilityLossNotes: string;
    /// Additional insurance notes on coverages at the time of event.
    /// Example: Insurance notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    insuranceCarriedNotes: string;
    /// Additional notes on the equipment causing the event/loss.
    /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    equipmentCausingLossNotes: string;
    /// The type of on-orbit event being reported.
    /// Example: Type1
    /// Constraints: Minimum length = 0, Maximum length = 128
    eventType: string;
    /// The result of the reported event.
    /// Example: Example results
    /// Constraints: Minimum length = 0, Maximum length = 128
    eventResult: string;
    /// The status of the on-orbit object.
    /// Example: Status1
    /// Constraints: Minimum length = 0, Maximum length = 128
    objectStatus: string;
    /// Description of the satellite orbital position or regime.
    /// Example: Example description
    /// Constraints: Minimum length = 0, Maximum length = 128
    satellitePosition: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: OnorbitEvent_Full_dataMode_Enum;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    updatedAt: string;
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    updatedBy: string;
    /// No description provided.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    onOrbit: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
}
enum OnorbitEvent_Full_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

