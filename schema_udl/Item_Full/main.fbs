/// No description available.
table Item_Full {
    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: 22f1f6da-a568-655a-ea37-76d013d04853
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// The UDL ID of the air load plan this item is associated with.
    /// Example: 1038c389-d38e-270f-51cc-6a12e905abe8
    /// Constraints: Minimum length = 0, Maximum length = 36
    idAirLoadPlan: string;
    /// The tracking identifier of an item or person. May be similar in representation of a barcode or UPC. If no scanCode or tracking number equivalent is available, 'NONE' should be used.
    /// Example: 12345ABCD
    /// Constraints: Minimum length = 1, Maximum length = 36
    scanCode: string;
    /// The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
    /// Example: bID
    /// Constraints: Minimum length = 0, Maximum length = 36
    scGenTool: string;
    /// The item type of this record (e.g. EQUIPMENT, CARGO, PASSENGER).
    /// Example: CARGO
    /// Constraints: Minimum length = 1, Maximum length = 32
    type: string;
    /// The type of cargo (e.g. PALLET, ROLLING STOCK, LOOSE, OTHER). Applicable for cargo item types only.
    /// Example: PALLET
    /// Constraints: Minimum length = 0, Maximum length = 32
    cargoType: string;
    /// Name of the item. Applicable for equipment and cargo item types only.
    /// Example: Product Name
    /// Constraints: Minimum length = 0, Maximum length = 100
    name: string;
    /// The destination of the item, typically an ICAO or port code. Applicable for cargo and passenger item types only.
    /// Example: RMS
    /// Constraints: Minimum length = 0, Maximum length = 36
    destination: string;
    /// The departure code or location where this item has left or is leaving.
    /// Example: CHS
    /// Constraints: Minimum length = 0, Maximum length = 36
    departure: string;
    /// The name of the unit receiving this item.
    /// Example: 50 SBN
    /// Constraints: Minimum length = 0, Maximum length = 100
    receivingUnit: string;
    /// The military branch receiving this item.
    /// Example: Air Force
    /// Constraints: Minimum length = 0, Maximum length = 32
    receivingBranch: string;
    /// The latest acceptable arrival date of the item at the destination, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
    /// Example: 2023-03-13
    /// Constraints: No constraints specified.
    lastArrDate: string;
    /// The unit line number of this item.
    /// Example: T01ME01
    /// Constraints: Minimum length = 0, Maximum length = 16
    uln: string;
    /// Weight of the item in kilograms (if item is a passenger, include on-person bags).
    /// Example: 5443.335
    /// Constraints: No constraints specified.
    weight: double;
    /// Timestamp when the weight was taken, in ISO 8601 UTC format with millisecond precision.
    /// Example: 2023-03-13T16:06:00.123Z
    /// Constraints: No constraints specified.
    weightTS: string;
    /// The classification code of the commodity or group of commodities.
    /// Example: 2304116
    /// Constraints: Minimum length = 0, Maximum length = 50
    commodityCode: string;
    /// The classification system denoting the commodity code, commodityCode (e.g. AIR, WATER, NMFC, UFC, STCC, DODUNQ, etc.).
    /// Example: STCC
    /// Constraints: Minimum length = 0, Maximum length = 36
    commoditySys: string;
    /// The code denoting the type of material item.
    /// Example: 530500234
    /// Constraints: Minimum length = 0, Maximum length = 36
    productCode: string;
    /// The assigning system that denotes the type of material item, productCode (e.g. NSN-national stock number, NDC-national drug code, MPN-manufacturer part number, etc.).
    /// Example: NSN
    /// Constraints: Minimum length = 0, Maximum length = 32
    productSys: string;
    /// Width of the cargo in meters. Applicable for cargo item types only.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    width: double;
    /// Length of the cargo in meters. Applicable for cargo item types only.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    length: double;
    /// Height of the cargo in meters. Applicable for cargo item types only.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    height: double;
    /// The volume of the item, in cubic meters. Applicable for cargo item types only.
    /// Example: 7.8902
    /// Constraints: No constraints specified.
    volume: double;
    /// Center of gravity position of the item, measured from the item's front datum, in centimeters.
    /// Example: 112.014
    /// Constraints: No constraints specified.
    cg: double;
    /// The fuselage station of the item measured from the reference datum, in centimeters. Applicable for cargo and passenger item types only.
    /// Example: 412.1
    /// Constraints: No constraints specified.
    fs: double;
    /// How far left or right of centerline is the item in meters. Applicable for cargo and passenger item types only.
    /// Example: 3.1
    /// Constraints: No constraints specified.
    centerlineOffset: double;
    /// Moment of the item in Newton-meters. Applicable for equipment and cargo item types only.
    /// Example: 4000.1
    /// Constraints: No constraints specified.
    moment: double;
    /// Flag indicating this item is planned to be airdropped. Applicable for cargo and passenger item types only.
    /// Example: True
    /// Constraints: No constraints specified.
    airdrop: bool;
    /// Transportation Control Number of the cargo. Applicable for cargo item types only.
    /// Example: M1358232245912XXX
    /// Constraints: Minimum length = 0, Maximum length = 17
    tcn: string;
    /// Array of UN hazard classes or division codes that apply to this item.
    /// Example: [1.1, 1.2]
    /// Constraints: No constraints specified.
    hazCodes: [string];
    /// Net explosive weight of the item, in kilograms.
    /// Example: 51.437
    /// Constraints: No constraints specified.
    netExpWt: double;
    /// Flag indicating this item acts as a container and contains additional items.
    /// Example: True
    /// Constraints: No constraints specified.
    container: bool;
    /// Array of tracking identifiers that are contained within this item.
    /// Example: ['2UJ8843K', '745YV1T65']
    /// Constraints: No constraints specified.
    itemContains: [string];
    /// Number of pallet positions or equivalent on the aircraft, ship, or conveyance equipment that this item occupies.
    /// Example: 2
    /// Constraints: No constraints specified.
    numPalletPos: int32;
    /// United States Distinguished Visitor Code, only applicable to people.
    /// Example: DV-2
    /// Constraints: Minimum length = 0, Maximum length = 16
    dvCode: string;
    /// Optional notes or comments about this item.
    /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    notes: string;
    /// Array of keys that may be associated to this item. The entries in this array must correspond to the position index in the values array. This array must be the same length as values..
    /// Example: ['key1', 'key2']
    /// Constraints: No constraints specified.
    keys: [string];
    /// Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
    /// Example: ['value1', 'value2']
    /// Constraints: No constraints specified.
    values: [string];
    /// Name of the additional data format so downstream consuming applications can know how to parse it. Typically includes the source system name and the format name.
    /// Example: Alt Data Format
    /// Constraints: Minimum length = 0, Maximum length = 100
    altDataFormat: string;
    /// Name of the system that accepted this item from a customer. Where a user or application could go look for additional information.
    /// Example: Accepting System
    /// Constraints: Minimum length = 0, Maximum length = 100
    accSystem: string;
    /// Additional data required to find this item in the accepting system.
    /// Example: Accepting System Notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    accSysNotes: string;
    /// Array of keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysValues array. This array must be the same length as accSysValues.
    /// Example: ['System key1', 'System key2']
    /// Constraints: No constraints specified.
    accSysKeys: [string];
    /// Array of values for the keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysKeys array. This array must be the same length as accSysKeys.
    /// Example: ['System value1', 'System value2']
    /// Constraints: No constraints specified.
    accSysValues: [string];
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2023-03-21T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    updatedAt: string;
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    updatedBy: string;
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    sourceDL: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: Item_Full_dataMode_Enum;
}
enum Item_Full_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

