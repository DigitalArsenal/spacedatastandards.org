/// These services provide for posting and querying Weather Over Target information. The information contained within describes the current weather conditions over a target area or region to include navigational considerations such as altimeter settings, visibility, cloud heights etc.
table WeatherReport_Ingest {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: WEATHER-REPORT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// Unique identifier of the sensor making the weather measurement.
    /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
    /// Constraints: Minimum length = 0, Maximum length = 36
    idSensor: string;
    /// Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origSensorId: string;
    /// Identifier of the weather over target, which should remain the same on subsequent Weather Over Target records.
    /// Example: WEATHER-ID
    /// Constraints: Minimum length = 0, Maximum length = 128
    weatherId: string;
    /// Identifier of the ground imagery associated for this weather over target report.
    /// Example: GROUND-IMAGERY-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idGroundImagery: string;
    /// Identifier of the Site that is associated with this weather report.
    /// Example: AIRFIELD-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idSite: string;
    /// Identifier of the Airfield associated with this weather report.
    /// Example: 8fb38d6d-a3de-45dd-8974-4e3ed73e9449
    /// Constraints: Minimum length = 0, Maximum length = 36
    idAirfield: string;
    /// The International Civil Aviation Organization (ICAO) code of the airfield associated with this weather report.
    /// Example: KAFF
    /// Constraints: Minimum length = 0, Maximum length = 4
    icao: string;
    /// Optional observation or forecast ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: GDSSMB022408301601304517
    /// Constraints: Minimum length = 0, Maximum length = 36
    externalId: string;
    /// Optional location ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: TMDS060AD4OG03CC
    /// Constraints: Minimum length = 0, Maximum length = 36
    externalLocationId: string;
    /// Identifies the type of weather report (e.g. OBSERVATION, FORECAST, etc.).
    /// Example: FORECAST
    /// Constraints: Minimum length = 1, Maximum length = 32
    reportType: string;
    /// Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision.
    /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    obTime: string;
    /// Valid start time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
    /// Example: 2024-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    forecastStartTime: string;
    /// Valid end time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
    /// Example: 2024-01-01T18:00:00.123Z
    /// Constraints: No constraints specified.
    forecastEndTime: string;
    /// The central WGS-84 latitude of the weather report, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: 56.12
    /// Constraints: Minimum value = -90, Maximum value = 90
    lat: double;
    /// The central WGS-84 longitude of the weather report, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: -156.6
    /// Constraints: Minimum value = -180, Maximum value = 180
    lon: double;
    /// Point height above ellipsoid (WGS-84), in meters.
    /// Example: 123.12
    /// Constraints: No constraints specified.
    alt: double;
    /// Altitude of a pressure surface in the atmosphere above mean sea level, in meters.
    /// Example: 1000.0
    /// Constraints: No constraints specified.
    geoPotentialAlt: double;
    /// Specific pressures or heights where measurements are taken, labeled as either MANDATORY or SIGNIFICANT levels. Mandatory levels are at particular pressures at geopotential heights. Significant levels are at particular geometric heights.
    /// Example: MANDATORY
    /// Constraints: Minimum length = 0, Maximum length = 16
    dataLevel: string;
    /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
    /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    area: string;
    /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    atext: string;
    /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    /// Constraints: No constraints specified.
    agjson: string;
    /// Type of region as projected on the ground.
    /// Example: ST_Polygon
    /// Constraints: Minimum length = 0, Maximum length = 128
    atype: string;
    /// Number of dimensions of the geometry depicted by region.
    /// Example: 2
    /// Constraints: No constraints specified.
    andims: int32;
    /// Geographical spatial_ref_sys for region.
    /// Example: 4326
    /// Constraints: No constraints specified.
    asrid: int32;
    /// Expresses the speed of the wind in meters/second.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    windSpd: double;
    /// Average wind speed over a 1 minute period, in meters/second.
    /// Example: 12.1
    /// Constraints: No constraints specified.
    windSpdAvg: double;
    /// Expresses the max gust speed of the wind, in meters/second.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    windGust: double;
    /// Expresses the max gust speed of the wind recorded in a 10 minute period, in meters/second.
    /// Example: 13.2
    /// Constraints: No constraints specified.
    windGust10: double;
    /// The change in wind speed between two different altitudes divided by the vertical distance between them, in units of 1/sec.
    /// Example: 3.8
    /// Constraints: No constraints specified.
    vshear: double;
    /// The change in wind speed between two different lateral positions at a given altitude divided by the horizontal distance between them, in units of 1/sec.
    /// Example: 3.8
    /// Constraints: No constraints specified.
    hshear: double;
    /// Average radial velocity of wind as measured by radar with multi-beam configurations. Radial velocity is the component of wind velocity moving directly toward or away from a sensor's radar beam, in meters per second. Values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar).
    /// Example: -0.04
    /// Constraints: No constraints specified.
    radVel: double;
    /// Component of wind velocity moving directly toward or away from radar beam 1, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    /// Example: 4.4
    /// Constraints: No constraints specified.
    radVelBeam1: double;
    /// Component of wind velocity moving directly toward or away from radar beam 2, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    /// Example: -0.2
    /// Constraints: No constraints specified.
    radVelBeam2: double;
    /// Component of wind velocity moving directly toward or away from radar beam 3, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    /// Example: -0.2
    /// Constraints: No constraints specified.
    radVelBeam3: double;
    /// Component of wind velocity moving directly toward or away from radar beam 4, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    /// Example: 11.4
    /// Constraints: No constraints specified.
    radVelBeam4: double;
    /// Component of wind velocity moving directly toward or away from radar beam 5, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    /// Example: 4.1
    /// Constraints: No constraints specified.
    radVelBeam5: double;
    /// Direction the wind is blowing, in degrees clockwise from true north.
    /// Example: 75.1234
    /// Constraints: No constraints specified.
    windDir: double;
    /// Average wind direction over a 1 minute period, in degrees clockwise from true north.
    /// Example: 57.1
    /// Constraints: No constraints specified.
    windDirAvg: double;
    /// Wind direction corresponding to the peak wind speed during a 1 minute period, in degrees clockwise from true north.
    /// Example: 78.4
    /// Constraints: No constraints specified.
    windDirPeak: double;
    /// Wind direction corresponding to the peak wind speed during a 10 minute period, in degrees clockwise from true north.
    /// Example: 44.5
    /// Constraints: No constraints specified.
    windDirPeak10: double;
    /// The perceived temperature in degrees C.
    /// Example: 15.6
    /// Constraints: No constraints specified.
    windChill: double;
    /// The difference in wind direction recorded over a period of time, in degrees.
    /// Example: 9.1
    /// Constraints: No constraints specified.
    dirDev: double;
    /// Boolean describing whether or not the wind direction and/or speed is variable.
    /// Example: False
    /// Constraints: No constraints specified.
    windVar: bool;
    /// Covariance matrix, in knots and second based units.  The array values represent the lower triangular half of the covariance matrix. The size of the covariance matrix is 2x2.  The covariance elements are position dependent within the array with values ordered as follows: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y x&nbsp;&nbsp;&nbsp;&nbsp;1 y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3 
The cov array should contain only the lower left triangle values from top left down to bottom right, in order. 
    /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    windCov: [string];
    /// Array of cloud cover descriptions - each element can be maximum of 16 characters long. Intended as, but not constrained to, MIL-STD-6016 cloud cover designations (e.g. SKY CLEAR, SCATTERED, BROKEN, OVERCAST, SKY OBSCURED). Each element of the array corresponds to the elements in the cloudHght array specified respectively.
    /// Example: ['OVERCAST', 'BROKEN']
    /// Constraints: No constraints specified.
    cloudCover: [string];
    /// Array of cloud base heights in meters described by the cloudHght array. Each element of the array corresponds to the elements in the cloudCover array specified respectively.
    /// Example: [1.2, 2.2]
    /// Constraints: No constraints specified.
    cloudHght: [string];
    /// Describes the actual weather at position. Intended as, but not constrained to, MIL-STD-6016 actual weather (e.g. NO STATEMENT, NO SIGNIFICANT WEATHER, DRIZZLE, RAIN, SNOW, SNOW GRAINS, DIAMOND DUST, ICE PELLETS, HAIL, SMALL HAIL, MIST, FOG, SMOKE, VOLCANIC ASH, WIDESPREAD DUST, SAND, HAZE, WELL DEVELOPED DUST, SQUALLS, FUNNEL CLOUDS, SANDSTORM, DUSTSTORM, LOW CLOUDS, CLOUDY, GROUND FOG, DUST, HEAVY RAIN, THUNDERSTORMS AWT, HEAVY THUNDERSTORMS, HURRICANE TYPHOON CYCLONE, TROPICAL STORM, TORNADO, HIGH WINDS, LIGHTNING, FREEZING DRIZZLE, FREEZING RAIN, HEAVY SNOW, ICING, SNOW OR RAIN AND SNOW MIXED, SHOWERS, CLEAR).
    /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    actWeather: string;
    /// Used in conjunction with actWeather and weatherInt. Intended as, but not constrained to, MIL-STD-6016 actual weather descriptor (e.g. NO STATEMENT, SHALLOW, PATCHES, LOW DRIFTING, BLOWING, SHOWERS, THUNDERSTORMS, SUPERCOOLED).
    /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    weatherDesc: string;
    /// Weather Intensity. Used in conjunction with actWeather and weatherDesc. Intended as, but not constrained to, MIL-STD-6016 weather intensity (e.g. NO STATEMENT, LIGHT, MODERATE, HEAVY, IN VICINITY).
    /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    weatherInt: string;
    /// The Raw Meteorological Aerodrome Report (METAR) string.
    /// Example: KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015
    /// Constraints: Minimum length = 0, Maximum length = 512
    rawMETAR: string;
    /// Terminal Aerodrome Forecast (TAF) containing detailed weather predictions for a specific airport or aerodrome.
    /// Example: KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z=
    /// Constraints: Minimum length = 0, Maximum length = 1024
    rawTAF: string;
    /// Altimeter set to read zero at mean sea level in kilopascals.
    /// Example: 1234.456
    /// Constraints: No constraints specified.
    qnh: double;
    /// Visual distance in meters.
    /// Example: 1234.456
    /// Constraints: No constraints specified.
    visibility: double;
    /// The measurement of air temperature in degrees C.
    /// Example: 23.45
    /// Constraints: No constraints specified.
    temperature: double;
    /// The measurement of soil temperature in degrees C.
    /// Example: 22.4
    /// Constraints: No constraints specified.
    soilTemp: double;
    /// The measurement of air pressure in the atmosphere in kilopascals.
    /// Example: 101.2
    /// Constraints: No constraints specified.
    barPress: double;
    /// The speed at which water is being applied to a specific area in millimeters per hour.
    /// Example: 3.4
    /// Constraints: No constraints specified.
    precipRate: double;
    /// The amount of rain that has fallen in the past hour, in centimeters.
    /// Example: 1.2
    /// Constraints: No constraints specified.
    rainHour: double;
    /// The power per unit area received from the Sun in the form of electromagnetic radiation as measured in the wavelength range of the measuring instrument. The solar irradiance is measured in watt per square meter (W/m2).
    /// Example: 1234.456
    /// Constraints: No constraints specified.
    solarRad: double;
    /// The amount of radiation that reaches earth's surface after being scattered by the atmosphere, in Watts per square meter.
    /// Example: 234.5
    /// Constraints: No constraints specified.
    difRad: double;
    /// The amount of radiation that changes direction as a function of atmospheric density, in Watts per square meter.
    /// Example: 56.7
    /// Constraints: No constraints specified.
    refRad: double;
    /// Sensor WGS84 latitude at obTime in degrees. -90 to 90 degrees (negative values south of equator). This includes pilot reports or other means of weather observation.
    /// Example: 12.456
    /// Constraints: Minimum value = -90, Maximum value = 90
    senlat: double;
    /// Sensor WGS84 longitude at obTime in degrees. -180 to 180 degrees (negative values west of Prime Meridian). This includes pilot reports or other means of weather observation.
    /// Example: 123.456
    /// Constraints: Minimum value = -180, Maximum value = 180
    senlon: double;
    /// Sensor altitude at obTime in km. This includes pilot reports or other means of weather observation.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    senalt: double;
    /// The temperature at which air is saturated with water vapor, in degrees C.
    /// Example: 15.6
    /// Constraints: No constraints specified.
    dewPoint: double;
    /// The percentage of water vapor in the atmosphere.
    /// Example: 34.456
    /// Constraints: No constraints specified.
    relHumidity: double;
    /// An indication of how much the atmosphere refracts light.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    indexRefraction: double;
    /// The volumetric percentage of soil water contained in a given volume of soil.
    /// Example: 3.5
    /// Constraints: Minimum value = 0, Maximum value = 100
    soilMoisture: double;
    /// Describes in which direction (if any) that better weather conditions exist. Intended as, but not constrained to, MIL-STD-6016 surrounding weather designations (e.g. NO STATEMENT, BETTER TO NORTH, BETTER TO EAST, BETTER TO SOUTH, BETTER TO WEST).
    /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    surroundingWeather: string;
    /// Amplifies the actual weather being reported. Intended as, but not constrained to, MIL-STD-6016 weather amplification designations (e.g. NO STATEMENT, NO SCATTERED BROKEN MEDIUM CLOUD, SCATTERED BROKEN MEDIUM CLOUDS, GUSTY WINDS AT SERVICE, FOG IN VALLEYS, HIGHER TERRAIN OBSCURED, SURFACE CONDITIONS VARIABLE, SURFACE WIND NE, SURFACE WIND SE, SURFACE WIND SW, SURFACE WIND NW, PRESENCE OF CUMULONIMBUS).
    /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    weatherAmp: string;
    /// Reports the lowest altitude at which contrails are occurring, in meters.
    /// Example: 123.123
    /// Constraints: No constraints specified.
    contrailHghtLower: double;
    /// Reports the highest altitude at which contrails are occurring, in meters.
    /// Example: 123.123
    /// Constraints: No constraints specified.
    contrailHghtUpper: double;
    /// Reports the highest altitude at which icing or freezing rain is occurring, in meters.
    /// Example: 123.123
    /// Constraints: No constraints specified.
    icingUpperLimit: double;
    /// Reports the lowest altitude at which icing or freezing rain is occurring, in meters.
    /// Example: 123.123
    /// Constraints: No constraints specified.
    icingLowerLimit: double;
    /// Describes the flight conditions in route to the target  (NO STATEMENT, MAINLY IFR, MAINLY VFR, THUNDERSTORMS). MAINLY IFR:&nbsp;&nbsp;Predominantly Instrument Flight Rules. MAINLY VFR:&nbsp;&nbsp;Predominantly Visual Flight Rules. THUNDERSTORMS:&nbsp;&nbsp;Thunderstorms expected in route. 
    /// Example: THUNDERSTORMS
    /// Constraints: Minimum length = 0, Maximum length = 32
    enRouteWeather: string;
    /// Flag indicating detection of a cloud-to-cloud lightning event.
    /// Example: True
    /// Constraints: No constraints specified.
    ccEvent: bool;
    /// Array of UDL record types (SENSOR, WEATHERDATA) that are related to this WeatherReport record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: ['SENSOR', 'WEATHERDATA']
    /// Constraints: No constraints specified.
    srcTyps: [string];
    /// Array of UUID(s) of the UDL data record(s) that are related to this WeatherReport record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
    /// Example: ['e609a90d-4059-4043-9f1a-fd7b49a3e1d0', 'c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52']
    /// Constraints: No constraints specified.
    srcIds: [string];
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
    /// Time the row was created in the database.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: WeatherReport_Ingest_dataMode_Enum;
}
enum WeatherReport_Ingest_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

