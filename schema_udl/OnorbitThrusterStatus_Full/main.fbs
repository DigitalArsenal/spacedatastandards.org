/// Status information for OnorbitThruster objects.
table OnorbitThrusterStatus_Full {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: af103c-1f917dc-002c1bd
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
    /// Example: ff7dc909-e8b4-4a54-8529-1963d4e9b353
    /// Constraints: Minimum length = 1, Maximum length = 36
    idOnorbitThruster: string;
    /// Identifier of this thruster.
    /// Example: REA1
    /// Constraints: Minimum length = 0, Maximum length = 32
    name: string;
    /// Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.
    /// Example: 2024-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    statusTime: string;
    /// Minimum available propellant mass for this thruster's type, in kilograms.
    /// Example: 0.1
    /// Constraints: No constraints specified.
    propMassMin: double;
    /// Average available propellant mass for this thruster's type, in kilograms.
    /// Example: 907.6
    /// Constraints: No constraints specified.
    propMassAvg: double;
    /// Median available propellant mass for this thruster's type, in kilograms.
    /// Example: 200.1
    /// Constraints: No constraints specified.
    propMassMedian: double;
    /// Maximum available propellant mass for this thruster's type, in kilograms.
    /// Example: 2333.3
    /// Constraints: No constraints specified.
    propMassMax: double;
    /// Total fuel mass available for this thruster's type, in kilograms.
    /// Example: 100.1
    /// Constraints: No constraints specified.
    fuelMass: double;
    /// 1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    fuelMassUnc: double;
    /// Total delta-velocity available for this thruster's type, in meters per second.
    /// Example: 100.1
    /// Constraints: No constraints specified.
    totalDeltaV: double;
    /// Minimum available delta-velocity for this thruster, in meters per second.
    /// Example: 0.1
    /// Constraints: No constraints specified.
    minDeltaV: double;
    /// Estimated available delta-velocity for this thruster, in meters per second.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    estDeltaV: double;
    /// Maximum available delta-velocity for this thruster, in meters per second.
    /// Example: 100.1
    /// Constraints: No constraints specified.
    maxDeltaV: double;
    /// Maximum available thrust for this thruster, in newtons.
    /// Example: 22.1
    /// Constraints: No constraints specified.
    thrustMax: double;
    /// Specific impulse for this thruster, in seconds.
    /// Example: 300.1
    /// Constraints: No constraints specified.
    isp: double;
    /// Flag indicating if this thruster is operational.
    /// Example: True
    /// Constraints: No constraints specified.
    operational: bool;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    origNetwork: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: OnorbitThrusterStatus_Full_dataMode_Enum;
}
enum OnorbitThrusterStatus_Full_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

