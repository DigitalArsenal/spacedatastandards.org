/// A monoradar record contains the raw, and in some cases, processed target reports from primary and secondary air surveillance radars.  All target positions for monoradar reports are recorded as range and azimuth from geographical North relative to the detecting radar site.  In the case of secondary surveillance radars, interrogation response codes are provided as well as quality and validation characteristics, when available in the particular record type used to generate the record.
table MonoRadar_Ingest {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: MONORADAR-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// Test target indicator.
    /// Example: TTI
    /// Constraints: Minimum length = 0, Maximum length = 16
    tti: string;
    /// ID of the radar site or station providing the data.
    /// Example: REF-SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idSensor: string;
    /// Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90 degrees (negative values south of equator).
    /// Example: 45.23
    /// Constraints: Minimum value = -90, Maximum value = 90
    senlat: double;
    /// Sensor WGS84 longitude, in degrees, at time of observation (ts).  -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: 45.23
    /// Constraints: Minimum value = -180, Maximum value = 180
    senlon: double;
    /// Sensor altitude, in kilometers, at time of observation (ts).
    /// Example: 100.23
    /// Constraints: No constraints specified.
    senalt: double;
    /// System Area Code.
    /// Example: 10
    /// Constraints: No constraints specified.
    sac: int32;
    /// System Identification Code.
    /// Example: 40
    /// Constraints: No constraints specified.
    sic: int32;
    /// Aircraft identification from an aircraft equipped with a Mode S transponder.
    /// Example: TGT-ID
    /// Constraints: Minimum length = 0, Maximum length = 16
    tgtid: string;
    /// Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.
    /// Example: ADDR-ID
    /// Constraints: Minimum length = 0, Maximum length = 16
    addr: string;
    /// Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).
    /// Example: CAT48
    /// Constraints: Minimum length = 1, Maximum length = 16
    msgfmt: string;
    /// Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR', etc..).
    /// Example: BCN
    /// Constraints: Minimum length = 1, Maximum length = 16
    msgtyp: string;
    /// Flag indicating military message.
    /// Example: True
    /// Constraints: No constraints specified.
    af: bool;
    /// Flag indicating FAA/Civ message.
    /// Example: True
    /// Constraints: No constraints specified.
    faa: bool;
    /// Flag indicating whether Special Position Indicator (SPI) present in interrogation response.
    /// Example: True
    /// Constraints: No constraints specified.
    spi: bool;
    /// Flag indicating whether AIMS present.
    /// Example: True
    /// Constraints: No constraints specified.
    aims: bool;
    /// Flag indicating that target was detected using data from an MTI receiver.
    /// Example: True
    /// Constraints: No constraints specified.
    mti: bool;
    /// Number of beacon hits received on the target.
    /// Example: 12
    /// Constraints: No constraints specified.
    bcnhits: int32;
    /// Target detection time, in ISO 8601 UTC format with microsecond precision.
    /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    ts: string;
    /// Message time, in ISO 8601 UTC format with microsecond precision. This is the time that the data message was released from the site.
    /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    msgts: string;
    /// Measured slant range to target from the observing site, in km.
    /// Example: 100.23
    /// Constraints: No constraints specified.
    rng: double;
    /// Target azimuth, measured from the observing site, in degrees from true North.  If Azimuth Change Pulse (acp) count is provided, az represents the computed angle.
    /// Example: 100.23
    /// Constraints: No constraints specified.
    az: double;
    /// Azimuth Change Pulse count at target detection.
    /// Example: 100
    /// Constraints: No constraints specified.
    acp: int32;
    /// Measured height of the target, in km. (for 3D radars).
    /// Example: 100.23
    /// Constraints: No constraints specified.
    alt3d: double;
    /// Mode-C altitude (uncorrected pressure altitude), in km.
    /// Example: 100.23
    /// Constraints: No constraints specified.
    mc: double;
    /// Status of the mode-C validity bit.
    /// Example: MCV
    /// Constraints: Minimum length = 0, Maximum length = 16
    mcv: string;
    /// Indicator that the mode-C response was garbled.
    /// Example: True
    /// Constraints: No constraints specified.
    mcg: bool;
    /// Mode-1 interrogation response (mission code).
    /// Example: MISSION_CODE
    /// Constraints: Minimum length = 0, Maximum length = 128
    m1: string;
    /// Status of the mode-1 validity bit.
    /// Example: M1V
    /// Constraints: Minimum length = 0, Maximum length = 16
    m1v: string;
    /// Indicator that the mode-1 response was garbled.
    /// Example: True
    /// Constraints: No constraints specified.
    m1g: bool;
    /// Mode-2 interrogation response (military identification code).
    /// Example: MILITARY_ID_CODE
    /// Constraints: Minimum length = 0, Maximum length = 128
    m2: string;
    /// Status of the mode-2 validity bit.
    /// Example: M2V
    /// Constraints: Minimum length = 0, Maximum length = 16
    m2v: string;
    /// Status of the mode-2 X-Pulse response validation.
    /// Example: M2XV
    /// Constraints: Minimum length = 0, Maximum length = 16
    m2xv: string;
    /// Indicator that the mode-2 response was garbled.
    /// Example: True
    /// Constraints: No constraints specified.
    m2g: bool;
    /// Mode-3/A interrogation response (aircraft identification).
    /// Example: AIRCRAFT_ID
    /// Constraints: Minimum length = 0, Maximum length = 128
    m3a: string;
    /// Status of the mode-3/A validity bit.
    /// Example: M3AV
    /// Constraints: Minimum length = 0, Maximum length = 16
    m3av: string;
    /// Indicator that the mode-3/A response was garbled.
    /// Example: True
    /// Constraints: No constraints specified.
    m3ag: bool;
    /// Status of the mode-3 X-Pulse response validation.
    /// Example: M3AXV
    /// Constraints: Minimum length = 0, Maximum length = 16
    m3axv: string;
    /// Mode-4 interrogation response (Identification Friend/Foe).
    /// Example: ID_FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 24
    m4: string;
    /// Status of the mode-4 validity bit.
    /// Example: M4V
    /// Constraints: Minimum length = 0, Maximum length = 16
    m4v: string;
    /// Mode-4 D1 & D2 response status.
    /// Example: STATUS
    /// Constraints: Minimum length = 0, Maximum length = 8
    m4d1d2: string;
    /// Mode-S Comm B message data.
    /// Example: MSCOMMB
    /// Constraints: Minimum length = 0, Maximum length = 16
    mscommb: string;
    /// Flag indicating military emergency.
    /// Example: False
    /// Constraints: No constraints specified.
    milemrgcy: bool;
    /// 7500 squawk present (hijack).
    /// Example: False
    /// Constraints: No constraints specified.
    code7500: bool;
    /// 7600 squawk present (loss of comm).
    /// Example: False
    /// Constraints: No constraints specified.
    code7600: bool;
    /// 7700 squawk present (general emergency).
    /// Example: False
    /// Constraints: No constraints specified.
    code7700: bool;
    /// Target ground speed, in meters/second.
    /// Example: 30.23
    /// Constraints: No constraints specified.
    grndspd: double;
    /// Target heading, in degrees from true North at the target position.
    /// Example: 30.23
    /// Constraints: No constraints specified.
    hdng: double;
    /// Value representing a unique reference to a track record within a particular track file.  Included when the  radar station outputs tracks.
    /// Example: 30
    /// Constraints: No constraints specified.
    trknum: int32;
    /// Type of sensor(s) maintaining track.
    /// Example: RAD
    /// Constraints: Minimum length = 0, Maximum length = 16
    rad: string;
    /// Indication of Horizontal Maneuver detection.
    /// Example: MAH
    /// Constraints: Minimum length = 0, Maximum length = 16
    mah: string;
    /// Climbing/Descending mode indicator.
    /// Example: CDM
    /// Constraints: Minimum length = 0, Maximum length = 24
    cdm: string;
    /// Array of local 2d-cartesian [x, y] coordinates of target, in km.
    /// Example: [1.2, 2.2]
    /// Constraints: No constraints specified.
    cartpos: [string];
    /// Runlength of the primary surveillance radar track, in degrees.
    /// Example: 44.23
    /// Constraints: No constraints specified.
    psrrl: double;
    /// Runlength of the secondary surveillance radar track, in degrees.
    /// Example: 44.23
    /// Constraints: No constraints specified.
    ssrl: double;
    /// Target range delta between PSR and SSR (reference PSR-SSR), in km.
    /// Example: 44.23
    /// Constraints: No constraints specified.
    rngdelt: double;
    /// Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.
    /// Example: 44.23
    /// Constraints: No constraints specified.
    azdelt: double;
    /// Warning/Error Conditions and Target Classification.
    /// Example: ['WARNING', 'WARNING']
    /// Constraints: No constraints specified.
    wectc: [string];
    /// Flag indicating report separated from different responses at same range.  Azimuth may have larger than normal error when present.
    /// Example: True
    /// Constraints: No constraints specified.
    mrgrpt: bool;
    /// ARTS quality.
    /// Example: QUALITY
    /// Constraints: Minimum length = 0, Maximum length = 64
    artsqual: string;
    /// Track eligibility flag.
    /// Example: ELIGIBILITY
    /// Constraints: Minimum length = 0, Maximum length = 24
    trkelig: string;
    /// Target confidence.
    /// Example: CONFIDENCE
    /// Constraints: Minimum length = 0, Maximum length = 24
    tgtconf: string;
    /// Target correlation flag.
    /// Example: CORRELATION
    /// Constraints: Minimum length = 0, Maximum length = 16
    tgtcorr: string;
    /// Data time-in-storage, in seconds. This is the amount of time elapsed between target detection and message transmission.
    /// Example: 0.4
    /// Constraints: No constraints specified.
    tis: double;
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    tags: [string];
    /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation.This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origSensorId: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: MonoRadar_Ingest_dataMode_Enum;
    /// Time the row was created in the database.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
}
enum MonoRadar_Ingest_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

