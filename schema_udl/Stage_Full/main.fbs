/// Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.
table Stage_Full {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: STAGE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Identifier of the launch vehicle record for this stage.
    /// Example: LAUNCHVEHICLE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    idLaunchVehicle: string;
    /// Identifier of the Engine record for this stage.
    /// Example: ENGINE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    idEngine: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// The stage number of this launch stage.
    /// Example: 2
    /// Constraints: No constraints specified.
    stageNumber: int32;
    /// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
    /// Example: Electrostatic Ion
    /// Constraints: Minimum length = 0, Maximum length = 64
    type: string;
    /// ID of the organization that manufactures this launch stage.
    /// Example: 5feed5d7-d131-57e5-a3fd-acc173bca736
    /// Constraints: Minimum length = 0, Maximum length = 36
    manufacturerOrgId: string;
    /// The number of the specified engines on this launch stage.
    /// Example: 1
    /// Constraints: No constraints specified.
    numEngines: int32;
    /// Stage length in meters.
    /// Example: 25.13
    /// Constraints: No constraints specified.
    length: double;
    /// Stage maximum external diameter in meters.
    /// Example: 3.95
    /// Constraints: No constraints specified.
    diameter: double;
    /// Stage gross mass in kg.
    /// Example: 9956.1
    /// Constraints: No constraints specified.
    mass: double;
    /// Engine vernier or additional engine type.
    /// Example: vernier
    /// Constraints: Minimum length = 0, Maximum length = 32
    vernier: string;
    /// Number of vernier or additional engines.
    /// Example: 3
    /// Constraints: No constraints specified.
    numVernier: int32;
    /// Thrust of the stage main engine at sea level in kN.
    /// Example: 733.4
    /// Constraints: No constraints specified.
    mainEngineThrustSeaLevel: double;
    /// Thrust of the stage main engine in a vacuum in kN.
    /// Example: 733.4
    /// Constraints: No constraints specified.
    mainEngineThrustVacuum: double;
    /// Total thrust of the stage at sea level in kN.
    /// Example: 733.4
    /// Constraints: No constraints specified.
    thrustSeaLevel: double;
    /// Total thrust of the stage in a vacuum in kN.
    /// Example: 733.4
    /// Constraints: No constraints specified.
    thrustVacuum: double;
    /// Total burn time of the stage engines in seconds.
    /// Example: 256.3
    /// Constraints: No constraints specified.
    burnTime: double;
    /// Number of burns for the stage engines.
    /// Example: 1
    /// Constraints: No constraints specified.
    numBurns: int32;
    /// Total burn time of the vernier or additional stage engines in seconds.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    vernierBurnTime: double;
    /// Total number of burns of the vernier or additional stage engines.
    /// Example: 4
    /// Constraints: No constraints specified.
    vernierNumBurns: int32;
    /// Total thrust of one of the vernier or additional engines at sea level in kN.
    /// Example: 4.1
    /// Constraints: No constraints specified.
    vernierThrustSeaLevel: double;
    /// Total thrust of one of the vernier or additional engines in a vacuum in kN.
    /// Example: 3.2
    /// Constraints: No constraints specified.
    vernierThrustVacuum: double;
    /// Number of launch stage elements used in this stage.
    /// Example: 2
    /// Constraints: No constraints specified.
    numStageElements: int32;
    /// Boolean indicating if this launch stage is reusable.
    /// Example: True
    /// Constraints: No constraints specified.
    reusable: bool;
    /// Boolean indicating if this launch stage can be restarted.
    /// Example: True
    /// Constraints: No constraints specified.
    restartable: bool;
    /// Control thruster 1 type.
    /// Example: controlThruster1
    /// Constraints: Minimum length = 0, Maximum length = 64
    controlThruster1: string;
    /// Number of type control thruster 1.
    /// Example: 1
    /// Constraints: No constraints specified.
    numControlThruster1: int32;
    /// Control thruster 2 type.
    /// Example: controlThruster2
    /// Constraints: Minimum length = 0, Maximum length = 64
    controlThruster2: string;
    /// Number of type control thruster 2.
    /// Example: 1
    /// Constraints: No constraints specified.
    numControlThruster2: int32;
    /// Array of URLs of photos of the stage.
    /// Example: ['photoURL']
    /// Constraints: No constraints specified.
    photoURLs: [string];
    /// Description/notes of the stage.
    /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    notes: string;
    /// Description/notes of the stage avionics.
    /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    avionicsNotes: string;
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    tags: [string];
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    updatedAt: string;
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    updatedBy: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: Stage_Full_dataMode_Enum;
    /// No description provided.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    engine: string;
}
enum Stage_Full_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

