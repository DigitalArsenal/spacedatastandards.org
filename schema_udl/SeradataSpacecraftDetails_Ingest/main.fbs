/// On-orbit spacecraft details compiled by Seradata for a particular satellite.
table SeradataSpacecraftDetails_Ingest {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: SERADATASPACECRAFTDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// UUID of the parent Onorbit record, if available.
    /// Example: 503
    /// Constraints: Minimum length = 0, Maximum length = 36
    idOnOrbit: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// Spacecraft name.
    /// Example: name
    /// Constraints: Minimum length = 1, Maximum length = 64
    name: string;
    /// Description associated with the spacecraft.
    /// Example: description
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    description: string;
    /// Seradata international number.
    /// Example: number
    /// Constraints: Minimum length = 0, Maximum length = 16
    intlNumber: string;
    /// Seradata sector (e.g. Commercial, Military, Civil/Other).
    /// Example: Commercial
    /// Constraints: Minimum length = 0, Maximum length = 16
    sector: string;
    /// Apogee in km.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    apogee: double;
    /// Perigee in km.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    perigee: double;
    /// Spacecraft period in minutes.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    period: double;
    /// Seradata provided inclination in degrees.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    inclination: double;
    /// UUID of the prime manufacturer organization, if available.
    /// Example: 05c43360-382e-4aa2-b875-ed28945ff2e5
    /// Constraints: Minimum length = 0, Maximum length = 36
    primeManufacturerOrgId: string;
    /// Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc).
    /// Example: 3-Axis
    /// Constraints: Minimum length = 0, Maximum length = 32
    stabilizer: string;
    /// Spacecraft design life in days.
    /// Example: 231
    /// Constraints: No constraints specified.
    designLife: int32;
    /// Spacecraft expected life in days.
    /// Example: 231
    /// Constraints: No constraints specified.
    expectedLife: int32;
    /// Boolean indicating if the spacecraft was insured at launch.
    /// Example: True
    /// Constraints: No constraints specified.
    insuredAtLaunch: bool;
    /// Mass at launch in kg.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    launchMass: double;
    /// Mass dry in kg.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    dryMass: double;
    /// NORAD satellite number if available.
    /// Example: 1
    /// Constraints: No constraints specified.
    catalogNumber: int32;
    /// Mass dry in kg.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    totalPayloadPower: double;
    /// Spacecraft constellation.
    /// Example: GPS
    /// Constraints: Minimum length = 0, Maximum length = 64
    constellation: string;
    /// Spacecraft orbit category (e.g GEO, LEO, etc).
    /// Example: GEO
    /// Constraints: Minimum length = 0, Maximum length = 64
    orbitCategory: string;
    /// Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc).
    /// Example: Geostationary
    /// Constraints: Minimum length = 0, Maximum length = 64
    orbitSubCategory: string;
    /// Cost of launch in M USD.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    launchCost: double;
    /// Boolean indicating if the spacecraft launch cost is estimated.
    /// Example: True
    /// Constraints: No constraints specified.
    launchCostEstimated: bool;
    /// Boolean indicating if the spacecraft cost is estimated.
    /// Example: True
    /// Constraints: No constraints specified.
    costEstimated: bool;
    /// Cost of spacecraft at new in M USD.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    newCost: double;
    /// Combined cost of spacecraft at new in M USD.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    combinedNewCost: double;
    /// Boolean indicating if the spacecraft combined new cost is estimated.
    /// Example: True
    /// Constraints: No constraints specified.
    combinedCostEstimated: bool;
    /// Insured value of spacecraft at launch in M USD.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    insuredValueAtLaunch: double;
    /// Boolean indicating if the spacecraft insured value at launch is estimated.
    /// Example: True
    /// Constraints: No constraints specified.
    insuredValueLaunchEstimated: bool;
    /// Annual insured depreciaion factor as a percent fraction.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    annualInsuredDepreciationFactor: double;
    /// Boolean indicating if the spacecraft annualInsuredDepreciationFactor is estimated.
    /// Example: True
    /// Constraints: No constraints specified.
    annualInsuredDepreciationFactorEstimated: bool;
    /// Insurance premium at launch in M USD.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    insurancePremiumAtLaunch: double;
    /// Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated.
    /// Example: True
    /// Constraints: No constraints specified.
    insurancePremiumAtLaunchEstimated: bool;
    /// Number of humans carried on spacecraft.
    /// Example: 1
    /// Constraints: No constraints specified.
    numHumans: int32;
    /// Cubesat dispenser type.
    /// Example: cubesatDispenserType
    /// Constraints: Minimum length = 0, Maximum length = 64
    cubesatDispenserType: string;
    /// Mass category (e.g.  2500 - 3500kg  - Large Satellite, 10 - 100 kg - Microsatellite, etc).
    /// Example: 2500 - 3500kg  - Large Satellite
    /// Constraints: Minimum length = 0, Maximum length = 64
    massCategory: string;
    /// Seradata launch ID.
    /// Example: 11573
    /// Constraints: Minimum length = 0, Maximum length = 32
    launchId: string;
    /// Seradata launch ID.
    /// Example: 123
    /// Constraints: Minimum length = 0, Maximum length = 36
    launchVehicleId: string;
    /// Seradata launch vehicle family.
    /// Example: launchProviderFlightNumber
    /// Constraints: Minimum length = 0, Maximum length = 64
    launchProviderFlightNumber: string;
    /// Launch Site Name.
    /// Example: launchSiteName
    /// Constraints: Minimum length = 0, Maximum length = 64
    launchSiteName: string;
    /// Seradata Launch Site ID.
    /// Example: 28
    /// Constraints: Minimum length = 0, Maximum length = 32
    launchSiteId: string;
    /// Seradata launch country.
    /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 32
    launchCountry: string;
    /// Seradata launch provider.
    /// Example: launchProvider
    /// Constraints: Minimum length = 0, Maximum length = 128
    launchProvider: string;
    /// Seradata launch provider country.
    /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 32
    launchProviderCountry: string;
    /// Boolean indicating if the launch was commercial.
    /// Example: True
    /// Constraints: No constraints specified.
    commercialLaunch: bool;
    /// Seradata launch type (e.g. Launched, Future, etc).
    /// Example: Future
    /// Constraints: Minimum length = 0, Maximum length = 32
    launchType: string;
    /// Seradata launch characteristic (e.g. Expendable, Reusable (New), etc).
    /// Example: Expendable
    /// Constraints: Minimum length = 0, Maximum length = 64
    launchCharacteristic: string;
    /// Seradata launch number.
    /// Example: FN040
    /// Constraints: Minimum length = 0, Maximum length = 16
    launchNumber: string;
    /// Launch date.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    launchDate: string;
    /// Seradata remarks on launch date.
    /// Example: launchDateRemarks
    /// Constraints: Minimum length = 0, Maximum length = 64
    launchDateRemarks: string;
    /// Youtube link of launch.
    /// Example: youtubeLaunchLink
    /// Constraints: Minimum length = 0, Maximum length = 32
    youtubeLaunchLink: string;
    /// Spacecraft status (e.g. Inactive - Retired, Inactive - Re-entered, Active, etc).
    /// Example: Inactive - Retired
    /// Constraints: Minimum length = 0, Maximum length = 64
    status: string;
    /// Spacecraft owner name.
    /// Example: owner
    /// Constraints: Minimum length = 0, Maximum length = 128
    owner: string;
    /// Spacecraft owner country.
    /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 64
    ownerCountry: string;
    /// Spacecraft operator name.
    /// Example: operator
    /// Constraints: Minimum length = 0, Maximum length = 128
    operator: string;
    /// Spacecraft operator country.
    /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 64
    operatorCountry: string;
    /// Boolean indicating if the spacecraft was leased.
    /// Example: True
    /// Constraints: No constraints specified.
    leased: bool;
    /// Spacecraft order date.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    orderDate: string;
    /// Total capability lost as a percent fraction.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    capabilityLost: double;
    /// Total capacity lost as a percent fraction.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    capacityLost: double;
    /// Spacecraft primary mission and group.
    /// Example: primaryMissionGroup
    /// Constraints: Minimum length = 0, Maximum length = 64
    primaryMissionGroup: string;
    /// Spacecraft additional missions and groups.
    /// Example: additionalMissionsGroups
    /// Constraints: Minimum length = 0, Maximum length = 256
    additionalMissionsGroups: string;
    /// Number of insurance claims for this spacecraft.
    /// Example: 1
    /// Constraints: No constraints specified.
    totalClaims: int32;
    /// Number of injuries related to this spacecraft.
    /// Example: 1
    /// Constraints: No constraints specified.
    totalInjuries: int32;
    /// Number of fatalities related to this spacecraft.
    /// Example: 1
    /// Constraints: No constraints specified.
    totalFatalities: int32;
    /// Spacecraft name at launch.
    /// Example: nameAtLaunch
    /// Constraints: Minimum length = 0, Maximum length = 64
    nameAtLaunch: string;
    /// Spacecraft Bus ID.
    /// Example: BUS-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    busId: string;
    /// Current age in years.
    /// Example: 5.898630136986301
    /// Constraints: No constraints specified.
    currentAge: double;
    /// Spacecraft life lost as a percent fraction.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    lifeLost: double;
    /// WGS84 longitude of the spacecraft’s latest GEO position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: -8.23
    /// Constraints: No constraints specified.
    geoPosition: double;
    /// Spacecraft total insurance losses as a fraction.
    /// Example: 0.393
    /// Constraints: No constraints specified.
    insuranceLossesTotal: double;
    /// Spacecraft launch arranger.
    /// Example: launchArranger
    /// Constraints: Minimum length = 0, Maximum length = 64
    launchArranger: string;
    /// Spacecraft launch arranger country.
    /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 64
    launchArrangerCountry: string;
    /// Spacecraft serial number.
    /// Example: serialNumber
    /// Constraints: Minimum length = 0, Maximum length = 64
    serialNumber: string;
    /// Spacecraft program name.
    /// Example: programName
    /// Constraints: Minimum length = 0, Maximum length = 64
    programName: string;
    /// Spacecraft reused hull name.
    /// Example: reusedHullName
    /// Constraints: Minimum length = 0, Maximum length = 64
    reusedHullName: string;
    /// Spacecraft date of observation.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    dateOfObservation: string;
    /// Spacecraft latest latitude in degrees.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    lat: double;
    /// Spacecraft latest longitude in degrees.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    lon: double;
    /// Spacecraft latest altitude in km.
    /// Example: 36036.6330576414
    /// Constraints: No constraints specified.
    altitude: double;
    /// Spacecraft collision risk 1mm sqm latest.
    /// Example: 1.33
    /// Constraints: No constraints specified.
    collisionRiskMM: double;
    /// Spacecraft collision risk 1cm sqm latest.
    /// Example: 1.43
    /// Constraints: No constraints specified.
    collisionRiskCM: double;
    /// Spacecraft quantity.
    /// Example: 1
    /// Constraints: No constraints specified.
    quantity: int32;
    /// Spacecraft reusable flights.
    /// Example: reusableFlights
    /// Constraints: Minimum length = 0, Maximum length = 64
    reusableFlights: string;
    /// Notes on the spacecraft.
    /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    notes: string;
    /// Insurance notes for the spacecraft.
    /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    insuranceNotes: string;
    /// Insurance notes for the spacecraft.
    /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    launchNotes: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: SeradataSpacecraftDetails_Ingest_dataMode_Enum;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
}
enum SeradataSpacecraftDetails_Ingest_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

