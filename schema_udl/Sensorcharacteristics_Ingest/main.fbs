/// Model representation of characteristics and capabilities of a sensor.
table Sensorcharacteristics_Ingest {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: SENSORCHARACTERISTICS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Unique identifier of the parent sensor.
    /// Example: SENSOR-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    idSensor: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
    /// Azimuth rate acquisition limit (rad/min).
    /// Example: 10.23
    /// Constraints: No constraints specified.
    azimuthRate: double;
    /// Elevation rate acquisition limit (rad/min).
    /// Example: 10.23
    /// Constraints: No constraints specified.
    elevationRateGeolm: double;
    /// Minimum range measurement capability of the sensor (km).
    /// Example: 20.23
    /// Constraints: No constraints specified.
    minRangeLimit: double;
    /// Maximum observable range limit (km) -- sensor cannot acquire beyond this range.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    maxRangeLimit: double;
    /// For Orbiting Sensors, First Card Azimuth limit #1 (left, deg).
    /// Example: 20.23
    /// Constraints: No constraints specified.
    leftClockAngle: double;
    /// For Orbiting Sensors, First Card Azimuth limit #3 (left, deg).
    /// Example: 20.23
    /// Constraints: No constraints specified.
    rightClockAngle: double;
    /// The angle of the center of a phased array sensor.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    boresight: double;
    /// The number of degrees off of the boresight for the sensor (degrees).
    /// Example: 20.23
    /// Constraints: No constraints specified.
    boresightOffAngle: double;
    /// Negative Range-rate/relative velocity limit (km/sec).
    /// Example: 20.23
    /// Constraints: No constraints specified.
    negativeRangeRateLimit: double;
    /// Positive Range-rate/relative velocity limit (km/sec).
    /// Example: 20.23
    /// Constraints: No constraints specified.
    positiveRangeRateLimit: double;
    /// Absolute magnitude acquisition limit for optical sensors.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    magnitudeLimit: double;
    /// Beginning track angle limit (rad). Track angle is the angle between the camera axis and the gimbal plane. Values range from 0 - PI/2.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    trackAngle: double;
    /// Signal to Noise Ratio (in db). The values for this range from 0.0 - + 99.99 dB.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    minSignalNoiseRatio: double;
    /// The beam width of a Sensor's Fan (range). The values for this range from (0.0 to PI).
    /// Example: 3.1
    /// Constraints: No constraints specified.
    fanBeamWidth: double;
    /// Maximum taskable range of the sensor (km).
    /// Example: 20.23
    /// Constraints: No constraints specified.
    taskableRange: double;
    /// Maximum observable sensor range (km).
    /// Example: 20.23
    /// Constraints: No constraints specified.
    maxObservableRange: double;
    /// Radio frequency (if sensor is RF).
    /// Example: 20.23
    /// Constraints: No constraints specified.
    radioFrequency: double;
    /// Radar frequency of the sensor (if a radar sensor).
    /// Example: 20.23
    /// Constraints: No constraints specified.
    radarFrequency: double;
    /// Radar transmit power in Watts.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    transmitPower: double;
    /// Horizontal field of view.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    hFOV: double;
    /// Vertical field of view.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    vFOV: double;
    /// Horizontal pixel resolution.
    /// Example: 1000
    /// Constraints: No constraints specified.
    hResPixels: int32;
    /// Vertical pixel resolution.
    /// Example: 1000
    /// Constraints: No constraints specified.
    vResPixels: int32;
    /// Sensor band.
    /// Example: BAND
    /// Constraints: Minimum length = 0, Maximum length = 36
    band: string;
    /// Max deviation angle of the sensor in degrees.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    maxDeviationAngle: double;
    /// Optical sensor camera aperture.
    /// Example: 2.23
    /// Constraints: No constraints specified.
    aperture: double;
    /// Leftmost GEO belt longitude limit for this sensor (if applicable).
    /// Example: 20.23
    /// Constraints: No constraints specified.
    leftGeoBeltLimit: double;
    /// Rightmost GEO belt longitude limit for this sensor (if applicable).
    /// Example: 20.23
    /// Constraints: No constraints specified.
    rightGeoBeltLimit: double;
    /// For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the radar, in scans/minute.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    asrScanRate: double;
    /// For radar based sensors, K-factor is a relative indicator of refractivity that infers the amount of radar beam bending due to atmosphere. (1<K<2).
    /// Example: 1.4
    /// Constraints: No constraints specified.
    k: double;
    /// For radar based sensors, the focal point elevation of the radar at the site, in meters.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    focalPoint: double;
    /// For tower sensors, the physical height of the sensor tower, in meters.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    towerHeight: double;
    /// True North correction for the sensor, in ACP (Azimunth Change Pulse) count.
    /// Example: 10
    /// Constraints: No constraints specified.
    trueNorthCorrector: int32;
    /// Angle between magnetic north and true north at the sensor site, in degrees.
    /// Example: 45.23
    /// Constraints: No constraints specified.
    magDec: double;
    /// Peformance zone-1 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    z1MinRange: double;
    /// Peformance zone-2 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    z2MinRange: double;
    /// Peformance zone-1 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
    /// Example: 50.23
    /// Constraints: No constraints specified.
    z1MaxRange: double;
    /// Peformance zone-2 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
    /// Example: 50.23
    /// Constraints: No constraints specified.
    z2MaxRange: double;
    /// For radar based sensors, radar maximum unambiguous range, in km.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    radarMUR: double;
    /// For radar based sensors, probability of the indication of the presence of a radar target due to noise or interference.
    /// Example: 0.5
    /// Constraints: No constraints specified.
    probFalseAlarm: double;
    /// For radar based sensors, pulse repetition frequency, in Hz. Number of new pulses tranmistted per second.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    prf: double;
    /// For radar based sensors, radar pulse width, in microseconds. The transmit time of a pulse.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    radarPulseWidth: double;
    /// For radar based sensors, number of integrated pulses in a transmit cycle.
    /// Example: 10
    /// Constraints: No constraints specified.
    numIntegratedPulses: int32;
    /// Antenna true tilt, in degrees.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    trueTilt: double;
    /// Message data format transmitted by the sensor digitizer.
    /// Example: DATA_FORMAT
    /// Constraints: Minimum length = 0, Maximum length = 32
    radarMessageFormat: string;
    /// For radar based sensors, expression of the radar system noise, aggregated as an equivalent thermal noise value, in degrees Kelvin.
    /// Example: 3.5
    /// Constraints: No constraints specified.
    systemNoiseTemperature: double;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: Sensorcharacteristics_Ingest_dataMode_Enum;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
}
enum Sensorcharacteristics_Ingest_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

