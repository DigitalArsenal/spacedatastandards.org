/// Model representation of on-orbit object maneuver information for detected, possible, and confirmed maneuvers.
table Maneuver_Full {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: MANEUVER-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: 12
    /// Constraints: No constraints specified.
    satNo: int32;
    /// The time that the report or alert of this maneuver was generated, in ISO 8601 UTC format.
    /// Example: 2023-11-16T04:15:00.0001Z
    /// Constraints: No constraints specified.
    reportTime: string;
    /// Maneuver event start time in ISO 8601 UTC with microsecond precision. For maneuvers without start and end times, the start time is considered to be the maneuver event time.
    /// Example: 2023-11-16T01:05:16.835689Z
    /// Constraints: No constraints specified.
    eventStartTime: string;
    /// Maneuver event end time in ISO 8601 UTC with microsecond precision.
    /// Example: 2023-11-16T01:09:01.350012Z
    /// Constraints: No constraints specified.
    eventEndTime: string;
    /// The estimated total active burn time of a maneuver, in seconds. This includes the sum of all burns in numAccelPoints. Not to be confused with the total duration of the maneuver.
    /// Example: 600.72
    /// Constraints: No constraints specified.
    totalBurnTime: double;
    /// Maneuver orbit determination fit data end time in ISO 8601 UTC with microsecond precision.
    /// Example: 2023-11-16T03:55:51Z
    /// Constraints: No constraints specified.
    odFitEndTime: string;
    /// Target maneuvering on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
    /// Example: 12
    /// Constraints: Minimum length = 0, Maximum length = 36
    idOnOrbit: string;
    /// Optional ID of the sensor that detected this maneuver (for example, if detected by passive RF anomalies).
    /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idSensor: string;
    /// Boolean indicating this maneuver was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: False
    /// Constraints: No constraints specified.
    uct: bool;
    /// Uncertainty in the occurrence of this maneuver (0 - 1).
    /// Example: 0.5
    /// Constraints: No constraints specified.
    maneuverUnc: double;
    /// Optional purpose of the maneuver if known (e.g. North-South Station Keeping, East-West Station Keeping, Longitude Shift, Unknown).
    /// Example: North-South Station Keeping
    /// Constraints: Minimum length = 0, Maximum length = 64
    characterization: string;
    /// Uncertainty in the characterization or purpose assessment of this maneuver (0 - 1).
    /// Example: 0.15
    /// Constraints: No constraints specified.
    characterizationUnc: double;
    /// Optional source-provided identifier for this maneuver event. In the case where multiple maneuver records are submitted for the same event, this field can be used to tie them together to the same event.
    /// Example: EVENT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    eventId: string;
    /// Identifier provided by source to indicate the target on-orbit object performing this maneuver. This may be an internal identifier and not necessarily a valid satellite number/ID.
    /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origObjectId: string;
    /// Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origSensorId: string;
    /// Status of this maneuver (CANCELLED, PLANNED, POSSIBLE, REDACTED, VERIFIED). CANCELLED:  A previously planned maneuver whose execution was cancelled. PLANNED:  A maneuver planned to take place at the eventStartTime. POSSIBLE:  A possible maneuver detected by observation of the spacecraft or by evaluation of the spacecraft orbit. REDACTED:  A redaction of a reported possible maneuver that has been determined to have not taken place after further observation/evaluation. VERIFIED:  A maneuver whose execution has been verified, either by the owner/operator or observation/evaluation.
    /// Example: POSSIBLE
    /// Constraints: Minimum length = 0, Maximum length = 32
    status: string;
    /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors at the maneuver event time.
    /// Example: 0.715998327
    /// Constraints: No constraints specified.
    deltaPos: double;
    /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
    /// Example: -0.022172844
    /// Constraints: No constraints specified.
    deltaPosU: double;
    /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
    /// Example: -0.033700154
    /// Constraints: No constraints specified.
    deltaPosV: double;
    /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
    /// Example: -0.714861014
    /// Constraints: No constraints specified.
    deltaPosW: double;
    /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors at the maneuver event time.
    /// Example: 0.000631505
    /// Constraints: No constraints specified.
    deltaVel: double;
    /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
    /// Example: 3.50165629389647e-05
    /// Constraints: No constraints specified.
    deltaVelU: double;
    /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
    /// Example: 0.000544413
    /// Constraints: No constraints specified.
    deltaVelV: double;
    /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
    /// Example: -0.000318099
    /// Constraints: No constraints specified.
    deltaVelW: double;
    /// Difference in mass before and after the maneuver, in kg.
    /// Example: 0.15
    /// Constraints: No constraints specified.
    deltaMass: double;
    /// Optional identifier of the element set for the pre-maneuver orbit.
    /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
    /// Constraints: Minimum length = 0, Maximum length = 36
    preEventIdElset: string;
    /// No description provided.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    preEventElset: string;
    /// Optional identifier of the state vector for the pre-maneuver trajectory of the spacecraft.
    /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
    /// Constraints: Minimum length = 0, Maximum length = 36
    preEventIdStateVector: string;
    /// No description provided.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    preEventStateVector: string;
    /// Pre-event X component of position in ECI space, in km.
    /// Example: 3584.432545
    /// Constraints: No constraints specified.
    prePosX: double;
    /// Pre-event Y component of position in ECI space, in km.
    /// Example: 42028.43245
    /// Constraints: No constraints specified.
    prePosY: double;
    /// Pre-event Z component of position in ECI space, in km.
    /// Example: -1.97765
    /// Constraints: No constraints specified.
    prePosZ: double;
    /// Pre-event X component of velocity in ECI space, in km/sec.
    /// Example: -2.543266
    /// Constraints: No constraints specified.
    preVelX: double;
    /// Pre-event Y component of velocity in ECI space, in km/sec.
    /// Example: 0.24876
    /// Constraints: No constraints specified.
    preVelY: double;
    /// Pre-event Z component of velocity in ECI space, in km/sec.
    /// Example: 0.0067352
    /// Constraints: No constraints specified.
    preVelZ: double;
    /// Pre-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
    /// Example: 4.51e-07
    /// Constraints: No constraints specified.
    preRadiationPressCoeff: double;
    /// Pre-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
    /// Example: 0.000437116
    /// Constraints: No constraints specified.
    preBallisticCoeff: double;
    /// Pre-event spacecraft apogee (measured from Earth center), in kilometers.
    /// Example: 35802
    /// Constraints: No constraints specified.
    preApogee: double;
    /// Pre-event spacecraft perigee (measured from Earth center), in kilometers.
    /// Example: 35786.5
    /// Constraints: No constraints specified.
    prePerigee: double;
    /// Pre-event spacecraft orbital inclination, in degrees. 0-180.
    /// Example: 0.0336
    /// Constraints: Minimum value = 0, Maximum value = 180
    preInclination: double;
    /// Pre-event spacecraft eccentricity.
    /// Example: 0.00017
    /// Constraints: No constraints specified.
    preEccentricity: double;
    /// Pre-event spacecraft orbital period, in minutes.
    /// Example: 1436.12
    /// Constraints: No constraints specified.
    prePeriod: double;
    /// Pre-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
    /// Example: 98.3336
    /// Constraints: Minimum value = 0, Maximum value = 360
    preRAAN: double;
    /// Pre-event spacecraft orbital Semi-Major Axis (SMA), in kilometers.
    /// Example: 42165.1
    /// Constraints: No constraints specified.
    preSMA: double;
    /// Pre-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: -93.12
    /// Constraints: Minimum value = -180, Maximum value = 180
    preGeoLongitude: double;
    /// Pre-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
    /// Example: -0.0125
    /// Constraints: No constraints specified.
    preDriftRate: double;
    /// Pre-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
    /// Example: 0.215
    /// Constraints: No constraints specified.
    preSigmaU: double;
    /// Pre-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
    /// Example: 1.97
    /// Constraints: No constraints specified.
    preSigmaV: double;
    /// Pre-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
    /// Example: 0.208
    /// Constraints: No constraints specified.
    preSigmaW: double;
    /// Optional identifier of the element set for the post-maneuver orbit.
    /// Example: 225adf4c-8606-40a8-929e-63e22cffe220
    /// Constraints: Minimum length = 0, Maximum length = 36
    postEventIdElset: string;
    /// No description provided.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    postEventElset: string;
    /// Optional identifier of the state vector for the post-maneuver trajectory of the spacecraft.
    /// Example: d83a23f8-1496-485a-bd88-ec5808c73299
    /// Constraints: Minimum length = 0, Maximum length = 36
    postEventIdStateVector: string;
    /// No description provided.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    postEventStateVector: string;
    /// Post-event X component of position in ECI space, in km.
    /// Example: 3589.351957
    /// Constraints: No constraints specified.
    postPosX: double;
    /// Post-event Y component of position in ECI space, in km.
    /// Example: 42017.26823
    /// Constraints: No constraints specified.
    postPosY: double;
    /// Post-event Z component of position in ECI space, in km.
    /// Example: -1.27161796
    /// Constraints: No constraints specified.
    postPosZ: double;
    /// Post-event X component of velocity in ECI space, in km/sec.
    /// Example: -3.063152826
    /// Constraints: No constraints specified.
    postVelX: double;
    /// Post-event Y component of velocity in ECI space, in km/sec.
    /// Example: 0.261586769
    /// Constraints: No constraints specified.
    postVelY: double;
    /// Post-event Z component of velocity in ECI space, in km/sec.
    /// Example: 0.006842148
    /// Constraints: No constraints specified.
    postVelZ: double;
    /// Post-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
    /// Example: 4.51e-07
    /// Constraints: No constraints specified.
    postRadiationPressCoeff: double;
    /// Post-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
    /// Example: 0.000433209
    /// Constraints: No constraints specified.
    postBallisticCoeff: double;
    /// Post-event spacecraft apogee (measured from Earth center), in kilometers.
    /// Example: 35800.1
    /// Constraints: No constraints specified.
    postApogee: double;
    /// Post-event spacecraft perigee (measured from Earth center), in kilometers.
    /// Example: 35787.9
    /// Constraints: No constraints specified.
    postPerigee: double;
    /// Post-event spacecraft orbital inclination, in degrees. 0-180.
    /// Example: 0.0327
    /// Constraints: Minimum value = 0, Maximum value = 180
    postInclination: double;
    /// Post-event spacecraft eccentricity.
    /// Example: 0.000164
    /// Constraints: No constraints specified.
    postEccentricity: double;
    /// Post-event spacecraft orbital period, in minutes.
    /// Example: 1436.01
    /// Constraints: No constraints specified.
    postPeriod: double;
    /// Post-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
    /// Example: 98.3335
    /// Constraints: Minimum value = 0, Maximum value = 360
    postRAAN: double;
    /// Post-event spacecraft Semi-Major Axis (SMA), in kilometers.
    /// Example: 42164.87
    /// Constraints: No constraints specified.
    postSMA: double;
    /// Post-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: -93.15
    /// Constraints: Minimum value = -180, Maximum value = 180
    postGeoLongitude: double;
    /// Post-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
    /// Example: -0.0125
    /// Constraints: No constraints specified.
    postDriftRate: double;
    /// Post-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
    /// Example: 12.285
    /// Constraints: No constraints specified.
    postSigmaU: double;
    /// Post-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
    /// Example: 71.339
    /// Constraints: No constraints specified.
    postSigmaV: double;
    /// Post-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
    /// Example: 12.77
    /// Constraints: No constraints specified.
    postSigmaW: double;
    /// Optional maneuver cross-track/radial/in-track covariance array, in meter and second based units, in the following order: CR_R, CI_R, CI_I, CC_R, CC_I, CC_C, CT_R, CT_I, CT_C, CT_T.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    cov: [string];
    ///  Estimated mass of the object following the maneuver, in kg.
    /// Example: 1844.5
    /// Constraints: No constraints specified.
    postMass: double;
    /// Estimated area of the object following the maneuver, in meters squared.
    /// Example: 35.77
    /// Constraints: No constraints specified.
    postArea: double;
    /// Number of observations used to generate the maneuver data.
    /// Example: 10
    /// Constraints: No constraints specified.
    numObs: int32;
    /// Description and notes of the maneuver.
    /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    description: string;
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: Example descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    descriptor: string;
    /// Name of the state model used to generate the maneuver data.
    /// Example: Example name
    /// Constraints: Minimum length = 0, Maximum length = 32
    stateModel: string;
    /// Version of the state model used to generate the maneuver data.
    /// Example: 3
    /// Constraints: No constraints specified.
    stateModelVersion: double;
    /// The total number of estimated acceleration points during the maneuver.
    /// Example: 3
    /// Constraints: No constraints specified.
    numAccelPoints: int32;
    /// Array of elapsed times, in seconds from maneuver start time, at which each acceleration point is estimated. Number of elements must match the numAccelPoints.
    /// Example: [10.25, 50.56, 150.78]
    /// Constraints: No constraints specified.
    mnvrAccelTimes: [string];
    /// Array of estimated acceleration values, in meters per second squared. Number of elements must match the numAccelPoints.
    /// Example: [0.05, 0.1, 0.05]
    /// Constraints: No constraints specified.
    mnvrAccels: [string];
    /// Array of the 1-sigma uncertainties in estimated accelerations, in meters per second squared. Number of elements must match the numAccelPoints.
    /// Example: [0.0005, 0.001, 0.0005]
    /// Constraints: No constraints specified.
    mnvrAccelUncs: [string];
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: Maneuver_Full_dataMode_Enum;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: ['PROVIDER_TAG1', 'PROVIDERTAG2']
    /// Constraints: No constraints specified.
    tags: [string];
    /// Optional algorithm used to produce this record.
    /// Example: Example algorithm
    /// Constraints: Minimum length = 0, Maximum length = 64
    algorithm: string;
    /// Optional array of UDL data (elsets, state vectors, etc) UUIDs used to build this maneuver. See the associated sourcedDataTypes array for the specific types of data for the positionally corresponding UUIDs in this array (the two arrays must match in size).
    /// Example: ['SOURCEDDATA-ID', 'SOURCEDDATA-ID']
    /// Constraints: No constraints specified.
    sourcedData: [string];
    /// Optional array of UDL data types used to build this maneuver (e.g. EO, RADAR, RF, DOA, ELSET, SV). See the associated sourcedData array for the specific UUIDs of data for the positionally corresponding data types in this array (the two arrays must match in size).
    /// Example: ['EO', 'RADAR']
    /// Constraints: No constraints specified.
    sourcedDataTypes: Maneuver_Full_sourcedDataTypes_Enum;
    /// No description provided.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    onOrbit: string;
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    transactionId: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
}
enum Maneuver_Full_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

enum Maneuver_Full_sourcedDataTypes_Enum : byte {
    /// No description available.
    EO,
    /// No description available.
    RADAR,
    /// No description available.
    RF,
    /// No description available.
    DOA,
    /// No description available.
    ELSET,
    /// No description available.
    SV
}

