/// Model representation of space weather/solar, geomagnetic, and radiation belt indices.
table SGI_Full {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: SGI-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// ISO8601 UTC Time the data was received and processed from the source. Typically a source provides data for a date window with each transmission including past, present, and future predicted values.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    effectiveDate: string;
    /// ISO8601 UTC Time of the index value. This could be a past, current, or future predicted value. Note: sgiDate defines the start time of the time window for this  data record.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    sgiDate: string;
    /// The type of data contained in this record (e.g. HASDM, JBH09, K-Index, PSD-dB, RBI, RFI-SFU, etc).
    /// Example: JBH09
    /// Constraints: Minimum length = 0, Maximum length = 32
    type: string;
    /// State indicating Issued (I), Nowcast (N), or Predicted (P) values for this record.
    /// Example: I
    /// Constraints: Minimum length = 0, Maximum length = 1
    state: SGI_Full_state_Enum;
    /// The name/location of the station that collected the geomagnetic data for this record.
    /// Example: Boulder
    /// Constraints: Minimum length = 0, Maximum length = 24
    stationName: string;
    /// Unique identifier of the reporting sensor.
    /// Example: 57c96c97-e076-48af-a068-73ee2cb37e65
    /// Constraints: Minimum length = 0, Maximum length = 36
    idSensor: string;
    /// Optional identifier provided by the reporting source to indicate the sensor identifier which produced this data. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origSensorId: string;
    /// The transmitted DCA mode of the record (1-3).
    /// Example: 1
    /// Constraints: No constraints specified.
    mode: int32;
    /// The precedence of data in this record (O = Immediate, P = Priority, R = Routine, Y = Emergency, Z = Flash).
    /// Example: R
    /// Constraints: Minimum length = 0, Maximum length = 1
    precedence: SGI_Full_precedence_Enum;
    /// Array containing the degree of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
    /// Example: [1, 2, 3]
    /// Constraints: No constraints specified.
    coeffDegree: [string];
    /// Array containing the order of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
    /// Example: [1, 2, 3]
    /// Constraints: No constraints specified.
    coeffOrder: [string];
    /// Array containing the cosine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
    /// Example: [1.23, 342.3, 1.32]
    /// Constraints: No constraints specified.
    ctce: [string];
    /// Array containing the sine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
    /// Example: [1.23, 342.3, 1.32]
    /// Constraints: No constraints specified.
    stce: [string];
    /// Array containing the cosine spherical-harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
    /// Example: [1.23, 342.3, 1.32]
    /// Constraints: No constraints specified.
    ctci: [string];
    /// Array containing the sine spherical harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
    /// Example: [1.23, 342.3, 1.32]
    /// Constraints: No constraints specified.
    stci: [string];
    /// Extreme Ultraviolet (EUV) proxy, E10.7, in x10-22 Watts per meter squared per Hertz, is the integrated solar EUV energy flux at the top of atmosphere and normalized to solar flux units.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    e10: double;
    /// E54 (E10-Bar), in x10-22 Watts per meter squared per Hertz, uses the past 54-days E10 values to determine the E10 average.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    e54: double;
    /// Daily S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    s10: double;
    /// 54 day S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    s54: double;
    /// Daily M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    m10: double;
    /// 54 day M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    m54: double;
    /// Daily Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    y10: double;
    /// 54 day Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    y54: double;
    /// Daily solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    f10: double;
    /// 54 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    f54: double;
    /// 81 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    f81: double;
    /// Ap is the planetary geomagnetic 2 nT index (00-21 UT) for the timespan specified in apDuration. If apDuration is null, a 3 hour duration should be assumed.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    ap: double;
    /// The time, in hours, for which the Ap index value is valid. If null, a span of 3 hours is assumed.
    /// Example: 3
    /// Constraints: No constraints specified.
    apDuration: int32;
    /// The maximum measured K-Index at the associated station during the kpDuration timespan. The K-Index is a unitless measure (0 - 9) of the deviation in the Earth's magnetic field from normal at the station geographic location, with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
    /// Example: 1
    /// Constraints: No constraints specified.
    kIndex: int32;
    /// The Planetary K-index (Kp) over the kpDuration timespan. The Kp-Index is the average K-Index for the entire Earth, utilizing a unitless scale (0-9, in incremenets of 1/3), with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
    /// Example: 4.66
    /// Constraints: No constraints specified.
    kp: double;
    /// The time, in hours, over which the K, Kp, and/or gamma index values are measured.  If null, a span of 3 hours is assumed.
    /// Example: 3
    /// Constraints: No constraints specified.
    kpDuration: int32;
    /// The maximum measured gamma deflection during the kpDuration timespan. If kpDuration is null, a 3 hour duration should be assumed.
    /// Example: 25
    /// Constraints: No constraints specified.
    gamma: int32;
    /// Disturbance Storm Time geomagnetic index in nT.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    dst: double;
    /// delta exospheric temperature correction in units of K.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    dtc: double;
    /// Region code for the associated radiation belt index. This is the code associated with the corresponding radiation belt location. See the provider card for reference to specific region code definitions.
    /// Example: 2
    /// Constraints: No constraints specified.
    rbRegionCode: int32;
    /// The value of the radiation belt index. This is the ratio of current intensity of a radiation belt to long-term average value. It's long-term average should be close to 1. Depending on the type of belt sensor, this ratio may measure Flux (number of particles / (cm^2 sec energy solid-angle)), dose rate (rad per second), or relative counts of particles per time (counts per second). The index value may also be normalized, the normalization value typically represents an average of the sensor measurements taken within a region over a given time interval. See the normFactor field for the specific normalization factor, if provided.
    /// Example: 1.02947164506
    /// Constraints: No constraints specified.
    rbIndex: double;
    /// The normalization factor that has already been applied to the index value prior to record ingest. Typically used to normalize the index value to a particular interval. Units of the normalization factor may vary depending on the provider of this data (REACH, POES, CEASE3, etc.).
    /// Example: 2.12679e-07
    /// Constraints: No constraints specified.
    normFactor: double;
    /// The timespan over which the associated radiation belt index is factored. If rbDuration is null, a 24 hour duration should be assumed. Note: rbDuration defines the length of the time window for this data record. The time window start time is defined by sgiDate, and the time window end time is defined by sgiDate plus rbDuration.
    /// Example: 24
    /// Constraints: No constraints specified.
    rbDuration: int32;
    /// Signal analyzer's input attenuation level, in decibels. Attenuation is a setting on the hardware that measures the power of a signal.
    /// Example: 5.1
    /// Constraints: No constraints specified.
    analyzerAttenuation: double;
    /// Observed baseline values of the frequencies specified in the frequencies field, in solar flux units. The baseline values will be used to help detect abnormal readings from the sun that might indicate a flare or other solar activity.
    /// Example: [15, 32, 25, 134, 0, 6, 19, 8]
    /// Constraints: No constraints specified.
    observedBaseline: [string];
    /// Array of individual power spectral density (PSD) frequencies of the signal, in megahertz. This array should correspond with the same-sized array of powers.
    /// Example: [25.0, 25.125, 25.25, 25.375, 25.5, 25.625, 25.75, 25.875]
    /// Constraints: No constraints specified.
    frequencies: [string];
    /// Array of individual power spectral density (PSD) powers of the signal, in watts. This array should correspond with the same-sized array of frequencies.
    /// Example: [67.1, 65.2, 68.1, 74.3, 68.1, 96.4, 97.3, 68.1]
    /// Constraints: No constraints specified.
    powers: [string];
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: rawFileURI
    /// Constraints: Minimum length = 0, Maximum length = 256
    rawFileURI: string;
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    transactionId: string;
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    tags: [string];
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: SGI_Full_dataMode_Enum;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    updatedAt: string;
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    updatedBy: string;
}
enum SGI_Full_state_Enum : byte {
    /// No description available.
    I,
    /// No description available.
    N,
    /// No description available.
    P
}

enum SGI_Full_precedence_Enum : byte {
    /// No description available.
    O,
    /// No description available.
    P,
    /// No description available.
    R,
    /// No description available.
    Y,
    /// No description available.
    Z
}

enum SGI_Full_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

