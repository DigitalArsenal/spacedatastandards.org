/// Stores the results of a particular Conjunction Assessment (CA) run.
table Conjunction_Full {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: CONJUNCTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// Unique identifier of the primary satellite on-orbit object, if correlated.
    /// Example: ONORBIT1-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idOnOrbit1: string;
    /// Unique identifier of the secondary satellite on-orbit object, if correlated.
    /// Example: ONORBIT2-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idOnOrbit2: string;
    /// The type of data represented in this conjunction record (e.g. CONJUNCTION, CARA-WORKLIST, etc.).  If type is null the record is assumed to be a Conjunction.
    /// Example: CONJUNCTION
    /// Constraints: Minimum length = 0, Maximum length = 24
    type: string;
    /// Time of closest approach (TCA) in UTC.
    /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    tca: string;
    /// Distance between objects at Time of Closest Approach (TCA) in meters.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    missDistance: double;
    /// Probability of Collision is the probability (denoted p, where 0.0<=p<=1.0), that Object1 and Object2 will collide.
    /// Example: 0.5
    /// Constraints: No constraints specified.
    collisionProb: double;
    /// The method that was used to calculate the collision probability, ex. FOSTER-1992.
    /// Example: FOSTER-1992
    /// Constraints: Minimum length = 0, Maximum length = 32
    collisionProbMethod: string;
    /// The filename of the primary (object1) ephemeris used in the screening, if applicable.
    /// Example: MEME_SPCFT_ABC_2180000_ops_nomnvr_unclassified.oem
    /// Constraints: Minimum length = 0, Maximum length = 64
    ephemName1: string;
    /// Unique identifier of the parent Ephemeris Set of the primary (object1) ephemeris used in the screening, if applicable.
    /// Example: a2ae2356-6d83-4e4b-896d-ddd1958800fa
    /// Constraints: Minimum length = 0, Maximum length = 36
    esId1: string;
    /// The filename of the secondary (object2) ephemeris used in the screening, if applicable.
    /// Example: MEME_SPCFT_DEF_2170000_ops_nomnvr_unclassified.txt
    /// Constraints: Minimum length = 0, Maximum length = 64
    ephemName2: string;
    /// Unique identifier of the parent Ephemeris Set of the secondary (object2) ephemeris used in the screening, if applicable.
    /// Example: 6fa31433-8beb-4b9b-8bf9-326dbd041c3f
    /// Constraints: Minimum length = 0, Maximum length = 36
    esId2: string;
    /// Distance between objects along Radial Vector at Time of Closest Approach in meters.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    relPosR: double;
    /// Distance between objects along Tangential Vector in meters.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    relPosT: double;
    /// Distance between objects along Normal vector in meters.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    relPosN: double;
    /// Closing velocity magnitude (relative speed) at Time of Closest Approach in meters/sec.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    relVelMag: double;
    /// Closing velocity between objects along Radial Vector at Time of Closest Approach in meters/sec.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    relVelR: double;
    /// Closing velocity between objects along Tangential Vector in meters/sec.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    relVelT: double;
    /// Closing velocity between objects along Normal Vector in meters/sec.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    relVelN: double;
    /// The start time in UTC of the screening period for the conjunction assessment.
    /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    screenEntryTime: string;
    /// The stop time in UTC of the screening period for the conjunction assessment.
    /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    screenExitTime: string;
    /// Component size of screen in X component of  RTN (Radial, Transverse and Normal) frame in meters.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    screenVolumeX: double;
    /// Component size of screen in Y component of  RTN (Radial, Transverse and Normal) frame in meters.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    screenVolumeY: double;
    /// Component size of screen in Z component of  RTN (Radial, Transverse and Normal) frame in meters.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    screenVolumeZ: double;
    /// The shape (BOX, ELLIPSOID) of the screening volume.
    /// Example: ELLIPSOID
    /// Constraints: Minimum length = 0, Maximum length = 12
    volShape: string;
    /// The time at which the secondary (object2) enters the screening volume, in ISO 8601 UTC format with microsecond precision.
    /// Example: 2021-01-01T01:02:01.123456Z
    /// Constraints: No constraints specified.
    volEntryTime: string;
    /// The time at which the secondary (object2) exits the screening volume, in ISO 8601 UTC format with microsecond precision.
    /// Example: 2021-01-01T01:02:28.123456Z
    /// Constraints: No constraints specified.
    volExitTime: string;
    /// Penetration Level Sigma.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    penetrationLevelSigma: double;
    /// Optional ID of the UDL State Vector at TCA of the primary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector1.
    /// Example: REF-STATEVECTOR1-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idStateVector1: string;
    /// Time of last positive metric observation of the primary satellite.
    /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    lastObTime1: string;
    /// The value of the primary (object1) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
    /// Example: 0.016386
    /// Constraints: No constraints specified.
    cdAoM1: double;
    /// The value of the primary (object1) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
    /// Example: 0.013814
    /// Constraints: No constraints specified.
    crAoM1: double;
    /// The primary (object1) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
    /// Example: 0.033814
    /// Constraints: No constraints specified.
    thrustAccel1: double;
    /// Optional ID of the UDL State Vector at TCA of the secondary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector2.
    /// Example: REF-STATEVECTOR2-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idStateVector2: string;
    /// Time of last positive metric observation of the secondary satellite.
    /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    lastObTime2: string;
    /// The value of the secondary (object2) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
    /// Example: 0.016386
    /// Constraints: No constraints specified.
    cdAoM2: double;
    /// The value of the secondary (object2) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
    /// Example: 0.013814
    /// Constraints: No constraints specified.
    crAoM2: double;
    /// The secondary (object2) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
    /// Example: 0.033814
    /// Constraints: No constraints specified.
    thrustAccel2: double;
    /// Additional notes from data providers.
    /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    comments: string;
    /// Commander's critical information requirements notes.
    /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 128
    ccir: string;
    /// Emergency comments.
    /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    concernNotes: string;
    /// Flag indicating if State department was notified.
    /// Example: False
    /// Constraints: No constraints specified.
    stateDeptNotified: bool;
    /// Flag indicating if owner was contacted.
    /// Example: False
    /// Constraints: No constraints specified.
    ownerContacted: bool;
    /// Link to filename associated with JMS record.
    /// Example: Example link
    /// Constraints: Minimum length = 0, Maximum length = 64
    rawFileURI: string;
    /// Spacecraft name(s) for which the Collision message is provided.
    /// Example: Message for space craft A
    /// Constraints: Minimum length = 0, Maximum length = 64
    messageFor: string;
    /// JMS provided message ID link.
    /// Example: MESSAGE-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    messageId: string;
    /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    /// Example: False
    /// Constraints: No constraints specified.
    uvwWarn: bool;
    /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    /// Example: False
    /// Constraints: No constraints specified.
    smallRelVelWarning: bool;
    /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    /// Example: False
    /// Constraints: No constraints specified.
    largeRelPosWarning: bool;
    /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    /// Example: False
    /// Constraints: No constraints specified.
    smallCovWarning: bool;
    /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    /// Example: False
    /// Constraints: No constraints specified.
    largeCovWarning: bool;
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    transactionId: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// Creating agency or owner/operator (may be different than provider who submitted the conjunction message).
    /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    originator: string;
    /// Optional source-provided identifier for this conjunction event. In the case where multiple conjunction records are submitted for the same event, this field can be used to tie them together to the same event.
    /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    eventId: string;
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: sample_descriptor here
    /// Constraints: Minimum length = 0, Maximum length = 64
    descriptor: string;
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG1']
    /// Constraints: No constraints specified.
    tags: [string];
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: Conjunction_Full_dataMode_Enum;
    /// Time the row was created in the database.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// No description provided.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    stateVector1: string;
    /// No description provided.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    stateVector2: string;
    /// Satellite/catalog number of the target on-orbit primary object.
    /// Example: 1
    /// Constraints: No constraints specified.
    satNo1: int32;
    /// Satellite/catalog number of the target on-orbit secondary object.
    /// Example: 2
    /// Constraints: No constraints specified.
    satNo2: int32;
    /// No description provided.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    onOrbit1: string;
    /// No description provided.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    onOrbit2: string;
    /// Optional place holder for an OnOrbit ID that does not exist in UDL.
    /// Example: ORIGONORBIT1-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    origIdOnOrbit1: string;
    /// Optional place holder for an OnOrbit ID that does not exist in UDL.
    /// Example: ORIGONORBIT2-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    origIdOnOrbit2: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    origNetwork: string;
}
enum Conjunction_Full_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

