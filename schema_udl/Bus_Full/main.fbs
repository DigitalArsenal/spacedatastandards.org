/// A bus is the physical and software infrastructure backbone to which on-orbit satellite payloads are attached for power, control, and other support functions.
table Bus_Full {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: BUS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Name of this bus.
    /// Example: Example name
    /// Constraints: Minimum length = 1, Maximum length = 128
    name: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// ID of the parent entity for this bus.
    /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    /// Constraints: Minimum length = 0, Maximum length = 36
    idEntity: string;
    /// Type of this bus.
    /// Example: Example type
    /// Constraints: Minimum length = 0, Maximum length = 128
    type: string;
    /// Maximum mass at launch, lower bounds, in kilograms.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    maxLaunchMassLower: double;
    /// Maximum mass at launch, upper bounds, in kilograms.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    maxLaunchMassUpper: double;
    /// Maximum mass on station at beginning of life, in kilograms.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    maxBOLStationMass: double;
    /// Average mass available on this bus for payloads, in kilograms.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    avgPayloadMass: double;
    /// Maximum payload mass available, in kilograms.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    maxPayloadMass: double;
    /// Minimum mass of this bus without payloads or fuel, in kilograms.
    /// Example: 2858.1
    /// Constraints: No constraints specified.
    minDryMass: double;
    /// Average mass of this bus without payloads or fuel, in kilograms.
    /// Example: 2879.1
    /// Constraints: No constraints specified.
    avgDryMass: double;
    /// Median mass of this bus without payloads or fuel, in kilograms.
    /// Example: 2950.1
    /// Constraints: No constraints specified.
    medianDryMass: double;
    /// Maximum mass of this bus without payloads or fuel, in kilograms.
    /// Example: 2900.1
    /// Constraints: No constraints specified.
    maxDryMass: double;
    /// Minimum mass of this bus with fuel, but without payloads, in kilograms.
    /// Example: 5192.1
    /// Constraints: No constraints specified.
    minWetMass: double;
    /// Average mass of this bus with fuel, but without payloads, in kilograms.
    /// Example: 5246.1
    /// Constraints: No constraints specified.
    avgWetMass: double;
    /// Median mass of this bus with fuel, but without payloads, in kilograms.
    /// Example: 5260.1
    /// Constraints: No constraints specified.
    medianWetMass: double;
    /// Maximum mass of this bus with fuel, but without payloads, in kilograms.
    /// Example: 5300.0
    /// Constraints: No constraints specified.
    maxWetMass: double;
    /// Maximum power at beginning of life, lower bounds, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    maxBOLPowerLower: double;
    /// Maximum power at beginning of life, upper bounds, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    maxBOLPowerUpper: double;
    /// Maximum power at end of life, lower bounds, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    maxEOLPowerLower: double;
    /// Maximum power at end of life, upper bounds, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    maxEOLPowerUpper: double;
    /// Average power available on this bus, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    avgSpacecraftPower: double;
    /// Maximum power available on this bus, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    maxSpacecraftPower: double;
    /// Orbit averaged power (the power averaged over one orbit) available on this bus, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    oapSpacecraftPower: double;
    /// Average power available on this bus for payloads, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    avgPayloadPower: double;
    /// Maximum payload power available, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    maxPayloadPower: double;
    /// Orbit averaged power (the power averaged over one orbit) available on this bus for payloads, in kilowatts.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    oapPayloadPower: double;
    /// Body dimension in X direction pertaining to length, in meters.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    bodyDimensionX: double;
    /// Body dimension in Y direction pertaining to height, in meters.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    bodyDimensionY: double;
    /// Body dimension in Z direction pertaining to width, in meters.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    bodyDimensionZ: double;
    /// The radial dimension available on this bus for payloads, in meters.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    payloadDimensionX: double;
    /// The in-track dimension available on this bus for payloads, in meters.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    payloadDimensionY: double;
    /// The cross-track dimension available on this bus for payloads, in meters.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    payloadDimensionZ: double;
    /// The volume available on this bus for payloads, in cubic meters.
    /// Example: 1.1
    /// Constraints: No constraints specified.
    payloadVolume: double;
    /// Launch envelope dimension in X direction, in meters.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    launchEnvelopeDimensionX: double;
    /// Launch envelope dimension in Y direction, in meters.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    launchEnvelopeDimensionY: double;
    /// Launch envelope dimension in Z direction, in meters.
    /// Example: 10.1
    /// Constraints: No constraints specified.
    launchEnvelopeDimensionZ: double;
    /// The number of orbit types this bus can support.
    /// Example: 3
    /// Constraints: No constraints specified.
    numOrbitType: int32;
    /// Array of orbit types this bus can support (e.g. GEO, LEO, etc.). Must contain the same number of elements as the value of numOrbitType.
    /// Example: ['LEO', 'HEO', 'GEO']
    /// Constraints: No constraints specified.
    orbitTypes: [string];
    /// Unique identifier of the organization which manufactures the telemetry tracking and command subsystem for this bus.
    /// Example: TELEMETRYTRACKINGMANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    telemetryTrackingManufacturerOrgId: string;
    /// Unique identifier of the organization which manufactures the main onboard computer for this bus.
    /// Example: MAINCOMPUTERMANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    mainComputerManufacturerOrgId: string;
    /// Unique identifier of the organization which manufactures this bus.
    /// Example: MANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    manufacturerOrgId: string;
    /// Unique identifier of the organization which designs the bus kit.
    /// Example: BUSKITDESIGNERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    busKitDesignerOrgId: string;
    /// Country where this bus was manufactured. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    countryCode: string;
    /// Mass category of this bus (e.g. 1 - 10 kg: Nanosatellite, 10 - 100 kg: Microsatellite, 100 - 500 kg: Minisatellite, 1000 - 2500kg: Medium satellite, etc.).
    /// Example: Nanosatellite
    /// Constraints: Minimum length = 0, Maximum length = 64
    massCategory: string;
    /// Power category of this bus (e.g. 0-1kW low power, etc).
    /// Example: low power
    /// Constraints: Minimum length = 0, Maximum length = 64
    powerCategory: string;
    /// Boolean indicating if this bus is generic.
    /// Example: False
    /// Constraints: No constraints specified.
    generic: bool;
    /// Notes/description of the bus.
    /// Example: Dedicated small spacecraft bus.
    /// Constraints: Minimum length = 0, Maximum length = 128
    description: string;
    /// Attitude and Orbital Control Notes/description for the bus.
    /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    aocsNotes: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: Bus_Full_dataMode_Enum;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    updatedAt: string;
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    updatedBy: string;
    /// No description provided.
    /// Example: No example provided.
    /// Constraints: No constraints specified.
    entity: string;
}
enum Bus_Full_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

