/// Model representation of observation data for passive radar based sensor phenomenologies. Passive radar is a form of radar that instead of using a dedicated transmitter, as is the case for traditional radar, utilizes radio frequency (RF) energy already in the environment. With an abundance of existing energy available from geographically diverse sources, passive radar offers wide field of view coverage and long observation times. A passive radar system is comprised of separately located transmitter (for example, FM radio stations), a reference receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over a broad angular extent as well as providing a signal at the reference site. The reflected energy is received at the surveillance site for processing with the reference signal. The long observation durations that are possible with this technology enables an accurate orbit to be determined within a single pass.
table PassiveRadarObservation_Ingest {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// Ob detection time in ISO 8601 UTC with microsecond precision.
    /// Example: 2023-01-24T23:35:26.518152Z
    /// Constraints: No constraints specified.
    obTime: string;
    /// Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
    /// Example: 40699
    /// Constraints: Minimum length = 0, Maximum length = 36
    idOnOrbit: string;
    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: 40699
    /// Constraints: No constraints specified.
    satNo: int32;
    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origObjectId: string;
    /// Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
    /// Example: OCULUSA
    /// Constraints: Minimum length = 0, Maximum length = 36
    idSensor: string;
    /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origSensorId: string;
    /// Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
    /// Example: RED_CLIFFS_3ABCRN
    /// Constraints: Minimum length = 0, Maximum length = 36
    idRFEmitter: string;
    /// Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
    /// Example: OculusRef1
    /// Constraints: Minimum length = 0, Maximum length = 36
    idSensorRefReceiver: string;
    /// Optional external observation identifier provided by the source.
    /// Example: 26892
    /// Constraints: Minimum length = 0, Maximum length = 36
    extObservationId: string;
    /// Optional identifier to indicate the specific tasking which produced this observation.
    /// Example: TASK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    taskId: string;
    /// Unique identifier of a track that represents a tracklet for this observation.
    /// Example: 12212
    /// Constraints: Minimum length = 0, Maximum length = 36
    trackId: string;
    /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
    /// Example: FIRST
    /// Constraints: Minimum length = 0, Maximum length = 8
    obPosition: string;
    /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: False
    /// Constraints: No constraints specified.
    uct: bool;
    /// Line of sight azimuth angle in degrees and topocentric frame.
    /// Example: 134.5
    /// Constraints: No constraints specified.
    azimuth: double;
    /// One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
    /// Example: 0.5
    /// Constraints: No constraints specified.
    azimuthUnc: double;
    /// Sensor azimuth angle bias in degrees.
    /// Example: 0.123
    /// Constraints: No constraints specified.
    azimuthBias: double;
    /// Rate of change of the line of sight azimuth in degrees per second.
    /// Example: 0.5
    /// Constraints: No constraints specified.
    azimuthRate: double;
    /// Line of sight elevation in degrees and topocentric frame.
    /// Example: 76.1
    /// Constraints: No constraints specified.
    elevation: double;
    /// One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
    /// Example: 0.5
    /// Constraints: No constraints specified.
    elevationUnc: double;
    /// Sensor elevation bias in degrees.
    /// Example: 0.123
    /// Constraints: No constraints specified.
    elevationBias: double;
    /// Rate of change of the line of sight elevation in degrees per second.
    /// Example: 0.5
    /// Constraints: No constraints specified.
    elevationRate: double;
    /// The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).
    /// Example: 0.00505820232809312
    /// Constraints: No constraints specified.
    delay: double;
    /// One sigma uncertainty in the delay measurement, in seconds.
    /// Example: 3.1e-06
    /// Constraints: No constraints specified.
    delayUnc: double;
    /// Delay bias in seconds.
    /// Example: 1.23e-06
    /// Constraints: No constraints specified.
    delayBias: double;
    /// Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.
    /// Example: 754.8212
    /// Constraints: No constraints specified.
    bistaticRange: double;
    /// One sigma uncertainty in bistatic range in kilometers.
    /// Example: 5.1
    /// Constraints: No constraints specified.
    bistaticRangeUnc: double;
    /// Sensor bistatic range bias in kilometers.
    /// Example: 2.34
    /// Constraints: No constraints specified.
    bistaticRangeBias: double;
    /// Rate of change of the bistatic path in kilometers/sec.
    /// Example: -0.30222
    /// Constraints: No constraints specified.
    bistaticRangeRate: double;
    /// One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.
    /// Example: 0.123
    /// Constraints: No constraints specified.
    bistaticRangeRateUnc: double;
    /// Bistatic range acceleration in kilometers/sec^2.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    bistaticRangeAccel: double;
    /// One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.
    /// Example: 0.1
    /// Constraints: No constraints specified.
    bistaticRangeAccelUnc: double;
    /// Doppler measurement in hertz.
    /// Example: -101.781641000597
    /// Constraints: No constraints specified.
    doppler: double;
    /// One sigma uncertainty in the Doppler measurement in hertz.
    /// Example: 0.2
    /// Constraints: No constraints specified.
    dopplerUnc: double;
    /// Coning angle in degrees.
    /// Example: 60.1
    /// Constraints: No constraints specified.
    coning: double;
    /// One sigma uncertainty in the coning angle measurement, in degrees.
    /// Example: 0.5
    /// Constraints: No constraints specified.
    coningUnc: double;
    /// Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.
    /// Example: 0.00592856674135648
    /// Constraints: No constraints specified.
    tof: double;
    /// One sigma uncertainty in time of flight in seconds.
    /// Example: 3.1e-06
    /// Constraints: No constraints specified.
    tofUnc: double;
    /// The Time of Flight (TOF) bias in seconds.
    /// Example: 1.23e-06
    /// Constraints: No constraints specified.
    tofBias: double;
    /// The target Acceleration measurement in kilometers/sec^2 for this observation.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    accel: double;
    /// The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
    /// Example: 0.1
    /// Constraints: No constraints specified.
    accelUnc: double;
    /// Line of sight right ascension in degrees and J2000 coordinate frame.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    ra: double;
    /// Line of sight declination angle in degrees and J2000 coordinate frame.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    declination: double;
    /// WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).
    /// Example: -35.1181763996856
    /// Constraints: Minimum value = -90, Maximum value = 90
    lat: double;
    /// WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: 139.613567052763
    /// Constraints: Minimum value = -180, Maximum value = 180
    lon: double;
    /// The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
    /// Example: 478.056378
    /// Constraints: No constraints specified.
    alt: double;
    /// X velocity of target in kilometers/sec in J2000 coordinate frame.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    xvel: double;
    /// Y velocity of target in kilometers/sec in J2000 coordinate frame.
    /// Example: 3.21
    /// Constraints: No constraints specified.
    yvel: double;
    /// Z velocity of target in kilometers/sec in J2000 coordinate frame.
    /// Example: 3.12
    /// Constraints: No constraints specified.
    zvel: double;
    /// Radar cross section in meters squared for polarization principal.
    /// Example: 100.23
    /// Constraints: No constraints specified.
    rcs: double;
    /// One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    rcsUnc: double;
    /// Radar cross section in meters squared for orthogonal polarization.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    orthogonalRcs: double;
    /// One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    orthogonalRcsUnc: double;
    /// Signal to noise ratio, in dB.
    /// Example: 17.292053
    /// Constraints: No constraints specified.
    snr: double;
    /// Sensor timing bias in seconds.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    timingBias: double;
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    tags: [string];
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    transactionId: string;
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: Descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    descriptor: string;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    sourceDL: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: PassiveRadarObservation_Ingest_dataMode_Enum;
    /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
    /// Example: RADAR
    /// Constraints: No constraints specified.
    type: string;
}
enum PassiveRadarObservation_Ingest_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

