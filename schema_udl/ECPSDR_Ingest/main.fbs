/// Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle (ECP) Sensors.  SDR contains sensor status telemetry and raw dosimeter measurements of the space environment.
table ECPSDR_Ingest {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: ECPSDR-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// Unique identifier of the on-orbit satellite hosting the sensor.
    /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idOnOrbit: string;
    /// Satellite/catalog number of the on-orbit satellite hosting the sensor.
    /// Example: 101
    /// Constraints: No constraints specified.
    satNo: int32;
    /// Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    origObjectId: string;
    /// Unique identifier of the reporting sensor.
    /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idSensor: string;
    /// Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origSensorId: string;
    /// The type of data associated with this record (STANDARD, TRANSIENT).
    /// Example: STANDARD
    /// Constraints: Minimum length = 1, Maximum length = 12
    type: string;
    /// Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    msgTime: string;
    /// Time of the observation, in ISO 8601 UTC format with millisecond precision.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    obTime: string;
    /// Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).
    /// Example: True
    /// Constraints: No constraints specified.
    retransmit: bool;
    /// The sensor mode associated with this measurements (NORMAL, TEST).
    /// Example: TEST
    /// Constraints: Minimum length = 0, Maximum length = 12
    senMode: string;
    /// Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.
    /// Example: 12
    /// Constraints: No constraints specified.
    dosBias: int32;
    /// Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
    /// Example: 12
    /// Constraints: No constraints specified.
    asl5VCurrMon: int32;
    /// Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
    /// Example: 12
    /// Constraints: No constraints specified.
    dsl5VCurrMon: int32;
    /// Power supply temperature monitor.  This is sensor status telemetry.
    /// Example: 12
    /// Constraints: No constraints specified.
    psTempMon: int32;
    /// CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.
    /// Example: 12
    /// Constraints: No constraints specified.
    cdsPlateVMon: int32;
    /// CDS reference voltage monitor.  See vRef for conversion factor to Volts.
    /// Example: 12
    /// Constraints: No constraints specified.
    cdsRefVMon: int32;
    /// Unitless sensor mounting plate temperature.
    /// Example: 12
    /// Constraints: No constraints specified.
    mpTemp: int32;
    /// Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.
    /// Example: 12
    /// Constraints: No constraints specified.
    vRef: int32;
    /// Photodiode 1 signal level.
    /// Example: 12
    /// Constraints: No constraints specified.
    pd1SigLev: int32;
    /// Photodiode 2 signal level.
    /// Example: 12
    /// Constraints: No constraints specified.
    pd2SigLev: int32;
    /// Number of ESD triggers, low byte of 2-byte counter.
    /// Example: 12
    /// Constraints: No constraints specified.
    esdTrigCountL: int32;
    /// Number of ESD triggers, high byte of 2-byte counter.
    /// Example: 12
    /// Constraints: No constraints specified.
    esdTrigCountH: int32;
    /// LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.
    /// Example: 2
    /// Constraints: No constraints specified.
    lowLetL: int32;
    /// LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.
    /// Example: 2
    /// Constraints: No constraints specified.
    lowLetM: int32;
    /// MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.
    /// Example: 2
    /// Constraints: No constraints specified.
    medLet1L: int32;
    /// MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.
    /// Example: 2
    /// Constraints: No constraints specified.
    medLet1M: int32;
    /// MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.
    /// Example: 2
    /// Constraints: No constraints specified.
    medLet2L: int32;
    /// MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.
    /// Example: 2
    /// Constraints: No constraints specified.
    medLet2M: int32;
    /// MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.
    /// Example: 2
    /// Constraints: No constraints specified.
    medLet3L: int32;
    /// MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.
    /// Example: 2
    /// Constraints: No constraints specified.
    medLet3M: int32;
    /// MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.
    /// Example: 2
    /// Constraints: No constraints specified.
    medLet4L: int32;
    /// MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.
    /// Example: 2
    /// Constraints: No constraints specified.
    medLet4M: int32;
    /// HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.
    /// Example: 2
    /// Constraints: No constraints specified.
    hiLetL: int32;
    /// Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.
    /// Example: 2
    /// Constraints: No constraints specified.
    hiLetM: int32;
    /// Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.
    /// Example: 12
    /// Constraints: No constraints specified.
    surfDosL: int32;
    /// Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.
    /// Example: 12
    /// Constraints: No constraints specified.
    surfDosM: int32;
    /// Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.
    /// Example: 12
    /// Constraints: No constraints specified.
    surfDosH: int32;
    /// Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.
    /// Example: 12
    /// Constraints: No constraints specified.
    surfDosChargeL: int32;
    /// Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.
    /// Example: 12
    /// Constraints: No constraints specified.
    surfDosChargeH: int32;
    /// Surface dosimeter status byte.
    /// Example: 2
    /// Constraints: No constraints specified.
    surfDosStat: int32;
    /// CDS throttle number of seconds between CDS transient capture readouts.
    /// Example: 12
    /// Constraints: No constraints specified.
    cdsThrottle: int32;
    /// CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.
    /// Example: 12
    /// Constraints: No constraints specified.
    cdsThreshold: int32;
    /// Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
    /// Example: 12
    /// Constraints: No constraints specified.
    checksum: int32;
    /// Array of 144 digitized samples of ESD waveform for transient packets.
    /// Example: [1, 2, 3]
    /// Constraints: No constraints specified.
    transientData: [string];
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: ECPSDR_Ingest_dataMode_Enum;
}
enum ECPSDR_Ingest_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

