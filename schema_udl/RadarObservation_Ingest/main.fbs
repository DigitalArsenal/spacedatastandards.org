/// Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
table RadarObservation_Ingest {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: RADAROBSERVATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// Ob detection time in ISO 8601 UTC with microsecond precision.
    /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    obTime: string;
    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idOnOrbit: string;
    /// Unique identifier of the reporting sensor.
    /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    idSensor: string;
    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: 1
    /// Constraints: No constraints specified.
    satNo: int32;
    /// Optional identifier to indicate the specific tasking which produced this observation.
    /// Example: TASK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    taskId: string;
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    transactionId: string;
    /// Optional identifier of the track to which this observation belongs.
    /// Example: TRACK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    trackId: string;
    /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
    /// Example: FIRST
    /// Constraints: Minimum length = 0, Maximum length = 8
    obPosition: string;
    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origObjectId: string;
    /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    origSensorId: string;
    /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: True
    /// Constraints: No constraints specified.
    uct: bool;
    /// azimuth angle in degrees and topocentric frame.
    /// Example: 45.23
    /// Constraints: No constraints specified.
    azimuth: double;
    /// One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
    /// Example: 45.23
    /// Constraints: No constraints specified.
    azimuthUnc: double;
    /// Sensor azimuth angle bias in degrees.
    /// Example: 45.23
    /// Constraints: No constraints specified.
    azimuthBias: double;
    /// Rate of change of the line of sight azimuth in degrees per second.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    azimuthRate: double;
    /// Line of sight elevation in degrees and topocentric frame.
    /// Example: 45.23
    /// Constraints: No constraints specified.
    elevation: double;
    /// One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    elevationUnc: double;
    /// Sensor elevation bias in degrees.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    elevationBias: double;
    /// Rate of change of the line of sight elevation in degrees per second.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    elevationRate: double;
    /// Target range in km.
    /// Example: 100.23
    /// Constraints: No constraints specified.
    range: double;
    /// Range accelaration in km/s2.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    rangeAccel: double;
    /// One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).
    /// Example: 1.23
    /// Constraints: No constraints specified.
    rangeAccelUnc: double;
    /// One sigma uncertainty in the range measurement, in kilometers.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    rangeUnc: double;
    /// Sensor range bias in km.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    rangeBias: double;
    /// Rate of change of the line of sight range in km/sec.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    rangeRate: double;
    /// One sigma uncertainty in the range rate measurement, in kilometers/second.
    /// Example: 0.5
    /// Constraints: No constraints specified.
    rangeRateUnc: double;
    /// Corrected doppler measurement in meters per second.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    doppler: double;
    /// One sigma uncertainty in the corrected doppler measurement, in meters/second.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    dopplerUnc: double;
    /// Line of sight right ascension in degrees and J2000 coordinate frame.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    ra: double;
    /// Line of sight declination angle in degrees and J2000 coordinate frame.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    declination: double;
    /// X position of target in km in J2000 coordinate frame.
    /// Example: 50.23
    /// Constraints: No constraints specified.
    x: double;
    /// Y position of target in km in J2000 coordinate frame.
    /// Example: 50.23
    /// Constraints: No constraints specified.
    y: double;
    /// Z position of target in km in J2000 coordinate frame.
    /// Example: 50.23
    /// Constraints: No constraints specified.
    z: double;
    /// X velocity of target in km/sec in J2000 coordinate frame.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    xvel: double;
    /// Y velocity of target in km/sec in J2000 coordinate frame.
    /// Example: 5.23
    /// Constraints: No constraints specified.
    yvel: double;
    /// Z velocity of target in km/sec in J2000 coordinate frame.
    /// Example: 5.23
    /// Constraints: No constraints specified.
    zvel: double;
    /// Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
    /// Example: 45.23
    /// Constraints: No constraints specified.
    senx: double;
    /// Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
    /// Example: 40.23
    /// Constraints: No constraints specified.
    seny: double;
    /// Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
    /// Example: 35.23
    /// Constraints: No constraints specified.
    senz: double;
    /// Radar cross section in meters squared for polarization principal.
    /// Example: 100.23
    /// Constraints: No constraints specified.
    rcs: double;
    /// one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    rcsUnc: double;
    /// Radar cross section in meters squared for orthogonal polarization.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    orthogonalRcs: double;
    /// one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    orthogonalRcsUnc: double;
    /// Signal to noise ratio, in dB.
    /// Example: 0.5
    /// Constraints: No constraints specified.
    snr: double;
    /// ID of the beam that produced this observation.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    beam: double;
    /// Sensor timing bias in seconds.
    /// Example: 1.23
    /// Constraints: No constraints specified.
    timingBias: double;
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: rawFileURI
    /// Constraints: Minimum length = 0, Maximum length = 256
    rawFileURI: string;
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: RadarObservation_Ingest_dataMode_Enum;
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    tags: [string];
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
    /// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
    /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    senReferenceFrame: RadarObservation_Ingest_senReferenceFrame_Enum;
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    descriptor: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    sourceDL: string;
    /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
    /// Example: RADAR
    /// Constraints: No constraints specified.
    type: string;
}
enum RadarObservation_Ingest_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

enum RadarObservation_Ingest_senReferenceFrame_Enum : byte {
    /// No description available.
    J2000,
    /// No description available.
    EFG/TDR,
    /// No description available.
    ECR/ECEF,
    /// No description available.
    TEME,
    /// No description available.
    ITRF,
    /// No description available.
    GCRF
}

