/// Details for a particular RF Emitter, collected by a particular source. An RF Emitter may have multiple details records from various sources.
table RFEmitterDetails_Abridged {
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: RFEMITTERDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    id: string;
    /// Unique identifier of the parent RF Emitter.
    /// Example: RFEMITTER-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    idRFEmitter: string;
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    classificationMarking: string;
    /// Designator of this RF Emitter.
    /// Example: DESIGNATOR
    /// Constraints: Minimum length = 0, Maximum length = 128
    designator: string;
    /// Optional alternate name or alias for this RF Emitter.
    /// Example: ALTERNATE_NAME
    /// Constraints: Minimum length = 0, Maximum length = 128
    altName: string;
    /// Family of this RF Emitter type.
    /// Example: FAMILY
    /// Constraints: Minimum length = 0, Maximum length = 128
    family: string;
    /// Name of the production facility for this RF Emitter.
    /// Example: PRODUCTION_FACILITY
    /// Constraints: Minimum length = 0, Maximum length = 128
    productionFacilityName: string;
    /// Alternate facility name for this RF Emitter.
    /// Example: ALTERNATE_FACILITY_NAME
    /// Constraints: Minimum length = 0, Maximum length = 128
    alternateFacilityName: string;
    /// Unique identifier of the organization which manufactures this RF Emitter.
    /// Example: MANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    manufacturerOrgId: string;
    /// Unique identifier of the location of the production facility for this RF Emitter.
    /// Example: PRODUCTIONFACILITYLOCATION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    productionFacilityLocationId: string;
    /// Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. Start sensitivity range, in dBm.
    /// Example: 50.23
    /// Constraints: No constraints specified.
    systemSensitivityStart: double;
    /// Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. End sensitivity range, in dBm.
    /// Example: 150.23
    /// Constraints: No constraints specified.
    systemSensitivityEnd: double;
    /// Type or name of receiver.
    /// Example: RECEIVER_TYPE
    /// Constraints: Minimum length = 0, Maximum length = 64
    receiverType: string;
    /// Receiver sensitivity in dBm.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    receiverSensitivity: double;
    /// Receiver bandwidth in Mhz.
    /// Example: 15.23
    /// Constraints: No constraints specified.
    receiverBandwidth: double;
    /// Transmitter frequency in Mhz.
    /// Example: 105.9
    /// Constraints: No constraints specified.
    transmitterFrequency: double;
    /// Transmitter bandwidth in Mhz.
    /// Example: 0.125
    /// Constraints: No constraints specified.
    transmitterBandwidth: double;
    /// Transmit power in Watts.
    /// Example: 100.23
    /// Constraints: No constraints specified.
    transmitPower: double;
    /// Barrage noise bandwidth in Mhz.
    /// Example: 5.23
    /// Constraints: No constraints specified.
    barrageNoiseBandwidth: double;
    /// Doppler noise value in Mhz.
    /// Example: 10.23
    /// Constraints: No constraints specified.
    dopplerNoise: double;
    /// Digital Form Radio Memory instantaneous bandwidth in Mhz.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    drfmInstantaneousBandwidth: double;
    /// Number of channels.
    /// Example: 10
    /// Constraints: No constraints specified.
    numChannels: int32;
    /// Number of bits.
    /// Example: 256
    /// Constraints: No constraints specified.
    numBits: int32;
    /// Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
    /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    antennaSize: [string];
    /// For parabolic/dish antennas, the diameter of the antenna in meters.
    /// Example: 20.23
    /// Constraints: No constraints specified.
    antennaDiameter: double;
    /// Notes on the RF Emitter.
    /// Example: NOTES
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    notes: string;
    /// Secondary notes on the RF Emitter.
    /// Example: MORE_NOTES
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    secondaryNotes: string;
    /// Detailed description of the RF Emitter.
    /// Example: DESCRIPTION
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    description: string;
    /// Array of URLs containing additional information on this RF Emitter.
    /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    urls: [string];
    /// Source of the data.
    /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    source: string;
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    origin: string;
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    origNetwork: string;
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    dataMode: RFEmitterDetails_Abridged_dataMode_Enum;
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    createdAt: string;
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    createdBy: string;
}
enum RFEmitterDetails_Abridged_dataMode_Enum : byte {
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    REAL,
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TEST,
    /// Synthetic data generated by a model to mimic real-world datasets.
    SIMULATED,
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EXERCISE
}

